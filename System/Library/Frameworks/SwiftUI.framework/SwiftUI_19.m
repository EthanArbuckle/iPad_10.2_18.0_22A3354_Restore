uint64_t sub_1877E1470()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t IsSectionHeaderTrait;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t IsCompactTabRepresentationTrait;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t, uint64_t);
  void (*v55)(_QWORD, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  *(_BYTE *)(v6 - 216) = 1;
  *(_QWORD *)(v6 - 232) = v1;
  *(_QWORD *)(v6 - 224) = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0[9], v6 - 232);
  v9 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  *(_QWORD *)(v6 - 248) = v8;
  *(_QWORD *)(v6 - 240) = v9;
  v0[81] = MEMORY[0x18D75FFDC](v7, v0[10], v6 - 248);
  v0[82] = &protocol witness table for _ContainerValueWritingModifier<A>;
  v10 = v7;
  v11 = v7;
  v12 = v0[6];
  v13 = MEMORY[0x18D75FFDC](v10, v12, v0 + 81);
  v14 = v0[5];
  View._trait<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v0[15] + 8))(v5, v12);
  IsSectionHeaderTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>();
  v0[79] = v13;
  v0[80] = IsSectionHeaderTrait;
  v16 = v11;
  v17 = v0[7];
  v18 = MEMORY[0x18D75FFDC](v11, v17, v0 + 79);
  v19 = v0[4];
  View.styleContext<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v0[14] + 8))(v14, v17);
  v20 = lazy protocol witness table accessor for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>();
  v0[77] = v18;
  v0[78] = v20;
  v21 = v16;
  v22 = v0[8];
  v23 = MEMORY[0x18D75FFDC](v16, v22, v0 + 77);
  v24 = v0[36];
  View.removeTag<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v0[12] + 8))(v19, v22);
  v25 = MEMORY[0x1E0CE52E0];
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v0[11]);
  v0[75] = v23;
  v0[76] = v26;
  v27 = MEMORY[0x18D75FFDC](v21, v0[13], v0 + 75);
  v28 = MEMORY[0x18D75FFDC](v25, v0[16]);
  v0[73] = v27;
  v0[74] = v28;
  v29 = v0[17];
  v30 = MEMORY[0x18D75FFDC](v21, v29, v0 + 73);
  v0[20] = v30;
  static ViewBuilder.buildExpression<A>(_:)(v24, v29, v30);
  v31 = *(void (**)(uint64_t, uint64_t))(v0[42] + 8);
  v0[39] = v31;
  v31(v24, v29);
  v32 = v0[32];
  v33 = v0[44];
  View.tabPlatformIdentified()(v0[43], v33);
  *(_BYTE *)(v6 - 216) = 1;
  v0[71] = v33;
  v0[72] = v9;
  v34 = v0[31];
  v35 = MEMORY[0x18D75FFDC](v21, v34, v0 + 71);
  v36 = v0[30];
  View._trait<A>(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v0[34] + 8))(v32, v34);
  IsCompactTabRepresentationTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>();
  v0[69] = v35;
  v0[70] = IsCompactTabRepresentationTrait;
  v38 = v0[29];
  v39 = MEMORY[0x18D75FFDC](v21, v38, v0 + 69);
  v40 = v0[24];
  View.removeTag<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v0[33] + 8))(v36, v38);
  v0[67] = v39;
  v0[68] = v26;
  v0[65] = MEMORY[0x18D75FFDC](v21, v0[26], v0 + 67);
  v0[66] = v28;
  v41 = v21;
  v42 = v0[27];
  v43 = MEMORY[0x18D75FFDC](v41, v42, v0 + 65);
  v44 = v0[25];
  static ViewBuilder.buildExpression<A>(_:)(v40, v42, v43);
  v45 = v0[28];
  v46 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v0[47] = v46;
  v47 = v40;
  v46(v40, v42);
  v49 = v0[37];
  v48 = v0[38];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[40] + 16))(v49, v0[46], v48);
  *(_QWORD *)(v6 - 216) = v49;
  v50 = v0[41];
  v51 = v0[36];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[42] + 16))(v51, v50, v29);
  *(_QWORD *)(v6 - 208) = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v47, v44, v42);
  *(_QWORD *)(v6 - 200) = v47;
  v0[62] = v48;
  v0[63] = v29;
  v0[64] = v42;
  v52 = v0[20];
  v0[59] = v0[21];
  v0[60] = v52;
  v0[61] = v43;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t *)(v6 - 216), 3uLL, (uint64_t)(v0 + 62));
  v53 = (void (*)(uint64_t, uint64_t))v0[47];
  v53(v44, v42);
  v54 = (void (*)(uint64_t, uint64_t))v0[39];
  v54(v50, v29);
  v55 = (void (*)(_QWORD, uint64_t))v0[22];
  v55(v0[46], v48);
  v53(v47, v42);
  v54(v51, v29);
  return ((uint64_t (*)(_QWORD, uint64_t))v55)(v0[37], v48);
}

void closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877E1950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 76), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877E19E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  v1 = Namespace.wrappedValue.getter();
  v2 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
    v2 = result;
  }
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  if (v5 >= v4 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, (char *)v2);
    v2 = result;
  }
  *(_QWORD *)(v2 + 16) = v5 + 1;
  *(_QWORD *)(v2 + 8 * v5 + 32) = v1;
  *v0 = v2;
  return result;
}

void closure #2 in TabSection<>.TabSectionView.body.getter()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v1);
  MEMORY[0x1E0C80A78](v2, v3);
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877E1B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v8)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(v2 + 56))(v3, v2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v0, v1, AssociatedConformanceWitness);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v0, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v1, *(_QWORD *)(v6 - 144));
  return v8(v5, v1);
}

void protocol witness for TabContent._identifiedView.getter in conformance <> TabSection<A, B, C, D>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  TabSection<>._identifiedView.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16), *(_QWORD *)(a2 - 24), a3);
}

void TabSection<>.init<>(content:header:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(double);
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12(v9);
  a1(v13);
  TabSection.init(header:content:footer:)((uint64_t)v11, a3, a4);
}

void TabSection<>.init<>(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t (*v5)(double);
  uint64_t v6;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v5(v4);
  TabSection.init(header:content:footer:)(v6, MEMORY[0x1E0CE7C38], a3);
}

void TabSection<>.init<A>(_:content:)(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  char v21;
  uint64_t v22;

  v19[1] = a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = *(_QWORD *)(v9 - 8);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v20[0] = Text.init<A>(_:)();
  v20[1] = v16;
  v21 = v17 & 1;
  v22 = v18;
  a2();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  TabSection.init(header:content:footer:)((uint64_t)v20, MEMORY[0x1E0CE6CF8], a5);
}

void TabSection<>.init<>(_:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1, a2);
  v9[0] = Text.init(_:tableName:bundle:comment:)();
  v9[1] = v6;
  v10 = v7 & 1;
  v11 = v8;
  a3();
  TabSection.init(header:content:footer:)((uint64_t)v9, MEMORY[0x1E0CE6CF8], a4);
}

void TabSection<>.init<A>(content:header:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  TabSection<>.init<A>(content:header:)(a1, a2, a3, a4);
}

{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(double);
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v12(v9);
  a1(v13);
  type metadata accessor for Optional();
  TabSection.init(header:content:footer:)((uint64_t)v11, a3, a4);
}

void TabSection<>.init<A, B>(_:content:)(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  TabSection<>.init<A, B>(_:content:)(a1, a2, a3, a4);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v18 = a4;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = *(_QWORD *)(v7 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v19[0] = Text.init<A>(_:)();
  v19[1] = v14;
  v20 = v15 & 1;
  v21 = v16;
  a2();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
  type metadata accessor for Optional();
  TabSection.init(header:content:footer:)((uint64_t)v19, MEMORY[0x1E0CE6CF8], v18);
}

void TabSection<>.init<A>(_:content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  TabSection<>.init<A>(_:content:)(a1, a2, a3, a4);
}

{
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1, a2);
  v9[0] = Text.init(_:tableName:bundle:comment:)();
  v9[1] = v6;
  v10 = v7 & 1;
  v11 = v8;
  a3();
  type metadata accessor for Optional();
  TabSection.init(header:content:footer:)((uint64_t)v9, MEMORY[0x1E0CE6CF8], a4);
}

void TabSection<>.init<A>(liftedContent:header:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  TabSection<>.init<A>(content:header:)(a1, a2, a3, a4);
}

void TabSection<>.init<A>(content:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  void (*v5)(double);
  uint64_t v6;

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v5(v4);
  v6 = type metadata accessor for Optional();
  TabSection.init(header:content:footer:)(v6, MEMORY[0x1E0CE7C38], a3);
}

void TabSection<>.init<A, B>(_:liftedContent:)(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  TabSection<>.init<A, B>(_:content:)(a1, a2, a3, a4);
}

void TabSection<>.init<A>(_:liftedContent:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  TabSection<>.init<A>(_:content:)(a1, a2, a3, a4);
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabSection<A, B, C, D>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 - 24);
  v5 = vextq_s8(*(int8x16_t *)(a3 - 16), *(int8x16_t *)(a3 - 16), 8uLL);
  v6 = v3;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabSection<A, B, C, D>, a1, &v5);
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabSection<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> TabSection<A, B, C, D>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *((_QWORD *)a3 + 2);
  v6 = *a3;
  v7 = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TabSection<A, B, C, D>, a2, &v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TabSection()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TabSection(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for TabSection(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void type metadata accessor for TabSection()
{
  JUMPOUT(0x18D75FF28);
}

void sub_1877E2904()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877E2934(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSection<A, B, C, D><>.TabSectionView, a1);
}

void type metadata accessor for TabSection<>.TabSectionView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for TabSection<>.TabSectionView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabSection<>.TabSectionView(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = a1;
  v5 = a3[3];
  v4 = a3[4];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v4 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v8 + 64) + v12;
  v14 = v9 | v7 | v12;
  if (v14 > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) != 0
    || ((v13 + ((v10 + ((v7 + 8) & ~v7)) & ~v9)) & (unint64_t)~v12) + *(_QWORD *)(v11 + 64) > 0x18)
  {
    v17 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v17 + ((v14 & 0xF8 ^ 0x1F8) & (v14 + 16)));
    swift_retain();
  }
  else
  {
    v18 = ~v9;
    v24 = ~v12;
    *a1 = *a2;
    v19 = ((unint64_t)a1 + v7 + 8) & ~v7;
    v20 = ((unint64_t)a2 + v7 + 8) & ~v7;
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v19, v20);
    v21 = (v19 + v10) & v18;
    v22 = (v20 + v10) & v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v21, v22, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v21 + v13) & v24, (v22 + v13) & v24, v4);
  }
  return v3;
}

uint64_t destroy for TabSection<>.TabSectionView(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a2[2] - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(a2[3] - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a2[4] - 8) + 8))((v7
                                                                                       + *(_QWORD *)(v6 + 64)
                                                                                       + *(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a2[4] - 8) + 80));
}

_QWORD *initializeWithCopy for TabSection<>.TabSectionView(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  v15 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_QWORD *assignWithCopy for TabSection<>.TabSectionView(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  v15 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_QWORD *initializeWithTake for TabSection<>.TabSectionView(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  v15 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 32))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

_QWORD *assignWithTake for TabSection<>.TabSectionView(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v5 = *(_QWORD *)(a3[2] - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_QWORD *)(a3[3] - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 + v11;
  v13 = (v12 + v7) & ~v11;
  v14 = (v12 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  v15 = *(_QWORD *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))((*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), (*(_QWORD *)(v10 + 64) + *(unsigned __int8 *)(v15 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSection<>.TabSectionView(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a3[2];
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(a3[3] - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = a3[4];
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) > v9)
    v9 = *(_DWORD *)(v11 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = *(_QWORD *)(v7 + 64) + v15;
  v17 = a2 - v9;
  if (a2 <= v9)
    goto LABEL_25;
  v18 = ((v16 + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14)) & ~v15) + *(_QWORD *)(v11 + 64);
  v19 = 8 * v18;
  if (v18 <= 3)
  {
    v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      v20 = *(_DWORD *)(a1 + v18);
      if (!v20)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v21 > 0xFF)
    {
      v20 = *(unsigned __int16 *)(a1 + v18);
      if (!*(_WORD *)(a1 + v18))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v21 < 2)
    {
LABEL_25:
      if (v9)
      {
        v24 = (a1 + v12 + 8) & ~v12;
        if (v6 == v9)
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(v24, *(unsigned int *)(v5 + 84), v4);
        v25 = (v24 + v13 + v14) & ~v14;
        if (v8 == v9)
          return (*(uint64_t (**)(uint64_t))(v7 + 48))(v25);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))((v16 + v25) & ~v15, *(unsigned int *)(v11 + 84), v10);
      }
      return 0;
    }
  }
  v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(_BYTE *)(a1 + v18))
    goto LABEL_25;
LABEL_16:
  v22 = (v20 - 1) << v19;
  if (v18 > 3)
    v22 = 0;
  if ((_DWORD)v18)
  {
    if (v18 <= 3)
      v23 = ((v16 + ((v13 + v14 + ((v12 + 8) & ~(_DWORD)v12)) & ~(_DWORD)v14)) & ~(_DWORD)v15) + *(_DWORD *)(v11 + 64);
    else
      v23 = 4;
    __asm { BR              X11 }
  }
  return v9 + v22 + 1;
}

void storeEnumTagSinglePayload for TabSection<>.TabSectionView(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X23 }
}

ValueMetadata *type metadata accessor for TabSectionStyleContext()
{
  return &type metadata for TabSectionStyleContext;
}

uint64_t associated type witness table accessor for View.Body : View in TabSection<A, B, C, D><>.TabSectionView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext;
  if (!lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabSectionStyleContext, &type metadata for TabSectionStyleContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSectionStyleContext and conformance TabSectionStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext;
  if (!lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InAdaptableTabViewContext, &type metadata for InAdaptableTabViewContext);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t partial apply for closure #2 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in TabSection<>.TabSectionView.body.getter);
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter);
}

void sub_1877E34F8()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

uint64_t sub_1877E3540(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *(unsigned __int8 *)(*((_QWORD *)a1 - 1) + 80);
  v6 = v2 + ((v5 + 72) & ~v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6 + a1[19], v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v6 + a1[20], v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6 + a1[21]);
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  type metadata accessor for TabSection<>.TabSectionView();
}

void sub_1877E362C()
{
  closure #2 in closure #1 in TabSection<>.TabSectionView.body.getter();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter()
{
  return partial apply for closure #1 in TabSection<>.TabSectionView.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in closure #1 in TabSection<>.TabSectionView.body.getter);
}

uint64_t partial apply for closure #1 in TabSection<>.TabSectionView.body.getter(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E0CE5A98], MEMORY[0x1E0CE5A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsSectionHeaderTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], MEMORY[0x1E0CE5EA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4530], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SectionHeaderStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsCompactTabRepresentationTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabSectionIdentifiersTraitKey()
{
  return &type metadata for TabSectionIdentifiersTraitKey;
}

ValueMetadata *type metadata accessor for IsCompactTabRepresentationTraitKey()
{
  return &type metadata for IsCompactTabRepresentationTraitKey;
}

void sub_1877E3800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[3];

  v1 = *(_QWORD *)(a1 + 32);
  swift_getAssociatedTypeWitness();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v10[0] = v1;
  v10[1] = &protocol witness table for UpdateDefaultTabFill;
  v6 = MEMORY[0x1E0CE2E70];
  v9[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v9[1] = &protocol witness table for ViewInputFlagModifier<A>;
  v8[0] = MEMORY[0x18D75FFDC](v6, v3, v9);
  v8[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v7[0] = MEMORY[0x18D75FFDC](v6, v4, v8);
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  MEMORY[0x18D75FFDC](v6, v5, v7);
  type metadata accessor for PlatformItemTraitWriter();
}

void sub_1877E3988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ValueMetadata *a16, ValueMetadata *a17, uint64_t a18, _UNKNOWN **a19)
{
  uint64_t (*v19)(void);
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>(255);
  type metadata accessor for ModifiedContent();
  v19 = MEMORY[0x1E0CE52D0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsSectionHeaderTraitKey>, MEMORY[0x1E0CE5A98], MEMORY[0x1E0CE5A88], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for StyleContextWriter<SectionHeaderStyleContext>, MEMORY[0x1E0CE5EB8], MEMORY[0x1E0CE5EA8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  type metadata accessor for ModifiedContent();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = type metadata accessor for TagValueTraitKey();
  v22 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v21);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  v23 = type metadata accessor for Optional();
  a15 = AssociatedConformanceWitness;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v23, &a15);
  v24 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v22, v24);
  type metadata accessor for _TraitWritingModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsCompactTabRepresentationTraitKey>, (uint64_t)&type metadata for IsCompactTabRepresentationTraitKey, (uint64_t)&protocol witness table for IsCompactTabRepresentationTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v19);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  v25 = type metadata accessor for TupleView();
  v26 = type metadata accessor for Group();
  a14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v25);
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v26, &a14);
  a16 = (ValueMetadata *)v26;
  a17 = &type metadata for TabSectionIdentifiersTraitKey;
  a18 = v27;
  a19 = &protocol witness table for TabSectionIdentifiersTraitKey;
  MEMORY[0x18D75FF88](255, &a16, MEMORY[0x1E0CE6E38], 0);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for StyleContextWriter<TabSectionStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSectionStyleContext and conformance TabSectionStyleContext, (uint64_t)&type metadata for TabSectionStyleContext, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v28 = type metadata accessor for ModifiedContent();
  v29 = lazy protocol witness table accessor for type InAdaptableTabViewContext and conformance InAdaptableTabViewContext();
  a16 = &type metadata for InAdaptableTabViewContext;
  a17 = (ValueMetadata *)v28;
  a19 = (_UNKNOWN **)v29;
  type metadata accessor for StaticIf();
}

uint64_t sub_1877E3C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v8[2];
  _QWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = v1;
  v11 = v4;
  v12 = v2;
  v13 = v5;
  v9[0] = swift_getOpaqueTypeConformance2();
  v9[1] = lazy protocol witness table accessor for type StyleContextWriter<TabSectionStyleContext> and conformance StyleContextWriter<A>();
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v9);
  v8[1] = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v8);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.CircleCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.CircleCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlaybackButton._StyleStorage.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C63726963;
  if (*v0 != 1)
    v1 = 1819044208;
  if (*v0)
    return v1;
  else
    return 0x6974616D6F747561;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlaybackButton._StyleStorage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PlaybackButton._StyleStorage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.CodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlaybackButton._StyleStorage.PillCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlaybackButton._StyleStorage.PillCodingKeys()
{
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PlaybackButton._StyleStorage.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys, (uint64_t)&unk_1E1AB8DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v36 = v4;
  v26 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v35 = (char *)&v26 - v6;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys, (uint64_t)&unk_1E1AB8E70, v3);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v32 = (char *)&v26 - v9;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys, (uint64_t)&unk_1E1AB8E90, v3);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v29 = (char *)&v26 - v12;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<PlaybackButton._StyleStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys, (uint64_t)&unk_1E1AB8D50, v3);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v26 - v17;
  v19 = *v1;
  v27 = v1[1];
  v28 = v19;
  v20 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v20 == 4)
  {
    v37 = 0;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
    v22 = v29;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  if (v20 == 5)
  {
    v37 = 1;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
    v21 = v32;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  v37 = 2;
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
  v24 = v35;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v37 = v28;
  v38 = v27;
  v39 = v20;
  lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
  v25 = v36;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.PillCodingKeys, &unk_1E1AB8DE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.PillCodingKeys, &unk_1E1AB8DE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.PillCodingKeys, &unk_1E1AB8DE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.PillCodingKeys, &unk_1E1AB8DE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CircleCodingKeys, &unk_1E1AB8E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CircleCodingKeys, &unk_1E1AB8E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CircleCodingKeys, &unk_1E1AB8E70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.AutomaticCodingKeys, &unk_1E1AB8E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.AutomaticCodingKeys, &unk_1E1AB8E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.AutomaticCodingKeys, &unk_1E1AB8E90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CodingKeys, &unk_1E1AB8D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CodingKeys, &unk_1E1AB8D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CodingKeys, &unk_1E1AB8D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlaybackButton._StyleStorage.CodingKeys, &unk_1E1AB8D50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6C28], MEMORY[0x1E0CE6C20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6C30], MEMORY[0x1E0CE6C20]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

uint64_t PlaybackButton._StyleStorage.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  unsigned __int8 v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;

  v44 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.PillCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys, (uint64_t)&unk_1E1AB8DE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  v43 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v46 = (char *)&v36 - v7;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.CircleCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys, (uint64_t)&unk_1E1AB8E70, v3);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v45 = (char *)&v36 - v10;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.AutomaticCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys, (uint64_t)&unk_1E1AB8E90, v3);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v36 - v13;
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<PlaybackButton._StyleStorage.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys, (uint64_t)&unk_1E1AB8D50, v3);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v36 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CodingKeys and conformance PlaybackButton._StyleStorage.CodingKeys();
  v21 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
    goto LABEL_7;
  v22 = v45;
  v23 = v46;
  v37 = v17;
  v50 = a1;
  v24 = KeyedDecodingContainer.allKeys.getter();
  if (*(_QWORD *)(v24 + 16) != 1)
  {
    v28 = type metadata accessor for DecodingError();
    swift_allocError();
    v30 = v29;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *v30 = &type metadata for PlaybackButton._StyleStorage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x1E0DEC450], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v16);
    a1 = v50;
LABEL_7:
    v31 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v31);
  }
  if (*(_BYTE *)(v24 + 32))
  {
    if (*(_BYTE *)(v24 + 32) == 1)
    {
      v47 = 1;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.CircleCodingKeys and conformance PlaybackButton._StyleStorage.CircleCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v16);
      v25 = 0;
      v26 = 0;
      v27 = 5;
    }
    else
    {
      v47 = 2;
      lazy protocol witness table accessor for type PlaybackButton._StyleStorage.PillCodingKeys and conformance PlaybackButton._StyleStorage.PillCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
      v33 = v42;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v34 = v37;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v16);
      v25 = v47;
      v26 = v48;
      v27 = v49;
    }
  }
  else
  {
    v47 = 0;
    lazy protocol witness table accessor for type PlaybackButton._StyleStorage.AutomaticCodingKeys and conformance PlaybackButton._StyleStorage.AutomaticCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v16);
    v25 = 0;
    v26 = 0;
    v27 = 4;
  }
  v35 = v44;
  *v44 = v25;
  v35[1] = v26;
  *((_BYTE *)v35 + 16) = v27;
  v31 = (uint64_t)v50;
  return __swift_destroy_boxed_opaque_existential_1(v31);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlaybackButton._StyleStorage@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PlaybackButton._StyleStorage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlaybackButton._StyleStorage(_QWORD *a1)
{
  return PlaybackButton._StyleStorage.encode(to:)(a1);
}

uint64_t View.playbackButtonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;

  swift_getKeyPath();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a5 + 8))(&v8, a3, a5);
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.playbackButtonStyle.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.playbackButtonStyle.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.PlaybackButtonStyleKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
}

void AutomaticPlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 4;
}

uint64_t dispatch thunk of PlaybackButtonStyle._storage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PlaybackButton._StyleStorage()
{
  return &type metadata for PlaybackButton._StyleStorage;
}

ValueMetadata *type metadata accessor for AutomaticPlaybackButtonStyle()
{
  return &type metadata for AutomaticPlaybackButtonStyle;
}

uint64_t sub_1877E4B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PlaybackButton._StyleStorage>);
  }
}

uint64_t storeEnumTagSinglePayload for PlaybackButton._StyleStorage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1877E4C84 + 4 * byte_187C5E785[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1877E4CB8 + 4 * byte_187C5E780[v4]))();
}

uint64_t sub_1877E4CB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877E4CC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877E4CC8);
  return result;
}

uint64_t sub_1877E4CD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877E4CDCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1877E4CE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877E4CE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PlaybackButton._StyleStorage.CodingKeys()
{
  return &unk_1E1AB8D50;
}

void *type metadata accessor for PlaybackButton._StyleStorage.AutomaticCodingKeys()
{
  return &unk_1E1AB8E90;
}

void *type metadata accessor for PlaybackButton._StyleStorage.CircleCodingKeys()
{
  return &unk_1E1AB8E70;
}

uint64_t storeEnumTagSinglePayload for PlaybackButton._StyleStorage.PillCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1877E4D64 + 4 * byte_187C5E78A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1877E4D84 + 4 * byte_187C5E78F[v4]))();
}

_BYTE *sub_1877E4D64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1877E4D84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1877E4D8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1877E4D94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1877E4D9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1877E4DA4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PlaybackButton._StyleStorage.PillCodingKeys()
{
  return &unk_1E1AB8DE0;
}

uint64_t specialized PlaybackButton._StyleStorage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C63726963 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1819044208 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PlaybackButtonStyleKey>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.PlaybackButtonStyleKey()
{
  return &type metadata for EnvironmentValues.PlaybackButtonStyleKey;
}

uint64_t EnvironmentValues.isEagerNavigationTransitionEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t View.navigationTransitionEagerRenderEnabled(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_1877E53B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEagerNavigationTransitionEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1877E53EC()
{
  return EnvironmentValues.isEagerNavigationTransitionEnabled.setter();
}

uint64_t EnvironmentValues.isEagerNavigationTransitionEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsEagerNavigationTransitionEnabled()
{
  return &type metadata for EnvironmentValues.IsEagerNavigationTransitionEnabled;
}

uint64_t DefaultTabLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  unint64_t v20;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v1 + 16) & 1;
    v8 = *(_QWORD *)v1;
    v9 = *(_QWORD *)(v1 + 8);
    v10 = *(_QWORD *)(v1 + 24);
    v11 = *(_QWORD *)(v1 + 32);
  }
  else
  {
    if ((*(_BYTE *)(v1 + 40) & 1) != 0)
    {
      v20 = 0xEC0000006B72616DLL;
      LocalizedStringKey.init(stringLiteral:)();
      v8 = Text.init(_:tableName:bundle:comment:)();
      v9 = v13;
      v10 = v14;
      v15 = 0x6E6F697473657571;
    }
    else
    {
      v20 = 0xEF7373616C67676ELL;
      v8 = static Text.System.search.getter();
      v9 = v16;
      v10 = v17;
      v15 = 0x697966696E67616DLL;
    }
    v19 = v12;
    type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v15;
    *(_QWORD *)(v11 + 24) = v20;
    *(_DWORD *)(v11 + 32) = 0;
    *(_BYTE *)(v11 + 36) = 1;
    *(_OWORD *)(v11 + 40) = xmmword_187BF9F90;
    *(_QWORD *)(v11 + 56) = v15;
    *(_QWORD *)(v11 + 64) = v20;
    *(_OWORD *)(v11 + 72) = xmmword_187BF9FB0;
    *(_BYTE *)(v11 + 88) = 0;
    v7 = v19 & 1;
  }
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v6 == 0;
  return outlined copy of Label<Text, Image>?(v3, v4, v5, v6);
}

uint64_t outlined copy of Label<Text, Image>?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultTabLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultTabLabel()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t destroy for DefaultTabLabel(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
  {
    outlined consume of Text.Storage(*(_QWORD *)result, *(_QWORD *)(result + 8), *(_BYTE *)(result + 16));
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DefaultTabLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v7;
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for DefaultTabLabel(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      v5 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 1);
      v7 = *((_BYTE *)a2 + 16);
      outlined copy of Text.Storage(*(_QWORD *)a2, v6, v7);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v6;
      *(_BYTE *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Label<Text, Image>(a1);
      v14 = *((_QWORD *)a2 + 4);
      v15 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 32) = v14;
    }
  }
  else if (v4)
  {
    v11 = *(_QWORD *)a2;
    v12 = *((_QWORD *)a2 + 1);
    v13 = *((_BYTE *)a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    v16 = *a2;
    v17 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v17;
  }
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t outlined destroy of Label<Text, Image>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Label<Text, Image>();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t assignWithTake for DefaultTabLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Label<Text, Image>(a1);
LABEL_5:
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    goto LABEL_6;
  }
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
LABEL_6:
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultTabLabel(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultTabLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultTabLabel()
{
  return &type metadata for DefaultTabLabel;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v3[1] = v3[0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Label<Text, Image>, Label<Text, Image>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>)
  {
    type metadata accessor for Label<Text, Image>();
    v0 = type metadata accessor for _ConditionalContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<Label<Text, Image>, Label<Text, Image>>);
  }
}

void SortedArrayDictionary.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SortedArrayDictionary.Element(0, a2, a3, a4);
  JUMPOUT(0x18D75D06CLL);
}

uint64_t static SortedArrayDictionary.Element<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for SortedArrayDictionary.Element(0, a3, a4, a5);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t SortedArrayDictionary<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v9 = type metadata accessor for SortedArrayDictionary.Element(0, a3, a4, a5);
  v11[0] = a6;
  v11[1] = a7;
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SortedArrayDictionary<A, B>.Element, v9, v11);
  Array<A>.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int SortedArrayDictionary<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE v13[72];

  Hasher.init(_seed:)();
  SortedArrayDictionary<>.hash(into:)((uint64_t)v13, a1, a2, a3, a4, a5, a6);
  return Hasher._finalize()();
}

uint64_t static SortedArrayDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v9;

  v7 = type metadata accessor for SortedArrayDictionary.Element(0, a3, a4, a5);
  v9 = a6;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SortedArrayDictionary<A, B>.Element, v7, &v9);
  return static Array<A>.== infix(_:_:)() & 1;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SortedArrayDictionary<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

void protocol witness for Collection.endIndex.getter in conformance SortedArrayDictionary<A, B>(uint64_t *a1)
{
  uint64_t *v1;

  SortedArrayDictionary.endIndex.getter(*v1, a1[2], a1[3], a1[4]);
}

uint64_t sub_1877E6080(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SortedArrayDictionary<A, B>(uint64_t **a1, uint64_t *a2, uint64_t *a3))(_QWORD *a1)
{
  uint64_t *v3;
  uint64_t *v7;

  v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)SortedArrayDictionary.subscript.read(v7, *a2, *v3, a3[2], a3[3], a3[4]);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*SortedArrayDictionary.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD *a1)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for SortedArrayDictionary.Element(0, a4, a5, a6);
  *a1 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  a1[1] = v8;
  a1[2] = (uint64_t)malloc(*(_QWORD *)(v8 + 64));
  Array.subscript.getter();
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance SortedArrayDictionary<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance SortedArrayDictionary<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance SortedArrayDictionary<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SortedArrayDictionary<A, B>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SortedArrayDictionary<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SortedArrayDictionary<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SortedArrayDictionary<A, B>.Element(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static SortedArrayDictionary.Element<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> SortedArrayDictionary<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return SortedArrayDictionary<>.hashValue.getter(*v2, a1[2], a1[3], a1[4], *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> SortedArrayDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return SortedArrayDictionary<>.hash(into:)(a1, *v3, a2[2], a2[3], a2[4], *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> SortedArrayDictionary<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[72];

  v6 = *(_QWORD *)(a3 - 16);
  v5 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)();
  SortedArrayDictionary<>.hash(into:)((uint64_t)v8, *v3, a2[2], a2[3], a2[4], v5, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> SortedArrayDictionary<A, B>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return static SortedArrayDictionary<>.== infix(_:_:)(*a1, *a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8));
}

uint64_t SortedArrayDictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  *(_QWORD *)&v21 = a1;
  type metadata accessor for SortedArrayDictionary.Element(255, a2, a3, a4);
  v7 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v7);
  Sequence.enumerated()();
  v20 = v18;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v9 = type metadata accessor for LazySequence();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC330], v9);
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  v18 = v21;
  v19 = v22;
  v10 = type metadata accessor for LazyMapSequence();
  v17 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF20], v7);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEC850], v10, &v17);
  v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v21 = 91;
  *((_QWORD *)&v21 + 1) = 0xE100000000000000;
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t closure #1 in SortedArrayDictionary.debugDescription.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  Swift::String v8;
  uint64_t result;

  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  type metadata accessor for SortedArrayDictionary.Element(0, a1, a2, a3);
  result = DefaultStringInterpolation.appendInterpolation<A>(_:)();
  *a4 = 0;
  a4[1] = 0xE000000000000000;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortedArrayDictionary<A, B>(uint64_t *a1)
{
  uint64_t *v1;

  return SortedArrayDictionary.debugDescription.getter(*v1, a1[2], a1[3], a1[4]);
}

uint64_t base witness table accessor for Equatable in <> SortedArrayDictionary<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SortedArrayDictionary<A, B>, a1, &v4);
}

uint64_t base witness table accessor for Equatable in <> SortedArrayDictionary<A, B>.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 16) + 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> SortedArrayDictionary<A, B>.Element, a1, &v4);
}

void base witness table accessor for Sequence in SortedArrayDictionary<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Collection in SortedArrayDictionary<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SortedArrayDictionary<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for BidirectionalCollection in SortedArrayDictionary<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SortedArrayDictionary<A, B>(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SortedArrayDictionary<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t type metadata accessor for SortedArrayDictionary.Element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortedArrayDictionary.Element);
}

uint64_t sub_1877E6778()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SortedArrayDictionary.debugDescription.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in SortedArrayDictionary.debugDescription.getter(v1[2], v1[3], v1[4], a1);
}

uint64_t getEnumTagSinglePayload for SortedArrayDictionary.Element(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877E6870 + 4 * byte_187C5ED20[v17 - 1]))();
}

void storeEnumTagSinglePayload for SortedArrayDictionary.Element(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for SortedArrayDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortedArrayDictionary);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (_DWORD *)(a1 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_DWORD *)(v9 + 40) = v6;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static NavigationDestination._makeDestinations(content:inputs:resolved:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static NavigationDestination._makeDestinations(content:inputs:resolved:)(a1, a2, a3, a4, a5);
}

{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  __int128 v20;
  __int128 v21;
  int v22;
  int v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v22 = *((_DWORD *)a2 + 20);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  LODWORD(v31) = v8;
  type metadata accessor for _GraphValue();
  v13 = a2[3];
  v14 = a2[4];
  v20 = *(_OWORD *)(a2 + 7);
  v21 = *(_OWORD *)(a2 + 5);
  v15 = a2[9];
  v29 = a4;
  v30 = a5;
  LODWORD(v31) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  v26 = AssociatedTypeWitness;
  v27 = type metadata accessor for Focus();
  v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v27);
  v16 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v25, v27, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  v31 = v9;
  LODWORD(KeyPath) = v10;
  v33 = v11;
  v34 = v13;
  v35 = v14;
  v36 = v21;
  v37 = v20;
  v38 = v15;
  v39 = v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v24, &v31, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;

  type metadata accessor for _GraphValue<Never>();
  v5 = _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for Focus<Never, Never>();
  lazy protocol witness table accessor for type Focus<Never, Never> and conformance Focus<A, B>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  return specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(v5, a2, a3);
}

uint64_t sub_1877E6F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 24))(*(_QWORD *)(a3 + a2 - 16));
}

uint64_t sub_1877E6F54()
{
  return 16;
}

__n128 sub_1877E6F60(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance Never(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static NavigationDestination._makeDestinations(content:inputs:resolved:)(v3, (uint64_t)v7, a3);
}

uint64_t static Group<A>._makeDestinations(content:inputs:resolved:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _BYTE v28[4];

  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 20);
  LODWORD(v19) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v13 = a2[3];
  v14 = a2[4];
  v17 = *(_OWORD *)(a2 + 7);
  v18 = *(_OWORD *)(a2 + 5);
  v15 = a2[9];
  _GraphValue.subscript.getter();
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v22 = v13;
  v23 = v14;
  v24 = v18;
  v25 = v17;
  v26 = v15;
  v27 = v12;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v28, &v19, a3, a4, a5);
}

void protocol witness for NavigationDestination.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a1, &v2);
  specialized PrimitiveNavigationDestination.body.getter();
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Group<A>._makeDestinations(content:inputs:resolved:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 - 8));
}

void TupleNavigationDestination.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized TupleNavigationDestination.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t TupleNavigationDestination.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static TupleNavigationDestination._makeDestinations(content:inputs:resolved:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v43;
  LODWORD(v43) = v6;
  v44 = v7;
  v45 = v8;
  v46 = v9;
  v47 = *(_OWORD *)(a2 + 3);
  v48 = v10;
  v49 = v11;
  v50 = *(_OWORD *)(a2 + 7);
  v51 = a2[9];
  v52 = v12;
  v14 = v13;
  v53 = 0;
  v54 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (uint64_t *)(v14 + 48);
    do
    {
      v17 = *(v16 - 1);
      v18 = *v16;
      v16 += 3;
      v53 = AGTupleElementOffset();
      v21 = type metadata accessor for TupleNavigationDestination.Collector(0, a4, v19, v20);
      TupleNavigationDestination.Collector.visit<A>(type:)(v17, v21, v17, v18);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v22 = swift_bridgeObjectRetain();
  Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(v22);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  v38 = Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n;
  v39 = v41;
  v40 = v42;
  v36 = v11;
  v37 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v24 = MEMORY[0x1E0CE6550];
    v25 = MEMORY[0x1E0CE6548];
    do
    {
      v26 = (void (*)(uint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v28 = *v27;
      v29 = v27[1];
      v26(&v41, 0);
      v30 = v37;
      v41 = v36;
      swift_bridgeObjectRetain();
      v31 = PreferenceKeys.endIndex.getter();
      if (v37 < 0 || v37 >= v31)
        __break(1u);
      ++v37;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(&v38, v24, v25, v28, v29);
    }
    while (v30 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v32 = v39;
  v33 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v32;
  *(_DWORD *)(a3 + 8) = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TupleNavigationDestination.Collector.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27[4];
  uint64_t v28;
  int v29;

  v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for TupleNavigationDestination(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  PreferencesOutputs.init()();
  v28 = v19;
  v29 = v20;
  _GraphValue.init(_:)();
  v8 = *(_OWORD *)(v4 + 48);
  v22 = *(_OWORD *)(v4 + 32);
  v23 = v8;
  v9 = *(_DWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_DWORD *)(v4 + 88);
  v19 = *(_QWORD *)(v4 + 8);
  v20 = v9;
  v21 = v10;
  v24 = *(_OWORD *)(v4 + 64);
  v25 = *(_QWORD *)(v4 + 80);
  v26 = v11;
  (*(void (**)(char *, uint64_t *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v27, &v19, &v28, a3, a4);
  v12 = v28;
  v13 = v29;
  v14 = *(_QWORD *)(v4 + 104);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (char *)v14);
    v14 = result;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    v14 = result;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  v18 = v14 + 16 * v17;
  *(_QWORD *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(_QWORD *)(v5 + 104) = v14;
  return result;
}

uint64_t protocol witness for NavigationDestinationTypeVisitor.visit<A>(type:) in conformance TupleNavigationDestination<A>.Collector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleNavigationDestination.Collector.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for NavigationDestination.body.getter in conformance TupleNavigationDestination<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized TupleNavigationDestination.body.getter(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance TupleNavigationDestination<A>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static TupleNavigationDestination._makeDestinations(content:inputs:resolved:)(a1, a2, a3, *(_QWORD *)(a4 + 16));
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance NavigationDestinationDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance NavigationDestinationDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static NavigationDestinationDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance NavigationDestinationDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for NavigationDestination.body.getter in conformance PushDestination<A, B>()
{
  specialized PrimitiveNavigationDestination.body.getter();
}

void specialized NavigationDestination.bodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000187BD9B70;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveNavigationDestination.body.getter()
{
  specialized NavigationDestination.bodyError()();
}

void specialized TupleNavigationDestination.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TupleNavigationDestination(0, a1, a3, a4);
  specialized NavigationDestination.bodyError()();
}

unint64_t lazy protocol witness table accessor for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor;
  if (!lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationDescriptor, &type metadata for NavigationDestinationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor;
  if (!lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationDestinationDescriptor, &type metadata for NavigationDestinationDescriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationDestinationDescriptor and conformance NavigationDestinationDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleNavigationDestination.Collector);
}

_UNKNOWN **associated type witness table accessor for NavigationDestination.Body : NavigationDestination in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of NavigationDestination.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static NavigationDestination._makeDestinations(content:inputs:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t getEnumTagSinglePayload for TupleNavigationDestination(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877E7A48 + 4 * byte_187C5F0B0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleNavigationDestination(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TupleNavigationDestination(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleNavigationDestination);
}

uint64_t destroy for TupleNavigationDestination.Collector()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleNavigationDestination.Collector(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationDestinationDescriptor()
{
  return &type metadata for NavigationDestinationDescriptor;
}

void type metadata accessor for Focus<Never, Never>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<Never, Never>)
  {
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<Never, Never>);
  }
}

void __swiftcall EllipticalListStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static EllipticalListStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static EllipticalListStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for EllipticalListStyle()
{
  return &type metadata for EllipticalListStyle;
}

void NavigationControlGroupStyle.makeBody(configuration:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in NavigationControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for NavigationControlGroupStyle()
{
  return &type metadata for NavigationControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v7[1] = &protocol witness table for ControlGroupStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>)
  {
    type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for ControlGroupStyleModifier<MenuControlGroupStyle>(255, &lazy cache variable for type metadata for ControlGroupStyleModifier<HorizontalStackControlGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle, (uint64_t)&type metadata for HorizontalStackControlGroupStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>, ControlGroupStyleModifier<HorizontalStackControlGroupStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>)
  {
    type metadata accessor for ControlGroup<ControlGroupStyleConfiguration.Content>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>();
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ControlGroup<ControlGroupStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ControlGroupStyleModifier<MenuControlGroupStyle>, EmptyModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle;
  if (!lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HorizontalStackControlGroupStyle, &type metadata for HorizontalStackControlGroupStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalStackControlGroupStyle and conformance HorizontalStackControlGroupStyle);
  }
  return result;
}

_QWORD *specialized Sequence.reduce<A>(_:_:)(_QWORD *result, _QWORD *(*a2)(_QWORD **__return_ptr, _QWORD **, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = result;
  if (a4 != a5)
  {
    v7 = a4;
    if (a5 >= a4)
    {
      while (v7 < a5)
      {
        v10 = v7;
        result = a2(&v9, &v11, &v10);
        if (!v5)
        {
          ++v7;
          result = v9;
          v11 = v9;
          if (a5 != v7)
            continue;
        }
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(unint64_t a1, uint64_t a2)
{
  _BYTE v2[299];

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a1)
  {
    memcpy(v2, (const void *)(a2 + 304 * a1 + 32), sizeof(v2));
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x1877E8388);
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter()
{
  void *v0;
  int v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _BYTE __dst[299];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  _BYTE v38[299];
  _BYTE __src[392];
  _BYTE v40[400];

  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v40);
  v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v40);
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
      outlined init with take of NavigationState.Base(__src, v27);
      v3 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
      v4 = v2[38];
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v3);
      outlined consume of ResolvedNavigationDestinations?(v4);
      outlined release of NavigationColumnState(v2);
    }
    else
    {
      v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
      v7 = *(_QWORD *)v6;
      v9 = *(_QWORD *)(v6 + 16);
      v8 = *(_QWORD *)(v6 + 24);
      v11 = *(_QWORD *)(v6 + 32);
      v10 = *(_QWORD *)(v6 + 40);
      v12 = *(_QWORD *)(v6 + 48);
      v13 = *(_QWORD *)(v6 + 56);
      v14 = *(_QWORD *)(v6 + 64);
      v15 = *(_WORD *)(v6 + 72);
      v26 = *(_QWORD *)(v6 + 8);
      v29 = v26;
      v30 = v9;
      v31 = v8;
      v32 = v11;
      v33 = v10;
      v34 = v12;
      v35 = v13;
      v36 = v14;
      v37 = v15;
      if (*(_QWORD *)(v7 + 16))
      {
        outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        swift_bridgeObjectRetain();
        memcpy(__dst, (const void *)(v7 + 32), sizeof(__dst));
        memcpy(v38, (const void *)(v7 + 32), sizeof(v38));
        __asm { BR              X9 }
      }
      outlined init with take of NavigationState.Base(__src, v27);
      v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v27);
      v24 = *(_QWORD *)(v16 + 16);
      v25 = *(_QWORD *)(v16 + 8);
      v22 = *(_QWORD *)(v16 + 32);
      v23 = *(_QWORD *)(v16 + 24);
      v20 = *(_QWORD *)(v16 + 48);
      v21 = *(_QWORD *)(v16 + 40);
      v18 = *(_QWORD *)(v16 + 64);
      v19 = *(_QWORD *)(v16 + 56);
      v17 = *(_WORD *)(v16 + 72);
      swift_bridgeObjectRetain();
      outlined copy of NavigationSplitViewState?(v25, v24, v23, v22, v21, v20, v19, v18, v17, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      outlined copy of NavigationSplitViewState?(v26, v9, v8, v11, v10, v12, v13, v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v40);
  }
  return 0;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[50];
  _BYTE v42[299];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  _BYTE v52[299];
  _BYTE __dst[304];
  _BYTE __src[392];
  _BYTE v55[400];

  v5 = v4;
  outlined init with take of NavigationState.Base(v5, __src);
  outlined init with take of NavigationState.Base(__src, v55);
  v10 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v55);
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v55);
      outlined init with take of NavigationState.Base(__src, v41);
      v36 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
      memcpy(__dst, v11, 0x12BuLL);
      v12 = v11[38];
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v36);
      outlined consume of ResolvedNavigationDestinations?(v12);
      v13 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, a2 & 1, a3, a4, (uint64_t)__dst);
      v15 = ~v14;
      outlined release of NavigationColumnState(v11);
      if (v15)
        return v13;
      return 0;
    }
    v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v55);
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v20 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    v22 = *(_QWORD *)(v16 + 32);
    v21 = *(_QWORD *)(v16 + 40);
    v24 = *(_QWORD *)(v16 + 48);
    v23 = *(_QWORD *)(v16 + 56);
    v25 = *(_QWORD *)(v16 + 64);
    v26 = *(_WORD *)(v16 + 72);
    v43 = v17;
    v44 = v20;
    v45 = v19;
    v46 = v22;
    v47 = v21;
    v48 = v24;
    v49 = v23;
    v50 = v25;
    v51 = v26;
    if ((a2 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1877E9444);
    }
    if ((a1 & 0x8000000000000000) == 0)
    {
      v27 = *(_QWORD *)(v18 + 16);
      if (v27 <= a1)
      {
LABEL_19:
        __break(1u);
        JUMPOUT(0x1877E93C0);
      }
      v33 = v17;
      v34 = v20;
      v35 = v19;
      v37 = v22;
      v38 = v21;
      v39 = v24;
      v40 = v23;
      memcpy(v41, (const void *)(v18 + 304 * a1 + 32), 0x12BuLL);
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined retain of NavigationColumnState(v41);
      v13 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, 0, a3, a4, (uint64_t)v41);
      v28 = a1;
      v30 = ~v29;
      outlined release of NavigationColumnState(v41);
      if (v30)
      {
        outlined copy of NavigationSplitViewState?(v33, v34, v35, v37, v38, v39, v40, v25, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v13;
      }
      if (v28 + 1 == v27)
      {
        outlined copy of NavigationSplitViewState?(v33, v34, v35, v37, v38, v39, v40, v25, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return 0;
      }
      swift_bridgeObjectRetain();
      if (v28 + 1 < v27)
      {
        v32 = v18 + 304 * v28;
        memcpy(v42, (const void *)(v32 + 336), sizeof(v42));
        memcpy(v52, (const void *)(v32 + 336), sizeof(v52));
        __asm { BR              X9 }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v55);
  return 0;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6, int a7, int a8, __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  uint64_t v63;
  uint64_t v65;
  unsigned __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[49];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 v87;
  _BYTE v88[299];
  _QWORD __dst[38];
  _BYTE __src[392];
  _BYTE v91[400];

  outlined init with take of NavigationState.Base(v28, __src);
  outlined init with take of NavigationState.Base(__src, v91);
  v33 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v91);
  if (!v33)
    goto LABEL_6;
  if (v33 != 1)
  {
    v39 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
    v40 = *(_QWORD *)v39;
    v42 = *(_QWORD *)(v39 + 16);
    v41 = *(_QWORD *)(v39 + 24);
    v44 = *(_QWORD *)(v39 + 32);
    v43 = *(_QWORD *)(v39 + 40);
    v46 = *(_QWORD *)(v39 + 48);
    v45 = *(_QWORD *)(v39 + 56);
    v47 = *(_QWORD *)(v39 + 64);
    v48 = *(_WORD *)(v39 + 72);
    v79 = *(_QWORD *)(v39 + 8);
    v80 = v42;
    v81 = v41;
    v82 = v44;
    v83 = v43;
    v84 = v46;
    v85 = v45;
    v86 = v47;
    v87 = v48;
    v76 = v47;
    v77 = v40;
    v73 = v46;
    v74 = v45;
    v70 = v44;
    v72 = v43;
    v68 = v42;
    v69 = v41;
    v67 = v79;
    v66 = v48;
    v65 = (uint64_t)v28;
    if ((a2 & 1) != 0)
    {
      v52 = *(_QWORD *)(v40 + 16);
      outlined init with take of NavigationState.Base(__src, v78);
      v53 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v78);
      v54 = *(_QWORD *)(v53 + 8);
      v55 = *(_QWORD *)(v53 + 16);
      v56 = *(_QWORD *)(v53 + 24);
      v57 = *(_QWORD *)(v53 + 32);
      v58 = *(_QWORD *)(v53 + 40);
      v59 = *(_QWORD *)(v53 + 48);
      v60 = *(_QWORD *)(v53 + 56);
      v61 = *(_QWORD *)(v53 + 64);
      v62 = *(_WORD *)(v53 + 72);
      swift_bridgeObjectRetain();
      v63 = v55;
      a1 = v52;
      outlined copy of NavigationSplitViewState?(v54, v63, v56, v57, v58, v59, v60, v61, v62, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    }
    else
    {
      if (a1 < 0)
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (*(_QWORD *)(v40 + 16) <= (unint64_t)a1)
      {
LABEL_21:
        __break(1u);
        JUMPOUT(0x1877E9CA0);
      }
      memcpy(v78, (const void *)(v40 + 304 * a1 + 32), 0x12BuLL);
      outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
      outlined retain of NavigationColumnState(v78);
      v38 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(a1, 0, a3, a4, (uint64_t)v78);
      v50 = ~v49;
      outlined release of NavigationColumnState(v78);
      if (v50)
      {
        outlined copy of NavigationSplitViewState?(v67, v68, v69, v70, v72, v73, v74, v76, v66, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v38;
      }
    }
    if (!a1)
    {
      swift_bridgeObjectRelease();
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>(v65);
      v38 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
      outlined copy of NavigationSplitViewState?(v67, v68, v69, v70, v72, v73, v74, v76, v66, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>(v65);
      return v38;
    }
    if (a1 <= *(_QWORD *)(v77 + 16))
    {
      memcpy(v88, (const void *)(v77 + 304 * a1 - 272), sizeof(v88));
      __asm { BR              X9 }
    }
    __break(1u);
    goto LABEL_20;
  }
  v71 = a4;
  v34 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
  outlined init with take of NavigationState.Base(__src, v78);
  v75 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v78);
  memcpy(__dst, v34, 0x12BuLL);
  v35 = v34[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v75);
  outlined consume of ResolvedNavigationDestinations?(v35);
  if ((a2 & 1) != 0)
  {
    v36 = specialized NavigationState.StackContent.Views.ViewsSequence.lastIndex(for:stateIndex:)(__dst, 0);
    if (v51 == -1)
    {
      __break(1u);
      JUMPOUT(0x1877E9F08);
    }
    goto LABEL_13;
  }
  v36 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:for:)(a1, 0, a3, v71, (uint64_t)__dst);
  if (v37 != -1)
  {
LABEL_13:
    v38 = v36;
    outlined release of NavigationColumnState(v34);
    return v38;
  }
  __break(1u);
LABEL_6:
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v91);
  return specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
}

uint64_t *specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1, char a2, uint64_t a3, unsigned int a4)
{
  return specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:), (void (*)(unint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:));
}

uint64_t *specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1, char a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void (*a6)(unint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))
{
  void *v6;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  void (*v37)(unint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t);
  char v38;
  uint64_t v39;
  uint64_t v41[50];
  _QWORD __dst[38];
  _BYTE __src[392];
  _BYTE v44[400];

  outlined init with take of NavigationState.Base(v6, __src);
  outlined init with take of NavigationState.Base(__src, v44);
  v12 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v44);
  if (!v12)
  {
    v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    return (uint64_t *)a5(0, 0, *(_QWORD *)v16, *(unsigned __int8 *)(v16 + 8), *(_QWORD *)(v16 + 16), 0);
  }
  v38 = a2;
  v35 = a3;
  v36 = a4;
  v37 = a6;
  if (v12 != 1)
  {
    v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v24 = *(_QWORD *)(v18 + 32);
    v23 = *(_QWORD *)(v18 + 40);
    v25 = *(_QWORD *)(v18 + 48);
    v26 = *(_QWORD *)(v18 + 56);
    v27 = *(_QWORD *)(v18 + 64);
    v28 = *(_WORD *)(v18 + 72);
    __dst[0] = v20;
    __dst[1] = v21;
    __dst[2] = v22;
    __dst[3] = v24;
    __dst[4] = v23;
    __dst[5] = v25;
    __dst[6] = v26;
    __dst[7] = v27;
    LOWORD(__dst[8]) = v28;
    if ((v38 & 1) != 0)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v29 = *(_QWORD *)(v19 + 16);
      if (v29 >= a1)
      {
        v33 = v27;
        v34 = v25;
        v39 = v23;
        outlined retain of NavigationState.Base((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
        v30 = swift_bridgeObjectRetain();
        v31 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v30, (uint64_t)__dst, 0, (2 * a1) | 1);
        swift_bridgeObjectRelease();
        if (v29 > a1)
        {
          memcpy(v41, (const void *)(v19 + 304 * a1 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v41);
          swift_bridgeObjectRelease();
          v37(a1, 0, v35, v36, v41, v31);
          outlined copy of NavigationSplitViewState?(v20, v21, v22, v24, v39, v34, v26, v33, v28, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          v15 = v41;
          return outlined release of NavigationColumnState(v15);
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v13 = (_QWORD *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
  outlined init with take of NavigationState.Base(__src, v41);
  v32 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
  memcpy(__dst, v13, 0x12BuLL);
  v14 = v13[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v32);
  outlined consume of ResolvedNavigationDestinations?(v14);
  if ((v38 & 1) != 0 || a1)
    goto LABEL_18;
  a6(0, 0, a3, a4, __dst, 0);
  v15 = v13;
  return outlined release of NavigationColumnState(v15);
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)@<X0>(int64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(__int128 *, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t (*v45)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, ValueMetadata *, unint64_t);
  unint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t);
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  _OWORD v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[2];
  char v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;

  v11 = *(_QWORD *)(a5 + 16);
  v12 = *(unsigned __int8 *)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 32);
  v116 = *(_QWORD *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      if ((v116 & 0x8000000000000000) == 0)
      {
        v14 = v7;
        v15 = v13;
        v115 = a7;
        v16 = *(_QWORD *)(a5 + 176);
        v17 = *(uint64_t (**)(void))(*(_QWORD *)v116 + 88);
        swift_retain();
        v18 = v17();
        v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          v20 = v19 + a3;
          if (!__OFADD__(v19, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(_QWORD *)(v16 + 16) > a3)
              {
                v21 = a6 + v20;
                if (!__OFADD__(a6, v20))
                {
                  v22 = (_QWORD *)(v16 + 56 * a3);
                  v23 = v22[4];
                  *(_QWORD *)&v138 = v20;
                  *((_QWORD *)&v138 + 1) = v11;
                  LOBYTE(v139) = v12;
                  *((_QWORD *)&v139 + 1) = v15;
                  *(_QWORD *)&v140 = v21;
                  BYTE8(v140) = 1;
                  v24 = v7[49];
                  v25 = v14[50];
                  v26 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, ValueMetadata *, unint64_t))(*(_QWORD *)v23 + 96);
                  v27 = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
                  swift_retain();
                  v28 = v26(&v138, v24, v25, &type metadata for StackItemModifier, v27);
                  swift_release();
                  if (v12 >= 3)
                    v29 = 3;
                  else
                    v29 = v12;
                  LODWORD(v114) = v29;
                  v30 = v22[5];
                  v31 = v22[6];
                  v32 = v22[7];
                  v33 = v22[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v31, v32);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v31, v32);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v31, v32);
                  result = swift_release();
                  v35 = v115;
                  *(_QWORD *)(v115 + 32) = v31;
                  *(_QWORD *)(v35 + 40) = v32;
                  *(_QWORD *)(v35 + 48) = v33;
                  *(_BYTE *)(v35 + 64) = 1;
                  *(_QWORD *)v35 = v28;
                  *(_BYTE *)(v35 + 8) = v114;
                  *(_QWORD *)(v35 + 16) = v20;
                  *(_QWORD *)(v35 + 24) = v30;
                  return result;
                }
                goto LABEL_56;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_52;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      goto LABEL_63;
    }
    v54 = *(_QWORD *)(a5 + 120);
    v55 = *(_QWORD *)(a5 + 128);
    v56 = *(_QWORD *)(a5 + 136);
    v57 = *(_QWORD *)(a5 + 144);
    v58 = *(_QWORD *)(a5 + 160);
    v115 = *(_QWORD *)(a5 + 112);
    v59 = v115 & 0xF000000000000007;
    if (v116 < 0)
    {
      if (v59 == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_60:
          __break(1u);
          goto LABEL_63;
        }
        v60 = a7;
        v61 = a6;
        v62 = v11;
        v63 = v12;
        v64 = v13;
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v61, v62, v63, v64, v60);
      }
      if (v115 < 0)
      {
        v65 = v13;
        v113 = v56;
        v114 = v55;
        v110 = v58;
        v111 = v57;
        v112 = v54;
        outlined copy of NavigationColumnState.ReplacedRoot?(v115, v54, v55, v56);
        goto LABEL_45;
      }
    }
    else
    {
      if (v59 == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        v60 = a7;
        v61 = a6;
        v62 = v11;
        v63 = v12;
        v64 = v13;
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v61, v62, v63, v64, v60);
      }
      if (v115 < 0)
      {
        v65 = v13;
        v113 = v56;
        v114 = v55;
        v110 = v58;
        v111 = v57;
        v112 = v54;
        outlined copy of NavigationColumnState.ReplacedRoot(v115, v54, v55, v56);
LABEL_45:
        v92 = v115 & 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v138 = 0;
        *((_QWORD *)&v138 + 1) = v11;
        LOBYTE(v139) = v12;
        *((_QWORD *)&v139 + 1) = v65;
        *(_QWORD *)&v140 = a6;
        BYTE8(v140) = v116 >= 0;
        v93 = swift_allocObject();
        memcpy((void *)(v93 + 16), v7, 0x1A0uLL);
        *(_QWORD *)(v93 + 432) = v11;
        *(_BYTE *)(v93 + 440) = v12;
        *(_QWORD *)(v93 + 448) = v65;
        v94 = *(uint64_t (**)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(_QWORD *)v92 + 96);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
        v96 = v95;
        v97 = lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        v98 = v94(&v138, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v93, v96, v97);
        swift_release();
        if (v12 >= 3)
          v99 = 3;
        else
          v99 = v12;
        v100 = v112;
        swift_retain();
        v101 = v113;
        outlined copy of _ViewList_ID.Canonical?(v114, v113);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v114, v113);
        result = swift_release();
        *(_QWORD *)(a7 + 32) = v114;
        *(_QWORD *)(a7 + 40) = v101;
        *(_QWORD *)(a7 + 48) = v111;
        *(_BYTE *)(a7 + 64) = 1;
        *(_QWORD *)a7 = v98;
        *(_BYTE *)(a7 + 8) = v99;
        *(_QWORD *)(a7 + 24) = v100;
        goto LABEL_49;
      }
    }
    v109 = v13;
    if ((a2 & 1) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    outlined init with take of NavigationState.Base(v7, v128);
    outlined init with take of NavigationState.Base(v128, &v138);
    v66 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v138);
    if (v66 == 1)
    {
      v67 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v138);
      v68 = *(_QWORD *)(v67 + 304);
      if (!v68 || a1)
        goto LABEL_63;
      v69 = *(_QWORD *)(v67 + 384);
      v71 = *(_QWORD *)(v67 + 344);
      v70 = *(_QWORD *)(v67 + 352);
      v103 = *(unsigned __int8 *)(v67 + 376);
      v72 = *(_QWORD *)(v67 + 360);
      v104 = *(_QWORD *)(v67 + 368);
      v105 = *(_QWORD *)(v67 + 328);
      v106 = v69;
      v114 = *(_QWORD *)(v67 + 336);
      v74 = *(_QWORD *)(v67 + 312);
      v73 = *(_QWORD *)(v67 + 320);
      v112 = v71;
      v113 = v73;
      v108 = v70;
      swift_retain();
      v107 = v72;
      swift_retain();
      swift_bridgeObjectRetain();
      v111 = v68;
    }
    else
    {
      if (v66 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v138);
        goto LABEL_63;
      }
      v75 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v138);
      if (a1 <= 0)
      {
LABEL_63:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(_QWORD *)(*(_QWORD *)v75 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v76 = *(_QWORD *)v75 + 304 * (a1 - 1);
      v77 = *(_QWORD *)(v76 + 224);
      v74 = *(_QWORD *)(v76 + 232);
      v78 = *(_QWORD *)(v76 + 248);
      v79 = *(_QWORD *)(v76 + 256);
      v113 = *(_QWORD *)(v76 + 240);
      v114 = v79;
      v80 = *(_QWORD *)(v76 + 272);
      v112 = *(_QWORD *)(v76 + 264);
      v81 = *(_QWORD *)(v76 + 280);
      v104 = *(_QWORD *)(v76 + 288);
      v105 = v78;
      v103 = *(unsigned __int8 *)(v76 + 296);
      v106 = *(_QWORD *)(v76 + 304);
      v108 = v80;
      swift_retain();
      v107 = v81;
      swift_retain();
      v111 = v77;
      swift_bridgeObjectRetain();
    }
    v110 = v74;
    swift_bridgeObjectRetain();
    v82 = v113;
    swift_bridgeObjectRetain();
    v83 = v114;
    swift_bridgeObjectRetain();
    swift_retain();
    v84 = swift_allocObject();
    memcpy((void *)(v84 + 16), v7, 0x1A0uLL);
    *(_QWORD *)(v84 + 432) = v11;
    *(_BYTE *)(v84 + 440) = v12;
    v85 = v109;
    *(_QWORD *)(v84 + 448) = v109;
    v133[0] = 0;
    v133[1] = v11;
    v134 = v12;
    v135 = v85;
    v136 = a6;
    v137 = v116 >= 0;
    v117 = v111;
    v118 = v110;
    v119 = v82;
    v120 = v105;
    v121 = v83;
    v122 = v112;
    v123 = v108;
    v124 = v107;
    v125 = v104;
    v126 = v103;
    v127 = v106;
    v116 = *(_QWORD *)(*(_QWORD *)v115 + 168);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v87 = v86;
    v88 = lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    v89 = ((uint64_t (*)(unint64_t *, uint64_t (*)(), uint64_t, _QWORD *, uint64_t, unint64_t))v116)(&v117, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v84, v133, v87, v88);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = swift_bridgeObjectRelease();
    if (v12 >= 3)
      v91 = 3;
    else
      v91 = v12;
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 96))(v90);
    result = swift_release();
    *(_BYTE *)(a7 + 64) = 0;
    *(_QWORD *)a7 = v89;
    *(_BYTE *)(a7 + 8) = v91;
LABEL_49:
    *(_QWORD *)(a7 + 16) = 0;
    return result;
  }
  if (v116 < 0)
    goto LABEL_63;
  v36 = *(_OWORD *)(a5 + 240);
  v140 = *(_OWORD *)(a5 + 224);
  v141 = v36;
  v142 = *(_OWORD *)(a5 + 256);
  v143 = *(_QWORD *)(a5 + 272);
  v37 = *(_OWORD *)(a5 + 208);
  v138 = *(_OWORD *)(a5 + 192);
  v139 = v37;
  v38 = a3 + 1;
  if (__OFADD__(a3, 1))
    goto LABEL_51;
  if (__OFADD__(a6, v38))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v39 = v7[49];
  v40 = v7[50];
  v117 = a3 + 1;
  v118 = v11;
  LOBYTE(v119) = v12;
  v120 = v13;
  v121 = a6 + v38;
  LOBYTE(v122) = 1;
  v41 = *(_OWORD *)(a5 + 224);
  v42 = *(_OWORD *)(a5 + 256);
  v130 = *(_OWORD *)(a5 + 240);
  v131 = v42;
  v132 = *(_QWORD *)(a5 + 272);
  v43 = *(_OWORD *)(a5 + 208);
  v128[0] = *(_OWORD *)(a5 + 192);
  v128[1] = v43;
  v129 = v41;
  v45 = *(uint64_t (**)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, ValueMetadata *, unint64_t))(*(_QWORD *)v116 + 152);
  swift_retain();
  outlined retain of ResolvedNavigationDestinations((uint64_t)&v138);
  v46 = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
  v47 = v45(v133, v128, v39, v40, a3, &v117, &type metadata for StackItemModifier, v46);
  outlined release of ResolvedNavigationDestinations((uint64_t)&v138);
  if (v12 >= 3)
    v48 = 3;
  else
    v48 = v12;
  v49 = __swift_project_boxed_opaque_existential_1(v133, v135);
  v50 = MEMORY[0x1E0C80A78](v49, v49);
  (*(void (**)(char *, double))(v52 + 16))((char *)&v102 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0), v50);
  AnyHashable.init<A>(_:)();
  swift_release();
  BYTE8(v129) = 0;
  *(_QWORD *)a7 = v47;
  *(_BYTE *)(a7 + 8) = v48;
  *(_QWORD *)(a7 + 16) = v38;
  outlined init with take of NavigationStackViewSource((uint64_t)v128, a7 + 24);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
}

{
  _QWORD *v7;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(__int128 *, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t (*v44)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, _QWORD, _QWORD);
  uint64_t v45;
  char v46;
  _QWORD *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t);
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _OWORD v126[2];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _QWORD v131[2];
  char v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v11 = *(_QWORD *)(a5 + 16);
  v12 = *(unsigned __int8 *)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 32);
  v114 = *(_QWORD *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      if ((v114 & 0x8000000000000000) == 0)
      {
        v14 = v7;
        v15 = v13;
        v113 = a7;
        v16 = *(_QWORD *)(a5 + 176);
        v17 = *(uint64_t (**)(void))(*(_QWORD *)v114 + 88);
        swift_retain();
        v18 = v17();
        v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          v20 = v19 + a3;
          if (!__OFADD__(v19, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(_QWORD *)(v16 + 16) > a3)
              {
                v21 = a6 + v20;
                if (!__OFADD__(a6, v20))
                {
                  v22 = (_QWORD *)(v16 + 56 * a3);
                  v23 = v22[4];
                  *(_QWORD *)&v136 = v20;
                  *((_QWORD *)&v136 + 1) = v11;
                  LOBYTE(v137) = v12;
                  *((_QWORD *)&v137 + 1) = v15;
                  *(_QWORD *)&v138 = v21;
                  BYTE8(v138) = 1;
                  v24 = v7[49];
                  v25 = v14[50];
                  v26 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 96);
                  swift_retain();
                  v27 = v26(&v136, v24, v25, MEMORY[0x1E0CE1E98], MEMORY[0x1E0CE1E88]);
                  swift_release();
                  if (v12 >= 3)
                    v28 = 3;
                  else
                    v28 = v12;
                  LODWORD(v112) = v28;
                  v29 = v22[5];
                  v30 = v22[6];
                  v31 = v22[7];
                  v32 = v22[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v30, v31);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v30, v31);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v30, v31);
                  result = swift_release();
                  v34 = v113;
                  *(_QWORD *)(v113 + 32) = v30;
                  *(_QWORD *)(v34 + 40) = v31;
                  *(_QWORD *)(v34 + 48) = v32;
                  *(_BYTE *)(v34 + 64) = 1;
                  *(_QWORD *)v34 = v27;
                  *(_BYTE *)(v34 + 8) = v112;
                  *(_QWORD *)(v34 + 16) = v20;
                  *(_QWORD *)(v34 + 24) = v29;
                  return result;
                }
                goto LABEL_56;
              }
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          goto LABEL_52;
        }
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      goto LABEL_63;
    }
    v52 = *(_QWORD *)(a5 + 120);
    v53 = *(_QWORD *)(a5 + 128);
    v54 = *(_QWORD *)(a5 + 136);
    v55 = *(_QWORD *)(a5 + 144);
    v56 = *(_QWORD *)(a5 + 160);
    v113 = *(_QWORD *)(a5 + 112);
    v57 = v113 & 0xF000000000000007;
    if (v114 < 0)
    {
      if (v57 == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_60:
          __break(1u);
          goto LABEL_63;
        }
        v58 = a7;
        v59 = a6;
        v60 = v11;
        v61 = v12;
        v62 = v13;
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v59, v60, v61, v62, v58);
      }
      if (v113 < 0)
      {
        v63 = v13;
        v111 = v54;
        v112 = v53;
        v108 = v56;
        v109 = v55;
        v110 = v52;
        outlined copy of NavigationColumnState.ReplacedRoot?(v113, v52, v53, v54);
        goto LABEL_45;
      }
    }
    else
    {
      if (v57 == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        v58 = a7;
        v59 = a6;
        v60 = v11;
        v61 = v12;
        v62 = v13;
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v59, v60, v61, v62, v58);
      }
      if (v113 < 0)
      {
        v63 = v13;
        v111 = v54;
        v112 = v53;
        v108 = v56;
        v109 = v55;
        v110 = v52;
        outlined copy of NavigationColumnState.ReplacedRoot(v113, v52, v53, v54);
LABEL_45:
        v90 = v113 & 0x7FFFFFFFFFFFFFFFLL;
        *(_QWORD *)&v136 = 0;
        *((_QWORD *)&v136 + 1) = v11;
        LOBYTE(v137) = v12;
        *((_QWORD *)&v137 + 1) = v63;
        *(_QWORD *)&v138 = a6;
        BYTE8(v138) = v114 >= 0;
        v91 = swift_allocObject();
        memcpy((void *)(v91 + 16), v7, 0x1A0uLL);
        *(_QWORD *)(v91 + 432) = v11;
        *(_BYTE *)(v91 + 440) = v12;
        *(_QWORD *)(v91 + 448) = v63;
        v92 = *(uint64_t (**)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(_QWORD *)v90 + 96);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E0CE1E98], (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
        v94 = v93;
        v95 = lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        v96 = v92(&v136, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v91, v94, v95);
        swift_release();
        if (v12 >= 3)
          v97 = 3;
        else
          v97 = v12;
        v98 = v110;
        swift_retain();
        v99 = v111;
        outlined copy of _ViewList_ID.Canonical?(v112, v111);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v112, v111);
        result = swift_release();
        *(_QWORD *)(a7 + 32) = v112;
        *(_QWORD *)(a7 + 40) = v99;
        *(_QWORD *)(a7 + 48) = v109;
        *(_BYTE *)(a7 + 64) = 1;
        *(_QWORD *)a7 = v96;
        *(_BYTE *)(a7 + 8) = v97;
        *(_QWORD *)(a7 + 24) = v98;
        goto LABEL_49;
      }
    }
    v107 = v13;
    if ((a2 & 1) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    outlined init with take of NavigationState.Base(v7, v126);
    outlined init with take of NavigationState.Base(v126, &v136);
    v64 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v136);
    if (v64 == 1)
    {
      v65 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v136);
      v66 = *(_QWORD *)(v65 + 304);
      if (!v66 || a1)
        goto LABEL_63;
      v67 = *(_QWORD *)(v65 + 384);
      v69 = *(_QWORD *)(v65 + 344);
      v68 = *(_QWORD *)(v65 + 352);
      v101 = *(unsigned __int8 *)(v65 + 376);
      v70 = *(_QWORD *)(v65 + 360);
      v102 = *(_QWORD *)(v65 + 368);
      v103 = *(_QWORD *)(v65 + 328);
      v104 = v67;
      v112 = *(_QWORD *)(v65 + 336);
      v72 = *(_QWORD *)(v65 + 312);
      v71 = *(_QWORD *)(v65 + 320);
      v110 = v69;
      v111 = v71;
      v106 = v68;
      swift_retain();
      v105 = v70;
      swift_retain();
      swift_bridgeObjectRetain();
      v109 = v66;
    }
    else
    {
      if (v64 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v136);
        goto LABEL_63;
      }
      v73 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v136);
      if (a1 <= 0)
      {
LABEL_63:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(_QWORD *)(*(_QWORD *)v73 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v74 = *(_QWORD *)v73 + 304 * (a1 - 1);
      v75 = *(_QWORD *)(v74 + 224);
      v72 = *(_QWORD *)(v74 + 232);
      v76 = *(_QWORD *)(v74 + 248);
      v77 = *(_QWORD *)(v74 + 256);
      v111 = *(_QWORD *)(v74 + 240);
      v112 = v77;
      v78 = *(_QWORD *)(v74 + 272);
      v110 = *(_QWORD *)(v74 + 264);
      v79 = *(_QWORD *)(v74 + 280);
      v102 = *(_QWORD *)(v74 + 288);
      v103 = v76;
      v101 = *(unsigned __int8 *)(v74 + 296);
      v104 = *(_QWORD *)(v74 + 304);
      v106 = v78;
      swift_retain();
      v105 = v79;
      swift_retain();
      v109 = v75;
      swift_bridgeObjectRetain();
    }
    v108 = v72;
    swift_bridgeObjectRetain();
    v80 = v111;
    swift_bridgeObjectRetain();
    v81 = v112;
    swift_bridgeObjectRetain();
    swift_retain();
    v82 = swift_allocObject();
    memcpy((void *)(v82 + 16), v7, 0x1A0uLL);
    *(_QWORD *)(v82 + 432) = v11;
    *(_BYTE *)(v82 + 440) = v12;
    v83 = v107;
    *(_QWORD *)(v82 + 448) = v107;
    v131[0] = 0;
    v131[1] = v11;
    v132 = v12;
    v133 = v83;
    v134 = a6;
    v135 = v114 >= 0;
    v115 = v109;
    v116 = v108;
    v117 = v80;
    v118 = v103;
    v119 = v81;
    v120 = v110;
    v121 = v106;
    v122 = v105;
    v123 = v102;
    v124 = v101;
    v125 = v104;
    v114 = *(_QWORD *)(*(_QWORD *)v113 + 168);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E0CE1E98], (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v85 = v84;
    v86 = lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    v87 = ((uint64_t (*)(unint64_t *, uint64_t (*)(), uint64_t, _QWORD *, uint64_t, unint64_t))v114)(&v115, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v82, v131, v85, v86);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v88 = swift_bridgeObjectRelease();
    if (v12 >= 3)
      v89 = 3;
    else
      v89 = v12;
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 96))(v88);
    result = swift_release();
    *(_BYTE *)(a7 + 64) = 0;
    *(_QWORD *)a7 = v87;
    *(_BYTE *)(a7 + 8) = v89;
LABEL_49:
    *(_QWORD *)(a7 + 16) = 0;
    return result;
  }
  if (v114 < 0)
    goto LABEL_63;
  v35 = *(_OWORD *)(a5 + 240);
  v138 = *(_OWORD *)(a5 + 224);
  v139 = v35;
  v140 = *(_OWORD *)(a5 + 256);
  v141 = *(_QWORD *)(a5 + 272);
  v36 = *(_OWORD *)(a5 + 208);
  v136 = *(_OWORD *)(a5 + 192);
  v137 = v36;
  v37 = a3 + 1;
  if (__OFADD__(a3, 1))
    goto LABEL_51;
  if (__OFADD__(a6, v37))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v38 = v7[49];
  v39 = v7[50];
  v115 = a3 + 1;
  v116 = v11;
  LOBYTE(v117) = v12;
  v118 = v13;
  v119 = a6 + v37;
  LOBYTE(v120) = 1;
  v40 = *(_OWORD *)(a5 + 224);
  v41 = *(_OWORD *)(a5 + 256);
  v128 = *(_OWORD *)(a5 + 240);
  v129 = v41;
  v130 = *(_QWORD *)(a5 + 272);
  v42 = *(_OWORD *)(a5 + 208);
  v126[0] = *(_OWORD *)(a5 + 192);
  v126[1] = v42;
  v127 = v40;
  v44 = *(uint64_t (**)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, _QWORD, _QWORD))(*(_QWORD *)v114 + 152);
  swift_retain();
  outlined retain of ResolvedNavigationDestinations((uint64_t)&v136);
  v45 = v44(v131, v126, v38, v39, a3, &v115, MEMORY[0x1E0CE1E98], MEMORY[0x1E0CE1E88]);
  outlined release of ResolvedNavigationDestinations((uint64_t)&v136);
  if (v12 >= 3)
    v46 = 3;
  else
    v46 = v12;
  v47 = __swift_project_boxed_opaque_existential_1(v131, v133);
  v48 = MEMORY[0x1E0C80A78](v47, v47);
  (*(void (**)(char *, double))(v50 + 16))((char *)&v100 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0), v48);
  AnyHashable.init<A>(_:)();
  swift_release();
  BYTE8(v127) = 0;
  *(_QWORD *)a7 = v45;
  *(_BYTE *)(a7 + 8) = v46;
  *(_QWORD *)(a7 + 16) = v37;
  outlined init with take of NavigationStackViewSource((uint64_t)v126, a7 + 24);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v131);
}

{
  _QWORD *v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(__int128 *, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t (*v46)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, uint64_t, unint64_t);
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(unint64_t *, uint64_t (*)(), uint64_t, _QWORD *, uint64_t, unint64_t);
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t);
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  _OWORD v137[2];
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _QWORD v142[2];
  char v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;

  v125 = a7;
  v10 = *(_QWORD *)(a5 + 16);
  v11 = *(unsigned __int8 *)(a5 + 24);
  v12 = *(_QWORD *)(a5 + 32);
  v13 = *(_QWORD *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      if ((v13 & 0x8000000000000000) == 0)
      {
        v124 = v7;
        v14 = v12;
        v15 = v11;
        v16 = *(_QWORD *)(a5 + 176);
        v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88);
        v18 = swift_retain();
        v19 = v17(v18);
        v20 = v19 + 1;
        if (!__OFADD__(v19, 1))
        {
          v21 = v20 + a3;
          if (!__OFADD__(v20, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(_QWORD *)(v16 + 16) > a3)
              {
                v22 = a6 + v21;
                if (!__OFADD__(a6, v21))
                {
                  v23 = (_QWORD *)(v16 + 56 * a3);
                  v24 = v23[4];
                  *(_QWORD *)&v147 = v21;
                  *((_QWORD *)&v147 + 1) = v10;
                  v122 = v13;
                  v25 = v15;
                  LOBYTE(v148) = v15;
                  *((_QWORD *)&v148 + 1) = v14;
                  *(_QWORD *)&v149 = v22;
                  BYTE8(v149) = 1;
                  v26 = v125;
                  v27 = v124[49];
                  v28 = v124[50];
                  v29 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 96);
                  v124 = (_QWORD *)v21;
                  type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
                  v31 = v30;
                  v32 = lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
                  swift_retain();
                  v123 = v29(&v147, v27, v28, v31, v32);
                  swift_release();
                  if (v25 >= 3)
                    LOBYTE(v25) = 3;
                  v33 = v23[5];
                  v34 = v23[6];
                  v35 = v23[7];
                  v36 = v23[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v34, v35);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of _ViewList_ID.Canonical?(v34, v35);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v34, v35);
                  result = swift_release();
                  *(_QWORD *)(v125 + 32) = v34;
                  *(_QWORD *)(v26 + 40) = v35;
                  *(_QWORD *)(v26 + 48) = v36;
                  *(_BYTE *)(v26 + 64) = 1;
                  *(_QWORD *)v26 = v123;
                  *(_BYTE *)(v26 + 8) = v25;
                  *(_QWORD *)(v26 + 16) = v124;
                  *(_QWORD *)(v26 + 24) = v33;
                  return result;
                }
                goto LABEL_54;
              }
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          goto LABEL_50;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      goto LABEL_61;
    }
    v60 = *(_QWORD *)(a5 + 112);
    v59 = *(_QWORD *)(a5 + 120);
    v61 = *(_QWORD *)(a5 + 128);
    v62 = *(_QWORD *)(a5 + 136);
    v63 = *(_QWORD *)(a5 + 144);
    v64 = *(_QWORD *)(a5 + 160);
    if (v13 < 0)
    {
      if ((v60 & 0xF000000000000007) == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_61;
        }
        v65 = v125;
        v66 = a6;
        v67 = *(_QWORD *)(a5 + 16);
        v68 = *(_BYTE *)(a5 + 24);
        v69 = *(_QWORD *)(a5 + 32);
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v66, v67, v68, v69, v65);
      }
      if (v60 < 0)
      {
        v100 = *(_QWORD *)(a5 + 112);
        v101 = *(_QWORD *)(a5 + 120);
        v102 = *(_QWORD *)(a5 + 128);
        v123 = *(_QWORD *)(a5 + 136);
        v124 = (_QWORD *)v61;
        v120 = v64;
        v121 = v63;
        v122 = v59;
        outlined copy of NavigationColumnState.ReplacedRoot?(v100, v101, v102, v62);
        goto LABEL_44;
      }
    }
    else
    {
      if ((v60 & 0xF000000000000007) == 0xF000000000000007)
      {
        if ((a2 & 1) != 0)
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        v65 = v125;
        v66 = a6;
        v67 = *(_QWORD *)(a5 + 16);
        v68 = *(_BYTE *)(a5 + 24);
        v69 = *(_QWORD *)(a5 + 32);
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v66, v67, v68, v69, v65);
      }
      if (v60 < 0)
      {
        v70 = *(_QWORD *)(a5 + 112);
        v71 = *(_QWORD *)(a5 + 120);
        v72 = *(_QWORD *)(a5 + 128);
        v123 = *(_QWORD *)(a5 + 136);
        v124 = (_QWORD *)v61;
        v120 = v64;
        v121 = v63;
        v122 = v59;
        outlined copy of NavigationColumnState.ReplacedRoot(v70, v71, v72, v62);
LABEL_44:
        *(_QWORD *)&v147 = 0;
        *((_QWORD *)&v147 + 1) = v10;
        LOBYTE(v148) = v11;
        *((_QWORD *)&v148 + 1) = v12;
        *(_QWORD *)&v149 = a6;
        BYTE8(v149) = v13 >= 0;
        v103 = swift_allocObject();
        memcpy((void *)(v103 + 16), v7, 0x1A0uLL);
        *(_QWORD *)(v103 + 432) = v10;
        *(_BYTE *)(v103 + 440) = v11;
        *(_QWORD *)(v103 + 448) = v12;
        v104 = *(uint64_t (**)(__int128 *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v60 & 0x7FFFFFFFFFFFFFFFLL) + 96);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
        v106 = v105;
        v107 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        v108 = v104(&v147, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v103, v106, v107);
        swift_release();
        if (v11 >= 3)
          v109 = 3;
        else
          v109 = v11;
        v110 = v122;
        swift_retain();
        v111 = v123;
        outlined copy of _ViewList_ID.Canonical?((uint64_t)v124, v123);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?((uint64_t)v124, v123);
        result = swift_release();
        v112 = v125;
        *(_QWORD *)(v125 + 32) = v124;
        *(_QWORD *)(v112 + 40) = v111;
        *(_QWORD *)(v112 + 48) = v121;
        *(_BYTE *)(v112 + 64) = 1;
        *(_QWORD *)v112 = v108;
        *(_BYTE *)(v112 + 8) = v109;
        *(_QWORD *)(v112 + 16) = 0;
        *(_QWORD *)(v112 + 24) = v110;
        return result;
      }
    }
    if ((a2 & 1) != 0)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    outlined init with take of NavigationState.Base(v7, v137);
    outlined init with take of NavigationState.Base(v137, &v147);
    v73 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v147);
    v119 = v60;
    if (v73 == 1)
    {
      v74 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v147);
      v75 = *(_QWORD *)(v74 + 304);
      if (!v75 || a1)
        goto LABEL_61;
      v76 = *(_QWORD *)(v74 + 384);
      v78 = *(_QWORD *)(v74 + 344);
      v77 = *(_QWORD *)(v74 + 352);
      HIDWORD(v113) = *(unsigned __int8 *)(v74 + 376);
      v79 = *(_QWORD *)(v74 + 360);
      v114 = *(_QWORD *)(v74 + 368);
      v115 = *(_QWORD *)(v74 + 328);
      v116 = v76;
      v123 = *(_QWORD *)(v74 + 336);
      v124 = (_QWORD *)v78;
      v80 = *(_QWORD *)(v74 + 312);
      v121 = *(_QWORD *)(v74 + 320);
      v122 = v80;
      v118 = v77;
      swift_retain();
      v117 = v79;
      swift_retain();
      swift_bridgeObjectRetain();
      v120 = v75;
    }
    else
    {
      if (v73 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v147);
        goto LABEL_61;
      }
      v81 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v147);
      if (a1 <= 0)
      {
LABEL_61:
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(_QWORD *)(*(_QWORD *)v81 + 16))
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v82 = *(_QWORD *)v81 + 304 * (a1 - 1);
      v84 = *(_QWORD *)(v82 + 224);
      v83 = *(_QWORD *)(v82 + 232);
      v121 = *(_QWORD *)(v82 + 240);
      v122 = v83;
      v85 = *(_QWORD *)(v82 + 248);
      v87 = *(_QWORD *)(v82 + 264);
      v86 = *(_QWORD *)(v82 + 272);
      v123 = *(_QWORD *)(v82 + 256);
      v124 = (_QWORD *)v87;
      v88 = *(_QWORD *)(v82 + 280);
      v114 = *(_QWORD *)(v82 + 288);
      v115 = v85;
      HIDWORD(v113) = *(unsigned __int8 *)(v82 + 296);
      v116 = *(_QWORD *)(v82 + 304);
      v118 = v86;
      swift_retain();
      v117 = v88;
      swift_retain();
      v120 = v84;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v89 = v123;
    swift_bridgeObjectRetain();
    v90 = (uint64_t)v124;
    swift_retain();
    v91 = swift_allocObject();
    memcpy((void *)(v91 + 16), v7, 0x1A0uLL);
    *(_QWORD *)(v91 + 432) = v10;
    *(_BYTE *)(v91 + 440) = v11;
    *(_QWORD *)(v91 + 448) = v12;
    v142[0] = 0;
    v142[1] = v10;
    v143 = v11;
    v144 = v12;
    v145 = a6;
    v146 = v13 >= 0;
    v126 = v120;
    v127 = v122;
    v128 = v121;
    v129 = v115;
    v130 = v89;
    v131 = v90;
    v132 = v118;
    v133 = v117;
    v134 = v114;
    v135 = BYTE4(v113);
    v136 = v116;
    v92 = *(uint64_t (**)(unint64_t *, uint64_t (*)(), uint64_t, _QWORD *, uint64_t, unint64_t))(*(_QWORD *)v119 + 168);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
    v94 = v93;
    v95 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    v96 = v92(&v126, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v91, v142, v94, v95);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v97 = swift_bridgeObjectRelease();
    if (v11 >= 3)
      v98 = 3;
    else
      v98 = v11;
    v99 = v125;
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 96))(v97);
    result = swift_release();
    *(_BYTE *)(v125 + 64) = 0;
    *(_QWORD *)v99 = v96;
    *(_BYTE *)(v99 + 8) = v98;
    *(_QWORD *)(v99 + 16) = 0;
  }
  else
  {
    if (v13 < 0)
      goto LABEL_61;
    v38 = *(_OWORD *)(a5 + 240);
    v149 = *(_OWORD *)(a5 + 224);
    v150 = v38;
    v151 = *(_OWORD *)(a5 + 256);
    v152 = *(_QWORD *)(a5 + 272);
    v39 = *(_OWORD *)(a5 + 208);
    v147 = *(_OWORD *)(a5 + 192);
    v148 = v39;
    v40 = a3 + 1;
    if (__OFADD__(a3, 1))
      goto LABEL_49;
    if (__OFADD__(a6, v40))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v41 = v7[49];
    v42 = v7[50];
    v126 = a3 + 1;
    v127 = v10;
    LOBYTE(v128) = v11;
    v129 = v12;
    v130 = a6 + v40;
    LOBYTE(v131) = 1;
    v43 = *(_OWORD *)(a5 + 224);
    v44 = *(_OWORD *)(a5 + 256);
    v139 = *(_OWORD *)(a5 + 240);
    v140 = v44;
    v141 = *(_QWORD *)(a5 + 272);
    v45 = *(_OWORD *)(a5 + 208);
    v137[0] = *(_OWORD *)(a5 + 192);
    v137[1] = v45;
    v138 = v43;
    v46 = *(uint64_t (**)(_QWORD *, _OWORD *, uint64_t, uint64_t, unint64_t, unint64_t *, uint64_t, unint64_t))(*(_QWORD *)v13 + 152);
    swift_retain();
    outlined retain of ResolvedNavigationDestinations((uint64_t)&v147);
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    v47 = v11;
    v49 = v48;
    v50 = lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    v51 = v46(v142, v137, v41, v42, a3, &v126, v49, v50);
    outlined release of ResolvedNavigationDestinations((uint64_t)&v147);
    if (v47 >= 3)
      v52 = 3;
    else
      v52 = v47;
    v53 = v125;
    v54 = __swift_project_boxed_opaque_existential_1(v142, v144);
    v55 = MEMORY[0x1E0C80A78](v54, v54);
    (*(void (**)(char *, double))(v57 + 16))((char *)&v113 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0), v55);
    AnyHashable.init<A>(_:)();
    swift_release();
    BYTE8(v138) = 0;
    *(_QWORD *)v53 = v51;
    *(_BYTE *)(v53 + 8) = v52;
    *(_QWORD *)(v53 + 16) = v40;
    outlined init with take of NavigationStackViewSource((uint64_t)v137, v53 + 24);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v142);
  }
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  v13 = *(_QWORD *)(v6 + 408);
  result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v13 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v15 = result;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v13 + 96 * a1 + 32, (uint64_t)&v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  v18[0] = v15;
  v18[1] = 0;
  v19 = 1;
  v21[0] = 0;
  v21[1] = a3;
  v22 = a4;
  v23 = a5;
  v24 = a2;
  v25 = a4 == 3;
  if (a4 >= 3u)
    v16 = 3;
  else
    v16 = a4;
  v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v18, v21, *(void (**)(_QWORD *__return_ptr, uint64_t *))(v6 + 392));
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
  *(_QWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_BYTE *)(a6 + 64) = 2;
  *(_QWORD *)a6 = v17;
  *(_BYTE *)(a6 + 8) = v16;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  char v15;
  void (*v16)(_QWORD *);
  char v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  v13 = *(_QWORD *)(v6 + 408);
  result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(v13 + 16) <= a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v15 = a4;
  v18[0] = 0;
  v18[1] = a3;
  v19 = a4;
  v20 = a5;
  v21 = a2;
  v22 = a4 == 3;
  v16 = *(void (**)(_QWORD *))(v6 + 392);
  if (a4 >= 3u)
    v15 = 3;
  v17 = v15;
  *(_BYTE *)(swift_allocObject() + 16) = 1;
  v16(v18);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>();
  result = AnyView.init<A>(_:)();
  *(_QWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_BYTE *)(a6 + 64) = 2;
  *(_QWORD *)a6 = result;
  *(_BYTE *)(a6 + 8) = v17;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  v13 = *(_QWORD *)(v6 + 408);
  result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v13 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v15 = result;
  outlined init with copy of _VariadicView_Children(v13 + 56 * a1 + 32, (uint64_t)&v20);
  v18[0] = v15;
  v18[1] = 0;
  v19 = 1;
  v21[0] = 0;
  v21[1] = a3;
  v22 = a4;
  v23 = a5;
  v24 = a2;
  v25 = a4 == 3;
  if (a4 >= 3u)
    v16 = 3;
  else
    v16 = a4;
  v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v18, v21, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v6 + 392));
  result = outlined destroy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>((uint64_t)v18);
  *(_QWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_BYTE *)(a6 + 64) = 2;
  *(_QWORD *)a6 = v17;
  *(_BYTE *)(a6 + 8) = v16;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

uint64_t specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v8;
  char v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  __int128 v33;
  _OWORD v34[3];
  __int16 v35;
  char v36;
  char v37;
  char v38;
  _BYTE v39[17];

  result = outlined init with take of Image.Resolved?(a1, (uint64_t)&v28, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  if ((_QWORD)v29 != 1)
  {
    v34[0] = v29;
    v34[1] = v30;
    v34[2] = v31;
    v35 = v32;
    v33 = v28;
    v10 = *(unsigned __int8 *)(a2 + 24);
    outlined init with take of Image.Resolved?((uint64_t)&v35 + 1, (uint64_t)&v36, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
    outlined init with take of Image.Resolved?((uint64_t)&v36, (uint64_t)v39, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
    if (v39[0] == 3)
    {
LABEL_11:
      v11 = 0;
LABEL_27:
      outlined init with take of Image.Resolved?((uint64_t)v34 + 9, (uint64_t)&v37, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
      result = outlined init with take of Image.Resolved?((uint64_t)&v37, (uint64_t)&v38, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
      v22 = 0;
      if (v38 == 3 || v10 > 2)
      {
LABEL_33:
        if (v11)
          goto LABEL_34;
        goto LABEL_38;
      }
      if (v38)
      {
        if (v38 == 1 && v10 == 2)
          goto LABEL_32;
      }
      else if (v10 - 1 < 2)
      {
LABEL_32:
        v22 = 0;
        goto LABEL_33;
      }
      v22 = 1;
      if (v11)
      {
LABEL_34:
        if (v11 != 1)
          goto LABEL_35;
        goto LABEL_39;
      }
LABEL_38:
      if ((v22 & 1) != 0)
        goto LABEL_39;
      goto LABEL_2;
    }
    if (v10)
    {
      if (v10 == 2)
      {
        if (v39[0] != 2)
          goto LABEL_16;
      }
      else
      {
        if (v10 != 1)
          goto LABEL_11;
        if (v39[0] - 1 >= 2)
        {
LABEL_16:
          v11 = 2;
          goto LABEL_27;
        }
      }
    }
    v11 = 1;
    goto LABEL_27;
  }
LABEL_2:
  v8 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  v27 = a4;
  if (*(_BYTE *)(a2 + 296))
    goto LABEL_4;
  v12 = *(_QWORD *)(a2 + 168);
  if (v12 < 0)
  {
    result = 0;
    v9 = 0;
    if ((v8 & 0x8000000000000000) != 0)
      return result & 1;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 136);
  v26 = *(_QWORD *)(a2 + 128);
  v16 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 144);
  v25 = v15;
  v17 = *(_QWORD *)(a2 + 160);
  v18 = *(_QWORD *)(a2 + 176);
  outlined copy of NavigationColumnState.ColumnContent(v13, v14, v26, v15, v24, v16, v17, v12);
  outlined copy of NavigationColumnState.ColumnContent(v13, v14, v26, v15, v24, v16, v17, v12);
  outlined retain of NavigationColumnState((uint64_t *)a2);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v13, v14, v26, v15);
  v23 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v14;
  outlined consume of NavigationColumnState.ColumnContent(v13, v14, v26, v25, v24, v16, v17, v12);
  result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)a2);
  if (v23)
  {
LABEL_4:
    a4 = v27;
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v9 = 1;
  }
  else
  {
    outlined copy of NavigationColumnState.ColumnContent(v13, v14, v26, v25, v24, v16, v17, v12);
    outlined copy of NavigationColumnState.ColumnContent(v13, v14, v26, v25, v24, v16, v17, v12);
    outlined retain of NavigationColumnState((uint64_t *)a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = outlined consume of NavigationColumnState.ReplacedRoot?(v13, v14, v26, v25);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v20);
    swift_release();
    outlined consume of NavigationColumnState.ColumnContent(v13, v19, v26, v25, v24, v16, v17, v12);
    result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)a2);
    if ((v8 & 0x8000000000000000) != 0)
    {
      if ((v21 & 1) != 0)
        goto LABEL_35;
      goto LABEL_39;
    }
    v9 = v21 ^ 1;
    a4 = v27;
  }
LABEL_6:
  if (v8 < *(_QWORD *)(a4 + 16))
  {
    if (*(_QWORD *)(a4 + 304 * v8 + 80))
    {
      LOBYTE(result) = NavigationListState.hasNonEmptySelection.getter();
      if ((v9 & 1) == 0)
        return result & 1;
      goto LABEL_39;
    }
    if ((v9 & 1) == 0)
    {
LABEL_35:
      LOBYTE(result) = 0;
      return result & 1;
    }
LABEL_39:
    LOBYTE(result) = 1;
    return result & 1;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X1>, unsigned __int8 a3@<W2>, Swift::UInt a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t Strong;
  uint64_t v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _OWORD v20[9];
  __int16 v21;
  _BYTE v22[416];
  _BYTE v23[152];
  _BYTE v24[168];
  _QWORD v25[52];
  _QWORD v26[52];
  _BYTE v27[392];
  _OWORD v28[9];
  __int16 v29;

  Strong = swift_weakLoadStrong();
  if (Strong
    && (v13 = Strong + 16,
        swift_beginAccess(),
        outlined init with take of Image.Resolved?(v13, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v24) != 1))
  {
    outlined init with take of Image.Resolved?((uint64_t)v23, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    v28[6] = v20[6];
    v28[7] = v20[7];
    v28[8] = v20[8];
    v29 = v21;
    v28[2] = v20[2];
    v28[3] = v20[3];
    v28[4] = v20[4];
    v28[5] = v20[5];
    v28[0] = v20[0];
    v28[1] = v20[1];
    NavigationState.stackContent(for:)(a2, a3, a4, (uint64_t)v26);
    outlined retain of NavigationState?((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    outlined init with take of Image.Resolved?((uint64_t)v26, (uint64_t)v22, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v25, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v25) != 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v28, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      goto LABEL_8;
    }
    outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v27, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v25);
    outlined init with take of Image.Resolved?((uint64_t)v25, (uint64_t)v27, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  outlined retain of NavigationState.Base((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.StackContent?);
  v26[0] = a2;
  if (a3 == 4)
    v14 = 0;
  else
    v14 = a3;
  LOBYTE(v26[1]) = v14;
  v26[2] = a4;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v26);
  outlined init with take of NavigationState.Base(v26, v28);
LABEL_8:
  outlined init with take of NavigationState.Base(v28, v25);
  v25[49] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v25[50] = 0;
  v25[51] = &outlined read-only object #0 of _NavigationStackStyleConfiguration.init(authority:context:structureSeed:);
  v15 = memcpy(v26, v25, sizeof(v26));
  MEMORY[0x1E0C80A78](v15, v16);
  outlined retain of NavigationState.Base((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH01_hJ18StyleConfigurationV4RootVAH13EmptyModifierVGG_AR4ItemVs5NeverOTB505_sSi7f4UI15hi3V12jk27V14PositionedViewVAA01_cE18mn2V4r32VIgynr_Si6offset_AG7elementtAKs5S11OIegnrzr_TRSiAL0yZ0VAZIgynr_Tf1cn_nTf4ng_n(v26, (void (*)(__int128 *__return_ptr, uint64_t))partial apply for closure #1 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:));
  outlined retain of NavigationState.Base((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v25);
  outlined init with take of NavigationAuthority(a1, (uint64_t)v22);
  v18 = swift_allocObject();
  result = outlined init with take of NavigationAuthority((uint64_t)v22, v18 + 16);
  *(_QWORD *)(v18 + 40) = a2;
  *(_BYTE *)(v18 + 48) = a3;
  *(_QWORD *)(v18 + 56) = a4;
  *(_QWORD *)a6 = a2;
  *(_BYTE *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = v17;
  *(_QWORD *)(a6 + 32) = partial apply for closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:);
  *(_QWORD *)(a6 + 40) = v18;
  *(_DWORD *)(a6 + 48) = a5;
  *(_BYTE *)(a6 + 52) = BYTE4(a5) & 1;
  return result;
}

uint64_t _NavigationStackStyleConfiguration.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  char v7;
  char v8;
  uint64_t v9;
  __int128 v11[8];
  uint64_t v12;
  _BYTE v13[56];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  static Transaction.current.getter();
  static Transaction.current.getter();
  v7 = Transaction.disablesAnimations.getter();
  swift_release();
  if ((v7 & 1) != 0)
    v8 = 1;
  else
    v8 = Transaction.disablesAnimations.getter();
  static Transaction.current.getter();
  v9 = Transaction.animation.getter();
  swift_release();
  if (!v9)
    v9 = Transaction.animation.getter();
  swift_release();
  memset(&v13[8], 0, 48);
  v12 = v9;
  *(_QWORD *)v13 = 1;
  v14 = 0;
  LOBYTE(v15) = 9;
  *((_QWORD *)&v15 + 1) = a2;
  *(_QWORD *)&v16 = a3;
  *((_QWORD *)&v16 + 1) = a4;
  v17 = 0;
  v18 = 0;
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = v8 & 1;
  v20 = v9;
  v11[6] = 0u;
  v11[7] = v19;
  v11[2] = *(_OWORD *)&v13[32];
  v11[3] = 0uLL;
  v11[4] = v15;
  v11[5] = v16;
  v11[0] = *(_OWORD *)v13;
  v11[1] = *(_OWORD *)&v13[16];
  NavigationAuthority.enqueueRequest(_:)(v11);
  return outlined release of NavigationRequest((uint64_t)v13);
}

Swift::Void __swiftcall _NavigationStackStyleConfiguration.pop()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 32))();
}

void protocol witness for View.body.getter in conformance _NavigationStackStyleConfiguration.Root()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _NavigationStackStyleConfiguration.Item.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(v1 + 48, a1);
}

uint64_t outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _NavigationStackStyleConfiguration.Item.ID(a2, a1);
  return a2;
}

uint64_t _NavigationStackStyleConfiguration.Item.id.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of _NavigationStackStyleConfiguration.Item.ID(a1, v1 + 48);
}

uint64_t outlined assign with take of _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  if (a2 != a1)
  {
    outlined destroy of NavigationStackViewSource(a2 + 8);
    v4 = *(_OWORD *)(a1 + 33);
    v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a2 + 24) = v5;
    *(_OWORD *)(a2 + 33) = v4;
  }
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  return a2;
}

uint64_t (*_NavigationStackStyleConfiguration.Item.id.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _NavigationStackStyleConfiguration.Item.depth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t static _NavigationStackStyleConfiguration.Item._makeView(view:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<_NavigationStackStyleConfiguration.Item>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  return static AnyView._makeView(view:inputs:)();
}

void _NavigationStackStyleConfiguration.Item.ID.hash(into:)()
{
  uint64_t v0;
  _BYTE v1[32];
  void (*v2)(_OWORD *__return_ptr, uint64_t);
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  Hasher._combine(_:)(*(_QWORD *)v0);
  outlined init with copy of NavigationStackViewSource(v0 + 8, (uint64_t)&v8);
  if (v11)
  {
    if (v11 == 1)
    {
      *(_OWORD *)v1 = v8;
      *(_OWORD *)&v1[16] = v9;
      Hasher._combine(_:)(2uLL);
      if (*(_QWORD *)v1)
      {
        Hasher._combine(_:)(1u);
        v2 = *(void (**)(_OWORD *__return_ptr, uint64_t))(**(_QWORD **)v1 + 96);
        v3 = swift_retain();
        v2(v6, v3);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v6);
        swift_release();
        if (*(_QWORD *)&v1[16] == 1)
        {
LABEL_5:
          Hasher._combine(_:)(0);
LABEL_10:
          Hasher._combine(_:)(*(Swift::UInt *)&v1[24]);
          swift_release();
          outlined consume of Text.LineStyle?(*(uint64_t *)&v1[8], *(uint64_t *)&v1[16]);
          goto LABEL_11;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (*(_QWORD *)&v1[16] == 1)
          goto LABEL_5;
      }
      v6[0] = *(_OWORD *)&v1[8];
      Hasher._combine(_:)(1u);
      _ViewList_ID.Canonical.hash(into:)();
      goto LABEL_10;
    }
    Hasher._combine(_:)(0);
  }
  else
  {
    v6[0] = v8;
    v6[1] = v9;
    v7 = v10;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v6);
  }
LABEL_11:
  v4 = *(unsigned __int8 *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 56));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
}

Swift::Int _NavigationStackStyleConfiguration.Item.ID.hashValue.getter()
{
  Hasher.init(_seed:)();
  _NavigationStackStyleConfiguration.Item.ID.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _NavigationStackStyleConfiguration.Item.ID()
{
  Hasher.init(_seed:)();
  _NavigationStackStyleConfiguration.Item.ID.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _NavigationStackStyleConfiguration.Item.ID()
{
  Hasher.init(_seed:)();
  _NavigationStackStyleConfiguration.Item.ID.hash(into:)();
  return Hasher._finalize()();
}

uint64_t _NavigationStackStyleConfiguration.Item.Child.value.getter()
{
  uint64_t Value;
  uint64_t Strong;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  char v35;
  BOOL v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  unsigned __int8 v50;
  __int16 v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[53];
  char v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  _QWORD __src[52];
  _OWORD v70[9];
  __int16 v71;
  _QWORD v72[19];
  _BYTE v73[48];
  uint64_t v74;
  _BYTE v75[128];
  _BYTE __dst[416];
  _BYTE v77[392];
  _OWORD v78[9];
  __int16 v79;

  Value = AGGraphGetValue();
  outlined init with copy of _NavigationStackStyleConfiguration.Item(Value, (uint64_t)v75);
  Strong = swift_weakLoadStrong();
  outlined destroy of _NavigationStackStyleConfiguration.Item((uint64_t)v75);
  if (Strong
    && (swift_beginAccess(),
        outlined init with take of Image.Resolved?(Strong + 16, (uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)v72, (uint64_t)v73, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v73) != 1))
  {
    outlined init with take of Image.Resolved?((uint64_t)v72, (uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    v47 = AGGraphGetValue();
    v48 = *(_QWORD *)v47;
    v49 = *(_QWORD *)(v47 + 16);
    v50 = *(_BYTE *)(v47 + 8);
    v78[6] = v70[6];
    v78[7] = v70[7];
    v78[8] = v70[8];
    v79 = v71;
    v78[2] = v70[2];
    v78[3] = v70[3];
    v78[4] = v70[4];
    v78[5] = v70[5];
    v78[0] = v70[0];
    v78[1] = v70[1];
    NavigationState.stackContent(for:)(v48, v50, v49, (uint64_t)v61);
    outlined retain of NavigationState?((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    outlined init with take of Image.Resolved?((uint64_t)v61, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined init with take of Image.Resolved?((uint64_t)__src, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__dst) != 1)
    {
      outlined init with take of Image.Resolved?((uint64_t)__src, (uint64_t)v78, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      goto LABEL_8;
    }
    v2 = __src;
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
    v2 = __dst;
  }
  outlined init with take of Image.Resolved?((uint64_t)v2, (uint64_t)v77, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  v3 = AGGraphGetValue();
  v4 = *(_QWORD *)v3;
  v5 = *(unsigned __int8 *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  outlined retain of NavigationState.Base((uint64_t)v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.StackContent?);
  v61[0] = v4;
  if (v5 == 4)
    v7 = 0;
  else
    v7 = v5;
  LOBYTE(v61[1]) = v7;
  v61[2] = v6;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v61);
  outlined init with take of NavigationState.Base(v61, v78);
LABEL_8:
  outlined init with take of NavigationState.Base(v78, __src);
  __src[49] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  __src[50] = 0;
  __src[51] = &outlined read-only object #0 of _NavigationStackStyleConfiguration.Item.Child.value.getter;
  memcpy(__dst, __src, sizeof(__dst));
  v8 = AGGraphGetValue();
  outlined init with copy of _NavigationStackStyleConfiguration.Item(v8, (uint64_t)v73);
  v9 = v74;
  outlined retain of NavigationState.Base((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
  outlined destroy of _NavigationStackStyleConfiguration.Item((uint64_t)v73);
  v14 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  if (v9 < 0)
  {
    v24 = 0;
    do
    {
      --v24;
      v14 = specialized NavigationState.StackContent.Views.ViewsSequence.index(before:)(v14, v20 & 1, v16, v18, v10, v11, v12, v13, v51, v53, v55, v57, v58, v59, SHIDWORD(v59), v60, v61[0], v61[1], v61[2],
              v61[3],
              v61[4],
              v61[5],
              v61[6],
              v61[7],
              v61[8],
              v61[9],
              v61[10],
              v61[11]);
      v16 = v25;
      v18 = v26;
      v20 = v27 & 1;
    }
    while (v9 < v24);
  }
  else
  {
    for (; v9; --v9)
    {
      v14 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v14, v20 & 1, v16, v18);
      v16 = v21;
      v18 = v22;
      v20 = v23 & 1;
    }
  }
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  v28 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = v29 & 1;
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  memcpy(v61, __src, 0x1A0uLL);
  v62 = v35;
  v61[52] = v28;
  v63 = v32;
  v64 = v34;
  v66 = 1;
  v65 = 0;
  v67 = 0;
  v68 = 2;
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v61);
  if ((v30 & 1) == 0 || v34 <= 1u)
  {
    v37 = v18 == 2 && v16 == 0;
    v52 = v37;
    while (1)
    {
      v38 = v34;
      outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v61);
      v39 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v28, v30 & 1, v32, v34);
      v54 = v40;
      v56 = v39;
      v42 = v41;
      v34 = v43;
      outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
      if ((v30 & 1) != 0)
      {
        if (!v20)
          goto LABEL_38;
      }
      else
      {
        if (v28 == v14)
          v44 = v20;
        else
          v44 = 1;
        if ((v44 & 1) != 0)
          goto LABEL_38;
      }
      if (!v38)
        break;
      if (v38 == 1)
      {
        if (v18 != 1)
          goto LABEL_38;
        goto LABEL_35;
      }
      if (v52)
      {
LABEL_44:
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(v14, v20, v16, v18, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:), (void (*)(unint64_t, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:));
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        outlined retain of NavigationState.Base((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
        v45 = v72[0];
        swift_retain();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v72);
        return v45;
      }
LABEL_38:
      v30 = v42 & 1;
      v32 = v54;
      v28 = v56;
      if ((v42 & 1) != 0 && v34 > 1u)
        goto LABEL_40;
    }
    if ((_BYTE)v18)
      goto LABEL_38;
LABEL_35:
    if (v32 == v16)
      goto LABEL_44;
    goto LABEL_38;
  }
LABEL_40:
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  v45 = AnyView.init<A>(_:)();
  outlined retain of NavigationState.Base((uint64_t)v78, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of NavigationState.Base);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)__src);
  return v45;
}

uint64_t protocol witness for Rule.value.getter in conformance _NavigationStackStyleConfiguration.Item.Child@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _NavigationStackStyleConfiguration.Item.Child.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance _NavigationStackStyleConfiguration.Item@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of _NavigationStackStyleConfiguration.Item.ID(v1 + 48, a1);
}

void protocol witness for View.body.getter in conformance _NavigationStackStyleConfiguration.Item()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View._navigationStackStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NavigationStackStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t NavigationStackStyleModifier.styleBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t AssociatedConformanceWitness;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v23 - v14;
  v16 = *((_BYTE *)a1 + 8);
  v17 = a1[2];
  v18 = a1[5];
  LODWORD(v14) = *((_DWORD *)a1 + 12);
  v19 = *((_BYTE *)a1 + 52);
  v24 = *a1;
  v25 = v16;
  v26 = v17;
  v27 = *(_OWORD *)(a1 + 3);
  v28 = v18;
  v29 = v14;
  v30 = v19;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 24))(&v24, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, AssociatedTypeWitness);
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _NavigationStackStyleConfiguration.Item.Child, &unk_1E1B43FD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Item.Child and conformance _NavigationStackStyleConfiguration.Item.Child);
  }
  return result;
}

uint64_t specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(uint64_t a1, uint64_t a2, int64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD __dst[38];

  v6 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) < a3)
  {
    __break(1u);
    JUMPOUT(0x1877EE980);
  }
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)v6 <= a3)
    {
      __break(1u);
    }
    else if ((a3 & 0x8000000000000000) == 0)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v6 <= v5 && a4 >= 2 && v5 > a3)
      {
        memcpy(__dst, (const void *)(a1 + 304 * a3 + 32), 0x12BuLL);
        __asm { BR              X10 }
      }
LABEL_13:
      __break(1u);
      JUMPOUT(0x1877EE994);
    }
    __break(1u);
    goto LABEL_13;
  }
  return 0;
}

BOOL specialized static _NavigationStackStyleConfiguration.Item.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || (static NavigationStackViewSource.== infix(_:_:)(a1 + 8, a2 + 8) & 1) == 0)
    return 0;
  return *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72);
}

uint64_t type metadata accessor for NavigationStackStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationStackStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for _NavigationStackStyleConfiguration.Root(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _NavigationStackStyleConfiguration.Root()
{
  return &protocol witness table for _NavigationStackStyleConfiguration.Root;
}

_UNKNOWN **base witness table accessor for View in _NavigationStackStyleConfiguration.Item()
{
  return &protocol witness table for _NavigationStackStyleConfiguration.Item;
}

uint64_t dispatch thunk of _NavigationStackStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration()
{
  return &type metadata for _NavigationStackStyleConfiguration;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Root()
{
  return &type metadata for _NavigationStackStyleConfiguration.Root;
}

uint64_t destroy for _NavigationStackStyleConfiguration.Item(uint64_t a1)
{
  uint64_t result;

  swift_weakDestroy();
  swift_release();
  result = swift_release();
  if (*(_BYTE *)(a1 + 96) == 1)
  {
    swift_release();
    result = *(_QWORD *)(a1 + 72);
    if (result != 1)
      return swift_release();
  }
  else if (!*(_BYTE *)(a1 + 96))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }
  return result;
}

uint64_t initializeWithCopy for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(unsigned __int8 *)(a2 + 96);
  swift_retain();
  swift_retain();
  if (v5 == 1)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v9 = (_OWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 72);
    swift_retain();
    if (v10 == 1)
    {
      *(_OWORD *)(a1 + 64) = *v9;
    }
    else
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)v9;
      *(_QWORD *)(a1 + 72) = v10;
      swift_retain();
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = 1;
  }
  else
  {
    v6 = (_OWORD *)(a1 + 56);
    v7 = (_OWORD *)(a2 + 56);
    if (v5)
    {
      v11 = *(_OWORD *)(a2 + 72);
      *v6 = *v7;
      *(_OWORD *)(a1 + 72) = v11;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v8;
      (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
      *(_BYTE *)(a1 + 96) = 0;
    }
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 56);
    if (*(_BYTE *)(a2 + 96) == 1)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v6 = *(_QWORD *)(a2 + 72);
      swift_retain();
      if (v6 == 1)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      }
      else
      {
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        swift_retain();
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = 1;
    }
    else
    {
      v4 = (__int128 *)(a2 + 56);
      if (*(_BYTE *)(a2 + 96))
      {
        v7 = *v4;
        v8 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 56) = v7;
        *(_OWORD *)(a1 + 72) = v8;
      }
      else
      {
        v5 = *(_QWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 80) = v5;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1 + 56, v4);
        *(_BYTE *)(a1 + 96) = 0;
      }
    }
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t initializeWithTake for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeInit();
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t assignWithTake for _NavigationStackStyleConfiguration.Item(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 128) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Item()
{
  return &type metadata for _NavigationStackStyleConfiguration.Item;
}

uint64_t destroy for _NavigationStackStyleConfiguration.Item.ID(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 48) == 1)
  {
    swift_release();
    result = *(_QWORD *)(v1 + 24);
    if (result != 1)
      return swift_release();
  }
  else if (!*(_BYTE *)(result + 48))
  {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t initializeWithCopy for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a2 + 48);
  if (v5 == 1)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v8 = (_OWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    swift_retain();
    if (v9 == 1)
    {
      *(_OWORD *)(a1 + 16) = *v8;
    }
    else
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)v8;
      *(_QWORD *)(a1 + 24) = v9;
      swift_retain();
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    v6 = (_OWORD *)(a2 + 8);
    if (v5)
    {
      v10 = *(_OWORD *)(a2 + 24);
      *v4 = *v6;
      v4[1] = v10;
      *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v4, v6);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = (__int128 *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 8);
    if (*(_BYTE *)(a2 + 48) == 1)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 24);
      swift_retain();
      if (v7 == 1)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      }
      else
      {
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_retain();
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 48) = 1;
    }
    else if (*(_BYTE *)(a2 + 48))
    {
      v8 = *v4;
      v9 = v4[1];
      *(_OWORD *)((char *)v5 + 25) = *(__int128 *)((char *)v4 + 25);
      *v5 = v8;
      v5[1] = v9;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      (**(void (***)(_OWORD *, __int128 *))(v6 - 8))(v5, v4);
      *(_BYTE *)(a1 + 48) = 0;
    }
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
  {
    outlined destroy of NavigationStackViewSource(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item.ID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NavigationStackStyleConfiguration.Item.ID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Item.ID()
{
  return &type metadata for _NavigationStackStyleConfiguration.Item.ID;
}

uint64_t sub_1877EF3F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for NavigationStackStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for NavigationStackStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t getEnumTagSinglePayload for NavigationStackStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1877EF500 + 4 * byte_187C5F398[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationStackStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void *type metadata accessor for _NavigationStackStyleConfiguration.Item.Child()
{
  return &unk_1E1B43FD0;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationStackStyleModifier<A>()
{
  return &protocol witness table for NavigationStackStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in NavigationStackStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for NavigationStackStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t outlined destroy of _NavigationStackStyleConfiguration.Item(uint64_t a1)
{
  destroy for _NavigationStackStyleConfiguration.Item(a1);
  return a1;
}

_QWORD *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  v2 = result[33] & 7;
  v3 = result[37] & 0xFFFF03;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD *__return_ptr, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE v13[168];
  uint64_t (*v14)();
  uint64_t v15;
  _BYTE v16[120];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _BYTE v24[288];
  _QWORD __src[37];

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5] & 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v10;
  v23 = 1;
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 1;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  v14 = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
  v15 = v11;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  a3(__src, a2);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  memcpy(v24, __src, sizeof(v24));
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>();
  return AnyView.init<A>(_:)();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH01_hJ18StyleConfigurationV4RootVAH13EmptyModifierVGG_AR4ItemVs5NeverOTB505_sSi7f4UI15hi3V12jk27V14PositionedViewVAA01_cE18mn2V4r32VIgynr_Si6offset_AG7elementtAKs5S11OIegnrzr_TRSiAL0yZ0VAZIgynr_Tf1cn_nTf4ng_n(const void *a1, void (*a2)(__int128 *__return_ptr, uint64_t))
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  const void *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *);
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60[27];
  __int128 v61;
  _OWORD v62[3];
  char v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  unsigned __int8 v70;
  _BYTE __src[416];
  uint64_t v72;
  _BYTE __dst[416];
  _QWORD v74[52];
  _QWORD v75[2];
  char v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  _BYTE v80[304];
  uint64_t v81[38];
  _QWORD v82[8];
  unsigned __int16 v83;
  _BYTE v84[392];
  _BYTE v85[408];
  int v86;
  int v87;

  v72 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v3 = v72;
  memcpy(__dst, a1, sizeof(__dst));
  memcpy(__src, a1, sizeof(__src));
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a1);
  v59 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  v6 = v5;
  v7 = v4;
  v9 = v8 & 1;
  v85[392] = v8 & 1;
  v70 = v8 & 1;
  if ((v8 & 1) != 0 && v4 > 1u)
  {
LABEL_3:
    memcpy(v60, __src, 0x1A0uLL);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v60);
    return v3;
  }
  else
  {
    v11 = 0;
    while (1)
    {
      memcpy(v74, __src, sizeof(v74));
      outlined init with take of NavigationState.Base(v74, v84);
      outlined init with take of NavigationState.Base(v84, v85);
      v12 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v85);
      v57 = v6;
      v86 = v7;
      v58 = v11;
      v87 = v9;
      if (v12)
      {
        if (v12 == 1)
        {
          v13 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
          memcpy(v60, v13, 0x188uLL);
          memcpy(v80, v13, 0x12BuLL);
          v53 = *(_QWORD *)&v60[19];
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
          outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          outlined consume of ResolvedNavigationDestinations?(v53);
          v14 = v59;
          v15 = v87;
          if (v87 & 1 | (v59 != 0))
            goto LABEL_33;
          v16 = v6;
          v17 = v86;
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v6, v86, (uint64_t)v80, 0, (uint64_t)&v61);
          outlined release of NavigationColumnState((uint64_t *)v60);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
        }
        else
        {
          v29 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
          v30 = *(_QWORD *)v29;
          v31 = *(_QWORD *)(v29 + 8);
          v33 = *(_QWORD *)(v29 + 16);
          v32 = *(_QWORD *)(v29 + 24);
          v35 = *(_QWORD *)(v29 + 32);
          v34 = *(_QWORD *)(v29 + 40);
          v36 = *(_QWORD *)(v29 + 48);
          v37 = *(_QWORD *)(v29 + 56);
          v38 = *(_QWORD *)(v29 + 64);
          v39 = *(_WORD *)(v29 + 72);
          v82[0] = v31;
          v82[1] = v33;
          v82[2] = v32;
          v82[3] = v35;
          v82[4] = v34;
          v82[5] = v36;
          v82[6] = v37;
          v82[7] = v38;
          v83 = v39;
          if ((v87 & 1) != 0)
            goto LABEL_32;
          v14 = v59;
          if ((v59 & 0x8000000000000000) != 0)
            goto LABEL_29;
          if (*(_QWORD *)(v30 + 16) < v59)
            goto LABEL_30;
          v50 = v39;
          v51 = v38;
          v52 = v37;
          v55 = v36;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
          outlined retain of NavigationState.Base((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of NavigationState.Base);
          v40 = swift_bridgeObjectRetain();
          v41 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v40, (uint64_t)v82, 0, (2 * v59) | 1);
          swift_bridgeObjectRelease();
          if (v59 >= *(_QWORD *)(v30 + 16))
            goto LABEL_31;
          memcpy(v81, (const void *)(v30 + 304 * v59 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v81);
          swift_bridgeObjectRelease();
          v16 = v57;
          v42 = v41;
          v43 = v34;
          v17 = v86;
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v59, 0, v57, v86, (uint64_t)v81, v42, (uint64_t)&v61);
          outlined copy of NavigationSplitViewState?(v31, v33, v32, v35, v43, v55, v52, v51, v50, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          outlined release of NavigationColumnState(v81);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
          v15 = v87;
        }
      }
      else
      {
        v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v85);
        v19 = *(_QWORD *)v18;
        v20 = *(unsigned __int8 *)(v18 + 8);
        v21 = *(_QWORD *)(v18 + 16);
        v22 = v74[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
        v23 = static HorizontalAlignment.center.getter();
        if (!*(_QWORD *)(v22 + 16))
          goto LABEL_28;
        v24 = v23;
        v75[0] = 0;
        v75[1] = v19;
        v76 = v20;
        v77 = v21;
        v78 = 0;
        v79 = (_DWORD)v20 == 3;
        v25 = (void (*)(_QWORD *))v74[49];
        v26 = v20 >= 3 ? 3 : v20;
        v54 = v26;
        v27 = swift_allocObject();
        *(_BYTE *)(v27 + 16) = 1;
        v25(v75);
        v60[0] = (unint64_t)v24;
        LOBYTE(v60[1]) = 1;
        *((_QWORD *)&v60[1] + 1) = 0;
        *(_QWORD *)&v60[2] = v19;
        *((_QWORD *)&v60[2] + 1) = v20;
        v60[3] = v21;
        LOBYTE(v60[4]) = (_DWORD)v20 == 3;
        v16 = v6;
        BYTE1(v60[4]) = 1;
        *((_QWORD *)&v60[4] + 1) = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
        *(_QWORD *)&v60[5] = v27;
        v17 = v86;
        v15 = v87;
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>();
        v28 = AnyView.init<A>(_:)();
        *((_QWORD *)&v62[2] + 1) = 0;
        *(_OWORD *)((char *)v62 + 8) = 0u;
        *(_OWORD *)((char *)&v62[1] + 8) = 0u;
        v63 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v74);
        *(_QWORD *)&v61 = v28;
        BYTE8(v61) = v54;
        *(_QWORD *)&v62[0] = 0;
        v14 = v59;
      }
      v44 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v14, v15 & 1, v16, v17);
      v70 = v47 & 1;
      *(__int128 *)((char *)&v60[2] + 8) = v62[1];
      *(__int128 *)((char *)&v60[3] + 8) = v62[2];
      BYTE8(v60[4]) = v63;
      *(__int128 *)((char *)v60 + 8) = v61;
      *(__int128 *)((char *)&v60[1] + 8) = v62[0];
      if (__OFADD__(v58, 1))
        break;
      v6 = v45;
      v7 = v46;
      v59 = v44;
      v67 = *(__int128 *)((char *)&v60[2] + 8);
      v68 = *(__int128 *)((char *)&v60[3] + 8);
      v69 = BYTE8(v60[4]);
      v65 = *(__int128 *)((char *)v60 + 8);
      v66 = *(__int128 *)((char *)&v60[1] + 8);
      v64 = v58;
      a2(v60, v58);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v64, (uint64_t (*)(_QWORD))type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView));
      v3 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v72;
      }
      v49 = *(_QWORD *)(v3 + 16);
      v48 = *(_QWORD *)(v3 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v48 > 1), v49 + 1, 1);
        v3 = v72;
      }
      *(_QWORD *)(v3 + 16) = v49 + 1;
      outlined init with take of _NavigationStackStyleConfiguration.Item(v60, v3 + (v49 << 7) + 32);
      v9 = v70;
      v11 = v58 + 1;
      if (v70 == 1 && v7 > 1u)
        goto LABEL_3;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[80];
  _BYTE v20[56];
  uint64_t v21;
  uint64_t v22;

  outlined init with take of NavigationColumnState.ColumnContent(a5 + 112, (uint64_t)v19);
  result = outlined init with take of NavigationColumnState.ColumnContent((uint64_t)v19, (uint64_t)v20);
  if (v21 < 0)
    return 0;
  v9 = v22;
  if (!a4)
  {
    v10 = __OFADD__(a3, 1);
    v12 = a3 + 1;
    if (v10)
      goto LABEL_17;
    v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = swift_bridgeObjectRetain();
    v15 = v13(v14);
    swift_release();
    if (v12 >= v15)
    {
LABEL_11:
      v18 = *(_QWORD *)(v9 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v18)
        return 0;
      return a1;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (a4 != 1)
  {
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    LOBYTE(v16) = v16(v17);
    swift_release();
    if ((v16 & 1) != 0)
      goto LABEL_11;
    goto LABEL_13;
  }
  v10 = __OFADD__(a3, 1);
  v11 = a3 + 1;
  if (!v10)
  {
    if (v11 < *(_QWORD *)(v22 + 16))
      return a1;
    return 0;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[41];
  uint64_t (*v21)();
  uint64_t v22;
  _BYTE v23[80];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5] & 1;
  outlined init with copy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(a1, (uint64_t)v23);
  v24 = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = v10;
  v30 = 1;
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 1;
  outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>((uint64_t)v23, (uint64_t)v20);
  v21 = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
  v22 = v11;
  outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>((uint64_t)v23);
  a3(&v16, a2);
  LOBYTE(a3) = v16;
  v15 = v17;
  v12 = v18;
  v13 = v19;
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v20, (uint64_t)v23);
  v31 = (char)a3;
  v32 = v15;
  v33 = v12;
  v34 = v13;
  outlined destroy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>((uint64_t)v20);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
  return AnyView.init<A>(_:)();
}

uint64_t outlined init with take of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2)
{
  __swift_memcpy80_8(a2, a1);
  return a2;
}

uint64_t partial apply for specialized closure #1 in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(*a1, **(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result & 1;
  return result;
}

uint64_t sub_1877F058C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)(a1, *(_BYTE *)(v1 + 16));
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>);
  }
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, a3);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, (uint64_t)&protocol witness table for _NavigationStackStyleConfiguration.Root);
    v3[1] = &protocol witness table for ReadDestinationsModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined retain of ResolvedNavigationDestinations(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ResolvedNavigationDestinations(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E0CE1E98], (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = MEMORY[0x1E0CE1E88];
    v2[1] = &protocol witness table for ReplacedRootDismissModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 432);
  v4 = *(_BYTE *)(v1 + 440);
  v5 = *(_QWORD *)(v1 + 448);
  result = (*(uint64_t (**)(void))(v1 + 408))();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_1877F0A18()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t partial apply for closure #1 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_BYTE *)(v3 + 24);
  v9 = *(_QWORD *)(v3 + 32);
  outlined init with copy of NavigationAuthority(*(_QWORD *)(v3 + 40), a3 + 24);
  result = outlined init with copy of NavigationStackViewSource(a2 + 24, a3 + 56);
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 16) = v9;
  *(_QWORD *)(a3 + 48) = a1;
  *(_QWORD *)(a3 + 104) = v7;
  *(_BYTE *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 120) = v9;
  return result;
}

uint64_t sub_1877F0AF0()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)()
{
  uint64_t v0;

  return closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)(v0 + 16, *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

void type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: NavigationState.StackContent.PositionedView))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: NavigationState.StackContent.PositionedView));
  }
}

uint64_t outlined init with take of _NavigationStackStyleConfiguration.Item(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v4 = *a1;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
  *(_OWORD *)a2 = v4;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 32) = a1[2];
  v5 = a1[7];
  v7 = a1[4];
  v6 = a1[5];
  *(_OWORD *)(a2 + 96) = a1[6];
  *(_OWORD *)(a2 + 112) = v5;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = a1[3];
  return a2;
}

uint64_t sub_1877F0C00()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ResolvedNavigationStackStyle()
{
  return &type metadata for ResolvedNavigationStackStyle;
}

unint64_t lazy protocol witness table accessor for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>)
  {
    type metadata accessor for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationStackStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackStyleModifier<_AutomaticNavigationStackStyle> and conformance NavigationStackStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>)
  {
    v2 = lazy protocol witness table accessor for type _AutomaticNavigationStackStyle and conformance _AutomaticNavigationStackStyle();
    v4 = type metadata accessor for NavigationStackStyleModifier(a1, (uint64_t)&type metadata for _AutomaticNavigationStackStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationStackStyleModifier<_AutomaticNavigationStackStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedNavigationStackStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedNavigationStackStyle()
{
  lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for _VariadicView.Tree();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t outlined init with copy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1877F0E18()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, a3, a4);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v5 = type metadata accessor for ModifiedContent();
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = MEMORY[0x1E0CE5600];
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    v3 = v2;
    v4[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _VariadicView_Children> and conformance <> _VariadicView.Tree<A, B>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>, v1, MEMORY[0x1E0CE55F0]);
    v4[1] = &protocol witness table for ReadDestinationsModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, a2);
    v8[0] = MEMORY[0x1E0CE25C0];
    v8[1] = a4;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for ReplacedRootDismissModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

double partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)(v1 + 432);
  v4 = *(_BYTE *)(v1 + 440);
  v5 = *(_QWORD *)(v1 + 448);
  (*(void (**)(uint64_t *__return_ptr))(v1 + 408))(&v7);
  *(_BYTE *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = v3;
  *(_BYTE *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier;
  if (!lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StackItemModifier, &type metadata for StackItemModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemModifier and conformance StackItemModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<StackItemModifier, ReplacedRootDismissModifier>, (uint64_t)&type metadata for StackItemModifier, (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
    v3[1] = &protocol witness table for ReplacedRootDismissModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StackItemModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t objectdestroy_3Tm_3()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 304);
  v3 = *(_OWORD *)(v0 + 272);
  v4 = *(_OWORD *)(v0 + 288);
  v2 = *(_OWORD *)(v0 + 240);
  outlined consume of NavigationState.Base(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    *(_QWORD *)(v0 + 256),
    *(_QWORD *)(v0 + 264),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(_QWORD *)(v0 + 320));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *result;
  _QWORD v7[36];

  v3 = *(_QWORD *)(v1 + 432);
  v4 = *(_BYTE *)(v1 + 440);
  v5 = *(_QWORD *)(v1 + 448);
  (*(void (**)(_QWORD *__return_ptr))(v1 + 408))(v7);
  result = memcpy((void *)a1, v7, 0x120uLL);
  *(_QWORD *)(a1 + 288) = v3;
  *(_BYTE *)(a1 + 296) = v4;
  *(_QWORD *)(a1 + 304) = v5;
  return result;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>(255, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  }
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>();
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
  }
}

uint64_t sub_1877F15EC()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ReadDestinationsModifier<ResolvedNavigationDestinations>, (uint64_t)&type metadata for ResolvedNavigationDestinations, (uint64_t)&protocol witness table for ResolvedNavigationDestinations, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ReadDestinationsModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationDestinationKey> and conformance _PreferenceTransformModifier<A>);
    v3[1] = lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, StackItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>();
    v3[1] = &protocol witness table for ReadDestinationsModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>();
    v4[0] = MEMORY[0x1E0CE25C0];
    v4[1] = v3;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v4);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root> and conformance <> _VariadicView.Tree<A, B>(&lazy protocol witness table cache variable for type _VariadicView.Tree<_VStackLayout, _VariadicView_Children> and conformance <> _VariadicView.Tree<A, B>, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>, MEMORY[0x1E0CE5600], MEMORY[0x1E0CE55F0]);
    v3[1] = lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier;
  if (!lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RootItemModifier, &type metadata for RootItemModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootItemModifier and conformance RootItemModifier);
  }
  return result;
}

uint64_t View.listDisclosureGroupIndentation(base:step:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18D75B4AC](v5, a1, &type metadata for ListDisclosureGroupIndentationModifier, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IncrementListDisclosureGroupDepth(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IncrementListDisclosureGroupDepth(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance IncrementListDisclosureGroupDepth()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IncrementListDisclosureGroupDepth()
{
  uint64_t result;
  uint64_t v1;

  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  result = PropertyList.subscript.getter();
  if (!__OFADD__(v1, 1))
    return PropertyList.subscript.setter();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupIndentationTraitKey()
{
  return &type metadata for ListDisclosureGroupIndentationTraitKey;
}

ValueMetadata *type metadata accessor for IncrementListDisclosureGroupDepth()
{
  return &type metadata for IncrementListDisclosureGroupDepth;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupIndentationModifier()
{
  return &type metadata for ListDisclosureGroupIndentationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ListDisclosureGroupIndentationModifier()
{
  return &protocol witness table for ListDisclosureGroupIndentationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in IncrementListDisclosureGroupDepth()
{
  return &protocol witness table for IncrementListDisclosureGroupDepth;
}

uint64_t static ListDisclosureGroupIndentationModifier._makeViewList(modifier:inputs:body:)()
{
  type metadata accessor for _GraphValue<ListDisclosureGroupIndentationModifier>();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>();
  lazy protocol witness table accessor for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  return static _TraitWritingModifier._makeViewList(modifier:inputs:body:)();
}

void ListDisclosureGroupIndentationModifier.Child.value.getter(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v2;
  double *Value;

  v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    Value = (double *)AGGraphGetValue();
    *a2 = *Value + Value[1] * (double)(v2 & ~(v2 >> 63));
  }
}

void protocol witness for Rule.value.getter in conformance ListDisclosureGroupIndentationModifier.Child(double *a1@<X8>)
{
  uint64_t v1;

  ListDisclosureGroupIndentationModifier.Child.value.getter(*(_QWORD *)(v1 + 8), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance ListDisclosureGroupIndentationModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for _GraphValue<ListDisclosureGroupIndentationModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ListDisclosureGroupIndentationModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ListDisclosureGroupIndentationModifier>);
  }
}

void type metadata accessor for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>)
  {
    v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>);
  }
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupIndentationModifier.Child, &unk_1E1B08258);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupIndentationModifier.Child and conformance ListDisclosureGroupIndentationModifier.Child);
  }
  return result;
}

void *type metadata accessor for ListDisclosureGroupIndentationModifier.Child()
{
  return &unk_1E1B08258;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupDepthInput()
{
  return &type metadata for ListDisclosureGroupDepthInput;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> (@unowned Bool)(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void PlatformItem.applyAccessibilityProperties(on:item:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  Class isa;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  _BYTE v59[32];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v2 = *(_QWORD *)(v1 + 320);
  if (!v2)
    return;
  swift_bridgeObjectRetain_n();
  v4 = AGGraphClearUpdate();
  MEMORY[0x1E0C80A78](v4, v5);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  *(_OWORD *)v59 = v61;
  v6 = EnvironmentValues.accessibilityEnabled.getter();
  swift_release();
  swift_release();
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v7 = PlatformItem.accessibilityEffectiveText.getter();
  if (v7)
  {
    v8 = v7;
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, v7);

  }
  else
  {
    objc_msgSend(a1, sel_setAccessibilityAttributedLabel_, 0);
  }
  v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v61);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_11;
  if (v62 >= 2u)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v11 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v11 != -1)
      swift_once();
    *(_WORD *)v59 = static TabOptions.TraitKey.defaultValue;
    *(_OWORD *)&v59[8] = *(_OWORD *)&qword_1EDF00118;
    *(_WORD *)&v59[24] = word_1EDF00128;
    v59[26] = byte_1EDF0012A;
    *(_QWORD *)&v60 = qword_1EDF00130;
    WORD4(v60) = word_1EDF00138;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    v12 = *((_QWORD *)&v61 + 1);
    v13 = v62;
    v14 = BYTE8(v62);
    outlined copy of TabCustomizationID?(*((uint64_t *)&v61 + 1), v62, BYTE8(v62));
    outlined consume of TabCustomizationID?(v12, v13, v14);
    swift_bridgeObjectRelease();
    if (v14 == 255)
    {
      objc_msgSend(a1, sel_setAccessibilityIdentifier_, 0);
    }
    else
    {
      v15 = (void *)MEMORY[0x18D75CC88](v12, v13);
      outlined consume of TabCustomizationID?(v12, v13, v14);
      objc_msgSend(a1, sel_setAccessibilityIdentifier_, v15);

    }
    goto LABEL_16;
  }
  v10 = (void *)MEMORY[0x18D75CC88](v61, *((_QWORD *)&v61 + 1));
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAccessibilityIdentifier_, v10);

LABEL_16:
  v16 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v16, v59);
  swift_bridgeObjectRelease();
  v57 = a1;
  if (*((_QWORD *)&v60 + 1))
  {
    v62 = *(_OWORD *)&v59[16];
    v63 = v60;
    v61 = *(_OWORD *)v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = AGGraphClearUpdate();
    MEMORY[0x1E0C80A78](v17, v18);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    v19 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (v21)
    {
      v22 = (void *)MEMORY[0x18D75CC88](v19, v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = 0;
    }
    objc_msgSend(a1, sel_setAccessibilityValue_, v22);

    outlined destroy of AccessibilityValueStorage((uint64_t)&v61);
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v59, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    objc_msgSend(a1, sel_setAccessibilityValue_, 0);
  }
  v23 = swift_bridgeObjectRetain();
  v24 = specialized AccessibilityProperties.subscript.getter(v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v58 = v2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26 = v24 + 56;
      v27 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v28 = *(_BYTE *)(v26 - 8);
        v29 = *(_QWORD *)(v26 - 24);
        v30 = *(_QWORD *)(v26 - 16);
        swift_bridgeObjectRetain();
        outlined copy of Text.Storage(v29, v30, v28);
        swift_bridgeObjectRetain();
        v31 = AGGraphClearUpdate();
        MEMORY[0x1E0C80A78](v31, v32);
        static Update.ensure<A>(_:)();
        AGGraphSetUpdate();
        swift_bridgeObjectRelease();
        *(_OWORD *)v59 = v61;
        v33 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
        v35 = v34;
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v29, v30, v28);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
        v37 = *((_QWORD *)v27 + 2);
        v36 = *((_QWORD *)v27 + 3);
        if (v37 >= v36 >> 1)
          v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v27);
        *((_QWORD *)v27 + 2) = v37 + 1;
        v38 = &v27[16 * v37];
        *((_QWORD *)v38 + 4) = v33;
        *((_QWORD *)v38 + 5) = v35;
        v26 += 32;
        --v25;
      }
      while (v25);
      v2 = v58;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v57;
    }
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setAccessibilityUserInputLabels_, isa);

  }
  else
  {
    objc_msgSend(a1, sel_setAccessibilityUserInputLabels_, 0);
  }
  *(_QWORD *)v59 = v2;
  AccessibilityProperties.traits.getter();
  v40 = v61;
  v41 = static AccessibilityTrait.allCases.getter();
  v42 = 0;
  v43 = *(_QWORD *)(v41 + 16);
  if (v43)
  {
    v44 = (unsigned __int8 *)(v41 + 32);
    do
    {
      v46 = *v44++;
      v45 = v46;
      v47 = (1 << v46) & 0x2844;
      if (v46 <= 0xD && v47 != 0 && ((v40 >> v45) & 1) != 0)
      {
        v59[0] = v45;
        v49 = AccessibilityTrait.uiTrait.getter();
        if ((v50 & 1) == 0)
          v42 |= v49;
      }
      --v43;
    }
    while (v43);
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_setAccessibilityTraits_, v42);
  *(_QWORD *)&v61 = v2;
  AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  v51 = AGGraphClearUpdate();
  MEMORY[0x1E0C80A78](v51, v52);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  *(_OWORD *)v59 = v61;
  v53 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  v55 = v54;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v55)
  {
    v56 = (void *)MEMORY[0x18D75CC88](v53, v55);
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = 0;
  }
  objc_msgSend(v57, sel_setAccessibilityHint_, v56);

}

void AccessibilityNode.rotorChildNodes.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t ObjectType;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t i;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t, uint64_t, unint64_t);
  id v77;
  Class isa;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, char *, unint64_t);
  char *v91;
  char *v92;
  Class v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  void (*v103)(char *, unint64_t, unint64_t);
  char *v104;
  id v105;
  char *v106;
  char *v107;
  uint64_t v108;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v107 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v106 = (char *)&v100 - v7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for IndexPath?, v8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v100 - v15;
  v17 = (unint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  v18 = *v17;
  if (*v17 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
      return;
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19)
      return;
  }
  swift_bridgeObjectRelease();
  AccessibilityNode.platformElement.getter();
  if (v21)
  {
    v22 = v21;
    objc_opt_self();
    v23 = (void *)swift_dynamicCastObjCClass();
    if (v23)
    {
      v24 = v23;
      v107 = v22;
      v108 = MEMORY[0x1E0DEE9D8];
      v25 = objc_msgSend(v23, sel_visibleCells);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
      v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v1 >> 62)
      {
        swift_bridgeObjectRetain();
        v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v26)
          goto LABEL_44;
      }
      else
      {
        v26 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v26)
          goto LABEL_44;
      }
      if (v26 < 1)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v2 = 0;
      v18 = v1 & 0xC000000000000001;
      do
      {
        if (v18)
          v27 = (char *)MEMORY[0x18D75E3BC](v2, v1);
        else
          v27 = (char *)*(id *)(v1 + 8 * v2 + 32);
        v16 = v27;
        swift_getObjectType();
        v28 = swift_conformsToProtocol2();
        if (v28)
          v29 = v28;
        else
          v29 = 0;
        if (v28)
          v30 = v16;
        else
          v30 = 0;
        if (v30)
        {
          ObjectType = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(ObjectType, *(_QWORD *)(v29 + 8));
          specialized Array.append<A>(contentsOf:)(v32);
        }
        ++v2;

      }
      while (v26 != v2);
LABEL_44:
      swift_bridgeObjectRelease();
      v48 = (unint64_t)objc_msgSend(v24, sel_numberOfSections);
      if ((v48 & 0x8000000000000000) == 0)
      {
        v49 = v48;
        if (v48)
        {
          v50 = 0;
          do
          {
            v51 = objc_msgSend(v24, sel_headerViewForSection_, v50);
            if (v51)
            {
              v52 = v51;
              swift_getObjectType();
              v53 = swift_conformsToProtocol2();
              if (v53)
                v54 = v53;
              else
                v54 = 0;
              if (v53)
                v55 = v52;
              else
                v55 = 0;
              if (v55)
              {
                v56 = swift_getObjectType();
                v57 = *(_QWORD *)(v54 + 8);
                v58 = v52;
                PlatformListViewBase.accessibilityNodes.getter(v56, v57);
                specialized Array.append<A>(contentsOf:)(v59);

              }
            }
            v60 = objc_msgSend(v24, sel_footerViewForSection_, v50);
            if (v60)
            {
              v61 = v60;
              swift_getObjectType();
              v62 = swift_conformsToProtocol2();
              if (v62)
                v63 = v62;
              else
                v63 = 0;
              if (v62)
                v64 = v61;
              else
                v64 = 0;
              if (v64)
              {
                v65 = swift_getObjectType();
                v66 = *(_QWORD *)(v63 + 8);
                v67 = v61;
                PlatformListViewBase.accessibilityNodes.getter(v65, v66);
                specialized Array.append<A>(contentsOf:)(v68);

              }
            }
            ++v50;
          }
          while (v49 != v50);
        }

        return;
      }
      __break(1u);
      goto LABEL_70;
    }

  }
  AccessibilityNode.platformElement.getter();
  v34 = MEMORY[0x1E0DEE9D8];
  if (!v33)
    return;
  v35 = v33;
  objc_opt_self();
  v36 = (void *)swift_dynamicCastObjCClass();
  if (!v36)
  {

    return;
  }
  v37 = v36;
  v104 = v12;
  v108 = v34;
  v38 = objc_msgSend(v36, sel_visibleCells);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v105 = v37;
  v101 = v35;
  if (v18 >> 62)
  {
LABEL_71:
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v39)
      goto LABEL_72;
LABEL_28:
    if (v39 < 1)
    {
      __break(1u);
      return;
    }
    for (i = 0; i != v39; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0)
        v41 = (id)MEMORY[0x18D75E3BC](i, v18);
      else
        v41 = *(id *)(v18 + 8 * i + 32);
      v42 = v41;
      swift_getObjectType();
      v43 = swift_conformsToProtocol2();
      if (v43)
        v44 = v43;
      else
        v44 = 0;
      if (v43)
        v45 = v42;
      else
        v45 = 0;
      if (v45)
      {
        v46 = swift_getObjectType();
        PlatformListViewBase.accessibilityNodes.getter(v46, *(_QWORD *)(v44 + 8));
        specialized Array.append<A>(contentsOf:)(v47);
      }

    }
    goto LABEL_72;
  }
  v39 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v39)
    goto LABEL_28;
LABEL_72:
  swift_bridgeObjectRelease();
  v69 = v105;
  v70 = (void *)*MEMORY[0x1E0DC48A8];
  v71 = objc_msgSend(v105, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v73 = *(_QWORD *)(v72 + 16);
  v100 = v72;
  if (v73)
  {
    v74 = v72 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v75 = *(char **)(v2 + 16);
    v102 = *(_QWORD *)(v2 + 72);
    v103 = (void (*)(char *, unint64_t, unint64_t))v75;
    ((void (*)(char *, unint64_t, unint64_t))v75)(v16, v74, v1);
    while (1)
    {
      v76 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v2 + 56);
      v76(v16, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v2 + 48))(v16, 1, v1) == 1)
        break;
      (*(void (**)(char *, char *, unint64_t))(v2 + 32))(v106, v16, v1);
      v77 = v70;
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v79 = objc_msgSend(v69, sel_supplementaryViewForElementKind_atIndexPath_, v77, isa, v100);

      if (v79)
      {
        swift_getObjectType();
        v80 = swift_conformsToProtocol2();
        if (v80)
          v81 = v80;
        else
          v81 = 0;
        if (v80)
          v82 = v79;
        else
          v82 = 0;
        if (v82)
        {
          v83 = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(v83, *(_QWORD *)(v81 + 8));
          specialized Array.append<A>(contentsOf:)(v84);
        }

      }
      (*(void (**)(char *, unint64_t))(v2 + 8))(v106, v1);
      v74 += v102;
      --v73;
      v69 = v105;
      if (!v73)
        goto LABEL_88;
      v103(v16, v74, v1);
    }
  }
  else
  {
    v76 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v2 + 56);
LABEL_88:
    v76(v16, 1, 1, v1);
  }
  swift_bridgeObjectRelease();
  v106 = (char *)*MEMORY[0x1E0DC48A0];
  v85 = objc_msgSend(v69, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v103 = (void (*)(char *, unint64_t, unint64_t))v86;
  v87 = *(_QWORD *)(v86 + 16);
  if (v87)
  {
    v88 = (char *)v103 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v89 = *(_QWORD *)(v2 + 72);
    v90 = *(void (**)(char *, char *, unint64_t))(v2 + 16);
    while (1)
    {
      v91 = v104;
      v90(v104, v88, v1);
      v76(v91, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v2 + 48))(v91, 1, v1) == 1)
        break;
      (*(void (**)(char *, char *, unint64_t))(v2 + 32))(v107, v91, v1);
      v92 = v106;
      v93 = IndexPath._bridgeToObjectiveC()().super.isa;
      v94 = objc_msgSend(v69, sel_supplementaryViewForElementKind_atIndexPath_, v92, v93);

      if (v94)
      {
        swift_getObjectType();
        v95 = swift_conformsToProtocol2();
        if (v95)
          v96 = v95;
        else
          v96 = 0;
        if (v95)
          v97 = v94;
        else
          v97 = 0;
        if (v97)
        {
          v98 = swift_getObjectType();
          PlatformListViewBase.accessibilityNodes.getter(v98, *(_QWORD *)(v96 + 8));
          specialized Array.append<A>(contentsOf:)(v99);
        }

      }
      (*(void (**)(char *, unint64_t))(v2 + 8))(v107, v1);
      v88 += v89;
      --v87;
      v69 = v105;
      if (!v87)
        goto LABEL_103;
    }
  }
  else
  {
LABEL_103:
    v76(v104, 1, 1, v1);
  }

  swift_bridgeObjectRelease();
}

id UIAccessibilityLocationDescriptor.init(_:in:for:kind:resolveLabel:)(uint64_t a1, uint64_t *a2, char *a3, char a4, char a5)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  char v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  double v30;
  double v31;
  id v32;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  int8x16_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v5 = *(_BYTE *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v11 = *a2;
  v10 = a2[1];
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(_QWORD *)a1;
  v41.i64[0] = *(_QWORD *)a1;
  v41.i64[1] = v37;
  v36 = v5;
  v42 = v5;
  v43 = v7;
  v44 = v6;
  v45 = v8;
  v46 = v9;
  *(_QWORD *)&v40 = v11;
  *((_QWORD *)&v40 + 1) = v10;
  v12 = AccessibilityActivationPoint.resolvedDescription(for:in:kind:resolveLabel:)((uint64_t)a3, &v40, a4 & 1, a5);
  v14 = v13;
  v41.i64[0] = v11;
  v41.i64[1] = v10;
  v40 = 0uLL;
  v35 = v15;
  v16 = v15 & 1;
  LOBYTE(v34) = 0;
  v17 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
  swift_release();
  swift_release();
  if (!v17)
  {

    outlined consume of Text.Storage(v7, v6, v8);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v12, v14, v16);
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  v18 = v12;
  outlined consume of Text.Storage(v7, v6, v8);
  swift_bridgeObjectRelease();
  v41.i64[0] = v38;
  v41.i64[1] = v37;
  v42 = v36;
  *(double *)&v19 = COERCE_DOUBLE(AccessibilityNode.resolvedDragDropPoint(for:)(&v41));
  if (v21 == -1)
  {

    outlined consume of Text.Storage(v12, v14, v35 & 1);
LABEL_13:

    goto LABEL_14;
  }
  v22 = *(double *)&v19;
  v23 = v20;
  if (!MEMORY[0x18D760234](&a3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
  {
    outlined consume of Text.Storage(v12, v14, v35 & 1);
LABEL_12:

    goto LABEL_13;
  }
  objc_opt_self();
  v24 = (void *)swift_dynamicCastObjCClass();
  if (!v24)
  {
    outlined consume of Text.Storage(v12, v14, v35 & 1);
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  v25 = v24;
  v26 = v22;
  v27 = v23;
  v28 = objc_msgSend(v24, sel_window, v34, &v40);
  if (v28)
  {
    v29 = v28;
    objc_msgSend(v28, sel_convertPoint_fromWindow_, 0, v22, v27);
    objc_msgSend(v25, sel_convertPoint_fromCoordinateSpace_, v29);
    v26 = v30;
    v27 = v31;

  }
  v32 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedName_point_inView_, v17, v25, v26, v27);
  swift_unknownObjectRelease();

  outlined consume of Text.Storage(v18, v14, v35 & 1);
  swift_bridgeObjectRelease();
  return v32;
}

id AccessibilityRotorInfo.resolve(in:for:)(uint64_t *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  id v28;
  void *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 aBlock;
  __int128 v37;
  id (*v38)(void *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[3];

  v5 = *a1;
  v4 = a1[1];
  v6 = v2[1];
  v42 = *v2;
  v43 = v6;
  v44[0] = v2[2];
  *(_OWORD *)((char *)v44 + 9) = *(__int128 *)((char *)v2 + 41);
  v7 = v42;
  v8 = v6;
  aBlock = v42;
  v37 = v6;
  v40 = v5;
  v41 = v4;
  v34 = AccessibilityRotorInfo.Designation.uniqueID(in:)();
  v10 = v9;
  v11 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformRotorStorage);
  swift_beginAccess();
  v12 = *v11;
  if (*(_QWORD *)(*v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v10);
    if ((v14 & 1) != 0)
    {
      v15 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return v15;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v8 < 0)
  {
    v24 = AccessibilitySystemRotor.systemRotorType.getter();
    v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    v27 = v43;
    *(_OWORD *)(v26 + 24) = v42;
    *(_OWORD *)(v26 + 40) = v27;
    *(_OWORD *)(v26 + 56) = v44[0];
    *(_OWORD *)(v26 + 65) = *(_OWORD *)((char *)v44 + 9);
    v28 = objc_allocWithZone(MEMORY[0x1E0DC33F8]);
    v38 = partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:);
    v39 = v26;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v37 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
    *((_QWORD *)&v37 + 1) = &block_descriptor_44_1;
    v29 = _Block_copy(&aBlock);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v42);
    swift_retain();
    v23 = objc_msgSend(v28, sel_initWithSystemType_itemSearchBlock_, v24, v29);
    _Block_release(v29);
    swift_release();
    swift_release();
  }
  else
  {
    *(_QWORD *)&aBlock = v5;
    *((_QWORD *)&aBlock + 1) = v4;
    v35[0] = 0;
    v35[1] = 0;
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v42, *((uint64_t *)&v42 + 1), v8 & 1);
    LOBYTE(v32) = 0;
    v16 = (id)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
    if (!v16)
      v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_init, v32, v35);
    v17 = v16;
    v33 = v8 & 1;
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    v20 = v43;
    *(_OWORD *)(v19 + 24) = v42;
    *(_OWORD *)(v19 + 40) = v20;
    *(_OWORD *)(v19 + 56) = v44[0];
    *(_OWORD *)(v19 + 65) = *(_OWORD *)((char *)v44 + 9);
    v21 = objc_allocWithZone(MEMORY[0x1E0DC33F8]);
    v38 = partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:);
    v39 = v19;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v37 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
    *((_QWORD *)&v37 + 1) = &block_descriptor_51;
    v22 = _Block_copy(&aBlock);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v42);
    swift_retain();
    v23 = objc_msgSend(v21, sel_initWithAttributedName_itemSearchBlock_, v17, v22);

    _Block_release(v22);
    swift_release();
    outlined consume of Text.Storage(v7, *((uint64_t *)&v7 + 1), v33);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v15 = v23;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35[0] = *v11;
  *v11 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, v34, v10, isUniquelyReferenced_nonNull_native);
  *v11 = v35[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v15;
}

uint64_t specialized AccessibilityLinkRotorBridge.search(parameters:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  _QWORD *i;
  unint64_t v11;

  v6 = v3 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements;
  result = swift_beginAccess();
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (!v8)
    return 0;
  if (!a1)
    return swift_unknownObjectRetain();
  v9 = 0;
  for (i = (_QWORD *)(*(_QWORD *)v6 + 32); *i != a1; i += 2)
  {
    if (v8 == ++v9)
      return swift_unknownObjectRetain();
  }
  if ((a3 & 1) == 0)
  {
    v11 = v9 - 1;
    goto LABEL_10;
  }
  v11 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
LABEL_10:
    if (v11 >= v8)
      return 0;
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

void specialized AccessibilityLinkRotorBridge.update()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = MEMORY[0x18D760234](&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_node]);
  if (!v2)
    goto LABEL_6;
  v3 = (void *)v2;
  v4 = AccessibilityNode.resolvedAttributedLabel.getter();
  if (!v4)
  {

LABEL_6:
    v6 = &v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements];
    swift_beginAccess();
    *(_QWORD *)v6 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    return;
  }
  v19 = (id)v4;
  v5 = NSObject.hashValue.getter();
  if (v5 == *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash])
  {

  }
  else
  {
    *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash] = v5;
    v7 = &v0[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements];
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *(_QWORD *)v7;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(_QWORD *)(v9 + 16));
    }
    else
    {
      *(_QWORD *)v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(v9 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    v10 = (void *)static NSAttributedStringKey.coreAXLink.getter();
    v11 = NSAttributedString.range.getter();
    v13 = v12;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v1;
    *(_QWORD *)(v14 + 24) = v3;
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in AccessibilityLinkRotorBridge.update();
    *(_QWORD *)(v15 + 24) = v14;
    aBlock[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = &block_descriptor_57;
    v16 = _Block_copy(aBlock);
    v17 = v1;
    v18 = v3;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_enumerateAttribute_inRange_options_usingBlock_, v10, v11, v13, 0, v16);

    _Block_release(v16);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v18 & 1) != 0)
      __break(1u);
  }
}

uint64_t specialized closure #1 in AccessibilityLinkRotorBridge.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t result;
  objc_class *v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  objc_super v21;
  char v22;
  _BYTE v23[24];
  uint64_t v24;

  v10 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with copy of SwiftUIAnySortComparator?(a1, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!v24)
    return outlined destroy of AccessibilityTableContext?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v10);
  result = swift_dynamicCast();
  if ((result & 1) != 0 && (v22 & 1) != 0)
  {
    v12 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement();
    v13 = (char *)objc_allocWithZone(v12);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v14 = &v13[OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range];
    *(_QWORD *)v14 = a2;
    *((_QWORD *)v14 + 1) = a3;
    v21.receiver = v13;
    v21.super_class = v12;
    v15 = objc_msgSendSuper2(&v21, sel_initWithAccessibilityContainer_, a6);
    v16 = (uint64_t *)(a5 + OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements);
    swift_beginAccess();
    v17 = (_QWORD *)*v16;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v16 = (uint64_t)v17;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v17 = (_QWORD *)result;
      *v16 = result;
    }
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
      v17 = (_QWORD *)result;
      *v16 = result;
    }
    v17[2] = v19 + 1;
    v20 = &v17[2 * v19];
    v20[4] = v15;
    v20[5] = &protocol witness table for UIKitAccessibilityLinkRotorBridge.LinkElement;
  }
  return result;
}

uint64_t AccessibilityCore.Notification.ScreenChanged.info.getter@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t inited;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD v21[3];
  uint64_t ObjectType;
  _BYTE v23[32];

  v5 = MEMORY[0x1E0DEE9B8];
  if (a1 && (a2 & 1) != 0)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9820;
    v7 = a1;
    v8 = AXSwiftUIPerformElementUpdateImmediatelyToken();
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    *(_QWORD *)(inited + 32) = v9;
    *(_QWORD *)(inited + 40) = v11;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(inited + 48) = 1;
    v12 = AXSwiftUIMoveToElementNotificationKeyElement();
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    *(_QWORD *)(inited + 80) = v13;
    *(_QWORD *)(inited + 88) = v15;
    *(_QWORD *)(inited + 120) = swift_getObjectType();
    *(_QWORD *)(inited + 96) = v7;
    v16 = v7;
    v17 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for [String : Any]();
    ObjectType = v18;

    v21[0] = v17;
    outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
  }
  else
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
    }
    else
    {
      v21[1] = 0;
      v21[2] = 0;
      ObjectType = 0;
    }
    v21[0] = a1;
    outlined init with take of Image.Resolved?((uint64_t)v21, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    v19 = a1;
  }
  return outlined init with take of Image.Resolved?((uint64_t)v23, a3, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityUIKitTraits(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for AccessibilityCombinable.merge(with:) in conformance AccessibilityUIKitTraits(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *a1;
  v3 = *v1;
  v4 = v1[1];
  v5 = (v4 | a1[1]) & ~*v1;
  result = v4 != v5;
  if (v4 != v5)
  {
    v1[1] = v5;
    v4 = v5;
  }
  v7 = (v3 | v2) & ~v4;
  if (v3 != v7)
  {
    *v1 = v7;
    return 1;
  }
  return result;
}

ValueMetadata *protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.UIKitTraitsKey()
{
  if (one-time initialization token for valueType != -1)
    swift_once();
  return &type metadata for AccessibilityUIKitTraits;
}

uint64_t protocol witness for static AccessibilityPlatformPropertyApplicator.apply(_:to:) in conformance UIKitAccessibilityPropertyApplicator(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 32);
  if (v2)
    v4 = 0;
  else
    v4 = v1;
  return specialized AccessibilityProperties.subscript.setter(v3, v4, v2);
}

uint64_t View.accessibilityAddTraits(uiTraits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[2];
  char v7;

  v6[0] = 0;
  v6[1] = a1;
  v7 = 0;
  lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v6, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityProperties.UIKitTraitsKey, &type metadata for AccessibilityProperties.UIKitTraitsKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey);
  }
  return result;
}

uint64_t View.accessibilityRemoveTraits(uiTraits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v6[2];
  char v7;

  v6[0] = a1;
  v6[1] = 0;
  v7 = 0;
  lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v6, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, a3);
}

uint64_t ModifiedContent<>.accessibilityTraits(uiTraits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  char v9;

  v8[0] = 0;
  v8[1] = a1;
  v9 = 0;
  v5 = lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  v6 = lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v8, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, v5, v6, a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityUIKitTraits? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits;
  if (!lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityUIKitTraits, &type metadata for AccessibilityUIKitTraits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityUIKitTraits and conformance AccessibilityUIKitTraits);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(uiTraits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  char v9;

  v8[0] = a1;
  v8[1] = 0;
  v9 = 0;
  v5 = lazy protocol witness table accessor for type AccessibilityProperties.UIKitTraitsKey and conformance AccessibilityProperties.UIKitTraitsKey();
  v6 = lazy protocol witness table accessor for type AccessibilityUIKitTraits? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v8, 1, a2, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, v5, v6, a3);
}

_QWORD *AccessibilityRole.update(traits:)(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) != 0)
  {
    v2 = result[1];
    if ((v2 & 1) == 0)
      result[1] = v2 | 1;
    if ((*result & 1) == 0)
      *result |= 1uLL;
  }
  if ((~a2 & 0x10000) == 0)
  {
    v3 = result[1];
    if ((v3 & 2) == 0)
      result[1] = v3 | 2;
    if ((*result & 2) == 0)
      *result |= 2uLL;
  }
  return result;
}

uint64_t AccessibilityDisclosureValue.localizedDescription.getter()
{
  return 0;
}

uint64_t AccessibilityToggleValue.localizedDescription.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

_QWORD *one-time initialization function for visualDidChangeNotifications()
{
  _QWORD *result;

  result = closure #1 in variable initialization expression of static AccessibilityCore.UserSettings.visualDidChangeNotifications();
  static AccessibilityCore.UserSettings.visualDidChangeNotifications = (uint64_t)result;
  return result;
}

_QWORD *closure #1 in variable initialization expression of static AccessibilityCore.UserSettings.visualDidChangeNotifications()
{
  uint64_t inited;
  void **v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _QWORD *result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  v1 = (void **)MEMORY[0x1E0DC45D0];
  *(_OWORD *)(inited + 16) = xmmword_187C304A0;
  v2 = *v1;
  v3 = (void *)*MEMORY[0x1E0DC45B8];
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v3;
  v4 = (void *)*MEMORY[0x1E0DC45B0];
  v5 = (void *)*MEMORY[0x1E0DC4528];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC45B0];
  *(_QWORD *)(inited + 56) = v5;
  v6 = (void *)*MEMORY[0x1E0DC4508];
  v7 = (void *)*MEMORY[0x1E0DC44E0];
  v8 = (void **)MEMORY[0x1E0DC45A8];
  *(_QWORD *)(inited + 64) = *MEMORY[0x1E0DC4508];
  *(_QWORD *)(inited + 72) = v7;
  v9 = *v8;
  *(_QWORD *)(inited + 80) = *v8;
  v10 = (void *)*MEMORY[0x1E0DC4FF0];
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v17 = v9;
  v18 = v10;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)1, 8, 1, (_QWORD *)inited);
  result[2] = 8;
  result[11] = v18;
  return result;
}

id UILargeContentViewerInteractionBridge.enabledStatusDidChange()()
{
  uint64_t v0;
  id result;
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend((id)objc_opt_self(), sel_isEnabled);
  v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer) = (_BYTE)result;
  if ((_DWORD)result != v2)
  {
    v3 = v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host;
    result = (id)MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)(v3 + 8);
      ObjectType = swift_getObjectType();
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
      MEMORY[0x1E0C80A78](v7, v8);
      static Update.ensure<A>(_:)();

      return (id)swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)(uint64_t a1)
{
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer) == 1)
    return GraphHost.addPreference<A>(_:)();
  else
    return GraphHost.removePreference<A>(_:)();
}

Swift::Bool __swiftcall UILargeContentViewerInteractionBridge.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldRecognizeSimultaneouslyWith)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  UIGestureRecognizer *v9;
  id v10;
  uint64_t v11;
  void *v12;
  UIGestureRecognizer *v13;
  uint64_t v15;
  void *v16;
  UIGestureRecognizer *v17;
  id v18;
  uint64_t ObjectType;
  UIView *v20;
  UIView *v21;
  UIView *v22;
  UIView *v23;
  unsigned __int8 v24;

  v3 = v2;
  v6 = v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_gesture;
  v7 = MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_gesture);
  if (v7)
  {
    v8 = (void *)v7;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v9 = _;
    v10 = v8;
    LOBYTE(v8) = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {
      type metadata accessor for UIKitGestureRecognizer();
      v11 = swift_dynamicCastClass();
      if (v11)
      {
        v12 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
        *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture) = v11;
        v13 = shouldRecognizeSimultaneouslyWith;

        return 1;
      }
    }
  }
  v15 = MEMORY[0x18D760234](v6);
  if (!v15)
    return 0;
  v16 = (void *)v15;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  v17 = _;
  v18 = v16;
  LOBYTE(v16) = static NSObject.== infix(_:_:)();

  if ((v16 & 1) == 0)
    return 0;
  ObjectType = swift_getObjectType();
  if (ObjectType != swift_getObjectType())
    return 0;
  v20 = -[UIGestureRecognizer view](v17, sel_view);
  if (!v20)
    return 0;
  v21 = v20;
  v22 = -[UIGestureRecognizer view](shouldRecognizeSimultaneouslyWith, sel_view);
  if (!v22)
  {

    return 0;
  }
  v23 = v22;
  v24 = -[UIView isDescendantOfView:](v22, sel_isDescendantOfView_, v21);

  return (v24 & 1) != 0;
}

void UILargeContentViewerInteractionBridge.hitTest(at:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[12];
  __int128 v33[13];
  _OWORD v34[2];
  __int128 v35[15];
  _BYTE v36[240];
  _OWORD v37[12];
  _BYTE v38[41];

  v7 = v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host;
  v8 = (void *)MEMORY[0x18D760234](v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
  if (!v8)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = v8;
  v10 = objc_msgSend(v8, sel__largeContentViewerItemAtPoint_, a2, a3);

  if (!v10)
  {
LABEL_7:
    v21 = (void *)MEMORY[0x18D760234](v7);
    if (v21)
    {
      v22 = v21;
      objc_msgSend(v21, sel_convertPoint_toView_, 0, a2, a3);
      v24 = v23;
      v26 = v25;

      outlined init with take of AccessibilityLargeContentViewTree((__int128 *)(v3 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree), v35);
      outlined init with take of AccessibilityLargeContentViewTree(v35, v32);
      AccessibilityLargeContentViewTree.hitTest(at:)(v33, v24, v26);
      outlined init with take of Image.Resolved?((uint64_t)v33, (uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLargeContentViewItem?, (uint64_t)&type metadata for AccessibilityLargeContentViewItem);
      if (_s7SwiftUI33AccessibilityLargeContentViewItemVSgWOg((uint64_t)v37) == 1)
      {
        v12 = 0;
        v19 = 0uLL;
        v20 = 0uLL;
      }
      else
      {
        v33[12] = *(_OWORD *)v38;
        v34[0] = *(_OWORD *)&v38[16];
        *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)&v38[25];
        v33[8] = v37[8];
        v33[9] = v37[9];
        v33[10] = v37[10];
        v33[11] = v37[11];
        v33[4] = v37[4];
        v33[5] = v37[5];
        v33[6] = v37[6];
        v33[7] = v37[7];
        v33[0] = v37[0];
        v33[1] = v37[1];
        v33[2] = v37[2];
        v33[3] = v37[3];
        v27 = objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerItemBridge());
        v12 = UILargeContentViewerItemBridge.init(_:)(v33);
        v19 = *(_OWORD *)&v38[8];
        v20 = *(_OWORD *)&v38[24];
      }
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    goto LABEL_7;
  }
  v12 = (id)v11;
  v13 = MEMORY[0x18D760234](v7);
  if (v13)
  {
    v14 = (void *)v13;
    objc_msgSend(v12, sel_frame);
    objc_msgSend(v14, sel_convertRect_fromCoordinateSpace_, v12);
    v29 = v15;
    v30 = v16;
    v28 = v17;
    v31 = v18;

    *(_QWORD *)&v20 = v28;
    *(_QWORD *)&v19 = v29;
    *((_QWORD *)&v19 + 1) = v30;
    *((_QWORD *)&v20 + 1) = v31;
LABEL_11:
    *(_QWORD *)a1 = v12;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 24) = v20;
    return;
  }
LABEL_14:
  __break(1u);
}

id UILargeContentViewerItemBridge.init(_:)(__int128 *a1)
{
  char *v1;
  char *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  char *v15;
  objc_class *v16;
  void *v18;
  char v19;
  objc_super v20;
  __int128 v21;
  _OWORD v22[12];
  _OWORD v23[2];
  _BYTE v24[136];
  uint64_t v25;

  v2 = v1;
  v3 = a1[13];
  v22[11] = a1[12];
  v23[0] = v3;
  *(_OWORD *)((char *)v23 + 9) = *(__int128 *)((char *)a1 + 217);
  v4 = a1[9];
  v22[7] = a1[8];
  v22[8] = v4;
  v5 = a1[11];
  v22[9] = a1[10];
  v22[10] = v5;
  v6 = a1[5];
  v22[3] = a1[4];
  v22[4] = v6;
  v7 = a1[7];
  v22[5] = a1[6];
  v22[6] = v7;
  v8 = a1[1];
  v21 = *a1;
  v22[0] = v8;
  v9 = a1[3];
  v22[1] = a1[2];
  v22[2] = v9;
  *(_OWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_1C25C4B203EEAC6A19839AC5BDB6A34530UILargeContentViewerItemBridge_largeContentTitle] = v21;
  outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v24) == 1)
  {
    swift_bridgeObjectRetain();
    v10 = v1;
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    v11 = 0;
  }
  else if (v25)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v12 = v1;
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    objc_opt_self();
    v11 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
    v13 = v18;
    v14 = v19;
    swift_bridgeObjectRetain();
    v15 = v1;
    outlined copy of GraphicsImage.Contents?(v13, v14);
    v11 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 0, 0);
    outlined release of AccessibilityLargeContentViewItem((uint64_t)&v21);
    outlined consume of GraphicsImage.Contents?(v13, v14);
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC7SwiftUIP33_1C25C4B203EEAC6A19839AC5BDB6A34530UILargeContentViewerItemBridge_largeContentImage] = v11;

  v16 = (objc_class *)type metadata accessor for UILargeContentViewerItemBridge();
  v20.receiver = v2;
  v20.super_class = v16;
  return objc_msgSendSuper2(&v20, sel_init);
}

id UILargeContentViewerItemBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UILargeContentViewerItemBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in UIAccessibilityTraits()
{
  return MEMORY[0x1E0DEE1C0];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in UIAccessibilityTraits()
{
  return MEMORY[0x1E0DEE198];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in UIAccessibilityContainerType()
{
  return MEMORY[0x1E0DEB448];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in UIAccessibilityContainerType()
{
  return MEMORY[0x1E0DEB420];
}

uint64_t type metadata accessor for UILargeContentViewerItemBridge()
{
  return objc_opt_self();
}

id AccessibilityNode.entry(for:going:from:)(uint64_t a1, uint64_t a2, id a3)
{
  void *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t *v20;
  ValueMetadata *v21;
  __int128 *v22;
  id result;
  char v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27[5];
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[7];
  char v50;

  v4 = v3;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)&v31 = *(_QWORD *)a1;
  *((_QWORD *)&v31 + 1) = v7;
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = v9;
  *(_QWORD *)&v33 = v10;
  BYTE8(v33) = v11;
  *(_QWORD *)&v34 = v12;
  BYTE8(v34) = v13;
  v25 = v12;
  v24 = v13;
  if (a2 == 1)
  {
    v26 = 1;
    goto LABEL_5;
  }
  if (!a2)
  {
    v26 = 0;
LABEL_5:
    if (objc_msgSend(a3, sel_targetElement))
    {
      v14 = swift_dynamicCastObjCProtocolConditional();
      if (v14)
      {
        v15 = (void *)v14;
        swift_getObjectType();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if (!swift_dynamicCastMetatype())
          v15 = 0;
        if (v15)
        {
LABEL_12:
          v16 = objc_msgSend(a3, sel_targetRange);
          if (v16)
            v17 = 2;
          else
            v17 = 0xFFFFFFFFLL;
          AccessibilityRotorInfo.entry(for:going:from:range:)(v4, v26, v15, v16, 0, v17, (uint64_t)&v40);

          if (*((_QWORD *)&v45 + 1))
          {
            v49[4] = v44;
            v49[5] = v45;
            v49[6] = v46;
            v50 = v47;
            v49[0] = v40;
            v49[1] = v41;
            v49[2] = v42;
            v49[3] = v43;
            v27[0] = v6;
            v27[1] = v7;
            v27[2] = v8;
            v27[3] = v9;
            v27[4] = v10;
            v28 = v11;
            v29 = v25;
            v30 = v24;
            AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)(v27, (char *)v4, 1, (uint64_t)&v31);
            if (*((_QWORD *)&v36 + 1))
            {
              v46 = v37;
              v47 = v38;
              v48 = v39;
              v42 = v33;
              v43 = v34;
              v44 = v35;
              v45 = v36;
              v40 = v31;
              v41 = v32;
              outlined init with copy of AccessibilityNavigationRotorEntry((uint64_t)&v40, (uint64_t)&v31);
              v18 = objc_allocWithZone(MEMORY[0x1E0DC3400]);
              v19 = objc_msgSend(v18, sel_initWithTargetElement_targetRange_, *((_QWORD *)&v38 + 1), v39);
              outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v31);
              outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v40);
              outlined destroy of AccessibilityListRotorEntry((uint64_t)v49);
              return v19;
            }
            outlined destroy of AccessibilityListRotorEntry((uint64_t)v49);
            v20 = &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?;
            v21 = &type metadata for AccessibilityNavigationRotorEntry;
            v22 = &v31;
          }
          else
          {
            v20 = &lazy cache variable for type metadata for AccessibilityListRotorEntry?;
            v21 = &type metadata for AccessibilityListRotorEntry;
            v22 = &v40;
          }
          outlined destroy of AccessibilityTableContext?((uint64_t)v22, v20, (uint64_t)v21);
          return 0;
        }
      }
      swift_unknownObjectRelease();
    }
    v15 = 0;
    goto LABEL_12;
  }
  result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id closure #1 in AccessibilityRotorInfo.resolve(in:for:)(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  id v9;
  id v10;
  id v11;
  _OWORD v13[2];
  _OWORD v14[2];

  v5 = a2 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (!v6)
    return 0;
  v7 = (void *)v6;
  v8 = a3[1];
  v13[0] = *a3;
  v13[1] = v8;
  v14[0] = a3[2];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a3 + 41);
  v9 = objc_msgSend(a1, sel_searchDirection, v13[0], v8, v14[0], *(_QWORD *)&v14[1], *((_QWORD *)&v14[1] + 1));
  v10 = objc_msgSend(a1, sel_currentItem);
  v11 = AccessibilityNode.entry(for:going:from:)((uint64_t)v13, (uint64_t)v9, v10);

  return v11;
}

uint64_t AccessibilitySystemRotor.systemRotorType.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

id closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x18D760234](v2);
  if (!v3)
    return 0;
  v4 = (void *)v3;
  v5 = (void *)AccessibilityNode.currentLinkRotor.getter();

  if (!v5)
    return 0;
  v6 = UIAccessibilityCustomRotorSearchPredicate.linkRotorSearchParameters.getter();
  if (v6 == 1)
  {

    return 0;
  }
  v9 = v6;
  v10 = v7;
  v11 = v8 & 1;
  specialized AccessibilityLinkRotorBridge.update()();
  if (!specialized AccessibilityLinkRotorBridge.search(parameters:)(v9, v10, v11))
  {

    outlined consume of AccessibilityLinkRotorSearchParameters?(v9);
    return 0;
  }
  type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement();
  v12 = (id)swift_dynamicCastClass();
  if (v12)
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3400]), sel_initWithTargetElement_targetRange_, v12, 0);

  outlined consume of AccessibilityLinkRotorSearchParameters?(v9);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t UIAccessibilityCustomRotorSearchPredicate.linkRotorSearchParameters.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t result;

  v1 = objc_msgSend(v0, sel_currentItem);
  v2 = objc_msgSend(v1, sel_targetElement);

  if (v2)
  {
    swift_getObjectType();
    if (swift_conformsToProtocol2())
      v3 = v2;
    else
      v3 = 0;
    if (!v3)
      swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  if ((unint64_t)objc_msgSend(v0, sel_searchDirection) <= 1)
    return (uint64_t)v3;
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UIKitAccessibilityLinkRotorBridge()
{
  return objc_opt_self();
}

void *UIKitAccessibilityLinkRotorBridge.LinkElement.accessibilityLabel.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v1 = (void *)MEMORY[0x18D760234](v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_node);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_accessibilityLabel);

    if (v3)
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v5;

      v7 = (void *)MEMORY[0x18D75CC88](v4, v6);
      swift_bridgeObjectRelease();
      v8 = objc_msgSend(v7, sel_substringWithRange_, *(_QWORD *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range), *(_QWORD *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range+ 8));

      v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

double UIKitAccessibilityLinkRotorBridge.LinkElement.accessibilityActivationPoint.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGRect v13;
  CGRect v14;

  v1 = (void *)MEMORY[0x18D760234](v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_node);
  if (!v1)
    return 0.0;
  v2 = v1;
  objc_msgSend(v1, sel__accessibilityBoundsForRange_, *(_QWORD *)(v0+ OBJC_IVAR____TtCC7SwiftUI33UIKitAccessibilityLinkRotorBridgeP33_1C25C4B203EEAC6A19839AC5BDB6A34511LinkElement_range), 1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v13.origin.x = v4;
  v13.origin.y = v6;
  v13.size.width = v8;
  v13.size.height = v10;
  v11 = v4 + CGRectGetWidth(v13) * 0.5;
  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  CGRectGetHeight(v14);
  return v11;
}

uint64_t type metadata accessor for UIKitAccessibilityLinkRotorBridge.LinkElement()
{
  return objc_opt_self();
}

void *type metadata accessor for UILargeContentViewerInteractionBridge.ActiveItem()
{
  return &unk_1E1B07848;
}

ValueMetadata *type metadata accessor for AccessibilityUIKitTraits()
{
  return &type metadata for AccessibilityUIKitTraits;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.UIKitTraitsKey()
{
  return &type metadata for AccessibilityProperties.UIKitTraitsKey;
}

id PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  void *v7;

  v4 = PlatformAccessibilityElementProtocol<>.elementResolvingNode.getter();
  if (!objc_msgSend(v4, sel_respondsToSelector_, sel__textRangeFromNSRange_))
  {
    if (objc_msgSend(v4, sel_respondsToSelector_, sel__textInputForReveal))
    {
      v6 = objc_msgSend(v4, sel__textInputForReveal);
      if (v6)
      {
        v7 = v6;
        if ((objc_msgSend(v6, sel_respondsToSelector_, sel__textRangeFromNSRange_) & 1) != 0)
        {
          v5 = objc_msgSend(v7, sel__textRangeFromNSRange_, a1, a2);

          swift_unknownObjectRelease();
          return v5;
        }
        swift_unknownObjectRelease();
      }
    }

    return 0;
  }
  v5 = objc_msgSend(v4, sel__textRangeFromNSRange_, a1, a2);

  return v5;
}

id PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void *v5;

  v2 = PlatformAccessibilityElementProtocol<>.elementResolvingNode.getter();
  if (!objc_msgSend(v2, sel_respondsToSelector_, sel__nsrangeForTextRange_))
  {
    if (objc_msgSend(v2, sel_respondsToSelector_, sel__textInputForReveal))
    {
      v4 = objc_msgSend(v2, sel__textInputForReveal);
      if (v4)
      {
        v5 = v4;
        if ((objc_msgSend(v4, sel_respondsToSelector_, sel__nsrangeForTextRange_) & 1) != 0)
        {
          v3 = objc_msgSend(v5, sel__nsrangeForTextRange_, a1);

          swift_unknownObjectRelease();
          return v3;
        }
        swift_unknownObjectRelease();
      }
    }

    return 0;
  }
  v3 = objc_msgSend(v2, sel__nsrangeForTextRange_, a1);

  return v3;
}

void PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(uint64_t (*a1)(void))
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v8 = v1;
  if ((a1() & 1) == 0)
  {

    return;
  }
  v3 = MEMORY[0x1E0DEE9B8] + 8;
  while (objc_msgSend(v8, sel_respondsToSelector_, sel_accessibilityContainer))
  {
    if (objc_msgSend(v8, sel_accessibilityContainer))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v10, 0, sizeof(v10));
    }
    outlined init with take of Image.Resolved?((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, v3);
    if (!v12)
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
      break;
    }
    type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
    if ((swift_dynamicCast() & 1) == 0)
      break;

    v4 = v9;
LABEL_4:
    v8 = v4;
    if ((a1() & 1) == 0)
      goto LABEL_17;
  }
  objc_opt_self();
  v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    v6 = (void *)v5;
    v7 = v8;
    v4 = objc_msgSend(v6, sel_superview);

    if (!v4)
      return;
    goto LABEL_4;
  }
LABEL_17:

}

id PlatformAccessibilityElementProtocol<>.compareGeometry(to:)(uint64_t a1)
{
  void *v1;

  if (objc_msgSend(v1, sel_respondsToSelector_, sel_accessibilityCompareGeometry_))
    return objc_msgSend(v1, sel_accessibilityCompareGeometry_, a1);
  else
    return 0;
}

unint64_t one-time initialization function for lastFocus()
{
  uint64_t v0;
  unint64_t result;

  v0 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  result = specialized Dictionary.init(dictionaryLiteral:)(v0);
  static AccessibilityFocus.lastFocus = result;
  return result;
}

void PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  void *v3;
  void *v5;
  BOOL v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  BOOL v22;
  void *v23;
  BOOL v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  void *v30;
  BOOL v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  void *v50;
  id v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  BOOL v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  id v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  __int128 v116;
  __int128 v117;
  id v118;
  void *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id i;
  void *v124;
  id v125;
  __int128 v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  __int128 v147;
  __int128 v148;
  uint64_t v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  _OWORD v161[2];
  __int128 v162;
  __int16 v163;
  uint64_t v164;
  _UNKNOWN **v165;
  char v166;
  __int128 v167;
  __int16 v168;
  uint64_t v169;
  uint64_t v170;

  v3 = v2;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v170 = Dictionary.init(minimumCapacity:)();
  v150 = a1;
  v151 = v2;
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v2, sel_accessibilityAttributedLabel))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v162, &v160);
    __swift_project_boxed_opaque_existential_1(&v160, *((uint64_t *)&v161[0] + 1));
    v5 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    v6 = _AXSwiftUIIsAnyStringEmpty(v5);
    swift_unknownObjectRelease();
    if (!v6)
    {
LABEL_6:
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
      outlined init with copy of Any((uint64_t)&v160, (uint64_t)&v162);
      AccessibilityText.init(_:)();
      v10 = v167;
      v11 = v168;
      v162 = v167;
      v163 = v168;
      v12 = AccessibilityText.text.getter();
      v14 = v13;
      v16 = v15;
      v18 = v17;
      outlined consume of AccessibilityText.Storage((void *)v10, *((uint64_t *)&v10 + 1), v11);
      *(_QWORD *)(v9 + 32) = v12;
      *(_QWORD *)(v9 + 40) = v14;
      *(_BYTE *)(v9 + 48) = v16 & 1;
      *(_QWORD *)(v9 + 56) = v18;
      v3 = v151;
      v19 = MEMORY[0x1E0CE5DB8];
      type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8]);
      v164 = v20;
      v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v19);
      *(_QWORD *)&v162 = v9;
      BYTE8(v162) = 2;
      specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E0CE5888]);
      goto LABEL_7;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityLabel))
    goto LABEL_8;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v162, &v160);
  __swift_project_boxed_opaque_existential_1(&v160, *((uint64_t *)&v161[0] + 1));
  v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  v8 = _AXSwiftUIIsAnyStringEmpty(v7);
  swift_unknownObjectRelease();
  if (!v8)
    goto LABEL_6;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v160);
LABEL_8:
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityAttributedValue))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v162, &v167);
    __swift_project_boxed_opaque_existential_1(&v167, v169);
    v21 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    v22 = _AXSwiftUIIsAnyStringEmpty(v21);
    swift_unknownObjectRelease();
    if (!v22)
    {
LABEL_13:
      outlined init with copy of Any((uint64_t)&v167, (uint64_t)&v162);
      AccessibilityText.init(_:)();
      v25 = v160;
      v26 = v161[0];
      v162 = v160;
      v163 = v161[0];
      AccessibilityText.text.getter();
      outlined consume of AccessibilityText.Storage((void *)v25, *((uint64_t *)&v25 + 1), v26);
      AccessibilityValueStorage.init(description:)();
      v27 = MEMORY[0x1E0CE5E40];
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v162, (uint64_t)&v160, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
      specialized AccessibilityProperties.subscript.setter((uint64_t)&v160);
      outlined destroy of AccessibilityTableContext?((uint64_t)&v162, &lazy cache variable for type metadata for AccessibilityValueStorage?, v27);
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityValue))
    goto LABEL_15;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v162, &v167);
  __swift_project_boxed_opaque_existential_1(&v167, v169);
  v23 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  v24 = _AXSwiftUIIsAnyStringEmpty(v23);
  swift_unknownObjectRelease();
  if (!v24)
    goto LABEL_13;
LABEL_14:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v167);
LABEL_15:
  if (_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityAttributedHint))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v160, &v162);
    __swift_project_boxed_opaque_existential_1(&v162, v164);
    v28 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    v29 = _AXSwiftUIIsAnyStringEmpty(v28);
    swift_unknownObjectRelease();
    if (!v29)
    {
LABEL_20:
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_187BF9830;
      outlined init with copy of Any((uint64_t)&v162, (uint64_t)&v160);
      AccessibilityText.init(_:)();
      v33 = v167;
      v34 = v168;
      v160 = v167;
      LOWORD(v161[0]) = v168;
      v35 = AccessibilityText.text.getter();
      v37 = v36;
      v39 = v38;
      v41 = v40;
      outlined consume of AccessibilityText.Storage((void *)v33, *((uint64_t *)&v33 + 1), v34);
      *(_QWORD *)(v32 + 32) = v35;
      *(_QWORD *)(v32 + 40) = v37;
      *(_BYTE *)(v32 + 48) = v39 & 1;
      *(_QWORD *)(v32 + 56) = v41;
      v3 = v151;
      MEMORY[0x18D75A2A0](v32);
      goto LABEL_21;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
  }
  if (!_AXSwiftUIGetObjectFromSelectorAsAny(v3, sel_accessibilityHint))
    goto LABEL_22;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(&v160, &v162);
  __swift_project_boxed_opaque_existential_1(&v162, v164);
  v30 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  v31 = _AXSwiftUIIsAnyStringEmpty(v30);
  swift_unknownObjectRelease();
  if (!v31)
    goto LABEL_20;
LABEL_21:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
LABEL_22:
  v42 = objc_msgSend(v3, sel_accessibilityAttributedUserInputLabels);
  if (!v42)
    goto LABEL_41;
  v43 = v42;
  v157 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45)
      goto LABEL_25;
    goto LABEL_40;
  }
  v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v45)
  {
LABEL_40:
    swift_bridgeObjectRelease();
LABEL_41:
    v65 = objc_msgSend(v3, sel_accessibilityUserInputLabels);
    if (v65)
    {
      v66 = v65;
      v67 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v68 = *(_QWORD *)(v67 + 16);
      if (v68)
      {
        swift_bridgeObjectRetain();
        v69 = (uint64_t *)(v67 + 40);
        v70 = (char *)MEMORY[0x1E0DEE9D8];
        do
        {
          v71 = *(v69 - 1);
          v72 = *v69;
          swift_bridgeObjectRetain();
          v73 = (void *)MEMORY[0x18D75CC88](v71, v72);
          v74 = _AXSwiftUIIsAnyStringEmpty(v73);

          if (v74)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v164 = MEMORY[0x1E0DEA968];
            *(_QWORD *)&v162 = v71;
            *((_QWORD *)&v162 + 1) = v72;
            swift_bridgeObjectRetain();
            AccessibilityText.init(_:)();
            v75 = v160;
            v76 = v161[0];
            v162 = v160;
            v163 = v161[0];
            v77 = AccessibilityText.text.getter();
            v79 = v78;
            v81 = v80;
            v158 = v82;
            outlined consume of AccessibilityText.Storage((void *)v75, *((uint64_t *)&v75 + 1), v76);
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v70 + 2) + 1, 1, v70);
            v84 = *((_QWORD *)v70 + 2);
            v83 = *((_QWORD *)v70 + 3);
            if (v84 >= v83 >> 1)
              v70 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1, v70);
            *((_QWORD *)v70 + 2) = v84 + 1;
            v85 = &v70[32 * v84];
            *((_QWORD *)v85 + 4) = v77;
            *((_QWORD *)v85 + 5) = v79;
            v85[48] = v81 & 1;
            *((_QWORD *)v85 + 7) = v158;
            v3 = v151;
          }
          v69 += 2;
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease_n();
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
        v164 = v86;
        v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>();
        *(_QWORD *)&v162 = v70;
        specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E0CE5740]);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_54;
  }
LABEL_25:
  if (v45 < 1)
  {
    __break(1u);
    goto LABEL_95;
  }
  v46 = v44 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  v47 = 0;
  v48 = (char *)MEMORY[0x1E0DEE9D8];
  v153 = v45;
  v155 = v44;
  v152 = v44 & 0xC000000000000001;
  do
  {
    if (v46)
      v49 = (id)MEMORY[0x18D75E3BC](v47, v44);
    else
      v49 = *(id *)(v44 + 8 * v47 + 32);
    v50 = v49;
    if (_AXSwiftUIIsAnyStringEmpty(v49))
    {

    }
    else
    {
      v164 = v157;
      *(_QWORD *)&v162 = v50;
      v51 = v50;
      AccessibilityText.init(_:)();
      v52 = v160;
      v53 = v161[0];
      v162 = v160;
      v163 = v161[0];
      v54 = AccessibilityText.text.getter();
      v56 = v55;
      v58 = v57;
      v60 = v59;
      outlined consume of AccessibilityText.Storage((void *)v52, *((uint64_t *)&v52 + 1), v53);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
      v62 = *((_QWORD *)v48 + 2);
      v61 = *((_QWORD *)v48 + 3);
      if (v62 >= v61 >> 1)
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v48);
      *((_QWORD *)v48 + 2) = v62 + 1;
      v63 = &v48[32 * v62];
      *((_QWORD *)v63 + 4) = v54;
      *((_QWORD *)v63 + 5) = v56;
      v63[48] = v58 & 1;
      *((_QWORD *)v63 + 7) = v60;
      v45 = v153;
      v44 = v155;
      v46 = v152;
    }
    ++v47;
  }
  while (v45 != v47);
  swift_bridgeObjectRelease_n();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v164 = v64;
  v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>();
  *(_QWORD *)&v162 = v48;
  specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E0CE5740]);
  v3 = v151;
LABEL_54:
  v87 = objc_msgSend(v3, sel_accessibilityIdentifier);
  if (v87)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v91 = v90;

    v92 = HIBYTE(v91) & 0xF;
    if ((v91 & 0x2000000000000000) == 0)
      v92 = v89 & 0xFFFFFFFFFFFFLL;
    if (v92)
    {
      v93 = MEMORY[0x1E0CE64B0];
      type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E0CE64B0]);
      v164 = v94;
      v165 = (_UNKNOWN **)lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, v93);
      *(_QWORD *)&v162 = v89;
      *((_QWORD *)&v162 + 1) = v91;
      LOBYTE(v163) = 0;
      specialized Dictionary.subscript.setter((uint64_t)&v162, MEMORY[0x1E0CE5710]);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v95 = (unint64_t)objc_msgSend(v3, sel_accessibilityTraits);
  if ((*MEMORY[0x1E0DC4650] & ~v95) != 0)
  {
    v101 = (char *)MEMORY[0x1E0DEE9D8];
    v98 = v150;
  }
  else
  {
    v96 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v97 = swift_allocObject();
    v98 = v150;
    *(_QWORD *)(v97 + 16) = v150;
    *(_QWORD *)(v97 + 24) = v96;
    LODWORD(v96) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityAdjustableAction>>(0);
    v164 = v99;
    v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v100 = swift_allocObject();
    *(_QWORD *)&v162 = v100;
    *(_BYTE *)(v100 + 16) = 2;
    *(_QWORD *)(v100 + 24) = 0;
    *(_QWORD *)(v100 + 32) = 0;
    *(_QWORD *)(v100 + 40) = 0;
    *(_QWORD *)(v100 + 48) = 2;
    *(_OWORD *)(v100 + 56) = 0u;
    *(_OWORD *)(v100 + 72) = 0u;
    *(_QWORD *)(v100 + 88) = 0;
    *(_QWORD *)(v100 + 96) = partial apply for closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
    *(_QWORD *)(v100 + 104) = v97;
    *(_DWORD *)(v100 + 112) = v96;
    v166 = 1;
    outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
    v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v103 = *((_QWORD *)v101 + 2);
    v102 = *((_QWORD *)v101 + 3);
    if (v103 >= v102 >> 1)
      v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v103 + 1, 1, v101);
    *((_QWORD *)v101 + 2) = v103 + 1;
    v104 = &v101[48 * v103];
    v105 = v160;
    v106 = v161[0];
    *(_OWORD *)(v104 + 57) = *(_OWORD *)((char *)v161 + 9);
    *((_OWORD *)v104 + 2) = v105;
    *((_OWORD *)v104 + 3) = v106;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
  }
  v107 = objc_msgSend(v3, sel_accessibilitySwiftUIDefaultActionStoredBlock);
  if (v107)
  {
    _Block_release(v107);
    v108 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v109 = swift_allocObject();
    *(_QWORD *)(v109 + 16) = v98;
    *(_QWORD *)(v109 + 24) = v108;
    v110 = swift_allocObject();
    *(_QWORD *)(v110 + 16) = partial apply for closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
    *(_QWORD *)(v110 + 24) = v109;
    LODWORD(v109) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
    v164 = v111;
    v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    v112 = swift_allocObject();
    *(_QWORD *)&v162 = v112;
    *(_OWORD *)(v112 + 16) = 0u;
    *(_OWORD *)(v112 + 32) = 0u;
    *(_OWORD *)(v112 + 48) = 0u;
    *(_QWORD *)(v112 + 64) = 0;
    *(_QWORD *)(v112 + 72) = 2;
    *(_OWORD *)(v112 + 80) = 0u;
    *(_OWORD *)(v112 + 96) = 0u;
    *(_QWORD *)(v112 + 112) = 0;
    *(_QWORD *)(v112 + 120) = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
    *(_QWORD *)(v112 + 128) = v110;
    *(_DWORD *)(v112 + 136) = v109;
    v166 = 1;
    outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v101 + 2) + 1, 1, v101);
    v114 = *((_QWORD *)v101 + 2);
    v113 = *((_QWORD *)v101 + 3);
    if (v114 >= v113 >> 1)
      v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v113 > 1), v114 + 1, 1, v101);
    *((_QWORD *)v101 + 2) = v114 + 1;
    v115 = &v101[48 * v114];
    v116 = v160;
    v117 = v161[0];
    *(_OWORD *)(v115 + 57) = *(_OWORD *)((char *)v161 + 9);
    *((_OWORD *)v115 + 2) = v116;
    *((_OWORD *)v115 + 3) = v117;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
  }
  v118 = objc_msgSend(v3, sel_accessibilityCustomActions);
  if (!v118)
    goto LABEL_90;
  v119 = v118;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v120 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v120 >> 62)
  {
    swift_bridgeObjectRetain();
    v121 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v121)
    {
LABEL_74:
      v159 = v121 - 1;
      if (v121 >= 1)
      {
        v122 = 0;
        v154 = v120;
        v156 = v120 & 0xC000000000000001;
        if ((v120 & 0xC000000000000001) == 0)
          goto LABEL_77;
LABEL_76:
        for (i = (id)MEMORY[0x18D75E3BC](v122, v120); ; i = *(id *)(v120 + 8 * v122 + 32))
        {
          v124 = i;
          v125 = objc_msgSend(i, sel_attributedName);
          *((_QWORD *)&v161[0] + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
          *(_QWORD *)&v160 = v125;
          AccessibilityText.init(_:)();
          v126 = v167;
          v127 = v168;
          v160 = v167;
          LOWORD(v161[0]) = v168;
          v128 = AccessibilityText.text.getter();
          v130 = v129;
          v132 = v131;
          v134 = v133;
          outlined consume of AccessibilityText.Storage((void *)v126, *((uint64_t *)&v126 + 1), v127);
          v135 = objc_msgSend(v124, sel_image);
          if (v135)
          {
            v136 = v135;
            type metadata accessor for ImageProviderBox<UIImage>();
            v137 = swift_allocObject();
            *(_QWORD *)(v137 + 16) = v136;
          }
          else
          {
            v137 = 0;
          }
          v138 = v132 & 1;
          v139 = swift_allocObject();
          *(_QWORD *)(v139 + 16) = v124;
          v140 = swift_allocObject();
          *(_QWORD *)(v140 + 16) = partial apply for closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter;
          *(_QWORD *)(v140 + 24) = v139;
          LODWORD(v139) = AccessibilityActionHandlerSeed++;
          type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>(0);
          v164 = v141;
          v165 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
          v142 = swift_allocObject();
          *(_QWORD *)&v162 = v142;
          *(_QWORD *)(v142 + 16) = v128;
          *(_QWORD *)(v142 + 24) = v130;
          *(_QWORD *)(v142 + 32) = v138;
          *(_QWORD *)(v142 + 40) = v134;
          *(_QWORD *)(v142 + 48) = 0;
          *(_QWORD *)(v142 + 56) = 0;
          *(_QWORD *)(v142 + 64) = 0;
          *(_QWORD *)(v142 + 72) = 2;
          *(_OWORD *)(v142 + 80) = 0u;
          *(_OWORD *)(v142 + 96) = 0u;
          *(_QWORD *)(v142 + 112) = v137;
          *(_QWORD *)(v142 + 120) = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
          *(_QWORD *)(v142 + 128) = v140;
          *(_DWORD *)(v142 + 136) = v139;
          v166 = 1;
          outlined init with copy of AnyAccessibilityAction((uint64_t)&v162, (uint64_t)&v160);
          v143 = v124;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v101 + 2) + 1, 1, v101);
          v120 = v154;
          v145 = *((_QWORD *)v101 + 2);
          v144 = *((_QWORD *)v101 + 3);
          if (v145 >= v144 >> 1)
            v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v144 > 1), v145 + 1, 1, v101);
          *((_QWORD *)v101 + 2) = v145 + 1;
          v146 = &v101[48 * v145];
          v147 = v160;
          v148 = v161[0];
          *(_OWORD *)(v146 + 57) = *(_OWORD *)((char *)v161 + 9);
          *((_OWORD *)v146 + 2) = v147;
          *((_OWORD *)v146 + 3) = v148;

          outlined destroy of AnyAccessibilityAction((uint64_t)&v162);
          if (v159 == v122)
            break;
          ++v122;
          if (v156)
            goto LABEL_76;
LABEL_77:
          ;
        }
        goto LABEL_89;
      }
LABEL_95:
      __break(1u);
      return;
    }
  }
  else
  {
    v121 = *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v121)
      goto LABEL_74;
  }
LABEL_89:
  swift_bridgeObjectRelease();
LABEL_90:
  if (*((_QWORD *)v101 + 2))
    specialized AccessibilityProperties.subscript.setter((uint64_t)v101);
  else
    swift_bridgeObjectRelease();
  *a2 = v170;
}

void closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char **v7;
  uint64_t v8;

  v4 = a2 + 16;
  if ((*a1 & 1) != 0)
  {
    swift_beginAccess();
    v5 = MEMORY[0x18D760234](v4);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = &selRef_accessibilityDecrement;
LABEL_6:
      objc_msgSend(v6, *v7);

    }
  }
  else
  {
    swift_beginAccess();
    v8 = MEMORY[0x18D760234](v4);
    if (v8)
    {
      v6 = (void *)v8;
      v7 = &selRef_accessibilityIncrement;
      goto LABEL_6;
    }
  }
  *a3 = 2;
}

void closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t (**v6)(_QWORD);
  char v7;
  char v8;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  if (v4
    && (v5 = v4,
        v6 = (uint64_t (**)(_QWORD))objc_msgSend(v4, sel_accessibilitySwiftUIDefaultActionStoredBlock),
        v5,
        v6)
    && (v7 = v6[2](v6), _Block_release(v6), (v7 & 1) != 0))
  {
    v8 = 2;
  }
  else
  {
    v8 = 1;
  }
  *a2 = v8;
}

void closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(void *a1@<X0>, char *a2@<X8>)
{
  id v4;
  const void *v5;
  int v6;
  char v7;
  void *v8;
  void *v9;
  id v10;

  v4 = objc_msgSend(a1, sel_actionHandler);
  if (!v4)
  {
    if (objc_msgSend(a1, sel_target))
    {
      v8 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v8)
      {
        v9 = v8;
        if (objc_msgSend(v8, sel_respondsToSelector_, objc_msgSend(a1, sel_selector)))
        {
          objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_withObject_, objc_msgSend(a1, sel_selector), a1);
          v10 = v9;
          swift_unknownObjectRelease();
          v7 = 2;
          goto LABEL_11;
        }
      }
      swift_unknownObjectRelease();
    }
    v7 = 1;
    goto LABEL_11;
  }
  v5 = v4;
  v6 = (*((uint64_t (**)(id, void *))v4 + 2))(v4, a1);
  _Block_release(v5);
  if (v6)
    v7 = 2;
  else
    v7 = 1;
LABEL_11:
  *a2 = v7;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.LabelChanged()
{
  return 1005;
}

id protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.LabelChanged@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id v4;

  v4 = *v1;
  a1[3] = swift_getObjectType();
  *a1 = v4;
  return v4;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.LayoutChanged()
{
  return *MEMORY[0x1E0DC4578];
}

id protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.LayoutChanged@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v4;
  __int128 v5;
  __int128 v6;

  v4 = *v1;
  if (*v1)
  {
    *((_QWORD *)&v6 + 1) = swift_getObjectType();
    *(_QWORD *)&v5 = v4;
  }
  else
  {
    v4 = 0;
    v5 = 0u;
    v6 = 0u;
  }
  outlined init with take of Image.Resolved?((uint64_t)&v5, a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  return v4;
}

uint64_t protocol witness for static AccessibilityCoreNotification.name.getter in conformance AccessibilityCore.Notification.ScreenChanged()
{
  return *MEMORY[0x1E0DC45C0];
}

uint64_t protocol witness for AccessibilityCoreNotification.info.getter in conformance AccessibilityCore.Notification.ScreenChanged@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return AccessibilityCore.Notification.ScreenChanged.info.getter(*(void **)v1, *(_BYTE *)(v1 + 8), a1);
}

uint64_t sub_1877F7318()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(char *a1@<X8>)
{
  uint64_t v1;

  closure #6 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(*(void **)(v1 + 16), a1);
}

uint64_t sub_1877F7344()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1877F73CC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1877F73F0()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(char *a1@<X8>)
{
  uint64_t v1;

  closure #4 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(*(_QWORD *)(v1 + 24), a1);
}

void partial apply for closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  closure #3 in PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1877F7424()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48) >= 3uLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 80))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE6310], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

BOOL specialized static AccessibilityFocus.changed(from:to:within:)(unint64_t a1, unint64_t a2)
{
  id v4;
  char v5;
  id v6;
  char v7;

  static AccessibilityFocus.accessibilityFocusNeedsUpdate = 1;
  if (a2)
  {
    v4 = (id)a2;
    v5 = ViewRendererHost.shouldNotifyForAccessibilityFocus(of:)();

    if ((v5 & 1) != 0)
      return 1;
  }
  if (a1
    && (v6 = (id)a1,
        v7 = ViewRendererHost.shouldNotifyForAccessibilityFocus(of:)(),
        v6,
        (v7 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return (a2 | a1) == 0;
  }
}

uint64_t specialized static AccessibilityFocus.resolve(within:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v4 = a1;
  if (static AccessibilityFocus.accessibilityFocusNeedsUpdate == 1)
  {
    if (one-time initialization token for lastFocus != -1)
      swift_once();
    static AccessibilityFocus.lastFocus = specialized static AccessibilityFocus.resolvePlatformFocus()();
    a1 = swift_bridgeObjectRelease();
    static AccessibilityFocus.accessibilityFocusNeedsUpdate = 0;
  }
  if (one-time initialization token for lastFocus != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  v8[2] = v4;
  v8[3] = a3;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized _NativeDictionary.filter(_:)(v5, (uint64_t (*)(uint64_t, _BYTE *))partial apply for closure #1 in AccessibilityFocus.filtered(for:), (uint64_t)v8);
  swift_bridgeObjectRelease();
  return v6;
}

void specialized static AccessibilityFocus.move(to:for:)(void *a1, _WORD *a2)
{
  uint64_t v3;
  id v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t ObjectType;
  id v10;
  char *v11;
  char *v12;
  int v13;

  if ((*a2 & 1) != 0)
  {
    type metadata accessor for AccessibilityNode();
    v3 = swift_dynamicCastClass();
    if (v3)
    {
      v11 = (char *)v3;
      v4 = a1;
      v5 = v11;
    }
    else
    {
      v5 = (char *)objc_msgSend(a1, sel_accessibilityNodeForPlatformElement);
      if (!v5)
        goto LABEL_10;
    }
    v12 = v5;
    v6 = (void *)MEMORY[0x18D760234](&v5[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

    if (!v6)
    {
      AccessibilityNode.visibility.getter(&v13);
      if ((v13 & 0x20) == 0)
      {
        v7 = &v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost];
        if (MEMORY[0x18D760234](&v12[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
        {
          v8 = *((_QWORD *)v7 + 1);
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t))(v8 + 208))(ObjectType, v8);
          v10 = a1;
          specialized AccessibilityCoreNotification.post()(a1, 1);

          swift_unknownObjectRelease();
LABEL_11:

          return;
        }
      }
    }

LABEL_10:
    v12 = a1;
    specialized AccessibilityCoreNotification.post()(a1);
    goto LABEL_11;
  }
}

uint64_t specialized static AccessibilityFocus.resolvePlatformFocus()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  void *v8;
  unint64_t *v9;
  NSString *v10;
  void *v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  BOOL v36;
  _OWORD v37[2];
  _BYTE v38[24];
  uint64_t v39;

  if (one-time initialization token for focusSupportingTechnologies != -1)
LABEL_39:
    swift_once();
  v0 = static AccessibilityTechnology.focusSupportingTechnologies;
  v1 = MEMORY[0x1E0DEE9D8];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(v1);
  v3 = *(_QWORD *)(v0 + 16);
  if (!v3)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v32 = (void *)*MEMORY[0x1E0DC4580];
  v4 = (void *)*MEMORY[0x1E0DC4588];
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = (unint64_t *)&lazy cache variable for type metadata for Any?;
  v34 = MEMORY[0x1E0DEE9B8] + 8;
  v29 = v3;
  v30 = v0;
  v31 = v4;
  while (1)
  {
    v7 = *(unsigned __int8 *)(v0 + v5 + 32);
    v8 = v4;
    if (*(_BYTE *)(v0 + v5 + 32))
    {
      if (v7 != 1)
        goto LABEL_6;
      v8 = v32;
    }
    v9 = v6;
    v10 = v8;
    if (UIAccessibilityFocusedElement(v10))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v37, 0, sizeof(v37));
    }
    outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)v38, v6, v34);
    if (v39)
      break;
    outlined destroy of AccessibilityTableContext?((uint64_t)v38, v6, MEMORY[0x1E0DEE9B8] + 8);
LABEL_5:

LABEL_6:
    if (v3 == ++v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_5;
  v11 = v35;
  swift_unknownObjectWeakInit();
  v33 = v11;
  swift_unknownObjectWeakAssign();
  outlined init with take of AccessibilityFocus.Target((uint64_t)v37, (uint64_t)v38);
  v38[8] = 0;
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v38, (uint64_t)v37, &lazy cache variable for type metadata for AccessibilityFocus.Target?, (uint64_t)&type metadata for AccessibilityFocus.Target);
  if ((BYTE8(v37[0]) & 1) != 0)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v37, &lazy cache variable for type metadata for AccessibilityFocus.Target?, (uint64_t)&type metadata for AccessibilityFocus.Target);
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
    v14 = v13;
    if ((v13 & 1) != 0)
    {
      v15 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized _NativeDictionary.copy()();
      outlined init with take of AccessibilityFocus.Target(v2[7] + 8 * v15, (uint64_t)&v35);
      specialized _NativeDictionary._delete(at:)(v15, (uint64_t)v2);
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = 0;
    }
    v36 = (v14 & 1) == 0;
    outlined destroy of AccessibilityTableContext?((uint64_t)&v35, &lazy cache variable for type metadata for AccessibilityFocus.Target?, (uint64_t)&type metadata for AccessibilityFocus.Target);
    v6 = v9;
    goto LABEL_34;
  }
  outlined init with take of AccessibilityFocus.Target((uint64_t)v37, (uint64_t)&v35);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v19 = v2[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v22 = v17;
  if (v2[3] >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v17 & 1) == 0)
        goto LABEL_31;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v22 & 1) == 0)
        goto LABEL_31;
    }
    goto LABEL_29;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0)
    {
LABEL_31:
      v2[(v18 >> 6) + 8] |= 1 << v18;
      *(_BYTE *)(v2[6] + v18) = v7;
      outlined init with take of AccessibilityFocus.Target((uint64_t)&v35, v2[7] + 8 * v18);
      v25 = v2[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_38;
      v2[2] = v27;
      goto LABEL_33;
    }
LABEL_29:
    outlined assign with take of AccessibilityFocus.Target((uint64_t)&v35, v2[7] + 8 * v18);
LABEL_33:
    swift_bridgeObjectRelease();
    v3 = v29;
    v0 = v30;
    v6 = v9;
LABEL_34:
    outlined destroy of AccessibilityTableContext?((uint64_t)v38, &lazy cache variable for type metadata for AccessibilityFocus.Target?, (uint64_t)&type metadata for AccessibilityFocus.Target);

    v4 = v31;
    goto LABEL_6;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _BYTE *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  uint64_t v21;
  _BYTE v22[8];

  v20 = (unint64_t *)result;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v11)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      v16 = *(_QWORD *)(v7 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v11)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
        v16 = *(_QWORD *)(v7 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v10 = (v16 - 1) & v16;
    v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v14 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 48) + v13);
    outlined init with copy of AccessibilityFocus.Target(*(_QWORD *)(a3 + 56) + 8 * v13, (uint64_t)v22);
    LOBYTE(v14) = a4(v14, v22);
    result = outlined destroy of AccessibilityFocus.Target((uint64_t)v22);
    if ((v14 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v11)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, _BYTE *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, v6, a2);
    MEMORY[0x18D760108](v11, -1, -1);
  }
  return a3;
}

void specialized PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(void *a1, void *a2, _BYTE *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v14 = a1;
  AccessibilityNode.platformElement.getter();
  if (!v5)
    v5 = a2;
  v6 = v5;

  v7 = v14;
  if (v6 != v14)
  {
    v8 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      if (objc_msgSend(v7, sel_respondsToSelector_, sel_accessibilityContainer, v7))
      {
        if (objc_msgSend(v15, sel_accessibilityContainer))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v17, 0, sizeof(v17));
        }
        outlined init with take of Image.Resolved?((uint64_t)v17, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (v19)
        {
          type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
          if ((swift_dynamicCast() & 1) != 0)
          {

            v9 = v16;
            goto LABEL_6;
          }
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        }
      }
      objc_opt_self();
      v11 = swift_dynamicCastObjCClass();
      if (!v11)
      {
LABEL_18:

        return;
      }
      v12 = (void *)v11;
      v13 = v15;
      v9 = objc_msgSend(v12, sel_superview);

      if (!v9)
        return;
LABEL_6:
      swift_getObjectType();
      v15 = v9;
      v10 = specialized closure #1 in AccessibilityFocus.Target.match(focusStoreNode:)(v15, a2, a3);
      v7 = v15;
      if (!v10)
        goto LABEL_18;
    }
  }
  *a3 = 1;

}

void specialized UILargeContentViewerInteractionBridge.largeContentViewerInteraction(_:didEndOn:at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _BYTE v20[96];
  uint64_t v21;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v18 - v6;
  v8 = v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  swift_unknownObjectRelease();
  v9 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture) = 0;

  if (a1)
  {
    v10 = (void *)MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (v10)
    {
      v19 = v10;
      type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
      v11 = (_QWORD *)swift_dynamicCastClass();
      if (v11)
      {
        v12 = (uint64_t)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x60);
        swift_beginAccess();
        outlined init with copy of BarItemView(v12, (uint64_t)v20);
        v13 = (void *)MEMORY[0x18D760234](&v21);
        outlined destroy of BarItemView((uint64_t)v20);
        if (v13)
        {
          type metadata accessor for UIKitBarButtonItem(0);
          v14 = swift_dynamicCastClass();
          if (v14)
          {
            v15 = v14 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem;
            swift_beginAccess();
            outlined init with copy of PlatformItemList.Item?(v15, (uint64_t)v7);
            v16 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
            v17 = swift_allocObject();
            outlined init with take of PlatformItemList.Item?((uint64_t)v7, v17 + v16);
            static Update.enqueueAction(_:)();

            swift_release();
            return;
          }

        }
      }

    }
  }
}

uint64_t specialized UILargeContentViewerInteractionBridge.largeContentViewerInteraction(_:itemAt:)(double a1, double a2)
{
  uint64_t v2;
  double *v5;
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t result;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[5];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  CGPoint v26;
  CGRect v27;

  v5 = (double *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem);
  if (!v6)
    goto LABEL_5;
  v8 = v5[3];
  v7 = v5[4];
  v10 = v5[1];
  v9 = v5[2];
  result = MEMORY[0x18D760234](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
  if (result)
  {
    v12 = (void *)result;
    swift_unknownObjectRetain();
    objc_msgSend(v12, sel_convertPoint_toView_, 0, a1, a2);
    v14 = v13;
    v16 = v15;

    v27.origin.x = v10;
    v27.origin.y = v9;
    v27.size.width = v8;
    v27.size.height = v7;
    v26.x = v14;
    v26.y = v16;
    if (CGRectContainsPoint(v27, v26))
      return v6;
    swift_unknownObjectRelease();
LABEL_5:
    UILargeContentViewerInteractionBridge.hitTest(at:)((uint64_t)v22, a1, a2);
    outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)&v23, &lazy cache variable for type metadata for UILargeContentViewerInteractionBridge.ActiveItem?, (uint64_t)&unk_1E1B07848);
    v6 = v23;
    if (v23)
    {
      v17 = v24;
      v18 = v25;
      if (*(_QWORD *)v5)
      {
        v19 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture);
        if (v19)
        {
          v20 = v25;
          v21 = v24;
          objc_msgSend(v19, sel_reset);
          v18 = v20;
          v17 = v21;
        }
      }
      *(_QWORD *)v5 = v6;
      *(_OWORD *)(v5 + 1) = v17;
      *(_OWORD *)(v5 + 3) = v18;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t outlined release of AccessibilityLargeContentViewItem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;

  v2 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(void **)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 112);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v9 = *(void **)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of Image.Resolved?(v18, v17, v2, v3, v4, v5, v6, v7, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((unint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v8,
    v9);
  return a1;
}

uint64_t outlined init with copy of PlatformItemList.Item?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1877F8634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
    return swift_deallocObject();

  swift_bridgeObjectRelease();
  swift_release();
  v5 = *(_QWORD *)(v3 + 184);
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if ((v5 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    if (v7 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v7);
      v5 = *(_QWORD *)(v3 + 184);
      v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v6 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v5);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v3 + 256))
  {
    swift_bridgeObjectRelease();
    v8 = *(void **)(v3 + 264);
    if ((unint64_t)v8 >= 2)

    swift_release();
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + 328);
  if (v9 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v9, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
  v10 = *(_QWORD *)(v3 + 408);
  if (!v10)
    goto LABEL_17;
  if (v10 != 1)
  {
    swift_release();
LABEL_17:
    if (*(_QWORD *)(v3 + 424))
      swift_release();
    if (*(_QWORD *)(v3 + 440))
      swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 504))
    swift_release();
  if (*(_QWORD *)(v3 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v3 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v3 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v3 + *(int *)(v4 + 112);
  v12 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));
    swift_bridgeObjectRelease();
    v14 = v13 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    if (*(_QWORD *)(v11 + *(int *)(v12 + 24)))
      swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitBarButtonItem.performAction(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #1 in UIKitBarButtonItem.performAction(_:)(v0 + ((v2 + 16) & ~v2));
}

uint64_t outlined consume of AccessibilityLinkRotorSearchParameters?(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t sub_1877F8968()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityLinkRotorBridge.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return specialized closure #1 in AccessibilityLinkRotorBridge.update()(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1877F899C()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in AccessibilityRotorInfo.resolve(in:for:)(void *a1)
{
  uint64_t v1;

  return closure #1 in AccessibilityRotorInfo.resolve(in:for:)(a1, *(_QWORD *)(v1 + 16), (_OWORD *)(v1 + 24));
}

uint64_t objectdestroy_40Tm()
{
  uint64_t *v0;

  swift_release();
  outlined consume of Text.Suffix.Storage(v0[3], v0[4], v0[5]);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityFocus.filtered(for:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AccessibilityFocus.filtered(for:)(a1, a2);
}

uint64_t outlined assign with take of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  assignWithTake for UIKitScenePresentationModeLocation(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for AccessibilityCore.Notification.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityCore.Notification.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for AccessibilityCore.Notification.Info(uint64_t a1, _OWORD *a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityCore.Notification.Info()
{
  return &type metadata for AccessibilityCore.Notification.Info;
}

ValueMetadata *type metadata accessor for UIKitAccessibilityPropertyApplicator()
{
  return &type metadata for UIKitAccessibilityPropertyApplicator;
}

ValueMetadata *type metadata accessor for AccessibilityRole.Resolved()
{
  return &type metadata for AccessibilityRole.Resolved;
}

uint64_t type metadata accessor for PencilEventsResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PencilEventsResponder;
  if (!type metadata singleton initialization cache for PencilEventsResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PencilEventsResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall PencilEventsResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x76456C69636E6570;
  v1._object = (void *)0xEC00000073746E65;
  String.append(_:)(v1);
}

uint64_t PencilEventsResponder.__allocating_init(inputs:)()
{
  swift_allocObject();
  return PencilEventsResponder.init(inputs:)();
}

uint64_t PencilEventsResponder.init(inputs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v0 + 224) = v1;
  *(_QWORD *)(v0 + 232) = v2;
  ViewTransform.init()();
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t PencilEventsResponder.__allocating_init(inputs:viewSubgraph:)()
{
  swift_allocObject();
  return PencilEventsResponder.init(inputs:viewSubgraph:)();
}

uint64_t PencilEventsResponder.init(inputs:viewSubgraph:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(_QWORD *)(v0 + 224) = v1;
  *(_QWORD *)(v0 + 232) = v2;
  ViewTransform.init()();
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t PencilEventsResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 280));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 296));
}

uint64_t PencilEventsResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 280));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 296));
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PencilEventsResponder()
{
  return type metadata accessor for PencilEventsResponder();
}

uint64_t destroy for PencilDoubleTapEvent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PencilDoubleTapEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilDoubleTapEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilDoubleTapEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 88) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilDoubleTapEvent()
{
  return &type metadata for PencilDoubleTapEvent;
}

uint64_t destroy for PencilSqueezeEvent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v3 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  v6 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PencilSqueezeEvent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 104) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeEvent()
{
  return &type metadata for PencilSqueezeEvent;
}

ValueMetadata *type metadata accessor for PencilSqueezeEventDispatcher()
{
  return &type metadata for PencilSqueezeEventDispatcher;
}

ValueMetadata *type metadata accessor for PencilDoubleTapEventDispatcher()
{
  return &type metadata for PencilDoubleTapEventDispatcher;
}

unint64_t instantiation function for generic protocol witness table for PencilDoubleTapEventDispatcher(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilSqueezeEventDispatcher(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilSqueezeEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PencilDoubleTapEvent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PencilEventsResponder();
  result = swift_dynamicCastClass();
  if (result)
  {
    v5 = swift_retain();
    MEMORY[0x18D75CF58](v5);
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized Array._endMutation()();
  }
  *a2 = 0;
  return result;
}

void protocol witness for EventType.phase.getter in conformance PencilDoubleTapEvent(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 80);
}

double protocol witness for EventType.timestamp.getter in conformance PencilDoubleTapEvent@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 72);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PencilDoubleTapEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 88);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PencilDoubleTapEvent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 88) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance PencilDoubleTapEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance PencilDoubleTapEvent@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  double v8;
  char v9;
  uint64_t v10;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    result = v8;
    *(_OWORD *)a1 = v3;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v5;
    *(_OWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 64) = v7 & 1;
    *(double *)(a1 + 72) = v8;
    *(_BYTE *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 88) = v10;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 1;
  }
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance PencilSqueezeEvent@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 96);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventType.binding.getter in conformance PencilSqueezeEvent@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 104);
  return swift_retain();
}

uint64_t protocol witness for EventType.binding.setter in conformance PencilSqueezeEvent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *(_QWORD *)(v1 + 104) = v2;
  return result;
}

uint64_t (*protocol witness for EventType.binding.modify in conformance PencilSqueezeEvent())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double protocol witness for EventType.init(_:) in conformance PencilSqueezeEvent@<D0>(uint64_t a1@<X8>)
{
  double result;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    result = v11;
    *(_BYTE *)a1 = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 40) = v6;
    *(_OWORD *)(a1 + 56) = v7;
    *(_BYTE *)(a1 + 72) = v8 & 1;
    *(_QWORD *)(a1 + 80) = v9;
    *(_BYTE *)(a1 + 88) = v10 & 1;
    *(double *)(a1 + 96) = v11;
    *(_QWORD *)(a1 + 104) = v12;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t specialized PencilEventsResponder.consume(event:)(_OWORD *a1, _QWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(_BYTE *);
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[72];
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  _QWORD v62[5];

  v62[3] = &type metadata for PencilDoubleTapEvent;
  v62[4] = lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent();
  v4 = (_OWORD *)swift_allocObject();
  v62[0] = v4;
  v5 = a1[3];
  v4[3] = a1[2];
  v4[4] = v5;
  v6 = a1[5];
  v4[5] = a1[4];
  v4[6] = v6;
  v7 = a1[1];
  v4[1] = *a1;
  v4[2] = v7;
  outlined init with copy of TableColumnList((uint64_t)v62, (uint64_t)&v47);
  outlined retain of PencilDoubleTapEvent((uint64_t)a1);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PencilEvent);
  if (swift_dynamicCast())
  {
    v8 = (void (*)(_BYTE *))a2[35];
    if (v8)
    {
      if ((v57[64] & 1) != 0)
      {
        swift_retain();
        v9 = 0uLL;
        v10 = 1;
        v11 = 0;
      }
      else
      {
        v43 = *(_OWORD *)&v57[48];
        v45 = *(_OWORD *)&v57[32];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v11 = 0;
        v18 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (v18)
        {
          v20 = a2[30];
          v19 = a2 + 30;
          *(_QWORD *)v57 = v20;
          *(_OWORD *)&v57[8] = *(_OWORD *)(v19 + 1);
          *(_OWORD *)&v57[24] = *(_OWORD *)(v19 + 3);
          ViewTransform.withPosition(_:)();
          v51 = v54;
          v52 = v55;
          v53 = v56;
          v47 = 1;
          v48 = 0u;
          v49 = 0u;
          v50 = 2;
          memset(v57, 0, 40);
          v57[40] = 2;
          outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
          v61 = 4;
          outlined destroy of CoordinateSpace((uint64_t)&v47);
          ViewTransform.convert(_:point:)();
          v11 = v21;
          v23 = v22;
          outlined destroy of ViewTransform.Conversion((uint64_t)v57);
          swift_release();
          UnitPoint.init(_:in:)();
          v10 = 0;
          v26 = v43;
          v9 = v45;
LABEL_21:
          *(_QWORD *)v57 = v11;
          *(_QWORD *)&v57[8] = v23;
          *(_QWORD *)&v57[16] = v24;
          *(_QWORD *)&v57[24] = v25;
          *(_OWORD *)&v57[32] = v9;
          *(_OWORD *)&v57[48] = v26;
          v57[64] = v10;
LABEL_34:
          v8(v57);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
          swift_release();
          v17 = 1;
          goto LABEL_35;
        }
        v9 = 0uLL;
        v10 = 1;
      }
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0uLL;
      goto LABEL_21;
    }
    swift_release();
  }
  outlined init with copy of TableColumnList((uint64_t)v62, (uint64_t)&v47);
  if (swift_dynamicCast())
  {
    v8 = (void (*)(_BYTE *))a2[37];
    if (v8)
    {
      v12 = v59;
      v13 = v60;
      if (v57[0] < 2u)
      {
        if ((v58 & 1) != 0)
        {
          swift_retain();
          v14 = 0;
          v15 = 0uLL;
          v16 = 0;
LABEL_28:
          v35 = 1;
          goto LABEL_29;
        }
        v44 = *(_OWORD *)&v57[56];
        v46 = *(_OWORD *)&v57[40];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v16 = 0;
        v27 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (!v27)
        {
          v14 = 0;
          v15 = 0uLL;
          goto LABEL_28;
        }
        v29 = a2[30];
        v28 = a2 + 30;
        *(_QWORD *)v57 = v29;
        *(_OWORD *)&v57[8] = *(_OWORD *)(v28 + 1);
        *(_OWORD *)&v57[24] = *(_OWORD *)(v28 + 3);
        ViewTransform.withPosition(_:)();
        v51 = v54;
        v52 = v55;
        v53 = v56;
        v47 = 1;
        v48 = 0u;
        v49 = 0u;
        v50 = 2;
        memset(v57, 0, 40);
        v57[40] = 2;
        outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
        v61 = 4;
        outlined destroy of CoordinateSpace((uint64_t)&v47);
        ViewTransform.convert(_:point:)();
        v16 = v30;
        v32 = v31;
        outlined destroy of ViewTransform.Conversion((uint64_t)v57);
        swift_release();
        UnitPoint.init(_:in:)();
        v35 = 0;
        v14 = 0;
LABEL_26:
        v41 = v44;
        v15 = v46;
LABEL_33:
        *(_QWORD *)v57 = v16;
        *(_QWORD *)&v57[8] = v32;
        *(_QWORD *)&v57[16] = v33;
        *(_QWORD *)&v57[24] = v34;
        *(_OWORD *)&v57[32] = v15;
        *(_OWORD *)&v57[48] = v41;
        *(_QWORD *)&v57[64] = v35;
        v58 = v12;
        LOBYTE(v59) = v13;
        BYTE1(v59) = v14;
        goto LABEL_34;
      }
      if (v57[0] != 2)
      {
        swift_retain();
        v35 = 0;
        v12 = 0;
        v13 = 0;
        v15 = 0uLL;
        v14 = 2;
        v16 = 0;
LABEL_29:
        v32 = 0;
        v33 = 0;
        v34 = 0;
LABEL_32:
        v41 = 0uLL;
        goto LABEL_33;
      }
      if ((v58 & 1) != 0)
      {
        swift_retain();
        v15 = 0uLL;
        v35 = 1;
        v16 = 0;
      }
      else
      {
        v44 = *(_OWORD *)&v57[56];
        v46 = *(_OWORD *)&v57[40];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v16 = 0;
        v36 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (v36)
        {
          v38 = a2[30];
          v37 = a2 + 30;
          *(_QWORD *)v57 = v38;
          *(_OWORD *)&v57[8] = *(_OWORD *)(v37 + 1);
          *(_OWORD *)&v57[24] = *(_OWORD *)(v37 + 3);
          ViewTransform.withPosition(_:)();
          v51 = v54;
          v52 = v55;
          v53 = v56;
          v14 = 1;
          v47 = 1;
          v48 = 0u;
          v49 = 0u;
          v50 = 2;
          memset(v57, 0, 40);
          v57[40] = 2;
          outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
          v61 = 4;
          outlined destroy of CoordinateSpace((uint64_t)&v47);
          ViewTransform.convert(_:point:)();
          v16 = v39;
          v32 = v40;
          outlined destroy of ViewTransform.Conversion((uint64_t)v57);
          swift_release();
          UnitPoint.init(_:in:)();
          v35 = 0;
          goto LABEL_26;
        }
        v15 = 0uLL;
        v35 = 1;
      }
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v14 = 1;
      goto LABEL_32;
    }
    swift_release();
    v17 = 0;
  }
  else
  {
    v17 = 0;
  }
LABEL_35:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return v17;
}

{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void (*v8)(_BYTE *);
  __int128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[72];
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  _QWORD v62[5];

  v62[3] = &type metadata for PencilSqueezeEvent;
  v62[4] = lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent();
  v4 = (_OWORD *)swift_allocObject();
  v62[0] = v4;
  v5 = a1[5];
  v4[5] = a1[4];
  v4[6] = v5;
  v4[7] = a1[6];
  v6 = a1[1];
  v4[1] = *a1;
  v4[2] = v6;
  v7 = a1[3];
  v4[3] = a1[2];
  v4[4] = v7;
  outlined init with copy of TableColumnList((uint64_t)v62, (uint64_t)&v47);
  outlined retain of PencilSqueezeEvent((uint64_t)a1);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PencilEvent);
  if (swift_dynamicCast())
  {
    v8 = (void (*)(_BYTE *))a2[35];
    if (v8)
    {
      if ((v57[64] & 1) != 0)
      {
        swift_retain();
        v9 = 0uLL;
        v10 = 1;
        v11 = 0;
      }
      else
      {
        v43 = *(_OWORD *)&v57[48];
        v45 = *(_OWORD *)&v57[32];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v11 = 0;
        v18 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (v18)
        {
          v20 = a2[30];
          v19 = a2 + 30;
          *(_QWORD *)v57 = v20;
          *(_OWORD *)&v57[8] = *(_OWORD *)(v19 + 1);
          *(_OWORD *)&v57[24] = *(_OWORD *)(v19 + 3);
          ViewTransform.withPosition(_:)();
          v51 = v54;
          v52 = v55;
          v53 = v56;
          v47 = 1;
          v48 = 0u;
          v49 = 0u;
          v50 = 2;
          memset(v57, 0, 40);
          v57[40] = 2;
          outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
          v61 = 4;
          outlined destroy of CoordinateSpace((uint64_t)&v47);
          ViewTransform.convert(_:point:)();
          v11 = v21;
          v23 = v22;
          outlined destroy of ViewTransform.Conversion((uint64_t)v57);
          swift_release();
          UnitPoint.init(_:in:)();
          v10 = 0;
          v26 = v43;
          v9 = v45;
LABEL_21:
          *(_QWORD *)v57 = v11;
          *(_QWORD *)&v57[8] = v23;
          *(_QWORD *)&v57[16] = v24;
          *(_QWORD *)&v57[24] = v25;
          *(_OWORD *)&v57[32] = v9;
          *(_OWORD *)&v57[48] = v26;
          v57[64] = v10;
LABEL_34:
          v8(v57);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
          swift_release();
          v17 = 1;
          goto LABEL_35;
        }
        v9 = 0uLL;
        v10 = 1;
      }
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0uLL;
      goto LABEL_21;
    }
    swift_release();
  }
  outlined init with copy of TableColumnList((uint64_t)v62, (uint64_t)&v47);
  if (swift_dynamicCast())
  {
    v8 = (void (*)(_BYTE *))a2[37];
    if (v8)
    {
      v12 = v59;
      v13 = v60;
      if (v57[0] < 2u)
      {
        if ((v58 & 1) != 0)
        {
          swift_retain();
          v14 = 0;
          v15 = 0uLL;
          v16 = 0;
LABEL_28:
          v35 = 1;
          goto LABEL_29;
        }
        v44 = *(_OWORD *)&v57[56];
        v46 = *(_OWORD *)&v57[40];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v16 = 0;
        v27 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (!v27)
        {
          v14 = 0;
          v15 = 0uLL;
          goto LABEL_28;
        }
        v29 = a2[30];
        v28 = a2 + 30;
        *(_QWORD *)v57 = v29;
        *(_OWORD *)&v57[8] = *(_OWORD *)(v28 + 1);
        *(_OWORD *)&v57[24] = *(_OWORD *)(v28 + 3);
        ViewTransform.withPosition(_:)();
        v51 = v54;
        v52 = v55;
        v53 = v56;
        v47 = 1;
        v48 = 0u;
        v49 = 0u;
        v50 = 2;
        memset(v57, 0, 40);
        v57[40] = 2;
        outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
        v61 = 4;
        outlined destroy of CoordinateSpace((uint64_t)&v47);
        ViewTransform.convert(_:point:)();
        v16 = v30;
        v32 = v31;
        outlined destroy of ViewTransform.Conversion((uint64_t)v57);
        swift_release();
        UnitPoint.init(_:in:)();
        v35 = 0;
        v14 = 0;
LABEL_26:
        v41 = v44;
        v15 = v46;
LABEL_33:
        *(_QWORD *)v57 = v16;
        *(_QWORD *)&v57[8] = v32;
        *(_QWORD *)&v57[16] = v33;
        *(_QWORD *)&v57[24] = v34;
        *(_OWORD *)&v57[32] = v15;
        *(_OWORD *)&v57[48] = v41;
        *(_QWORD *)&v57[64] = v35;
        v58 = v12;
        LOBYTE(v59) = v13;
        BYTE1(v59) = v14;
        goto LABEL_34;
      }
      if (v57[0] != 2)
      {
        swift_retain();
        v35 = 0;
        v12 = 0;
        v13 = 0;
        v15 = 0uLL;
        v14 = 2;
        v16 = 0;
LABEL_29:
        v32 = 0;
        v33 = 0;
        v34 = 0;
LABEL_32:
        v41 = 0uLL;
        goto LABEL_33;
      }
      if ((v58 & 1) != 0)
      {
        swift_retain();
        v15 = 0uLL;
        v35 = 1;
        v16 = 0;
      }
      else
      {
        v44 = *(_OWORD *)&v57[56];
        v46 = *(_OWORD *)&v57[40];
        *(_QWORD *)v57 = 0;
        swift_retain();
        v16 = 0;
        v36 = ViewResponder.hitTest(globalPoint:radius:options:)();
        swift_release();
        if (v36)
        {
          v38 = a2[30];
          v37 = a2 + 30;
          *(_QWORD *)v57 = v38;
          *(_OWORD *)&v57[8] = *(_OWORD *)(v37 + 1);
          *(_OWORD *)&v57[24] = *(_OWORD *)(v37 + 3);
          ViewTransform.withPosition(_:)();
          v51 = v54;
          v52 = v55;
          v53 = v56;
          v14 = 1;
          v47 = 1;
          v48 = 0u;
          v49 = 0u;
          v50 = 2;
          memset(v57, 0, 40);
          v57[40] = 2;
          outlined init with copy of CoordinateSpace((uint64_t)&v47, (uint64_t)&v57[48]);
          v61 = 4;
          outlined destroy of CoordinateSpace((uint64_t)&v47);
          ViewTransform.convert(_:point:)();
          v16 = v39;
          v32 = v40;
          outlined destroy of ViewTransform.Conversion((uint64_t)v57);
          swift_release();
          UnitPoint.init(_:in:)();
          v35 = 0;
          goto LABEL_26;
        }
        v15 = 0uLL;
        v35 = 1;
      }
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v14 = 1;
      goto LABEL_32;
    }
    swift_release();
    v17 = 0;
  }
  else
  {
    v17 = 0;
  }
LABEL_35:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return v17;
}

int64_t specialized PencilEventsDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  Swift::UInt v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53[2];
  int64_t v54;
  unint64_t v55;
  _OWORD v56[7];

  v4 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18D760234](v4))
    return MEMORY[0x1E0DEE9E8];
  v5 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  v8 = swift_unknownObjectRelease();
  v10 = MEMORY[0x1E0DEE9E8];
  if (v7)
  {
    v55 = MEMORY[0x1E0DEE9D8];
    MEMORY[0x1E0C80A78](v8, v9);
    dispatch thunk of ResponderNode.visit(applying:)();
    v11 = v55;
    if (v55 >> 62)
    {
LABEL_47:
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31)
      {
        v54 = v10;
        swift_bridgeObjectRetain();
        v32 = _CocoaArrayWrapper.endIndex.getter();
        if (!v32)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        v12 = v32;
        goto LABEL_6;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
        v54 = v10;
        swift_bridgeObjectRetain();
LABEL_6:
        v39 = a1 + 64;
        v36 = v11 & 0xC000000000000001;
        v34 = (__int128 *)(v11 + 32);
        v35 = v11 & 0xFFFFFFFFFFFFFF8;
        v11 = (unint64_t)v53;
        v13 = v12;
        while (1)
        {
          v14 = __OFSUB__(v13, 1);
          v15 = v13 - 1;
          if (v14)
          {
LABEL_42:
            __break(1u);
LABEL_43:
            swift_release();
            swift_bridgeObjectRelease();
            v10 = v54;
LABEL_44:
            swift_bridgeObjectRelease();
            return v10;
          }
          v37 = v15;
          if (v36)
          {
            v38 = (_QWORD *)MEMORY[0x18D75E3BC](v15);
          }
          else
          {
            if ((v15 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            if (v15 >= *(_QWORD *)(v35 + 16))
              goto LABEL_46;
            v38 = (_QWORD *)*((_QWORD *)v34 + v15);
            swift_retain();
          }
          v16 = 1 << *(_BYTE *)(a1 + 32);
          if (v16 < 64)
            v17 = ~(-1 << v16);
          else
            v17 = -1;
          v18 = v17 & *(_QWORD *)(a1 + 64);
          v40 = (unint64_t)(v16 + 63) >> 6;
          swift_bridgeObjectRetain();
          v10 = 0;
          while (v18)
          {
            v19 = __clz(__rbit64(v18));
            v18 &= v18 - 1;
            v20 = v19 | (v10 << 6);
LABEL_36:
            v24 = *(_QWORD *)(a1 + 56);
            v25 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v20);
            v27 = v25[1];
            v51 = *v25;
            v26 = v51;
            v52 = v27;
            outlined init with copy of TableColumnList(v24 + 40 * v20, (uint64_t)v53);
            v48 = v26;
            v49 = v27;
            outlined init with take of OptionalBinaryInteger(v53, (uint64_t)&v50);
            type metadata accessor for (key: EventID, value: EventType)();
            type metadata accessor for (EventID, PencilDoubleTapEvent)(0, &lazy cache variable for type metadata for (EventID, PencilDoubleTapEvent));
            if (swift_dynamicCast())
            {
              v28 = v41[2];
              v29 = v41[3];
              v56[2] = v44;
              v56[3] = v45;
              v56[4] = v46;
              v56[5] = v47;
              v56[0] = v42;
              v56[1] = v43;
              v30 = specialized PencilEventsResponder.consume(event:)(v56, v38);
              outlined release of PencilDoubleTapEvent((uint64_t)v56);
              if ((v30 & 1) != 0)
                specialized Set._Variant.insert(_:)(v41, v28, v29);
            }
          }
          v21 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          if (v21 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v21);
          ++v10;
          if (v22)
            goto LABEL_35;
          v10 = v21 + 1;
          if (v21 + 1 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v10 = v21 + 2;
          if (v21 + 2 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v10 = v21 + 3;
          if (v21 + 3 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v23 = v21 + 4;
          if (v23 < v40)
            break;
LABEL_7:
          swift_release();
          swift_release();
          v13 = v37;
          if (!v37)
            goto LABEL_43;
        }
        v22 = *(_QWORD *)(v39 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v10 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_41;
            if (v10 >= v40)
              goto LABEL_7;
            v22 = *(_QWORD *)(v39 + 8 * v10);
            ++v23;
            if (v22)
              goto LABEL_35;
          }
        }
        v10 = v23;
LABEL_35:
        v18 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v10 << 6);
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v10;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  Swift::UInt v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  Swift::UInt v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54[2];
  int64_t v55;
  unint64_t v56;
  _OWORD v57[8];

  v4 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18D760234](v4))
    return MEMORY[0x1E0DEE9E8];
  v5 = *(_QWORD *)(a2 + 24);
  ObjectType = swift_getObjectType();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  v8 = swift_unknownObjectRelease();
  v10 = MEMORY[0x1E0DEE9E8];
  if (v7)
  {
    v56 = MEMORY[0x1E0DEE9D8];
    MEMORY[0x1E0C80A78](v8, v9);
    dispatch thunk of ResponderNode.visit(applying:)();
    v11 = v56;
    if (v56 >> 62)
    {
LABEL_47:
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31)
      {
        v55 = v10;
        swift_bridgeObjectRetain();
        v32 = _CocoaArrayWrapper.endIndex.getter();
        if (!v32)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        v12 = v32;
        goto LABEL_6;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
        v55 = v10;
        swift_bridgeObjectRetain();
LABEL_6:
        v39 = a1 + 64;
        v36 = v11 & 0xC000000000000001;
        v34 = (__int128 *)(v11 + 32);
        v35 = v11 & 0xFFFFFFFFFFFFFF8;
        v11 = (unint64_t)v54;
        v13 = v12;
        while (1)
        {
          v14 = __OFSUB__(v13, 1);
          v15 = v13 - 1;
          if (v14)
          {
LABEL_42:
            __break(1u);
LABEL_43:
            swift_release();
            swift_bridgeObjectRelease();
            v10 = v55;
LABEL_44:
            swift_bridgeObjectRelease();
            return v10;
          }
          v37 = v15;
          if (v36)
          {
            v38 = (_QWORD *)MEMORY[0x18D75E3BC](v15);
          }
          else
          {
            if ((v15 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            if (v15 >= *(_QWORD *)(v35 + 16))
              goto LABEL_46;
            v38 = (_QWORD *)*((_QWORD *)v34 + v15);
            swift_retain();
          }
          v16 = 1 << *(_BYTE *)(a1 + 32);
          if (v16 < 64)
            v17 = ~(-1 << v16);
          else
            v17 = -1;
          v18 = v17 & *(_QWORD *)(a1 + 64);
          v40 = (unint64_t)(v16 + 63) >> 6;
          swift_bridgeObjectRetain();
          v10 = 0;
          while (v18)
          {
            v19 = __clz(__rbit64(v18));
            v18 &= v18 - 1;
            v20 = v19 | (v10 << 6);
LABEL_36:
            v24 = *(_QWORD *)(a1 + 56);
            v25 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v20);
            v27 = v25[1];
            v52 = *v25;
            v26 = v52;
            v53 = v27;
            outlined init with copy of TableColumnList(v24 + 40 * v20, (uint64_t)v54);
            v49 = v26;
            v50 = v27;
            outlined init with take of OptionalBinaryInteger(v54, (uint64_t)&v51);
            type metadata accessor for (key: EventID, value: EventType)();
            type metadata accessor for (EventID, PencilDoubleTapEvent)(0, &lazy cache variable for type metadata for (EventID, PencilSqueezeEvent));
            if (swift_dynamicCast())
            {
              v28 = v41[2];
              v29 = v41[3];
              v57[4] = v46;
              v57[5] = v47;
              v57[6] = v48;
              v57[0] = v42;
              v57[1] = v43;
              v57[2] = v44;
              v57[3] = v45;
              v30 = specialized PencilEventsResponder.consume(event:)(v57, v38);
              outlined release of PencilSqueezeEvent((uint64_t)v57);
              if ((v30 & 1) != 0)
                specialized Set._Variant.insert(_:)(v41, v28, v29);
            }
          }
          v21 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
          if (v21 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v21);
          ++v10;
          if (v22)
            goto LABEL_35;
          v10 = v21 + 1;
          if (v21 + 1 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v10 = v21 + 2;
          if (v21 + 2 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v10 = v21 + 3;
          if (v21 + 3 >= v40)
            goto LABEL_7;
          v22 = *(_QWORD *)(v39 + 8 * v10);
          if (v22)
            goto LABEL_35;
          v23 = v21 + 4;
          if (v23 < v40)
            break;
LABEL_7:
          swift_release();
          swift_release();
          v13 = v37;
          if (!v37)
            goto LABEL_43;
        }
        v22 = *(_QWORD *)(v39 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v10 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_41;
            if (v10 >= v40)
              goto LABEL_7;
            v22 = *(_QWORD *)(v39 + 8 * v10);
            ++v23;
            if (v22)
              goto LABEL_35;
          }
        }
        v10 = v23;
LABEL_35:
        v18 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v10 << 6);
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v10;
}

uint64_t partial apply for closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PencilEventsDispatcher.receiveEvents(_:manager:)(*(_QWORD **)(v1 + 16), a1);
}

uint64_t outlined release of PencilDoubleTapEvent(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1877FA814()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of PencilDoubleTapEvent(uint64_t a1)
{
  swift_retain();
  return a1;
}

void type metadata accessor for (EventID, PencilDoubleTapEvent)(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t outlined release of PencilSqueezeEvent(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t sub_1877FAD44()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined retain of PencilSqueezeEvent(uint64_t a1)
{
  swift_retain();
  return a1;
}

SwiftUI::VerticalPageTabViewStyle __swiftcall VerticalPageTabViewStyle.init()()
{
  SwiftUI::VerticalPageTabViewStyle result;

  result.transitionStyle.backing = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::VerticalPageTabViewStyle __swiftcall VerticalPageTabViewStyle.init(transitionStyle:)(SwiftUI::VerticalPageTabViewStyle::TransitionStyle transitionStyle)
{
  SwiftUI::VerticalPageTabViewStyle result;

  result.transitionStyle.backing = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static VerticalPageTabViewStyle.TransitionStyle.blur.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static VerticalPageTabViewStyle._makeView<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static VerticalPageTabViewStyle._makeViewList<A>(value:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle()
{
  return &type metadata for VerticalPageTabViewStyle;
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle.TransitionStyle()
{
  return &type metadata for VerticalPageTabViewStyle.TransitionStyle;
}

uint64_t storeEnumTagSinglePayload for VerticalPageTabViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1877FAE54 + 4 * byte_187C5FF95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1877FAE88 + 4 * byte_187C5FF90[v4]))();
}

uint64_t sub_1877FAE88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877FAE90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1877FAE98);
  return result;
}

uint64_t sub_1877FAEA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1877FAEACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1877FAEB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1877FAEB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerticalPageTabViewStyle.TransitionStyle.Backing()
{
  return &type metadata for VerticalPageTabViewStyle.TransitionStyle.Backing;
}

unint64_t lazy protocol witness table accessor for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing;
  if (!lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VerticalPageTabViewStyle.TransitionStyle.Backing, &type metadata for VerticalPageTabViewStyle.TransitionStyle.Backing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalPageTabViewStyle.TransitionStyle.Backing and conformance VerticalPageTabViewStyle.TransitionStyle.Backing);
  }
  return result;
}

void static VerticalPageTabViewStyle.TransitionStyle.automatic.getter()
{
  static VerticalPageTabViewStyle.TransitionStyle.blur.getter();
}

void static VerticalPageTabViewStyle.TransitionStyle.identity.getter()
{
  static VerticalPageTabViewStyle.TransitionStyle.blur.getter();
}

uint64_t specialized FocusedValues.subscript.getter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
  lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility> and conformance FocusedValuePropertyKey<A>, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_toolbarVisibility>, (uint64_t)&type metadata for FocusedValues.__Key_toolbarVisibility, (uint64_t)&protocol witness table for FocusedValues.__Key_toolbarVisibility);
  PropertyList.forEach<A>(keyType:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

{
  uint64_t v0;
  _OWORD v2[2];
  __int128 v3;
  uint64_t v4[4];

  v3 = 0u;
  memset(v4, 0, 26);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
  memset(v2, 0, 26);
  lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented);
  PropertyList.forEach<A>(keyType:_:)();
  if (*(_QWORD *)&v2[0])
  {
    v0 = *((_QWORD *)&v2[0] + 1);
    swift_retain();
    swift_retain();
  }
  else
  {
    v0 = 0;
  }
  outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(0, 0, *(uint64_t *)&v2[0]);
  outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(v3, *((uint64_t *)&v3 + 1), v4[0]);
  return v0;
}

uint64_t ToolbarCommands.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t InspectorCommands.inspectorPresented.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_BYTE *)(v0 + 17) != 1)
    return 2;
  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v7 = *(_QWORD *)v0;
  v8 = v2;
  v9 = v3;
  if (!v2)
  {
    outlined consume of Environment<DismissWindowAction>.Content(v1, 0, v3, 1);
    return 2;
  }
  outlined copy of Environment<DismissWindowAction>.Content(v1, v2, v3, 1);
  outlined copy of Environment<DismissWindowAction>.Content(v1, v2, v3, 1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v6);
  v4 = v6;
  swift_release();
  swift_release();
  outlined consume of Environment<DismissWindowAction>.Content(v1, v2, v3, 1);
  return v4;
}

void *InspectorCommands.inspectorPresented.modify(_QWORD *a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char v10;
  void *result;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = v3 + 17;
  v5 = *(_QWORD *)v1;
  v6 = *(_QWORD *)(v1 + 8);
  *((_QWORD *)v3 + 3) = *(_QWORD *)v1;
  *((_QWORD *)v3 + 4) = v6;
  v7 = *(unsigned __int8 *)(v1 + 16);
  v3[19] = v7;
  v8 = *(unsigned __int8 *)(v1 + 17);
  v3[20] = v8;
  if (v8 != 1)
  {
    outlined copy of Environment<DismissWindowAction>.Content(v5, v6, v7, 0);
    result = InspectorCommands.inspectorPresented.modify;
LABEL_6:
    v10 = 2;
    goto LABEL_7;
  }
  v9 = v3;
  *(_QWORD *)v3 = v5;
  *((_QWORD *)v3 + 1) = v6;
  v3[16] = v7;
  if (!v6)
  {
    result = InspectorCommands.inspectorPresented.modify;
    goto LABEL_6;
  }
  outlined copy of Environment<DismissWindowAction>.Content(v5, v6, v7, 1);
  outlined copy of Environment<DismissWindowAction>.Content(v5, v6, v7, 1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v10 = v9[18];
  swift_release();
  swift_release();
  result = InspectorCommands.inspectorPresented.modify;
LABEL_7:
  *v4 = v10;
  return result;
}

void InspectorCommands.inspectorPresented.modify(void **a1, char a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *((unsigned __int8 *)v2 + 20);
    v5 = v2[3];
    v4 = v2[4];
    v6 = *((unsigned __int8 *)v2 + 19);
    specialized FocusedBinding.wrappedValue.setter(*((unsigned __int8 *)v2 + 17), v5, v4, v6 | (v3 << 8));
    v7 = v5;
    v8 = v4;
    v9 = v6;
    v10 = v3;
LABEL_8:
    outlined consume of Environment<DismissWindowAction>.Content(v7, v8, v9, v10);
    goto LABEL_9;
  }
  v11 = *((unsigned __int8 *)v2 + 17);
  if (v11 == 2)
  {
    v7 = v2[3];
    v8 = v2[4];
    v9 = *((unsigned __int8 *)v2 + 19);
LABEL_7:
    v10 = 1;
    goto LABEL_8;
  }
  v12 = v2[4];
  if (v12)
  {
    v13 = v2[3];
    *(_BYTE *)v2 = v11 & 1;
    v14 = *((unsigned __int8 *)v2 + 19);
    outlined copy of Environment<DismissWindowAction>.Content(v13, v12, v14, 1);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    v7 = v13;
    v8 = v12;
    v9 = v14;
    goto LABEL_7;
  }
LABEL_9:
  free(v2);
}

void InspectorCommands.inspectorPresented.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(v2 + 20);
    v5 = *(_QWORD *)(v2 + 24);
    v4 = *(_QWORD *)(v2 + 32);
    v6 = *(unsigned __int8 *)(v2 + 19);
    specialized FocusedBinding.wrappedValue.setter(*(unsigned __int8 *)(v2 + 17), v5, v4, v6 | (v3 << 8));
    v7 = v5;
    v8 = v4;
    v9 = v6;
    v10 = v3;
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 24);
    v8 = *(_QWORD *)(v2 + 32);
    v9 = *(unsigned __int8 *)(v2 + 19);
    v10 = 0;
  }
  outlined consume of Environment<DismissWindowAction>.Content(v7, v8, v9, v10);
  free((void *)v2);
}

uint64_t InspectorCommands.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t InspectorCommands.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(unsigned __int8 *)(v1 + 16);
  v10 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v11, (uint64_t)v6);
  outlined copy of Environment<DismissWindowAction>.Content(v7, v8, v9, v10);
  return specialized CommandGroup.init(after:addition:)((uint64_t)v6, v7, v8, v9 | (v10 << 8), a1);
}

uint64_t closure #1 in closure #1 in InspectorCommands.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v3;
  void *v4;
  int v5;
  _QWORD v7[4];
  uint64_t v8;
  uint64_t v9;
  __int16 v10;

  v8 = a1;
  v9 = a2;
  v10 = a3 & 0x1FF;
  outlined copy of Environment<DismissWindowAction>.Content(a1, a2, a3, BYTE1(a3) & 1);
  v4 = InspectorCommands.inspectorPresented.modify(v7);
  v5 = *v3;
  if (v5 != 2)
    *v3 = (v5 & 1) == 0;
  ((void (*)(_QWORD *, _QWORD))v4)(v7, 0);
  return outlined consume of Environment<DismissWindowAction>.Content(v8, v9, v10, SHIBYTE(v10));
}

uint64_t closure #2 in closure #1 in InspectorCommands.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  Swift::String v10;
  char v11;
  char v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t ObjCClassFromMetadata;
  id v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v8 = 2003789907;
  v9 = (a3 >> 8) & 1;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v10);
  outlined copy of Environment<DismissWindowAction>.Content(a1, a2, a3, v9);
  v11 = InspectorCommands.inspectorPresented.getter();
  if (v11 == 2)
  {
    outlined consume of Environment<DismissWindowAction>.Content(a1, a2, a3, v9);
  }
  else
  {
    v12 = v11;
    outlined consume of Environment<DismissWindowAction>.Content(a1, a2, a3, v9);
    if ((v12 & 1) != 0)
      v8 = 1701079368;
  }
  v13._countAndFlagsBits = v8;
  v13._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x74636570736E4920;
  v14._object = (void *)0xEA0000000000726FLL;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v16 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = v19 & 1;
  *(_QWORD *)(a4 + 24) = v20;
  return result;
}

uint64_t protocol witness for Commands.body.getter in conformance InspectorCommands@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)v1;
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(unsigned __int8 *)(v1 + 16);
  v10 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v11, (uint64_t)v6);
  outlined copy of Environment<DismissWindowAction>.Content(v7, v8, v9, v10);
  return specialized CommandGroup.init(after:addition:)((uint64_t)v6, v7, v8, v9 | (v10 << 8), a1);
}

void one-time initialization function for printing()
{
  uint64_t v0;

  v0 = static CommandFlag.nextID++;
  static CommandFlag.printing = v0;
}

uint64_t PrintingCommands.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for printing != -1)
    result = swift_once();
  *a1 = static CommandFlag.printing;
  return result;
}

uint64_t protocol witness for Commands.body.getter in conformance PrintingCommands@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for printing != -1)
    result = swift_once();
  *a1 = static CommandFlag.printing;
  return result;
}

void __swiftcall ImportFromDevicesCommands.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImportFromDevicesCommands.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t specialized FocusedBinding.wrappedValue.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x100) != 0 && result != 2)
  {
    if (a3)
    {
      outlined copy of Environment<DismissWindowAction>.Content(a2, a3, a4, 1);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return swift_release();
    }
    else
    {
      return outlined copy of Environment<DismissWindowAction>.Content(a2, 0, a4, 1);
    }
  }
  return result;
}

uint64_t specialized closure #1 in FocusedValues.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v13;

  if (a3)
  {
    v11 = result;
    v13 = one-time initialization token for scene;
    result = swift_bridgeObjectRetain();
    if (v13 != -1)
      result = swift_once();
    if (static FocusedValueScope.scene == (_DWORD)v11 && !*(_QWORD *)(a6 + 16))
    {
      *(_QWORD *)a6 = v11;
      *(_QWORD *)(a6 + 8) = a2;
      *(_QWORD *)(a6 + 16) = a3;
      *(_WORD *)(a6 + 24) = a4;
    }
    else
    {
      if (one-time initialization token for view != -1)
        swift_once();
      if (static FocusedValueScope.view == (_DWORD)v11 && (a4 & 0x100) != 0)
      {
        result = swift_bridgeObjectRelease();
        *(_QWORD *)a7 = v11;
        *(_QWORD *)(a7 + 8) = a2;
        *(_QWORD *)(a7 + 16) = a3;
        *(_WORD *)(a7 + 24) = a4 | 0x100;
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  __int16 v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  _BYTE v16[16];
  uint64_t v17;

  outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)&v14);
  v7 = v14;
  v8 = v15;
  result = outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)v16);
  if (v17)
  {
    outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
    v10 = one-time initialization token for scene;
    swift_bridgeObjectRetain();
    if (v10 != -1)
      swift_once();
    if (static FocusedValueScope.scene == v7 && !*(_QWORD *)(a3 + 16))
    {
      swift_bridgeObjectRelease();
      v12 = a1;
      v13 = a3;
    }
    else
    {
      if (one-time initialization token for view != -1)
        swift_once();
      v11 = static FocusedValueScope.view;
      swift_bridgeObjectRelease();
      if (v11 != v7 || (v8 & 0x100) == 0)
        return outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
      v12 = a1;
      v13 = a4;
    }
    return outlined assign with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(v12, v13);
  }
  return result;
}

uint64_t key path getter for FocusedValues.toolbarVisibility : FocusedValues@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  swift_retain();
  v2 = specialized FocusedValues.subscript.getter();
  result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t sub_1877FBD7C(unsigned __int8 *a1)
{
  return FocusedValues.toolbarVisibility.setter(*a1);
}

uint64_t associated type witness table accessor for Commands.Body : Commands in ToolbarCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in SidebarCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in InspectorCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in PrintingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in ImportFromDevicesCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ToolbarCommands()
{
  return &type metadata for ToolbarCommands;
}

ValueMetadata *type metadata accessor for SidebarCommands()
{
  return &type metadata for SidebarCommands;
}

uint64_t destroy for InspectorCommands(uint64_t a1)
{
  return outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
}

uint64_t initializeBufferWithCopyOfBuffer for InspectorCommands(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<DismissWindowAction>.Content(*(_QWORD *)a2, v4, v6, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  return a1;
}

uint64_t assignWithCopy for InspectorCommands(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<DismissWindowAction>.Content(*(_QWORD *)a2, v4, v6, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v10 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = v5;
  outlined consume of Environment<DismissWindowAction>.Content(v7, v8, v10, v9);
  return a1;
}

uint64_t assignWithTake for InspectorCommands(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 17);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  outlined consume of Environment<DismissWindowAction>.Content(v5, v6, v8, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorCommands(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorCommands(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorCommands()
{
  return &type metadata for InspectorCommands;
}

ValueMetadata *type metadata accessor for PrintingCommands()
{
  return &type metadata for PrintingCommands;
}

ValueMetadata *type metadata accessor for ImportFromDevicesCommands()
{
  return &type metadata for ImportFromDevicesCommands;
}

_UNKNOWN **sub_1877FC004()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t sub_1877FC010()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>> and conformance CommandGroup<A>, (uint64_t (*)(uint64_t))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>, (uint64_t)&protocol conformance descriptor for CommandGroup<A>);
}

_UNKNOWN **sub_1877FC03C()
{
  return &protocol witness table for WithCommandFlag<A>;
}

uint64_t partial apply for specialized closure #1 in FocusedValues.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in FocusedValues.subscript.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_WORD *)(a1 + 24), a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[48];

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(a1, (uint64_t)v7);
  return specialized closure #1 in FocusedValues.subscript.getter((uint64_t)v7, a2, v5, v4);
}

uint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusedValuePropertyKey<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusedValues.Entry);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?);
  }
}

uint64_t outlined copy of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined retain of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
  return a1;
}

uint64_t outlined assign with take of FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for FocusedValues.Entry<FocusedValues.__Key_inspectorPresented>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void NavigationHostingControllerCache_UIKit.prerenderHostingController(configureExisting:makeNew:)(void (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;

  v4 = v3;
  v5 = *(void **)(v3 + 24);
  if (v5)
  {
    v5;
    a1();
  }
  else
  {
    v7 = a3();
    v8 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v7;

    v9 = *(_QWORD *)(v3 + 24);
    if (v9
      && (v10 = *(id *)(v9 + direct field offset for UIHostingController.host),
          specialized _UIHostingView.updateRemovedState()(),
          v10,
          (v11 = *(void **)(v4 + 24)) != 0))
    {
      v12 = v11;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t specialized UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  id v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  void *v30;
  id v31;
  char v32;
  id v33;
  char v34;
  id v35;
  char v36;
  id v37;
  char v38;
  uint64_t ObjectType;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  id v47;
  char v48;
  _QWORD v49[4];
  _BYTE v50[32];

  v4 = v3;
  MEMORY[0x18D75B908]();
  v8 = a2;
  v9 = a1;
  if (a1 == 1)
  {
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    v9 = v49[0];
    v8 = v49[1];
  }
  if (!v9)
  {
    outlined copy of EnvironmentValues?(a1);
LABEL_9:
    swift_release();
    return static Update.end()();
  }
  if ((a3 & 3) == 0)
  {
    outlined copy of EnvironmentValues?(a1);
    specialized UIHostingController.resolveBarAppearanceBehavior(in:)(v9, v8);
    swift_release();
    goto LABEL_9;
  }
  v48 = a3;
  v10 = swift_allocObject();
  v43 = direct field offset for UIHostingController.requiredBridges;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)&v3[direct field offset for UIHostingController.requiredBridges];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  outlined copy of EnvironmentValues?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey);
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v12 = v49[0];
  v13 = objc_msgSend(v3, sel_navigationController);
  v14 = a3;
  if (!v13)
  {
    v15 = (uint64_t)&v4[direct field offset for UIHostingController.overrides];
    swift_beginAccess();
    outlined init with copy of HostingControllerOverrides(v15, (uint64_t)v49);
    v13 = (id)MEMORY[0x18D760234](v50);
    outlined destroy of HostingControllerOverrides((uint64_t)v49);
  }
  v47 = objc_msgSend(v4, sel_tabBarController);
  v16 = (a3 >> 1) & 1;
  v44 = v8;
  v46 = v13;
  if (v13)
  {
    if ((v12 & 4) != 0)
      v17 = 0;
    else
      v17 = objc_msgSend(v13, sel__supportsDataDrivenNavigation) ^ 1;
    update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v17, a3 & 1, v10, (a3 & 2) != 0);
LABEL_26:
    v27 = (v12 & 1) == 0;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)&v4[direct field offset for UIHostingController.navigationBridge];
  if (v18)
  {
    v19 = MEMORY[0x18D760234](v18 + 24);
    if (!v19)
      goto LABEL_22;
    v20 = (void *)v19;
    v21 = v19 + direct field offset for UIHostingController.overrides;
    swift_beginAccess();
    outlined init with copy of HostingControllerOverrides(v21, (uint64_t)v49);
    swift_retain();

    v22 = (void *)MEMORY[0x18D760234](v50);
    outlined destroy of HostingControllerOverrides((uint64_t)v49);
    swift_release();
    if (v22)
    {

      v23 = 1;
      v14 = v48;
    }
    else
    {
LABEL_22:
      v23 = 0;
      v14 = v48;
    }
  }
  else
  {
    v23 = 0;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v23, v14 & 1, v10, v16);
  if (v47)
    goto LABEL_26;
  v24 = *(void **)&v4[direct field offset for UIHostingController.host];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v25 = v24;
  v14 = v48;
  v26 = ViewRendererHost.isRootHost.getter();

  if ((v26 & 1) != 0)
    goto LABEL_26;
  v27 = 0;
LABEL_27:
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, v27, v14 & 1, v10, v16);
  static Semantics.v3.getter();
  v28 = isLinkedOnOrAfter(_:)();
  v45 = v12;
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(16, v28 & ((v12 & 0x10) == 0), v14 & 1, v10, v16);
  v29 = direct field offset for UIHostingController.host;
  v30 = *(void **)&v4[direct field offset for UIHostingController.host];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v31 = v30;
  v32 = ViewRendererHost.isRootHost.getter();

  if ((v32 & 1) != 0 && (v33 = objc_msgSend(*(id *)&v4[v29], sel_window)) != 0)
  {

    v34 = 1;
  }
  else
  {
    v34 = 0;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(2, v34, v48 & 1, v10, v16);
  v35 = *(id *)&v4[v29];
  v36 = ViewRendererHost.isRootHost.getter();

  if ((v36 & 1) != 0 && (v37 = objc_msgSend(*(id *)&v4[v29], sel_window)) != 0)
  {

    v38 = 1;
  }
  else
  {
    v38 = 0;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(32, v38, v48 & 1, v10, v16);
  if (v45 < 0)
  {
    v40 = 0;
  }
  else
  {
    ObjectType = swift_getObjectType();
    v40 = (*(uint64_t (**)(void))(ObjectType + 1776))() ^ 1;
  }
  update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(128, v40 & 1, v48 & 1, v10, v16);
  swift_beginAccess();
  v41 = *(_QWORD *)(v10 + 16);
  v42 = *(_QWORD *)&v4[v43];
  *(_QWORD *)&v4[v43] = v41;
  specialized UIHostingController.didChangeRequiredBridges(from:to:)(v42, v41);
  swift_release();

  specialized UIHostingController.resolveBarAppearanceBehavior(in:)(v9, v44);
  swift_release();
  swift_release();
  return static Update.end()();
}

void specialized UIHostingController.resolveBarAppearanceBehavior(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  if (a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *(_QWORD *)(v2 + direct field offset for UIHostingController.allowedBehaviors);
  v5 = direct field offset for UIHostingController.barAppearanceBridge;
  v6 = *(void **)(v2 + direct field offset for UIHostingController.barAppearanceBridge);
  if (*(_QWORD *)(v19 + 16))
  {
    if (v6)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (v6)
  {
    if ((v4 & 1) == 0)
    {
      v7 = v6;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
      v8 = *(void **)(v2 + v5);
      *(_QWORD *)(v2 + v5) = 0;

    }
    goto LABEL_13;
  }
  if ((v4 & 1) != 0)
  {
LABEL_11:
    v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BarAppearanceBridge()), sel_init);
    v10 = *(void **)(v2 + v5);
    *(_QWORD *)(v2 + v5) = v9;

    v11 = *(void **)(v2 + v5);
    if (!v11)
    {
      __break(1u);
      return;
    }
    v12 = v11;
    swift_retain();
    BarAppearanceBridge.addPreferences(to:)();

    swift_release();
  }
LABEL_13:
  v13 = *(void **)(v3 + v5);
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + direct field offset for UIHostingController.host)
                    + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v3
                                                                      + direct field offset for UIHostingController.host))
                                + 0x68));
    v15 = v13;
    swift_retain();
    BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(v19, v14);
    swift_release();
    v16 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    if ((v4 & 1) != 0)
    {
      v15[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = *(_QWORD *)(v19 + 16) != 0;
      v18 = *(_QWORD *)(v19 + 16);
      swift_bridgeObjectRelease();
      v17 = v18 == 0;
    }
    else
    {
      v15[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = 1;
      swift_bridgeObjectRelease();
      v17 = 0;
    }
    v15[v16 + 16] = v17;

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void specialized UIHostingController.didChangeRequiredBridges(from:to:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  Class v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD v46[5];

  if (a2 == a1)
    return;
  v3 = v2;
  v4 = a1;
  MEMORY[0x18D75B908]();
  v5 = *(_QWORD *)&v3[direct field offset for UIHostingController.requiredBridges];
  v6 = (v5 ^ v4) & v4;
  v7 = (v5 ^ v4) & v5;
  if ((v6 & 2) == 0)
  {
    if (((v5 ^ v4) & v5 & 2) != 0)
    {
      v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for KeyboardShortcutBridge()), sel_init);
      v9 = *(void **)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
      *(_QWORD *)&v3[direct field offset for UIHostingController.keyboardShortcutBridge] = v8;

    }
    if ((v6 & 4) == 0)
      goto LABEL_6;
LABEL_15:
    v20 = direct field offset for UIHostingController.navigationBridge;
    if (*(_QWORD *)&v3[direct field offset for UIHostingController.navigationBridge])
    {
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    *(_QWORD *)&v3[v20] = 0;
    goto LABEL_18;
  }
  v13 = direct field offset for UIHostingController.keyboardShortcutBridge;
  v14 = *(void **)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
  if (v14)
  {
    v15 = v14;
    swift_retain();
    GraphHost.removePreference<A>(_:)();
    v15[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences] = 0;

    swift_release();
    v16 = *(void **)&v3[v13];
    if (v16)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      v46[3] = v17;
      v46[4] = &protocol witness table for UIHostingController<A>;
      v46[0] = v3;
      v18 = v16;
      v19 = v3;
      KeyboardShortcutBridge.flushKeyCommands(_:)((uint64_t)v46);

      outlined destroy of KeyboardShortcutSource?((uint64_t)v46);
      v14 = *(void **)&v3[v13];
    }
    else
    {
      v14 = 0;
    }
  }
  *(_QWORD *)&v3[v13] = 0;

  if ((v6 & 4) != 0)
    goto LABEL_15;
LABEL_6:
  if ((v7 & 4) == 0)
    goto LABEL_19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationBridge_PhoneTV<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationBridge_PhoneTV);
  v10 = swift_allocObject();
  v11 = specialized UIKitNavigationBridge.init()(v10);
  swift_release();
  v12 = direct field offset for UIHostingController.navigationBridge;
  *(_QWORD *)&v3[direct field offset for UIHostingController.navigationBridge] = v11;
  swift_release();
  if (!*(_QWORD *)&v3[v12])
  {
    __break(1u);
    goto LABEL_54;
  }
  swift_unknownObjectWeakAssign();
  if (!*(_QWORD *)&v3[v12])
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
LABEL_18:
  swift_release();
LABEL_19:
  if ((v6 & 1) == 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_23;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
    v22 = objc_msgSend(objc_allocWithZone(v21), sel_init);
    v23 = direct field offset for UIHostingController.toolbarBridge;
    v24 = *(void **)&v3[direct field offset for UIHostingController.toolbarBridge];
    *(_QWORD *)&v3[direct field offset for UIHostingController.toolbarBridge] = v22;

    v25 = *(void **)&v3[v23];
    if (v25)
    {
      v26 = v25;
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();

      swift_release();
LABEL_23:
      if ((v6 & 0x10) == 0)
        goto LABEL_24;
LABEL_31:
      v33 = direct field offset for UIHostingController.contentScrollViewBridge;
      if (*(_QWORD *)&v3[direct field offset for UIHostingController.contentScrollViewBridge])
      {
        swift_retain();
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        swift_release();
        swift_release();
      }
      *(_QWORD *)&v3[v33] = 0;
      goto LABEL_34;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v30 = direct field offset for UIHostingController.toolbarBridge;
  v31 = *(void **)&v3[direct field offset for UIHostingController.toolbarBridge];
  if (v31)
  {
    v32 = v31;
    swift_retain();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();
    GraphHost.removePreference<A>(_:)();

    swift_release();
    v31 = *(void **)&v3[v30];
  }
  *(_QWORD *)&v3[v30] = 0;

  if ((v6 & 0x10) != 0)
    goto LABEL_31;
LABEL_24:
  if ((v7 & 0x10) == 0)
    goto LABEL_35;
  type metadata accessor for UIKitContentScrollViewBridge();
  v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v28 = MEMORY[0x1E0DEE9E0];
  *(_DWORD *)(v27 + 24) = -1;
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 0x3FF0000000000000;
  v29 = direct field offset for UIHostingController.contentScrollViewBridge;
  *(_QWORD *)&v3[direct field offset for UIHostingController.contentScrollViewBridge] = v27;
  swift_release();
  if (!*(_QWORD *)&v3[v29])
    goto LABEL_56;
  swift_unknownObjectWeakAssign();
  if (!*(_QWORD *)&v3[v29])
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  swift_retain();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
LABEL_34:
  swift_release();
LABEL_35:
  if ((v6 & 0x20) != 0)
  {
    v36 = direct field offset for UIHostingController.alwaysOnBridge;
    if (*(_QWORD *)&v3[direct field offset for UIHostingController.alwaysOnBridge])
    {
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    *(_QWORD *)&v3[v36] = 0;
    goto LABEL_43;
  }
  if ((v7 & 0x20) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for AlwaysOnBridge<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for AlwaysOnBridge);
    v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(_DWORD *)(v34 + 44) = 0;
    *(_QWORD *)(v34 + 24) = 0;
    *(_QWORD *)(v34 + 32) = 0;
    *(_WORD *)(v34 + 40) = 0;
    *(_QWORD *)(v34 + 48) = MEMORY[0x1E0DEE9D8];
    v35 = direct field offset for UIHostingController.alwaysOnBridge;
    *(_QWORD *)&v3[direct field offset for UIHostingController.alwaysOnBridge] = v34;
    swift_release();
    if (*(_QWORD *)&v3[v35])
    {
      swift_unknownObjectWeakAssign();
      if (*(_QWORD *)&v3[v35])
      {
        swift_retain();
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        swift_release();
LABEL_43:
        swift_release();
        goto LABEL_44;
      }
LABEL_59:
      __break(1u);
      return;
    }
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_44:
  if (v6 < 0)
  {
    v43 = direct field offset for UIHostingController.inspectorBridgeV5;
    v44 = *(void **)&v3[direct field offset for UIHostingController.inspectorBridgeV5];
    if (v44)
    {
      v45 = v44;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
      v44 = *(void **)&v3[v43];
    }
    *(_QWORD *)&v3[v43] = 0;

  }
  else if (v7 < 0)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for UIKitInspectorBridgeV5<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for UIKitInspectorBridgeV5);
    v38 = objc_msgSend(objc_allocWithZone(v37), sel_init);
    v39 = direct field offset for UIHostingController.inspectorBridgeV5;
    v40 = *(void **)&v3[direct field offset for UIHostingController.inspectorBridgeV5];
    *(_QWORD *)&v3[direct field offset for UIHostingController.inspectorBridgeV5] = v38;

    v41 = *(void **)&v3[v39];
    if (v41)
    {
      swift_unknownObjectWeakAssign();
      v42 = v41;
      swift_retain();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();

      swift_release();
    }
  }
  static Update.end()();
}

void specialized UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(UINavigationController *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  _QWORD v42[2];
  __C::CGRect_optional v43;
  double v44[4];
  char v45;
  CGRect v46;
  CGRect v47;

  v2 = v1;
  v4 = direct field offset for UIHostingController.host;
  objc_msgSend(*(id *)(v2 + direct field offset for UIHostingController.host), sel_bounds);
  v47.origin.x = 0.0;
  v47.origin.y = 0.0;
  v47.size.width = 0.0;
  v47.size.height = 0.0;
  if (CGRectEqualToRect(v46, v47))
  {
    v5 = -[UINavigationController viewIfLoaded](a1, sel_viewIfLoaded);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, sel_bounds);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;

      objc_msgSend(*(id *)(v2 + v4), sel_setBounds_, v8, v10, v12, v14);
      return;
    }
    v15 = -[UINavigationController splitViewController](a1, sel_splitViewController);
    if (v15
      && (v16 = v15,
          UISplitViewController.columnBounds(forNavController:)(&v43, a1),
          v16,
          outlined init with take of CGRect?((uint64_t)&v43, (uint64_t)v44),
          (v45 & 1) == 0))
    {
      objc_msgSend(*(id *)(v2 + v4), sel_setBounds_, v44[0], v44[1], v44[2], v44[3]);
    }
    else if ((unint64_t)static RepresentableContextValues.current >= 2)
    {
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v18 = Strong;
        v19 = Strong + 200;
        swift_beginAccess();
        v20 = MEMORY[0x18D760234](v19);
        v21 = *(_QWORD *)(v18 + 208);
        swift_release();
        if (v20)
        {
          ObjectType = swift_getObjectType();
          v23 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider);
          v24 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 16);
          swift_unknownObjectRetain();
          v24(v42, v23, v23, ObjectType, v21);
          swift_unknownObjectRelease();
          if (v42[0])
          {
            v25 = v42[1];
            v26 = swift_getObjectType();
            v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v25);
            swift_unknownObjectRelease();
            if (v27)
            {
              v28 = v27;
              v29 = objc_msgSend(v28, sel_splitViewController);
              if (v29)
              {
                v30 = v29;

                swift_unknownObjectRelease();
                return;
              }
              v31 = objc_msgSend(v28, sel_viewIfLoaded);
              if (v31)
              {
                v32 = v31;
                objc_msgSend(v31, sel_bounds);
                v34 = v33;
                v36 = v35;
                v38 = v37;
                v40 = v39;

                v41 = *(id *)(v2 + v4);
                objc_msgSend(v41, sel_setBounds_, v34, v36, v38, v40);

              }
            }
          }
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(void *a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, UINavigationController *a6, _QWORD *a7, int a8, void *a9, char **a10, uint64_t a11, uint64_t a12)
{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_BOOL8, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_BOOL8, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

{
  return specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(_BOOL8, UINavigationController *, uint64_t))specialized NavigationStackCoordinator.deferProgrammaticUpdateResetIfNeeded(shouldReset:navController:didReset:));
}

id specialized NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(id a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, UINavigationController *a6, _QWORD *a7, int a8, void *a9, char **a10, uint64_t a11, uint64_t a12, void (*a13)(_BOOL8, UINavigationController *, uint64_t))
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  UIViewController *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id result;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  id v59;
  char **v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  id v92;
  unint64_t v93;
  Class isa;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  int64_t v105;
  unint64_t v106;
  char *v107;
  char **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  char *v121;
  uint64_t v122;
  _QWORD v123[2];
  __int128 v124;
  int v125;
  _QWORD *v126;
  UINavigationController *v127;
  uint64_t v128;
  __int128 v129;
  UIViewController *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char **v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139[7];
  unint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  UIViewController *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  void *v149;
  unint64_t v150;

  v125 = a8;
  v126 = a7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v123 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v133 = (char *)v123 - v27;
  v145 = 0;
  v143 = a5;
  v144 = (UIViewController *)MEMORY[0x1E0DEE9D8];
  swift_unknownObjectWeakInit();
  swift_retain();
  a3(&v143);
  v130 = v144;
  if ((unint64_t)v144 >> 62)
    goto LABEL_108;
  v28 = *(_QWORD *)(((unint64_t)v144 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (1)
  {
    v127 = a6;
    v30 = v130;
    if (!v28)
      break;
    v137 = (unint64_t)v130 & 0xC000000000000001;
    v31 = 4;
    *(_QWORD *)&v29 = 138412290;
    v129 = v29;
    *(_QWORD *)&v29 = 138412546;
    v124 = v29;
    v123[1] = MEMORY[0x1E0DEE9B8] + 8;
    v131 = v20;
    v132 = v24;
    v135 = v28;
    v136 = (char **)a1;
    while (1)
    {
      v32 = v137 ? (id)MEMORY[0x18D75E3BC](v31 - 4) : *((id *)&v30->super.super.isa + v31);
      v33 = v32;
      v34 = v31 - 3;
      if (__OFADD__(v31 - 4, 1))
        break;
      v35 = objc_msgSend(v32, sel_navigationController);
      v36 = v35;
      if (!v35)
      {
        if (a1)
        {
LABEL_20:
          static Log.navigation.getter();
          v41 = type metadata accessor for Logger();
          v42 = *(_QWORD *)(v41 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v24, 1, v41) == 1)
          {

            v43 = (uint64_t)v24;
LABEL_28:
            outlined destroy of Logger?(v43);
            goto LABEL_8;
          }
          v44 = v33;
          v45 = Logger.logObject.getter();
          v46 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v45, v46))
          {
            v47 = swift_slowAlloc();
            v48 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v47 = v129;
            *(_QWORD *)(v47 + 4) = v44;
            *v48 = v44;

            _os_log_impl(&dword_186E48000, v45, v46, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController or destination were nil", (uint8_t *)v47, 0xCu);
            type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            v49 = v48;
            v24 = v132;
            MEMORY[0x18D760108](v49, -1, -1);
            v50 = v47;
            v20 = v131;
            MEMORY[0x18D760108](v50, -1, -1);
          }
          else
          {

          }
          v28 = v135;

          (*(void (**)(char *, uint64_t))(v42 + 8))(v24, v41);
        }
        else
        {
          static Log.navigation.getter();
          v56 = type metadata accessor for Logger();
          v57 = *(_QWORD *)(v56 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v20, 1, v56) == 1)
          {

            v43 = (uint64_t)v20;
            goto LABEL_28;
          }
          v70 = v33;
          v71 = Logger.logObject.getter();
          v72 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v71, v72))
          {
            v73 = swift_slowAlloc();
            v74 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v73 = v129;
            *(_QWORD *)(v73 + 4) = v70;
            *v74 = v70;
            type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            swift_arrayDestroy();
            MEMORY[0x18D760108](v74, -1, -1);
            v75 = v73;
            v20 = v131;
            MEMORY[0x18D760108](v75, -1, -1);
            v76 = v71;
          }
          else
          {

            v76 = v70;
            v70 = v71;
          }
          v28 = v135;

          (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v56);
        }
        a6 = v127;
        goto LABEL_8;
      }
      if (!a1)
        goto LABEL_20;
      if (v35 != a1)
      {
        v37 = a1;
        v38 = v36;
        objc_msgSend(v33, sel_willMoveToParentViewController_, 0);
        result = objc_msgSend(v33, sel_view);
        if (!result)
        {
          __break(1u);
          return result;
        }
        v40 = result;
        objc_msgSend(result, sel_removeFromSuperview);

        specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(v33, v38, (uint64_t)&v145);
        a6 = v127;
        v28 = v135;
        goto LABEL_9;
      }
      v134 = v31 - 3;
      v51 = v133;
      static Log.navigation.getter();
      v52 = type metadata accessor for Logger();
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52) == 1)
      {

        v54 = v136;
        v55 = (uint64_t)v51;
        a1 = v54;
        outlined destroy of Logger?(v55);
        v34 = v134;
        goto LABEL_9;
      }
      v128 = v53;
      v58 = v136;
      v59 = v33;
      v60 = v58;
      v61 = v59;
      v62 = Logger.logObject.getter();
      v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = swift_slowAlloc();
        v65 = (_QWORD *)swift_slowAlloc();
        v66 = swift_slowAlloc();
        v139[0] = v66;
        *(_DWORD *)v64 = v124;
        *(_QWORD *)(v64 + 4) = v61;
        *v65 = v61;

        *(_WORD *)(v64 + 12) = 2080;
        v146 = (uint64_t)v36;
        type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for UINavigationController?, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
        v60 = v60;
        v67 = String.init<A>(describing:)();
        *(_QWORD *)(v64 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v139);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v62, v63, "[NavigationHostingControllerCache_UIKit] %@ containment skipped because sourceNavigationController and destination were equal %s", (uint8_t *)v64, 0x16u);
        type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for NSObject?, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v65, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v66, -1, -1);
        v69 = v64;
        v20 = v131;
        MEMORY[0x18D760108](v69, -1, -1);

      }
      else
      {

      }
      v24 = v132;
      v34 = v134;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v133, v52);
      a6 = v127;
      v28 = v135;
LABEL_8:
      a1 = v136;
LABEL_9:
      ++v31;
      v30 = v130;
      if (v34 == v28)
        goto LABEL_37;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_bridgeObjectRetain_n();
    v28 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_37:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!v145)
    goto LABEL_94;
  a6 = (UINavigationController *)a1;
  v77 = *(_QWORD *)(v145 + 64);
  v128 = v145 + 64;
  v78 = 1 << *(_BYTE *)(v145 + 32);
  if (v78 < 64)
    v79 = ~(-1 << v78);
  else
    v79 = -1;
  v80 = v79 & v77;
  *(_QWORD *)&v129 = (unint64_t)(v78 + 63) >> 6;
  v81 = swift_bridgeObjectRetain();
  v82 = 0;
  v83 = 0;
  v137 = MEMORY[0x1E0DEE9B0] + 8;
  v131 = (char *)v81;
  while (2)
  {
    if (v80)
    {
      v134 = (v80 - 1) & v80;
      v135 = v82;
      v84 = __clz(__rbit64(v80)) | (v82 << 6);
      goto LABEL_58;
    }
    v85 = __OFADD__(v82, 1);
    v86 = v82 + 1;
    if (v85)
      goto LABEL_106;
    a1 = a6;
    if (v86 >= (uint64_t)v129)
      goto LABEL_93;
    v87 = *(_QWORD *)(v128 + 8 * v86);
    if (v87)
    {
LABEL_57:
      v134 = (v87 - 1) & v87;
      v135 = v86;
      v84 = __clz(__rbit64(v87)) + (v86 << 6);
LABEL_58:
      v89 = 8 * v84;
      v90 = *(_QWORD *)(*(_QWORD *)(v81 + 56) + v89);
      v91 = (char *)*(id *)(*(_QWORD *)(v81 + 48) + v89);
      swift_bridgeObjectRetain();
      v92 = objc_msgSend(v91, sel_viewControllers);
      v20 = (char *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      v93 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      specialized _ArrayProtocol.filter(_:)(v93, v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v91, sel_setViewControllers_, isa);

      v136 = v83;
      v133 = v91;
      if ((v90 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController, MEMORY[0x1E0DEFCF8]);
        Set.Iterator.init(_cocoa:)();
        v90 = v146;
        v24 = v147;
        v95 = v148;
        a1 = v149;
        v96 = v150;
      }
      else
      {
        a1 = 0;
        v97 = -1 << *(_BYTE *)(v90 + 32);
        v24 = (char *)(v90 + 56);
        v95 = ~v97;
        v98 = -v97;
        if (v98 < 64)
          v99 = ~(-1 << v98);
        else
          v99 = -1;
        v96 = v99 & *(_QWORD *)(v90 + 56);
      }
      v132 = (char *)v95;
      v100 = (unint64_t)(v95 + 64) >> 6;
      if ((v90 & 0x8000000000000000) == 0)
        goto LABEL_68;
LABEL_65:
      v101 = __CocoaSet.Iterator.next()();
      if (!v101)
        goto LABEL_42;
      v138 = v101;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v20 = (char *)v139[0];
      swift_unknownObjectRelease();
      v102 = (char *)a1;
      v103 = v96;
      if (!v20)
      {
LABEL_42:
        outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();

        v81 = (uint64_t)v131;
        v83 = v136;
        v82 = v135;
        v80 = v134;
        continue;
      }
      while (1)
      {
        objc_msgSend(v20, sel_removeFromParentViewController);
        objc_msgSend(v20, sel_willMoveToParentViewController_, a6);

        a1 = v102;
        v96 = v103;
        if (v90 < 0)
          goto LABEL_65;
LABEL_68:
        if (v96)
        {
          v103 = (v96 - 1) & v96;
          v104 = __clz(__rbit64(v96)) | ((_QWORD)a1 << 6);
          v102 = (char *)a1;
        }
        else
        {
          v105 = (int64_t)a1 + 1;
          if (__OFADD__(a1, 1))
          {
            __break(1u);
            goto LABEL_105;
          }
          if (v105 >= v100)
            goto LABEL_42;
          v106 = *(_QWORD *)&v24[8 * v105];
          v102 = (char *)a1 + 1;
          if (!v106)
          {
            v102 = (char *)a1 + 2;
            if ((uint64_t)a1 + 2 >= v100)
              goto LABEL_42;
            v106 = *(_QWORD *)&v24[8 * (_QWORD)v102];
            if (!v106)
            {
              v102 = (char *)a1 + 3;
              if ((uint64_t)a1 + 3 >= v100)
                goto LABEL_42;
              v106 = *(_QWORD *)&v24[8 * (_QWORD)v102];
              if (!v106)
              {
                v102 = (char *)a1 + 4;
                if ((uint64_t)a1 + 4 >= v100)
                  goto LABEL_42;
                v106 = *(_QWORD *)&v24[8 * (_QWORD)v102];
                if (!v106)
                {
                  v102 = (char *)a1 + 5;
                  if ((uint64_t)a1 + 5 >= v100)
                    goto LABEL_42;
                  v106 = *(_QWORD *)&v24[8 * (_QWORD)v102];
                  if (!v106)
                  {
                    v107 = (char *)a1 + 6;
                    while ((char *)v100 != v107)
                    {
                      v106 = *(_QWORD *)&v24[8 * (_QWORD)v107++];
                      if (v106)
                      {
                        v102 = v107 - 1;
                        goto LABEL_85;
                      }
                    }
                    goto LABEL_42;
                  }
                }
              }
            }
          }
LABEL_85:
          v103 = (v106 - 1) & v106;
          v104 = __clz(__rbit64(v106)) + ((_QWORD)v102 << 6);
        }
        v20 = (char *)*(id *)(*(_QWORD *)(v90 + 48) + 8 * v104);
        if (!v20)
          goto LABEL_42;
      }
    }
    break;
  }
  v88 = v86 + 1;
  if (v86 + 1 >= (uint64_t)v129)
    goto LABEL_93;
  v87 = *(_QWORD *)(v128 + 8 * v88);
  if (v87)
    goto LABEL_56;
  v88 = v86 + 2;
  if (v86 + 2 >= (uint64_t)v129)
    goto LABEL_93;
  v87 = *(_QWORD *)(v128 + 8 * v88);
  if (v87)
    goto LABEL_56;
  v88 = v86 + 3;
  if (v86 + 3 >= (uint64_t)v129)
    goto LABEL_93;
  v87 = *(_QWORD *)(v128 + 8 * v88);
  if (v87)
    goto LABEL_56;
  v88 = v86 + 4;
  if (v86 + 4 >= (uint64_t)v129)
    goto LABEL_93;
  v87 = *(_QWORD *)(v128 + 8 * v88);
  if (v87)
  {
LABEL_56:
    v86 = v88;
    goto LABEL_57;
  }
  while (1)
  {
    v86 = v88 + 1;
    if (__OFADD__(v88, 1))
      goto LABEL_107;
    if (v86 >= (uint64_t)v129)
      break;
    v87 = *(_QWORD *)(v128 + 8 * v86);
    ++v88;
    if (v87)
      goto LABEL_57;
  }
LABEL_93:
  swift_release();
  a6 = v127;
LABEL_94:
  v109 = (uint64_t)a9;
  v108 = a10;
  specialized closure #2 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(v130, a6, v126, (char *)(v125 & 1), a9, a10, a11, a12, a13);
  swift_bridgeObjectRelease();
  if (v145)
  {
    v135 = (uint64_t)a9;
    v136 = a10;
    v137 = a11;
    v110 = *(_QWORD *)(v145 + 64);
    v111 = -1 << *(_BYTE *)(v145 + 32);
    v112 = ~v111;
    v113 = -v111;
    v139[0] = v145;
    v139[1] = v145 + 64;
    if (v113 < 64)
      v114 = ~(-1 << v113);
    else
      v114 = -1;
    v139[2] = v112;
    v139[3] = 0;
    v139[4] = v114 & v110;
    v139[5] = (uint64_t)closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:);
    v139[6] = 0;
    v140 = 0xF000000000000007;
    v141 = 0u;
    v142 = 0u;
    specialized FlattenSequence.Iterator.next()();
    if (v115)
    {
      v116 = v115;
      v117 = a1;
      v118 = MEMORY[0x1E0CE7518];
      v119 = MEMORY[0x1E0CE7508];
      do
      {
        objc_msgSend(v116, sel_didMoveToParentViewController_, v117);
        v120 = *(id *)&v116[direct field offset for UIHostingController.host];
        static ViewRendererHostProperties.all.getter();
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, v118, v119, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        specialized FlattenSequence.Iterator.next()();
        v116 = v121;
      }
      while (v121);
    }
    v122 = v140;
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    swift_release();
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v122);
    outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v143);

    v108 = v136;
    v109 = v135;
  }
  else
  {
    outlined destroy of NavigationHostingControllerCache_UIKit.Source((uint64_t)&v143);

  }
  outlined release of NavigationState.StackContent(v109);
  outlined release of NavigationState.StackContent((uint64_t)v108);
  return (id)swift_release();
}

void specialized mustRemove #1 <A>(_:from:) in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)(void *a1, void *a2, uint64_t a3)
{
  char v3;
  id v7;
  char v8;
  char v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  id v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t inited;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31[3];
  id v32;

  swift_beginAccess();
  if (*(_QWORD *)a3)
  {
    if (*(_QWORD *)(*(_QWORD *)a3 + 16))
    {
      v7 = a2;
      specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
      v9 = v8;

      if ((v9 & 1) != 0)
      {
        swift_beginAccess();
        if (!*(_QWORD *)a3)
        {
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        v10 = a1;
        v11 = v7;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v30 = *(_QWORD *)a3;
        v13 = v30;
        *(_QWORD *)a3 = 0x8000000000000000;
        v14 = v11;
        v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
        v17 = *(_QWORD *)(v13 + 16);
        v18 = (v15 & 1) == 0;
        v19 = v17 + v18;
        if (__OFADD__(v17, v18))
        {
          __break(1u);
        }
        else
        {
          v3 = v15;
          if (*(_QWORD *)(v13 + 24) < v19)
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, isUniquelyReferenced_nonNull_native);
            v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
            if ((v3 & 1) != (v21 & 1))
            {
LABEL_23:
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            v16 = v20;
            if ((v3 & 1) == 0)
              goto LABEL_20;
LABEL_17:
            v29 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v16);
            specialized Set._Variant.insert(_:)(&v32, v10);
            specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v29, 1, &v30, v16, v14);

            swift_bridgeObjectRelease();
            *(_QWORD *)a3 = v30;
            swift_endAccess();

            return;
          }
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v15 & 1) != 0)
              goto LABEL_17;
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        specialized _NativeDictionary.copy()();
        if ((v3 & 1) != 0)
          goto LABEL_17;
        goto LABEL_20;
      }
    }
    v32 = (id)MEMORY[0x1E0DEE9E8];
    specialized Set._Variant.insert(_:)(v31, a1);

    v22 = (uint64_t)v32;
    swift_beginAccess();
    if (!*(_QWORD *)a3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v23 = a2;
    swift_bridgeObjectRetain();
    v24 = swift_isUniquelyReferenced_nonNull_native();
    v30 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v23, v24);
    *(_QWORD *)a3 = v30;

    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    v32 = (id)MEMORY[0x1E0DEE9E8];
    specialized Set._Variant.insert(_:)(v31, a1);

    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UINavigationController, Set<NavigationStackHostingController<AnyView>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (UINavigationController, Set<NavigationStackHostingController<AnyView>>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v26 = v32;
    *(_QWORD *)(inited + 32) = a2;
    *(_QWORD *)(inited + 40) = v26;
    v27 = a2;
    v28 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_beginAccess();
    *(_QWORD *)a3 = v28;
  }
  swift_bridgeObjectRelease();
}

uint64_t closure #2 in NavigationHostingControllerCache_UIKit._viewControllers<A>(forEntering:isBorrowing:request:insert:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void specialized FlattenSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = v0[7];
  while (1)
  {
    if ((~v2 & 0xF000000000000007) == 0)
      goto LABEL_16;
    if ((v2 & 0x8000000000000000) == 0)
      break;
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      if (v23)
        return;
    }
LABEL_16:
    v16 = specialized LazyMapSequence.Iterator.next()();
    v2 = v16;
    if (!v16)
      return;
    if ((v16 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationStackHostingController<AnyView> and conformance NSObject, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController, MEMORY[0x1E0DEFCF8]);
      Set.Iterator.init(_cocoa:)();
      v4 = v25;
      v6 = v26;
      v3 = v27;
      v9 = v28;
      swift_bridgeObjectRelease();
      v2 = v24;
    }
    else
    {
      v3 = 0;
      v4 = v16 + 56;
      v5 = -1 << *(_BYTE *)(v16 + 32);
      v6 = ~v5;
      v7 = -v5;
      if (v7 < 64)
        v8 = ~(-1 << v7);
      else
        v8 = -1;
      v9 = v8 & *(_QWORD *)(v16 + 56);
    }
    outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(v1[7]);
    v1[7] = v2;
    v1[8] = v4;
    v1[9] = v6;
    v1[10] = v3;
    v1[11] = v9;
  }
  v11 = v1[10];
  v10 = v1[11];
  if (v10)
  {
    v12 = (v10 - 1) & v10;
    v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_11:
    v14 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v13);
    v15 = v14;
    goto LABEL_12;
  }
  v17 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    v18 = (unint64_t)(v1[9] + 64) >> 6;
    if (v17 >= v18)
    {
      v14 = 0;
      v12 = 0;
      goto LABEL_12;
    }
    v19 = v1[8];
    v20 = *(_QWORD *)(v19 + 8 * v17);
    if (v20)
    {
LABEL_22:
      v12 = (v20 - 1) & v20;
      v13 = __clz(__rbit64(v20)) + (v17 << 6);
      v11 = v17;
      goto LABEL_11;
    }
    v21 = v11 + 2;
    if (v11 + 2 >= v18)
      goto LABEL_38;
    v20 = *(_QWORD *)(v19 + 8 * v21);
    if (v20)
    {
LABEL_26:
      v17 = v21;
      goto LABEL_22;
    }
    if (v11 + 3 < v18)
    {
      v20 = *(_QWORD *)(v19 + 8 * (v11 + 3));
      if (v20)
      {
        v17 = v11 + 3;
        goto LABEL_22;
      }
      v21 = v11 + 4;
      if (v11 + 4 >= v18)
      {
        v14 = 0;
        v12 = 0;
        v11 += 3;
LABEL_12:
        v1[10] = v11;
        v1[11] = v12;
        if (v14)
          return;
        goto LABEL_16;
      }
      v20 = *(_QWORD *)(v19 + 8 * v21);
      if (v20)
        goto LABEL_26;
      v17 = v11 + 5;
      if (v11 + 5 < v18)
      {
        v20 = *(_QWORD *)(v19 + 8 * v17);
        if (v20)
          goto LABEL_22;
        v17 = v18 - 1;
        v22 = v11 + 6;
        while (v18 != v22)
        {
          v20 = *(_QWORD *)(v19 + 8 * v22++);
          if (v20)
          {
            v17 = v22 - 1;
            goto LABEL_22;
          }
        }
LABEL_38:
        v14 = 0;
        v12 = 0;
        v11 = v17;
        goto LABEL_12;
      }
    }
    v14 = 0;
    v12 = 0;
    v11 = v21;
    goto LABEL_12;
  }
  __break(1u);
}

void closure #1 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  unsigned __int8 v7[8];
  uint64_t v8;

  v7[0] = a2;
  v8 = a3;
  NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v7, 0, a4, a5, a6, a7);
}

void NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(unsigned __int8 *a1, char a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t), void (*a6)(void))
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  void *v42;
  uint64_t v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  id v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  Swift::UInt v59;
  void (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::UInt v64;

  v7 = v6;
  v61 = a4;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v56 - v19;
  v21 = *a1;
  v22 = *((_QWORD *)a1 + 1);
  v23 = *v7;
  swift_beginAccess();
  v24 = *(_QWORD *)(v23 + 16);
  if (!*(_QWORD *)(v24 + 16) || (v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22), (v26 & 1) == 0))
  {
    LODWORD(v61) = v21;
    swift_endAccess();
    goto LABEL_6;
  }
  v60 = a3;
  v27 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_endAccess();
  v28 = v27;
  if ((requiresNew #1 (_:) in NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(v28, (uint64_t)v7, a2 & 1, v21, v22) & 1) != 0)
  {
    LODWORD(v61) = v21;

LABEL_6:
    static Log.navigation.getter();
    v29 = type metadata accessor for Logger();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v16, 1, v29) == 1)
    {
      v31 = outlined destroy of Logger?((uint64_t)v16);
    }
    else
    {
      v60 = a6;
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc();
        v58 = (uint64_t)a5;
        v35 = (uint8_t *)v34;
        v36 = swift_slowAlloc();
        v59 = v22;
        v37 = v36;
        v62 = v36;
        *(_DWORD *)v35 = 136315138;
        v57 = v35 + 4;
        LOBYTE(v63) = v61;
        v64 = v59;
        v38 = NavigationContentAbstractPosition.description.getter();
        v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v32, v33, "<NavigationHostingControllerCache>: MISS at %s", v35, 0xCu);
        swift_arrayDestroy();
        v40 = v37;
        v22 = v59;
        MEMORY[0x18D760108](v40, -1, -1);
        v41 = v35;
        a5 = (uint64_t (*)(uint64_t))v58;
        MEMORY[0x18D760108](v41, -1, -1);
      }

      v31 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v16, v29);
    }
    v42 = (void *)a5(v31);
    v43 = *v7;
    swift_beginAccess();
    v44 = v42;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v62 = *(_QWORD *)(v43 + 16);
    *(_QWORD *)(v43 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v44, v61, v22, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v43 + 16) = v62;
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_12;
  }
  static Log.navigation.getter();
  v47 = type metadata accessor for Logger();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v20, 1, v47) == 1)
  {
    outlined destroy of Logger?((uint64_t)v20);
  }
  else
  {
    v59 = v22;
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v62 = v58;
      v57 = v51;
      *(_DWORD *)v51 = 136315138;
      v56 = v51 + 4;
      LOBYTE(v63) = v21;
      v64 = v59;
      v52 = NavigationContentAbstractPosition.description.getter();
      v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v54 = v57;
      _os_log_impl(&dword_186E48000, v49, v50, "<NavigationHostingControllerCache>: HIT at %s", v57, 0xCu);
      v55 = v58;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v55, -1, -1);
      MEMORY[0x18D760108](v54, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v47);
  }
  v44 = v28;
  v60();

LABEL_12:
  v46 = v44;
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((v7[1] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v7[1] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

}

uint64_t closure #2 in NavigationHostingControllerCache_UIKit.unparentedHostingController(at:configureExisting:makeNew:)@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  id v6;
  id v7;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v6 = (id)MEMORY[0x18D75E3BC](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(a1 + 32);
LABEL_6:
    v7 = v6;
    result = swift_bridgeObjectRelease();
    *a2 = v7;
    return result;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall NavigationHostingControllerCache_UIKit.eject(at:)(SwiftUI::NavigationContentAbstractPosition at)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  Swift::UInt v33;
  void *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  id v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;

  v2 = *(unsigned __int8 **)&at.column.value.tag;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v66 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v66 - v13;
  v71 = *v2;
  v15 = *((_QWORD *)v2 + 1);
  static Log.navigation.getter();
  v16 = type metadata accessor for Logger();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v14, 1, v16) == 1)
  {
    outlined destroy of Logger?((uint64_t)v14);
  }
  else
  {
    v70 = v10;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v69 = v15;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc();
      v67 = v6;
      v24 = v23;
      v72 = v23;
      v68 = v17;
      v66 = v16;
      *(_DWORD *)v22 = 136315138;
      LOBYTE(v73) = v71;
      v74 = v69;
      v25 = NavigationContentAbstractPosition.description.getter();
      v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v72);
      v16 = v66;
      v17 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v19, v20, "[NavigationHostingControllerCache_UIKit] Eject called for index: %s", v22, 0xCu);
      swift_arrayDestroy();
      v27 = v24;
      v6 = v67;
      MEMORY[0x18D760108](v27, -1, -1);
      v28 = v22;
      v15 = v69;
      MEMORY[0x18D760108](v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    v10 = v70;
  }
  v29 = (uint64_t *)(v1 + 16);
  if (v15 < 1)
  {
    swift_beginAccess();
    v44 = *v29;
    if (*(_QWORD *)(*v29 + 16) && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v15), (v46 & 1) != 0))
    {
      v47 = *(id *)(*(_QWORD *)(v44 + 56) + 8 * v45);
      v48 = v47;
    }
    else
    {
      v47 = 0;
    }
    swift_endAccess();
    static Log.navigation.getter();
    if (v18(v6, 1, v16) != 1)
    {
      v55 = v47;
      v56 = Logger.logObject.getter();
      v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v67 = v6;
        v68 = v17;
        v58 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        v72 = (uint64_t)v47;
        v73 = v59;
        *(_DWORD *)v58 = 136315394;
        type metadata accessor for NavigationStackHostingController<AnyView>?();
        v60 = v55;
        v61 = String.init<A>(describing:)();
        v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        if (v47)
          v63 = objc_msgSend(v60, sel_parentViewController);
        else
          v63 = 0;
        v72 = (uint64_t)v63;
        type metadata accessor for UIViewController?(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController?, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        v64 = String.init<A>(describing:)();
        v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v56, v57, "[NavigationHostingControllerCache_UIKit] Controller %s with parent %s had eject called but was not ejected because cache depth was zero.", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v59, -1, -1);
        MEMORY[0x18D760108](v58, -1, -1);

        v6 = v67;
        v17 = v68;
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v16);
      return;
    }

    v43 = (uint64_t)v6;
LABEL_22:
    outlined destroy of Logger?(v43);
    return;
  }
  swift_beginAccess();
  v30 = *v29;
  if (*(_QWORD *)(*v29 + 16))
  {
    v31 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v15);
    if ((v32 & 1) != 0)
    {
      v33 = v15;
      v34 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v31);
      swift_endAccess();
      v35 = v34;
      v36 = AnyView.init<A>(_:)();
      specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(v36);
      swift_release();
      swift_beginAccess();
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v71, v33);
      if ((v38 & 1) != 0)
      {
        v39 = v37;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v41 = *v29;
        v72 = *v29;
        *v29 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v41 = v72;
        }
        v42 = *(void **)(*(_QWORD *)(v41 + 56) + 8 * v39);
        specialized _NativeDictionary._delete(at:)(v39, v41);
        *v29 = v41;

        swift_bridgeObjectRelease();
      }
      swift_endAccess();

      return;
    }
  }
  swift_endAccess();
  static Log.navigation.getter();
  if (v18(v10, 1, v16) == 1)
  {
    v43 = (uint64_t)v10;
    goto LABEL_22;
  }
  v49 = Logger.logObject.getter();
  v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc();
    v52 = swift_slowAlloc();
    v72 = v52;
    *(_DWORD *)v51 = 136315138;
    LOBYTE(v73) = v71;
    v74 = v15;
    v53 = NavigationContentAbstractPosition.description.getter();
    v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v49, v50, "[NavigationHostingControllerCache_UIKit] Attempting to eject an un-cached view controller at index: %s", v51, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v52, -1, -1);
    MEMORY[0x18D760108](v51, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
}

uint64_t closure #1 in NavigationHostingControllerCache_UIKit.ejectDeferred(at:)()
{
  uint64_t result;
  uint64_t v1;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = AnyView.init<A>(_:)();
    specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(v1);
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall NavigationHostingControllerCache_UIKit.ejectAll(in:)(SwiftUI::NavigationSplitViewColumn_optional in)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;

  v2 = *(unsigned __int8 *)in.value.tag;
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v9 << 6);
LABEL_26:
    v16 = *(_QWORD *)(v3 + 48);
    v17 = *(unsigned __int8 *)(v16 + 16 * v12);
    if (v17 == 3)
    {
      if (v2 == 3)
      {
        v28 = 3;
        goto LABEL_30;
      }
    }
    else if (v2 != 3 && v17 == v2)
    {
      v28 = v2;
LABEL_30:
      v27 = *(_QWORD *)(v16 + 16 * v12 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v19 = *((_QWORD *)v10 + 2);
      v18 = *((_QWORD *)v10 + 3);
      if (v19 >= v18 >> 1)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v10);
      *((_QWORD *)v10 + 2) = v19 + 1;
      v20 = &v10[16 * v19];
      v20[32] = v28;
      *((_QWORD *)v20 + 5) = v27;
    }
  }
  v13 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  if (v13 >= v8)
    goto LABEL_35;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v9;
  if (v14)
    goto LABEL_25;
  v9 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_35;
  v14 = *(_QWORD *)(v4 + 8 * v9);
  if (v14)
    goto LABEL_25;
  v9 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_35;
  v14 = *(_QWORD *)(v4 + 8 * v9);
  if (v14)
    goto LABEL_25;
  v9 = v13 + 3;
  if (v13 + 3 >= v8)
    goto LABEL_35;
  v14 = *(_QWORD *)(v4 + 8 * v9);
  if (v14)
    goto LABEL_25;
  v9 = v13 + 4;
  if (v13 + 4 >= v8)
    goto LABEL_35;
  v14 = *(_QWORD *)(v4 + 8 * v9);
  if (v14)
  {
LABEL_25:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
    goto LABEL_26;
  }
  v15 = v13 + 5;
  if (v15 < v8)
  {
    v14 = *(_QWORD *)(v4 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v9 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_41;
        if (v9 >= v8)
          goto LABEL_35;
        v14 = *(_QWORD *)(v4 + 8 * v9);
        ++v15;
        if (v14)
          goto LABEL_25;
      }
    }
    v9 = v15;
    goto LABEL_25;
  }
LABEL_35:
  swift_release();
  v21 = *((_QWORD *)v10 + 2);
  if (v21)
  {
    swift_bridgeObjectRetain();
    v23 = v10 + 40;
    do
    {
      v24 = *((_BYTE *)v23 - 8);
      v25 = *v23;
      v23 += 2;
      v29 = v24;
      v30 = v25;
      v26 = &v29;
      NavigationHostingControllerCache_UIKit.eject(at:)(*(SwiftUI::NavigationContentAbstractPosition *)(&v22 - 1));
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t requiresNew #1 (_:) in NavigationHostingControllerCache_UIKit.Source.ensureViewController(at:forPushing:configureExisting:makeNew:)(void *a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v26 - v13;
  result = MEMORY[0x18D760234](a2 + 16, v12);
  if (result)
  {
    if ((a3 & 1) == 0)
    {

      return 0;
    }
    v16 = (id)result;
    v17 = objc_msgSend(a1, sel_navigationController);

    if (!v17 || (v17, v16 != v17))
    {

      return 0;
    }
    static Log.navigation.getter();
    v18 = type metadata accessor for Logger();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18) == 1)
    {

      outlined destroy of Logger?((uint64_t)v14);
    }
    else
    {
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v28 = v20;
        v22 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v30 = a5;
        v31 = v27;
        *(_DWORD *)v22 = 136315138;
        v26 = v22 + 4;
        LOBYTE(v29) = a4;
        v23 = NavigationContentAbstractPosition.description.getter();
        v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v20 = v28;
        _os_log_impl(&dword_186E48000, v28, v21, "<NavigationHostingControllerCache>: HIT at %s, ignoring to avoid UINavigationController exception", v22, 0xCu);
        v25 = v27;
        swift_arrayDestroy();
        MEMORY[0x18D760108](v25, -1, -1);
        MEMORY[0x18D760108](v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v18);
    }
    return 1;
  }
  return result;
}

uint64_t NavigationHostingControllerCache_UIKit.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(uint64_t a1, void *a2, UINavigationController *a3, char a4)
{
  char *v4;
  void *v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  char isEscapingClosureAtFileLocation;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 aBlock;
  uint64_t (*v35)(uint64_t);
  void *v36;
  uint64_t (*v37)();
  uint64_t v38;
  BOOL v39;
  uint64_t v40;

  v5 = v4;
  v8 = a2;
  v9 = a1;
  v10 = *(_QWORD *)&v4[direct field offset for UIHostingController.toolbarBridge];
  if (!v10)
    goto LABEL_6;
  v11 = *(_QWORD *)(v10 + direct field offset for ToolbarBridge.navigationAdaptor);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    goto LABEL_6;
  v13 = v11 + 32;
  swift_bridgeObjectRetain();
  v14 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v13, (uint64_t)&aBlock);
    outlined init with copy of TableColumnList((uint64_t)&aBlock, (uint64_t)&v29);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)&aBlock);
    v15 = v31;
    v16 = v32;
    __swift_project_boxed_opaque_existential_1(&v29, v31);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 8))(&v40, v15, v16);
    v14 |= v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    v13 += 48;
    --v12;
  }
  while (v12);
  result = swift_bridgeObjectRelease();
  v9 = a1;
  v8 = a2;
  if ((v14 & 2) == 0)
  {
LABEL_6:
    v18 = ~a4;
    v19 = -[UINavigationController splitViewController](a3, sel_splitViewController);
    aBlock = xmmword_187BF9F90;
    v35 = 0;
    LOBYTE(v36) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();

    v39 = (a4 & 1) == 0;
    v20 = (uint64_t)v5 + direct field offset for UIHostingController.overrides;
    swift_beginAccess();
    outlined assign with take of HostingControllerOverrides((uint64_t)&aBlock, v20);
    swift_endAccess();
    if ((v18 & 1) != 0)
    {
      specialized UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, 0, 3uLL);
      specialized UIHostingController.updateIncomingBoundsIfNeeded(navigationController:)(a3);
      v21 = (void *)objc_opt_self();
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v5;
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = partial apply for specialized closure #1 in UIHostingController.performRender();
      *(_QWORD *)(v23 + 24) = v22;
      v37 = partial apply for thunk for @callee_guaranteed () -> ();
      v38 = v23;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v35 = thunk for @escaping @callee_guaranteed () -> ();
      v36 = &block_descriptor_58;
      v24 = _Block_copy(&aBlock);
      v25 = v5;
      swift_retain();
      swift_release();
      objc_msgSend(v21, sel_performWithoutAnimation_, v24);
      _Block_release(v24);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      specialized UIHostingController.promoteTitle(in:)(v9, v8);
    }
    v29 = xmmword_187BF9F90;
    v30 = 0;
    LOBYTE(v31) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    v33 = 2;
    outlined init with take of HostingControllerOverrides((uint64_t)&v29, (uint64_t)&aBlock);
    swift_beginAccess();
    outlined assign with take of HostingControllerOverrides((uint64_t)&aBlock, v20);
    return swift_endAccess();
  }
  return result;
}

void specialized closure #2 in NavigationStackCoordinator.update(to:from:navigationController:transaction:transparentBackground:)(UIViewController *a1, UINavigationController *a2, _QWORD *a3, char *a4, void *a5, char **a6, uint64_t a7, uint64_t a8, void (*a9)(_BOOL8, UINavigationController *, uint64_t))
{
  UIViewController *v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSArray *v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id *v27;
  id *v28;
  uint64_t v29;
  id *v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  _BOOL8 v35;
  int v36;
  uint64_t v39;
  void *__src;
  char **v41;
  char v42;
  uint64_t v43;
  _BYTE __dst[392];
  uint64_t v45;

  v15 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    v16 = *(_QWORD *)(((unint64_t)a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
      goto LABEL_3;
LABEL_37:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_37;
LABEL_3:
  __src = a5;
  v41 = a6;
  v42 = (char)a4;
  if (((unint64_t)v15 & 0xC000000000000001) != 0)
  {
LABEL_38:
    v17 = (char *)MEMORY[0x18D75E3BC](0, v15);
    goto LABEL_6;
  }
  if (!*(_QWORD *)(((unint64_t)v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  v17 = v15->_view;
LABEL_6:
  a4 = v17;
  swift_bridgeObjectRelease();
  v15 = -[UINavigationController topViewController](a2, sel_topViewController);
  v18 = -[UINavigationController transitionCoordinator](a2, sel_transitionCoordinator);
  if (!v18)
    goto LABEL_21;
  if (objc_msgSend(v18, sel_isCancelled)
    && -[UINavigationController lastOperation](a2, sel_lastOperation) == (id)1)
  {
    a6 = &selRef_documentBrowser_failedToImportDocumentAtURL_error_;
    v19 = -[UINavigationController viewControllers](a2, sel_viewControllers);
    v39 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v20 >> 62))
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
LABEL_40:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    if (v21 >= 2)
    {
      v22 = objc_msgSend(a2, a6[344]);
      v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v23 >> 62)
      {
        swift_bridgeObjectRetain();
        v24 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v25 = v24 - 2;
      if (__OFSUB__(v24, 2))
      {
        __break(1u);
      }
      else
      {
        v26 = objc_msgSend(a2, a6[344]);
        v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v24 & 0xC000000000000001) == 0)
        {
          if ((v25 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v25 < *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v27 = (id *)*(id *)(v24 + 8 * v25 + 32);
LABEL_19:
            v28 = v27;
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            v15 = (UIViewController *)v28;
LABEL_22:
            v29 = a8;
            v30 = v15;
            specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(v30, 0);

            goto LABEL_24;
          }
          __break(1u);
          goto LABEL_46;
        }
      }
      v27 = (id *)MEMORY[0x18D75E3BC](v25, v24);
      goto LABEL_19;
    }
  }
  swift_unknownObjectRelease();
LABEL_21:
  if (v15)
    goto LABEL_22;
  v29 = a8;
  v30 = 0;
LABEL_24:
  v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v32 = (char *)a3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a3) + 0x70);
  swift_beginAccess();
  if (!*((_QWORD *)v32 + 2))
  {
LABEL_46:
    __break(1u);
    return;
  }
  v33 = (void *)*((_QWORD *)v32 + 1);
  swift_retain();
  v34 = swift_retain();
  specialized UIHostingController.prepareNavigationBar(in:navigationController:isRoot:)(v34, v33, a2, 0);
  swift_release();
  swift_release();
  v35 = 0;
  *(_QWORD *)((char *)a3 + *(_QWORD *)((*v31 & *a3) + 0x88)) = a4;
  if ((v42 & 1) != 0)
  {
    memcpy(__dst, __src, sizeof(__dst));
    NavigationState.StackContent.animationSeed.getter(&v45);
    v36 = v45;
    memcpy(__dst, v41, sizeof(__dst));
    NavigationState.StackContent.animationSeed.getter(&v43);
    v35 = v36 != -1 && (_DWORD)v43 != -1 && v36 == (_DWORD)v43;
  }
  -[UINavigationController pushViewController:animated:](a2, sel_pushViewController_animated_, a4, v35, v39);
  specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:)(a4, 0);
  a9(v35, a2, v29);

}

void specialized UIHostingController.promoteTitle(in:)(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;

  v3 = v2;
  v42 = a2;
  v40 = a1;
  v4 = type metadata accessor for Locale();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)&v2[direct field offset for UIHostingController.host];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v9 = v8;
  ViewRendererHost.preferenceValue<A>(_:)();

  v10 = 0;
  v11 = 0;
  v12 = v49;
  v13 = v50;
  v14 = v51;
  v15 = v52;
  v16 = v53;
  v44 = v54;
  v41 = v55;
  v43 = v56;
  if (v52 >= 2)
  {
    v49 = v40;
    v50 = (uint64_t)v42;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    outlined copy of Text?(v12, v13, v51, v52);
    outlined copy of Transaction?(v16);
    swift_retain();
    v45 = v14 & 1;
    v10 = Text.resolveString(in:with:idiom:)();
    v11 = v17;
    outlined consume of NavigationTitleStorage?(v12, v13, v14, v15, v16);
  }
  v39 = v16;
  v18 = objc_msgSend(v3, sel_navigationItem);
  if (v11)
  {
    v19 = (void *)MEMORY[0x18D75CC88](v10, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v18, sel_setTitle_, v19);

  v20 = v40;
  v21 = (uint64_t)v42;
  v49 = v40;
  v50 = (uint64_t)v42;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) != 0)
  {
    v36 = v14;
    if (v15 >= 2)
    {
      v23 = v14 & 1;
      v49 = v20;
      v50 = v21;
      v47 = 0;
      v48 = 0;
      v24 = v39;
      v35 = v7;
      outlined copy of NavigationTitleStorage?(v12, v13, v14, v15, v39);
      outlined copy of Text?(v12, v13, v14, v15);
      LOBYTE(v46) = v14 & 1;
      v25 = v14;
      v22 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      outlined consume of Text.Storage(v12, v13, v23);
      swift_bridgeObjectRelease();
      v26 = v24;
      v21 = (uint64_t)v42;
      v7 = v35;
      outlined consume of NavigationTitleStorage?(v12, v13, v25, v15, v26);
    }
    else
    {
      v22 = 0;
    }
    v27 = objc_msgSend(v3, sel_navigationItem);
    v42 = v22;
    objc_msgSend(v27, sel_setAccessibilityAttributedLabel_, v22);

    v49 = v20;
    v50 = v21;
    EnvironmentValues.locale.getter();
    v28 = Locale.bcp47LanguageCode.getter();
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
    v31 = objc_msgSend(v3, sel_navigationItem);
    if (v30)
    {
      v32 = (void *)MEMORY[0x18D75CC88](v28, v30);
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = 0;
    }
    v33 = v36;
    objc_msgSend(v31, sel_setAccessibilityLanguage_, v32);
    outlined consume of NavigationTitleStorage?(v12, v13, v33, v15, v39);

  }
  else
  {
    outlined consume of NavigationTitleStorage?(v12, v13, v14, v15, v39);
  }
}

void specialized closure #1 in closure #1 in UIHostingController.performRender()(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + direct field offset for UIHostingController.host);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
  v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

}

void specialized NavigationStackCoordinator.configureExtantHostingController(_:view:transaction:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;

  v4 = direct field offset for UIHostingController.host;
  v5 = objc_msgSend(*(id *)&a1[direct field offset for UIHostingController.host], sel_window);
  if (v5)
  {

    v6 = *(_QWORD **)&a1[v4];
    v7 = (_QWORD *)((char *)v6 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x118));
    v8 = *v7;
    *(_OWORD *)v7 = xmmword_187BFE310;
    v9 = v6;
    outlined consume of EnvironmentValues?(v8);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    if (!a2)
      return;
    goto LABEL_3;
  }
  v11 = *(id *)&a1[v4];
  specialized _UIHostingView.traitCollectionOverride.setter(objc_msgSend(a1, sel_traitCollection));

  if (a2)
  {
LABEL_3:
    v10 = swift_retain();
    specialized UIHostingController.setRootView(_:transaction:)(v10);
    swift_release();
  }
}

void specialized NavigationStackHostingController.replaceRootViewWhenSafe(view:transaction:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_viewIfLoaded);
  v5 = objc_msgSend(v4, sel_window);

  if (v5)
  {
    v6 = (_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x3C0));
    swift_beginAccess();
    *v6 = a1;
    swift_retain();
    swift_release();
  }
  else
  {
    v7 = direct field offset for UIHostingController.host;
    v8 = *(_QWORD **)((char *)v2 + direct field offset for UIHostingController.host);
    v9 = (_QWORD *)((char *)v8 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x60));
    swift_beginAccess();
    *v9 = a1;
    swift_retain_n();
    v10 = v8;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    v11 = *(id *)((char *)v2 + v7);
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

  }
}

uint64_t specialized NavigationHostingControllerCache_UIKit.updateUnusedRoots(_:transaction:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  void *v22;
  _QWORD *v23;
  id v24;
  id v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  id v31;
  uint64_t result;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[10];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (uint64_t *)(v1 + 16);
  v9 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v34 = v4;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_19:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v12);
    if (v16 < 3)
    {
      swift_beginAccess();
      v17 = *v8;
      if (*(_QWORD *)(*v8 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v16, 0), (v19 & 1) != 0))
      {
        v2 = *(void **)(*(_QWORD *)(v17 + 56) + 8 * v18);
        swift_endAccess();
        if (!*(_QWORD *)(a1 + 16))
          goto LABEL_30;
        v20 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
        if ((v21 & 1) == 0)
          goto LABEL_30;
        outlined init with copy of NavigationState.StackContent.PositionedView(*(_QWORD *)(a1 + 56) + 72 * v20, (uint64_t)v36);
        v22 = (void *)v36[0];
        v23 = v2;
        swift_retain();
        outlined destroy of NavigationState.StackContent.PositionedView((uint64_t)v36);
        v24 = objc_msgSend(v23, sel_viewIfLoaded);
        v25 = objc_msgSend(v24, sel_window);

        if (v25)
        {
          v26 = (void **)((char *)v23 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v23) + 0x3C0));
          swift_beginAccess();
          v2 = *v26;
          *v26 = v22;

          swift_release();
        }
        else
        {
          v35 = direct field offset for UIHostingController.host;
          v27 = *(_QWORD **)((char *)v23 + direct field offset for UIHostingController.host);
          v28 = (_QWORD *)((char *)v27 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v27) + 0x60));
          swift_beginAccess();
          *v28 = v22;
          swift_retain_n();
          v29 = v27;
          swift_release();
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
          v2 = v30;
          lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView, (uint64_t)&protocol conformance descriptor for _UIHostingView<A>);
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_release_n();
          v31 = *(id *)((char *)v23 + v35);
          v4 = v34;
          ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
          swift_release();

        }
      }
      else
      {
        swift_endAccess();
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v13 >= v9)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_18;
  v10 = v13 + 1;
  if (v13 + 1 >= v9)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v10);
  if (v14)
  {
LABEL_18:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_19;
  }
  v15 = v13 + 2;
  if (v15 >= v9)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  v33 = v2;
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t outlined destroy of NavigationHostingControllerCache_UIKit.Source(uint64_t a1)
{
  destroy for NavigationHostingControllerCache_UIKit.Source();
  return a1;
}

uint64_t outlined release of NavigationState.StackContent(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v7 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.Base(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of Set<NavigationStackHostingController<AnyView>>.Iterator?(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  return result;
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UIViewController?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for (UINavigationController, Set<NavigationStackHostingController<AnyView>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UINavigationController, Set<NavigationStackHostingController<AnyView>>))
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
    type metadata accessor for Set<NavigationStackHostingController<AnyView>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UINavigationController, Set<NavigationStackHostingController<AnyView>>));
  }
}

uint64_t sub_187801C24()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in UIHostingController.performRender()()
{
  return static Update.locked<A>(_:)();
}

uint64_t sub_187801C90()
{
  return swift_deallocObject();
}

uint64_t outlined copy of NavigationTitleStorage?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 != 1)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Transaction?(a5);
    return swift_retain();
  }
  return result;
}

void partial apply for specialized closure #1 in closure #1 in UIHostingController.performRender()()
{
  uint64_t v0;

  specialized closure #1 in closure #1 in UIHostingController.performRender()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_187801CF4()
{
  return swift_deallocObject();
}

void type metadata accessor for NavigationStackHostingController<AnyView>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for NavigationStackHostingController<AnyView>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationStackHostingController<AnyView>?);
  }
}

uint64_t destroy for NavigationHostingControllerCache_UIKit.Source()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

_QWORD *initializeWithCopy for NavigationHostingControllerCache_UIKit.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

_QWORD *assignWithCopy for NavigationHostingControllerCache_UIKit.Source(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

_QWORD *initializeWithTake for NavigationHostingControllerCache_UIKit.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

_QWORD *assignWithTake for NavigationHostingControllerCache_UIKit.Source(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationHostingControllerCache_UIKit.Source()
{
  return &type metadata for NavigationHostingControllerCache_UIKit.Source;
}

uint64_t *initializeBufferWithCopyOfBuffer for SelectionManagerBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  size_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  if (v9 > v7)
    v7 = v9;
  if (v7 <= 8)
    v10 = 8;
  else
    v10 = v7;
  if ((v8 & 0x1000F8) != 0 || (unint64_t)(v10 + 1) > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v10);
    if (v13 >= 3)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 2)
    {
      (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      v15 = 2;
LABEL_28:
      *((_BYTE *)v4 + v10) = v15;
      return v4;
    }
    if (v13 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v9);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      v15 = 1;
      goto LABEL_28;
    }
    *a1 = *a2;
    *((_BYTE *)a1 + v10) = 0;
    swift_bridgeObjectRetain();
  }
  return v4;
}

_QWORD *assignWithCopy for SelectionManagerBox(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v8;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a1 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 2)
    goto LABEL_19;
  if (v11 != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (!(*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
LABEL_19:
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v5);
LABEL_21:
  v13 = *((unsigned __int8 *)a2 + v10);
  if (v13 >= 3)
  {
    if (v10 <= 3)
      v14 = v10;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  if (v13 == 2)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
    v15 = 2;
LABEL_34:
    *((_BYTE *)a1 + v10) = v15;
    return a1;
  }
  if (v13 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    v15 = 1;
    goto LABEL_34;
  }
  *a1 = *a2;
  *((_BYTE *)a1 + v10) = 0;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *initializeWithTake for SelectionManagerBox(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= v7)
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v8;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = *((unsigned __int8 *)a2 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  if (v11 == 2)
  {
    (*(void (**)(_QWORD *, _QWORD *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = 2;
  }
  else if (v11 == 1)
  {
    if ((*(unsigned int (**)(_QWORD *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
      v13 = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v13 = 1;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    v13 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v10) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectionManagerBox(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(v3 + 64);
  if (v4)
    v6 = v5;
  else
    v6 = v5 + 1;
  if (v6 > v5)
    v5 = v6;
  v7 = 8;
  if (v5 > 8)
    v7 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_26;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v12 < 2)
    {
LABEL_26:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_26;
LABEL_19:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 254);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18780250C + 4 * byte_187C60238[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for SelectionManagerBox(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (v6)
    v8 = v7;
  else
    v8 = v7 + 1;
  if (v8 > v7)
    v7 = v8;
  if (v7 <= 8)
    v7 = 8;
  v9 = v7 + 1;
  if (a3 < 0xFE)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v11 = a2 - 254;
  if (v9 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for SelectionManagerBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (v3)
    v5 = v4;
  else
    v5 = v4 + 1;
  if (v5 > v4)
    v4 = v5;
  v6 = 8;
  if (v4 > 8)
    v6 = v4;
  if (*(unsigned __int8 *)(a1 + v6) < 3u)
    return *(unsigned __int8 *)(a1 + v6);
  if (v6 <= 3)
    v7 = v6;
  else
    v7 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187802770 + 4 * byte_187C60246[v7]))();
}

_BYTE *destructiveInjectEnumTag for SelectionManagerBox(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  char v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = v6;
  else
    v7 = v6 + 1;
  if (v7 > v6)
    v6 = v7;
  if (v6 <= 8)
    v8 = 8;
  else
    v8 = v6;
  if (a2 > 2)
  {
    if (v8 <= 3)
      v9 = ((a2 - 3) >> (8 * v8)) + 3;
    else
      v9 = 3;
    result[v8] = v9;
    if (v8 >= 4)
      v10 = 4;
    else
      v10 = v8;
    bzero(result, v8);
    __asm { BR              X10 }
  }
  result[v8] = a2;
  return result;
}

uint64_t type metadata accessor for SetToAnySelectionManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetToAnySelectionManager);
}

uint64_t type metadata accessor for OptionalToAnySelectionManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OptionalToAnySelectionManager);
}

uint64_t SelectionManagerBox.deselect(_:)(char *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(uint64_t *, _QWORD *, uint64_t, double);
  int EnumCaseMultiPayload;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  void (*v40)(_QWORD *, uint64_t);
  _QWORD *v41;
  uint64_t result;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t TupleTypeMetadata2;
  char *v63;
  uint64_t v64;

  v63 = a1;
  v4 = *(_QWORD *)(a2 + 16);
  v59 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v56 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v57 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v7);
  v60 = (char *)&v53 - v8;
  v9 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v58 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v53 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v53 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v53 - v23;
  v25 = *(_QWORD *)(a2 - 8);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (uint64_t *)((char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *(void (**)(uint64_t *, _QWORD *, uint64_t, double))(v25 + 16);
  v61 = v2;
  v31(v30, v2, a2, v28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v40 = *(void (**)(_QWORD *, uint64_t))(v25 + 8);
    v41 = v61;
    v40(v61, a2);
    v64 = *v30;
    type metadata accessor for Set();
    Set.remove(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v6);
    *v41 = v64;
    return swift_storeEnumTagMultiPayload();
  }
  if (EnumCaseMultiPayload != 1)
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v25 + 8))(v30, a2);
  (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v20, v30, v6);
  v33 = v59;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v16, v63, v4);
  v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  v54(v16, 0, 1, v4);
  v34 = v60;
  v35 = v9;
  v36 = &v60[*(int *)(TupleTypeMetadata2 + 48)];
  v55 = v35;
  v37 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v37(v60, v20, v6);
  v63 = v36;
  v37(v36, v16, v6);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v38(v34, 1, v4) == 1)
  {
    v39 = *(void (**)(char *, uint64_t))(v55 + 8);
    v39(v16, v6);
    v39(v20, v6);
    if (v38(v63, 1, v4) == 1)
    {
      v39(v34, v6);
LABEL_13:
      v52 = (char *)v61;
      (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v61, a2);
      v54(v52, 1, 1, v4);
      return swift_storeEnumTagMultiPayload();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v34, TupleTypeMetadata2);
  }
  v37(v58, v34, v6);
  v43 = v38(v63, 1, v4);
  v44 = v33;
  v45 = v58;
  v46 = v55;
  if (v43 == 1)
  {
    v47 = *(void (**)(char *, uint64_t))(v55 + 8);
    v47(v16, v6);
    v47(v20, v6);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v34, TupleTypeMetadata2);
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  v49 = v56;
  v48(v56, v63, v4);
  LODWORD(v63) = dispatch thunk of static Equatable.== infix(_:_:)();
  v50 = *(void (**)(char *, uint64_t))(v59 + 8);
  v50(v49, v4);
  v51 = *(void (**)(char *, uint64_t))(v46 + 8);
  v51(v16, v6);
  v51(v20, v6);
  v50(v58, v4);
  result = ((uint64_t (*)(char *, uint64_t))v51)(v60, v6);
  if ((v63 & 1) != 0)
    goto LABEL_13;
  return result;
}

uint64_t SelectionManagerBox.select(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t *v19;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - v12;
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v16, v14);
  v19 = (uint64_t *)((char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, _QWORD *, uint64_t, double))(v15 + 32))(v19, v3, a2, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v3, a1, v6);
    }
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v19, a2);
  }
  else
  {
    v23 = *v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    type metadata accessor for Set();
    Set.insert(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    *v3 = v23;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t SelectionManagerBox.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  char v17;
  uint64_t v19;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v15, v2, a1, v13);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v15, v5);
      v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v9, 1, v4) == 1;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a1);
      v17 = 0;
    }
  }
  else
  {
    v17 = Set.isEmpty.getter();
    swift_bridgeObjectRelease();
  }
  return v17 & 1;
}

Swift::Bool __swiftcall SelectionManagerBox.deselectAll()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t *v7;
  int EnumCaseMultiPayload;
  void (*v9)(uint64_t *, uint64_t);
  Swift::Bool v10;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v3 = v0;
  v4 = *(_QWORD *)(v0 - 8);
  v5 = ((double (*)())MEMORY[0x1E0C80A78])();
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, double))(v4 + 16))(v7, v2, v3, v5);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
      v9(v2, v3);
      v10 = 1;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 16) - 8) + 56))(v2, 1, 1);
      swift_storeEnumTagMultiPayload();
      v9(v7, v3);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v7, v3);
      return 0;
    }
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v2, v3);
    v13 = *v7;
    type metadata accessor for Set();
    Set.removeAll(keepingCapacity:)(0);
    *v2 = v13;
    swift_storeEnumTagMultiPayload();
    return 1;
  }
  return v10;
}

uint64_t SelectionManagerBox.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  unint64_t v32;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v30 - v12;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (_QWORD *)((char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v19 + 16))(v18, v3, a1, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v21 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v13, v18, v9);
      MEMORY[0x1E0C80A78](v21, v22);
      v23 = *(_QWORD *)(a1 + 24);
      v30[-2] = v5;
      v30[-1] = v23;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SelectionManagerBox.description.getter, (uint64_t)&v30[-4], MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEA968], v24, (uint64_t)&v31);
      if (v32)
        v25 = v31;
      else
        v25 = 0x63656C6573206F4ELL;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v18, v5);
      v31 = 0;
      v32 = 0xE000000000000000;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v25 = v31;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    v26 = *v18;
    v31 = 0;
    v32 = 0xE000000000000000;
    v30[0] = v26;
    v27 = type metadata accessor for Set();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB3D0], v27);
    v30[0] = Array.init<A>(_:)();
    v28 = type metadata accessor for Array();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF68], v28);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_bridgeObjectRelease();
    return v31;
  }
  return v25;
}

uint64_t closure #1 in SelectionManagerBox.description.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  result = String.init<A>(describing:)();
  *a2 = result;
  a2[1] = v7;
  return result;
}

uint64_t SetSelectionManagerProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  type metadata accessor for SelectionManagerBox(0, a2, a3, a4);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Projection.get(base:) in conformance SetSelectionManagerProjection<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return SetSelectionManagerProjection.get(base:)(*a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, a4);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance SetSelectionManagerProjection<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized SetSelectionManagerProjection.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalSelectionManagerProjection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized OptionalSelectionManagerProjection.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SetToAnySelectionManager.get(base:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = _setUpCast<A, B>(_:)();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t closure #1 in SetSelectionManagerProjection.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  getContiguousArrayStorageType<A>(for:)(a2, a2);
  v6 = *(_QWORD *)(a2 - 8);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, a2);
  _finalizeUninitializedArray<A>(_:)();
  v8 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v8);
  result = Set.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance SetToAnySelectionManager<A>@<X0>(uint64_t a1@<X8>)
{
  return SetToAnySelectionManager.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance SetToAnySelectionManager<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized SetToAnySelectionManager.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t OptionalToAnySelectionManager.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  _OWORD v18[2];
  uint64_t v19;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v18 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v19 = 0;
    memset(v18, 0, sizeof(v18));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v10, a2);
    _convertToAnyHashable<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, a2);
  }
  result = outlined init with take of AnyHashable?((uint64_t)v18, a3);
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalToAnySelectionManager<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OptionalToAnySelectionManager.get(base:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OptionalToAnySelectionManager<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized OptionalToAnySelectionManager.set(base:newValue:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void base witness table accessor for Equatable in OptionalToAnySelectionManager<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Equatable in SetToAnySelectionManager<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in SetToAnySelectionManager<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in OptionalToAnySelectionManager<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  else
    type metadata accessor for _ContiguousArrayStorage();
}

uint64_t specialized SetSelectionManagerProjection.set(base:newValue:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v34 - v14;
  v35 = a4;
  v17 = type metadata accessor for SelectionManagerBox(0, a3, a4, v16);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (uint64_t *)((char *)&v34 - v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v34 - v20, a2, v17, v19);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v24 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v12 + 32))(v15, v21, v11);
      MEMORY[0x1E0C80A78](v24, v25);
      v26 = v35;
      *(&v34 - 2) = a3;
      *(&v34 - 1) = v26;
      v27 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)(&v34 - 4), MEMORY[0x1E0DEDCE8], v27, v28, (uint64_t)&v36);
      swift_bridgeObjectRelease();
      v29 = v36;
      if (!v36)
        v29 = Set.init()();
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v21, a3);
      getContiguousArrayStorageType<A>(for:)(a3, a3);
      swift_allocObject();
      v31 = static Array._adoptStorage(_:count:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v32, v10, a3);
      _finalizeUninitializedArray<A>(_:)();
      v36 = v31;
      v33 = type metadata accessor for Array();
      MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v33);
      v29 = Set.init<A>(_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
    }
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v29 = *v21;
  }
  *a1 = v29;
  return result;
}

uint64_t specialized OptionalSelectionManagerProjection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v7 = type metadata accessor for SelectionManagerBox(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (_QWORD *)((char *)v18 - v10);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v13 + 32))(a1, v11, v12);
    }
    else
    {
      v17 = *(_QWORD *)(a3 - 8);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))(a1, v11, a3);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, a3);
    }
  }
  else
  {
    v18[1] = *v11;
    v16 = type metadata accessor for Set();
    MEMORY[0x18D75FFDC](MEMORY[0x1E0DEB3E0], v16);
    Collection.first.getter();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized SetToAnySelectionManager.set(base:newValue:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  _BYTE v36[40];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  char v42;

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v35[-v15];
  outlined init with copy of SelectionManagerBox<AnyHashable>(a2, (uint64_t)v40, v17, v18);
  if (v42)
  {
    if (v42 == 1)
    {
      outlined init with take of AnyHashable?((uint64_t)v40, (uint64_t)v38);
      outlined init with copy of AnyHashable?((uint64_t)v38, (uint64_t)v36);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v19 = swift_dynamicCast();
      v20 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v16, v19 ^ 1u, 1, a3);
      MEMORY[0x1E0C80A78](v20, v21);
      *(_QWORD *)&v35[-16] = a3;
      *(_QWORD *)&v35[-8] = a4;
      v22 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)&v35[-32], MEMORY[0x1E0DEDCE8], v22, v23, (uint64_t)&v37);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v16, v8);
      v24 = v37;
      if (!v37)
      {
        v25 = static Array._allocateUninitialized(_:)();
        if (MEMORY[0x18D75D078](v25, a3))
        {
          v24 = specialized Set.init(_nonEmptyArrayLiteral:)(v25, a3, a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v24 = MEMORY[0x1E0DEE9E8];
        }
      }
      result = outlined destroy of AnyHashable?((uint64_t)v38);
    }
    else
    {
      v38[0] = v40[0];
      v38[1] = v40[1];
      v39 = v41;
      outlined init with copy of AnyHashable((uint64_t)v38, (uint64_t)v36);
      v29 = swift_dynamicCast();
      v30 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v12, v29 ^ 1u, 1, a3);
      MEMORY[0x1E0C80A78](v30, v31);
      *(_QWORD *)&v35[-16] = a3;
      *(_QWORD *)&v35[-8] = a4;
      v32 = type metadata accessor for Set();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:), (uint64_t)&v35[-32], MEMORY[0x1E0DEDCE8], v32, v33, (uint64_t)&v37);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
      v24 = v37;
      if (!v37)
      {
        v34 = static Array._allocateUninitialized(_:)();
        if (MEMORY[0x18D75D078](v34, a3))
        {
          v24 = specialized Set.init(_nonEmptyArrayLiteral:)(v34, a3, a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v24 = MEMORY[0x1E0DEE9E8];
        }
      }
      result = outlined destroy of AnyHashable((uint64_t)v38);
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  v24 = _setDownCastConditional<A, B>(_:)();
  result = swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_17:
    *a1 = v24;
    return result;
  }
  v27 = static Array._allocateUninitialized(_:)();
  if (MEMORY[0x18D75D078](v27, a3))
  {
    v28 = specialized Set.init(_nonEmptyArrayLiteral:)(v27, a3, a4);
    result = swift_bridgeObjectRelease();
    *a1 = v28;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t specialized OptionalToAnySelectionManager.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v24;
  _OWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  char v29;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v25 - v13;
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v25 - v18;
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 8))(a1, v6, v17);
  outlined init with copy of SelectionManagerBox<AnyHashable>(a2, (uint64_t)v27, v20, v21);
  if (v29)
  {
    if (v29 == 1)
    {
      outlined init with take of AnyHashable?((uint64_t)v27, (uint64_t)v25);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v22 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v14, v22 ^ 1u, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v14, v6);
    }
    else
    {
      v25[0] = v27[0];
      v25[1] = v27[1];
      v26 = v28;
      swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v10, 0, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v10, v6);
    }
  }
  else
  {
    specialized Collection.first.getter(*(uint64_t *)&v27[0], (uint64_t)v25);
    swift_bridgeObjectRelease();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v24 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v19, v24 ^ 1u, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v19, v6);
  }
}

uint64_t outlined init with copy of SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  type metadata accessor for SelectionManagerBox<AnyHashable>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SetSelectionManagerProjection.set(base:newValue:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in SelectionManagerBox.description.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SelectionManagerBox.description.getter(a1, a2);
}

uint64_t type metadata accessor for SetSelectionManagerProjection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetSelectionManagerProjection);
}

void base witness table accessor for Equatable in SetSelectionManagerProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in SetSelectionManagerProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in OptionalSelectionManagerProjection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in SetToAnySelectionManager.set(base:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #2 in SetToAnySelectionManager.set(base:newValue:)(a1, a2);
}

ValueMetadata *type metadata accessor for CommandsList()
{
  return &type metadata for CommandsList;
}

ValueMetadata *type metadata accessor for CommandsList.Key()
{
  return &type metadata for CommandsList.Key;
}

void CommandsList.resolveOperations(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;

  v23 = type metadata accessor for CommandOperation();
  MEMORY[0x1E0C80A78](v23, v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CommandsList.Item.Value(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_QWORD *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for CommandsList.Item(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
  {
    v17 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v18 = *(_QWORD *)(v13 + 72);
    v21 = a1;
    v22 = a1 + 16;
    v20[1] = a2;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)v15, type metadata accessor for CommandsList.Item);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v10, type metadata accessor for CommandsList.Item.Value);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for CommandsList.Item);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        specialized Set._Variant.insert(_:)(&v24, *v10);
      }
      else
      {
        outlined init with take of CommandOperation((uint64_t)v10, (uint64_t)v6);
        v19 = *(void (**)(char *, uint64_t))&v6[*(int *)(v23 + 24)];
        if (v19)
          v19(v6, v21);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
      }
      v17 += v18;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance CommandsList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

void CommandsList.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for CommandsList.Item(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v10 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain();
    v11 = 0;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v9, (uint64_t)v7, type metadata accessor for CommandsList.Item);
      if (*(_QWORD *)&v7[*(int *)(v3 + 20)] > v11)
        v11 = *(_QWORD *)&v7[*(int *)(v3 + 20)];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for CommandsList.Item);
      v9 += v10;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  Hasher._combine(_:)(v11);
}

Swift::Int CommandsList.hashValue.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;

  v2 = type metadata accessor for CommandsList.Item(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, (uint64_t)v6, type metadata accessor for CommandsList.Item);
      if (*(_QWORD *)&v6[*(int *)(v2 + 20)] > v10)
        v10 = *(_QWORD *)&v6[*(int *)(v2 + 20)];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for CommandsList.Item);
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommandsList()
{
  uint64_t *v0;

  return CommandsList.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CommandsList(uint64_t a1)
{
  uint64_t *v1;

  CommandsList.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommandsList()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for CommandsList.Item(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  Hasher.init(_seed:)();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v9 = *(_QWORD *)(v2 + 72);
    swift_bridgeObjectRetain();
    v10 = 0;
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v8, (uint64_t)v5, type metadata accessor for CommandsList.Item);
      if (*(_QWORD *)&v5[*(int *)(v1 + 20)] > v10)
        v10 = *(_QWORD *)&v5[*(int *)(v1 + 20)];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for CommandsList.Item);
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommandsList(uint64_t *a1, uint64_t *a2)
{
  return specialized static CommandsList.== infix(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type CommandsList and conformance CommandsList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommandsList and conformance CommandsList;
  if (!lazy protocol witness table cache variable for type CommandsList and conformance CommandsList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandsList, &type metadata for CommandsList);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsList and conformance CommandsList);
  }
  return result;
}

uint64_t specialized static CommandsList.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for CommandsList.Item(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
    v17 = *(_QWORD *)(a2 + 16);
    if (v17)
    {
      v16 = 0;
      v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      goto LABEL_10;
    }
    return 1;
  }
  v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v24 = a2;
  v14 = a1 + v23;
  v15 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v16 = 0;
  do
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v14, (uint64_t)v12, type metadata accessor for CommandsList.Item);
    if (*(_QWORD *)&v12[*(int *)(v4 + 20)] > v16)
      v16 = *(_QWORD *)&v12[*(int *)(v4 + 20)];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for CommandsList.Item);
    v14 += v15;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  a2 = v24;
  v17 = *(_QWORD *)(v24 + 16);
  if (!v17)
    return !v16;
  v18 = v23;
LABEL_10:
  v19 = a2 + v18;
  v20 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v21 = 0;
  do
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v19, (uint64_t)v8, type metadata accessor for CommandsList.Item);
    if (*(_QWORD *)&v8[*(int *)(v4 + 20)] > v21)
      v21 = *(_QWORD *)&v8[*(int *)(v4 + 20)];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for CommandsList.Item);
    v19 += v20;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v16 == v21;
}

uint64_t type metadata accessor for CommandsList.Item(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandsList.Item);
}

uint64_t type metadata accessor for CommandsList.Item.Value(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandsList.Item.Value);
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandsList.Item.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = type metadata accessor for CommandOperation();
    v9 = *(int *)(v8 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(uint64_t *)((char *)a2 + v9);
    v13 = *(uint64_t *)((char *)a2 + v9 + 8);
    v14 = *((_BYTE *)a2 + v9 + 16);
    outlined copy of Text.Storage(v12, v13, v14);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    v10[16] = v14;
    *((_QWORD *)v10 + 3) = *((_QWORD *)v11 + 3);
    v15 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = type metadata accessor for UUID();
    v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
    v20 = *(int *)(v8 + 24);
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    if (*v22)
    {
      v23 = v22[1];
      *v21 = *v22;
      v21[1] = v23;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CommandsList.Item.Value(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for CommandOperation();
    v4 = a1 + *(int *)(v3 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
    v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v6 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    if (*(_QWORD *)(a1 + *(int *)(v3 + 24)))
      return swift_release();
  }
  return result;
}

_BYTE *initializeWithCopy for CommandsList.Item.Value(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = type metadata accessor for CommandOperation();
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *(_QWORD *)&a2[v7];
    v11 = *(_QWORD *)&a2[v7 + 8];
    v12 = a2[v7 + 16];
    outlined copy of Text.Storage(v10, v11, v12);
    *(_QWORD *)v8 = v10;
    *((_QWORD *)v8 + 1) = v11;
    v8[16] = v12;
    *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
    v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = &v8[v13];
    v15 = &v9[v13];
    v16 = type metadata accessor for UUID();
    v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    v18 = *(int *)(v6 + 24);
    v19 = &a1[v18];
    v20 = &a2[v18];
    if (*v20)
    {
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *assignWithCopy for CommandsList.Item.Value(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = type metadata accessor for CommandOperation();
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = *(_QWORD *)&a2[v7];
      v11 = *(_QWORD *)&a2[v7 + 8];
      v12 = a2[v7 + 16];
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)v8 = v10;
      *((_QWORD *)v8 + 1) = v11;
      v8[16] = v12;
      *((_QWORD *)v8 + 3) = *((_QWORD *)v9 + 3);
      v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v14 = &v8[v13];
      v15 = &v9[v13];
      v16 = type metadata accessor for UUID();
      v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      v18 = *(int *)(v6 + 24);
      v19 = &a1[v18];
      v20 = &a2[v18];
      if (*v20)
      {
        v21 = v20[1];
        *v19 = *v20;
        v19[1] = v21;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_BYTE *initializeWithTake for CommandsList.Item.Value(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = type metadata accessor for CommandOperation();
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = *(_OWORD *)&a2[v7 + 16];
    *v8 = *(_OWORD *)&a2[v7];
    v8[1] = v10;
    v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v12 = (char *)v8 + v11;
    v13 = &v9[v11];
    v14 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = *(int *)(v6 + 24);
    v16 = &a1[v15];
    v17 = (uint64_t *)&a2[v15];
    v18 = *v17;
    if (*v17)
    {
      v19 = v17[1];
      *v16 = v18;
      v16[1] = v19;
    }
    else
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_BYTE *assignWithTake for CommandsList.Item.Value(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = type metadata accessor for CommandOperation();
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = *(_OWORD *)&a2[v7 + 16];
      *v8 = *(_OWORD *)&a2[v7];
      v8[1] = v10;
      v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v12 = (char *)v8 + v11;
      v13 = &v9[v11];
      v14 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      v15 = *(int *)(v6 + 24);
      v16 = &a1[v15];
      v17 = (uint64_t *)&a2[v15];
      v18 = *v17;
      if (*v17)
      {
        v19 = v17[1];
        *v16 = v18;
        v16[1] = v19;
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v17;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CommandsList.Item.Value()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommandOperation();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandsList.Item(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v9 = type metadata accessor for CommandOperation();
      v10 = *(int *)(v9 + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = *(uint64_t *)((char *)a2 + v10);
      v14 = *(uint64_t *)((char *)a2 + v10 + 8);
      v15 = *((_BYTE *)a2 + v10 + 16);
      outlined copy of Text.Storage(v13, v14, v15);
      *(_QWORD *)v11 = v13;
      *((_QWORD *)v11 + 1) = v14;
      v11[16] = v15;
      *((_QWORD *)v11 + 3) = *((_QWORD *)v12 + 3);
      v16 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v17 = &v11[v16];
      v18 = &v12[v16];
      v19 = type metadata accessor for UUID();
      v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
      v21 = *(int *)(v9 + 24);
      v22 = (uint64_t *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      if (*v23)
      {
        v24 = v23[1];
        *v22 = *v23;
        v22[1] = v24;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v22 = *(_OWORD *)v23;
      }
      swift_storeEnumTagMultiPayload();
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for CommandsList.Item(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for CommandsList.Item.Value(0);
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for CommandOperation();
    v4 = a1 + *(int *)(v3 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
    v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v6 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    if (*(_QWORD *)(a1 + *(int *)(v3 + 24)))
      return swift_release();
  }
  return result;
}

_BYTE *initializeWithCopy for CommandsList.Item(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for CommandsList.Item.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = type metadata accessor for CommandOperation();
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *(_QWORD *)&a2[v8];
    v12 = *(_QWORD *)&a2[v8 + 8];
    v13 = a2[v8 + 16];
    outlined copy of Text.Storage(v11, v12, v13);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v13;
    *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
    v14 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = type metadata accessor for UUID();
    v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v15, v16, v17);
    v19 = *(int *)(v7 + 24);
    v20 = &a1[v19];
    v21 = &a2[v19];
    if (*v21)
    {
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

_BYTE *assignWithCopy for CommandsList.Item(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    v6 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = type metadata accessor for CommandOperation();
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = *(_QWORD *)&a2[v8];
      v12 = *(_QWORD *)&a2[v8 + 8];
      v13 = a2[v8 + 16];
      outlined copy of Text.Storage(v11, v12, v13);
      *(_QWORD *)v9 = v11;
      *((_QWORD *)v9 + 1) = v12;
      v9[16] = v13;
      *((_QWORD *)v9 + 3) = *((_QWORD *)v10 + 3);
      v14 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v15 = &v9[v14];
      v16 = &v10[v14];
      v17 = type metadata accessor for UUID();
      v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
      v19 = *(int *)(v7 + 24);
      v20 = &a1[v19];
      v21 = &a2[v19];
      if (*v21)
      {
        v22 = v21[1];
        *v20 = *v21;
        v20[1] = v22;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v20 = *(_OWORD *)v21;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

_BYTE *initializeWithTake for CommandsList.Item(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for CommandsList.Item.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = type metadata accessor for CommandOperation();
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = *(_OWORD *)&a2[v8 + 16];
    *v9 = *(_OWORD *)&a2[v8];
    v9[1] = v11;
    v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v13 = (char *)v9 + v12;
    v14 = &v10[v12];
    v15 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
    v16 = *(int *)(v7 + 24);
    v17 = &a1[v16];
    v18 = (uint64_t *)&a2[v16];
    v19 = *v18;
    if (*v18)
    {
      v20 = v18[1];
      *v17 = v19;
      v17[1] = v20;
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

_BYTE *assignWithTake for CommandsList.Item(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for CommandsList.Item.Value);
    v6 = type metadata accessor for CommandsList.Item.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = type metadata accessor for CommandOperation();
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = *(_OWORD *)&a2[v8 + 16];
      *v9 = *(_OWORD *)&a2[v8];
      v9[1] = v11;
      v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v13 = (char *)v9 + v12;
      v14 = &v10[v12];
      v15 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = *(int *)(v7 + 24);
      v17 = &a1[v16];
      v18 = (uint64_t *)&a2[v16];
      v19 = *v18;
      if (*v18)
      {
        v20 = v18[1];
        *v17 = v19;
        v17[1] = v20;
      }
      else
      {
        *(_OWORD *)v17 = *(_OWORD *)v18;
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandsList.Item()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878058E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandsList.Item.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CommandsList.Item()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187805930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandsList.Item.Value(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CommandsList.Item()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommandsList.Item.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void NavigationStackProxy.icon.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationStackProxy.iconUTType.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationStackProxy.hasPushedContent.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationStackProxy.pathTokenV2.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

Swift::Void __swiftcall NavigationStackProxy.popLast()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static NavigationStackProxy.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationStackProxy.restorePath(from:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void NavigationStackProxy.restorePathV2(from:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static NavigationStackProxy.Key.defaultValue.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static NavigationStackProxy.Key.reduce(value:nextValue:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.onNavigationProxyChange(perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t destroy for NavigationStackProxy(uint64_t a1)
{
  uint64_t *v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = (uint64_t *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 312);
  v7 = *(_OWORD *)(a1 + 280);
  v8 = *(_OWORD *)(a1 + 296);
  v6 = *(_OWORD *)(a1 + 248);
  outlined consume of NavigationState.Base(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9], v2[10], v2[11], v2[12], v2[13], v2[14], v2[15], v2[16], v2[17], v2[18],
    v2[19],
    v2[20],
    v2[21],
    v2[22],
    v2[23],
    v2[24],
    v2[25],
    v2[26],
    v2[27],
    v6,
    *((uint64_t *)&v6 + 1),
    *(_QWORD *)(a1 + 264),
    *(_QWORD *)(a1 + 272),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((unint64_t *)&v9 + 1),
    *(_QWORD *)(a1 + 328));
  if (v2[50] != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  v3 = (char *)(v2 + 56);
  swift_release();
  result = swift_release();
  v5 = *(_QWORD *)(a1 + 480);
  if (v5)
  {
    if (v5 == 1)
      goto LABEL_9;
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 456), *(_QWORD *)(a1 + 464), *v3);
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 488) != 1)
    swift_release();
  result = swift_release();
LABEL_9:
  if (*(_QWORD *)(a1 + 544))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 520), *(_QWORD *)(a1 + 528), v3[64]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v69 = *(_QWORD *)(a2 + 96);
  v70 = *(_QWORD *)(a2 + 88);
  v67 = *(_QWORD *)(a2 + 112);
  v68 = *(_QWORD *)(a2 + 104);
  v65 = *(_QWORD *)(a2 + 128);
  v66 = *(_QWORD *)(a2 + 120);
  v63 = *(_QWORD *)(a2 + 144);
  v64 = *(_QWORD *)(a2 + 136);
  v61 = *(_QWORD *)(a2 + 160);
  v62 = *(_QWORD *)(a2 + 152);
  v59 = *(_QWORD *)(a2 + 176);
  v60 = *(_QWORD *)(a2 + 168);
  v57 = *(_QWORD *)(a2 + 192);
  v58 = *(_QWORD *)(a2 + 184);
  v30 = *(_QWORD *)(a2 + 200);
  v31 = *(_QWORD *)(a2 + 208);
  v32 = *(_QWORD *)(a2 + 216);
  v33 = *(_QWORD *)(a2 + 224);
  v34 = *(_QWORD *)(a2 + 232);
  v35 = *(_QWORD *)(a2 + 240);
  v36 = *(_QWORD *)(a2 + 248);
  v37 = *(_QWORD *)(a2 + 256);
  v38 = *(_QWORD *)(a2 + 264);
  v39 = *(_QWORD *)(a2 + 272);
  v40 = *(_QWORD *)(a2 + 280);
  v41 = *(_QWORD *)(a2 + 288);
  v42 = *(_QWORD *)(a2 + 296);
  v43 = *(_QWORD *)(a2 + 304);
  v44 = *(_QWORD *)(a2 + 312);
  v45 = *(_QWORD *)(a2 + 320);
  v46 = *(_QWORD *)(a2 + 328);
  v47 = *(_QWORD *)(a2 + 336);
  v48 = *(_QWORD *)(a2 + 344);
  v49 = *(_QWORD *)(a2 + 352);
  v50 = *(_QWORD *)(a2 + 360);
  v51 = *(_QWORD *)(a2 + 368);
  v52 = *(_QWORD *)(a2 + 376);
  v53 = *(_QWORD *)(a2 + 384);
  v54 = *(_QWORD *)(a2 + 392);
  v55 = *(_QWORD *)(a2 + 400);
  v56 = *(_QWORD *)(a2 + 408);
  v6 = *(_QWORD *)(a2 + 32);
  v5 = v4;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  outlined copy of NavigationState.Base(v4, v6, v7, v8, v9, v10, v11, v12, v70, v69, v68, v67, v66, v65, v64, v63, v62, v61, v60,
    v59,
    v58,
    v57,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v70;
  *(_QWORD *)(a1 + 96) = v69;
  *(_QWORD *)(a1 + 104) = v68;
  *(_QWORD *)(a1 + 112) = v67;
  *(_QWORD *)(a1 + 120) = v66;
  *(_QWORD *)(a1 + 128) = v65;
  *(_QWORD *)(a1 + 136) = v64;
  *(_QWORD *)(a1 + 144) = v63;
  *(_QWORD *)(a1 + 152) = v62;
  *(_QWORD *)(a1 + 160) = v61;
  *(_QWORD *)(a1 + 168) = v60;
  *(_QWORD *)(a1 + 176) = v59;
  *(_QWORD *)(a1 + 184) = v58;
  *(_QWORD *)(a1 + 192) = v57;
  *(_QWORD *)(a1 + 200) = v30;
  *(_QWORD *)(a1 + 208) = v31;
  *(_QWORD *)(a1 + 216) = v32;
  *(_QWORD *)(a1 + 224) = v33;
  *(_QWORD *)(a1 + 232) = v34;
  *(_QWORD *)(a1 + 240) = v35;
  *(_QWORD *)(a1 + 248) = v36;
  *(_QWORD *)(a1 + 256) = v37;
  *(_QWORD *)(a1 + 264) = v38;
  *(_QWORD *)(a1 + 272) = v39;
  *(_QWORD *)(a1 + 280) = v40;
  *(_QWORD *)(a1 + 288) = v41;
  *(_QWORD *)(a1 + 296) = v42;
  *(_QWORD *)(a1 + 304) = v43;
  *(_QWORD *)(a1 + 312) = v44;
  *(_QWORD *)(a1 + 320) = v45;
  *(_QWORD *)(a1 + 328) = v46;
  *(_QWORD *)(a1 + 336) = v47;
  *(_QWORD *)(a1 + 344) = v48;
  *(_QWORD *)(a1 + 352) = v49;
  *(_QWORD *)(a1 + 360) = v50;
  *(_QWORD *)(a1 + 368) = v51;
  *(_QWORD *)(a1 + 376) = v52;
  *(_QWORD *)(a1 + 384) = v53;
  *(_QWORD *)(a1 + 392) = v54;
  *(_QWORD *)(a1 + 400) = v55;
  *(_QWORD *)(a1 + 408) = v56;
  if (*(_QWORD *)(a2 + 424) == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  }
  else
  {
    swift_weakCopyInit();
    v13 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = v13;
    swift_retain();
    swift_retain();
  }
  v14 = (char *)(a2 + 472);
  v15 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v15;
  v16 = (_OWORD *)(a1 + 456);
  v17 = (_OWORD *)(a2 + 456);
  v18 = *(_QWORD *)(a2 + 480);
  swift_retain();
  swift_retain();
  if (!v18)
  {
    v21 = *(_OWORD *)(a2 + 472);
    *v16 = *v17;
    *(_OWORD *)(a1 + 472) = v21;
    goto LABEL_10;
  }
  if (v18 != 1)
  {
    v22 = *(_QWORD *)(a2 + 456);
    v23 = *(_QWORD *)(a2 + 464);
    v24 = *v14;
    outlined copy of Text.Storage(v22, v23, *v14);
    *(_QWORD *)(a1 + 456) = v22;
    *(_QWORD *)(a1 + 464) = v23;
    *(_BYTE *)(a1 + 472) = v24;
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    swift_bridgeObjectRetain();
LABEL_10:
    v25 = *(_QWORD *)(a2 + 488);
    if (v25 != 1)
      v25 = swift_retain();
    *(_QWORD *)(a1 + 488) = v25;
    *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
    swift_retain();
    if (!*(_QWORD *)(a2 + 544))
      goto LABEL_7;
LABEL_13:
    v26 = *(_QWORD *)(a2 + 520);
    v27 = *(_QWORD *)(a2 + 528);
    v28 = *(_BYTE *)(a2 + 536);
    outlined copy of Text.Storage(v26, v27, v28);
    *(_QWORD *)(a1 + 520) = v26;
    *(_QWORD *)(a1 + 528) = v27;
    *(_BYTE *)(a1 + 536) = v28;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    return a1;
  }
  v19 = *(_OWORD *)(a2 + 472);
  *v16 = *v17;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)(a2 + 497);
  if (*(_QWORD *)(a2 + 544))
    goto LABEL_13;
LABEL_7:
  v20 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v20;
  return a1;
}

uint64_t assignWithCopy for NavigationStackProxy(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  v128 = *((_QWORD *)a2 + 4);
  v129 = *((_QWORD *)a2 + 3);
  v126 = *((_QWORD *)a2 + 6);
  v127 = *((_QWORD *)a2 + 5);
  v124 = *((_QWORD *)a2 + 8);
  v125 = *((_QWORD *)a2 + 7);
  v122 = *((_QWORD *)a2 + 10);
  v123 = *((_QWORD *)a2 + 9);
  v120 = *((_QWORD *)a2 + 12);
  v121 = *((_QWORD *)a2 + 11);
  v118 = *((_QWORD *)a2 + 14);
  v119 = *((_QWORD *)a2 + 13);
  v116 = *((_QWORD *)a2 + 16);
  v117 = *((_QWORD *)a2 + 15);
  v114 = *((_QWORD *)a2 + 18);
  v115 = *((_QWORD *)a2 + 17);
  v112 = *((_QWORD *)a2 + 20);
  v113 = *((_QWORD *)a2 + 19);
  v110 = *((_QWORD *)a2 + 22);
  v111 = *((_QWORD *)a2 + 21);
  v109 = *((_QWORD *)a2 + 23);
  v5 = *((_QWORD *)a2 + 25);
  v108 = *((_QWORD *)a2 + 24);
  v6 = *((_QWORD *)a2 + 26);
  v7 = *((_QWORD *)a2 + 27);
  v9 = *((_QWORD *)a2 + 28);
  v8 = *((_QWORD *)a2 + 29);
  v10 = *((_QWORD *)a2 + 31);
  v11 = *((_QWORD *)a2 + 32);
  v88 = *((_QWORD *)a2 + 30);
  v89 = *((_QWORD *)a2 + 33);
  v90 = *((_QWORD *)a2 + 34);
  v91 = *((_QWORD *)a2 + 35);
  v92 = *((_QWORD *)a2 + 36);
  v93 = *((_QWORD *)a2 + 37);
  v94 = *((_QWORD *)a2 + 38);
  v95 = *((_QWORD *)a2 + 39);
  v96 = *((_QWORD *)a2 + 40);
  v97 = *((_QWORD *)a2 + 41);
  v98 = *((_QWORD *)a2 + 42);
  v99 = *((_QWORD *)a2 + 43);
  v100 = *((_QWORD *)a2 + 44);
  v101 = *((_QWORD *)a2 + 45);
  v102 = *((_QWORD *)a2 + 46);
  v103 = *((_QWORD *)a2 + 47);
  v104 = *((_QWORD *)a2 + 48);
  v105 = *((_QWORD *)a2 + 49);
  v106 = *((_QWORD *)a2 + 50);
  v107 = *((_QWORD *)a2 + 51);
  outlined copy of NavigationState.Base(v129, v128, v127, v126, v125, v124, v123, v122, v121, v120, v119, v118, v117, v116, v115, v114, v113, v112, v111,
    v110,
    v109,
    v108,
    v5,
    v6,
    v7,
    v9,
    v8,
    v88,
    v10,
    v11,
    v89,
    v90,
    v91,
    v92,
    v93,
    v94,
    v95,
    v96,
    v97);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = v129;
  *(_QWORD *)(a1 + 32) = v128;
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 40) = v127;
  *(_QWORD *)(a1 + 48) = v126;
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v125;
  *(_QWORD *)(a1 + 64) = v124;
  *(_QWORD *)(a1 + 72) = v123;
  *(_QWORD *)(a1 + 80) = v122;
  v21 = *(_OWORD *)(a1 + 88);
  v22 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = v121;
  *(_QWORD *)(a1 + 96) = v120;
  *(_QWORD *)(a1 + 104) = v119;
  *(_QWORD *)(a1 + 112) = v118;
  v23 = *(_OWORD *)(a1 + 120);
  v24 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 120) = v117;
  *(_QWORD *)(a1 + 128) = v116;
  *(_QWORD *)(a1 + 136) = v115;
  *(_QWORD *)(a1 + 144) = v114;
  v25 = *(_OWORD *)(a1 + 152);
  v26 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 152) = v113;
  *(_QWORD *)(a1 + 160) = v112;
  *(_QWORD *)(a1 + 168) = v111;
  *(_QWORD *)(a1 + 176) = v110;
  v27 = *(_OWORD *)(a1 + 184);
  v28 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 184) = v109;
  *(_QWORD *)(a1 + 192) = v108;
  *(_QWORD *)(a1 + 200) = v5;
  v29 = *(_OWORD *)(a1 + 216);
  v30 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 208) = v6;
  *(_QWORD *)(a1 + 216) = v7;
  *(_QWORD *)(a1 + 224) = v9;
  *(_QWORD *)(a1 + 232) = v8;
  v31 = *(_OWORD *)(a1 + 248);
  v32 = *(_OWORD *)(a1 + 264);
  v33 = *(_OWORD *)(a1 + 280);
  v34 = *(_OWORD *)(a1 + 296);
  v35 = *(_OWORD *)(a1 + 312);
  v36 = *(_OWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 240) = v88;
  *(_QWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 256) = v11;
  *(_QWORD *)(a1 + 264) = v89;
  *(_QWORD *)(a1 + 272) = v90;
  *(_QWORD *)(a1 + 280) = v91;
  *(_QWORD *)(a1 + 288) = v92;
  *(_QWORD *)(a1 + 296) = v93;
  *(_QWORD *)(a1 + 304) = v94;
  *(_QWORD *)(a1 + 312) = v95;
  *(_QWORD *)(a1 + 320) = v96;
  *(_QWORD *)(a1 + 328) = v97;
  *(_QWORD *)(a1 + 336) = v98;
  *(_QWORD *)(a1 + 344) = v99;
  *(_QWORD *)(a1 + 352) = v100;
  *(_QWORD *)(a1 + 360) = v101;
  *(_QWORD *)(a1 + 368) = v102;
  *(_QWORD *)(a1 + 376) = v103;
  *(_QWORD *)(a1 + 384) = v104;
  *(_QWORD *)(a1 + 392) = v105;
  *(_QWORD *)(a1 + 400) = v106;
  *(_QWORD *)(a1 + 408) = v107;
  outlined consume of NavigationState.Base(v13, v14, v15, v16, v17, v18, v19, v20, v21, WORD4(v21), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((unint64_t *)&v35 + 1),
    v36);
  v37 = (__int128 *)(a1 + 416);
  v38 = a2 + 26;
  v39 = *((_QWORD *)a2 + 53);
  if (*(_QWORD *)(a1 + 424) == 1)
  {
    if (v39 == 1)
    {
      v40 = *v38;
      *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
      *v37 = v40;
    }
    else
    {
      swift_weakCopyInit();
      *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
      *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
      swift_retain();
      swift_retain();
    }
  }
  else if (v39 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 416);
    v41 = *((_QWORD *)a2 + 54);
    *v37 = *v38;
    *(_QWORD *)(a1 + 432) = v41;
  }
  else
  {
    swift_weakCopyAssign();
    *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 53);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 432) = *((_QWORD *)a2 + 54);
    swift_retain();
    swift_release();
  }
  v42 = (char *)(a1 + 472);
  v43 = (char *)a2 + 472;
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a2 + 55);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 448) = *((_QWORD *)a2 + 56);
  swift_retain();
  swift_release();
  v44 = (__int128 *)(a1 + 456);
  v45 = (__int128 *)((char *)a2 + 456);
  v46 = *(_QWORD *)(a1 + 480);
  v47 = *((_QWORD *)a2 + 60);
  if (v46 != 1)
  {
    if (v47 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 456);
      v52 = *(__int128 *)((char *)a2 + 472);
      v51 = *(__int128 *)((char *)a2 + 488);
      v53 = *v45;
      *(_OWORD *)(a1 + 497) = *(__int128 *)((char *)a2 + 497);
      *(_OWORD *)(a1 + 472) = v52;
      *(_OWORD *)(a1 + 488) = v51;
      *v44 = v53;
      goto LABEL_35;
    }
    if (v46)
    {
      if (v47)
      {
        v54 = *((_QWORD *)a2 + 57);
        v55 = *((_QWORD *)a2 + 58);
        v56 = *v43;
        outlined copy of Text.Storage(v54, v55, *v43);
        v57 = *(_QWORD *)(a1 + 456);
        v58 = *(_QWORD *)(a1 + 464);
        v59 = *v42;
        *(_QWORD *)(a1 + 456) = v54;
        *(_QWORD *)(a1 + 464) = v55;
        *v42 = v56;
        outlined consume of Text.Storage(v57, v58, v59);
        *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 456);
        v68 = *(__int128 *)((char *)a2 + 472);
        *v44 = *v45;
        *(_OWORD *)(a1 + 472) = v68;
      }
    }
    else if (v47)
    {
      v65 = *((_QWORD *)a2 + 57);
      v66 = *((_QWORD *)a2 + 58);
      v67 = *v43;
      outlined copy of Text.Storage(v65, v66, *v43);
      *(_QWORD *)(a1 + 456) = v65;
      *(_QWORD *)(a1 + 464) = v66;
      *v42 = v67;
      *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
      swift_bridgeObjectRetain();
    }
    else
    {
      v69 = *(__int128 *)((char *)a2 + 472);
      *v44 = *v45;
      *(_OWORD *)(a1 + 472) = v69;
    }
    v70 = (uint64_t *)(a1 + 488);
    v71 = *((_QWORD *)a2 + 61);
    if (*(_QWORD *)(a1 + 488) == 1)
    {
      if (v71 != 1)
      {
        *v70 = v71;
        swift_retain();
        goto LABEL_34;
      }
      v72 = 1;
    }
    else
    {
      if (v71 != 1)
      {
        *v70 = v71;
        swift_retain();
        swift_release();
        goto LABEL_34;
      }
      outlined destroy of Transaction(a1 + 488);
      v72 = *((_QWORD *)a2 + 61);
    }
    *v70 = v72;
LABEL_34:
    *(_BYTE *)(a1 + 496) = *((_BYTE *)a2 + 496);
    *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
    goto LABEL_35;
  }
  if (v47)
  {
    if (v47 == 1)
    {
      v48 = *v45;
      v49 = *(__int128 *)((char *)a2 + 472);
      v50 = *(__int128 *)((char *)a2 + 488);
      *(_OWORD *)(a1 + 497) = *(__int128 *)((char *)a2 + 497);
      *(_OWORD *)(a1 + 472) = v49;
      *(_OWORD *)(a1 + 488) = v50;
      *v44 = v48;
      goto LABEL_35;
    }
    v61 = *((_QWORD *)a2 + 57);
    v62 = *((_QWORD *)a2 + 58);
    v63 = *v43;
    outlined copy of Text.Storage(v61, v62, *v43);
    *(_QWORD *)(a1 + 456) = v61;
    *(_QWORD *)(a1 + 464) = v62;
    *v42 = v63;
    *(_QWORD *)(a1 + 480) = *((_QWORD *)a2 + 60);
    swift_bridgeObjectRetain();
  }
  else
  {
    v60 = *(__int128 *)((char *)a2 + 472);
    *v44 = *v45;
    *(_OWORD *)(a1 + 472) = v60;
  }
  v64 = *((_QWORD *)a2 + 61);
  if (v64 != 1)
    v64 = swift_retain();
  *(_QWORD *)(a1 + 488) = v64;
  *(_BYTE *)(a1 + 496) = *((_BYTE *)a2 + 496);
  *(_QWORD *)(a1 + 504) = *((_QWORD *)a2 + 63);
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  swift_retain();
LABEL_35:
  v73 = (_OWORD *)(a1 + 520);
  v74 = (__int128 *)((char *)a2 + 520);
  v75 = *((_QWORD *)a2 + 68);
  if (*(_QWORD *)(a1 + 544))
  {
    if (v75)
    {
      v76 = *((_QWORD *)a2 + 65);
      v77 = *((_QWORD *)a2 + 66);
      v78 = *((_BYTE *)a2 + 536);
      outlined copy of Text.Storage(v76, v77, v78);
      v79 = *(_QWORD *)(a1 + 520);
      v80 = *(_QWORD *)(a1 + 528);
      v81 = *(_BYTE *)(a1 + 536);
      *(_QWORD *)(a1 + 520) = v76;
      *(_QWORD *)(a1 + 528) = v77;
      *(_BYTE *)(a1 + 536) = v78;
      outlined consume of Text.Storage(v79, v80, v81);
      *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 520);
      v85 = *(__int128 *)((char *)a2 + 536);
      *v73 = *v74;
      *(_OWORD *)(a1 + 536) = v85;
    }
  }
  else if (v75)
  {
    v82 = *((_QWORD *)a2 + 65);
    v83 = *((_QWORD *)a2 + 66);
    v84 = *((_BYTE *)a2 + 536);
    outlined copy of Text.Storage(v82, v83, v84);
    *(_QWORD *)(a1 + 520) = v82;
    *(_QWORD *)(a1 + 528) = v83;
    *(_BYTE *)(a1 + 536) = v84;
    *(_QWORD *)(a1 + 544) = *((_QWORD *)a2 + 68);
    swift_bridgeObjectRetain();
  }
  else
  {
    v86 = *(__int128 *)((char *)a2 + 536);
    *v73 = *v74;
    *(_OWORD *)(a1 + 536) = v86;
  }
  return a1;
}

uint64_t outlined destroy of Transaction(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE13D0] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of NavigationTitleStorage(uint64_t a1)
{
  destroy for NavigationTitleStorage(a1);
  return a1;
}

uint64_t initializeWithTake for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x188uLL);
  if (*(_QWORD *)(a2 + 424) == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  }
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
  v4 = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 472) = v4;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)(a2 + 497);
  v5 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = v5;
  return a1;
}

uint64_t assignWithTake for NavigationStackProxy(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;

  v4 = (_OWORD *)(a1 + 264);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = (_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 408);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 120);
  v18 = *(_OWORD *)(a1 + 136);
  v19 = *(_OWORD *)(a1 + 152);
  v20 = *(_OWORD *)(a1 + 168);
  v21 = *(_OWORD *)(a1 + 184);
  v22 = *(_OWORD *)(a1 + 200);
  v23 = *(_OWORD *)(a1 + 216);
  v24 = *(_OWORD *)(a1 + 232);
  v25 = *(_OWORD *)(a1 + 248);
  v26 = *v4;
  v27 = v4[1];
  v28 = v4[2];
  v29 = v4[3];
  v30 = v4[4];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v31 = v5[1];
  v32 = v5[2];
  v33 = v5[3];
  v34 = v5[4];
  v35 = v5[5];
  v36 = v5[6];
  v37 = v5[7];
  v38 = v5[8];
  *v4 = *v5;
  v4[1] = v31;
  v4[2] = v32;
  v4[3] = v33;
  v4[4] = v34;
  v4[5] = v35;
  v4[6] = v36;
  v4[7] = v37;
  v4[8] = v38;
  *(_QWORD *)(a1 + 408) = v6;
  outlined consume of NavigationState.Base(v7, v8, v9, v10, v11, v12, v13, v14, v15, WORD4(v15), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((unint64_t *)&v29 + 1),
    v30);
  v39 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424) == 1)
  {
    if (v39 != 1)
    {
      swift_weakTakeInit();
      *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v39 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 416);
LABEL_6:
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    goto LABEL_8;
  }
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  swift_release();
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  swift_release();
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_release();
  v40 = v4 + 12;
  v41 = v5 + 12;
  v42 = *(_QWORD *)(a1 + 480);
  if (v42 == 1)
  {
LABEL_11:
    v44 = v5[13];
    *v40 = *v41;
    v4[13] = v44;
    v4[14] = v5[14];
    *(_OWORD *)((char *)v4 + 233) = *(_OWORD *)((char *)v5 + 233);
    goto LABEL_23;
  }
  v43 = *(_QWORD *)(a2 + 480);
  if (v43 == 1)
  {
    outlined destroy of NavigationTitleStorage((uint64_t)(v4 + 12));
    goto LABEL_11;
  }
  if (v42)
  {
    if (v43)
    {
      v45 = *((_BYTE *)v5 + 208);
      v46 = *(_QWORD *)(a1 + 456);
      v47 = *(_QWORD *)(a1 + 464);
      v48 = *((_BYTE *)v4 + 208);
      v4[12] = v5[12];
      *((_BYTE *)v4 + 208) = v45;
      outlined consume of Text.Storage(v46, v47, v48);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    outlined destroy of Text((uint64_t)(v4 + 12));
  }
  v49 = v5[13];
  *v40 = *v41;
  v4[13] = v49;
LABEL_17:
  v50 = (_QWORD *)(a1 + 488);
  v51 = *(_QWORD *)(a2 + 488);
  if (*(_QWORD *)(a1 + 488) != 1)
  {
    if (v51 != 1)
    {
      *v50 = v51;
      swift_release();
      goto LABEL_22;
    }
    outlined destroy of Transaction(a1 + 488);
    v51 = *(_QWORD *)(a2 + 488);
  }
  *v50 = v51;
LABEL_22:
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_release();
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
LABEL_23:
  if (!*(_QWORD *)(a1 + 544))
  {
LABEL_27:
    v56 = v5[17];
    v4[16] = v5[16];
    v4[17] = v56;
    return a1;
  }
  if (!*(_QWORD *)(a2 + 544))
  {
    outlined destroy of Text((uint64_t)(v4 + 16));
    goto LABEL_27;
  }
  v52 = *((_BYTE *)v5 + 272);
  v53 = *(_QWORD *)(a1 + 520);
  v54 = *(_QWORD *)(a1 + 528);
  v55 = *((_BYTE *)v4 + 272);
  v4[16] = v5[16];
  *((_BYTE *)v4 + 272) = v52;
  outlined consume of Text.Storage(v53, v54, v55);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackProxy(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 552))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 192) >> 57) & 0x38 | *(_QWORD *)(a1 + 192) & 7 | (*(_QWORD *)(a1 + 272) >> 51) & 0x1E00 | ((*(_QWORD *)(a1 + 272) & 7) << 6) & 0x1FFF | (*(_DWORD *)(a1 + 288) >> 3 << 13);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackProxy(uint64_t result, int a2, int a3)
{
  unint64_t v3;

  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 552) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_OWORD *)(result + 24) = 0u;
      result += 24;
      v3 = -a2;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_QWORD *)(result + 160) = 0;
      *(_QWORD *)(result + 168) = (v3 | (v3 << 57)) & 0x7000000000000007;
      *(_OWORD *)(result + 176) = 0u;
      *(_OWORD *)(result + 192) = 0u;
      *(_OWORD *)(result + 208) = 0u;
      *(_OWORD *)(result + 224) = 0u;
      *(_QWORD *)(result + 240) = 0;
      *(_QWORD *)(result + 248) = ((v3 >> 6) | (v3 << 51)) & 0xF000000000000007;
      *(_QWORD *)(result + 256) = 0;
      *(_QWORD *)(result + 264) = (v3 >> 10) & 0x3FFFF8;
      *(_OWORD *)(result + 272) = 0u;
      *(_OWORD *)(result + 288) = 0u;
      *(_OWORD *)(result + 304) = 0u;
      *(_OWORD *)(result + 320) = 0u;
      *(_OWORD *)(result + 336) = 0u;
      *(_OWORD *)(result + 352) = 0u;
      *(_OWORD *)(result + 368) = 0u;
      *(_QWORD *)(result + 384) = 0;
      return result;
    }
    *(_BYTE *)(result + 552) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationStackProxy()
{
  return &type metadata for NavigationStackProxy;
}

ValueMetadata *type metadata accessor for NavigationStackProxy.Key()
{
  return &type metadata for NavigationStackProxy.Key;
}

void NavigationStackProxy.title.getter()
{
  NavigationStackProxy.iconUTType.getter();
}

void NavigationStackProxy.subtitle.getter()
{
  NavigationStackProxy.iconUTType.getter();
}

void NavigationStackProxy.pathToken.getter()
{
  NavigationStackProxy.iconUTType.getter();
}

Swift::Void __swiftcall NavigationStackProxy.popToRoot()()
{
  NavigationStackProxy.popLast()();
}

void static NavigationStackProxy.Key.defaultValue.setter()
{
  NavigationStackProxy.restorePathV2(from:)();
}

uint64_t NestedDynamicProperties.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t NestedDynamicProperties.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t NestedDynamicProperties.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*NestedDynamicProperties.wrappedValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static NestedDynamicProperties._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  static DynamicPropertyCache.fields(of:)();
  _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance NestedDynamicProperties<A>()
{
  return static NestedDynamicProperties._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t getEnumTagSinglePayload for NestedDynamicProperties(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1878070C4 + 4 * byte_187C60790[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NestedDynamicProperties(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for NestedDynamicProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NestedDynamicProperties);
}

uint64_t StepperStyleConfiguration.onIncrement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t StepperStyleConfiguration.onDecrement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined copy of AppIntentExecutor?(v1);
  return v1;
}

uint64_t StepperStyleConfiguration.onEditingChanged.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return v1;
}

unint64_t instantiation function for generic protocol witness table for StepperStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleConfiguration.Label, &type metadata for StepperStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleConfiguration.Label, &type metadata for StepperStyleConfiguration.Label);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in StepperStyleConfiguration.Label()
{
  return &protocol witness table for StepperStyleConfiguration.Label;
}

uint64_t dispatch thunk of StepperStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration()
{
  return &type metadata for StepperStyleConfiguration;
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration.Label()
{
  return &type metadata for StepperStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for StepperStyleConfiguration.CurrentValueField()
{
  return &type metadata for StepperStyleConfiguration.CurrentValueField;
}

ValueMetadata *type metadata accessor for StepperBody()
{
  return &type metadata for StepperBody;
}

unint64_t lazy protocol witness table accessor for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>)
  {
    type metadata accessor for StepperStyleModifier<DefaultStepperStyle>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StepperStyleModifier<DefaultStepperStyle> and conformance StepperStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for StepperStyleModifier<DefaultStepperStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultStepperStyle and conformance DefaultStepperStyle();
    v4 = type metadata accessor for StepperStyleModifier(a1, (uint64_t)&type metadata for DefaultStepperStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for StepperStyleModifier<DefaultStepperStyle>);
  }
}

uint64_t type metadata accessor for StepperStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StepperStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for StepperBody(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in StepperStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t StepperStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t AssociatedConformanceWitness;
  void (*v19)(char *, uint64_t);
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v21 - v14;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v17;
  v22 = v16;
  v23 = *(_OWORD *)(a1 + 40);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v5 + 24))(v21, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for StepperStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in StepperStyleModifier<A>()
{
  return &protocol witness table for StepperStyleModifier<A>;
}

uint64_t associated type witness table accessor for View.Body : View in StepperStyleConfiguration.CurrentValueField()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> StepperStyleModifier<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for StepperStyleModifier<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in StepperBody()
{
  lazy protocol witness table accessor for type StepperBody and conformance StepperBody();
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for StepperStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18780780C + 4 * byte_187C607F0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for StepperStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_187807A0C()
{
  return MEMORY[0x1E0CE7508];
}

uint64_t sub_187807A18()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t ViewRendererHost.platformItemList.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), _QWORD, ValueMetadata *, uint64_t))(*(_QWORD *)(a2 + 8) + 32))(&v3, closure #1 in ViewRendererHost.platformItemList.getter, 0, &type metadata for PlatformItemList, a1);
  return v3;
}

uint64_t PlatformItemListViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  if ((*(_BYTE *)(v1 + 9) & 1) != 0)
    return 1;
  if (*(_BYTE *)(v1 + 8) != 1)
    return 0;
  swift_beginAccess();
  if ((*(_BYTE *)(a1 + 361) & 2) == 0)
    return 0;
  result = AGGraphGetWeakValue();
  if (result)
  {
    result = v4 & 1;
    *(_BYTE *)(v1 + 9) = v4 & 1;
  }
  return result;
}

uint64_t PlatformItemListViewGraph.readAndUpdate(graph:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *WeakValue;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  _QWORD v16[2];

  v2 = v1;
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
    return MEMORY[0x1E0DEE9D8];
  v6 = v5;
  v7 = *WeakValue;
  *(_BYTE *)(v2 + 8) = 1;
  swift_beginAccess();
  if ((*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    if ((*(_BYTE *)(v2 + 9) & 1) != 0)
      goto LABEL_8;
LABEL_7:
    if ((v6 & 1) == 0)
      return v7;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  if ((*(_BYTE *)(v2 + 9) & 1) == 0)
    goto LABEL_7;
LABEL_8:
  *(_WORD *)(v2 + 8) = 0;
  swift_beginAccess();
  if (MEMORY[0x18D760234](a1 + 200))
  {
    v8 = *(_QWORD *)(a1 + 208);
    ObjectType = swift_getObjectType();
    v10 = type metadata accessor for PlatformItemListHost();
    (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v8 + 16))(v16, v10, v10, ObjectType, v8);
    swift_unknownObjectRelease();
    if (v16[0])
    {
      v11 = v16[1];
      v12 = swift_getObjectType();
      v14 = MEMORY[0x1E0C80A78](v12, v13);
      (*(void (**)(uint64_t (*)(), double))(v11 + 8))(partial apply for closure #1 in PlatformItemListViewGraph.readAndUpdate(graph:), v14);
      swift_unknownObjectRelease();
    }
  }
  return v7;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance PlatformItemListViewGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a2 + 361) & 2) != 0)
  {
    result = specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
    *(_BYTE *)(v2 + 8) = 1;
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance PlatformItemListViewGraph()
{
  uint64_t *v0;
  uint64_t result;

  PreferencesOutputs.subscript.getter();
  result = AGCreateWeakAttribute();
  *v0 = result;
  return result;
}

void protocol witness for ViewGraphFeature.uninstantiate(graph:) in conformance PlatformItemListViewGraph()
{
  _QWORD *v0;

  *v0 = 0;
}

uint64_t protocol witness for ViewGraphFeature.isHiddenForReuseDidChange(graph:) in conformance PlatformItemListViewGraph(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 361) & 2) != 0)
  {
    result = swift_beginAccess();
    if ((*(_BYTE *)(a1 + 41) & 1) == 0)
      *(_BYTE *)(v1 + 9) = 1;
  }
  return result;
}

BOOL protocol witness for ViewGraphFeature.allowsAsyncUpdate(graph:) in conformance PlatformItemListViewGraph(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;

  v3 = *(_BYTE *)(v1 + 8) != 1
    || (swift_beginAccess(), (*(_BYTE *)(a1 + 361) & 2) == 0)
    || WeakAttribute.allowsAsyncUpdate()();
  return v3;
}

uint64_t protocol witness for ViewGraphFeature.update(graph:) in conformance PlatformItemListViewGraph(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(_BYTE *)(v1 + 9) == 1)
  {
    v2 = result;
    result = swift_beginAccess();
    if ((*(_BYTE *)(v2 + 361) & 2) != 0)
    {
      PlatformItemListViewGraph.readAndUpdate(graph:)(v2);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in ViewRendererHost.platformItemList.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  GraphHost.instantiateIfNeeded()();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  if (ViewGraph.subscript.getter())
    result = PlatformItemListViewGraph.readAndUpdate(graph:)(a1);
  else
    result = MEMORY[0x1E0DEE9D8];
  *a2 = result;
  return result;
}

unint64_t type metadata accessor for PlatformItemListHost()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PlatformItemListHost;
  if (!lazy cache variable for type metadata for PlatformItemListHost)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost);
  }
  return result;
}

uint64_t partial apply for closure #1 in PlatformItemListViewGraph.readAndUpdate(graph:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 8) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t __swift_memcpy10_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemListViewGraph()
{
  return &type metadata for PlatformItemListViewGraph;
}

char *PanGesture.init(allowedDirections:minimumDistance:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5;

  v5 = *result;
  if (one-time initialization token for all != -1)
    result = (char *)swift_once();
  *(double *)a2 = a3;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

double PanGesture.Value.translation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void PanGesture.Value.translation.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*PanGesture.Value.translation.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void PanGesture.Value.touchType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

_BYTE *PanGesture.Value.touchType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = *result;
  return result;
}

uint64_t (*PanGesture.Value.touchType.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

char *PanGesture.init(allowedDirections:minimumDistance:requiresTwoFingerTouch:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v5;

  v5 = *result;
  if (one-time initialization token for all != -1)
    result = (char *)swift_once();
  *(double *)a2 = a3;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t PanGesture.internalBody.getter()
{
  if (one-time initialization token for all != -1)
    swift_once();
  lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture();
  return Gesture.dependency(_:)();
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance PanGesture()
{
  if (one-time initialization token for all != -1)
    swift_once();
  lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture();
  return Gesture.dependency(_:)();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance PanGesture()
{
  lazy protocol witness table accessor for type PanGesture and conformance PanGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance PanGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double protocol witness for GestureStateProtocol.init() in conformance RawPanGesture.StateType@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

uint64_t closure #1 in RawPanGesture.body.getter(uint64_t a1, uint64_t *a2, char a3, double a4)
{
  uint64_t v5;
  char v6;
  uint64_t v8;
  char v9;
  double v10;
  char v11;

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v10 = a4;
  v11 = a3;
  v8 = v5;
  v9 = v6;
  RawPanGesture.update(state:childPhase:)(a1, (uint64_t)&v8);
  LOWORD(v10) = *(_WORD *)(a1 + 8);
  type metadata accessor for GesturePhase<()>();
  return GesturePhase.withValue<A>(_:)();
}

uint64_t RawPanGesture.update(state:childPhase:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::UInt *v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  Swift::UInt *v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  double *v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  Swift::UInt v80;
  char v81;
  _QWORD *v82;
  Swift::UInt v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  char v89;
  char v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v97;
  unint64_t v98;
  Swift::UInt *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  int v110;
  char v111;
  double v112;
  char v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  uint64_t v122;
  int v123;
  double v124;
  double v125;
  char v126;
  double v127;
  double v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  double v132;
  uint64_t v133;
  double v134;
  int64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  double v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;

  v3 = result;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  v136 = v4;
  if (v5 == 3 && v4 == 0)
  {
LABEL_87:
    *(_WORD *)(v3 + 8) = 768;
    return result;
  }
  v132 = *(double *)v2;
  if ((v5 - 1) >= 2)
  {
    if (v5)
      return result;
    if (!v4)
      return outlined consume of GesturePhase<[EventID : PanEvent]>(0, 0);
  }
  v123 = *(unsigned __int8 *)(v2 + 8);
  v133 = v4 + 64;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v4 + 64);
  outlined copy of GesturePhase<[EventID : PanEvent]>(v4, v5);
  v126 = 0;
  v10 = 0;
  v135 = (unint64_t)(v7 + 63) >> 6;
  v129 = 0;
  v130 = (_QWORD *)(v3 + 24);
  v131 = (_QWORD *)(v3 + 48);
  v127 = 0.0;
  v128 = 0.0;
  v124 = 0.0;
  v125 = 0.0;
  v11 = 0.0;
LABEL_11:
  v134 = v11;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v10 << 6);
LABEL_30:
    v17 = (Swift::UInt *)(*(_QWORD *)(v136 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(v136 + 56) + 96 * v13;
    v21 = *(unsigned __int8 *)(v20 + 32);
    v141 = *(double *)(v20 + 40);
    v22 = *(_QWORD *)(v20 + 48);
    if (v21 >= 2)
    {
      if (v21 == 3)
        goto LABEL_13;
      v126 = 1;
      if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        v126 = 1;
        if ((v65 & 1) != 0)
        {
          if (v141 >= v11)
            v11 = v141;
          v93 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
          v126 = 1;
          if ((v94 & 1) != 0)
          {
            v95 = v93;
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v97 = *(_QWORD *)v3;
            v142 = *(_QWORD **)v3;
            *(_QWORD *)v3 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              v97 = (uint64_t)v142;
            }
            specialized _NativeDictionary._delete(at:)(v95, v97);
            *(_QWORD *)v3 = v97;
            swift_release();
            swift_bridgeObjectRelease();
            v126 = 1;
          }
          goto LABEL_11;
        }
      }
    }
    else
    {
      v23 = *(_QWORD **)v20;
      v24 = *(_QWORD *)(v20 + 8);
      v26 = *(_QWORD *)(v20 + 16);
      v25 = *(_QWORD *)(v20 + 24);
      v27 = *(_QWORD *)(v20 + 56);
      v28 = *(_QWORD *)(v20 + 64);
      v29 = *(_QWORD *)(v20 + 72);
      v139 = *(_QWORD *)(v20 + 80);
      v30 = *(_BYTE *)(v20 + 88);
      v31 = *(_QWORD *)v3;
      if (*(_QWORD *)(*(_QWORD *)v3 + 16))
      {
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        if ((v33 & 1) != 0)
        {
          v66 = (double *)(*(_QWORD *)(v31 + 56) + 32 * v32);
          v114 = v66[1];
          v120 = v66[2];
          v121 = *v66;
          v119 = v66[3];
          if (v141 >= v11)
            v11 = v141;
          v122 = v28;
          v67 = v29;
          swift_retain();
          PanEvent.translation.getter();
          v117 = v69;
          v118 = v68;
          PanEvent.globalTranslation.getter();
          v115 = v71;
          v116 = v70;
          swift_retain();
          PanEvent.globalTranslation.getter();
          v73 = v72;
          v138 = v74;
          v142 = v23;
          v143 = v24;
          v144 = v26;
          v145 = v25;
          v146 = v21;
          v147 = v141;
          v148 = v22;
          v149 = v27;
          v150 = v122;
          v151 = v67;
          v152 = v139;
          v153 = v30;
          PanEvent.translation.getter();
          v76 = v75;
          v78 = v77;
          swift_release();
          v79 = swift_isUniquelyReferenced_nonNull_native();
          v80 = v19;
          v81 = v79;
          v142 = *(_QWORD **)v3;
          v82 = v142;
          *(_QWORD *)v3 = 0x8000000000000000;
          v83 = v80;
          v84 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v80);
          v86 = v82[2];
          v87 = (v85 & 1) == 0;
          v63 = __OFADD__(v86, v87);
          v88 = v86 + v87;
          if (v63)
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          v89 = v85;
          if (v82[3] >= v88)
          {
            if ((v81 & 1) == 0)
            {
              v98 = v84;
              specialized _NativeDictionary.copy()();
              v84 = v98;
              v91 = v142;
              if ((v89 & 1) != 0)
                goto LABEL_57;
              goto LABEL_65;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v88, v81);
            v84 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v83);
            if ((v89 & 1) != (v90 & 1))
              goto LABEL_99;
          }
          v91 = v142;
          if ((v89 & 1) != 0)
          {
LABEL_57:
            v92 = (_QWORD *)(v91[7] + 32 * v84);
            *v92 = v73;
            v92[1] = v138;
            v92[2] = v76;
            v92[3] = v78;
LABEL_67:
            v124 = v124 + v117 - v119;
            v125 = v125 + v118 - v120;
            v127 = v127 + v115 - v114;
            v128 = v128 + v116 - v121;
            *(_QWORD *)v3 = v91;
            swift_release();
            swift_bridgeObjectRelease();
            v63 = __OFADD__(v129++, 1);
            if (!v63)
              goto LABEL_11;
            goto LABEL_97;
          }
LABEL_65:
          v91[(v84 >> 6) + 8] |= 1 << v84;
          v99 = (Swift::UInt *)(v91[6] + 16 * v84);
          *v99 = v18;
          v99[1] = v83;
          v100 = (_QWORD *)(v91[7] + 32 * v84);
          *v100 = v73;
          v100[1] = v138;
          v100[2] = v76;
          v100[3] = v78;
          v101 = v91[2];
          v63 = __OFADD__(v101, 1);
          v102 = v101 + 1;
          if (v63)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v91[2] = v102;
          goto LABEL_67;
        }
      }
      v34 = v9;
      v35 = v10;
      swift_retain_n();
      PanEvent.globalTranslation.getter();
      v137 = v36;
      v37 = v27;
      v39 = v38;
      v142 = v23;
      v143 = v24;
      v144 = v26;
      v145 = v25;
      v146 = v21;
      v147 = v141;
      v148 = v22;
      v149 = v37;
      v150 = v28;
      v151 = v29;
      v152 = v139;
      v140 = v30;
      v153 = v30;
      PanEvent.translation.getter();
      v41 = v40;
      v43 = v42;
      swift_release();
      v44 = swift_isUniquelyReferenced_nonNull_native();
      v142 = *(_QWORD **)v3;
      v45 = v142;
      v46 = v3;
      *(_QWORD *)v3 = 0x8000000000000000;
      v47 = v18;
      v48 = v18;
      v49 = v19;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v19);
      v52 = v45[2];
      v53 = (v50 & 1) == 0;
      v54 = v52 + v53;
      if (__OFADD__(v52, v53))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      v55 = v50;
      if (v45[3] >= v54)
      {
        if ((v44 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v44);
        v56 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49);
        if ((v55 & 1) != (v57 & 1))
          goto LABEL_99;
        v51 = v56;
      }
      v10 = v35;
      v58 = v142;
      v9 = v34;
      if ((v55 & 1) != 0)
      {
        v59 = (_QWORD *)(v142[7] + 32 * v51);
        *v59 = v137;
        v59[1] = v39;
        v59[2] = v41;
        v59[3] = v43;
      }
      else
      {
        v142[(v51 >> 6) + 8] |= 1 << v51;
        v60 = (Swift::UInt *)(v58[6] + 16 * v51);
        *v60 = v47;
        v60[1] = v49;
        v61 = (_QWORD *)(v58[7] + 32 * v51);
        *v61 = v137;
        v61[1] = v39;
        v61[2] = v41;
        v61[3] = v43;
        v62 = v58[2];
        v63 = __OFADD__(v62, 1);
        v64 = v62 + 1;
        if (v63)
          goto LABEL_94;
        v58[2] = v64;
      }
      v3 = v46;
      *(_QWORD *)v46 = v58;
      swift_release();
      swift_bridgeObjectRelease();
      v11 = v134;
      if (!*(_BYTE *)(v46 + 9))
      {
        *(double *)(v46 + 16) = v141;
        *v130 = 0;
        v130[1] = 0;
        *(_BYTE *)(v46 + 40) = v140;
        *v131 = 0;
        v131[1] = 0;
        if (v132 == 0.0)
        {
          LOBYTE(v21) = 1;
LABEL_13:
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 9) = v21;
        }
      }
    }
  }
  v14 = v10 + 1;
  if (__OFADD__(v10, 1))
    goto LABEL_93;
  if (v14 < v135)
  {
    v15 = *(_QWORD *)(v133 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v135)
        goto LABEL_70;
      v15 = *(_QWORD *)(v133 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v135)
          goto LABEL_70;
        v15 = *(_QWORD *)(v133 + 8 * v10);
        if (!v15)
        {
          v16 = v14 + 3;
          if (v16 >= v135)
            goto LABEL_70;
          v15 = *(_QWORD *)(v133 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v10 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_95;
              if (v10 >= v135)
                goto LABEL_70;
              v15 = *(_QWORD *)(v133 + 8 * v10);
              ++v16;
              if (v15)
                goto LABEL_29;
            }
          }
          v10 = v16;
        }
      }
    }
LABEL_29:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
    goto LABEL_30;
  }
LABEL_70:
  result = swift_release();
  if (v129)
  {
    v103 = 1.0 / (double)v129;
    v104 = v127 * v103 + *(double *)(v3 + 72);
    *(double *)(v3 + 64) = v128 * v103 + *(double *)(v3 + 64);
    *(double *)(v3 + 72) = v104;
    if (!*(_BYTE *)(v3 + 9))
    {
      if (!v123)
        goto LABEL_87;
      result = CGSize.magnitude.getter();
      if (v132 <= v112)
      {
        LOBYTE(v142) = v123;
        result = CGSize.withinRange(axes:rangeCosine:)((unsigned __int8 *)&v142, 0.5);
        *(_BYTE *)(v3 + 8) = 0;
        if ((result & 1) != 0)
          v113 = 1;
        else
          v113 = 3;
        *(_BYTE *)(v3 + 9) = v113;
      }
    }
    v105 = v125 * v103;
    v106 = v124 * v103;
    v107 = v11 - *(double *)(v3 + 16);
    if (v107 > 0.0)
    {
      *(double *)(v3 + 16) = v11;
      v108 = 1.0 / v107;
      *(double *)(v3 + 48) = v105 * v108;
      *(double *)(v3 + 56) = v106 * v108;
    }
    v109 = v106 + *(double *)(v3 + 32);
    *(double *)(v3 + 24) = v105 + *(double *)(v3 + 24);
    *(double *)(v3 + 32) = v109;
  }
  if ((v126 & 1) != 0 && !*(_QWORD *)(*(_QWORD *)v3 + 16))
  {
    if (v11 - *(double *)(v3 + 16) > 0.2)
    {
      *(double *)(v3 + 16) = v11;
      *v131 = 0;
      v131[1] = 0;
    }
    v110 = *(unsigned __int8 *)(v3 + 9);
    *(_BYTE *)(v3 + 8) = 0;
    if (v110 == 1)
      v111 = 2;
    else
      v111 = 3;
    *(_BYTE *)(v3 + 9) = v111;
  }
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance RawPanGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_BYTE *)(result + 24) = v4;
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = partial apply for closure #1 in RawPanGesture.body.getter;
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

BOOL specialized static PanGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
  {
    return 0;
  }
  if (*(double *)(a1 + 40) == *(double *)(a2 + 40))
    return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return 0;
}

unint64_t lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture;
  if (!lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RawPanGesture, &type metadata for RawPanGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RawPanGesture and conformance RawPanGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PanGesture and conformance PanGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PanGesture and conformance PanGesture;
  if (!lazy protocol witness table cache variable for type PanGesture and conformance PanGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PanGesture, &type metadata for PanGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PanGesture and conformance PanGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PanGesture and conformance PanGesture;
  if (!lazy protocol witness table cache variable for type PanGesture and conformance PanGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PanGesture, &type metadata for PanGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PanGesture and conformance PanGesture);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in PanGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in PanGesture()
{
  return &protocol witness table for PanGesture;
}

ValueMetadata *type metadata accessor for PanGesture()
{
  return &type metadata for PanGesture;
}

uint64_t getEnumTagSinglePayload for PanGesture.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PanGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for PanGesture.Value()
{
  return &type metadata for PanGesture.Value;
}

uint64_t sub_187808EF8()
{
  lazy protocol witness table accessor for type RawPanGesture and conformance RawPanGesture();
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RawPanGesture()
{
  return &type metadata for RawPanGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in RawPanGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187808F54()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RawPanGesture.body.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in RawPanGesture.body.getter(a1, a2, *(_BYTE *)(v2 + 24), *(double *)(v2 + 16));
}

__n128 partial apply for implicit closure #1 in closure #1 in RawPanGesture.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_BYTE *)(v2 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  result = *(__n128 *)(v2 + 48);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

void type metadata accessor for GesturePhase<()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for GesturePhase<()>)
  {
    v0 = type metadata accessor for GesturePhase();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>);
  }
}

ValueMetadata *type metadata accessor for RawPanGesture.StateType.EventInfo()
{
  return &type metadata for RawPanGesture.StateType.EventInfo;
}

uint64_t initializeWithCopy for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for RawPanGesture.StateType(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for RawPanGesture.StateType(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RawPanGesture.StateType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RawPanGesture.StateType()
{
  return &type metadata for RawPanGesture.StateType;
}

uint64_t sub_187809244()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<RawPanGesture.StateType, [EventID : PanEvent], PanGesture.Value>, MultiEventListener<PanEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<RawPanGesture.StateType, [EventID : PanEvent], PanGesture.Value>, MultiEventListener<PanEvent>>, MEMORY[0x1E0CE2E88]);
}

unint64_t lazy protocol witness table accessor for type RawPanGesture.StateType and conformance RawPanGesture.StateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType;
  if (!lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RawPanGesture.StateType, &type metadata for RawPanGesture.StateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RawPanGesture.StateType and conformance RawPanGesture.StateType);
  }
  return result;
}

void type metadata accessor for MultiEventListener<PanEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for MultiEventListener<PanEvent>)
  {
    v4 = type metadata accessor for MultiEventListener(0, MEMORY[0x1E0CE78C8], MEMORY[0x1E0CE78B8], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for MultiEventListener<PanEvent>);
  }
}

void View.equatableProxy<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a5;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v17, v15);
  v20 = (char *)&v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, v6, a2, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v20, a2);
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  type metadata accessor for EquatableProxyView();
}

uint64_t sub_1878095A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

uint64_t EquatableView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t EquatableView.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*EquatableView.content.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t EquatableView.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static EquatableView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  type metadata accessor for EquatableView(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  v8 = type metadata accessor for EquatableView.Child(0, a3, a4, a5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableView<A>.Child, v8);
  _GraphValue.init<A>(_:)();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for EquatableView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EquatableView);
}

uint64_t type metadata accessor for EquatableView.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EquatableView.Child);
}

uint64_t EquatableView.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  uint64_t v13;

  v6 = type metadata accessor for EquatableView(0, a1, a2, a3);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - v9;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a4, v10, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance EquatableView<A>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return EquatableView.Child.value.getter(a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance EquatableView<A>.Child()
{
  return protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EquatableView<A>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableView<A>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance EquatableView<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static EquatableView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4]);
}

void static EquatableProxyView._makeView(view:inputs:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for EquatableProxyView.Child();
}

void sub_187809924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;

  MEMORY[0x1E0C80A78](a1, a2);
  v9 = *v7;
  *(_QWORD *)(v8 - 232) = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v8 - 220) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v8 - 124) = v9;
  *(_QWORD *)(v8 - 208) = v4;
  *(_QWORD *)(v8 - 200) = v6;
  *(_QWORD *)(v8 - 192) = v2;
  *(_QWORD *)(v8 - 184) = v5;
  type metadata accessor for EquatableProxyView();
}

void sub_187809984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;

  type metadata accessor for _GraphValue();
  *(_OWORD *)(v4 - 256) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v4 - 272) = *(_OWORD *)(v0 + 56);
  v5 = _GraphValue.value.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v2, 1, 1, v1);
  EquatableProxyView.Child.init(view:lastToken:)(v5, v3);
}

uint64_t sub_1878099F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>.Child, v1);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v3 - 208) = v0;
  *(_DWORD *)(v3 - 200) = v2;
  *(_QWORD *)(v3 - 192) = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v3 - 184) = v4;
  *(_QWORD *)(v3 - 176) = v5;
  *(_OWORD *)(v3 - 168) = *(_OWORD *)(v3 - 256);
  *(_OWORD *)(v3 - 152) = *(_OWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 136) = v6;
  *(_DWORD *)(v3 - 128) = *(_DWORD *)(v3 - 220);
  return static View.makeDebuggableView(view:inputs:)();
}

void EquatableProxyView.Child.init(view:lastToken:)(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for EquatableProxyView.Child();
}

uint64_t sub_187809ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 52);
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void EquatableProxyView.Child.view.getter()
{
  type metadata accessor for EquatableProxyView();
}

uint64_t sub_187809B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void EquatableProxyView.Child.updateValue()(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[9];
  uint64_t TupleTypeMetadata2;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1[2];
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v12[4] = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12[7] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v9);
  v10 = a1[4];
  v11 = a1[5];
  v17 = v3;
  v18 = v6;
  v19 = v10;
  v20 = v11;
  v12[3] = v11;
  type metadata accessor for EquatableProxyView();
}

void sub_187809C98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t OutputValue;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  _BYTE v26[96];

  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 200) = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  *(_QWORD *)(v6 - 152) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v6 - 144) = v3;
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v6 - 208) = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)(v6 - 240) = &v26[-v15];
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v26[-v20];
  *(_QWORD *)(v6 - 176) = v4;
  OutputValue = AGGraphGetOutputValue();
  *(_QWORD *)(v6 - 168) = v2;
  if (OutputValue)
  {
    v23 = v2 + *(int *)(v5 + 52);
    v24 = *(_QWORD *)(v6 - 144);
    v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 152) + 16);
    *(_QWORD *)(v6 - 248) = v25;
    v25(v21, v23, v24);
    *(_QWORD *)(v6 - 272) = v5;
    EquatableProxyView.Child.view.getter();
  }
  EquatableProxyView.Child.view.getter();
}

void sub_187809F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD v14[4];

  v5 = *(_QWORD *)(v4 - 184);
  v6 = *(_QWORD *)(v4 - 176);
  v7 = v3;
  v8 = *(_QWORD *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v2, v6);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  *(_QWORD *)(v4 - 216) = v9;
  v10 = v9(v2, v1);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14[2] = v7;
  v14[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>.Child, v7, v12);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v14, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v13);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v6);
  EquatableProxyView.Child.view.getter();
}

void sub_18780A034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(v5 - 160);
  v7 = *(_QWORD *)(v5 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v3 + *(int *)(v2 + 52), v1);
  (*(void (**)(uint64_t, uint64_t))(v5 - 216))(v3, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 - 152) + 40))(v0 + *(int *)(v4 + 52), v7, *(_QWORD *)(v5 - 144));
  JUMPOUT(0x18780A094);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EquatableProxyView<A, B>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance EquatableProxyView<A, B>()
{
  static EquatableProxyView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance EquatableProxyView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EquatableProxyView<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance EquatableProxyView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for EquatableProxyView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t View<>.equatable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, v3);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, a1);
}

_UNKNOWN **base witness table accessor for View in EquatableView<A>()
{
  return &protocol witness table for EquatableView<A>;
}

uint64_t getEnumTagSinglePayload for EquatableView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18780A3D8 + 4 * byte_187C60BB0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for EquatableView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for _AttributeBody in EquatableView<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for EquatableProxyView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for EquatableProxyView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18780A6D0 + 4 * byte_187C60BBE[v17 - 1]))();
}

void storeEnumTagSinglePayload for EquatableProxyView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

_UNKNOWN **base witness table accessor for View in EquatableProxyView<A, B>()
{
  return &protocol witness table for EquatableProxyView<A, B>;
}

void type metadata accessor for EquatableProxyView.Child()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for EquatableProxyView.Child()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EquatableProxyView.Child(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  const void *v14;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 4) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v13 = (void *)(((unint64_t)a1 + v7 + 4) & ~v7);
    v14 = (const void *)(((unint64_t)a2 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
    {
      memcpy(v13, v14, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v13, v14, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for EquatableProxyView.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  return result;
}

_DWORD *initializeWithCopy for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithCopy for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

_DWORD *initializeWithTake for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithTake for EquatableProxyView.Child(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for EquatableProxyView.Child(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = a2 - v6;
  if (a2 > v6)
  {
    v10 = v7 + ((v8 + 4) & ~v8);
    v11 = 8 * v10;
    if (v10 > 3)
      goto LABEL_7;
    v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (v12)
        goto LABEL_14;
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2)
          goto LABEL_21;
LABEL_7:
        v12 = *(unsigned __int8 *)(a1 + v10);
        if (!*(_BYTE *)(a1 + v10))
          goto LABEL_21;
LABEL_14:
        v14 = (v12 - 1) << v11;
        if (v10 > 3)
          v14 = 0;
        if ((_DWORD)v10)
        {
          if (v10 > 3)
            LODWORD(v10) = 4;
          __asm { BR              X12 }
        }
        return v6 + v14 + 1;
      }
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (*(_WORD *)(a1 + v10))
        goto LABEL_14;
    }
  }
LABEL_21:
  if (v5 < 2)
    return 0;
  v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v8 + 4) & ~v8);
  if (v16 >= 2)
    return v16 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for EquatableProxyView.Child(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  v11 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v12 = a3 >= v9;
  v13 = a3 - v9;
  if (v13 != 0 && v12)
  {
    if (v11 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_16;
      goto LABEL_23;
    }
    v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_16:
        v15 = ~v9 + a2;
        if (v11 < 4)
        {
          if ((_DWORD)v11)
          {
            v16 = v15 & ~(-1 << (8 * v11));
            bzero(a1, v11);
            if ((_DWORD)v11 == 3)
            {
              *a1 = v16;
              *((_BYTE *)a1 + 2) = BYTE2(v16);
            }
            else if ((_DWORD)v11 == 2)
            {
              *a1 = v16;
            }
            else
            {
              *(_BYTE *)a1 = v16;
            }
          }
        }
        else
        {
          bzero(a1, v11);
          *(_DWORD *)a1 = v15;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X13 }
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v9 < a2)
    goto LABEL_16;
  goto LABEL_23;
}

void sub_18780B1F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_18780B200()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void base witness table accessor for _AttributeBody in EquatableProxyView<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t destroy for ListTableCellModifier(uint64_t a1)
{
  int v2;

  if (*(_QWORD *)(a1 + 48) != 1)
    swift_release();
  v2 = *(unsigned __int8 *)(a1 + 150);
  if (v2 == 2)
    goto LABEL_6;
  if (v2 == 1)
  {
LABEL_7:
    swift_release();
    return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160));
  }
  if (!*(_BYTE *)(a1 + 150))
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    goto LABEL_7;
  }
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160));
}

uint64_t initializeWithCopy for ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  if (v5 == 1)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v5;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_retain();
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = a1 + 80;
  v7 = a2 + 80;
  v8 = *(unsigned __int8 *)(a2 + 150);
  if (v8 == 2)
  {
    v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v6, v7);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  else if (v8 == 1)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v6, v7);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  }
  *(_BYTE *)(a1 + 150) = v8;
  swift_retain();
  v11 = *(_QWORD *)(a2 + 152);
  v12 = *(_BYTE *)(a2 + 160);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(_QWORD *)(a1 + 152) = v11;
  *(_BYTE *)(a1 + 160) = v12;
  return a1;
}

uint64_t assignWithCopy for ListTableCellModifier(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v4 = *a2;
  v5 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v6 = a1 + 48;
  v7 = *(_QWORD *)(a1 + 48);
  v9 = (uint64_t *)(a2 + 3);
  v8 = *((_QWORD *)a2 + 6);
  if (v7 == 1)
  {
    if (v8 == 1)
    {
      v10 = *v9;
      *(_BYTE *)(v6 + 8) = *((_BYTE *)a2 + 56);
      *(_QWORD *)v6 = v10;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      swift_retain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of ListItemTint(v6);
    v11 = *((_BYTE *)v9 + 8);
    *(_QWORD *)v6 = *v9;
    *(_BYTE *)(v6 + 8) = v11;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v8;
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  if ((__int128 *)a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    v12 = *((unsigned __int8 *)a2 + 150);
    if (v12 == 2)
    {
      v13 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
      *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    }
    else if (v12 == 1)
    {
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    }
    else
    {
      v14 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v14;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      v15 = *((_DWORD *)a2 + 36);
      *(_WORD *)(a1 + 148) = *((_WORD *)a2 + 74);
      *(_DWORD *)(a1 + 144) = v15;
    }
    *(_BYTE *)(a1 + 150) = v12;
    swift_retain();
  }
  v16 = *((_QWORD *)a2 + 19);
  v17 = *((_BYTE *)a2 + 160);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = v16;
  *(_BYTE *)(a1 + 160) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

__n128 __swift_memcpy161_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a1 + 48;
  v7 = a2 + 48;
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) == 1)
    goto LABEL_4;
  if (v6 == 1)
  {
    outlined destroy of ListItemTint(v5);
LABEL_4:
    *(_QWORD *)v5 = *(_QWORD *)v7;
    *(_BYTE *)(v5 + 8) = *(_BYTE *)(v7 + 8);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = v6;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 143) = *(_QWORD *)(a2 + 143);
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
  }
  v10 = *(_BYTE *)(a2 + 160);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListTableCellModifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 161))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ListTableCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 161) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListTableCellModifier()
{
  return &type metadata for ListTableCellModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ListTableCellModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ListTableCellModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[152];
  uint64_t v45;
  char v46;

  v2 = v1;
  v43 = a1;
  v42 = type metadata accessor for LegacyModifier(0);
  MEMORY[0x1E0C80A78](v42, v3);
  v5 = (double *)((char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for IOSMultiColumnModifier(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>();
  MEMORY[0x1E0C80A78](v40, v10);
  v41 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, v12, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  MEMORY[0x1E0C80A78](v13, v14);
  v39 = (uint64_t)&v37 - v15;
  v37 = *(_OWORD *)v2;
  v16 = *(_QWORD *)(v2 + 16);
  v17 = *(_QWORD *)(v2 + 24);
  v18 = *(_BYTE *)(v2 + 32);
  v19 = *(_QWORD *)(v2 + 40);
  v20 = *(_QWORD *)(v2 + 48);
  v21 = *(_BYTE *)(v2 + 56);
  v22 = *(_QWORD *)(v2 + 64);
  v23 = *(_BYTE *)(v2 + 72);
  v38 = v2 + 80;
  outlined init with copy of AccessibilityScrollableContext(v2 + 80, (uint64_t)(v9 + 80));
  *(_OWORD *)v9 = v37;
  *((_QWORD *)v9 + 2) = v16;
  *((_QWORD *)v9 + 3) = v17;
  v9[32] = v18;
  *((_QWORD *)v9 + 5) = v19;
  *((_QWORD *)v9 + 6) = v20;
  v9[56] = v21;
  *((_QWORD *)v9 + 8) = v22;
  v9[72] = v23;
  v24 = (uint64_t *)&v9[*(int *)(v6 + 40)];
  *v24 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v25 = &v9[*(int *)(v6 + 44)];
  *(_QWORD *)v25 = swift_getKeyPath();
  v25[8] = 0;
  v27 = *(double *)v2;
  v26 = *(double *)(v2 + 8);
  v29 = *(double *)(v2 + 16);
  v28 = *(double *)(v2 + 24);
  LOBYTE(v25) = *(_BYTE *)(v2 + 32);
  outlined init with copy of ListTableCellModifier(v2, (uint64_t)v44);
  if ((v25 & 1) != 0)
  {
    v30 = v45;
    v31 = v46;
    outlined copy of Transaction?(v20);
    outlined copy of Environment<Bool>.Content(v30, v31);
    v26 = specialized Environment.wrappedValue.getter(v30, v31);
    v28 = specialized Environment.wrappedValue.getter(v30, v31);
    outlined consume of Environment<Bool>.Content(v30, v31);
    v27 = 6.0;
    v29 = 6.0;
  }
  else
  {
    outlined copy of Transaction?(v20);
  }
  outlined destroy of ListTableCellModifier((uint64_t)v44);
  v32 = *(_QWORD *)(v2 + 64);
  outlined init with copy of AccessibilityScrollableContext(v38, (uint64_t)(v5 + 5));
  *v5 = v27;
  v5[1] = v26;
  v5[2] = v29;
  v5[3] = v28;
  *((_QWORD *)v5 + 4) = v32;
  v33 = (uint64_t *)((char *)v5 + *(int *)(v42 + 28));
  *v33 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v34 = v41;
  outlined init with take of TableCellFormula((uint64_t)v9, v41, type metadata accessor for IOSMultiColumnModifier);
  outlined init with take of TableCellFormula((uint64_t)v5, v34 + *(int *)(v40 + 52), type metadata accessor for LegacyModifier);
  v35 = v39;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v39, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>);
  return outlined init with take of ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(v35, v43);
}

uint64_t type metadata accessor for LegacyModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LegacyModifier);
}

uint64_t type metadata accessor for IOSMultiColumnModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for IOSMultiColumnModifier);
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>)
  {
    type metadata accessor for IOSMultiColumnModifier(255);
    type metadata accessor for LegacyModifier(255);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<ListTableCellModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<ListTableCellModifier>)
  {
    lazy protocol witness table accessor for type ListTableCellModifier and conformance ListTableCellModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ListTableCellModifier>);
  }
}

void *LegacyModifier.body(content:)@<X0>(void *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v23[4];
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t KeyPath;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[13];
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[8];
  _BYTE v56[72];
  _QWORD v57[38];
  char v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;

  v2 = v1;
  v37 = a1;
  v3 = type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v23[-v9];
  KeyPath = swift_getKeyPath();
  v11 = *v1;
  v12 = v1[1];
  v13 = v1[2];
  v14 = v1[3];
  v35 = static Edge.Set.all.getter();
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v15 = v57[37];
  v16 = v58;
  v17 = v59;
  v32 = v60;
  v31 = v61;
  v30 = v62;
  v29 = v63;
  v28 = v64;
  v27 = v65;
  v26 = v66;
  v25 = v67;
  v24 = v68;
  v33 = v70;
  v34 = v69;
  type metadata accessor for LegacyModifier(0);
  specialized Environment.wrappedValue.getter((uint64_t)v6);
  outlined init with copy of UICellConfigurationState?((uint64_t)v6, (uint64_t)v10);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  v18 = type metadata accessor for UICellConfigurationState();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v18) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v10, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v20 = 0;
  }
  else
  {
    v20 = UICellConfigurationState.isSelected.getter();
    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v10, v18);
  }
  *(_QWORD *)&v42 = KeyPath;
  *((_QWORD *)&v42 + 1) = v11;
  *(_QWORD *)&v43 = v12;
  *((_QWORD *)&v43 + 1) = v13;
  *(_QWORD *)&v44 = v14;
  WORD4(v44) = 768;
  LOBYTE(v45) = v35;
  *((_QWORD *)&v45 + 1) = v11;
  *(_QWORD *)&v46 = v12;
  *((_QWORD *)&v46 + 1) = v13;
  *(_QWORD *)&v47 = v14;
  BYTE8(v47) = 0;
  *(_QWORD *)&v48 = v15;
  BYTE8(v48) = v16;
  *(_QWORD *)&v49 = v17;
  BYTE8(v49) = v32;
  *(_QWORD *)&v50 = v31;
  BYTE8(v50) = v30;
  *(_QWORD *)&v51 = v29;
  BYTE8(v51) = v28;
  *(_QWORD *)&v52 = v27;
  BYTE8(v52) = v26;
  *(_QWORD *)&v53 = v25;
  BYTE8(v53) = v24;
  *(_QWORD *)&v54 = v34;
  *((_QWORD *)&v54 + 1) = v33;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)(v2 + 5), (uint64_t)v56);
  v55[0] = v20 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v56, (uint64_t)v57);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v57, (uint64_t)&v41);
  v40[10] = v52;
  v40[11] = v53;
  v40[12] = v54;
  v40[6] = v48;
  v40[7] = v49;
  v40[8] = v50;
  v40[9] = v51;
  v40[2] = v44;
  v40[3] = v45;
  v40[4] = v46;
  v40[5] = v47;
  v40[0] = v42;
  v40[1] = v43;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v42);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v57);
  v21 = 4;
  if (!v55[0])
    v21 = 0;
  v57[0] = v21;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v38, v39, 1, (uint64_t)v57);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>);
  swift_release();
  return memcpy(v37, v57, 0x128uLL);
}

uint64_t key path getter for EnvironmentValues.cellConfiguration : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CellConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<CellConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.cellConfiguration : EnvironmentValues(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  v2 = type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5, v6);
  return EnvironmentValues.cellConfiguration.setter((uint64_t)v5);
}

double IOSMultiColumnModifier.insets.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  char v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for IOSMultiColumnModifier(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(double *)v0;
  v10 = *(_BYTE *)(v0 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v0, (uint64_t)v8, v11);
  if ((v10 & 1) != 0)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v4);
    v12 = &v8[*(int *)(v5 + 44)];
    v13 = *(_QWORD *)v12;
    v14 = v12[8];
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v12, v14);
    specialized Environment.wrappedValue.getter(v13, v14);
    outlined consume of Environment<Bool>.Content(v13, v14);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for IOSMultiColumnModifier);
    if (v4[*(int *)(v1 + 20)] - 2 >= 2)
    {
      if (v4[*(int *)(v1 + 20)])
        v9 = *(double *)&v4[*(int *)(v1 + 36) + 24] + -1.0;
      else
        v9 = 6.0;
    }
    else
    {
      v9 = *(double *)&v4[*(int *)(v1 + 36) + 24];
    }
    v15 = (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration;
    v16 = (uint64_t)v4;
  }
  else
  {
    v15 = type metadata accessor for IOSMultiColumnModifier;
    v16 = (uint64_t)v8;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v16, v15);
  return v9;
}

uint64_t IOSMultiColumnModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v58[4];
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  uint64_t KeyPath;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD v90[53];
  _QWORD v91[53];
  _QWORD v92[38];
  char v93[8];
  _BYTE v94[73];
  _BYTE v95[7];
  char v96;
  _BYTE v97[7];
  char v98;
  _BYTE v99[7];
  char v100;
  _BYTE v101[7];
  char v102;
  _BYTE v103[7];
  char v104;
  _BYTE v105[7];
  char v106;
  _BYTE v107[7];
  _BYTE v108[7];
  _BYTE v109[7];
  _BYTE v110[11];
  __int16 v111;
  _BYTE v112[7];
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  uint64_t v116[50];
  unsigned __int8 v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;

  v2 = v1;
  v87 = a1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v84 = &v58[-v5];
  v6 = type metadata accessor for IOSMultiColumnModifier(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v74 = &v58[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for CellConfiguration();
  MEMORY[0x1E0C80A78](v9, v10);
  v73 = &v58[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v58[-v14];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v58[-v18];
  KeyPath = swift_getKeyPath();
  v20 = v2 + *(int *)(v6 + 40);
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v78 = *(_QWORD *)&v19[*(int *)(v9 + 36) + 56];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  v76 = swift_getKeyPath();
  v21 = IOSMultiColumnModifier.insets.getter();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  EdgeInsets.init(_all:)();
  v77 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = IOSMultiColumnModifier.insets.getter();
  v81 = v36;
  v82 = v35;
  v79 = v38;
  v80 = v37;
  v75 = static Edge.Set.all.getter();
  if (*(_BYTE *)(v2 + 72) == 1)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v15);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  }
  v89 = v20;
  static Alignment.center.getter();
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v88 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v64 = v116[49];
  v65 = v118;
  v60 = v119;
  v61 = v117;
  v39 = v121;
  v66 = v120;
  v67 = v122;
  v40 = v123;
  v41 = v125;
  v68 = v124;
  v69 = v126;
  v42 = v127;
  v71 = v129;
  v72 = v128;
  v70 = swift_getKeyPath();
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v43 = *(_QWORD *)&v19[*(int *)(v9 + 36) + 8];
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  v44 = v74;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v74, type metadata accessor for IOSMultiColumnModifier);
  v85 = v2;
  v86 = v9;
  if (!v43)
  {
    v43 = *((_QWORD *)v44 + 6);
    v88 = v44[56];
    outlined copy of Transaction?(v43);
  }
  v59 = v115;
  v62 = v114;
  v63 = v113;
  v106 = v61;
  v104 = v60;
  v102 = v39;
  v100 = v40;
  v98 = v41;
  v96 = v42;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v44, type metadata accessor for IOSMultiColumnModifier);
  v45 = v73;
  specialized Environment.wrappedValue.getter((uint64_t)v73);
  v46 = v84;
  outlined init with copy of UICellConfigurationState?((uint64_t)v45, (uint64_t)v84);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  v47 = type metadata accessor for UICellConfigurationState();
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v46, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v49 = 0;
  }
  else
  {
    v49 = UICellConfigurationState.isSelected.getter();
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v46, v47);
  }
  v92[0] = KeyPath;
  v92[1] = v78;
  LOBYTE(v92[2]) = v59;
  *(_DWORD *)((char *)&v92[2] + 1) = *(_DWORD *)v112;
  HIDWORD(v92[2]) = *(_DWORD *)&v112[3];
  v92[3] = v76;
  *(double *)&v92[4] = v21;
  v92[5] = v23;
  v92[6] = v25;
  v92[7] = v27;
  LOWORD(v92[8]) = 768;
  *(_DWORD *)((char *)&v92[8] + 2) = *(_DWORD *)&v110[7];
  HIWORD(v92[8]) = v111;
  LOBYTE(v92[9]) = 2;
  *(_DWORD *)((char *)&v92[9] + 1) = *(_DWORD *)v110;
  HIDWORD(v92[9]) = *(_DWORD *)&v110[3];
  v92[10] = v77;
  v92[11] = v30;
  v92[12] = v32;
  v92[13] = v34;
  LOBYTE(v92[14]) = v62;
  *(_DWORD *)((char *)&v92[14] + 1) = *(_DWORD *)v109;
  HIDWORD(v92[14]) = *(_DWORD *)&v109[3];
  LOBYTE(v92[15]) = v75;
  HIDWORD(v92[15]) = *(_DWORD *)&v108[3];
  *(_DWORD *)((char *)&v92[15] + 1) = *(_DWORD *)v108;
  *(double *)&v92[16] = v82;
  v92[17] = v81;
  v92[18] = v80;
  v92[19] = v79;
  LOBYTE(v92[20]) = v63;
  HIDWORD(v92[20]) = *(_DWORD *)&v107[3];
  *(_DWORD *)((char *)&v92[20] + 1) = *(_DWORD *)v107;
  v92[21] = v64;
  LOBYTE(v92[22]) = v106;
  HIDWORD(v92[22]) = *(_DWORD *)&v105[3];
  *(_DWORD *)((char *)&v92[22] + 1) = *(_DWORD *)v105;
  v92[23] = v65;
  LOBYTE(v92[24]) = v104;
  HIDWORD(v92[24]) = *(_DWORD *)&v103[3];
  *(_DWORD *)((char *)&v92[24] + 1) = *(_DWORD *)v103;
  v92[25] = v66;
  LOBYTE(v92[26]) = v102;
  HIDWORD(v92[26]) = *(_DWORD *)&v101[3];
  *(_DWORD *)((char *)&v92[26] + 1) = *(_DWORD *)v101;
  v92[27] = v67;
  LOBYTE(v92[28]) = v100;
  HIDWORD(v92[28]) = *(_DWORD *)&v99[3];
  *(_DWORD *)((char *)&v92[28] + 1) = *(_DWORD *)v99;
  v92[29] = v68;
  LOBYTE(v92[30]) = v98;
  HIDWORD(v92[30]) = *(_DWORD *)&v97[3];
  *(_DWORD *)((char *)&v92[30] + 1) = *(_DWORD *)v97;
  v92[31] = v69;
  LOBYTE(v92[32]) = v96;
  *(_DWORD *)((char *)&v92[32] + 1) = *(_DWORD *)v95;
  HIDWORD(v92[32]) = *(_DWORD *)&v95[3];
  v92[33] = v72;
  v92[34] = v71;
  v92[35] = v70;
  v92[36] = v43;
  LOBYTE(v92[37]) = v88;
  outlined init with copy of AccessibilityScrollableContext(v85 + 80, (uint64_t)v94);
  v93[0] = v49 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v94, (uint64_t)v91);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v91, (uint64_t)&v90[38]);
  memcpy(v90, v92, 0x129uLL);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v92);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v91);
  v50 = 4;
  if (!v93[0])
    v50 = 0;
  v91[0] = v50;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v116[0], v116[1], 1, (uint64_t)v91);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
  memcpy(v116, v91, 0x188uLL);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>>);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v92);
  specialized Environment.wrappedValue.getter((uint64_t)v19);
  v51 = v86;
  v52 = v19[*(int *)(v86 + 20)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
  if (v52)
  {
    specialized Environment.wrappedValue.getter((uint64_t)v19);
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(0);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    View.defaultForegroundColor(_:)();
    swift_release();
    specialized Environment.wrappedValue.getter((uint64_t)v19);
    v53 = *(_QWORD *)&v19[*(int *)(v51 + 36) + 16];
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for CellConfiguration);
    v54 = swift_getKeyPath();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v91, (uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    v90[51] = v54;
    v90[52] = v53;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    memcpy(v91, v90, sizeof(v91));
    v55 = v87;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v91, v87, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    *(_BYTE *)(v55 + 424) = 1;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
  else
  {
    v56 = v87;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v116, v87, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
    *(_BYTE *)(v56 + 424) = 0;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v116, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
}

void key path getter for EnvironmentValues.horizontalListMargin : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.horizontalListMargin.getter();
}

void sub_18780CD34(double *a1@<X8>)
{
  *a1 = EnvironmentValues.horizontalListMargin.getter();
}

uint64_t key path setter for EnvironmentValues.horizontalListMargin : EnvironmentValues()
{
  return EnvironmentValues.horizontalListMargin.setter();
}

uint64_t sub_18780CD90()
{
  return EnvironmentValues.horizontalListMargin.setter();
}

uint64_t outlined init with copy of ListTableCellModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ListTableCellModifier(a2, a1);
  return a2;
}

uint64_t outlined destroy of ListTableCellModifier(uint64_t a1)
{
  destroy for ListTableCellModifier(a1);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    v8 = a1 + 40;
    v9 = a2 + 5;
    v10 = *((unsigned __int8 *)a2 + 110);
    if (v10 == 2)
    {
      v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 64) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v8, (uint64_t)v9);
      *(_QWORD *)(v4 + 80) = a2[10];
      *(_QWORD *)(v4 + 88) = a2[11];
    }
    else if (v10 == 1)
    {
      *(_QWORD *)(v4 + 40) = a2[5];
      *(_QWORD *)(v4 + 48) = a2[6];
    }
    else
    {
      v13 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v4 + 64) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v8, (uint64_t)v9);
      *(_BYTE *)(v4 + 80) = *((_BYTE *)a2 + 80);
      *(_QWORD *)(v4 + 88) = a2[11];
      *(_QWORD *)(v4 + 96) = a2[12];
      *(_DWORD *)(v4 + 104) = *((_DWORD *)a2 + 26);
      *(_WORD *)(v4 + 108) = *((_WORD *)a2 + 54);
    }
    *(_BYTE *)(v4 + 110) = v10;
    swift_retain();
    v14 = *(int *)(a3 + 28);
    v15 = (_QWORD *)(v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = type metadata accessor for UICellConfigurationState();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(v15, v16, v17);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = (int *)type metadata accessor for CellConfiguration();
      *((_BYTE *)v15 + v20[5]) = *((_BYTE *)v16 + v20[5]);
      *((_BYTE *)v15 + v20[6]) = *((_BYTE *)v16 + v20[6]);
      *((_BYTE *)v15 + v20[7]) = *((_BYTE *)v16 + v20[7]);
      *(_QWORD *)((char *)v15 + v20[8]) = *(_QWORD *)((char *)v16 + v20[8]);
      v21 = v20[9];
      v22 = (char *)v15 + v21;
      v23 = (char *)v16 + v21;
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 40);
      *((_QWORD *)v22 + 7) = *((_QWORD *)v23 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t destroy for LegacyModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 40;
  v5 = *(unsigned __int8 *)(a1 + 110);
  if (v5 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(v4);
    goto LABEL_5;
  }
  if (v5 != 1)
  {
    if (*(_BYTE *)(a1 + 110))
      goto LABEL_6;
    goto LABEL_4;
  }
LABEL_5:
  swift_release();
LABEL_6:
  v6 = a1 + *(int *)(a2 + 28);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for UICellConfigurationState();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    type metadata accessor for CellConfiguration();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a1 + 40;
  v8 = a2 + 40;
  v9 = *(unsigned __int8 *)(a2 + 110);
  if (v9 == 2)
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(v7, v8);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  else if (v9 == 1)
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v7, v8);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
  }
  *(_BYTE *)(a1 + 110) = v9;
  swift_retain();
  v12 = *(int *)(a3 + 28);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = type metadata accessor for UICellConfigurationState();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v18 = (int *)type metadata accessor for CellConfiguration();
    *((_BYTE *)v13 + v18[5]) = *((_BYTE *)v14 + v18[5]);
    *((_BYTE *)v13 + v18[6]) = *((_BYTE *)v14 + v18[6]);
    *((_BYTE *)v13 + v18[7]) = *((_BYTE *)v14 + v18[7]);
    *(_QWORD *)((char *)v13 + v18[8]) = *(_QWORD *)((char *)v14 + v18[8]);
    v19 = v18[9];
    v20 = (char *)v13 + v19;
    v21 = (char *)v14 + v19;
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
    *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
    *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    v6 = a2 + 40;
    outlined destroy of AccessibilityScrollableContext(a1 + 40);
    v7 = *(unsigned __int8 *)(a2 + 110);
    if (v7 == 2)
    {
      v8 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v8;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 40, v6);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    }
    else if (v7 == 1)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v9;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, v6);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
      *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      v10 = *(_DWORD *)(a2 + 104);
      *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
      *(_DWORD *)(a1 + 104) = v10;
    }
    *(_BYTE *)(a1 + 110) = v7;
    swift_retain();
    v11 = *(int *)(a3 + 28);
    v12 = (_QWORD *)(a1 + v11);
    v13 = (_QWORD *)(a2 + v11);
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>(a1 + v11, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = type metadata accessor for UICellConfigurationState();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v16 + 16))(v12, v13, v15);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      }
      v18 = (int *)type metadata accessor for CellConfiguration();
      *((_BYTE *)v12 + v18[5]) = *((_BYTE *)v13 + v18[5]);
      *((_BYTE *)v12 + v18[6]) = *((_BYTE *)v13 + v18[6]);
      *((_BYTE *)v12 + v18[7]) = *((_BYTE *)v13 + v18[7]);
      *(_QWORD *)((char *)v12 + v18[8]) = *(_QWORD *)((char *)v13 + v18[8]);
      v19 = v18[9];
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
      *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
      v22 = *(_OWORD *)(v21 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(v21 + 40);
      *(_OWORD *)(v20 + 24) = v22;
      *((_QWORD *)v20 + 7) = *((_QWORD *)v21 + 7);
      swift_retain();
      swift_retain();
    }
    else
    {
      *v12 = *v13;
    }
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 103) = *(_QWORD *)(a2 + 103);
  v5 = *(int *)(a3 + 28);
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for UICellConfigurationState();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v6, v7, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    }
    v13 = (int *)type metadata accessor for CellConfiguration();
    v6[v13[5]] = v7[v13[5]];
    v6[v13[6]] = v7[v13[6]];
    v6[v13[7]] = v7[v13[7]];
    *(_QWORD *)&v6[v13[8]] = *(_QWORD *)&v7[v13[8]];
    v14 = v13[9];
    v15 = &v6[v14];
    v16 = &v7[v14];
    v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v17;
    v18 = *((_OWORD *)v16 + 3);
    *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    *((_OWORD *)v15 + 3) = v18;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for LegacyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 103) = *(_QWORD *)(a2 + 103);
    v7 = *(_OWORD *)(a2 + 40);
    v8 = *(int *)(a3 + 28);
    v9 = (char *)(a1 + v8);
    v10 = (char *)(a2 + v8);
    *(_OWORD *)(a1 + 40) = v7;
    v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>(a1 + v8, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v11);
    v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = type metadata accessor for UICellConfigurationState();
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v9, v10, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
      }
      v17 = (int *)type metadata accessor for CellConfiguration();
      v9[v17[5]] = v10[v17[5]];
      v9[v17[6]] = v10[v17[6]];
      v9[v17[7]] = v10[v17[7]];
      *(_QWORD *)&v9[v17[8]] = *(_QWORD *)&v10[v17[8]];
      v18 = v17[9];
      v19 = &v9[v18];
      v20 = &v10[v18];
      v21 = *((_OWORD *)v20 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = v21;
      v22 = *((_OWORD *)v20 + 3);
      *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
      *((_OWORD *)v19 + 3) = v22;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18780DB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 110);
    if (v4 > 2)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E0CE1160]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LegacyModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18780DB9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 110) = -(char)a2;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E0CE1160]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for LegacyModifier()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for IOSMultiColumnModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    v8 = a2[6];
    if (v8 == 1)
    {
      *(_QWORD *)(v4 + 48) = a2[6];
      *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
    }
    else
    {
      *(_QWORD *)(v4 + 48) = v8;
      *(_BYTE *)(v4 + 56) = *((_BYTE *)a2 + 56);
      swift_retain();
    }
    *(_QWORD *)(v4 + 64) = a2[8];
    *(_BYTE *)(v4 + 72) = *((_BYTE *)a2 + 72);
    v10 = v4 + 80;
    v11 = a2 + 10;
    v12 = *((unsigned __int8 *)a2 + 150);
    if (v12 == 2)
    {
      v13 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 104) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v10, (uint64_t)v11);
      *(_QWORD *)(v4 + 120) = a2[15];
      *(_QWORD *)(v4 + 128) = a2[16];
    }
    else if (v12 == 1)
    {
      *(_QWORD *)(v4 + 80) = a2[10];
      *(_QWORD *)(v4 + 88) = a2[11];
    }
    else
    {
      v14 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v4 + 104) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(v10, (uint64_t)v11);
      *(_BYTE *)(v4 + 120) = *((_BYTE *)a2 + 120);
      *(_QWORD *)(v4 + 128) = a2[16];
      *(_QWORD *)(v4 + 136) = a2[17];
      *(_DWORD *)(v4 + 144) = *((_DWORD *)a2 + 36);
      *(_WORD *)(v4 + 148) = *((_WORD *)a2 + 74);
    }
    *(_BYTE *)(v4 + 150) = v12;
    swift_retain();
    v15 = *(int *)(a3 + 40);
    v16 = (_QWORD *)(v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = type metadata accessor for UICellConfigurationState();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v21 = (int *)type metadata accessor for CellConfiguration();
      *((_BYTE *)v16 + v21[5]) = *((_BYTE *)v17 + v21[5]);
      *((_BYTE *)v16 + v21[6]) = *((_BYTE *)v17 + v21[6]);
      *((_BYTE *)v16 + v21[7]) = *((_BYTE *)v17 + v21[7]);
      *(_QWORD *)((char *)v16 + v21[8]) = *(_QWORD *)((char *)v17 + v21[8]);
      v22 = v21[9];
      v23 = (char *)v16 + v22;
      v24 = (char *)v17 + v22;
      v25 = *((_QWORD *)v24 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 24);
      *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 40);
      *((_QWORD *)v23 + 7) = *((_QWORD *)v24 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v26 = *(int *)(a3 + 44);
    v27 = v4 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    *(_BYTE *)(v27 + 8) = v30;
  }
  return v4;
}

uint64_t destroy for IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 48) != 1)
    swift_release();
  v4 = *(unsigned __int8 *)(a1 + 150);
  if (v4 == 2)
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    if (*(_BYTE *)(a1 + 150))
      goto LABEL_8;
    goto LABEL_6;
  }
LABEL_7:
  swift_release();
LABEL_8:
  v5 = a1 + *(int *)(a2 + 40);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for UICellConfigurationState();
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    type metadata accessor for CellConfiguration();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 44)), *(_BYTE *)(a1 + *(int *)(a2 + 44) + 8));
}

uint64_t initializeWithCopy for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  if (v7 == 1)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v7;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_retain();
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = a1 + 80;
  v9 = a2 + 80;
  v10 = *(unsigned __int8 *)(a2 + 150);
  if (v10 == 2)
  {
    v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(v8, v9);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  else if (v10 == 1)
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 104) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(v8, v9);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 148) = *(_WORD *)(a2 + 148);
  }
  *(_BYTE *)(a1 + 150) = v10;
  swift_retain();
  v13 = *(int *)(a3 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = type metadata accessor for UICellConfigurationState();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v19 = (int *)type metadata accessor for CellConfiguration();
    *((_BYTE *)v14 + v19[5]) = *((_BYTE *)v15 + v19[5]);
    *((_BYTE *)v14 + v19[6]) = *((_BYTE *)v15 + v19[6]);
    *((_BYTE *)v14 + v19[7]) = *((_BYTE *)v15 + v19[7]);
    *(_QWORD *)((char *)v14 + v19[8]) = *(_QWORD *)((char *)v15 + v19[8]);
    v20 = v19[9];
    v21 = (char *)v14 + v20;
    v22 = (char *)v15 + v20;
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 40) = *(_OWORD *)(v22 + 40);
    *((_QWORD *)v21 + 7) = *((_QWORD *)v22 + 7);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v24 = *(int *)(a3 + 44);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  return a1;
}

uint64_t assignWithCopy for IOSMultiColumnModifier(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;

  v6 = *a2;
  v7 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  v8 = a1 + 48;
  v9 = *(_QWORD *)(a1 + 48);
  v11 = (uint64_t *)(a2 + 3);
  v10 = *((_QWORD *)a2 + 6);
  if (v9 == 1)
  {
    if (v10 == 1)
    {
      v12 = *v11;
      *(_BYTE *)(v8 + 8) = *((_BYTE *)a2 + 56);
      *(_QWORD *)v8 = v12;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      swift_retain();
    }
  }
  else if (v10 == 1)
  {
    outlined destroy of ListItemTint(v8);
    v13 = *((_BYTE *)v11 + 8);
    *(_QWORD *)v8 = *v11;
    *(_BYTE *)(v8 + 8) = v13;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v10;
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  if ((__int128 *)a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    v14 = *((unsigned __int8 *)a2 + 150);
    if (v14 == 2)
    {
      v15 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v15;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
      *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 31);
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    }
    else if (v14 == 1)
    {
      *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
      *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    }
    else
    {
      v16 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 104) = v16;
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 80, (uint64_t)(a2 + 5));
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
      *(_DWORD *)(a1 + 132) = *((_DWORD *)a2 + 33);
      *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
      v17 = *((_DWORD *)a2 + 36);
      *(_WORD *)(a1 + 148) = *((_WORD *)a2 + 74);
      *(_DWORD *)(a1 + 144) = v17;
    }
    *(_BYTE *)(a1 + 150) = v14;
    swift_retain();
    v18 = *(int *)(a3 + 40);
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>(a1 + v18, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v21);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = type metadata accessor for UICellConfigurationState();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(v19, v20, v22);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
      v25 = (int *)type metadata accessor for CellConfiguration();
      *((_BYTE *)v19 + v25[5]) = *((_BYTE *)v20 + v25[5]);
      *((_BYTE *)v19 + v25[6]) = *((_BYTE *)v20 + v25[6]);
      *((_BYTE *)v19 + v25[7]) = *((_BYTE *)v20 + v25[7]);
      *(_QWORD *)((char *)v19 + v25[8]) = *(_QWORD *)((char *)v20 + v25[8]);
      v26 = v25[9];
      v27 = (char *)v19 + v26;
      v28 = (char *)v20 + v26;
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
      *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
      v29 = *(_OWORD *)(v28 + 24);
      *(_OWORD *)(v27 + 40) = *(_OWORD *)(v28 + 40);
      *(_OWORD *)(v27 + 24) = v29;
      *((_QWORD *)v27 + 7) = *((_QWORD *)v28 + 7);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v30 = *(int *)(a3 + 44);
  v31 = a1 + v30;
  v32 = (uint64_t)a2 + v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v32, v34);
  v35 = *(_QWORD *)v31;
  v36 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  outlined consume of Environment<Bool>.Content(v35, v36);
  return a1;
}

uint64_t initializeWithTake for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 143) = *(_QWORD *)(a2 + 143);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v11;
  v12 = *(int *)(a3 + 40);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = type metadata accessor for UICellConfigurationState();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v13, v14, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
    }
    v20 = (int *)type metadata accessor for CellConfiguration();
    v13[v20[5]] = v14[v20[5]];
    v13[v20[6]] = v14[v20[6]];
    v13[v20[7]] = v14[v20[7]];
    *(_QWORD *)&v13[v20[8]] = *(_QWORD *)&v14[v20[8]];
    v21 = v20[9];
    v22 = &v13[v21];
    v23 = &v14[v21];
    v24 = *((_OWORD *)v23 + 1);
    *(_OWORD *)v22 = *(_OWORD *)v23;
    *((_OWORD *)v22 + 1) = v24;
    v25 = *((_OWORD *)v23 + 3);
    *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
    *((_OWORD *)v22 + 3) = v25;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v26 = *(int *)(a3 + 44);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

uint64_t assignWithTake for IOSMultiColumnModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = a1 + 48;
  v9 = a2 + 48;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 48) == 1)
    goto LABEL_4;
  if (v8 == 1)
  {
    outlined destroy of ListItemTint(v7);
LABEL_4:
    *(_QWORD *)v7 = *(_QWORD *)v9;
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(v9 + 8);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = v8;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_6:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 80);
    v10 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v10;
    *(_QWORD *)(a1 + 143) = *(_QWORD *)(a2 + 143);
    v11 = *(_OWORD *)(a2 + 96);
    v12 = *(int *)(a3 + 40);
    v13 = (char *)(a1 + v12);
    v14 = (char *)(a2 + v12);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v11;
    v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>(a1 + v12, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, v15);
    v17 = v16;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v18 = type metadata accessor for UICellConfigurationState();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for UICellConfigurationState?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DC2020], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
      }
      v21 = (int *)type metadata accessor for CellConfiguration();
      v13[v21[5]] = v14[v21[5]];
      v13[v21[6]] = v14[v21[6]];
      v13[v21[7]] = v14[v21[7]];
      *(_QWORD *)&v13[v21[8]] = *(_QWORD *)&v14[v21[8]];
      v22 = v21[9];
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = *((_OWORD *)v24 + 1);
      *(_OWORD *)v23 = *(_OWORD *)v24;
      *((_OWORD *)v23 + 1) = v25;
      v26 = *((_OWORD *)v24 + 3);
      *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
      *((_OWORD *)v23 + 3) = v26;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v27 = *(int *)(a3 + 44);
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  v31 = *(_QWORD *)v28;
  v32 = *(_BYTE *)(v28 + 8);
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = (_BYTE)v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for IOSMultiColumnModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18780EC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 2147483645)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return ((_DWORD)v4 - 1) & ~(((int)v4 - 1) >> 31);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E0CE1160]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for IOSMultiColumnModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18780ECB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483645)
  {
    *(_QWORD *)(result + 48) = (a2 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E0CE1160]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for IOSMultiColumnModifier()
{
  unint64_t v0;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<ListTableCellModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListTableCellModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListTableCellModifier>, StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier>();
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IOSMultiColumnModifier and conformance IOSMultiColumnModifier, type metadata accessor for IOSMultiColumnModifier, (uint64_t)&protocol conformance descriptor for IOSMultiColumnModifier);
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LegacyModifier and conformance LegacyModifier, type metadata accessor for LegacyModifier, (uint64_t)&protocol conformance descriptor for LegacyModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, IOSMultiColumnModifier, LegacyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in IOSMultiColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LegacyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for _ViewModifier_Content<LegacyModifier>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  }
}

void type metadata accessor for _ViewModifier_Content<LegacyModifier>(uint64_t a1)
{
  type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(a1, &lazy cache variable for type metadata for _ViewModifier_Content<LegacyModifier>, type metadata accessor for LegacyModifier, &lazy protocol witness table cache variable for type LegacyModifier and conformance LegacyModifier, (uint64_t)&protocol conformance descriptor for LegacyModifier);
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1)
{
  type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(a1, &lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE3590]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<LegacyModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LegacyModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 288);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListItemTint?>, &lazy cache variable for type metadata for ListItemTint?, (uint64_t)&type metadata for ListItemTint);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E0CE0B90], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>)
  {
    type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>);
  }
}

void type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>(uint64_t a1)
{
  type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>(a1, &lazy cache variable for type metadata for _ViewModifier_Content<IOSMultiColumnModifier>, type metadata accessor for IOSMultiColumnModifier, &lazy protocol witness table cache variable for type IOSMultiColumnModifier and conformance IOSMultiColumnModifier, (uint64_t)&protocol conformance descriptor for IOSMultiColumnModifier);
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>>(uint64_t a1)
{
  type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(a1, &lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4();
    v10 = type metadata accessor for AccessibilityListCoreCellModifier(a1, v7, v8, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE35E0]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE2BC0]);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, MEMORY[0x1E0CE3590]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<IOSMultiColumnModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<IOSMultiColumnModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListItemTint?>, &lazy cache variable for type metadata for ListItemTint?, (uint64_t)&type metadata for ListItemTint);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 288);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Transaction?(v2);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityScrollableContextModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E0CE6A78]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  }
}

uint64_t sub_18780F934()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityScrollableContextModifier);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Accessibili()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAt, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    v3[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, Acces);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for AccessibilityAttachmentModifier);
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t View.defaultForegroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;

  v22 = a4;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v22 - v12;
  v15 = type metadata accessor for _DefaultForegroundStyleModifier(0, a3, a5, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v9, v18);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v20, 1, 1, a3);
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v20, v13, v9);
  MEMORY[0x18D75B4AC](v20, a2, v15, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
}

uint64_t View.foregroundStyle<A, B, C>(primary:secondary:tertiary:)()
{
  return View._foregroundStyle<A, B, C>(primary:secondary:tertiary:)();
}

uint64_t _DefaultForegroundStyleModifier.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t _DefaultForegroundStyleModifier.style.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*_DefaultForegroundStyleModifier.style.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  LODWORD(v18) = *a1;
  type metadata accessor for _DefaultForegroundStyleModifier(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v7 = _GraphValue.value.getter();
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 20);
  v18 = *a2;
  v19 = v8;
  v20 = v9;
  v21 = *(_OWORD *)(a2 + 3);
  v22 = *(_OWORD *)(a2 + 5);
  v23 = *(_OWORD *)(a2 + 7);
  v24 = a2[9];
  v25 = v10;
  LODWORD(v18) = v7;
  HIDWORD(v18) = _ViewInputs.environment.getter();
  v16 = type metadata accessor for _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment(0, a3, a4, v11);
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment, v16);
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v15, v16, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  return _ViewInputs.environment.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in _DefaultForegroundStyleModifier<A>()
{
  return &protocol witness table for _DefaultForegroundStyleModifier<A>;
}

uint64_t getEnumTagSinglePayload for _DefaultForegroundStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for _DefaultForegroundStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_187810168()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_187810170()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_187810194(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 8);
  v8 = v2;
  v3 = type metadata accessor for _ForegroundStyleModifier2();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v1;
  v6[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5F28], v3);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

uint64_t sub_18781021C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 8);
  v9 = v1;
  v10 = *(_OWORD *)(a1 + 40);
  v11 = v3;
  v4 = type metadata accessor for _ForegroundStyleModifier3();
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v2;
  v7[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5F40], v4);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t specialized static Scene._makeScene(scene:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  __int128 v15;
  char v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  static DynamicPropertyCache.fields(of:)();
  v5 = v23;
  v6 = v24;
  v7 = DWORD1(v24);
  v8 = a2[1];
  v20 = *a2;
  v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Scene.makeBody(scene:inputs:fields:)();
  v9 = v23;
  v10 = v24;
  v23 = v20;
  v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  outlined retain of _ViewInputs((uint64_t)&v23);
  specialized static Scene._makeScene(scene:inputs:)(&v15, v15, &v23);
  outlined release of _ViewInputs((uint64_t)&v23);
  v11 = v15;
  v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    v19 = v9;
    v18 = a1;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

void protocol witness for Scene.body.getter in conformance WindowSceneList<A>()
{
  specialized PrimitiveScene.body.getter();
}

void protocol witness for Scene.body.getter in conformance _SceneModifier_Content<A>()
{
  specialized PrimitiveScene.body.getter();
}

void protocol witness for Scene.body.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a1, &v2);
  specialized PrimitiveScene.body.getter();
}

void protocol witness for Scene.body.getter in conformance ResolvedUISceneAdaptor<A>.RootViewScene()
{
  specialized PrimitiveScene.body.getter();
}

uint64_t specialized static Scene.makeBody(scene:inputs:fields:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for SceneBodyAccessor<Never>(0, v0, v1, v2);
    lazy protocol witness table accessor for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>(v3, v4, v5, v6);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x726576654ELL;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance Never@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static Scene._makeScene(scene:inputs:)(v3, v6, a3);
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance SceneDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance SceneDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static SceneDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance SceneDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for Scene.body.getter in conformance _EmptyScene()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Scene.body.getter in conformance DocumentGroup<A, B>.DocumentContentScene()
{
  specialized PrimitiveScene.body.getter();
}

void protocol witness for Scene.body.getter in conformance DocumentIntroductionSceneList()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for Scene.body.getter in conformance SingleWindowSceneList()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized Scene.sceneBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveScene.body.getter()
{
  specialized Scene.sceneBodyError()();
}

_UNKNOWN **associated type witness table accessor for Scene.Body : Scene in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of Scene.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Scene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for SceneDescriptor()
{
  return &type metadata for SceneDescriptor;
}

void type metadata accessor for SceneBodyAccessor<Never>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SceneBodyAccessor<Never>)
  {
    v4 = type metadata accessor for SceneBodyAccessor(0, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SceneBodyAccessor<Never>);
  }
}

unint64_t lazy protocol witness table accessor for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>)
  {
    type metadata accessor for SceneBodyAccessor<Never>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneBodyAccessor<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneBodyAccessor<Never> and conformance SceneBodyAccessor<A>);
  }
  return result;
}

void View.interactiveResizeDisabled(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static VolumeViewpointUpdateStrategy.all.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static VolumeViewpointUpdateStrategy.== infix(_:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.onVolumeViewpointChange(updateStrategy:initial:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for VolumeViewpointUpdateStrategy()
{
  return &type metadata for VolumeViewpointUpdateStrategy;
}

void static VolumeViewpointUpdateStrategy.supported.getter()
{
  static VolumeViewpointUpdateStrategy.all.getter();
}

void __swiftcall AutomaticMenuBarExtraStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AutomaticMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static MenuBarExtraStyle<>.automatic.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for AutomaticMenuBarExtraStyle()
{
  return &type metadata for AutomaticMenuBarExtraStyle;
}

uint64_t closure #1 in DefaultProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t (*v80)();
  ValueMetadata *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(void);
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = a2;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
  v90 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v91 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v92 = (uint64_t)&v86 - v8;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0];
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  MEMORY[0x1E0C80A78](v10, v11);
  v89 = (uint64_t)&v86 - v12;
  v93 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1E0C80A78](v93, v13);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, v9);
  MEMORY[0x1E0C80A78](v16, v17);
  v94 = (uint64_t)&v86 - v18;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v86 - v22;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
  v96 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v86 - v26;
  v28 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v86 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v86 - v34;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v86 - v38;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
  MEMORY[0x1E0C80A78](a1, v40);
  v42 = (char *)&v86 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v47 = (char *)&v86 - v46;
  v48 = *(unsigned __int8 *)(v45 + v28[6]);
  v95 = v49;
  if (v48 == 1)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, (uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v35, (uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
    v50 = *(int *)(v20 + 52);
    v51 = *(int *)(v20 + 56);
    v23[v51] = 1;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)v23, type metadata accessor for ProgressViewValue);
    v23[v50] = v31[v28[7]];
    LOBYTE(v50) = v31[v28[8]];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
    v23[v51] = v50;
    outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v23, (uint64_t)v27, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
    swift_storeEnumTagMultiPayload();
    outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v27, (uint64_t)v39, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
    KeyPath = swift_getKeyPath();
    v53 = swift_getKeyPath();
    outlined init with copy of CoordinateSpaceGesture<TouchEvent>((uint64_t)v39, (uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
    v54 = &v42[*(int *)(v95 + 36)];
    *(_QWORD *)v54 = KeyPath;
    v54[8] = 0;
    *((_QWORD *)v54 + 2) = v53;
    v54[24] = 0;
    *((_QWORD *)v54 + 4) = 0;
    outlined destroy of UIBackgroundConfiguration?((uint64_t)v39, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
    outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>((uint64_t)v42, (uint64_t)v47, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
    outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v47, v97, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v47, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
  }
  else
  {
    v86 = v42;
    v87 = v27;
    v88 = v39;
    v56 = v45;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, (uint64_t)v15, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ClosedRange<Date>);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v56, (uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v35, (uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
      v57 = *(int *)(v20 + 52);
      v58 = *(int *)(v20 + 56);
      v23[v58] = 1;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)v23, type metadata accessor for ProgressViewValue);
      v23[v57] = v31[v28[7]];
      LOBYTE(v57) = v31[v28[8]];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
      v23[v58] = v57;
      v59 = (uint64_t)v87;
      outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v23, (uint64_t)v87, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
      swift_storeEnumTagMultiPayload();
      v60 = (uint64_t)v88;
      outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v59, (uint64_t)v88, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
      v61 = swift_getKeyPath();
      v62 = swift_getKeyPath();
      v63 = v91;
      outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v60, v91, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
      v64 = v63 + *(int *)(v90 + 36);
      *(_QWORD *)v64 = v61;
      *(_BYTE *)(v64 + 8) = 0;
      *(_QWORD *)(v64 + 16) = v62;
      *(_BYTE *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0;
      outlined destroy of UIBackgroundConfiguration?(v60, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
      v65 = v63;
      v66 = v92;
      outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v65, v92, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
      v67 = v94;
      outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v66, v94, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
      type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v66, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, type metadata accessor for ProgressViewValue);
      LODWORD(v93) = *(unsigned __int8 *)(v56 + v28[5] + 8);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v56, (uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v35, (uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
      v68 = *(int *)(v20 + 52);
      v69 = *(int *)(v20 + 56);
      v23[v69] = 1;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v31, (uint64_t)v23, type metadata accessor for ProgressViewValue);
      v23[v68] = v31[v28[7]];
      LOBYTE(v68) = v31[v28[8]];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, type metadata accessor for ProgressViewStyleConfiguration);
      v23[v69] = v68;
      v70 = (uint64_t)v87;
      outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v23, (uint64_t)v87, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for CustomProgressView);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v35, type metadata accessor for ProgressViewStyleConfiguration);
      swift_storeEnumTagMultiPayload();
      v71 = (uint64_t)v88;
      outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v70, (uint64_t)v88, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView.Base);
      v72 = swift_getKeyPath();
      v73 = swift_getKeyPath();
      if ((v93 & 1) != 0)
      {
        v74 = (uint64_t)v86;
        outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v71, (uint64_t)v86, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
        v75 = v74 + *(int *)(v95 + 36);
        *(_QWORD *)v75 = v72;
        *(_BYTE *)(v75 + 8) = 0;
        *(_QWORD *)(v75 + 16) = v73;
        *(_BYTE *)(v75 + 24) = 0;
        *(_QWORD *)(v75 + 32) = 0;
        outlined destroy of UIBackgroundConfiguration?(v71, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
        outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v74, (uint64_t)v47, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
        v76 = v89;
        outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v47, v89, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
        type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
        swift_storeEnumTagMultiPayload();
        v77 = (uint64_t)v47;
        v78 = &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>;
        v79 = &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>;
        v80 = lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle;
        v81 = &type metadata for CircularProgressViewStyle;
      }
      else
      {
        v82 = v91;
        outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v71, v91, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
        v83 = v82 + *(int *)(v90 + 36);
        *(_QWORD *)v83 = v72;
        *(_BYTE *)(v83 + 8) = 0;
        *(_QWORD *)(v83 + 16) = v73;
        *(_BYTE *)(v83 + 24) = 0;
        *(_QWORD *)(v83 + 32) = 0;
        outlined destroy of UIBackgroundConfiguration?(v71, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(_QWORD))type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base);
        v84 = v92;
        outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v82, v92, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
        v76 = v89;
        outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v84, v89, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
        type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
        swift_storeEnumTagMultiPayload();
        v77 = v84;
        v78 = &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>;
        v79 = (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>;
        v80 = lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle;
        v81 = &type metadata for LinearProgressViewStyle;
      }
      outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v77, v78, v79, (uint64_t (*)(void))v80, (uint64_t)v81);
      v85 = MEMORY[0x1E0CE4BC0];
      v67 = v94;
      outlined init with copy of CoordinateSpaceGesture<TouchEvent>(v76, v94, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t)MEMORY[0x1E0CE4BC0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>);
      type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of UIBackgroundConfiguration?(v76, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>);
    }
    outlined init with copy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(v67, v97);
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(v67);
  }
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in DefaultProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultProgressViewStyle()
{
  return &type metadata for DefaultProgressViewStyle;
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>();
    v2 = v1;
    v3 = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>);
  }
  return result;
}

void type metadata accessor for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v0 = type metadata accessor for Group();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>);
  }
}

void type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(255, (unint64_t *)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(_QWORD, _QWORD *))type metadata accessor for ProgressView);
    type metadata accessor for ProgressViewStyleModifier<CircularProgressViewStyle>(255, a3, a4, a5);
    v9 = type metadata accessor for ModifiedContent();
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle;
  if (!lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularProgressViewStyle, &type metadata for CircularProgressViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
    v7 = v6;
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for ProgressViewStyleModifier<CircularProgressViewStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for ProgressViewStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle;
  if (!lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LinearProgressViewStyle, &type metadata for LinearProgressViewStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage, lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>();
    v3[1] = &protocol witness table for ProgressViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t (*)(void)), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = a3(255, a2, MEMORY[0x1E0CE4BC0]);
    v8[0] = lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    v8[1] = a4();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>();
    v3[1] = &protocol witness table for ProgressViewStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  return lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>(&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t (*)(void)))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
}

uint64_t outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle, (uint64_t)&type metadata for LinearProgressViewStyle);
    v7 = v6;
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined init with copy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle, (uint64_t)&type metadata for CircularProgressViewStyle);
    v7 = v6;
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined destroy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v6;

  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _UnbridgedNavigationStackStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 52);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 48) = v5;
  *(_BYTE *)(a2 + 52) = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t associated type witness table accessor for _NavigationStackStyle.Body : View in _UnbridgedNavigationStackStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for _NavigationStackStyle.makeBody(configuration:) in conformance _UnbridgedNavigationStackStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 52);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  *(_DWORD *)(a2 + 48) = v5;
  *(_BYTE *)(a2 + 52) = v6;
  swift_bridgeObjectRetain();
  return swift_retain();
}

ValueMetadata *type metadata accessor for _UnbridgedNavigationStackStyle()
{
  return &type metadata for _UnbridgedNavigationStackStyle;
}

unint64_t lazy protocol witness table accessor for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore;
  if (!lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhoneUnbridgedNavigationStackCore, &type metadata for PhoneUnbridgedNavigationStackCore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhoneUnbridgedNavigationStackCore and conformance PhoneUnbridgedNavigationStackCore);
  }
  return result;
}

id UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *ObjCClassFromMetadata;
  Class isa;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *a1;
  v6 = *((double *)a1 + 1);
  v7 = a1[16];
  v8 = a1[17];
  v18 = *((_QWORD *)a1 + 5);
  v20 = *((_QWORD *)a1 + 4);
  v26 = *((_QWORD *)a1 + 8);
  v27 = *((_QWORD *)a1 + 7);
  v24 = *((_QWORD *)a1 + 10);
  v25 = *((_QWORD *)a1 + 9);
  v22 = *((_QWORD *)a1 + 12);
  v23 = *((_QWORD *)a1 + 11);
  v9 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v9, a2, a3);
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextualAction);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(ObjCClassFromMetadata, sel_configurationWithActions_, isa);

  v13 = v12;
  objc_msgSend(v13, sel_setPerformsFirstActionWithFullSwipe_, v5);
  v14 = v6;
  if ((v7 & 1) != 0)
    v14 = 0.0;
  if (v8)
    v15 = (*(_QWORD *)&v6 | v7) != 0;
  else
    v15 = 2;
  if (v8)
    v16 = 0.0;
  else
    v16 = v14;
  objc_msgSend(v13, sel__setSwipeActionsStyle_, v15, v14, v18, v20);
  objc_msgSend(v13, sel__setRoundedStyleCornerRadius_, v16);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Binding<NavigationSplitViewColumn>?(v21, v19);
  outlined consume of Binding<SwipeActionResultToken?>?(v27, v26, v25, v24, v23, v22);

  return v13;
}

uint64_t static SwipeActions.TraitKey.resolvedValue(attributeValues:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Attribute;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *Value;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  __int128 v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;

  MEMORY[0x18D75B908]();
  AGGraphClearUpdate();
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v95 = *MEMORY[0x1E0CFED28];
    swift_bridgeObjectRetain();
    v4 = 0;
    v78 = 0;
    v79 = 0;
    v87 = 0;
    v88 = 0;
    v5 = 0;
    v76 = 0;
    v77 = 0;
    v80 = 0;
    v83 = 0;
    v84 = 0;
    v72 = 0;
    v73 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    Attribute = 0;
    v21 = 0;
    v68 = v3 - 1;
    v69 = 1;
    v94 = v3;
    while (2)
    {
      while (2)
      {
        if (v4 <= v3)
          v22 = v3;
        else
          v22 = v4;
        v96 = v22;
        *(_QWORD *)&v86 = v8;
        *((_QWORD *)&v86 + 1) = v9;
        *(_QWORD *)&v85 = v6;
        *((_QWORD *)&v85 + 1) = v7;
        v89 = v5;
        v90 = v21;
        v91 = Attribute;
        v92 = v19;
        v93 = v18;
        while (1)
        {
          if (v96 == v4)
          {
            __break(1u);
LABEL_31:
            v81 = v10;
            v82 = v13;
            v91 = Attribute;
            v92 = v19;
            *(_QWORD *)&v85 = v6;
            *((_QWORD *)&v85 + 1) = v7;
            v89 = v5;
            v90 = v21;
            *(_QWORD *)&v86 = v8;
            *((_QWORD *)&v86 + 1) = v9;
            v97 = v11;
            v74 = v17;
            v75 = v12;
            v93 = v18;
            swift_bridgeObjectRelease();
            v54 = v77;
            v53 = v78;
            v56 = v80;
            goto LABEL_33;
          }
          v23 = v16;
          v24 = v15;
          v25 = v14;
          v26 = v13;
          a1 = v4 + 1;
          v19 = v4;
          Attribute = AGWeakAttributeGetAttribute();
          if ((_DWORD)Attribute != v95)
            break;
          v4 = a1;
          v13 = v26;
          v14 = v25;
          v15 = v24;
          v16 = v23;
          if (v94 == a1)
          {
            v81 = v10;
            v82 = v13;
            v97 = v11;
            v74 = v17;
            v75 = v12;
            swift_bridgeObjectRelease();
            v54 = v77;
            v53 = v78;
            v55 = v79;
            v56 = v80;
            v3 = v72;
            v57 = v73;
            a1 = v76;
            goto LABEL_29;
          }
        }
        v66 = a1;
        v67 = v19;
        if ((v69 & 1) != 0)
        {
          Value = (__int128 *)AGGraphGetValue();
          v28 = Value[1];
          v98 = *Value;
          v99 = v28;
          v29 = Value[2];
          v30 = Value[3];
          v31 = Value[5];
          v102 = Value[4];
          v103 = v31;
          v100 = v29;
          v101 = v30;
          v32 = Value[6];
          v33 = Value[7];
          v34 = Value[9];
          v106 = Value[8];
          v107 = v34;
          v104 = v32;
          v105 = v33;
          v35 = Value[10];
          v36 = Value[11];
          v37 = Value[13];
          v110 = Value[12];
          v111 = v37;
          v108 = v35;
          v109 = v36;
          *(_QWORD *)&v131 = v10;
          *((_QWORD *)&v131 + 1) = v11;
          *(_QWORD *)&v132 = v12;
          *((_QWORD *)&v132 + 1) = v83;
          *(_QWORD *)&v133 = v26;
          *((_QWORD *)&v133 + 1) = v25;
          *(_QWORD *)&v134 = v76;
          *((_QWORD *)&v134 + 1) = v24;
          *(_QWORD *)&v135 = v23;
          *((_QWORD *)&v135 + 1) = v17;
          *(_QWORD *)&v136 = v93;
          *((_QWORD *)&v136 + 1) = v92;
          *(_QWORD *)&v137 = v91;
          *((_QWORD *)&v137 + 1) = v90;
          *(_QWORD *)&v138 = v79;
          *((_QWORD *)&v138 + 1) = v88;
          *(_QWORD *)&v139 = v89;
          *((_QWORD *)&v139 + 1) = v87;
          *(_QWORD *)&v140 = v78;
          *((_QWORD *)&v140 + 1) = v77;
          *(_QWORD *)&v141 = v80;
          *((_QWORD *)&v141 + 1) = v84;
          *(_QWORD *)&v142 = v73;
          *((_QWORD *)&v142 + 1) = v72;
          v143 = v85;
          v144 = v86;
          outlined retain of SwipeActions.Value((uint64_t)&v98, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
          outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
          v5 = v106;
          v78 = v107;
          v79 = v105;
          v77 = *((_QWORD *)&v107 + 1);
          v84 = *((_QWORD *)&v108 + 1);
          v80 = v108;
          v72 = *((_QWORD *)&v109 + 1);
          v73 = v109;
          v7 = *((_QWORD *)&v110 + 1);
          v6 = v110;
          v9 = *((_QWORD *)&v111 + 1);
          v8 = v111;
          v11 = *((_QWORD *)&v98 + 1);
          v10 = v98;
          v12 = v99;
          v14 = *((_QWORD *)&v100 + 1);
          v13 = v100;
          v15 = *((_QWORD *)&v101 + 1);
          a1 = v101;
          v17 = *((_QWORD *)&v102 + 1);
          v16 = v102;
          v19 = *((_QWORD *)&v103 + 1);
          v18 = v103;
          v21 = *((_QWORD *)&v104 + 1);
          Attribute = v104;
          v87 = *((_QWORD *)&v106 + 1);
          v88 = *((_QWORD *)&v105 + 1);
          v83 = *((_QWORD *)&v99 + 1);
          if (v68 != v67)
          {
            v76 = v101;
            v69 = 0;
            v3 = v94;
            v4 = v66;
            continue;
          }
          goto LABEL_31;
        }
        break;
      }
      v38 = (__int128 *)AGGraphGetValue();
      v39 = v38[1];
      v131 = *v38;
      v132 = v39;
      v40 = v38[5];
      v42 = v38[2];
      v41 = v38[3];
      v135 = v38[4];
      v136 = v40;
      v133 = v42;
      v134 = v41;
      v43 = v38[8];
      v45 = v38[6];
      v44 = v38[7];
      v140 = v38[9];
      v139 = v43;
      v137 = v45;
      v138 = v44;
      v46 = v38[12];
      v48 = v38[10];
      v47 = v38[11];
      v144 = v38[13];
      v143 = v46;
      v141 = v48;
      v142 = v47;
      v70 = v139;
      v64 = v48;
      v65 = v140;
      v62 = v46;
      v63 = v47;
      v60 = *((_QWORD *)&v144 + 1);
      v61 = v144;
      v119 = v10;
      v120 = v11;
      v121 = v12;
      v122 = v83;
      v123 = v26;
      v124 = v25;
      v125 = v76;
      v126 = v24;
      v127 = v23;
      v128 = v17;
      *(_QWORD *)&v129 = v93;
      *((_QWORD *)&v129 + 1) = v92;
      *(_QWORD *)&v130 = v91;
      *((_QWORD *)&v130 + 1) = v90;
      v112 = v131;
      v113 = v132;
      v114 = v133;
      v115 = v134;
      v116 = v135;
      v117 = v40;
      v59 = v138;
      v118 = v137;
      outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
      static SwipeActions.Configuration.reduce(_:_:)((unint64_t *)&v119, (uint64_t *)&v112, (uint64_t)&v98);
      outlined consume of SwipeActions.Configuration?(v10, v11, v12, v83, v26, v25, v76, v24, v23, v17, v93, v92, v91);
      v97 = *((_QWORD *)&v98 + 1);
      v14 = *((_QWORD *)&v100 + 1);
      v82 = v100;
      v83 = *((_QWORD *)&v99 + 1);
      v76 = v101;
      v15 = *((_QWORD *)&v101 + 1);
      v16 = v102;
      if (BYTE1(v98))
        v49 = 256;
      else
        v49 = 0;
      v81 = v49 | v98;
      v93 = v103;
      if (BYTE1(v99))
        v50 = 256;
      else
        v50 = 0;
      v74 = *((_QWORD *)&v102 + 1);
      v75 = v50 | v99;
      *(_QWORD *)&v118 = v61;
      v91 = v104;
      v92 = *((_QWORD *)&v103 + 1);
      *((_QWORD *)&v118 + 1) = v60;
      v90 = *((_QWORD *)&v104 + 1);
      v119 = v79;
      v120 = v88;
      v121 = v89;
      v122 = v87;
      v123 = v78;
      v124 = v77;
      v125 = v80;
      a1 = v84;
      v126 = v84;
      v127 = v73;
      v128 = v72;
      v129 = v85;
      v130 = v86;
      v112 = v59;
      v113 = v70;
      v114 = v65;
      v115 = v64;
      v116 = v63;
      v117 = v62;
      static SwipeActions.Configuration.reduce(_:_:)((unint64_t *)&v119, (uint64_t *)&v112, (uint64_t)&v98);
      outlined consume of SwipeActions.Configuration?(v79, v88, v89, v87, v78, v77, v80, v84, v73, v72, v85, *((uint64_t *)&v85 + 1), v86);
      outlined retain of SwipeActions.Value((uint64_t)&v131, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
      v77 = *((_QWORD *)&v100 + 1);
      v78 = v100;
      v80 = v101;
      v84 = *((_QWORD *)&v101 + 1);
      v72 = *((_QWORD *)&v102 + 1);
      v73 = v102;
      v7 = *((_QWORD *)&v103 + 1);
      v6 = v103;
      v9 = *((_QWORD *)&v104 + 1);
      v8 = v104;
      if (BYTE1(v98))
        v51 = 256;
      else
        v51 = 0;
      v79 = v51 | v98;
      if (BYTE1(v99))
        v52 = 256;
      else
        v52 = 0;
      v5 = v52 | v99;
      v87 = *((_QWORD *)&v99 + 1);
      v88 = *((_QWORD *)&v98 + 1);
      if (v68 != v19)
      {
        v69 = 0;
        v11 = v97;
        v10 = v81;
        v13 = v82;
        v17 = v74;
        v12 = v75;
        v18 = v93;
        v3 = v94;
        Attribute = v91;
        v19 = v92;
        v21 = v90;
        v4 = v66;
        continue;
      }
      break;
    }
    v85 = v103;
    v89 = v52 | v99;
    v86 = v104;
    swift_bridgeObjectRelease();
    v54 = v77;
    v53 = v78;
    v56 = v80;
    a1 = v76;
LABEL_33:
    v3 = v72;
    v57 = v73;
    v55 = v79;
  }
  else
  {
    v55 = 0;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v53 = 0;
    v54 = 0;
    v56 = 0;
    v84 = 0;
    v85 = 0uLL;
    v57 = 0;
    v86 = 0uLL;
    v81 = 0;
    v82 = 0;
    v97 = 0;
    v74 = 0;
    v75 = 0;
    v83 = 0;
    v14 = 0;
    a1 = 0;
    v15 = 0;
    v16 = 0;
    v92 = 0;
    v93 = 0;
    v90 = 0;
    v91 = 0;
  }
LABEL_29:
  AGGraphSetUpdate();
  *(_QWORD *)a2 = v81;
  *(_QWORD *)(a2 + 8) = v97;
  *(_QWORD *)(a2 + 16) = v75;
  *(_QWORD *)(a2 + 24) = v83;
  *(_QWORD *)(a2 + 32) = v82;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = a1;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v16;
  *(_QWORD *)(a2 + 72) = v74;
  *(_QWORD *)(a2 + 80) = v93;
  *(_QWORD *)(a2 + 88) = v92;
  *(_QWORD *)(a2 + 96) = v91;
  *(_QWORD *)(a2 + 104) = v90;
  *(_QWORD *)(a2 + 112) = v55;
  *(_QWORD *)(a2 + 120) = v88;
  *(_QWORD *)(a2 + 128) = v89;
  *(_QWORD *)(a2 + 136) = v87;
  *(_QWORD *)(a2 + 144) = v53;
  *(_QWORD *)(a2 + 152) = v54;
  *(_QWORD *)(a2 + 160) = v56;
  *(_QWORD *)(a2 + 168) = v84;
  *(_QWORD *)(a2 + 176) = v57;
  *(_QWORD *)(a2 + 184) = v3;
  *(_OWORD *)(a2 + 192) = v85;
  *(_OWORD *)(a2 + 208) = v86;
  return static Update.end()();
}

void static SwipeActionsStyle.automatic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  __int16 v11;

  v10 = 0;
  v11 = 256;
  return View.swipeActions<A>(edge:allowsFullSwipe:style:content:)(a1 & 1, a2, &v10, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:style:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(double)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v49[4];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(double);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  _QWORD v74[2];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int16 v83;
  _QWORD v84[2];
  _QWORD v85[2];

  v71 = a8;
  v56 = a6;
  v66 = a5;
  v67 = a4;
  v69 = a2;
  v70 = a1;
  v72 = a9;
  v54 = a10;
  v68 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v64 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v13 = type metadata accessor for ModifiedContent();
  v65 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v49[-v15];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v17 = type metadata accessor for ModifiedContent();
  v59 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v57 = &v49[-v19];
  v20 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v85[0] = a10;
  v85[1] = v20;
  v21 = MEMORY[0x1E0CE2E70];
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v85);
  v53 = v22;
  v23 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v84[0] = v22;
  v84[1] = v23;
  v58 = MEMORY[0x18D75FFDC](v21, v17, v84);
  v25 = type metadata accessor for SwipeActionsModifier(0, v17, v58, v24);
  v61 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = &v49[-v27];
  v29 = type metadata accessor for ModifiedContent();
  v63 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = &v49[-v31];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v55 = v33;
  v60 = type metadata accessor for ModifiedContent();
  v62 = *(_QWORD *)(v60 - 8);
  v35 = MEMORY[0x1E0C80A78](v60, v34);
  v37 = &v49[-v36];
  v51 = *a3;
  v52 = *((unsigned __int8 *)a3 + 8);
  v50 = *((unsigned __int8 *)a3 + 9);
  v38 = v64;
  v67(v35);
  static SymbolVariants.fill.getter();
  v83 = v75;
  View.symbolVariant(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v38, a7);
  v39 = (uint64_t)v57;
  View.styleContext<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v16, v13);
  v40 = 256;
  *(_QWORD *)&v75 = v69 & 1 | ((unint64_t)(v70 & 1) << 8);
  *((_QWORD *)&v75 + 1) = v51;
  if (!v50)
    v40 = 0;
  v76 = v40 | v52;
  v77 = MEMORY[0x1E0DEE9D8];
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v41 = SwipeActionsModifier.init(actionsView:configuration:)(v39, &v75, v59, v58, (uint64_t)v28);
  v42 = v71;
  MEMORY[0x18D75B4AC](v28, v56, v25, v71, v41);
  (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v28, v25);
  LOBYTE(v75) = 1;
  v74[0] = v42;
  v74[1] = &protocol witness table for SwipeActionsModifier<A>;
  v43 = MEMORY[0x1E0CE2E70];
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v29, v74);
  MEMORY[0x18D75B4AC](&v75, v29, v55, v44);
  (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v32, v29);
  v45 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v73[0] = v44;
  v73[1] = v45;
  v46 = v60;
  v47 = MEMORY[0x18D75FFDC](v43, v60, v73);
  View.sharingPickerHost()(v46, v47);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v62 + 8))(v37, v46);
}

uint64_t type metadata accessor for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SwipeActionsModifier);
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(double)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[3];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(double);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[2];
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int16 v82;
  _QWORD v83[2];
  _QWORD v84[2];

  v52 = a8;
  v60 = a7;
  v61 = a6;
  v65 = a5;
  v67 = a4;
  v66 = a3;
  v63 = a2;
  v64 = a1;
  v69 = a9;
  v49[2] = a12;
  v68 = a11;
  v62 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v14 = type metadata accessor for ModifiedContent();
  v59 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v49 - v16;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v18 = type metadata accessor for ModifiedContent();
  v54 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v51 = (char *)v49 - v20;
  v21 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v84[0] = a12;
  v84[1] = v21;
  v22 = MEMORY[0x1E0CE2E70];
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v14, v84);
  v49[1] = v23;
  v24 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v83[0] = v23;
  v83[1] = v24;
  v53 = MEMORY[0x18D75FFDC](v22, v18, v83);
  v26 = type metadata accessor for SwipeActionsModifier(0, v18, v53, v25);
  v56 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v49 - v28;
  v30 = type metadata accessor for ModifiedContent();
  v58 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)v49 - v32;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v50 = v34;
  v55 = type metadata accessor for ModifiedContent();
  v57 = *(_QWORD *)(v55 - 8);
  v36 = MEMORY[0x1E0C80A78](v55, v35);
  v38 = (char *)v49 - v37;
  v61(v36);
  static SymbolVariants.fill.getter();
  v82 = v72;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v13, a10);
  v39 = (uint64_t)v51;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v14);
  v72 = v63 & 1 | ((unint64_t)(v64 & 1) << 8);
  v73 = xmmword_187C61530;
  v40 = v66;
  v74 = MEMORY[0x1E0DEE9D8];
  v75 = v66;
  v41 = v67;
  v76 = v67;
  v77 = v65;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0;
  SwipeActionsModifier.init(actionsView:configuration:)(v39, (__int128 *)&v72, v54, v53, (uint64_t)v29);
  outlined copy of Binding<NavigationSplitViewColumn>?(v40, v41);
  v42 = v68;
  MEMORY[0x18D75B4AC](v29, v52, v26, v68);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v26);
  LOBYTE(v72) = 1;
  v71[0] = v42;
  v71[1] = &protocol witness table for SwipeActionsModifier<A>;
  v43 = MEMORY[0x1E0CE2E70];
  v44 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v30, v71);
  MEMORY[0x18D75B4AC](&v72, v30, v50, v44);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v30);
  v45 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v70[0] = v44;
  v70[1] = v45;
  v46 = v55;
  v47 = MEMORY[0x18D75FFDC](v43, v55, v70);
  View.sharingPickerHost()(v46, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v38, v46);
}

__n128 SwipeActionsModifier.init(actionsView:configuration:)@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v18 = *a2;
  v16 = a2[2];
  v17 = a2[1];
  v14 = a2[4];
  v15 = a2[3];
  v13 = (__n128)a2[5];
  v8 = *((_QWORD *)a2 + 12);
  v9 = *((_QWORD *)a2 + 13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v11 = a5 + *(int *)(type metadata accessor for SwipeActionsModifier(0, a3, a4, v10) + 36);
  *(_OWORD *)v11 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v16;
  *(_OWORD *)(v11 + 48) = v15;
  result = v13;
  *(_OWORD *)(v11 + 64) = v14;
  *(__n128 *)(v11 + 80) = v13;
  *(_QWORD *)(v11 + 96) = v8;
  *(_QWORD *)(v11 + 104) = v9;
  return result;
}

uint64_t View.swipeActions<A>(edge:allowsFullSwipe:style:isPresented:resultToken:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, void (*a8)(double)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(double);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[2];
  _QWORD v99[2];
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  _QWORD v114[2];
  _QWORD v115[2];

  v88 = a8;
  v93 = a6;
  v94 = a5;
  v92 = a4;
  v90 = a2;
  v91 = a1;
  v96 = a9;
  v87 = a10;
  v79 = a11;
  v72 = a14;
  v95 = a13;
  v89 = *(_QWORD *)(a12 - 8);
  v80 = a12;
  MEMORY[0x1E0C80A78](a1, a2);
  v83 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v17 = type metadata accessor for ModifiedContent();
  v86 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v63 - v19;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v21 = type metadata accessor for ModifiedContent();
  v76 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v97 = (uint64_t)&v63 - v23;
  v24 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v115[0] = a14;
  v115[1] = v24;
  v25 = MEMORY[0x1E0CE2E70];
  v26 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v115);
  v71 = v26;
  v27 = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v114[0] = v26;
  v114[1] = v27;
  v75 = MEMORY[0x18D75FFDC](v25, v21, v114);
  v29 = type metadata accessor for SwipeActionsModifier(0, v21, v75, v28);
  v82 = *(_QWORD *)(v29 - 8);
  v78 = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v69 = (uint64_t)&v63 - v31;
  v32 = type metadata accessor for ModifiedContent();
  v33 = *(_QWORD *)(v32 - 8);
  v70 = v32;
  v85 = v33;
  MEMORY[0x1E0C80A78](v32, v34);
  v74 = (char *)&v63 - v35;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v77 = v36;
  v81 = type metadata accessor for ModifiedContent();
  v84 = *(_QWORD *)(v81 - 8);
  v38 = MEMORY[0x1E0C80A78](v81, v37);
  v73 = (char *)&v63 - v39;
  v65 = *a3;
  v66 = *((unsigned __int8 *)a3 + 8);
  v64 = *((unsigned __int8 *)a3 + 9);
  v40 = *a7;
  v67 = a7[1];
  v41 = a7[2];
  v42 = a7[3];
  v44 = a7[4];
  v43 = a7[5];
  v63 = v43;
  v68 = a7[6];
  v45 = v83;
  v88(v38);
  static SymbolVariants.fill.getter();
  v113 = v100;
  v46 = v80;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v46);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v20, v17);
  *(_QWORD *)&v100 = v90 & 1 | ((unint64_t)(v91 & 1) << 8);
  *((_QWORD *)&v100 + 1) = v65;
  v47 = 256;
  if (!v64)
    v47 = 0;
  v101 = v47 | v66;
  v102 = MEMORY[0x1E0DEE9D8];
  v48 = v92;
  v49 = v94;
  v103 = v92;
  v104 = v94;
  v105 = v93;
  v106 = v40;
  v50 = v67;
  v107 = v67;
  v108 = v41;
  v109 = v42;
  v110 = v44;
  v111 = v43;
  v112 = v68;
  v51 = v69;
  SwipeActionsModifier.init(actionsView:configuration:)(v97, &v100, v76, v75, v69);
  outlined copy of Binding<NavigationSplitViewColumn>?(v48, v49);
  outlined copy of Binding<SwipeActionResultToken?>?(v40, v50, v41, v42, v44, v63);
  v52 = v74;
  v53 = v78;
  v54 = v95;
  MEMORY[0x18D75B4AC](v51, v79, v78, v95);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v51, v53);
  LOBYTE(v100) = 1;
  v99[0] = v54;
  v99[1] = &protocol witness table for SwipeActionsModifier<A>;
  v55 = MEMORY[0x1E0CE2E70];
  v56 = v70;
  v57 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v70, v99);
  v58 = v73;
  MEMORY[0x18D75B4AC](&v100, v56, v77, v57);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v52, v56);
  v59 = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v98[0] = v57;
  v98[1] = v59;
  v60 = v81;
  v61 = MEMORY[0x18D75FFDC](v55, v81, v98);
  View.sharingPickerHost()(v60, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v58, v60);
}

void static SwipeActionsStyle.standard.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_WORD *)(a1 + 8) = 256;
}

void static SwipeActionsStyle.rounded.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
}

void static SwipeActionsStyle.rounded(radius:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
}

void static SwipeActionsModifier._makeView(modifier:inputs:body:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int OffsetAttribute2;
  id v20;
  uint64_t v21;
  _QWORD v22[2];
  unsigned int v23;
  _QWORD *v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  ValueMetadata *v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  char v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  char v70;
  int v71;
  uint64_t v72;

  v30 = a4;
  v31 = a3;
  v32 = a7;
  v72 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a2 + 28);
  v33 = *(_DWORD *)(a2 + 24);
  v13 = *(_DWORD *)(a2 + 32);
  v41 = *(_DWORD *)(a2 + 36);
  v42 = v13;
  v40 = *(_QWORD *)(a2 + 40);
  v29 = *(_QWORD *)(a2 + 48);
  v15 = *(_DWORD *)(a2 + 56);
  v14 = *(_DWORD *)(a2 + 60);
  v38 = *(_DWORD *)(a2 + 64);
  v39 = v14;
  v16 = *(_DWORD *)(a2 + 68);
  v36 = *(_DWORD *)(a2 + 72);
  v37 = v16;
  v17 = *(_DWORD *)(a2 + 76);
  v34 = *(_DWORD *)(a2 + 80);
  v35 = v17;
  v28 = v8;
  LODWORD(v60) = v8;
  type metadata accessor for SwipeActionsModifier(255, a5, a6, a4);
  v27 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
    closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(1, a5, a6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v47 = v9;
  v25 = v10;
  v26 = v12;
  v48 = v10;
  v49 = v11;
  v22[1] = v11;
  v50 = v33;
  v51 = v12;
  v52 = __PAIR64__(v41, v42);
  *(_QWORD *)&v53 = v40;
  *((_QWORD *)&v53 + 1) = v29;
  v23 = v15;
  *(_QWORD *)&v54 = __PAIR64__(v39, v15);
  *((_QWORD *)&v54 + 1) = __PAIR64__(v37, v38);
  *(_QWORD *)&v55 = __PAIR64__(v35, v36);
  DWORD2(v55) = v34;
  v20 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, &v47, 1, (uint64_t)&v60);
  v24 = v22;
  v47 = v60;
  v48 = v61;
  v49 = v62;
  v50 = v63;
  v52 = v64;
  v53 = v65;
  v54 = v66;
  v55 = v67;
  v56 = v68;
  v57 = v69;
  v58 = v70;
  v59 = v71;
  MEMORY[0x1E0C80A78](v20, v21);
  v43 = &type metadata for AllPlatformItemListFlags;
  v44 = a5;
  v45 = &protocol witness table for AllPlatformItemListFlags;
  v46 = a6;
  type metadata accessor for PlatformItemListGenerator();
}

uint64_t sub_187813E00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  _BYTE v27[96];

  v9 = a1;
  *(_QWORD *)(v3 - 16) = a1;
  *(_QWORD *)(v3 - 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGenerator<A, B>, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  v11 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1 + 176, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, v2, v9, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  v13 = *(_DWORD *)(v1 + 20);
  v14 = *(void **)(v1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  v15 = swift_release();
  *(_DWORD *)(v1 + 24) = *(_DWORD *)(v1 + 144);
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)&v27[-16] = v5;
  *(_QWORD *)&v27[-8] = v4;
  *(_DWORD *)(v8 - 208) = *(_DWORD *)(v1 + 52);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SwipeActions.Configuration?>, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  v17 = _GraphValue.value.getter();
  LODWORD(v9) = v17;
  *(_QWORD *)(v8 - 208) = v7;
  *(_DWORD *)(v8 - 200) = *(_DWORD *)(v1 + 32);
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v1 + 8);
  v18 = *(_DWORD *)(v1 + 36);
  *(_DWORD *)(v8 - 184) = *(_DWORD *)(v1 + 92);
  *(_DWORD *)(v8 - 180) = v18;
  v19 = *(_DWORD *)(v1 + 128);
  *(_DWORD *)(v8 - 176) = *(_DWORD *)(v1 + 132);
  *(_DWORD *)(v8 - 172) = v19;
  *(_QWORD *)(v8 - 168) = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v8 - 160) = v6;
  v20 = *(_DWORD *)(v1 + 116);
  *(_DWORD *)(v8 - 152) = v13;
  *(_DWORD *)(v8 - 148) = v20;
  v21 = *(_DWORD *)(v1 + 108);
  *(_DWORD *)(v8 - 144) = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v8 - 140) = v21;
  v22 = *(_DWORD *)(v1 + 100);
  *(_DWORD *)(v8 - 136) = *(_DWORD *)(v1 + 104);
  *(_DWORD *)(v8 - 132) = v22;
  *(_DWORD *)(v8 - 128) = *(_DWORD *)(v1 + 96);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(v17, v8 - 208);
  *(_QWORD *)(v8 - 208) = v6;
  *(_DWORD *)(v8 - 200) = v13;
  MEMORY[0x1E0C80A78](v23, v24);
  *(_DWORD *)&v27[-16] = *(_DWORD *)(v1 + 24);
  *(_DWORD *)&v27[-12] = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  v26 = *(_QWORD **)(v1 + 80);
  *v26 = *(_QWORD *)(v1 + 176);
  v26[1] = *(_QWORD *)(v1 + 184);
  return result;
}

uint64_t implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t static SwipeActionsModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, ValueMetadata **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v10;
  ValueMetadata *v11;
  int v12;
  ValueMetadata *v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  ValueMetadata *v18;
  ValueMetadata *v19;
  ValueMetadata *v20;
  int v21;
  ValueMetadata *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int OffsetAttribute2;
  id v28;
  uint64_t v29;
  _QWORD v31[6];
  ValueMetadata *v32;
  int v33;
  int v34;
  ValueMetadata *v35;
  ValueMetadata *v36;
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  ValueMetadata *v47;
  int v48;
  ValueMetadata *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  ValueMetadata *v58;
  uint64_t v59;
  ValueMetadata *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  ValueMetadata *v66;
  int v67;
  ValueMetadata *v68;
  int v69;
  int v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  char v77;
  int v78;
  ValueMetadata *v79;
  int v80;
  ValueMetadata *v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  ValueMetadata *v86;
  ValueMetadata *v87;
  ValueMetadata *v88;
  int v89;
  ValueMetadata *v90;
  char v91;
  uint64_t v92;

  v40 = a4;
  v38 = a7;
  v92 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 2);
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 6);
  v15 = *((_DWORD *)a2 + 7);
  v16 = *((_DWORD *)a2 + 8);
  v17 = *((_DWORD *)a2 + 9);
  v19 = a2[5];
  v18 = a2[6];
  v20 = a2[7];
  v21 = *((_DWORD *)a2 + 16);
  v22 = a2[9];
  v23 = *((unsigned __int8 *)a2 + 80);
  v79 = *a2;
  v45 = v14;
  v46 = v12;
  v80 = v12;
  v81 = v13;
  v82 = v14;
  v83 = v15;
  v43 = v16;
  v44 = v15;
  v84 = v16;
  v85 = v17;
  v42 = v17;
  v86 = v19;
  v87 = v18;
  v35 = v20;
  v36 = v18;
  v88 = v20;
  v33 = v23;
  v34 = v21;
  v89 = v21;
  v90 = v22;
  v91 = v23;
  lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v37 = v22;
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  v39 = a3;
  v41 = v10;
  if (v66 == 1)
  {
    v32 = v13;
    v25 = a6;
    PropertyList.subscript.setter();
    LODWORD(v66) = v10;
    type metadata accessor for SwipeActionsModifier(255, a5, a6, v26);
    v31[3] = type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64))
      closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(1, a5, a6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v66 = v11;
    v67 = v46;
    v68 = v32;
    v69 = v45;
    v70 = v44;
    v71 = __PAIR64__(v42, v43);
    *(_QWORD *)&v72 = v19;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    _ViewInputs.init(withoutGeometry:)();
    v58 = v47;
    LODWORD(v59) = v48;
    v60 = v49;
    v61 = v50;
    v62 = v51;
    v63 = v52;
    v64 = v53;
    v65 = DWORD2(v53);
    v28 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v58, 1, (uint64_t)&v66);
    v31[5] = v31;
    v51 = v72;
    v47 = v66;
    v48 = v67;
    v49 = v68;
    LODWORD(v50) = v69;
    *((_QWORD *)&v50 + 1) = v71;
    v52 = v73;
    v53 = v74;
    v54 = v75;
    v55 = v76;
    v56 = v77;
    v57 = v78;
    MEMORY[0x1E0C80A78](v28, v29);
    v58 = &type metadata for AllPlatformItemListFlags;
    v59 = a5;
    v60 = (ValueMetadata *)&protocol witness table for AllPlatformItemListFlags;
    *(_QWORD *)&v61 = v25;
    type metadata accessor for PlatformItemListGenerator();
  }
  type metadata accessor for SwipeActionsModifier(0, a5, a6, v24);
  LODWORD(v47) = v41;
  v66 = v11;
  v67 = v46;
  v68 = v13;
  v69 = v45;
  v70 = v44;
  v71 = __PAIR64__(v42, v43);
  *(_QWORD *)&v72 = v19;
  *((_QWORD *)&v72 + 1) = v36;
  *(_QWORD *)&v73 = v35;
  DWORD2(v73) = v34;
  *(_QWORD *)&v74 = v37;
  BYTE8(v74) = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ViewModifier.makeMultiViewList(modifier:inputs:body:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for SwipeActionsModifier(0, a2, a3, a4);
  v10[3] = a2;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v10, a2, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v6 = type metadata accessor for SwipeActionsModifier(0, a2, a3, a4);
  v7 = a1 + *(int *)(v6 + 36);
  v13[2] = v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = v8;
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v13, v9, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  return v13[5];
}

uint64_t SwipeActionsModifier.WriteTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  TableRow.MakeList.traits.getter(a1, &v5);
  if (v5)
    v6 = v5;
  else
    ViewTraitCollection.init()();
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v3 = AGCreateWeakAttribute();
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v3);
  result = ViewTraitCollection.subscript.setter();
  *a2 = v6;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SwipeActionsModifier<A>.WriteTrait@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return SwipeActionsModifier.WriteTrait.value.getter(*v1, a1);
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SwipeActionsModifier<A>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SwipeActionsModifier<A>@<X0>(int *a1@<X0>, ValueMetadata **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static SwipeActionsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SwipeActionsUseTraitKeyInput()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SwipeActionsUseTraitKeyInput()
{
  lazy protocol witness table accessor for type SwipeActionsUseTraitKeyInput and conformance SwipeActionsUseTraitKeyInput();
  return PropertyList.subscript.setter();
}

uint64_t SwipeActions.Value.init(itemList:configuration:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v45 = *a2;
  v47 = a2[1];
  v53 = *((_QWORD *)a2 + 1);
  v27 = a2[16];
  v23 = a2[17];
  v4 = *((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  v54 = *((_QWORD *)a2 + 7);
  v6 = *((_QWORD *)a2 + 9);
  v49 = a2[48];
  v50 = *((_QWORD *)a2 + 8);
  v7 = *((_QWORD *)a2 + 10);
  v8 = *((_QWORD *)a2 + 11);
  v19 = v8;
  v10 = *((_QWORD *)a2 + 12);
  v9 = *((_QWORD *)a2 + 13);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  outlined copy of Binding<SwipeActionResultToken?>?(v54, v50, v6, v7, v8, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  v11 = v7;
  outlined copy of Binding<SwipeActionResultToken?>?(v54, v50, v6, v7, v19, v10);
  v51 = v10;
  outlined consume of Binding<SwipeActionResultToken?>?(v54, v50, v6, v7, v19, v10);
  v52 = v4;
  outlined consume of Binding<NavigationSplitViewColumn>?(v4, v5);
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    v31 = 0;
    v32 = 0;
    v28 = 0;
    v29 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v21 = 0;
    v22 = 0;
    v12 = 0;
    v13 = 0;
    v33 = 0;
    v14 = 256;
    if (!v23)
      v14 = 0;
    v40 = v14 | v27;
    v41 = v45 | 0x100;
    v46 = v10;
    v48 = v9;
    v44 = v19;
    v43 = v11;
    v42 = v6;
    v39 = v50;
    v15 = v54;
    v38 = v54;
    v36 = v5;
    v37 = v49;
    v34 = a1;
    v35 = v4;
    v30 = v53;
    v53 = 0;
    v16 = 0;
  }
  else
  {
    v46 = 0;
    v48 = 0;
    v44 = 0;
    v42 = 0;
    v43 = 0;
    v38 = 0;
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v40 = 0;
    v41 = 0;
    v30 = 0;
    v17 = 256;
    if (!v23)
      v17 = 0;
    v33 = v17 | v27;
    v32 = v9;
    v31 = v10;
    v28 = v7;
    v29 = v19;
    v25 = v50;
    v26 = v6;
    v15 = v54;
    v24 = v54;
    v21 = v5;
    v22 = v49;
    v12 = v4;
    v13 = a1;
    v16 = v45;
  }
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v52, v5);
  result = outlined consume of Binding<SwipeActionResultToken?>?(v15, v50, v6, v11, v19, v51);
  *a3 = v16;
  a3[1] = v53;
  a3[2] = v33;
  a3[3] = v13;
  a3[4] = v12;
  a3[5] = v21;
  a3[6] = v22;
  a3[7] = v24;
  a3[8] = v25;
  a3[9] = v26;
  a3[10] = v28;
  a3[11] = v29;
  a3[12] = v31;
  a3[13] = v32;
  a3[14] = v41;
  a3[15] = v30;
  a3[16] = v40;
  a3[17] = v34;
  a3[18] = v35;
  a3[19] = v36;
  a3[20] = v37;
  a3[21] = v38;
  a3[22] = v39;
  a3[23] = v42;
  a3[24] = v43;
  a3[25] = v44;
  a3[26] = v46;
  a3[27] = v48;
  return result;
}

double SwipeActions.Value.reduce(_:)(__int128 *a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  char v80;
  unint64_t v81;
  unsigned __int8 v82;
  char v83;
  unint64_t v84;
  __int128 v85;
  unsigned __int8 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;

  v56 = a1[9];
  v57 = a1[8];
  v54 = a1[11];
  v55 = a1[10];
  v53 = a1[12];
  v51 = *((_QWORD *)a1 + 27);
  v52 = *((_QWORD *)a1 + 26);
  v46 = v1[1];
  v42 = v1[3];
  v44 = v1[2];
  v2 = v1[5];
  v40 = v1[4];
  v3 = v1[6];
  v4 = v1[7];
  v6 = v1[8];
  v5 = v1[9];
  v7 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = v1[13];
  v65 = *v1;
  v48 = v65;
  v66 = v46;
  v67 = v44;
  v68 = v42;
  v69 = v40;
  v70 = v2;
  v71 = v3;
  v72 = v4;
  v73 = v6;
  v74 = v5;
  v75 = v7;
  v76 = v8;
  v77 = v9;
  v78 = v10;
  v11 = a1[1];
  v58 = *a1;
  v59 = v11;
  v12 = a1[3];
  v60 = a1[2];
  v61 = v12;
  v13 = a1[5];
  v62 = a1[4];
  v63 = v13;
  v50 = a1[7];
  v64 = a1[6];
  static SwipeActions.Configuration.reduce(_:_:)(&v65, (uint64_t *)&v58, (uint64_t)&v79);
  outlined consume of SwipeActions.Configuration?(v48, v46, v44, v42, v40, v2, v3, v4, v6, v5, v7, v8, v9);
  v14 = v81;
  v15 = v82;
  v16 = v84;
  v17 = v86;
  v18 = v90;
  if (v80)
    v19 = 256;
  else
    v19 = 0;
  v20 = v19 | v79;
  if (v83)
    v21 = 256;
  else
    v21 = 0;
  *v1 = v20;
  v1[1] = v14;
  v1[2] = v21 | v15;
  v1[3] = v16;
  *((_OWORD *)v1 + 2) = v85;
  v1[6] = v17;
  *(_OWORD *)(v1 + 7) = v87;
  *(_OWORD *)(v1 + 9) = v88;
  *(_OWORD *)(v1 + 11) = v89;
  v1[13] = v18;
  v47 = v1[15];
  v43 = v1[17];
  v45 = v1[16];
  v22 = v1[19];
  v41 = v1[18];
  v23 = v1[20];
  v24 = v1[21];
  v26 = v1[22];
  v25 = v1[23];
  v27 = v1[24];
  v28 = v1[25];
  v29 = v1[26];
  v30 = v1[27];
  v65 = v1[14];
  v49 = v65;
  v66 = v47;
  v67 = v45;
  v68 = v43;
  v69 = v41;
  v70 = v22;
  v71 = v23;
  v72 = v24;
  v73 = v26;
  v74 = v25;
  v75 = v27;
  v76 = v28;
  v77 = v29;
  v78 = v30;
  v58 = v50;
  v59 = v57;
  v60 = v56;
  v61 = v55;
  v62 = v54;
  v63 = v53;
  *(_QWORD *)&v64 = v52;
  *((_QWORD *)&v64 + 1) = v51;
  static SwipeActions.Configuration.reduce(_:_:)(&v65, (uint64_t *)&v58, (uint64_t)&v79);
  outlined consume of SwipeActions.Configuration?(v49, v47, v45, v43, v41, v22, v23, v24, v26, v25, v27, v28, v29);
  v31 = v81;
  v32 = v84;
  v33 = v86;
  v34 = v90;
  if (v80)
    v35 = 256;
  else
    v35 = 0;
  v36 = v35 | v79;
  if (v83)
    v37 = 256;
  else
    v37 = 0;
  v38 = v37 | v82;
  v1[14] = v36;
  v1[15] = v31;
  v1[16] = v38;
  v1[17] = v32;
  *((_OWORD *)v1 + 9) = v85;
  v1[20] = v33;
  *(_OWORD *)(v1 + 21) = v87;
  *(_OWORD *)(v1 + 23) = v88;
  result = *(double *)&v89;
  *(_OWORD *)(v1 + 25) = v89;
  v1[27] = v34;
  return result;
}

uint64_t static SwipeActions.Configuration.reduce(_:_:)@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;

  v4 = *a1;
  v48 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v54 = a1[5];
  v8 = a1[6];
  v52 = a1[8];
  v42 = a1[9];
  v43 = a1[7];
  v53 = a1[10];
  v51 = a1[11];
  v57 = a1[12];
  v50 = a1[13];
  v10 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v46 = a2[4];
  v39 = a2[7];
  v40 = a2[6];
  v37 = a2[9];
  v38 = a2[8];
  v35 = a2[11];
  v36 = a2[10];
  v33 = a2[13];
  v34 = a2[12];
  v41 = a2[5];
  if (v5)
  {
    swift_bridgeObjectRetain();
    v13 = v5;
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v58 = v13;
  v56 = v8;
  if (v12)
    v14 = swift_bridgeObjectRetain();
  else
    v14 = MEMORY[0x1E0DEE9D8];
  specialized Array.append<A>(contentsOf:)(v14);
  if (!v5 || (v4 & 1) != 0)
  {
    v15 = (v12 == 0) | v10;
    if (!v5)
    {
      if (v12)
        v23 = BYTE1(v10) & 1;
      else
        v23 = 1;
      v16 = (v11 >> 8) & 1;
      if (v12)
        v24 = v9;
      else
        v24 = 0;
      v55 = v24;
      if (v12)
        v18 = v11;
      else
        v18 = 0;
      if (!v12)
        LODWORD(v16) = 0;
      LOBYTE(v47) = v23;
      if (!v12)
      {
        v20 = v53;
        v19 = v7;
        v21 = v52;
        goto LABEL_46;
      }
      v20 = v53;
      v19 = v7;
      v21 = v52;
      if ((v11 & 0x100) == 0)
        goto LABEL_39;
LABEL_41:
      if (v12 && (_DWORD)v16 && v55 | v18)
      {
        v45 = 0;
        v55 = 1;
LABEL_47:
        v44 = 1;
        goto LABEL_48;
      }
LABEL_46:
      v55 = 0;
      v45 = 0;
      goto LABEL_47;
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = (v11 >> 8) & 1;
  if (v12)
    v17 = v9;
  else
    v17 = 0;
  v55 = v17;
  if (v12)
    v18 = v11;
  else
    v18 = 0;
  if (!v12)
    LODWORD(v16) = 0;
  v19 = v7;
  v47 = (v4 >> 8) & 1;
  if ((v6 & 0x100) != 0)
  {
    v21 = v52;
    if (v12 && (v11 & 0x100) == 0)
    {
      v20 = v53;
      goto LABEL_39;
    }
    v22 = v54;
    if (v48 | v6)
    {
      v45 = 0;
      v55 = 1;
      v44 = 1;
      v20 = v53;
      goto LABEL_49;
    }
    v20 = v53;
    goto LABEL_41;
  }
  v55 = v48;
  v18 = v6;
  v20 = v53;
  v21 = v52;
LABEL_39:
  v44 = 0;
  v45 = v18 & 1;
LABEL_48:
  v22 = v54;
LABEL_49:
  v25 = v58;
  v49 = v15;
  if (v5)
  {
    if (v22)
    {
      v46 = v19;
      swift_retain();
      swift_retain();
      v27 = v42;
      v26 = v43;
      if (!v21)
        goto LABEL_52;
LABEL_60:
      swift_retain();
      swift_retain();
      v28 = v50;
      v30 = v51;
      result = outlined copy of SwipeActionResultToken?(v27, v20, v51, v57);
      goto LABEL_63;
    }
    v31 = v58;
    if (!v12)
      goto LABEL_57;
LABEL_55:
    outlined copy of Binding<NavigationSplitViewColumn>?(v46, v41);
    v32 = v41;
    v56 = v40;
    goto LABEL_58;
  }
  v19 = 0;
  v31 = v58;
  if (v12)
    goto LABEL_55;
LABEL_57:
  v46 = 0;
  v32 = 0;
  v56 = 0;
LABEL_58:
  outlined consume of Binding<NavigationSplitViewColumn>?(v19, 0);
  if (!v5)
  {
    v26 = 0;
    v27 = 0;
    v20 = 0;
    v51 = 0;
    v57 = 0;
    v25 = v31;
    v22 = v32;
    if (v12)
      goto LABEL_53;
LABEL_62:
    result = outlined consume of Binding<SwipeActionResultToken?>?(v26, 0, v27, v20, v51, v57);
    v26 = 0;
    v21 = 0;
    v27 = 0;
    v20 = 0;
    v30 = 0;
    v57 = 0;
    v28 = 0;
    goto LABEL_63;
  }
  v27 = v42;
  v26 = v43;
  v21 = v52;
  v25 = v31;
  v22 = v32;
  if (v52)
    goto LABEL_60;
LABEL_52:
  if (!v12)
    goto LABEL_62;
LABEL_53:
  v28 = v33;
  outlined copy of Binding<SwipeActionResultToken?>?(v39, v38, v37, v36, v35, v34);
  result = outlined consume of Binding<SwipeActionResultToken?>?(v26, 0, v27, v20, v51, v57);
  v26 = v39;
  v21 = v38;
  v27 = v37;
  v30 = v35;
  v20 = v36;
  v57 = v34;
LABEL_63:
  *(_BYTE *)a3 = v49 & 1;
  *(_BYTE *)(a3 + 1) = v47;
  *(_QWORD *)(a3 + 8) = v55;
  *(_BYTE *)(a3 + 16) = v45;
  *(_BYTE *)(a3 + 17) = v44;
  *(_QWORD *)(a3 + 24) = v25;
  *(_QWORD *)(a3 + 32) = v46;
  *(_QWORD *)(a3 + 40) = v22;
  *(_BYTE *)(a3 + 48) = v56;
  *(_QWORD *)(a3 + 56) = v26;
  *(_QWORD *)(a3 + 64) = v21;
  *(_QWORD *)(a3 + 72) = v27;
  *(_QWORD *)(a3 + 80) = v20;
  *(_QWORD *)(a3 + 88) = v30;
  *(_QWORD *)(a3 + 96) = v57;
  *(_QWORD *)(a3 + 104) = v28;
  return result;
}

double (*SwipeActions.MakeValueTransform.value.getter())()
{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double (*result)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[14];

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v1 = Value[3];
  if (!v1)
    return (double (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v2 = Value[12];
  v3 = Value[13];
  v5 = Value[10];
  v4 = Value[11];
  v6 = Value[9];
  v23 = Value[7];
  v24 = Value[8];
  v21 = Value[5];
  v22 = Value[6];
  v20 = Value[4];
  v8 = Value[1];
  v7 = Value[2];
  v9 = *Value;
  AGGraphGetValue();
  v25 = v9 & 0x101;
  v26 = v8;
  v27 = v7 & 0x1FF;
  v28 = v1;
  v29 = v20;
  v30 = v21;
  v31 = v22;
  v32 = v23;
  v33 = v24;
  v34 = v6;
  v35 = v5;
  v36 = v4;
  v37 = v2;
  v38 = v3;
  outlined copy of SwipeActions.Configuration?(v9, v8, v7, v1, v20, v21, v22, v23, v24, v6, v5, v4, v2);
  v10 = swift_bridgeObjectRetain();
  SwipeActions.Value.init(itemList:configuration:)(v10, (unsigned __int8 *)&v25, v39);
  v11 = (_OWORD *)swift_allocObject();
  v12 = v39[11];
  v11[11] = v39[10];
  v11[12] = v12;
  v13 = v39[13];
  v11[13] = v39[12];
  v11[14] = v13;
  v14 = v39[7];
  v11[7] = v39[6];
  v11[8] = v14;
  v15 = v39[9];
  v11[9] = v39[8];
  v11[10] = v15;
  v16 = v39[3];
  v11[3] = v39[2];
  v11[4] = v16;
  v17 = v39[5];
  v11[5] = v39[4];
  v11[6] = v17;
  v18 = v39[1];
  result = _s7SwiftUI12SwipeActionsO18MakeValueTransformV5valueyyAC0F0VzcvgyAHzcfU0_TA_0;
  v11[1] = v39[0];
  v11[2] = v18;
  return result;
}

double closure #2 in SwipeActions.MakeValueTransform.value.getter(uint64_t a1, __int128 *a2)
{
  return SwipeActions.Value.reduce(_:)(a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SwipeActions.MakeValueTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  double (*Value)();
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  Value = SwipeActions.MakeValueTransform.value.getter();
  v4 = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = Value;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SwipeActions.MakeValue@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[224];

  _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v3);
  return outlined init with take of SwipeActions.Value?((uint64_t)v3, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance SwipeActions.MakeValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  v5 = Value[2];
  v6 = Value[3];
  v8 = Value[4];
  v7 = Value[5];
  v10 = Value[6];
  v9 = Value[7];
  v11 = Value[8];
  v12 = Value[9];
  v13 = Value[10];
  v14 = Value[11];
  v16 = Value[12];
  result = Value[13];
  if (v6)
  {
    v23 = result;
    v21 = v10;
    v22 = v9;
    v19 = v8;
    v20 = v7;
    v17 = v11;
    AGGraphGetValue();
    v24 = v3 & 0x101;
    v25 = v4;
    v26 = v5 & 0x1FF;
    v27 = v6;
    v28 = v19;
    v29 = v20;
    v30 = v21;
    v31 = v22;
    v32 = v17;
    v33 = v12;
    v34 = v13;
    v35 = v14;
    v36 = v16;
    v37 = v23;
    outlined copy of SwipeActions.Configuration?(v3, v4, v5, v6, v19, v20, v21, v22, v17, v12, v13, v14, v16);
    v18 = swift_bridgeObjectRetain();
    return SwipeActions.Value.init(itemList:configuration:)(v18, (unsigned __int8 *)&v24, a1);
  }
  else
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = 0;
    a1[4] = v8;
    a1[5] = v7;
    a1[6] = v10;
    a1[7] = v9;
    a1[8] = v11;
    a1[9] = v12;
    a1[10] = v13;
    a1[11] = v14;
    a1[12] = v16;
    a1[13] = result;
    a1[14] = v3;
    a1[15] = v4;
    a1[16] = v5;
    a1[17] = 0;
    a1[18] = v8;
    a1[19] = v7;
    a1[20] = v10;
    a1[21] = v9;
    a1[22] = v11;
    a1[23] = v12;
    a1[24] = v13;
    a1[25] = v14;
    a1[26] = v16;
    a1[27] = result;
  }
  return result;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance SwipeActions.Key@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SwipeActions.Key(uint64_t a1, void (*a2)(_OWORD *__return_ptr))
{
  __int128 v3[14];
  _OWORD v4[14];

  a2(v4);
  v3[10] = v4[10];
  v3[11] = v4[11];
  v3[12] = v4[12];
  v3[13] = v4[13];
  v3[6] = v4[6];
  v3[7] = v4[7];
  v3[8] = v4[8];
  v3[9] = v4[9];
  v3[2] = v4[2];
  v3[3] = v4[3];
  v3[4] = v4[4];
  v3[5] = v4[5];
  v3[0] = v4[0];
  v3[1] = v4[1];
  SwipeActions.Value.reduce(_:)(v3);
  return outlined retain of SwipeActions.Value((uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined consume of SwipeActions.Configuration?);
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance SwipeActions.Feature()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<SwipeActions.Key>, (uint64_t)&type metadata for SwipeActions.Key, (uint64_t)&protocol witness table for SwipeActions.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<SwipeActions.Key> and conformance _AnyPreferenceKey<A>();
  return PreferenceKeys.add(_:)();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance SwipeActions.Feature()
{
  uint64_t v0;
  uint64_t result;

  _ViewOutputs.subscript.getter();
  result = AGCreateWeakAttribute();
  *(_QWORD *)v0 = result;
  *(_BYTE *)(v0 + 8) = 0;
  return result;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance SwipeActions.TraitKey@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  *a1 = static SwipeActions.TraitKey.defaultValue;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in ViewGraph.swipeActions()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _OWORD *WeakValue;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[14];
  _BYTE __dst[224];

  AGGraphClearUpdate();
  lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature();
  v2 = ViewGraph.subscript.getter();
  if (v2 && (*(_BYTE *)(v2 + 8) & 1) == 0 && (WeakValue = (_OWORD *)AGGraphGetWeakValue()) != 0)
  {
    v4 = WeakValue[1];
    v15[0] = *WeakValue;
    v15[1] = v4;
    v5 = WeakValue[2];
    v6 = WeakValue[3];
    v7 = WeakValue[5];
    v15[4] = WeakValue[4];
    v15[5] = v7;
    v15[2] = v5;
    v15[3] = v6;
    v8 = WeakValue[6];
    v9 = WeakValue[7];
    v10 = WeakValue[9];
    v15[8] = WeakValue[8];
    v15[9] = v10;
    v15[6] = v8;
    v15[7] = v9;
    v11 = WeakValue[10];
    v12 = WeakValue[11];
    v13 = WeakValue[13];
    v15[12] = WeakValue[12];
    v15[13] = v13;
    v15[10] = v11;
    v15[11] = v12;
    memmove(__dst, WeakValue, 0xE0uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
    outlined init with take of SwipeActions.Value?((uint64_t)__dst, a1);
    outlined retain of SwipeActions.Value((uint64_t)v15, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))outlined copy of SwipeActions.Configuration?);
  }
  else
  {
    _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)__dst);
    outlined init with take of SwipeActions.Value?((uint64_t)__dst, a1);
  }
  return AGGraphSetUpdate();
}

Swift::Void __swiftcall SwipeActionResultToken.complete()()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(void);

  v1 = *(void (**)(uint64_t))(v0 + 8);
  if (!v1)
    JUMPOUT(0x18D75AC90);
  if (*(_BYTE *)v0 == 1)
  {
    v2 = *(void (**)(void))(v0 + 24);
    if (v2)
      v2();
  }
  v1(1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + 24));
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
}

Swift::Void __swiftcall SwipeActionResultToken.cancel()()
{
  _QWORD *v0;
  void (*v1)(_QWORD);

  v1 = (void (*)(_QWORD))v0[1];
  if (!v1)
    JUMPOUT(0x18D75AC90);
  v1(0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  v0[1] = 0;
  v0[2] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0[3]);
  v0[3] = 0;
  v0[4] = 0;
}

ValueMetadata *type metadata accessor for SwipeActionsStyle()
{
  return &type metadata for SwipeActionsStyle;
}

uint64_t destroy for SwipeActionResultToken(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 8))
    result = swift_release();
  if (*(_QWORD *)(v1 + 24))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v11;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SwipeActionResultToken(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v11;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    return a1;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SwipeActionResultToken()
{
  return &type metadata for SwipeActionResultToken;
}

uint64_t sub_1878160C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E0CE2A78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>, MEMORY[0x1E0CE5CE0], MEMORY[0x1E0CE5CD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4520]);
  v4 = type metadata accessor for ModifiedContent();
  v16[0] = v2;
  v16[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>();
  v5 = MEMORY[0x1E0CE2E70];
  v15[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v16);
  v15[1] = lazy protocol witness table accessor for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>();
  v6 = MEMORY[0x18D75FFDC](v5, v4, v15);
  type metadata accessor for SwipeActionsModifier(255, v4, v6, v7);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SwipeActionsArePresent>, (uint64_t)&type metadata for SwipeActionsArePresent, (uint64_t)&protocol witness table for SwipeActionsArePresent, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v10 = type metadata accessor for ModifiedContent();
  v14[0] = v1;
  v14[1] = &protocol witness table for SwipeActionsModifier<A>;
  v13[0] = MEMORY[0x18D75FFDC](v5, v8, v14);
  v13[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SwipeActionsArePresent> and conformance _TraitWritingModifier<A>();
  v12[0] = MEMORY[0x18D75FFDC](v5, v9, v13);
  v12[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v5, v10, v12);
}

uint64_t destructiveInjectEnumTag for SwipeActionsStyle.Storage(uint64_t result, int a2)
{
  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    *(_BYTE *)(result + 9) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeActionsStyle.Storage()
{
  return &type metadata for SwipeActionsStyle.Storage;
}

ValueMetadata *type metadata accessor for SwipeActionsArePresent()
{
  return &type metadata for SwipeActionsArePresent;
}

uint64_t type metadata completion function for SwipeActionsModifier()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SwipeActionsModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 <= 0x18)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v11 + 24) < 0xFFFFFFFFuLL)
    {
      v20 = *(_OWORD *)v11;
      v21 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v21;
      *(_OWORD *)v10 = v20;
      v22 = *(_OWORD *)(v11 + 48);
      v23 = *(_OWORD *)(v11 + 64);
      v24 = *(_OWORD *)(v11 + 96);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
      *(_OWORD *)(v10 + 96) = v24;
      *(_OWORD *)(v10 + 48) = v22;
      *(_OWORD *)(v10 + 64) = v23;
      return v4;
    }
    *(_BYTE *)v10 = *(_BYTE *)v11;
    *(_BYTE *)(v10 + 1) = *(_BYTE *)(v11 + 1);
    v12 = *(_QWORD *)(v11 + 8);
    *(_WORD *)(v10 + 16) = *(_WORD *)(v11 + 16);
    *(_QWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
    v13 = *(_QWORD *)(v11 + 40);
    swift_bridgeObjectRetain();
    if (v13)
    {
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
      *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
      swift_retain();
      swift_retain();
      if (*(_QWORD *)(v11 + 64))
      {
LABEL_11:
        *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
        *(_QWORD *)(v10 + 64) = *(_QWORD *)(v11 + 64);
        v14 = (_QWORD *)(v11 + 80);
        v15 = *(_QWORD *)(v11 + 80);
        v16 = (__int128 *)(v11 + 72);
        swift_retain();
        swift_retain();
        if (v15 == 1)
        {
          v17 = (_OWORD *)(v10 + 72);
          v18 = *v16;
          v19 = *(_OWORD *)(v11 + 88);
          *(_QWORD *)(v10 + 104) = *(_QWORD *)(v11 + 104);
LABEL_16:
          *v17 = v18;
          v17[1] = v19;
          return v4;
        }
        *(_BYTE *)(v10 + 72) = *(_BYTE *)v16;
        if (*v14)
        {
          v28 = *(_QWORD *)(v11 + 88);
          *(_QWORD *)(v10 + 80) = *v14;
          *(_QWORD *)(v10 + 88) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v10 + 80) = *(_OWORD *)v14;
        }
        v29 = *(_QWORD *)(v11 + 96);
        if (!v29)
        {
          *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
          return v4;
        }
        v30 = *(_QWORD *)(v11 + 104);
        *(_QWORD *)(v10 + 96) = v29;
        *(_QWORD *)(v10 + 104) = v30;
        goto LABEL_7;
      }
    }
    else
    {
      v25 = *(_OWORD *)(v11 + 32);
      *(_BYTE *)(v10 + 48) = *(_BYTE *)(v11 + 48);
      *(_OWORD *)(v10 + 32) = v25;
      if (*(_QWORD *)(v11 + 64))
        goto LABEL_11;
    }
    v17 = (_OWORD *)(v10 + 56);
    v18 = *(_OWORD *)(v11 + 56);
    v19 = *(_OWORD *)(v11 + 72);
    v26 = *(_OWORD *)(v11 + 88);
    *(_QWORD *)(v10 + 104) = *(_QWORD *)(v11 + 104);
    *(_OWORD *)(v10 + 88) = v26;
    goto LABEL_16;
  }
  v9 = *a2;
  *v4 = *a2;
  v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
LABEL_7:
  swift_retain();
  return v4;
}

unint64_t destroy for SwipeActionsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (_QWORD *)((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8);
  result = v4[3];
  if (result >= 0xFFFFFFFF)
  {
    result = swift_bridgeObjectRelease();
    if (v4[5])
    {
      swift_release();
      result = swift_release();
    }
    if (v4[8])
    {
      swift_release();
      result = swift_release();
      v6 = v4[10];
      if (v6)
      {
        if (v6 == 1)
          return result;
        result = swift_release();
      }
      if (v4[12])
        return swift_release();
    }
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    v17 = *(_OWORD *)v8;
    v18 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v18;
    *(_OWORD *)v7 = v17;
    v19 = *(_OWORD *)(v8 + 48);
    v20 = *(_OWORD *)(v8 + 64);
    v21 = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 96) = v21;
    *(_OWORD *)(v7 + 48) = v19;
    *(_OWORD *)(v7 + 64) = v20;
    return a1;
  }
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  v9 = *(_QWORD *)(v8 + 8);
  *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = v9;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain();
  if (!v10)
  {
    v22 = *(_OWORD *)(v8 + 32);
    *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
    *(_OWORD *)(v7 + 32) = v22;
    if (*(_QWORD *)(v8 + 64))
      goto LABEL_4;
LABEL_8:
    v14 = (_OWORD *)(v7 + 56);
    v15 = *(_OWORD *)(v8 + 56);
    v16 = *(_OWORD *)(v8 + 72);
    v23 = *(_OWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = v23;
    goto LABEL_9;
  }
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  swift_retain();
  swift_retain();
  if (!*(_QWORD *)(v8 + 64))
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
  v11 = (_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 80);
  v13 = (__int128 *)(v8 + 72);
  swift_retain();
  swift_retain();
  if (v12 == 1)
  {
    v14 = (_OWORD *)(v7 + 72);
    v15 = *v13;
    v16 = *(_OWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
LABEL_9:
    *v14 = v15;
    v14[1] = v16;
    return a1;
  }
  *(_BYTE *)(v7 + 72) = *(_BYTE *)v13;
  if (*v11)
  {
    v24 = *(_QWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 80) = *v11;
    *(_QWORD *)(v7 + 88) = v24;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 80) = *(_OWORD *)v11;
  }
  v25 = *(_QWORD *)(v8 + 96);
  if (v25)
  {
    v26 = *(_QWORD *)(v8 + 104);
    *(_QWORD *)(v7 + 96) = v25;
    *(_QWORD *)(v7 + 104) = v26;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 < 0xFFFFFFFF)
      goto LABEL_18;
    *(_BYTE *)v7 = *(_BYTE *)v8;
    *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
    v14 = *(_QWORD *)(v8 + 8);
    *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
    *(_QWORD *)(v7 + 8) = v14;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    v15 = *(_QWORD *)(v8 + 40);
    swift_bridgeObjectRetain();
    if (v15)
    {
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
      swift_retain();
      swift_retain();
      if (!*(_QWORD *)(v8 + 64))
        goto LABEL_22;
    }
    else
    {
      v22 = *(_OWORD *)(v8 + 32);
      *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = v22;
      if (!*(_QWORD *)(v8 + 64))
      {
LABEL_22:
        v23 = (_OWORD *)(v7 + 56);
        v24 = *(_OWORD *)(v8 + 56);
        v25 = *(_OWORD *)(v8 + 72);
        v26 = *(_OWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 88) = v26;
LABEL_33:
        *v23 = v24;
        v23[1] = v25;
        return a1;
      }
    }
LABEL_31:
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
    v39 = (uint64_t *)(v8 + 80);
    v40 = *(_QWORD *)(v8 + 80);
    v41 = (_BYTE *)(v8 + 72);
    swift_retain();
    swift_retain();
    if (v40 != 1)
    {
      *(_BYTE *)(v7 + 72) = *v41;
      v42 = *v39;
      if (!*v39)
      {
        *(_OWORD *)(v7 + 80) = *(_OWORD *)v39;
        goto LABEL_40;
      }
LABEL_35:
      v43 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 80) = v42;
      *(_QWORD *)(v7 + 88) = v43;
      swift_retain();
      goto LABEL_40;
    }
    v23 = (_OWORD *)(v7 + 72);
    v24 = *(_OWORD *)v41;
    v25 = *(_OWORD *)(v8 + 88);
    *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
    goto LABEL_33;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 40))
    {
      swift_release();
      swift_release();
    }
    if (!*(_QWORD *)(v7 + 64))
      goto LABEL_18;
    swift_release();
    swift_release();
    v16 = *(_QWORD *)(v7 + 80);
    if (!v16)
      goto LABEL_16;
    if (v16 != 1)
    {
      swift_release();
LABEL_16:
      if (*(_QWORD *)(v7 + 96))
        swift_release();
    }
LABEL_18:
    v17 = *(_OWORD *)v8;
    v18 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v18;
    *(_OWORD *)v7 = v17;
    v19 = *(_OWORD *)(v8 + 48);
    v20 = *(_OWORD *)(v8 + 64);
    v21 = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 96) = v21;
    *(_OWORD *)(v7 + 48) = v19;
    *(_OWORD *)(v7 + 64) = v20;
    return a1;
  }
  *(_BYTE *)v7 = *(_BYTE *)v8;
  *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
  v10 = *(_QWORD *)(v8 + 8);
  *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
  *(_QWORD *)(v7 + 8) = v10;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (_OWORD *)(v7 + 32);
  v12 = (_OWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  if (*(_QWORD *)(v7 + 40))
  {
    if (v13)
    {
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
      swift_retain();
      swift_release();
      *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
      swift_retain();
      swift_release();
      *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
    }
    else
    {
      outlined destroy of TableRowList?(v7 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v27 = *(_BYTE *)(v8 + 48);
      *v11 = *v12;
      *(_BYTE *)(v7 + 48) = v27;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
    *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    v28 = *v12;
    *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
    *v11 = v28;
  }
  v29 = (__int128 *)(v7 + 56);
  v30 = (__int128 *)(v8 + 56);
  v31 = *(_QWORD *)(v8 + 64);
  if (!*(_QWORD *)(v7 + 64))
  {
    if (!v31)
    {
      v37 = *v30;
      v38 = *(_OWORD *)(v8 + 72);
      v51 = *(_OWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 88) = v51;
      goto LABEL_44;
    }
    goto LABEL_31;
  }
  if (v31)
  {
    *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
    swift_retain();
    swift_release();
    *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
    swift_retain();
    swift_release();
    v33 = (_OWORD *)(v7 + 80);
    v32 = *(_QWORD *)(v7 + 80);
    v29 = (__int128 *)(v7 + 72);
    v35 = (uint64_t *)(v8 + 80);
    v34 = *(_QWORD *)(v8 + 80);
    v36 = (__int128 *)(v8 + 72);
    if (v32 == 1)
    {
      if (v34 == 1)
      {
        v37 = *v36;
        v38 = *(_OWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
LABEL_44:
        *v29 = v37;
        v29[1] = v38;
        return a1;
      }
      *(_BYTE *)v29 = *(_BYTE *)v36;
      v42 = *v35;
      if (!*v35)
      {
        *v33 = *(_OWORD *)v35;
LABEL_40:
        v49 = *(_QWORD *)(v8 + 96);
        if (!v49)
        {
          *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
          return a1;
        }
        goto LABEL_41;
      }
      goto LABEL_35;
    }
    if (v34 == 1)
    {
      outlined destroy of SwipeActionResultToken(v7 + 72);
      v47 = *(_QWORD *)(v8 + 104);
      v48 = *(_OWORD *)(v8 + 88);
      *v29 = *v36;
      *(_OWORD *)(v7 + 88) = v48;
      *(_QWORD *)(v7 + 104) = v47;
      return a1;
    }
    *(_BYTE *)v29 = *(_BYTE *)v36;
    v53 = *v35;
    if (v32)
    {
      if (v53)
      {
        v54 = *(_QWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 80) = v53;
        *(_QWORD *)(v7 + 88) = v54;
        swift_retain();
        swift_release();
        goto LABEL_55;
      }
      swift_release();
    }
    else if (v53)
    {
      v55 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v7 + 80) = v53;
      *(_QWORD *)(v7 + 88) = v55;
      swift_retain();
      goto LABEL_55;
    }
    *v33 = *(_OWORD *)v35;
LABEL_55:
    v49 = *(_QWORD *)(v8 + 96);
    if (*(_QWORD *)(v7 + 96))
    {
      if (v49)
      {
        v56 = *(_QWORD *)(v8 + 104);
        *(_QWORD *)(v7 + 96) = v49;
        *(_QWORD *)(v7 + 104) = v56;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v49)
    {
LABEL_41:
      v50 = *(_QWORD *)(v8 + 104);
      *(_QWORD *)(v7 + 96) = v49;
      *(_QWORD *)(v7 + 104) = v50;
      swift_retain();
      return a1;
    }
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
    return a1;
  }
  outlined destroy of Binding<SwipeActionResultToken?>(v7 + 56);
  v45 = *(_OWORD *)(v8 + 72);
  v44 = *(_OWORD *)(v8 + 88);
  v46 = *v30;
  *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
  *(_OWORD *)(v7 + 72) = v45;
  *(_OWORD *)(v7 + 88) = v44;
  *v29 = v46;
  return a1;
}

uint64_t outlined destroy of SwipeActionResultToken(uint64_t a1)
{
  destroy for SwipeActionResultToken(a1);
  return a1;
}

uint64_t outlined destroy of Binding<SwipeActionResultToken?>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>, &lazy cache variable for type metadata for SwipeActionResultToken?, (uint64_t)&type metadata for SwipeActionResultToken, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  *v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  v11 = v8[6];
  v13 = v8[3];
  v12 = v8[4];
  v7[5] = v8[5];
  v7[6] = v11;
  v7[3] = v13;
  v7[4] = v12;
  return a1;
}

uint64_t assignWithTake for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  char v20;
  __int128 *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      *(_BYTE *)v7 = *(_BYTE *)v8;
      *(_BYTE *)(v7 + 1) = *(_BYTE *)(v8 + 1);
      v9 = *(_QWORD *)(v8 + 8);
      *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
      *(_QWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRelease();
      v10 = (_OWORD *)(v7 + 32);
      v11 = (_OWORD *)(v8 + 32);
      if (*(_QWORD *)(v7 + 40))
      {
        if (*(_QWORD *)(v8 + 40))
        {
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
          swift_release();
          *(_QWORD *)(v7 + 40) = *(_QWORD *)(v8 + 40);
          swift_release();
          *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
        }
        else
        {
          outlined destroy of TableRowList?(v7 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
          v20 = *(_BYTE *)(v8 + 48);
          *v10 = *v11;
          *(_BYTE *)(v7 + 48) = v20;
        }
      }
      else
      {
        v19 = *v11;
        *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
        *v10 = v19;
      }
      v21 = (__int128 *)(v7 + 56);
      v22 = (__int128 *)(v8 + 56);
      if (!*(_QWORD *)(v7 + 64))
      {
        v25 = *v22;
        v26 = *(_OWORD *)(v8 + 72);
        v27 = *(_OWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 88) = v27;
        goto LABEL_23;
      }
      if (!*(_QWORD *)(v8 + 64))
      {
        outlined destroy of Binding<SwipeActionResultToken?>(v7 + 56);
        v29 = *(_OWORD *)(v8 + 72);
        v28 = *(_OWORD *)(v8 + 88);
        v30 = *v22;
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
        *(_OWORD *)(v7 + 72) = v29;
        *(_OWORD *)(v7 + 88) = v28;
        *v21 = v30;
        return a1;
      }
      *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 + 56);
      swift_release();
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(v8 + 64);
      swift_release();
      v23 = *(_QWORD *)(v7 + 80);
      v21 = (__int128 *)(v7 + 72);
      v24 = (__int128 *)(v8 + 72);
      if (v23 == 1)
      {
        v25 = *v24;
        v26 = *(_OWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v8 + 104);
LABEL_23:
        *v21 = v25;
        v21[1] = v26;
        return a1;
      }
      v31 = (uint64_t *)(v8 + 80);
      if (*(_QWORD *)(v8 + 80) == 1)
      {
        outlined destroy of SwipeActionResultToken(v7 + 72);
        v32 = *(_QWORD *)(v8 + 104);
        v33 = *(_OWORD *)(v8 + 88);
        *v21 = *v24;
        *(_OWORD *)(v7 + 88) = v33;
        *(_QWORD *)(v7 + 104) = v32;
        return a1;
      }
      *(_BYTE *)v21 = *(_BYTE *)v24;
      v34 = *v31;
      if (v23)
      {
        if (v34)
        {
          v35 = *(_QWORD *)(v8 + 88);
          *(_QWORD *)(v7 + 80) = v34;
          *(_QWORD *)(v7 + 88) = v35;
          swift_release();
          goto LABEL_34;
        }
        swift_release();
      }
      else if (v34)
      {
        v36 = *(_QWORD *)(v8 + 88);
        *(_QWORD *)(v7 + 80) = v34;
        *(_QWORD *)(v7 + 88) = v36;
        goto LABEL_34;
      }
      *(_OWORD *)(v7 + 80) = *(_OWORD *)v31;
LABEL_34:
      v37 = *(_QWORD *)(v8 + 96);
      if (*(_QWORD *)(v7 + 96))
      {
        if (v37)
        {
          v38 = *(_QWORD *)(v8 + 104);
          *(_QWORD *)(v7 + 96) = v37;
          *(_QWORD *)(v7 + 104) = v38;
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v37)
      {
        v39 = *(_QWORD *)(v8 + 104);
        *(_QWORD *)(v7 + 96) = v37;
        *(_QWORD *)(v7 + 104) = v39;
        return a1;
      }
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
      return a1;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 40))
    {
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v7 + 64))
    {
      swift_release();
      swift_release();
      v12 = *(_QWORD *)(v7 + 80);
      if (!v12)
        goto LABEL_12;
      if (v12 != 1)
      {
        swift_release();
LABEL_12:
        if (*(_QWORD *)(v7 + 96))
          swift_release();
      }
    }
  }
  v13 = *(_OWORD *)v8;
  v14 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(v7 + 32) = v14;
  *(_OWORD *)v7 = v13;
  v15 = *(_OWORD *)(v8 + 48);
  v16 = *(_OWORD *)(v8 + 64);
  v17 = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v17;
  *(_OWORD *)(v7 + 48) = v15;
  *(_OWORD *)(v7 + 64) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionsModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 112) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187817170 + 4 * byte_187C61540[v10]))();
  }
}

void storeEnumTagSinglePayload for SwipeActionsModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF90)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFF90)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 112);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878172F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187817384);
}

void sub_1878172F8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187817300);
  JUMPOUT(0x187817384);
}

void sub_187817348()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187817384);
}

void sub_187817350()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187817384);
}

uint64_t sub_187817358(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x187817364);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) = a2;
LABEL_6:
    JUMPOUT(0x187817384);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

_UNKNOWN **base witness table accessor for ViewModifier in SwipeActionsModifier<A>()
{
  return &protocol witness table for SwipeActionsModifier<A>;
}

id UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  unint64_t v13;
  id v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *ObjCClassFromMetadata;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  uint64_t (*v57)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t);
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  UIMenuElementSize v65;
  Swift::String v66;
  UIMenu *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  id v71;
  Swift::OpaquePointer v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t aBlock;
  uint64_t v86;
  void (*v87)(uint64_t, void *, void *, void *);
  void *v88;
  uint64_t (*v89)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t);
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  UIImage_optional v94;

  v7 = type metadata accessor for PlatformItemList.Item();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v13 = *(_QWORD *)(a1 + 328);
  if (v13 >> 2 == 0xFFFFFFFF || v13 >> 62 != 3)
    goto LABEL_5;
  v16 = *(_QWORD *)(a1 + 296);
  v18 = *(int64x2_t *)(a1 + 336);
  v17 = *(int64x2_t *)(a1 + 352);
  v12.i64[0] = *(_QWORD *)(a1 + 320);
  v19 = vextq_s8((int8x16_t)v18, (int8x16_t)v17, 8uLL);
  v17.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
  v17.i64[1] = *(_QWORD *)(a1 + 368);
  v20 = vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 304), v19), vorrq_s8((int8x16_t)vzip1q_s64(v12, v18), (int8x16_t)v17));
  v21 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | *(_QWORD *)(a1 + 376) | *(_QWORD *)(a1 + 384) | *(_QWORD *)(a1 + 392);
  if (v13 == 0xC000000000000000 && v16 == 6 && !v21)
    goto LABEL_12;
  if (v13 == 0xC000000000000000 && v16 == 7 && !v21)
  {
LABEL_12:
    v81 = v11;
    v22 = swift_allocObject();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MutableBox<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
    v23 = swift_allocObject();
    v24 = 0;
    *(_QWORD *)(v23 + 16) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(_QWORD *)(v23 + 24) = 0;
    v83 = v22;
    *(_QWORD *)(v22 + 16) = v23;
    if ((*(_BYTE *)(a1 + 521) & 1) == 0)
      v24 = *(unsigned __int8 *)(a1 + 520) == 1;
    v80 = (id)v24;
    v84 = a3;
    if (*(_QWORD *)a1)
    {
      v25 = objc_msgSend(*(id *)a1, sel_string);
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v28 = v27;

      v29 = (void *)MEMORY[0x18D75CC88](v26, v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = 0;
    }
    v82 = v3;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v31 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = swift_allocObject();
    outlined init with take of PlatformItemList.Item((uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v33 + v31);
    v34 = (_QWORD *)(v33 + v32);
    v35 = v84;
    *v34 = a2;
    v34[1] = v35;
    v36 = v83;
    *(_QWORD *)(v33 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8)) = v83;
    v89 = partial apply for closure #2 in UIContextualAction.init(_:performDestructiveAction:);
    v90 = v33;
    aBlock = MEMORY[0x1E0C809B0];
    v86 = 1107296256;
    v87 = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
    v88 = &block_descriptor_59;
    v37 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    v38 = objc_msgSend(ObjCClassFromMetadata, sel_contextualActionWithStyle_title_handler_, v80, v29, v37);
    _Block_release(v37);

    v39 = v38;
    v40 = (void *)PlatformItemList.Item.image.getter();
    objc_msgSend(v39, sel_setImage_, v40);

    v41 = *(_QWORD *)(a1 + 328);
    if (v41 >> 62 == 3
      && (v41 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
      && v41 == 0xC000000000000000
      && *(_QWORD *)(a1 + 296) == 7)
    {
      v42 = *(_QWORD *)(a1 + 304);
      v43 = *(_QWORD *)(a1 + 312);
      v44 = *(_QWORD *)(a1 + 320);
      if (!(v43 | v42 | v44))
      {
        v45 = *(_QWORD *)(a1 + 344);
        v46 = *(_QWORD *)(a1 + 352);
        v47 = *(_QWORD *)(a1 + 360);
        v49 = *(_QWORD *)(a1 + 368);
        v48 = *(_QWORD *)(a1 + 376);
        v51 = *(_QWORD *)(a1 + 384);
        v50 = *(_QWORD *)(a1 + 392);
        if (!(v45 | *(_QWORD *)(a1 + 336) | v46 | v47 | v49 | v48 | v51 | v50))
        {
          v75 = *(_QWORD *)(a1 + 336);
          v76 = v45;
          v77 = v46;
          v78 = v44;
          v80 = v39;
          v52 = *(_QWORD *)(v36 + 16);
          v53 = *(_QWORD *)(a1 + 616);
          v79 = v52;
          if (v53)
          {
            v74 = v80;
            swift_retain();
            outlined copy of PlatformItemList.Item.SystemItem?((id)7, v42, v43, v78, 0xC000000000000000, v75, v76, v77, v47, v49, v48, v51, v50);
            v54 = swift_bridgeObjectRetain();
            v55 = v74;
            v56 = specialized Sequence.compactMap<A>(_:)(v54, v52, v74);
            swift_bridgeObjectRelease();

          }
          else
          {
            swift_retain();
            outlined copy of PlatformItemList.Item.SystemItem?((id)7, v42, v43, v78, 0xC000000000000000, v75, v76, v77, v47, v49, v48, v51, v50);
            v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
          v57 = (uint64_t (*)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t))MEMORY[0x1E0DEE9D8];
          v93 = MEMORY[0x1E0DEE9D8];
          v58 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
          LOBYTE(aBlock) = 0;
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v59 = type metadata accessor for MenuVisitor.MenuStackGroup();
          v60 = *(unsigned __int8 *)(*(_QWORD *)(v59 - 8) + 80);
          v61 = (v60 + 32) & ~v60;
          v62 = swift_allocObject();
          *(_OWORD *)(v62 + 16) = xmmword_187BF9830;
          if (one-time initialization token for empty != -1)
            swift_once();
          v63 = __swift_project_value_buffer(v59, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v63, v62 + v61, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
          v64 = aBlock;
          aBlock = 0;
          LOBYTE(v86) = 0;
          v87 = (void (*)(uint64_t, void *, void *, void *))MEMORY[0x1E0DEE9E0];
          v88 = (void *)v58;
          v89 = v57;
          v90 = MEMORY[0x1E0DEE9E0];
          v91 = v64;
          v92 = v62;
          MenuVisitor.visit(_:uniqueNames:)((uint64_t)v56, &v93);
          swift_bridgeObjectRelease();
          v65 = (UIMenuElementSize)v89;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v66._countAndFlagsBits = 0;
          v66._object = (void *)0xE000000000000000;
          v94.value.super.isa = 0;
          v94.is_nil = 0;
          UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v67, v66, (Swift::String_optional)0, v94, 0, 0xFFFFFFFFFFFFFFFFLL, v65, v73);
          v69 = v68;
          swift_release();
          v39 = v80;
          objc_msgSend(v80, sel__setMenu_, v69);

        }
      }
    }
    if (*(_QWORD *)(a1 + *(int *)(v81 + 132)))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      v70 = swift_retain_n();
      v71 = UIColor.init(_:)(v70);
      objc_msgSend(v39, sel_setBackgroundColor_, v71);
      swift_release();

    }
    v15 = v39;
    specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v15, (_QWORD *)a1);

    swift_release();
    outlined destroy of PlatformItemList.Item(a1);
    swift_release();
  }
  else
  {
LABEL_5:
    swift_release();
    outlined destroy of PlatformItemList.Item(a1);
    return 0;
  }
  return v15;
}

uint64_t closure #2 in UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t (*a6)(void (*)(uint64_t), uint64_t), uint64_t a7, uint64_t a8)
{
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v10 = *(void (**)(uint64_t))(a5 + 408);
  if ((unint64_t)v10 >= 2)
  {
    if ((*(_BYTE *)(a5 + 521) & 1) != 0 || *(_BYTE *)(a5 + 520) != 1)
    {
      v16 = swift_retain();
      v10(v16);
      a3(1);
    }
    else
    {
      swift_retain();
      v15 = a6(a3, a4);
      v10(v15);
    }
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  else
  {
    v11 = *(_QWORD *)(a8 + 16);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = a4;
    swift_beginAccess();
    *(_QWORD *)(v11 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(_QWORD *)(v11 + 24) = v12;
    swift_retain();
    return swift_release();
  }
}

uint64_t closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)(uint64_t a1, uint64_t a2)
{
  void (*v3)(void);
  void (*v4)(char *);
  char v6;

  v3 = *(void (**)(void))(a1 + 8);
  if (v3)
    v3();
  swift_beginAccess();
  v4 = *(void (**)(char *))(a2 + 16);
  v6 = 1;
  swift_retain();
  v4(&v6);
  return swift_release();
}

uint64_t partial apply for closure #2 in static SwipeActionsModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17);
}

unint64_t lazy protocol witness table accessor for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue;
  if (!lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActions.MakeValue, &type metadata for SwipeActions.MakeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue);
  }
  return result;
}

uint64_t type metadata accessor for SwipeActionsModifier.WriteTrait(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SwipeActionsModifier.WriteTrait);
}

uint64_t partial apply for closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform;
  if (!lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SwipeActions.MakeValueTransform, &type metadata for SwipeActions.MakeValueTransform);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform);
  }
  return result;
}

uint64_t sub_187817D84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187817DA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0[5])
  {
    swift_bridgeObjectRelease();
    if (v0[7])
    {
      swift_release();
      swift_release();
    }
    if (v0[10])
    {
      swift_release();
      swift_release();
      v1 = v0[12];
      if (v1)
      {
        if (v1 == 1)
          goto LABEL_10;
        swift_release();
      }
      if (v0[14])
        swift_release();
    }
  }
LABEL_10:
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    if (v0[21])
    {
      swift_release();
      swift_release();
    }
    if (v0[24])
    {
      swift_release();
      swift_release();
      v2 = v0[26];
      if (v2)
      {
        if (v2 == 1)
          return swift_deallocObject();
        swift_release();
      }
      if (v0[28])
        swift_release();
    }
  }
  return swift_deallocObject();
}

double _s7SwiftUI12SwipeActionsO18MakeValueTransformV5valueyyAC0F0VzcvgyAHzcfU0_TA_0()
{
  uint64_t v0;

  return SwipeActions.Value.reduce(_:)((__int128 *)(v0 + 16));
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int16 v68;
  char v69;

  v52 = a3;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v66 = (uint64_t)&v47 - v7;
  v8 = type metadata accessor for PlatformItemList.Item();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v47 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v51 = (uint64_t)&v47 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v47 = a1;
  v48 = v21;
  v22 = a1 + v21;
  v23 = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  v24 = v22;
  v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v49 = v12;
  v50 = a2;
  v62 = v23;
  do
  {
    v64 = v25;
    v65 = v20;
    v63 = v24;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v27 = *((_QWORD *)v16 + 51);
    if (v27 != 1)
    {
      v67 = v16[464];
      v28 = *((_QWORD *)v16 + 57);
      v60 = *((_QWORD *)v16 + 56);
      v61 = v28;
      v29 = *((_QWORD *)v16 + 55);
      v58 = *((_QWORD *)v16 + 54);
      v59 = v29;
      v30 = *((_QWORD *)v16 + 50);
      v57 = *((_QWORD *)v16 + 53);
      v31 = *((_QWORD *)v16 + 52);
      v55 = HIDWORD(v30);
      v56 = v31;
      v53 = BYTE3(v30) & 1;
      v54 = (v30 >> 8) & 1;
      v32 = swift_allocObject();
      *(_BYTE *)(v32 + 16) = v30 & 1;
      *(_BYTE *)(v32 + 17) = v54;
      *(_BYTE *)(v32 + 18) = BYTE2(v30) & 1;
      a2 = v50;
      *(_BYTE *)(v32 + 19) = v53;
      v33 = v56;
      *(_BYTE *)(v32 + 20) = v55;
      *(_WORD *)(v32 + 21) = v68;
      *(_BYTE *)(v32 + 23) = v69;
      *(_QWORD *)(v32 + 24) = v27;
      *(_QWORD *)(v32 + 32) = v33;
      v34 = v57;
      v35 = v58;
      *(_QWORD *)(v32 + 40) = v57;
      *(_QWORD *)(v32 + 48) = v35;
      v36 = v59;
      v37 = v60;
      *(_QWORD *)(v32 + 56) = v59;
      *(_QWORD *)(v32 + 64) = v37;
      *(_QWORD *)(v32 + 72) = v61;
      *(_BYTE *)(v32 + 80) = v67;
      *(_QWORD *)(v32 + 88) = a2;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v30, v27, v33, v34, v35, v36);
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v27);
      *((_QWORD *)v16 + 51) = partial apply for closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:);
      *((_QWORD *)v16 + 52) = v32;
      v12 = v49;
    }
    if (*((_QWORD *)v16 + 77))
    {
      swift_retain();
      v38 = v52;
      v39 = swift_bridgeObjectRetain();
      v40 = specialized Sequence.compactMap<A>(_:)(v39, a2, v38);
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      *((_QWORD *)v16 + 77) = v40;
    }
    v25 = v64;
    v41 = v66;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v16, v66, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v41, 0, 1, v8);
    outlined destroy of PlatformItemList.Item((uint64_t)v16);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v41, 1, v8) == 1)
    {
      outlined destroy of TableRowList?(v66, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
      v26 = v62;
    }
    else
    {
      v42 = v51;
      outlined init with take of PlatformItemList.Item(v66, v51);
      outlined init with take of PlatformItemList.Item(v42, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v25 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      v44 = v25[2];
      v43 = v25[3];
      if (v44 >= v43 >> 1)
        v25 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v25);
      v25[2] = v44 + 1;
      v45 = (uint64_t)v25 + v48 + v44 * v62;
      v26 = v62;
      outlined init with take of PlatformItemList.Item((uint64_t)v12, v45);
    }
    v24 = v63 + v26;
    v20 = v65 - 1;
  }
  while (v65 != 1);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v6 = type metadata accessor for PlatformItemList.Item();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9D8];
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v15[2] = v3;
    v13 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIContextualAction);
    v14 = *(_QWORD *)(v7 + 72);
    v15[1] = a1;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v13, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      swift_retain();
      if (UIContextualAction.init(_:performDestructiveAction:)((uint64_t)v10, v16, a3))
      {
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v13 += v14;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    return v17;
  }
  return result;
}

uint64_t sub_187818470()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1878184E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for PlatformItemList.Item();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));

  swift_bridgeObjectRelease();
  swift_release();
  v3 = *(_QWORD *)(v2 + 184);
  v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v5 = *(unsigned __int8 *)(v2 + 72);
    if (v5 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v5);
      v3 = *(_QWORD *)(v2 + 184);
      v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v4 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v2 + 168), *(_QWORD *)(v2 + 176), v3);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    v6 = *(void **)(v2 + 264);
    if ((unint64_t)v6 >= 2)

    swift_release();
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + 328);
  if (v7 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(_QWORD *)(v2 + 304), *(_QWORD *)(v2 + 312), *(_QWORD *)(v2 + 320), v7, *(_QWORD *)(v2 + 336), *(_QWORD *)(v2 + 344), *(_QWORD *)(v2 + 352), *(_QWORD *)(v2 + 360), *(_QWORD *)(v2 + 368), *(_QWORD *)(v2 + 376), *(_QWORD *)(v2 + 384), *(_QWORD *)(v2 + 392));
  v8 = *(_QWORD *)(v2 + 408);
  if (v8)
  {
    if (v8 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(v2 + 424))
    swift_release();
  if (*(_QWORD *)(v2 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 504))
    swift_release();
  if (*(_QWORD *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v2 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v2 + *(int *)(v1 + 112);
  v10 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = v9 + *(int *)(v10 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_BYTE *)(v11 + 16));
    swift_bridgeObjectRelease();
    v12 = v11 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    if (*(_QWORD *)(v9 + *(int *)(v10 + 24)))
      swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in UIContextualAction.init(_:performDestructiveAction:)(a1, a2, a3, a4, v4 + v10, *(uint64_t (**)(void (*)(uint64_t), uint64_t))(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(_QWORD *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_18781883C()
{
  _QWORD *v0;

  if (v0[3])
    swift_release();
  if (v0[5])
    swift_release();
  if (v0[7])
    swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)(v0 + 16, *(_QWORD *)(v0 + 88));
}

uint64_t outlined copy of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2 != 1)
  {
    outlined copy of AppIntentExecutor?(a2);
    outlined copy of AppIntentExecutor?(a4);
    return outlined copy of AppIntentExecutor?(a6);
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeActions.Feature()
{
  return &type metadata for SwipeActions.Feature;
}

ValueMetadata *type metadata accessor for SwipeActions.MakeValueTransform()
{
  return &type metadata for SwipeActions.MakeValueTransform;
}

ValueMetadata *type metadata accessor for SwipeActions.Key()
{
  return &type metadata for SwipeActions.Key;
}

ValueMetadata *type metadata accessor for SwipeActions.TraitKey()
{
  return &type metadata for SwipeActions.TraitKey;
}

ValueMetadata *type metadata accessor for SwipeActions.MakeValue()
{
  return &type metadata for SwipeActions.MakeValue;
}

uint64_t destroy for SwipeActions.Value(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (a1[3])
  {
    swift_bridgeObjectRelease();
    if (a1[5])
    {
      swift_release();
      swift_release();
    }
    if (a1[8])
    {
      swift_release();
      swift_release();
      v2 = a1[10];
      if (v2)
      {
        if (v2 == 1)
          goto LABEL_10;
        swift_release();
      }
      if (a1[12])
        swift_release();
    }
  }
LABEL_10:
  result = a1[17];
  if (result)
  {
    swift_bridgeObjectRelease();
    if (a1[19])
    {
      swift_release();
      swift_release();
    }
    result = a1[22];
    if (result)
    {
      swift_release();
      result = swift_release();
      v4 = a1[24];
      if (v4)
      {
        if (v4 == 1)
          return result;
        result = swift_release();
      }
      if (a1[26])
        return swift_release();
    }
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActions.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v10 = *(_QWORD *)(a2 + 136);
    if (!v10)
      goto LABEL_26;
    goto LABEL_17;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (!v5)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
      goto LABEL_4;
LABEL_10:
    v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v10 = *(_QWORD *)(a2 + 136);
    if (!v10)
      goto LABEL_26;
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  v6 = *(_QWORD *)(a2 + 64);
  if (!v6)
    goto LABEL_10;
LABEL_4:
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v8 = (_BYTE *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v7 != 1)
  {
    *(_BYTE *)(a1 + 72) = *v8;
    if (v7)
    {
      v15 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v7;
      *(_QWORD *)(a1 + 88) = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    }
    v16 = *(_QWORD *)(a2 + 96);
    if (v16)
    {
      v17 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v16;
      *(_QWORD *)(a1 + 104) = v17;
      swift_retain();
      v10 = *(_QWORD *)(a2 + 136);
      if (v10)
        goto LABEL_17;
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      v10 = *(_QWORD *)(a2 + 136);
      if (v10)
        goto LABEL_17;
    }
LABEL_26:
    v25 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v25;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    v26 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v26;
    v27 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v27;
    return a1;
  }
  v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 136);
  if (!v10)
    goto LABEL_26;
LABEL_17:
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  v18 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  if (v18)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = v18;
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    swift_retain();
    swift_retain();
    v19 = *(_QWORD *)(a2 + 176);
    if (v19)
      goto LABEL_19;
LABEL_22:
    v23 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v23;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    return a1;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v19 = *(_QWORD *)(a2 + 176);
  if (!v19)
    goto LABEL_22;
LABEL_19:
  v20 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v19;
  v21 = (_OWORD *)(a2 + 184);
  swift_retain();
  swift_retain();
  if (v20 == 1)
  {
    v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *v21;
    *(_OWORD *)(a1 + 200) = v22;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  }
  else
  {
    *(_BYTE *)(a1 + 184) = *(_BYTE *)v21;
    if (v20)
    {
      v24 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v20;
      *(_QWORD *)(a1 + 200) = v24;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    }
    v28 = *(_QWORD *)(a2 + 208);
    if (v28)
    {
      v29 = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = v28;
      *(_QWORD *)(a1 + 216) = v29;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActions.Value(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  __int128 v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 *v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  uint64_t *v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v4 = *((_QWORD *)a2 + 3);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (!v4)
    {
      v16 = *a2;
      v17 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v16;
      v18 = a2[3];
      v19 = a2[4];
      v20 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v20;
      *(_OWORD *)(a1 + 48) = v18;
      *(_OWORD *)(a1 + 64) = v19;
      goto LABEL_54;
    }
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
    v9 = *((_QWORD *)a2 + 1);
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v10 = *((_QWORD *)a2 + 5);
    swift_bridgeObjectRetain();
    if (v10)
    {
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      swift_retain();
      swift_retain();
      if (!*((_QWORD *)a2 + 8))
        goto LABEL_16;
    }
    else
    {
      v22 = a2[2];
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 32) = v22;
      if (!*((_QWORD *)a2 + 8))
      {
LABEL_16:
        v23 = (_OWORD *)(a1 + 56);
        v24 = *(__int128 *)((char *)a2 + 56);
        v25 = *(__int128 *)((char *)a2 + 72);
        v26 = *(__int128 *)((char *)a2 + 88);
        *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
        *(_OWORD *)(a1 + 88) = v26;
        goto LABEL_26;
      }
    }
LABEL_24:
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    v38 = (uint64_t *)(a2 + 5);
    v39 = *((_QWORD *)a2 + 10);
    v40 = (char *)a2 + 72;
    swift_retain();
    swift_retain();
    if (v39 != 1)
    {
      *(_BYTE *)(a1 + 72) = *v40;
      v41 = *v38;
      if (!*v38)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v38;
LABEL_36:
        v49 = *((_QWORD *)a2 + 12);
        if (v49)
        {
LABEL_37:
          v50 = *((_QWORD *)a2 + 13);
          *(_QWORD *)(a1 + 96) = v49;
          *(_QWORD *)(a1 + 104) = v50;
          swift_retain();
          goto LABEL_54;
        }
        *(_OWORD *)(a1 + 96) = a2[6];
        goto LABEL_54;
      }
LABEL_35:
      v48 = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 80) = v41;
      *(_QWORD *)(a1 + 88) = v48;
      swift_retain();
      goto LABEL_36;
    }
    v23 = (_OWORD *)(a1 + 72);
    v24 = *(_OWORD *)v40;
    v25 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
LABEL_26:
    *v23 = v24;
    v23[1] = v25;
    goto LABEL_54;
  }
  if (!v4)
  {
    outlined destroy of SwipeActions.Configuration((_QWORD *)a1);
    v12 = a2[1];
    v11 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v11;
    v13 = a2[6];
    v15 = a2[3];
    v14 = a2[4];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v14;
    goto LABEL_54;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
  v5 = *((_QWORD *)a2 + 1);
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 32);
  v7 = a2 + 2;
  v8 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    }
    else
    {
      outlined destroy of TableRowList?(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v21 = *((_BYTE *)a2 + 48);
      *v6 = *v7;
      *(_BYTE *)(a1 + 48) = v21;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    v27 = *v7;
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *v6 = v27;
  }
  v28 = (__int128 *)(a1 + 56);
  v29 = (__int128 *)((char *)a2 + 56);
  v30 = *((_QWORD *)a2 + 8);
  if (!*(_QWORD *)(a1 + 64))
  {
    if (!v30)
    {
      v36 = *v29;
      v37 = *(__int128 *)((char *)a2 + 72);
      v47 = *(__int128 *)((char *)a2 + 88);
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      *(_OWORD *)(a1 + 88) = v47;
      goto LABEL_33;
    }
    goto LABEL_24;
  }
  if (!v30)
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    v43 = *(__int128 *)((char *)a2 + 72);
    v42 = *(__int128 *)((char *)a2 + 88);
    v44 = *v29;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v43;
    *(_OWORD *)(a1 + 88) = v42;
    *v28 = v44;
    goto LABEL_54;
  }
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_retain();
  swift_release();
  v32 = (_OWORD *)(a1 + 80);
  v31 = *(_QWORD *)(a1 + 80);
  v28 = (__int128 *)(a1 + 72);
  v34 = (uint64_t *)(a2 + 5);
  v33 = *((_QWORD *)a2 + 10);
  v35 = (__int128 *)((char *)a2 + 72);
  if (v31 == 1)
  {
    if (v33 == 1)
    {
      v36 = *v35;
      v37 = *(__int128 *)((char *)a2 + 88);
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
LABEL_33:
      *v28 = v36;
      v28[1] = v37;
      goto LABEL_54;
    }
    *(_BYTE *)v28 = *(_BYTE *)v35;
    v41 = *v34;
    if (!*v34)
    {
      *v32 = *(_OWORD *)v34;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33 == 1)
  {
    outlined destroy of SwipeActionResultToken(a1 + 72);
    v45 = *((_QWORD *)a2 + 13);
    v46 = *(__int128 *)((char *)a2 + 88);
    *v28 = *v35;
    *(_OWORD *)(a1 + 88) = v46;
    *(_QWORD *)(a1 + 104) = v45;
    goto LABEL_54;
  }
  *(_BYTE *)v28 = *(_BYTE *)v35;
  v51 = *v34;
  if (!v31)
  {
    if (v51)
    {
      v53 = *((_QWORD *)a2 + 11);
      *(_QWORD *)(a1 + 80) = v51;
      *(_QWORD *)(a1 + 88) = v53;
      swift_retain();
      goto LABEL_47;
    }
LABEL_46:
    *v32 = *(_OWORD *)v34;
    goto LABEL_47;
  }
  if (!v51)
  {
    swift_release();
    goto LABEL_46;
  }
  v52 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)(a1 + 88) = v52;
  swift_retain();
  swift_release();
LABEL_47:
  v49 = *((_QWORD *)a2 + 12);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v49)
    {
      v54 = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 96) = v49;
      *(_QWORD *)(a1 + 104) = v54;
      swift_retain();
      swift_release();
      goto LABEL_54;
    }
    swift_release();
  }
  else if (v49)
  {
    goto LABEL_37;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
LABEL_54:
  v55 = (__int128 *)(a1 + 112);
  v56 = a2 + 7;
  v57 = *((_QWORD *)a2 + 17);
  if (!*(_QWORD *)(a1 + 136))
  {
    if (!v57)
    {
      v69 = *v56;
      v70 = a2[9];
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = v70;
      *v55 = v69;
      v71 = a2[10];
      v72 = a2[11];
      v73 = a2[13];
      *(_OWORD *)(a1 + 192) = a2[12];
      *(_OWORD *)(a1 + 208) = v73;
      *(_OWORD *)(a1 + 160) = v71;
      *(_OWORD *)(a1 + 176) = v72;
      return a1;
    }
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
    v62 = *((_QWORD *)a2 + 15);
    *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
    *(_QWORD *)(a1 + 120) = v62;
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    v63 = *((_QWORD *)a2 + 19);
    swift_bridgeObjectRetain();
    if (v63)
    {
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      swift_retain();
      swift_retain();
      if (!*((_QWORD *)a2 + 22))
        goto LABEL_69;
    }
    else
    {
      v75 = a2[9];
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      *(_OWORD *)(a1 + 144) = v75;
      if (!*((_QWORD *)a2 + 22))
      {
LABEL_69:
        v76 = (_OWORD *)(a1 + 168);
        v77 = *(__int128 *)((char *)a2 + 168);
        v78 = *(__int128 *)((char *)a2 + 184);
        v79 = *(__int128 *)((char *)a2 + 200);
        *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
        *(_OWORD *)(a1 + 200) = v79;
LABEL_79:
        *v76 = v77;
        v76[1] = v78;
        return a1;
      }
    }
LABEL_77:
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    v91 = (uint64_t *)(a2 + 12);
    v92 = *((_QWORD *)a2 + 24);
    v93 = (char *)a2 + 184;
    swift_retain();
    swift_retain();
    if (v92 != 1)
    {
      *(_BYTE *)(a1 + 184) = *v93;
      v94 = *v91;
      if (!*v91)
      {
        *(_OWORD *)(a1 + 192) = *(_OWORD *)v91;
        goto LABEL_89;
      }
      goto LABEL_88;
    }
    v76 = (_OWORD *)(a1 + 184);
    v77 = *(_OWORD *)v93;
    v78 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    goto LABEL_79;
  }
  if (!v57)
  {
    outlined destroy of SwipeActions.Configuration((_QWORD *)(a1 + 112));
    v65 = a2[8];
    v64 = a2[9];
    *v55 = *v56;
    *(_OWORD *)(a1 + 128) = v65;
    *(_OWORD *)(a1 + 144) = v64;
    v66 = a2[13];
    v68 = a2[10];
    v67 = a2[11];
    *(_OWORD *)(a1 + 192) = a2[12];
    *(_OWORD *)(a1 + 208) = v66;
    *(_OWORD *)(a1 + 160) = v68;
    *(_OWORD *)(a1 + 176) = v67;
    return a1;
  }
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
  v58 = *((_QWORD *)a2 + 15);
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  *(_QWORD *)(a1 + 120) = v58;
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = (_OWORD *)(a1 + 144);
  v60 = a2 + 9;
  v61 = *((_QWORD *)a2 + 19);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v61)
    {
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    }
    else
    {
      outlined destroy of TableRowList?(a1 + 144, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v74 = *((_BYTE *)a2 + 160);
      *v59 = *v60;
      *(_BYTE *)(a1 + 160) = v74;
    }
  }
  else if (v61)
  {
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    swift_retain();
    swift_retain();
  }
  else
  {
    v80 = *v60;
    *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
    *v59 = v80;
  }
  v81 = (__int128 *)(a1 + 168);
  v82 = (__int128 *)((char *)a2 + 168);
  v83 = *((_QWORD *)a2 + 22);
  if (!*(_QWORD *)(a1 + 176))
  {
    if (!v83)
    {
      v89 = *v82;
      v90 = *(__int128 *)((char *)a2 + 184);
      v100 = *(__int128 *)((char *)a2 + 200);
      *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
      *(_OWORD *)(a1 + 200) = v100;
      goto LABEL_86;
    }
    goto LABEL_77;
  }
  if (v83)
  {
    *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    swift_retain();
    swift_release();
    v85 = (_OWORD *)(a1 + 192);
    v84 = *(_QWORD *)(a1 + 192);
    v81 = (__int128 *)(a1 + 184);
    v87 = (uint64_t *)(a2 + 12);
    v86 = *((_QWORD *)a2 + 24);
    v88 = (__int128 *)((char *)a2 + 184);
    if (v84 == 1)
    {
      if (v86 == 1)
      {
        v89 = *v88;
        v90 = *(__int128 *)((char *)a2 + 200);
        *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
LABEL_86:
        *v81 = v89;
        v81[1] = v90;
        return a1;
      }
      *(_BYTE *)v81 = *(_BYTE *)v88;
      v94 = *v87;
      if (!*v87)
      {
        *v85 = *(_OWORD *)v87;
LABEL_89:
        v102 = *((_QWORD *)a2 + 26);
        if (!v102)
        {
          *(_OWORD *)(a1 + 208) = a2[13];
          return a1;
        }
        goto LABEL_90;
      }
LABEL_88:
      v101 = *((_QWORD *)a2 + 25);
      *(_QWORD *)(a1 + 192) = v94;
      *(_QWORD *)(a1 + 200) = v101;
      swift_retain();
      goto LABEL_89;
    }
    if (v86 == 1)
    {
      outlined destroy of SwipeActionResultToken(a1 + 184);
      v98 = *((_QWORD *)a2 + 27);
      v99 = *(__int128 *)((char *)a2 + 200);
      *v81 = *v88;
      *(_OWORD *)(a1 + 200) = v99;
      *(_QWORD *)(a1 + 216) = v98;
      return a1;
    }
    *(_BYTE *)v81 = *(_BYTE *)v88;
    v104 = *v87;
    if (v84)
    {
      if (v104)
      {
        v105 = *((_QWORD *)a2 + 25);
        *(_QWORD *)(a1 + 192) = v104;
        *(_QWORD *)(a1 + 200) = v105;
        swift_retain();
        swift_release();
        goto LABEL_100;
      }
      swift_release();
    }
    else if (v104)
    {
      v106 = *((_QWORD *)a2 + 25);
      *(_QWORD *)(a1 + 192) = v104;
      *(_QWORD *)(a1 + 200) = v106;
      swift_retain();
      goto LABEL_100;
    }
    *v85 = *(_OWORD *)v87;
LABEL_100:
    v102 = *((_QWORD *)a2 + 26);
    if (*(_QWORD *)(a1 + 208))
    {
      if (v102)
      {
        v107 = *((_QWORD *)a2 + 27);
        *(_QWORD *)(a1 + 208) = v102;
        *(_QWORD *)(a1 + 216) = v107;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v102)
    {
LABEL_90:
      v103 = *((_QWORD *)a2 + 27);
      *(_QWORD *)(a1 + 208) = v102;
      *(_QWORD *)(a1 + 216) = v103;
      swift_retain();
      return a1;
    }
    *(_OWORD *)(a1 + 208) = a2[13];
    return a1;
  }
  outlined destroy of Binding<SwipeActionResultToken?>(a1 + 168);
  v96 = *(__int128 *)((char *)a2 + 184);
  v95 = *(__int128 *)((char *)a2 + 200);
  v97 = *v82;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_OWORD *)(a1 + 184) = v96;
  *(_OWORD *)(a1 + 200) = v95;
  *v81 = v97;
  return a1;
}

_QWORD *outlined destroy of SwipeActions.Configuration(_QWORD *a1)
{
  destroy for SwipeActions.Configuration(a1);
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for SwipeActions.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_7;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of SwipeActions.Configuration((_QWORD *)a1);
LABEL_7:
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_18;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_QWORD *)(a2 + 40))
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_release();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      goto LABEL_10;
    }
    outlined destroy of TableRowList?(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
LABEL_10:
  if (!*(_QWORD *)(a1 + 64))
  {
LABEL_17:
    v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    goto LABEL_18;
  }
  if (!*(_QWORD *)(a2 + 64))
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  v8 = *(_QWORD *)(a1 + 80);
  v9 = (_OWORD *)(a1 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = (_OWORD *)(a2 + 72);
  if (v8 == 1)
  {
LABEL_15:
    v12 = *(_OWORD *)(a2 + 88);
    *v9 = *v11;
    *(_OWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    goto LABEL_18;
  }
  if (v10 == 1)
  {
    outlined destroy of SwipeActionResultToken(a1 + 72);
    goto LABEL_15;
  }
  *(_BYTE *)v9 = *(_BYTE *)v11;
  if (v8)
  {
    if (v10)
    {
      v25 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 88) = v25;
      swift_release();
      goto LABEL_48;
    }
    swift_release();
  }
  else if (v10)
  {
    v27 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v27;
    goto LABEL_48;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_48:
  v29 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v29)
    {
      v30 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v29;
      *(_QWORD *)(a1 + 104) = v30;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  else if (v29)
  {
    v31 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 96) = v29;
    *(_QWORD *)(a1 + 104) = v31;
    goto LABEL_18;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_18:
  if (*(_QWORD *)(a1 + 136))
  {
    v14 = *(_QWORD *)(a2 + 136);
    if (v14)
    {
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v14;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + 152))
      {
        if (*(_QWORD *)(a2 + 152))
        {
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
          swift_release();
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
          swift_release();
          *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
          goto LABEL_27;
        }
        outlined destroy of TableRowList?(a1 + 144, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      }
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
LABEL_27:
      if (*(_QWORD *)(a1 + 176))
      {
        if (*(_QWORD *)(a2 + 176))
        {
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
          swift_release();
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
          swift_release();
          v18 = *(_QWORD *)(a1 + 192);
          v19 = (_OWORD *)(a1 + 184);
          v20 = *(_QWORD *)(a2 + 192);
          v21 = (_OWORD *)(a2 + 184);
          if (v18 == 1)
          {
LABEL_32:
            v22 = *(_OWORD *)(a2 + 200);
            *v19 = *v21;
            *(_OWORD *)(a1 + 200) = v22;
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
            return a1;
          }
          if (v20 == 1)
          {
            outlined destroy of SwipeActionResultToken(a1 + 184);
            goto LABEL_32;
          }
          *(_BYTE *)v19 = *(_BYTE *)v21;
          if (v18)
          {
            if (v20)
            {
              v26 = *(_QWORD *)(a2 + 200);
              *(_QWORD *)(a1 + 192) = v20;
              *(_QWORD *)(a1 + 200) = v26;
              swift_release();
              goto LABEL_55;
            }
            swift_release();
          }
          else if (v20)
          {
            v28 = *(_QWORD *)(a2 + 200);
            *(_QWORD *)(a1 + 192) = v20;
            *(_QWORD *)(a1 + 200) = v28;
            goto LABEL_55;
          }
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
LABEL_55:
          v32 = *(_QWORD *)(a2 + 208);
          if (*(_QWORD *)(a1 + 208))
          {
            if (v32)
            {
              v33 = *(_QWORD *)(a2 + 216);
              *(_QWORD *)(a1 + 208) = v32;
              *(_QWORD *)(a1 + 216) = v33;
              swift_release();
              return a1;
            }
            swift_release();
          }
          else if (v32)
          {
            v34 = *(_QWORD *)(a2 + 216);
            *(_QWORD *)(a1 + 208) = v32;
            *(_QWORD *)(a1 + 216) = v34;
            return a1;
          }
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
          return a1;
        }
        outlined destroy of Binding<SwipeActionResultToken?>(a1 + 168);
      }
      v23 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v23;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      return a1;
    }
    outlined destroy of SwipeActions.Configuration((_QWORD *)(a1 + 112));
  }
  v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v16;
  v17 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActions.Value(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 224))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwipeActions.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeActions.Value()
{
  return &type metadata for SwipeActions.Value;
}

ValueMetadata *type metadata accessor for SwipeActionsUseTraitKeyInput()
{
  return &type metadata for SwipeActionsUseTraitKeyInput;
}

ValueMetadata *type metadata accessor for SwipeActions()
{
  return &type metadata for SwipeActions;
}

uint64_t destroy for SwipeActions.Configuration(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  swift_bridgeObjectRelease();
  if (a1[5])
  {
    swift_release();
    swift_release();
  }
  result = a1[8];
  if (result)
  {
    swift_release();
    result = swift_release();
    v3 = a1[10];
    if (v3)
    {
      if (v3 == 1)
        return result;
      result = swift_release();
    }
    if (a1[12])
      return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v4;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_retain();
    swift_retain();
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
      goto LABEL_3;
LABEL_6:
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    return a1;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (!v5)
    goto LABEL_6;
LABEL_3:
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v7 = (_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *v7;
    *(_OWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  }
  else
  {
    *(_BYTE *)(a1 + 72) = *(_BYTE *)v7;
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v6;
      *(_QWORD *)(a1 + 88) = v10;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    }
    v11 = *(_QWORD *)(a2 + 96);
    if (v11)
    {
      v12 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v11;
      *(_QWORD *)(a1 + 104) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a1 + 32);
  v6 = (_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_retain();
      swift_release();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    }
    else
    {
      outlined destroy of TableRowList?(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
      v8 = *(_BYTE *)(a2 + 48);
      *v5 = *v6;
      *(_BYTE *)(a1 + 48) = v8;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    v9 = *v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    *v5 = v9;
  }
  v10 = (__int128 *)(a1 + 56);
  v11 = (__int128 *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v12)
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_retain();
      swift_release();
      v14 = (_OWORD *)(a1 + 80);
      v13 = *(_QWORD *)(a1 + 80);
      v10 = (__int128 *)(a1 + 72);
      v16 = (uint64_t *)(a2 + 80);
      v15 = *(_QWORD *)(a2 + 80);
      v17 = (__int128 *)(a2 + 72);
      if (v13 == 1)
      {
        if (v15 == 1)
        {
          v18 = *v17;
          v19 = *(_OWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
LABEL_20:
          v10[1] = v19;
LABEL_21:
          *v10 = v18;
          return a1;
        }
        *(_BYTE *)v10 = *(_BYTE *)v17;
        v31 = *v16;
        if (!*v16)
        {
          *v14 = *(_OWORD *)v16;
LABEL_30:
          v35 = *(_QWORD *)(a2 + 96);
          if (!v35)
          {
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            return a1;
          }
          goto LABEL_31;
        }
LABEL_25:
        v32 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 80) = v31;
        *(_QWORD *)(a1 + 88) = v32;
        swift_retain();
        goto LABEL_30;
      }
      if (v15 == 1)
      {
        outlined destroy of SwipeActionResultToken(a1 + 72);
        v28 = *(_QWORD *)(a2 + 104);
        v29 = *(_OWORD *)(a2 + 88);
        *v10 = *v17;
        *(_OWORD *)(a1 + 88) = v29;
        *(_QWORD *)(a1 + 104) = v28;
        return a1;
      }
      *(_BYTE *)v10 = *(_BYTE *)v17;
      v33 = *v16;
      if (v13)
      {
        if (v33)
        {
          v34 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 80) = v33;
          *(_QWORD *)(a1 + 88) = v34;
          swift_retain();
          swift_release();
          goto LABEL_37;
        }
        swift_release();
      }
      else if (v33)
      {
        v37 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 80) = v33;
        *(_QWORD *)(a1 + 88) = v37;
        swift_retain();
        goto LABEL_37;
      }
      *v14 = *(_OWORD *)v16;
LABEL_37:
      v10 = (__int128 *)(a1 + 96);
      v35 = *(_QWORD *)(a2 + 96);
      if (*(_QWORD *)(a1 + 96))
      {
        if (v35)
        {
          v38 = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 96) = v35;
          *(_QWORD *)(a1 + 104) = v38;
          swift_retain();
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v35)
      {
LABEL_31:
        v36 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 96) = v35;
        *(_QWORD *)(a1 + 104) = v36;
        swift_retain();
        return a1;
      }
      v18 = *(_OWORD *)(a2 + 96);
      goto LABEL_21;
    }
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    v26 = *(_OWORD *)(a2 + 72);
    v25 = *(_OWORD *)(a2 + 88);
    v27 = *v11;
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v26;
    *(_OWORD *)(a1 + 88) = v25;
    *v10 = v27;
  }
  else
  {
    if (!v12)
    {
      v18 = *v11;
      v19 = *(_OWORD *)(a2 + 72);
      v30 = *(_OWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v30;
      goto LABEL_20;
    }
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v20 = (uint64_t *)(a2 + 80);
    v21 = *(_QWORD *)(a2 + 80);
    v22 = (_BYTE *)(a2 + 72);
    swift_retain();
    swift_retain();
    if (v21 != 1)
    {
      *(_BYTE *)(a1 + 72) = *v22;
      v31 = *v20;
      if (!*v20)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v20;
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    v23 = *(_OWORD *)v22;
    v24 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v23;
    *(_OWORD *)(a1 + 88) = v24;
  }
  return a1;
}

uint64_t assignWithTake for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_release();
      *(_QWORD *)(a1 + 40) = v4;
      swift_release();
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      goto LABEL_6;
    }
    outlined destroy of TableRowList?(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)MEMORY[0x1E0CE75A0], (uint64_t (*)(_QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
LABEL_6:
  if (!*(_QWORD *)(a1 + 64))
  {
LABEL_13:
    v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    return a1;
  }
  v5 = *(_QWORD *)(a2 + 64);
  if (!v5)
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = v5;
  swift_release();
  v6 = *(_QWORD *)(a1 + 80);
  v7 = (_BYTE *)(a1 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = (_BYTE *)(a2 + 72);
  if (v6 != 1)
  {
    if (v8 == 1)
    {
      outlined destroy of SwipeActionResultToken(a1 + 72);
      goto LABEL_11;
    }
    *v7 = *v9;
    if (v6)
    {
      if (v8)
      {
        v13 = *(_QWORD *)(a2 + 88);
        *(_QWORD *)(a1 + 80) = v8;
        *(_QWORD *)(a1 + 88) = v13;
        swift_release();
        goto LABEL_22;
      }
      swift_release();
    }
    else if (v8)
    {
      v14 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v8;
      *(_QWORD *)(a1 + 88) = v14;
      goto LABEL_22;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_22:
    v15 = *(_QWORD *)(a2 + 96);
    if (*(_QWORD *)(a1 + 96))
    {
      if (v15)
      {
        v16 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 96) = v15;
        *(_QWORD *)(a1 + 104) = v16;
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v15)
    {
      v17 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v15;
      *(_QWORD *)(a1 + 104) = v17;
      return a1;
    }
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
LABEL_11:
  v10 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)v7 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for SwipeActions.Configuration()
{
  return &type metadata for SwipeActions.Configuration;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SwipeActionsUseTraitKeyInput()
{
  return &protocol witness table for SwipeActionsUseTraitKeyInput;
}

void base witness table accessor for _AttributeBody in SwipeActionsModifier<A>.WriteTrait()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined retain of SwipeActions.Value(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 168);
  v13 = *(_OWORD *)(a1 + 192);
  v14 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 208);
  v11 = *(_QWORD *)(a1 + 216);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  a2(v16, v15, v4, v5, v6, v7, v8, v9, v14, *((_QWORD *)&v14 + 1), v13, *((_QWORD *)&v13 + 1), v10, v11);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<SwipeActions.Key> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<SwipeActions.Key> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<SwipeActions.Key> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<SwipeActions.Key>, (uint64_t)&type metadata for SwipeActions.Key, (uint64_t)&protocol witness table for SwipeActions.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<SwipeActions.Key> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

double specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(double result, double a2)
{
  double v2;
  double v4;

  v2 = fabs(a2);
  if (fabs(result) >= 2.22044605e-16 && v2 >= 2.22044605e-16)
  {
    if (result >= 0.0)
      v4 = 1.0;
    else
      v4 = -1.0;
    return v4 * ((-1.0 / (result / a2 * v4 * 0.55 + 1.0) + 1.0) * a2);
  }
  return result;
}

double specialized static ScrollViewSupport.removeRubberBandingFromResidue(_:range:)(double result, double a2)
{
  double v2;
  double v5;

  v2 = fabs(a2);
  if (fabs(result) >= 2.22044605e-16 && v2 >= 2.22044605e-16 && result != a2)
  {
    v5 = 1.0;
    if (result < 0.0)
      v5 = -1.0;
    return v5 * ((-1.0 / (result / a2 * v5 + -1.0) + -1.0) / 0.55 * a2);
  }
  return result;
}

uint64_t ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - v10;
  v12 = *v3;
  v25 = *v3;
  if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) != 0
    || (v25 = v12, LOBYTE(v24) = 1, ViewTraitCollection.value<A>(for:defaultValue:)(), (v20 & 1) == 0) && (a1 & 1) != 0)
  {
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56);
  }
  else
  {
    v25 = v12;
    ViewTraitCollection.tag<A>(for:)();
    v15 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v11, a2);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a3, 0, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v23 = 0;
    v24 = v12;
    v20 = 1;
    v21 = 0;
    v22 = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    v16 = v25;
    v17 = v26;
    v18 = v27;
    if (v25)
    {
      if (v25 != 1)
      {
        swift_retain();
        AnyNavigationLinkPresentedValue.as<A>(_:)(a2, v16, a2);
        outlined consume of NavigationLinkSelectionIdentifier?(v16, v17, v18);
        return swift_release();
      }
    }
    else
    {
      outlined consume of NavigationLinkSelectionIdentifier?(0, v26, v27);
    }
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  return v13(a3, 1, 1, a2);
}

uint64_t outlined consume of NavigationLinkSelectionIdentifier?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_release();
    return outlined consume of Text.LineStyle?(a2, a3);
  }
  return result;
}

uint64_t View.tag<A>(_:includeOptional:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;

  v34 = a4;
  v35 = a2;
  v42 = a6;
  v43 = a1;
  v8 = type metadata accessor for Optional();
  v45 = a5;
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v8, &v45);
  v38 = v8;
  v9 = type metadata accessor for TagValueTraitKey.Value();
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v39 = (char *)&v32 - v11;
  v32 = type metadata accessor for TagValueTraitKey.Value();
  v12 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v13);
  v15 = (char *)&v32 - v14;
  v16 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v16);
  v33 = type metadata accessor for _TraitWritingModifier();
  v17 = type metadata accessor for ModifiedContent();
  v36 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v32 - v20;
  v22 = *(_QWORD *)(a3 - 8);
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v23(v15, v43, a3, v19);
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  v24(v15, 0, 1, a3);
  v25 = v34;
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v32);
  if ((v35 & 1) != 0)
  {
    v26 = v39;
    ((void (*)(char *, uint64_t, uint64_t))v23)(v39, v43, a3);
    v24(v26, 0, 1, a3);
    v27 = swift_checkMetadataState();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
  else
  {
    v28 = swift_checkMetadataState();
    v26 = v39;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v39, 1, 1, v28);
  }
  v29 = type metadata accessor for TagValueTraitKey();
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v33);
  v44[0] = v25;
  v44[1] = v30;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v44);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v29);
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, v17);
}

void type metadata accessor for PickerOption()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t PickerOption._identifiedView.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a1[3];
  v6 = a1[5];
  v7 = type metadata accessor for VStack();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v16[-v10];
  v17 = a1[2];
  v12 = v17;
  v18 = v5;
  v13 = a1[4];
  v19 = v13;
  v20 = v6;
  v21 = v2;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v7);
  View.tag<A>(_:includeOptional:)(v2, 1, v12, v14, v13, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
}

void closure #1 in PickerOption._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for PickerOption();
}

uint64_t sub_18781AD28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

void partial apply for closure #1 in PickerOption._identifiedView.getter()
{
  uint64_t v0;

  closure #1 in PickerOption._identifiedView.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

void PickerOption.body.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerOption<A, B>, a1);
  specialized PickerContent.bodyError()();
}

uint64_t sub_18781ADC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v2, v1, v0);
}

void PickerOption.init(value:content:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v10 + 16))(a4, a1, v9, v8);
  a2(v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  type metadata accessor for PickerOption();
}

uint64_t sub_18781AEA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void PickerOption.init<A>(value:content:)(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v12 + 16))(a5, a1, v11, v10);
  v13 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a5, 0, 1, a3);
  a2(v13);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a3);
  v14 = type metadata accessor for Optional();
  v15 = a4;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v14, &v15);
  type metadata accessor for PickerOption();
}

uint64_t sub_18781AFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2 + *(int *)(a1 + 52), v3, v1);
}

void PickerOption.init<A>(_:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v16 = a6;
  v17 = a5;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = MEMORY[0x1E0C80A78](a6, a2);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(double))(v15 + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a4);
  Text.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  v18 = a3;
  v19 = MEMORY[0x1E0CE6CF8];
  v20 = v17;
  v21 = MEMORY[0x1E0CE6C58];
  type metadata accessor for PickerOption();
}

uint64_t sub_18781B100(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v5 - 128) + *(int *)(result + 52);
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = v2;
  *(_BYTE *)(v6 + 16) = v3 & 1;
  *(_QWORD *)(v6 + 24) = v4;
  return result;
}

void PickerOption.init<A, B>(_:value:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a5;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, double))(v16 + 16))(a6, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a6, 0, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, a4);
  Text.init<A>(_:)();
  v20[1] = v17;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
  v18 = type metadata accessor for Optional();
  v26 = v21;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v18, &v26);
  v22 = v18;
  v23 = MEMORY[0x1E0CE6CF8];
  v24 = v19;
  v25 = MEMORY[0x1E0CE6C58];
  type metadata accessor for PickerOption();
}

uint64_t sub_18781B274(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v1 + *(int *)(result + 52);
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = v3;
  *(_BYTE *)(v6 + 16) = v4 & 1;
  *(_QWORD *)(v6 + 24) = *(_QWORD *)(v5 - 136);
  return result;
}

void PickerOption.init<>(_:value:)(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a3, a1, a2);
  Text.init(_:tableName:bundle:comment:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  type metadata accessor for PickerOption();
}

uint64_t sub_18781B380(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v5 + *(int *)(result + 52);
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = v2;
  *(_BYTE *)(v6 + 16) = v3 & 1;
  *(_QWORD *)(v6 + 24) = v4;
  return result;
}

void PickerOption.init<A>(_:value:)(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a4, a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a4, 0, 1, a2);
  Text.init(_:tableName:bundle:comment:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  v9 = type metadata accessor for Optional();
  v10 = a3;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v9, &v10);
  type metadata accessor for PickerOption();
}

uint64_t sub_18781B4C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v1 + *(int *)(result + 52);
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = v3;
  *(_BYTE *)(v6 + 16) = v4 & 1;
  *(_QWORD *)(v6 + 24) = v5;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerOption<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerOption<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void associated type witness table accessor for PickerContent.Body : PickerContent in PickerOption<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for PickerContent._IdentifiedView : View in PickerOption<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for PickerOption(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_18781B64C + 4 * byte_187C61A80[v17 - 1]))();
}

void storeEnumTagSinglePayload for PickerOption(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_18781B8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for VStack();
  v3 = type metadata accessor for TagValueTraitKey();
  v4 = MEMORY[0x1E0CE3440];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3440], v3);
  v5 = type metadata accessor for _TraitWritingModifier();
  v6 = type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for Optional();
  v17 = v1;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v7, &v17);
  v8 = type metadata accessor for TagValueTraitKey();
  MEMORY[0x18D75FFDC](v4, v8);
  v9 = type metadata accessor for _TraitWritingModifier();
  v10 = type metadata accessor for ModifiedContent();
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74B8], v2);
  v12 = MEMORY[0x1E0CE52E0];
  v16[0] = v11;
  v16[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v5);
  v13 = MEMORY[0x1E0CE2E70];
  v15[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v16);
  v15[1] = MEMORY[0x18D75FFDC](v12, v9);
  return MEMORY[0x18D75FFDC](v13, v10, v15);
}

void View.dismissalConfirmationDialog<A>(_:shouldPresent:actions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.dismissalConfirmationDialog<A, B>(_:shouldPresent:actions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.dismissalConfirmationDialog<A, B>(_:shouldPresent:actions:message:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.dismissalConfirmationDialog<A, B, C>(_:shouldPresent:actions:message:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18781BA94(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_18781BA9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void destroy for AccessibilityRotorEntryRange(uint64_t a1)
{
  outlined consume of AccessibilityRotorEntryRange(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityRotorEntryRange(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AccessibilityRotorEntryRange(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AccessibilityRotorEntryRange(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AccessibilityRotorEntryRange(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRotorEntryRange()
{
  return &type metadata for AccessibilityRotorEntryRange;
}

void AccessibilityRotorEntryRange.resolvePlatformRange(for:)(void *a1, void *a2, uint64_t a3, char a4)
{
  id v5;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  if (a4 == 2)
  {
    v5 = a2;
    return;
  }
  swift_getObjectType();
  v9 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  v32 = *((_QWORD *)v9 + 2);
  if (!v32)
  {
    outlined copy of AccessibilityRotorEntryRange(a2, a3, a4);
    v22 = a1;
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
LABEL_24:

    return;
  }
  outlined copy of AccessibilityRotorEntryRange(a2, a3, a4);
  v29 = a1;
  a1;
  v10 = 0;
  v11 = (uint64_t *)(v9 + 40);
  v12 = v9;
  v30 = v9;
  v31 = a3;
  while (1)
  {
    v13 = *v11;
    if (!a4)
      break;
    v14 = *(v11 - 1);
    type metadata accessor for Range<String.Index>();
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v15 = _NSRange.init<A, B>(_:in:)();
    v17 = v16;
    if (v15 != NSNotFound.getter())
    {
      if (__OFADD__(v15, v17))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v18 = (void *)MEMORY[0x18D75CC88](v14, v13);
      v19 = objc_msgSend(v18, sel_length);

      if ((uint64_t)v19 >= v15 + v17)
      {
        v20 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(v15, v17);
        v21 = v30;
        a3 = v31;
        goto LABEL_13;
      }
    }
    v12 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = v31;
LABEL_6:
    ++v10;
    v11 += 2;
    if (v32 == v10)
      goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v12;
  v20 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)((uint64_t)a2, a3);
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v12 = v21;
  if (!v20)
    goto LABEL_6;
  if (v32 == v10)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
    a1 = v29;
    goto LABEL_24;
  }
  if (v10 >= *((_QWORD *)v21 + 2))
    goto LABEL_26;
  v23 = *v11;
  if (a4)
  {
    v24 = *(v11 - 1);
    swift_bridgeObjectRetain();
    v25 = specialized String.resolveNSRange(_:in:)((uint64_t)a2, a3, v24, v23);
    if ((v27 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v25 = (uint64_t)a2;
    v26 = a3;
  }
  v28 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(v25, v26);
  a1 = v29;
  swift_bridgeObjectRelease();
  if (v28)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void AccessibilityNavigationRotorEntry.nsRange.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  id v20;
  BOOL v21;
  id v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  void *v30;

  v1 = *(unsigned __int8 *)(v0 + 80);
  if ((_DWORD)v1 == 255)
    return;
  v3 = *(void **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  if (!*(_BYTE *)(v0 + 80))
    return;
  v4 = *(void **)(v0 + 120);
  swift_getObjectType();
  v5 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  v6 = *((_QWORD *)v5 + 2);
  if (!v6)
  {
    outlined copy of AccessibilityRotorEntryRange?(v3, v2, v1);
    v22 = v4;
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v3, v2, v1);
LABEL_24:

    return;
  }
  outlined copy of AccessibilityRotorEntryRange?(v3, v2, v1);
  v28 = v4;
  v4;
  v29 = v2;
  v7 = 0;
  v8 = (uint64_t *)(v5 + 40);
  v30 = v3;
  while (1)
  {
    v11 = *v8;
    if ((_DWORD)v1 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v3, v2, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v3);
      v10 = v9;
      outlined consume of AccessibilityRotorEntryRange?(v3, v2, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
        goto LABEL_12;
      goto LABEL_6;
    }
    v12 = v1;
    v13 = *(v8 - 1);
    type metadata accessor for Range<String.Index>();
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v14 = _NSRange.init<A, B>(_:in:)();
    v16 = v15;
    if (v14 != NSNotFound.getter())
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v29;
    v3 = v30;
    v1 = v12;
LABEL_6:
    ++v7;
    v8 += 2;
    if (v6 == v7)
      goto LABEL_13;
  }
  v17 = __OFADD__(v14, v16);
  v18 = v14 + v16;
  if (v17)
  {
    __break(1u);
    goto LABEL_26;
  }
  v19 = (void *)MEMORY[0x18D75CC88](v13, v11);
  v20 = objc_msgSend(v19, sel_length);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v21 = (uint64_t)v20 < v18;
  v2 = v29;
  v3 = v30;
  v1 = v12;
  if (v21)
    goto LABEL_6;
LABEL_12:
  if (v6 == v7)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v3, v2, v1);
LABEL_23:
    v4 = v28;
    goto LABEL_24;
  }
  if (v7 >= *((_QWORD *)v5 + 2))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v23 = *v8;
  if ((_DWORD)v1 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v30, v2, 2);
    swift_bridgeObjectRetain();
    PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v30);
    v25 = v24;
    outlined consume of AccessibilityRotorEntryRange?(v30, v2, 2);
  }
  else
  {
    v26 = *(v8 - 1);
    swift_bridgeObjectRetain();
    specialized String.resolveNSRange(_:in:)((uint64_t)v30, v2, v26, v23);
    v25 = v27;
  }
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v30, v29, v1);
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

char *PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v1 = objc_msgSend(v0, sel_accessibilityLabel);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v8 = *((_QWORD *)v6 + 2);
    v7 = *((_QWORD *)v6 + 3);
    if (v8 >= v7 >> 1)
      v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
    *((_QWORD *)v6 + 2) = v8 + 1;
    v9 = &v6[16 * v8];
    *((_QWORD *)v9 + 4) = v3;
    *((_QWORD *)v9 + 5) = v5;
  }
  else
  {
    v6 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v10 = objc_msgSend(v0, sel_accessibilityValue);
  if (v10)
  {
    v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    if ((swift_dynamicCast() & 1) != 0)
    {
      v12 = *((_QWORD *)v6 + 2);
      if (v12)
      {
        v13 = v6 + 40;
        v14 = *((_QWORD *)v6 + 2);
        while (1)
        {
          v15 = *(v13 - 1) == v20 && *v13 == v21;
          if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          v13 += 2;
          if (!--v14)
            goto LABEL_16;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_16:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v6);
        v17 = *((_QWORD *)v6 + 2);
        v16 = *((_QWORD *)v6 + 3);
        if (v17 >= v16 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v6);
        *((_QWORD *)v6 + 2) = v17 + 1;
        v18 = &v6[16 * v17];
        *((_QWORD *)v18 + 4) = v20;
        *((_QWORD *)v18 + 5) = v21;
      }
    }
  }
  return v6;
}

uint64_t specialized String.resolveNSRange(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  id v11;

  type metadata accessor for Range<String.Index>();
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v6 = _NSRange.init<A, B>(_:in:)();
  v8 = v7;
  result = NSNotFound.getter();
  if (v6 == result)
    return 0;
  if (!__OFADD__(v6, v8))
  {
    v10 = (void *)MEMORY[0x18D75CC88](a3, a4);
    v11 = objc_msgSend(v10, sel_length, a3, a4, a1, a2);

    if ((uint64_t)v11 >= v6 + v8)
      return v6;
    return 0;
  }
  __break(1u);
  return result;
}

void type metadata accessor for Range<String.Index>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Range<String.Index>)
  {
    v0 = type metadata accessor for Range();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>);
  }
}

void Scene.menuBarExtraStyle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t dispatch thunk of MenuBarExtraStyle._makeMenuBarExtra(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for _MenuBarExtraValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MenuBarExtraValue);
}

uint64_t sub_18781C540(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t ViewTraitCollection.deleteInteraction.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  char v11;

  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v11 & 1) != 0
    || (ViewTraitCollection.value<A>(for:defaultValue:)(), (v2 = ViewTraitCollection.onDelete.getter()) == 0))
  {
    v6 = type metadata accessor for DeleteInteraction();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  else
  {
    v4 = (uint64_t)v2;
    v5 = v3;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_retain();
    v7 = type metadata accessor for DeleteInteraction();
    v8 = (_QWORD *)((char *)a1 + *(int *)(v7 + 24));
    *a1 = v10;
    IndexSet.init(integer:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    *v8 = v4;
    v8[1] = v5;
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
}

uint64_t static OnDeleteTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicViewContent.onDelete(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  _QWORD v12[2];

  if (a1)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v12[0] = v9;
  v12[1] = v8;
  outlined copy of AppIntentExecutor?(a1);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteTraitKey>);
  MEMORY[0x18D75B4AC](v12, a3, v10, *(_QWORD *)(a4 + 8));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
}

uint64_t sub_18781C7CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t static IsDeleteDisabledTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.deleteDisabled(_:)()
{
  return View._trait<A>(_:_:)();
}

ValueMetadata *type metadata accessor for OnDeleteTraitKey()
{
  return &type metadata for OnDeleteTraitKey;
}

ValueMetadata *type metadata accessor for IsDeleteDisabledTraitKey()
{
  return &type metadata for IsDeleteDisabledTraitKey;
}

uint64_t sub_18781C858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnDeleteTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteTraitKey>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E58], v2, v4);
}

uint64_t sub_18781C8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsDeleteDisabledTraitKey>);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<IsDeleteDisabledTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<IsDeleteDisabledTraitKey>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for OnDeleteDefaultTraitKey()
{
  return &type metadata for OnDeleteDefaultTraitKey;
}

Swift::Void __swiftcall DeleteInteraction.delete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v18[2];

  v1 = type metadata accessor for DeleteInteraction();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)v18 - v7;
  v10 = (uint64_t *)(v0 + *(int *)(v9 + 24));
  v11 = *v10;
  if (*v10)
  {
    v12 = v10[1];
    outlined init with copy of DeleteInteraction(v0, (uint64_t)v18 - v7);
    v13 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v11;
    *(_QWORD *)(v14 + 24) = v12;
    outlined init with take of DeleteInteraction((uint64_t)v8, v14 + v13);
    swift_retain_n();
    static Update.enqueueAction(_:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
    swift_release();
  }
  else
  {
    outlined init with copy of DeleteInteraction(v0, v6);
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(71);
    v15._countAndFlagsBits = 0xD000000000000023;
    v15._object = (void *)0x8000000187BE9280;
    String.append(_:)(v15);
    type metadata accessor for IndexSet();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x8000000187BE92B0;
    v17._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v17);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t (*ViewTraitCollection.onDelete.getter())()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    v0 = swift_allocObject();
    *(_QWORD *)(v0 + 16) = v2;
    *(_QWORD *)(v0 + 24) = v3;
    return partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DeleteInteraction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    if (*v13)
    {
      v14 = v13[1];
      *v12 = *v13;
      v12[1] = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
  }
  return v4;
}

uint64_t destroy for DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for IndexSet();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    return swift_release();
  return result;
}

_QWORD *initializeWithCopy for DeleteInteraction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  if (*v12)
  {
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  return a1;
}

_QWORD *assignWithCopy for DeleteInteraction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a1 + v10);
  v14 = *(_QWORD *)((char *)a2 + v10);
  if (!v13)
  {
    if (v14)
    {
      v16 = *((_QWORD *)v12 + 1);
      *v11 = v14;
      v11[1] = v16;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  v15 = *((_QWORD *)v12 + 1);
  *v11 = v14;
  v11[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for DeleteInteraction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12[1];
    *v11 = v13;
    v11[1] = v14;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  return a1;
}

_QWORD *assignWithTake for DeleteInteraction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a1 + v10);
  v14 = *v12;
  if (!v13)
  {
    if (v14)
    {
      v16 = v12[1];
      *v11 = v14;
      v11[1] = v16;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  v15 = v12[1];
  *v11 = v14;
  v11[1] = v15;
  swift_release();
  return a1;
}

uint64_t sub_18781D060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for IndexSet();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_18781D0EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for IndexSet();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t outlined init with copy of DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeleteInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18781D1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for DeleteInteraction();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_release();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(v0 + v3 + *(int *)(v1 + 24)))
    swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeleteInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in DeleteInteraction.delete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for DeleteInteraction();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + *(int *)(v1 + 20) + ((v2 + 32) & ~v2));
}

double one-time initialization function for componentHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.componentHorizontalPadding);
}

double static ClarityUIMetrics.componentHorizontalPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for componentHorizontalPadding, (uint64_t)&static ClarityUIMetrics.componentHorizontalPadding);
}

uint64_t one-time initialization function for componentCornerRadius()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 12.0;
  if (static ClarityUIMetrics.isPad)
    v0 = 16.0;
  static ClarityUIMetrics.componentCornerRadius = *(_QWORD *)&v0;
  return result;
}

double static ClarityUIMetrics.componentCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for componentCornerRadius, (uint64_t)&static ClarityUIMetrics.componentCornerRadius);
}

double static ClarityUIMetrics.componentHorizontalPadding.getter(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

uint64_t one-time initialization function for minimumComponentHeight()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 100.0;
  if (static ClarityUIMetrics.isPad)
    v0 = 108.0;
  static ClarityUIMetrics.minimumComponentHeight = *(_QWORD *)&v0;
  return result;
}

double static ClarityUIMetrics.minimumComponentHeight.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for minimumComponentHeight, (uint64_t)&static ClarityUIMetrics.minimumComponentHeight);
}

double one-time initialization function for buttonVerticalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.buttonVerticalPadding);
}

double one-time initialization function for buttonHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.buttonHorizontalPadding);
}

void one-time initialization function for buttonShadowRadius()
{
  static ClarityUIMetrics.buttonShadowRadius = 0x4018000000000000;
}

double static ClarityUIMetrics.buttonShadowRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for buttonShadowRadius, (uint64_t)&static ClarityUIMetrics.buttonShadowRadius);
}

double one-time initialization function for buttonShadowOffset()
{
  double result;

  result = 0.0;
  static ClarityUIMetrics.buttonShadowOffset = xmmword_187C61C20;
  return result;
}

double static ClarityUIMetrics.buttonShadowOffset.getter()
{
  if (one-time initialization token for buttonShadowOffset != -1)
    swift_once();
  return *(double *)&static ClarityUIMetrics.buttonShadowOffset;
}

void one-time initialization function for buttonShadowSpread()
{
  static ClarityUIMetrics.buttonShadowSpread = 0xBFF0000000000000;
}

uint64_t one-time initialization function for fallbackDisplayCornerRadius()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 40.0;
  if (static ClarityUIMetrics.isPad)
    v0 = 52.0;
  static ClarityUIMetrics.fallbackDisplayCornerRadius = *(_QWORD *)&v0;
  return result;
}

double static ClarityUIMetrics.fallbackDisplayCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for fallbackDisplayCornerRadius, (uint64_t)&static ClarityUIMetrics.fallbackDisplayCornerRadius);
}

void one-time initialization function for minimumDisplayCornerRadius()
{
  static ClarityUIMetrics.minimumDisplayCornerRadius = 0x403E000000000000;
}

double static ClarityUIMetrics.minimumDisplayCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for minimumDisplayCornerRadius, (uint64_t)&static ClarityUIMetrics.minimumDisplayCornerRadius);
}

void one-time initialization function for dividerThickness()
{
  static ClarityUIMetrics.dividerThickness = 0x4010000000000000;
}

void one-time initialization function for adminModeBlurRadius()
{
  static ClarityUIMetrics.adminModeBlurRadius = 0x4020000000000000;
}

double static ClarityUIMetrics.adminModeBlurRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for adminModeBlurRadius, (uint64_t)&static ClarityUIMetrics.adminModeBlurRadius);
}

uint64_t one-time initialization function for standardSpacing()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 16.0;
  if (static ClarityUIMetrics.isPad)
    v0 = 20.0;
  static ClarityUIMetrics.standardSpacing = *(_QWORD *)&v0;
  return result;
}

double static ClarityUIMetrics.standardSpacing.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for standardSpacing, (uint64_t)&static ClarityUIMetrics.standardSpacing);
}

double one-time initialization function for navigationIconToTitleSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.navigationIconToTitleSpacing);
}

uint64_t one-time initialization function for titleHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for standardSpacing, &static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleHorizontalPadding);
}

double static ClarityUIMetrics.titleHorizontalPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleHorizontalPadding, (uint64_t)&static ClarityUIMetrics.titleHorizontalPadding);
}

double one-time initialization function for titleTopPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleTopPadding);
}

double static ClarityUIMetrics.titleTopPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleTopPadding, (uint64_t)&static ClarityUIMetrics.titleTopPadding);
}

double one-time initialization function for titleBottomPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleBottomPadding);
}

double static ClarityUIMetrics.titleBottomPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleBottomPadding, (uint64_t)&static ClarityUIMetrics.titleBottomPadding);
}

void one-time initialization function for barShadowRadius()
{
  static ClarityUIMetrics.barShadowRadius = 0x4010000000000000;
}

double one-time initialization function for barShadowOffset()
{
  double result;

  result = 0.0;
  static ClarityUIMetrics.barShadowOffset = xmmword_187C61C30;
  return result;
}

double one-time initialization function for topBarTransitionDistance(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for titleBottomPadding, (double *)&static ClarityUIMetrics.titleBottomPadding, &static ClarityUIMetrics.topBarTransitionDistance);
}

double one-time initialization function for bottomBarTransitionDistance(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for backButtonPadding, (double *)&static ClarityUIMetrics.backButtonPadding, &static ClarityUIMetrics.bottomBarTransitionDistance);
}

double one-time initialization function for backIconToTitleSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.backIconToTitleSpacing);
}

double one-time initialization function for backButtonPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.backButtonPadding);
}

double static ClarityUIMetrics.backButtonPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for backButtonPadding, (uint64_t)&static ClarityUIMetrics.backButtonPadding);
}

void one-time initialization function for navigationAppIconShadowRadius()
{
  static ClarityUIMetrics.navigationAppIconShadowRadius = 0x4000000000000000;
}

double one-time initialization function for navigationAppIconShadowOffset()
{
  double result;

  result = 0.0;
  static ClarityUIMetrics.navigationAppIconShadowOffset = xmmword_187BFE560;
  return result;
}

double static ClarityUIMetrics.navigationTransitionDuration.getter()
{
  return 0.8;
}

uint64_t one-time initialization function for listTitleBottomPadding()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 30.0;
  if ((static ClarityUIMetrics.isPad & 1) == 0)
  {
    if (one-time initialization token for standardSpacing != -1)
      result = swift_once();
    v0 = static ClarityUIMetrics.standardSpacing;
  }
  static ClarityUIMetrics.listTitleBottomPadding = v0;
  return result;
}

uint64_t one-time initialization function for defaultGridCellMinWidth()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  v0 = 140.0;
  if (static ClarityUIMetrics.isPad)
    v0 = 210.0;
  static ClarityUIMetrics.defaultGridCellMinWidth = *(_QWORD *)&v0;
  return result;
}

uint64_t one-time initialization function for gridCellSpacing(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for standardSpacing, &static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.gridCellSpacing);
}

double one-time initialization function for gridIconToTextSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.gridIconToTextSpacing);
}

uint64_t one-time initialization function for gridHorizontalPaddingPortrait(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for componentHorizontalPadding, &static ClarityUIMetrics.componentHorizontalPadding, &static ClarityUIMetrics.gridHorizontalPaddingPortrait);
}

uint64_t one-time initialization function for titleHorizontalPadding(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  if ((static ClarityUIMetrics.isPad & 1) != 0)
  {
    v7 = 0x4044000000000000;
  }
  else
  {
    if (*a2 != -1)
      result = swift_once();
    v7 = *a3;
  }
  *a4 = v7;
  return result;
}

double static ClarityUIMetrics.gridHorizontalPaddingPortrait.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for gridHorizontalPaddingPortrait, (uint64_t)&static ClarityUIMetrics.gridHorizontalPaddingPortrait);
}

uint64_t one-time initialization function for gridHorizontalPaddingLandscape()
{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isPad != -1)
    result = swift_once();
  if ((static ClarityUIMetrics.isPad & 1) != 0)
  {
    v0 = 0x4054000000000000;
  }
  else
  {
    if (one-time initialization token for componentHorizontalPadding != -1)
      result = swift_once();
    v0 = static ClarityUIMetrics.componentHorizontalPadding;
  }
  static ClarityUIMetrics.gridHorizontalPaddingLandscape = v0;
  return result;
}

double static ClarityUIMetrics.gridHorizontalPaddingLandscape.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for gridHorizontalPaddingLandscape, (uint64_t)&static ClarityUIMetrics.gridHorizontalPaddingLandscape);
}

double one-time initialization function for stackCircularIconWidth(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for stackCircularIconHeight, (double *)&static ClarityUIMetrics.stackCircularIconHeight, &static ClarityUIMetrics.stackCircularIconWidth);
}

double one-time initialization function for stackCircularIconHeight()
{
  double v0;
  double result;

  if (one-time initialization token for minimumComponentHeight != -1)
    swift_once();
  v0 = *(double *)&static ClarityUIMetrics.minimumComponentHeight;
  if (one-time initialization token for buttonVerticalPadding != -1)
    swift_once();
  result = v0
         - (*(double *)&static ClarityUIMetrics.buttonVerticalPadding
          + *(double *)&static ClarityUIMetrics.buttonVerticalPadding);
  *(double *)&static ClarityUIMetrics.stackCircularIconHeight = result;
  return result;
}

double one-time initialization function for stackCellSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.stackCellSpacing);
}

double one-time initialization function for stackIconToTextSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.stackIconToTextSpacing);
}

double one-time initialization function for componentHorizontalPadding(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4)
{
  double result;

  if (*a2 != -1)
    swift_once();
  result = *a3;
  *a4 = *(_QWORD *)a3;
  return result;
}

double static ClarityUIMetrics.stackWidthAsPercentageOfScreenPad.getter()
{
  return 0.5;
}

ValueMetadata *type metadata accessor for ClarityUIMetrics()
{
  return &type metadata for ClarityUIMetrics;
}

void one-time initialization function for isPad()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static ClarityUIMetrics.isPad = v1 == (id)1;
}

uint64_t CommandMenu.MakeList.commandMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for CommandMenu(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t CommandMenu.MakeList.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = type metadata accessor for CommandsList.Item(0);
  v4 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v52 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v50 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v48 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x1E0C80A78](v8, v7);
  v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(_QWORD *)(a1 + 24);
  v44 = type metadata accessor for CommandMenu(0, v10, v49, v11);
  v12 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v13);
  v15 = (char *)&v41 - v14;
  v42 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v42, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CommandOperation();
  MEMORY[0x1E0C80A78](v19, v20);
  v45 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  CommandMenu.MakeList.commandMenu.getter(a1, v22, (uint64_t)v15);
  v24 = *(_QWORD *)v15;
  v23 = *((_QWORD *)v15 + 1);
  v25 = v15[16];
  v26 = *((_QWORD *)v15 + 3);
  outlined copy of Text.Storage(*(_QWORD *)v15, v23, v25);
  v43 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27 = v43;
  swift_bridgeObjectRetain();
  v28 = v44;
  v27(v15, v44);
  v29 = v1 + *(int *)(a1 + 36);
  v30 = &v18[*(int *)(v42 + 20)];
  v31 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v30, v29, v31);
  v53 = 0;
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)v18 = v24;
  *((_QWORD *)v18 + 1) = v23;
  v18[16] = v25;
  *((_QWORD *)v18 + 3) = v26;
  CommandMenu.MakeList.commandMenu.getter(v41, v32, (uint64_t)v15);
  v33 = (uint64_t)v47;
  v34 = v46;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v47, &v15[*(int *)(v28 + 36)], v46);
  v43(v15, v28);
  v35 = v45;
  CommandOperation.init<A>(mutation:placement:content:)(3, (uint64_t)v18, v33, v34, v49, v45);
  v36 = (uint64_t)v35;
  v37 = v50;
  outlined init with copy of CommandOperation((uint64_t)v35, v50);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(_QWORD *)(v37 + *(int *)(v51 + 20)) = v53;
  type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>();
  v38 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_187BF9830;
  outlined init with take of CommandsList.Item(v37, v39 + v38);
  outlined destroy of CommandOperation(v36);
  return v39;
}

uint64_t protocol witness for Rule.value.getter in conformance CommandMenu<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = CommandMenu.MakeList.value.getter(a1);
  *a2 = result;
  return result;
}

uint64_t static CommandMenu._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t List;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[12];
  unsigned int v22;
  char v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  List = type metadata accessor for CommandMenu.MakeList(0, a2, a3, v11);
  v13 = *(_QWORD *)(List - 8);
  MEMORY[0x1E0C80A78](List, v14);
  v16 = &v21[-v15];
  v22 = a1;
  type metadata accessor for CommandMenu(255, a2, a3, v17);
  type metadata accessor for _GraphValue();
  LODWORD(a3) = _GraphValue.value.getter();
  UUID.init()();
  *(_DWORD *)v16 = a3;
  (*(void (**)(char *, _BYTE *, uint64_t))(v7 + 32))(&v16[*(int *)(List + 36)], v10, v6);
  v24 = List;
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CommandMenu<A>.MakeList, List);
  type metadata accessor for Attribute<CommandsList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v23, List, MEMORY[0x1E0DEDCE8], v18, MEMORY[0x1E0DEDD18], v19);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, List);
  return v22;
}

uint64_t partial apply for implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)(*(_DWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t CommandMenu.init(_:content:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v8 = Text.init(_:tableName:bundle:comment:)();
  return CommandMenu.init(_:content:)(v8, v10, v9 & 1, v11, a1, a2, a3, a4);
}

uint64_t CommandMenu.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  char v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_BYTE *)(a8 + 16) = v15;
  *(_QWORD *)(a8 + 24) = a4;
  type metadata accessor for CommandMenu(0, a6, a7, v16);
  outlined copy of Text.Storage(a1, a2, v15);
  v17 = swift_bridgeObjectRetain();
  a5(v17);
  outlined consume of Text.Storage(a1, a2, v15);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandMenu);
}

uint64_t CommandMenu.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  v16 = Text.init<A>(_:)();
  CommandMenu.init(_:content:)(v16, v18, v17 & 1, v19, a2, a3, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
}

uint64_t CommandMenu._resolve(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a1;
  v23 = *(_QWORD *)(a2 + 16);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CommandOperation();
  MEMORY[0x1E0C80A78](v21, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)v2;
  v13 = *(_QWORD *)(v2 + 8);
  v15 = *(_BYTE *)(v2 + 16);
  v16 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v14, v13, v15);
  UUID.init()();
  v24 = 0;
  Text.assertUnstyled(_:options:)();
  *(_QWORD *)v9 = v14;
  *((_QWORD *)v9 + 1) = v13;
  v9[16] = v15;
  *((_QWORD *)v9 + 3) = v16;
  v17 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v5, v2 + *(int *)(a2 + 36), v23);
  CommandOperation.init<A>(mutation:placement:content:)(3, (uint64_t)v9, (uint64_t)v5, v17, *(_QWORD *)(a2 + 24), v12);
  v18 = *(void (**)(_BYTE *, uint64_t))&v12[*(int *)(v21 + 24)];
  if (v18)
    v18(v12, v20);
  return outlined destroy of CommandOperation((uint64_t)v12);
}

uint64_t outlined destroy of CommandOperation(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Commands.Body : Commands in CommandMenu<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance CommandMenu<A>@<X0>(uint64_t a1@<X8>)
{
  return static CommandMenu._makeCommands(content:inputs:)(a1);
}

uint64_t type metadata completion function for CommandMenu()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_BYTE *)(a2 + 16);
    outlined copy of Text.Storage(*(_QWORD *)a2, v12, v13);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_BYTE *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v14((a1 + v7 + 32) & ~v7, (a2 + v7 + 32) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for CommandMenu(uint64_t a1, uint64_t a2)
{
  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 32 + a1) & ~v11;
  v13 = (v11 + 32 + a2) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v14(v12, v13, v9);
  return a1;
}

uint64_t assignWithCopy for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(unsigned __int8 *)(v12 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandMenu(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18781EBBC + 4 * byte_187C61C58[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for CommandMenu(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **sub_18781EE28()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t type metadata accessor for CommandMenu.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandMenu.MakeList);
}

uint64_t type metadata completion function for CommandMenu.MakeList()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandMenu.MakeList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = *(int *)(a3 + 36);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CommandMenu.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 36);
  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_DWORD *initializeWithCopy for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 36);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandMenu.MakeList()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18781F0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 36);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CommandMenu.MakeList()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18781F140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 36);
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void base witness table accessor for _AttributeBody in CommandMenu<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined init with copy of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>)
  {
    type metadata accessor for CommandsList.Item(255);
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>);
  }
}

uint64_t outlined init with take of CommandsList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CommandsList.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in AutomaticSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticSearchFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchField<SearchFieldConfiguration.Control>(0, v8, v9, v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>(0, v15, v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for SearchFieldConfiguration);
  SearchField<>.init(_:)((uint64_t)v7, (uint64_t)v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for SearchField<SearchFieldConfiguration.Control>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchField<SearchFieldConfiguration.Control>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
}

void type metadata accessor for SearchField<SearchFieldConfiguration.Control>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SearchField<SearchFieldConfiguration.Control>)
  {
    v4 = type metadata accessor for SearchField(0, (uint64_t)&type metadata for SearchFieldConfiguration.Control, (uint64_t)&protocol witness table for SearchFieldConfiguration.Control, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SearchField<SearchFieldConfiguration.Control>);
  }
}

void type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>)
  {
    type metadata accessor for SearchField<SearchFieldConfiguration.Control>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>();
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>();
    type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<ToolbarSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle, (uint64_t)&type metadata for ToolbarSearchFieldStyle);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE6398]);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarSearchFieldStyle, &type metadata for ToolbarSearchFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticSearchFieldStyle()
{
  return &type metadata for AutomaticSearchFieldStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>(255, a2, a3, a4);
    v6 = v5;
    v10[0] = lazy protocol witness table accessor for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(v5, v7, v8, v9);
    v10[1] = &protocol witness table for SearchFieldStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<PlatformSearchFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle, (uint64_t)&type metadata for PlatformSearchFieldStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>);
  }
}

void type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for SearchFieldStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformSearchFieldStyle, &type metadata for PlatformSearchFieldStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchField<SearchFieldConfiguration.Control> and conformance SearchField<A>, (uint64_t (*)(uint64_t))type metadata accessor for SearchField<SearchFieldConfiguration.Control>, (uint64_t)&protocol conformance descriptor for SearchField<A>);
    v7[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for SearchFieldStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void protocol witness for WidgetConfiguration.body.getter in conformance EmptyWidgetConfiguration()
{
  protocol witness for WidgetConfiguration.body.getter in conformance EmptyWidgetConfiguration();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for WidgetConfiguration.body.getter in conformance LimitedAvailabilityConfiguration()
{
  protocol witness for WidgetConfiguration.body.getter in conformance EmptyWidgetConfiguration();
}

void protocol witness for WidgetConfiguration.body.getter in conformance WidgetConfigurationModifier_Content<A>()
{
  specialized PrimitiveWidgetConfiguration.body.getter();
}

uint64_t specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  __int128 v15;
  char v16;
  int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];

  static DynamicPropertyCache.fields(of:)();
  v5 = v23;
  v6 = v24;
  v7 = DWORD1(v24);
  v8 = a2[1];
  v20 = *a2;
  v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(__int128 *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static WidgetConfiguration.makeBody(widget:inputs:fields:)();
  v9 = v23;
  v10 = v24;
  v23 = v20;
  v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(&v15, v15, &v23);
  v11 = v15;
  v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    v19 = v9;
    v18 = a1;
    v15 = v5;
    v16 = v6;
    v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v8 = *a1;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v13 = a2[5];
  v12 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  v15 = v44;
  v16 = v45;
  v17 = v46;
  v18 = HIDWORD(v46);
  v44 = v9;
  LODWORD(v45) = v10;
  v46 = v11;
  v47 = *(_OWORD *)(a2 + 3);
  v48 = v13;
  v49 = v12;
  v50 = v14;
  v25 = v18;
  v26 = v8;
  v40 = v8;
  v29 = v16;
  v30 = v15;
  v32 = v15;
  v33 = v16;
  v28 = v17;
  LOBYTE(v34) = v17;
  HIDWORD(v34) = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static WidgetConfiguration.makeBody(widget:inputs:fields:)((uint64_t)v39, (uint64_t)&v41, (uint64_t)&v40, (uint64_t)&v44, (uint64_t)&v32, a3, a4);
  v19 = v42;
  v27 = v41;
  LOBYTE(v14) = v43;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = v44;
  LODWORD(v33) = v45;
  v34 = v46;
  v35 = v47;
  v36 = v48;
  v37 = v49;
  v38 = v50;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v41, v39, &v32, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = v41;
  v23 = v42;
  if ((v14 & 1) == 0)
  {
    v41 = v27;
    v42 = v19;
    v40 = v26;
    v32 = v30;
    v33 = v29;
    LOBYTE(v34) = v28;
    HIDWORD(v34) = v25;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(_QWORD *)a5 = v22;
  *(_DWORD *)(a5 + 8) = v23;
  return result;
}

uint64_t specialized static WidgetConfiguration.makeBody(widget:inputs:fields:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    type metadata accessor for WidgetConfigurationBodyAccessor<Never>(0, v0, v1, v2);
    lazy protocol witness table accessor for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>(v3, v4, v5, v6);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x726576654ELL;
    v8._object = (void *)0xE500000000000000;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static WidgetConfiguration.makeBody(widget:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::String v12;

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    v10 = type metadata accessor for WidgetConfigurationBodyAccessor(0, a6, a7, v9);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetConfigurationBodyAccessor<A>, v10);
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

char **associated type witness table accessor for WidgetConfiguration.Body : WidgetConfiguration in Never()
{
  return &protocol witness table for Never;
}

uint64_t WidgetConfigurationBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for WidgetConfigurationBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetConfigurationBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance WidgetConfigurationBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return WidgetConfigurationBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance Never@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(v3, v6, a3);
}

uint64_t dispatch thunk of WidgetConfiguration.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for WidgetDescriptor()
{
  return &type metadata for WidgetDescriptor;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance WidgetDescriptor()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance WidgetDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  static WidgetDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance WidgetDescriptor())()
{
  if (one-time initialization token for typeCache != -1)
    swift_once();
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for WidgetConfiguration.body.getter in conformance ControlWidgetConfigurationAdaptor<A>()
{
  specialized PrimitiveWidgetConfiguration.body.getter();
}

void specialized WidgetConfiguration.widgetConfigurationBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveWidgetConfiguration.body.getter()
{
  specialized WidgetConfiguration.widgetConfigurationBodyError()();
}

void type metadata accessor for WidgetConfigurationBodyAccessor<Never>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for WidgetConfigurationBodyAccessor<Never>)
  {
    v4 = type metadata accessor for WidgetConfigurationBodyAccessor(0, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for WidgetConfigurationBodyAccessor<Never>);
  }
}

uint64_t type metadata accessor for WidgetConfigurationBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WidgetConfigurationBodyAccessor);
}

unint64_t lazy protocol witness table accessor for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>)
  {
    type metadata accessor for WidgetConfigurationBodyAccessor<Never>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WidgetConfigurationBodyAccessor<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>);
  }
  return result;
}

uint64_t ObservableDocumentBox.wasOpened.getter()
{
  return 1;
}

uint64_t (*protocol witness for ObservableDocumentBox.wasOpened.modify in conformance ReferenceFileDocumentBox<A1>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ObservableDocumentBox.wasOpened.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*ObservableDocumentBox.wasOpened.modify(_BYTE *a1))(_QWORD)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ObservableDocumentBoxInputView.init(modelType:content:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1878203AC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1878203BC()
{
  return 16;
}

__n128 sub_1878203C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of NewDocumentProvider.provideNewDocument(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static ObservableDocumentBox.documentBaseClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ObservableDocumentBox.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ObservableDocumentBox.hasLoadedDocument.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ObservableDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of ObservableDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t destroy for IdentifiedDocumentGroupConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of SceneID(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
}

uint64_t initializeWithCopy for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  }
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_BYTE *)(a2 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of SceneID(v11, v12, v13);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v12;
  *(_BYTE *)(a1 + 120) = v13;
  return a1;
}

uint64_t assignWithCopy for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    v7 = *v5;
    v8 = v5[1];
    *(_QWORD *)(v4 + 32) = *((_QWORD *)v5 + 4);
    *(_OWORD *)v4 = v7;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  v11 = *(_BYTE *)(a2 + 120);
  outlined copy of SceneID(v9, v10, v11);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 120) = v11;
  outlined consume of SceneID(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  v8 = *(_BYTE *)(a2 + 120);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_BYTE *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = v8;
  outlined consume of SceneID(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifiedDocumentGroupConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifiedDocumentGroupConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentifiedDocumentGroupConfiguration()
{
  return &type metadata for IdentifiedDocumentGroupConfiguration;
}

uint64_t destroy for DocumentGroupConfiguration(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  }
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)(a1 + 48))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 48) = v6;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    v7 = *v5;
    v8 = v5[1];
    *(_QWORD *)(v4 + 32) = *((_QWORD *)v5 + 4);
    *(_OWORD *)v4 = v7;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a1 + 24;
  if (*(_QWORD *)(a1 + 48))
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_release();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration()
{
  return &type metadata for DocumentGroupConfiguration;
}

uint64_t static ObservableDocumentBoxInputView._makeViewList(view:inputs:)()
{
  int v1;

  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v1 != *MEMORY[0x1E0CFED28])
    type metadata accessor for ObservableDocumentBoxInputView.Child.ChildView();
  return static _ViewListOutputs.emptyViewList(inputs:)();
}

uint64_t key path getter for ObservableDocumentBoxInputView.content : <A, B>ObservableDocumentBoxInputView<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v5 = a3 + a2;
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  v10 = *(_OWORD *)(v5 - 24);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 40);
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = v6;
  *(_QWORD *)(v9 + 56) = v8;
  *(_QWORD *)(v9 + 64) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out B);
  a4[1] = v9;
  return swift_retain();
}

uint64_t key path setter for ObservableDocumentBoxInputView.content : <A, B>ObservableDocumentBoxInputView<A, B>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;

  v5 = a4 + a3;
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *a1;
  v7 = a1[1];
  v9 = swift_allocObject();
  v10 = *(_OWORD *)(v5 - 24);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 40);
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = v6;
  *(_QWORD *)(v9 + 56) = v8;
  *(_QWORD *)(v9 + 64) = v7;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B);
  a2[1] = (uint64_t (*)(uint64_t))v9;
  return result;
}

uint64_t (*ObservableDocumentBoxInputView.Child.content.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t *Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v13 = *Value;
  v12 = Value[1];
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B)partial apply;
}

uint64_t ObservableDocumentBoxInputView.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  AGGraphGetValue();
  v14 = ObservableDocumentBoxInputView.Child.content.getter(a1, a2, a3, a4, a5, a6);
  v16 = v15;
  swift_unknownObjectRetain();
  result = ObservedObject.init(wrappedValue:)();
  *a7 = result;
  a7[1] = v18;
  a7[2] = (uint64_t)v14;
  a7[3] = v16;
  return result;
}

uint64_t ObservableDocumentBoxInputView.Child.ChildView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  _QWORD v28[2];
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v28[1] = a4;
  v29 = a3;
  v33 = a8;
  v32 = a9;
  v30 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v28 - v16;
  v18 = type metadata accessor for _ConditionalContent();
  v31 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v28 - v20;
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 24);
  swift_unknownObjectRetain();
  LOBYTE(a7) = v22(a5, a7);
  swift_unknownObjectRelease();
  v23 = MEMORY[0x1E0CE7140];
  if ((a7 & 1) != 0)
  {
    v24 = swift_unknownObjectRetain();
    v29(v24);
    swift_unknownObjectRelease();
    v25 = v32;
    static ViewBuilder.buildExpression<A>(_:)(v13, a6, v32);
    v26 = *(void (**)(char *, uint64_t))(v30 + 8);
    v26(v13, a6);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, a6, (uint64_t)v13);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v13, a6);
    v26(v13, a6);
    v26(v17, a6);
  }
  else
  {
    v35 = static Color.clear.getter();
    v25 = v32;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v35, a6, MEMORY[0x1E0CE7170]);
    swift_release();
  }
  v34[0] = v25;
  v34[1] = v23;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v18, v34);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v18, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v18);
}

uint64_t protocol witness for View.body.getter in conformance ObservableDocumentBoxInputView<A, B>.Child.ChildView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ObservableDocumentBoxInputView.Child.ChildView.body.getter(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), a1[2], a1[3], a1[5], a2, a1[6]);
}

uint64_t protocol witness for Rule.value.getter in conformance ObservableDocumentBoxInputView<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return ObservableDocumentBoxInputView.Child.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ObservableDocumentBoxInputView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ObservableDocumentBoxInputView<A, B>, a3);
  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ObservableDocumentBoxInputView<A, B>()
{
  return static ObservableDocumentBoxInputView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ObservableDocumentBoxInputView<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ObservableDocumentBoxInputView<A, B>);
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ObservableDocumentBoxInputView<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ObservableDocumentBoxInputView<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ObservableDocumentBoxModifier()
{
  type metadata accessor for _GraphValue<ObservableDocumentBoxModifier>();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ObservableDocumentBoxModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  int v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ObservableDocumentBoxModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  char v8;

  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ObservableDocumentBoxModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t IdentifiedDocumentGroupConfiguration.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];

  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a2;
  outlined init with copy of DocumentGroupConfiguration(a1, a2);
  strcpy((char *)v41, "DocumentGroup");
  HIWORD(v41[1]) = -4864;
  if (*(_BYTE *)a1)
    v9 = 0x287265776569762DLL;
  else
    v9 = 0x28726F746964652DLL;
  v10 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v9);
  String.append(_:)(*(Swift::String *)(a1 + 72));
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x6C6261646165722DLL;
  v12._object = (void *)0xEA00000000002865;
  String.append(_:)(v12);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = 0xE000000000000000;
  v39 = 0;
  v40 = 0xE000000000000000;
  v15 = *(_QWORD *)(v13 + 16);
  v38 = a1;
  if (v15)
  {
    v16 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v17 = *(_QWORD *)(v5 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain_n();
    do
    {
      v18(v8, v16, v4);
      v19._countAndFlagsBits = UTType.identifier.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v16 += v17;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease_n();
    v20 = v39;
    v21 = v40;
    a1 = v38;
    v14 = 0xE000000000000000;
  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
  }
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x6C6261746972772DLL;
  v24._object = (void *)0xEA00000000002865;
  String.append(_:)(v24);
  v25 = *(_QWORD *)(a1 + 96);
  v39 = 0;
  v40 = 0xE000000000000000;
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v28 = *(_QWORD *)(v5 + 72);
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain_n();
    do
    {
      v29(v8, v27, v4);
      v30._countAndFlagsBits = UTType.identifier.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v27 += v28;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease_n();
    v31 = v39;
    v14 = v40;
    a1 = v38;
  }
  else
  {
    v31 = 0;
  }
  v32 = v14;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 41;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  result = outlined destroy of DocumentGroupConfiguration(a1);
  v35 = v41[1];
  v36 = v37;
  *(_QWORD *)(v37 + 104) = v41[0];
  *(_QWORD *)(v36 + 112) = v35;
  *(_BYTE *)(v36 + 120) = 0;
  return result;
}

Swift::Int IdentifiedDocumentGroupConfiguration.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance IdentifiedDocumentGroupConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(*(_QWORD *)(v0 + 104));
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IdentifiedDocumentGroupConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  if ((*(_BYTE *)(v0 + 120) & 1) != 0)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
  return Hasher._finalize()();
}

uint64_t specialized static IdentifiedDocumentGroupConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 112);
  if ((*(_BYTE *)(a1 + 120) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 120) & 1) != 0)
    {
      v6 = v3 == v5 && *(_QWORD *)(a1 + 112) == v4;
      return v6 & 1;
    }
    v16 = _typeName(_:qualified:)();
    v18 = v10;
    v11._countAndFlagsBits = 45;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v2 = v18;
    swift_bridgeObjectRetain();
    if (v16 != v5)
      goto LABEL_18;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 120) & 1) == 0)
    {
      if (v3 != v5 || v2 != v4)
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    v15 = _typeName(_:qualified:)();
    v17 = v7;
    v8._countAndFlagsBits = 45;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v4 = v17;
    if (v3 != v15)
    {
LABEL_18:
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
  }
  if (v2 != v4)
    goto LABEL_18;
  swift_bridgeObjectRelease_n();
LABEL_17:
  v6 = 1;
  return v6 & 1;
}

void type metadata accessor for ObservableDocumentBoxInputView()
{
  JUMPOUT(0x18D75FF28);
}

_OWORD *initializeBufferWithCopyOfBuffer for ObservableDocumentBoxModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ObservableDocumentBoxModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for ObservableDocumentBoxModifier(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for ObservableDocumentBoxModifier()
{
  return &type metadata for ObservableDocumentBoxModifier;
}

uint64_t storeEnumTagSinglePayload for DocumentGroupConfiguration.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187821E10 + 4 * byte_187C61F15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187821E44 + 4 * byte_187C61F10[v4]))();
}

uint64_t sub_187821E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187821E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187821E54);
  return result;
}

uint64_t sub_187821E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187821E68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187821E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187821E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration.Role()
{
  return &type metadata for DocumentGroupConfiguration.Role;
}

unint64_t lazy protocol witness table accessor for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroupConfiguration.Role, &type metadata for DocumentGroupConfiguration.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ObservableDocumentBoxModifier()
{
  return &protocol witness table for ObservableDocumentBoxModifier;
}

_UNKNOWN **base witness table accessor for View in ObservableDocumentBoxInputView<A, B>()
{
  return &protocol witness table for ObservableDocumentBoxInputView<A, B>;
}

void type metadata accessor for ObservableDocumentBoxInputView.Child.ChildView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187821F04()
{
  return 40;
}

__n128 sub_187821F10(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void type metadata accessor for ObservableDocumentBoxInputView.Child()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187821F30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 56);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out B)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 56))(*a1);
}

void type metadata accessor for _GraphValue<ObservableDocumentBoxModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>);
  }
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration.DocumentKey()
{
  return &type metadata for DocumentGroupConfiguration.DocumentKey;
}

uint64_t associated type witness table accessor for View.Body : View in ObservableDocumentBoxInputView<A, B>.Child.ChildView()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in ObservableDocumentBoxInputView<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_1878220A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = type metadata accessor for _ConditionalContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE7140];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v4);
}

id static NSBundle.swiftUI.getter()
{
  uint64_t ObjCClassFromMetadata;

  type metadata accessor for SwiftUIClass();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t type metadata accessor for SwiftUIClass()
{
  return objc_opt_self();
}

void List.init<A, B>(_:editActions:selection:rowContent:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v33 = a8;
  v41 = a6;
  v42 = a7;
  v39 = a4;
  v40 = a5;
  v37 = a9;
  v38 = a3;
  v35 = a1;
  v30 = a17;
  v29 = a15;
  v28 = a13;
  v31 = a12;
  v32 = a11;
  v20 = type metadata accessor for Binding();
  v21 = *(_QWORD *)(v20 - 8);
  v34 = v20;
  v36 = v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = *a2;
  (*(void (**)(char *, uint64_t, double))(v26 + 16))((char *)&v27 - v24, a1, v23);
  v43 = a8;
  v44 = a10;
  v45 = a11;
  v46 = a12;
  v47 = v28;
  v48 = a14;
  v49 = v29;
  v50 = a16;
  v51 = v30;
  swift_getKeyPath();
  v52 = v25;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:editActions:selection:rowContent:)();
}

uint64_t sub_187822380()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 232) + 8))(*(_QWORD *)(v0 - 240), *(_QWORD *)(v0 - 248));
}

uint64_t key path getter for Identifiable.id : <A, B><A1, B1>A1.Sequence.Element()
{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_18782241C()
{
  return 72;
}

__n128 sub_187822428(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void List.init<A, B, C>(_:id:editActions:selection:rowContent:)()
{
  type metadata accessor for IndexedIdentifierCollection();
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_1878224E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v19 = type metadata accessor for EditableCollectionContent(255, v11, v12, a4);
  v20 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, v17 + 56);
  *(_QWORD *)(v17 - 128) = a1;
  *(_QWORD *)(v17 - 120) = v14;
  *(_QWORD *)(v17 - 112) = v19;
  *(_QWORD *)(v17 - 104) = v20;
  *(_QWORD *)(v17 - 96) = v13;
  v21 = type metadata accessor for ForEach();
  *(_QWORD *)(v17 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v19, v17 + 72);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v21, v17 - 136);
  List.init(selection:content:)((uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:), v16, v15, a11);
}

uint64_t sub_187822580()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void List.init<A, B>(_:editActions:selection:rowContent:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void List.init<A, B>(_:editActions:selection:rowContent:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  uint64_t v35;
  _QWORD *KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v52 = a8;
  v49 = a4;
  v50 = a5;
  v44 = a3;
  v46 = a1;
  v48 = a9;
  v41 = a15;
  v40 = a14;
  v51 = a13;
  v39 = a12;
  v38 = a11;
  v42 = a10;
  v43 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v19 = type metadata accessor for Optional();
  v37 = *(_QWORD *)(v19 - 8);
  v20 = v37;
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v35 - v22;
  v24 = type metadata accessor for Binding();
  v25 = *(_QWORD *)(v24 - 8);
  v45 = v24;
  v47 = v25;
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)&v35 - v28;
  v30 = *a2;
  (*(void (**)(char *, uint64_t, double))(v31 + 16))((char *)&v35 - v28, a1, v27);
  v53 = a6;
  v54 = a7;
  v55 = v52;
  v56 = a10;
  v32 = v38;
  v57 = v38;
  v58 = a12;
  v59 = v51;
  v60 = v40;
  v33 = v41;
  v61 = v41;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v62 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v44, v19);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:editActions:selection:rowContent:)((uint64_t)v29, KeyPath, &v62, (uint64_t)v23, v49, v50, v43, a7, v48, v52, v42, v32, v39, AssociatedConformanceWitness, v51, v33);
}

uint64_t sub_18782287C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(v1, v0);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 224) + 8))(*(_QWORD *)(v2 - 232), *(_QWORD *)(v2 - 240));
}

void List.init<A, B, C>(_:id:editActions:selection:rowContent:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v35 = a8;
  v37 = a6;
  v36 = a5;
  v41 = a4;
  v43 = a9;
  v33 = a16;
  v32 = a15;
  v31 = a13;
  v38 = a11;
  v34 = *a2;
  v39 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  v21 = type metadata accessor for Optional();
  v22 = *(_QWORD *)(v21 - 8);
  v40 = v21;
  v42 = v22;
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v26 = *a3;
  (*(void (**)(char *, uint64_t, double))(v27 + 16))((char *)&v30 - v25, a4, v24);
  v44 = a7;
  v45 = v35;
  v46 = a10;
  v47 = a11;
  v48 = a12;
  v49 = v31;
  v50 = a14;
  v51 = v32;
  v52 = v33;
  v53 = a1;
  v54 = a2;
  v55 = v26;
  v56 = v36;
  v57 = v37;
  v28 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v34 + 8);
  v29 = *(_QWORD *)(a12 + 8);
  v58 = v35;
  v59 = v28;
  v60 = v29;
  v61 = a14;
  type metadata accessor for IndexedIdentifierCollection();
}

void sub_187822A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = type metadata accessor for EditableCollectionContent(255, v6, v4, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, v9 + 40);
  *(_QWORD *)(v9 - 128) = a1;
  *(_QWORD *)(v9 - 120) = v5;
  *(_QWORD *)(v9 - 112) = v11;
  *(_QWORD *)(v9 - 104) = v12;
  *(_QWORD *)(v9 - 96) = v7;
  v13 = type metadata accessor for ForEach();
  *(_QWORD *)(v9 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v11, v9 + 56);
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v13, v9 - 136);
  List.init(selection:content:)(v8, (uint64_t)partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:), v9 - 272, *(_QWORD *)(v9 - 312), v13, *(_QWORD *)(v9 - 320), v14, *(_QWORD *)(v9 - 280));
}

uint64_t sub_187822B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 288) + 8))(*(_QWORD *)(v1 - 296), *(_QWORD *)(v1 - 304));
  swift_release();
  swift_release();
  v2 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
}

void closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for IndexedIdentifierCollection();
}

void sub_187822C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;

  v18 = type metadata accessor for EditableCollectionContent(255, v11, v10, a4);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, v16 + 32);
  *(_QWORD *)(v16 - 128) = a1;
  *(_QWORD *)(v16 - 120) = v9;
  *(_QWORD *)(v16 - 112) = v18;
  *(_QWORD *)(v16 - 104) = v19;
  *(_QWORD *)(v16 - 96) = v14;
  v20 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v15, *(_QWORD *)(v16 - 200), v12, v26);
  *(_QWORD *)(v16 - 128) = *(_QWORD *)(v16 - 192);
  v27 = *(_QWORD **)(v16 - 208);
  swift_retain();
  v28 = *(_QWORD *)(v16 - 168);
  swift_retain();
  ForEach.init<A, B>(_:id:editActions:content:)(v15, v27, *(_QWORD *)(v16 - 152), v28, v10, *(_QWORD *)(v16 - 224), v14, (uint64_t)v23, *(_QWORD *)(v16 - 216), *(_QWORD *)(v16 - 160), *(_QWORD *)(v16 - 176), *(_QWORD *)(v16 - 184));
}

uint64_t sub_187822D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v3, v5 + 48);
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v4, v5 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v1, v4, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v1, v4);
  static ViewBuilder.buildBlock<A>(_:)(v0, v4, *(_QWORD *)(v5 - 144));
  return v7(v0, v4);
}

void partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)()
{
  closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)();
}

void List<>.init<A, B>(_:editActions:rowContent:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v22[0] = a8;
  v22[1] = a6;
  v22[6] = a4;
  v23 = a7;
  v22[4] = a9;
  v22[5] = a3;
  v22[3] = a1;
  v16 = type metadata accessor for Binding();
  v17 = *(_QWORD *)(v16 - 8);
  v22[2] = v16;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = *a2;
  (*(void (**)(char *, uint64_t, double))(v17 + 16))((char *)v22 - v20, a1, v19);
  v24 = a5;
  v25 = a6;
  v26 = v23;
  v27 = v22[0];
  v28 = a10;
  v29 = a11;
  v30 = a12;
  swift_getKeyPath();
  v31 = v21;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  List<>.init<A, B, C>(_:id:editActions:rowContent:)();
}

uint64_t sub_187822F88()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 184), *(_QWORD *)(v1 - 192));
}

uint64_t sub_187822FBC()
{
  return 56;
}

__n128 sub_187822FC8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void List<>.init<A, B, C>(_:id:editActions:rowContent:)()
{
  type metadata accessor for IndexedIdentifierCollection();
}

void sub_187823070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = type metadata accessor for EditableCollectionContent(255, v28, v27, a4);
  v32 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, v29 + 16);
  a24 = a1;
  a26 = v31;
  a27 = v32;
  v33 = type metadata accessor for ForEach();
  a23 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v31, v29 + 32);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v33, &a23);
  List<>.init(content:)();
}

uint64_t sub_187823100()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

void closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for IndexedIdentifierCollection();
}

void sub_18782320C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;

  v18 = type metadata accessor for EditableCollectionContent(255, v11, v10, a4);
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> IndexedIdentifierCollection<A, B>, a1, v16 + 16);
  *(_QWORD *)(v16 - 128) = a1;
  *(_QWORD *)(v16 - 120) = v9;
  *(_QWORD *)(v16 - 112) = v18;
  *(_QWORD *)(v16 - 104) = v19;
  *(_QWORD *)(v16 - 96) = v13;
  v20 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v12 + 16))(v15, *(_QWORD *)(v16 - 200), v14, v26);
  *(_QWORD *)(v16 - 128) = *(_QWORD *)(v16 - 192);
  v27 = *(_QWORD **)(v16 - 208);
  swift_retain();
  v28 = *(_QWORD *)(v16 - 168);
  swift_retain();
  ForEach.init<A, B>(_:id:editActions:content:)(v15, v27, *(_QWORD *)(v16 - 152), v28, v10, *(_QWORD *)(v16 - 224), v13, (uint64_t)v23, *(_QWORD *)(v16 - 216), *(_QWORD *)(v16 - 160), *(_QWORD *)(v16 - 176), *(_QWORD *)(v16 - 184));
}

uint64_t sub_18782331C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 136) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> EditableCollectionContent<A, B>, v4, v5 + 32);
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7698], v0, v5 - 136);
  static ViewBuilder.buildExpression<A>(_:)(v2, v0, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v2, v0);
  static ViewBuilder.buildBlock<A>(_:)(v1, v0, *(_QWORD *)(v5 - 144));
  return v7(v1, v0);
}

void partial apply for closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)()
{
  closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)();
}

uint64_t EnvironmentValues.ignoreInvertColorsFilterActive.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance IgnoreColorInvertEffect@<X0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  char v4;

  if (*v1 == 1)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 2;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    v4 = 9;
    *(_BYTE *)(result + 132) = 16;
  }
  else
  {
    result = 0;
    v4 = 19;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoreColorInvertEffect()
{
  lazy protocol witness table accessor for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect();
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoreColorInvertEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.active.getter(char a1)
{
  return a1 & 1;
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.active.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_AccessibilityIgnoresInvertColorsViewModifier.active.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_AccessibilityIgnoresInvertColorsViewModifier __swiftcall _AccessibilityIgnoresInvertColorsViewModifier.init(active:)(Swift::Bool active)
{
  return (SwiftUI::_AccessibilityIgnoresInvertColorsViewModifier)active;
}

void type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter();
  *a1 = result & 1;
  return result;
}

double protocol witness for Rule.value.getter in conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  v3 = *(_OWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  if ((EnvironmentValues.accessibilityInvertColors.getter() & 1) != 0)
    AGGraphGetValue();
  EnvironmentValues.ignoreInvertColorsFilterActive.setter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance _AccessibilityIgnoresInvertColorsViewModifier()
{
  specialized ViewModifier.bodyError()();
}

uint64_t sub_1878237A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(a1, a2, *(unsigned int *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24));
}

unint64_t lazy protocol witness table accessor for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreColorInvertEffect, &type metadata for IgnoreColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreColorInvertEffect, &type metadata for IgnoreColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreColorInvertEffect, &type metadata for IgnoreColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreColorInvertEffect, &type metadata for IgnoreColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IgnoreColorInvertEffect, &type metadata for IgnoreColorInvertEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _AccessibilityIgnoresInvertColorsViewModifier()
{
  return &protocol witness table for _AccessibilityIgnoresInvertColorsViewModifier;
}

uint64_t sub_187823824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _AccessibilityIgnoresInvertColorsViewModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier()
{
  return &unk_1E1B09D50;
}

uint64_t storeEnumTagSinglePayload for _AccessibilityIgnoresInvertColorsViewModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1878238D4 + 4 * byte_187C62435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187823908 + 4 * byte_187C62430[v4]))();
}

uint64_t sub_187823908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187823910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187823918);
  return result;
}

uint64_t sub_187823924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18782392CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187823930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187823938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IgnoreColorInvertEffect()
{
  return &type metadata for IgnoreColorInvertEffect;
}

ValueMetadata *type metadata accessor for IgnoreInvertColorsFilterActiveKey()
{
  return &type metadata for IgnoreInvertColorsFilterActiveKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in IgnoreColorInvertEffect()
{
  return &protocol witness table for IgnoreColorInvertEffect;
}

void type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>);
  }
}

uint64_t sub_187823AF0()
{
  uint64_t v0;

  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));
  return swift_deallocObject();
}

void outlined consume of VariableBlurStyle.Mask(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512)
    outlined consume of GraphicsImage.Contents?(a1, a2);
}

void *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment()
{
  return &unk_1E1B09DD0;
}

uint64_t property wrapper backing initializer of MapAnimator.state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v11;

  v5 = type metadata accessor for AdapterState(0, a2, a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v11 - v9, a1, v5, v8);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t MapAnimator.state.getter(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AdapterState(255, *(_QWORD *)(a1 + 16), a3, a4);
  v5 = type metadata accessor for State();
  return a2(v5);
}

void MapAnimator.init(value:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AdapterState(0, a4, a3, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for MapAnimator();
}

uint64_t sub_187823CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v11 = type metadata accessor for AdapterState.PlaybackState(0, v8, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  property wrapper backing initializer of MapAnimator.state(v9, v8, v12, v13);
  type metadata accessor for Optional();
  v14 = type metadata accessor for Binding();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v6, v7, v14);
  v16 = (_QWORD *)(v6 + *(int *)(a1 + 56));
  *v16 = v5;
  v16[1] = v4;
  return result;
}

uint64_t type metadata accessor for AdapterState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdapterState);
}

void type metadata accessor for MapAnimator()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AdapterState.PlaybackState);
}

uint64_t MapAnimator.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, _QWORD *);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, _QWORD *);
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _QWORD v66[2];
  uint64_t v67;
  BOOL v68;
  _BYTE v69[24];
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD v73[2];
  _QWORD v74[2];
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  _BYTE v84[24];
  uint64_t v85;

  v64 = a3;
  v5 = *(a1 - 1);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 16);
  v12 = type metadata accessor for AdapterState(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v53 - v15;
  v17 = v3;
  v63 = v3;
  MapAnimator.state.getter((uint64_t)a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7310], v18, v19);
  v20 = AdapterState.isPlaying.getter(v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v77 = 0x3F81111111111111;
  v78 = !v20;
  v62 = *(void (**)(char *, uint64_t, _QWORD *))(v5 + 16);
  v56 = v7;
  v62(v7, v17, a1);
  v21 = *(unsigned __int8 *)(v5 + 80);
  v61 = ((v21 + 48) & ~v21) + v6;
  v22 = (v21 + 48) & ~v21;
  v59 = v22;
  v60 = v21 | 7;
  v23 = (char *)swift_allocObject();
  v25 = a1[3];
  v24 = a1[4];
  v55 = v9;
  *((_QWORD *)v23 + 2) = v9;
  *((_QWORD *)v23 + 3) = v25;
  v57 = v25;
  *(_QWORD *)&v65 = a1[5];
  v26 = v65;
  *((_QWORD *)v23 + 4) = v24;
  *((_QWORD *)v23 + 5) = v26;
  v27 = v24;
  v54 = v24;
  v58 = *(void (**)(char *, char *, _QWORD *))(v5 + 32);
  v58(&v23[v22], v7, a1);
  type metadata accessor for _ValueActionModifier2<Date>();
  v28 = type metadata accessor for ModifiedContent();
  v29 = type metadata accessor for ModifiedContent();
  v30 = type metadata accessor for Optional();
  v76 = v27;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v30, &v76);
  v31 = type metadata accessor for _ValueActionModifier2();
  v32 = type metadata accessor for ModifiedContent();
  v33 = type metadata accessor for ModifiedContent();
  v53 = lazy protocol witness table accessor for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule();
  v34 = MEMORY[0x1E0CE5300];
  v35 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ValueActionModifier2<Date> and conformance _ValueActionModifier2<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ValueActionModifier2<Date>, MEMORY[0x1E0CE5300]);
  v75[0] = v65;
  v75[1] = v35;
  v36 = MEMORY[0x1E0CE2E70];
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v28, v75);
  v38 = MEMORY[0x1E0CE5EF8];
  v74[0] = v37;
  v74[1] = MEMORY[0x1E0CE5EF8];
  v39 = MEMORY[0x18D75FFDC](v36, v29, v74);
  v40 = MEMORY[0x18D75FFDC](v34, v31);
  v73[0] = v39;
  v73[1] = v40;
  v72[0] = MEMORY[0x18D75FFDC](v36, v32, v73);
  v72[1] = v38;
  v41 = v36;
  v42 = MEMORY[0x18D75FFDC](v36, v33, v72);
  v43 = v53;
  TimelineView<>.init(_:content:)((uint64_t)&v77, (uint64_t)partial apply for closure #1 in MapAnimator.body.getter, (uint64_t)v23, (uint64_t)&type metadata for AnimationTimelineSchedule, v33, v53, v42, (uint64_t)&v82);
  v67 = v82;
  v68 = v83;
  *(_OWORD *)v69 = *(_OWORD *)v84;
  v44 = v56;
  v62(v56, v63, a1);
  v45 = (char *)swift_allocObject();
  v46 = v57;
  *((_QWORD *)v45 + 2) = v55;
  *((_QWORD *)v45 + 3) = v46;
  v47 = v65;
  *((_QWORD *)v45 + 4) = v54;
  *((_QWORD *)v45 + 5) = v47;
  v58(&v45[v59], v44, a1);
  v48 = type metadata accessor for TimelineView(0, (uint64_t)&type metadata for AnimationTimelineSchedule, v33, v43);
  v71 = v42;
  v49 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, v48, &v71);
  View.transaction(_:)();
  swift_release();
  swift_release();
  v67 = v77;
  v68 = v78;
  *(_QWORD *)v69 = v79;
  v65 = v80;
  *(_OWORD *)&v69[8] = v80;
  v70 = v81;
  v50 = type metadata accessor for ModifiedContent();
  v66[0] = v49;
  v66[1] = MEMORY[0x1E0CE4F80];
  v51 = MEMORY[0x18D75FFDC](v41, v50, v66);
  static ViewBuilder.buildExpression<A>(_:)(&v67, v50, v51);
  swift_release();
  swift_release();
  v77 = v82;
  v78 = v83;
  v65 = *(_OWORD *)&v84[8];
  v80 = *(_OWORD *)&v84[8];
  v79 = *(_QWORD *)v84;
  v81 = v85;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v77, v50, v64);
  swift_release();
  return swift_release();
}

BOOL AdapterState.isPlaying.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  v9 = type metadata accessor for AdapterState.PlaybackState(0, *(_QWORD *)(a1 + 16), v7, v8);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9);
  if (v10 != 1)
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  return v10 != 1;
}

void closure #1 in MapAnimator.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[48];

  v14[23] = a6;
  v14[32] = a2;
  v14[21] = a1;
  v14[27] = a7;
  v11 = type metadata accessor for Optional();
  v14[26] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14[25] = (char *)v14 - v13;
  v14[43] = a3;
  v14[44] = a4;
  v14[45] = a5;
  v14[46] = a6;
  v14[31] = a5;
  type metadata accessor for MapAnimator();
}

uint64_t sub_187824484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, _BYTE *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  _BYTE v89[96];

  v8 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v6 - 352) = v8;
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v6 - 376) = &v89[-v9];
  v10 = type metadata accessor for Date();
  *(_QWORD *)(v6 - 384) = v10;
  *(_QWORD *)(v6 - 224) = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)(v6 - 408) = &v89[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v2;
  *(_QWORD *)(v6 - 232) = v2;
  type metadata accessor for AdapterState(255, v2, v14, v15);
  v16 = type metadata accessor for Binding();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v89[-v18];
  v22 = type metadata accessor for MapAnimatorProxy(0, v13, v20, v21);
  *(_QWORD *)(v6 - 424) = v22;
  *(_QWORD *)(v6 - 432) = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v89[-v24];
  *(_QWORD *)(v6 - 368) = v3;
  v26 = type metadata accessor for Binding();
  *(_QWORD *)(v6 - 440) = v26;
  *(_QWORD *)(v6 - 448) = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = &v89[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = &v89[-v32];
  *(_QWORD *)(v6 - 456) = v5;
  *(_QWORD *)(v6 - 400) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v34, v35);
  *(_QWORD *)(v6 - 240) = &v89[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for _ValueActionModifier2<Date>();
  *(_QWORD *)(v6 - 344) = type metadata accessor for ModifiedContent();
  v37 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 272) = *(_QWORD *)(v37 - 8);
  *(_QWORD *)(v6 - 392) = v37;
  v39 = MEMORY[0x1E0C80A78](v37, v38);
  *(_QWORD *)(v6 - 200) = &v89[-v40];
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 360) = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v3, v6 - 128, v39);
  *(_QWORD *)(v6 - 320) = type metadata accessor for _ValueActionModifier2();
  *(_QWORD *)(v6 - 312) = type metadata accessor for ModifiedContent();
  v41 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v6 - 304) = v41;
  *(_QWORD *)(v6 - 288) = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v42);
  *(_QWORD *)(v6 - 416) = &v89[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v44, v45);
  *(_QWORD *)(v6 - 328) = &v89[-v46];
  v47 = *(_QWORD *)(v6 - 208);
  v48 = *(void (**)(_BYTE *, _BYTE *))(v47 + *(int *)(a1 + 56));
  MapAnimator.contentBinding.getter((_QWORD *)a1, (uint64_t)v33);
  MapAnimator.state.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7318], v49, v50);
  v51 = v47;
  ItemSheetPresentationModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7548]);
  v52 = *(_QWORD *)(v6 - 232);
  MapAnimatorProxy.init(state:underlyingValue:)((uint64_t)v19, (uint64_t)v29, v52, v53, (uint64_t)v25);
  v48(v33, v25);
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v6 - 432) + 8))(v25, *(_QWORD *)(v6 - 424));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v6 - 448) + 8))(v33, *(_QWORD *)(v6 - 440));
  v54 = *(_QWORD *)(v6 - 408);
  v55 = *(_QWORD *)(v6 - 384);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 224) + 16))(v54, *(_QWORD *)(v6 - 296), v55);
  v56 = *(_QWORD *)(v6 - 352);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  *(_QWORD *)(v6 - 296) = v57;
  v58 = *(_QWORD *)(v6 - 376);
  v57(v58, v51, a1);
  v59 = *(unsigned __int8 *)(v56 + 80);
  v60 = v56;
  v61 = (v59 + 48) & ~v59;
  *(_QWORD *)(v6 - 336) = v59 | 7;
  v62 = (char *)swift_allocObject();
  *((_QWORD *)v62 + 2) = v52;
  v63 = *(_QWORD *)(v6 - 456);
  v64 = *(_QWORD *)(v6 - 216);
  *((_QWORD *)v62 + 3) = v63;
  *((_QWORD *)v62 + 4) = v64;
  v65 = *(_QWORD *)(v6 - 280);
  *((_QWORD *)v62 + 5) = v65;
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 32);
  *(_QWORD *)(v6 - 352) = v66;
  v66(&v62[v61], v58, a1);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v67 = v63;
  v68 = v55;
  v69 = v65;
  v70 = *(_QWORD *)(v6 - 240);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 224) + 8))(v54, v68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 400) + 8))(v70, v67);
  v71 = *(_QWORD *)(v6 - 264);
  v72 = *(_QWORD *)(v6 - 208);
  ItemSheetPresentationModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 296))(v58, v72, a1);
  v73 = (char *)swift_allocObject();
  *((_QWORD *)v73 + 2) = *(_QWORD *)(v6 - 232);
  *((_QWORD *)v73 + 3) = v67;
  *((_QWORD *)v73 + 4) = *(_QWORD *)(v6 - 216);
  *((_QWORD *)v73 + 5) = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 - 352))(&v73[v61], v58, a1);
  v74 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ValueActionModifier2<Date> and conformance _ValueActionModifier2<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ValueActionModifier2<Date>, MEMORY[0x1E0CE5300]);
  *(_QWORD *)(v6 - 144) = v69;
  *(_QWORD *)(v6 - 136) = v74;
  v75 = MEMORY[0x1E0CE2E70];
  v76 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], *(_QWORD *)(v6 - 344), v6 - 144);
  v77 = MEMORY[0x1E0CE5EF8];
  *(_QWORD *)(v6 - 160) = v76;
  *(_QWORD *)(v6 - 152) = v77;
  v78 = *(_QWORD *)(v6 - 392);
  v79 = MEMORY[0x18D75FFDC](v75, v78, v6 - 160);
  v80 = *(_QWORD *)(v6 - 416);
  v81 = *(_QWORD *)(v6 - 368);
  v82 = *(_QWORD *)(v6 - 200);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 256) + 8))(v71, v81);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 272) + 8))(v82, v78);
  v83 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5300], *(_QWORD *)(v6 - 320));
  *(_QWORD *)(v6 - 176) = v79;
  *(_QWORD *)(v6 - 168) = v83;
  *(_QWORD *)(v6 - 192) = MEMORY[0x18D75FFDC](v75, *(_QWORD *)(v6 - 312), v6 - 176);
  *(_QWORD *)(v6 - 184) = v77;
  v84 = *(_QWORD *)(v6 - 304);
  v85 = MEMORY[0x18D75FFDC](v75, v84, v6 - 192);
  v86 = *(_QWORD *)(v6 - 328);
  static ViewBuilder.buildExpression<A>(_:)(v80, v84, v85);
  v87 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 8);
  v87(v80, v84);
  static ViewBuilder.buildBlock<A>(_:)(v86, v84, *(_QWORD *)(v6 - 248));
  return ((uint64_t (*)(uint64_t, uint64_t))v87)(v86, v84);
}

void partial apply for closure #1 in MapAnimator.body.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_187824BEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in MapAnimator.body.getter(v1, v2 + ((v8 + 48) & ~v8), v4, v5, v6, v7, v3);
}

void type metadata accessor for _ValueActionModifier2<Date>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ValueActionModifier2<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
    v0 = type metadata accessor for _ValueActionModifier2();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ValueActionModifier2<Date>);
  }
}

unint64_t lazy protocol witness table accessor for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule;
  if (!lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimationTimelineSchedule, &type metadata for AnimationTimelineSchedule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule);
  }
  return result;
}

uint64_t MapAnimator.contentBinding.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, _QWORD *);
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, double);
  uint64_t v24;
  uint64_t v25;

  v25 = a2;
  v4 = *(a1 - 1);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1, v2);
  v7 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(void (**)(char *, double))(v4 + 16);
  v23(v7, v6);
  type metadata accessor for MainActor();
  v8 = static MainActor.shared.getter();
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 64) & ~v9;
  v22 = v9 | 7;
  v11 = (char *)swift_allocObject();
  v12 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v11 + 2) = v8;
  *((_QWORD *)v11 + 3) = v12;
  v13 = a1[2];
  v14 = a1[3];
  *((_QWORD *)v11 + 4) = v13;
  *((_QWORD *)v11 + 5) = v14;
  v15 = a1[5];
  v21 = a1[4];
  *((_QWORD *)v11 + 6) = v21;
  *((_QWORD *)v11 + 7) = v15;
  v16 = *(void (**)(char *, char *, _QWORD *))(v4 + 32);
  v16(&v11[v10], v7, a1);
  ((void (*)(char *, uint64_t, _QWORD *))v23)(v7, v24, a1);
  v17 = static MainActor.shared.getter();
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v17;
  *((_QWORD *)v18 + 3) = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v18 + 4) = v13;
  *((_QWORD *)v18 + 5) = v14;
  *((_QWORD *)v18 + 6) = v21;
  *((_QWORD *)v18 + 7) = v15;
  v16(&v18[v10], v7, a1);
  type metadata accessor for Optional();
  return Binding.init(get:set:)();
}

uint64_t MapAnimatorProxy.init(state:underlyingValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for AdapterState(255, a3, a3, a4);
  v9 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a5, a1, v9);
  v12 = a5 + *(int *)(type metadata accessor for MapAnimatorProxy(0, a3, v10, v11) + 28);
  type metadata accessor for Optional();
  v13 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
}

void closure #1 in closure #1 in MapAnimator.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AdapterState(0, a4, a3, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for MapAnimator();
}

uint64_t sub_187824FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for State();
  State.wrappedValue.getter();
  AdapterState.update(date:)(v0, v1, v5, v6);
  specialized State.wrappedValue.setter(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

uint64_t AdapterState.update(date:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  double v20;
  double v21;
  double v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  v5 = v4;
  v8 = type metadata accessor for AdapterState.PlaybackState(0, *(_QWORD *)(a2 + 16), a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v18, v5, a2, v16);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v5, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v18, v8);
    Date.timeIntervalSince(_:)();
    v21 = v20;
    type metadata accessor for KeyframeTimeline();
    KeyframeTimeline.duration.getter();
    if (v22 >= v21)
    {
      v25 = &v12[*(int *)(v8 + 28)];
      v26 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v25, a1, v26);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v5, v12, v8);
      v24 = 0;
    }
    else
    {
      v23 = *(void (**)(uint64_t))&v12[*(int *)(v8 + 40)];
      swift_retain();
      v24 = 1;
      v23(1);
      swift_release();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v24, 1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return result;
}

uint64_t MapAnimator.handleChangeOfUnderlyingValue(to:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t TupleTypeMetadata2;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v73 = a1;
  v74 = v5;
  MEMORY[0x1E0C80A78](a1, a2);
  v66 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v68 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v10 = (char *)&v60 - v9;
  v75 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v67 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v60 - v16;
  v20 = type metadata accessor for AdapterState.PlaybackState(0, v4, v18, v19);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v60 - v23;
  v27 = type metadata accessor for AdapterState(0, v4, v25, v26);
  v70 = *(_QWORD *)(v27 - 8);
  v71 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v69 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v60 - v32;
  MapAnimator.state.getter(a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7310], v34, v35);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v33, 1, v20);
  if ((_DWORD)result != 1)
  {
    v62 = a2;
    v63 = v2;
    v65 = v21;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v33, v20);
    v64 = v20;
    v37 = v74;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v17, &v24[*(int *)(v20 + 36)], v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v17, 0, 1, v4);
    v38 = TupleTypeMetadata2;
    v39 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v40 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    v40(v10, v17, v7);
    v40(v39, v73, v7);
    v41 = v37;
    v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
    v43 = v42(v10, 1, v4);
    v73 = v24;
    if (v43 == 1)
    {
      v44 = *(void (**)(char *, uint64_t))(v75 + 8);
      v44(v17, v7);
      if (v42(v39, 1, v4) == 1)
      {
        v44(v10, v7);
        v46 = v64;
        v45 = v65;
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v73, v46);
      }
    }
    else
    {
      v61 = v17;
      v47 = v75;
      v48 = v67;
      v40(v67, v10, v7);
      if (v42(v39, 1, v4) != 1)
      {
        v49 = v48;
        v50 = v66;
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v66, v39, v4);
        v51 = dispatch thunk of static Equatable.== infix(_:_:)();
        v52 = *(void (**)(char *, uint64_t))(v41 + 8);
        v52(v50, v4);
        v53 = *(void (**)(char *, uint64_t))(v47 + 8);
        v53(v61, v7);
        v52(v49, v4);
        v53(v10, v7);
        v46 = v64;
        v45 = v65;
        if ((v51 & 1) != 0)
          return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v73, v46);
LABEL_9:
        v54 = v71;
        v55 = type metadata accessor for State();
        v56 = (uint64_t)v69;
        State.wrappedValue.getter();
        AdapterState.stop()(v54, v57, v58, v59);
        specialized State.wrappedValue.setter(v56, v55);
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v56, v54);
        return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v73, v46);
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v61, v7);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v48, v4);
    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v10, v38);
    v46 = v64;
    v45 = v65;
    goto LABEL_9;
  }
  return result;
}

void closure #2 in MapAnimator.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for AdapterState(0, a3, a3, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for MapAnimator();
}

uint64_t sub_18782569C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;

  MapAnimator.state.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7310], a3, a4);
  v7 = AdapterState.isPlaying.getter(v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v4);
  if (v7)
    return Transaction.tracksVelocity.setter();
  return result;
}

void partial apply for closure #2 in MapAnimator.body.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_18782573C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #2 in MapAnimator.body.getter(v1, v2 + ((v5 + 48) & ~v5), v3, v4);
}

uint64_t AdapterState.stop()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;

  v5 = v4;
  v7 = type metadata accessor for AdapterState.PlaybackState(0, *(_QWORD *)(a1 + 16), a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v19 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v17, v5, a1, v15);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5, a1);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v17, v7);
    (*(void (**)(_QWORD))&v11[*(int *)(v7 + 40)])(0);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
  }
  return result;
}

void closure #1 in MapAnimator.contentBinding.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v5, v6);
  v9 = type metadata accessor for AdapterState(0, a4, v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  type metadata accessor for MapAnimator();
}

uint64_t sub_187825968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  MapAnimator.state.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7310], a3, a4);
  ItemSheetPresentationModifier.item.getter(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE7538]);
  AdapterState.value(with:)(v7, v8, v12, v13, *(_QWORD *)(v10 - 120));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v9, v8);
}

uint64_t AdapterState.value(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v6 = v5;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = type metadata accessor for AdapterState.PlaybackState(0, v10, a3, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v25 - v14;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v6, a2, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11) == 1)
  {
    v22 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a5, a1, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v20, v11);
    Date.timeIntervalSince(_:)();
    v24 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(a5, &v15[*(int *)(v11 + 36)], v10);
    type metadata accessor for KeyframeTimeline();
    KeyframeTimeline.update(value:time:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(a5, 0, 1, v10);
  }
}

void closure #2 in MapAnimator.contentBinding.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for AdapterState(0, a5, a3, a4);
  MEMORY[0x1E0C80A78](v5, v6);
  type metadata accessor for MapAnimator();
}

uint64_t sub_187825C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  specialized ItemSheetPresentationModifier.item.setter();
  v8 = type metadata accessor for AdapterState.PlaybackState(0, v1, v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  specialized MapAnimator.state.setter(v3, a1, v9, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

BOOL MapAnimatorProxy.isPlaying.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;

  v4 = type metadata accessor for AdapterState(0, *(_QWORD *)(a1 + 16), a3, a4);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - v7;
  v9 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v9);
  v10 = AdapterState.isPlaying.getter(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

uint64_t MapAnimatorProxy.play(defaultValue:keyframes:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v55 = a6;
  v52 = a4;
  v53 = a5;
  v47 = a3;
  v48 = a2;
  v51 = a1;
  v7 = *(_QWORD *)(a6 + 16);
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v57 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v54 = (char *)&v42 - v11;
  v14 = type metadata accessor for AdapterState(0, v7, v12, v13);
  v50 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v42 - v16;
  v18 = type metadata accessor for KeyframeTimeline();
  v44 = *(_QWORD *)(v18 - 8);
  v45 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v42 - v20;
  v22 = type metadata accessor for Binding();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v42 - v25;
  v43 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v42 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Date();
  v46 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v31);
  v33 = (char *)&v42 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v6, v22);
  v48(v34);
  MEMORY[0x18D75B9C8](v22);
  AdapterState.play(tracks:currentValue:date:completion:)((uint64_t)v21, v51, (uint64_t)v33, v52, v53, v14, (uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v21, v45);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v35 = v54;
  v36 = v43;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v54, v30, v7);
  v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56);
  v38 = v36;
  v39 = v35;
  v37(v35, 0, 1, v7);
  v40 = v56;
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v33, v49);
}

uint64_t AdapterState.play(tracks:currentValue:date:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, double);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v8 = v7;
  v64 = a5;
  v61 = a7;
  v62 = a4;
  v58 = a3;
  v59 = a1;
  v55 = a2;
  v10 = *(_QWORD *)(a6 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for KeyframeTimeline();
  v57 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v13);
  v56 = (char *)&v51 - v14;
  v15 = type metadata accessor for Date();
  v52 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - v21;
  v23 = v10;
  v26 = type metadata accessor for AdapterState.PlaybackState(0, v10, v24, v25);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v51 - v29;
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v51 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v36 + 32);
  v63 = v8;
  v37(v35, v8, a6, v33);
  v65 = v27;
  v66 = v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v35, 1, v26) != 1)
  {
    v39 = v65;
    v38 = v66;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v30, v35, v66);
    (*(void (**)(_QWORD))&v30[*(int *)(v38 + 40)])(0);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v38);
  }
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v41 = v61;
  v40(v61, v55, v23);
  v42 = v54;
  v43 = v59;
  KeyframeTimeline.duration.getter();
  KeyframeTimeline.update(value:time:)();
  v44 = v53;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v46 = v58;
  v45(v22, v58, v53);
  v45(v18, v46, v44);
  v47 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v43, v42);
  v48 = (uint64_t)v60;
  v40((uint64_t)v60, v41, v23);
  v49 = v63;
  AdapterState.PlaybackState.init(startDate:currentDate:tracks:targetValue:completion:)((uint64_t)v22, (uint64_t)v18, v47, v48, v62, v64, v23, v63);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v49, 0, 1, v66);
  return swift_retain();
}

Swift::Void __swiftcall MapAnimatorProxy.stop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for AdapterState(0, *(_QWORD *)(v0 + 16), v1, v2);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - v6;
  type metadata accessor for Binding();
  MEMORY[0x18D75B9C8]();
  AdapterState.stop()(v3, v8, v9, v10);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t AdapterState.PlaybackState.init(startDate:currentDate:tracks:targetValue:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;

  v16 = type metadata accessor for Date();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(a8, a1, v16);
  v20 = (int *)type metadata accessor for AdapterState.PlaybackState(0, a7, v18, v19);
  v17(a8 + v20[7], a2, v16);
  v21 = a8 + v20[8];
  v22 = type metadata accessor for KeyframeTimeline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a3, v22);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(a8 + v20[9], a4, a7);
  v24 = (_QWORD *)(a8 + v20[10]);
  *v24 = a5;
  v24[1] = a6;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MapAnimator<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for MapAnimator(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for Optional();
  result = type metadata accessor for Binding();
  if (v5 <= 0x3F)
  {
    type metadata accessor for AdapterState(255, v1, v3, v4);
    result = type metadata accessor for State();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MapAnimator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const void *v32;
  uint64_t (*v33)(const void *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  unint64_t v43;
  unint64_t v44;
  void (*v45)(unint64_t, unint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *__dst;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  size_t __n;
  uint64_t v71;
  uint64_t v72;

  v72 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v72 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(unsigned int *)(v4 + 84);
  v7 = *(_QWORD *)(v4 + 64);
  if ((_DWORD)v6)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = v7 + 1;
  v9 = type metadata accessor for Date();
  v10 = a2;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(unsigned int *)(v11 + 84);
  v14 = v12;
  v15 = v5 | 7;
  v16 = v12 | (unint64_t)v5;
  if (v6 <= 0x7FFFFFFF)
    v17 = 0x7FFFFFFF;
  else
    v17 = v6;
  if (v17 <= v13)
    v18 = *(_DWORD *)(v11 + 84);
  else
    v18 = v17;
  if (v6 <= v18)
    v19 = v18;
  else
    v19 = v6;
  v71 = *(_QWORD *)(v9 - 8);
  v20 = *(_QWORD *)(v11 + 64);
  v21 = v7 + 7;
  v22 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 8;
  v23 = (v7
       + 7
       + ((v22 + ((v20 + v15 + ((v20 + v12) & ~(unint64_t)v12)) & ~v15)) & ~(unint64_t)v5)) & 0xFFFFFFFFFFFFFFF8;
  __n = v8;
  v24 = ((v5 + 16) & ~(unint64_t)v5) + v8;
  v25 = (v12 | v5) & 0x100000;
  v26 = *v10;
  *a1 = *v10;
  if (v16 > 7 || v25 != 0 || (((v16 | 7) + v24) & ~(v16 | 7)) + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 + 16 > 0x18)
  {
    v29 = (_QWORD *)(v26 + ((v16 + 16) & ~(v16 | 7)));
    goto LABEL_38;
  }
  v63 = v10;
  v64 = ~(v16 | 7);
  v65 = v19;
  v66 = v17;
  v67 = v18;
  v68 = v23;
  v69 = ((v23 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v58 = v20 + v14;
  v59 = v20 + v15;
  v60 = v22;
  v61 = v9;
  v30 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  __dst = (void *)(((unint64_t)v30 + v5 + 8) & ~(unint64_t)v5);
  v56 = ~(unint64_t)v5;
  v57 = v21;
  v32 = (const void *)(((unint64_t)v31 + v5 + 8) & v56);
  v33 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v4 + 48);
  swift_retain();
  swift_retain();
  v34 = v33(v32, 1, v72);
  v55 = v4;
  if (v34)
  {
    memcpy(__dst, v32, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v4 + 16))(__dst, v32, v72);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v4 + 56))(__dst, 0, 1, v72);
  }
  v35 = ~v14;
  v36 = ~v15;
  v29 = a1;
  v37 = (char *)(((unint64_t)a1 + v24 + 7) & v64);
  v38 = (char *)(((unint64_t)v63 + v24 + 7) & v64);
  if ((_DWORD)v13 != v65)
  {
    v40 = (v59 + ((unint64_t)&v38[v58] & v35)) & v36;
    if (v66 == v65)
    {
      if (v6 >= 0x7FFFFFFF)
      {
LABEL_29:
        v39 = v33((const void *)v40, v6, v72);
        goto LABEL_34;
      }
    }
    else
    {
      v40 = (v60 + v40) & v56;
      if (v6 >= v67)
        goto LABEL_29;
    }
    v41 = *(_QWORD *)((v57 + v40) & 0xFFFFFFFFFFFFF8);
    if (v41 >= 0xFFFFFFFF)
      LODWORD(v41) = -1;
    v39 = v41 + 1;
    goto LABEL_34;
  }
  v39 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v71 + 48))(((unint64_t)v63 + v24 + 7) & v64, v13, v61);
LABEL_34:
  if (v39)
  {
    memcpy(v37, v38, v68 + 16);
  }
  else
  {
    v42 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    v42(v37, v38, v61);
    v42((char *)((unint64_t)&v37[v58] & v35), (char *)((unint64_t)&v38[v58] & v35), v61);
    v43 = (v59 + ((unint64_t)&v37[v58] & v35)) & v36;
    v44 = (v59 + ((unint64_t)&v38[v58] & v35)) & v36;
    v45 = *(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 16);
    v45(v43, v44, v72);
    *(_QWORD *)((v57 + v43) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v57 + v44) & 0xFFFFFFFFFFFFF8);
    v46 = (v60 + v43) & v56;
    v47 = (v60 + v44) & v56;
    swift_bridgeObjectRetain();
    v45(v46, v47, v72);
    v48 = v57 + v46;
    v29 = a1;
    v49 = (_QWORD *)((v57 + v47) & 0xFFFFFFFFFFFFFFF8);
    v50 = v49[1];
    v48 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v48 = *v49;
    *(_QWORD *)(v48 + 8) = v50;
    swift_retain();
  }
  *(_QWORD *)&v37[v68 + 16] = *(_QWORD *)&v38[v68 + 16];
  v51 = &v37[v69];
  v52 = *(_QWORD *)&v38[v69];
  v53 = *(_QWORD *)&v38[v69 + 8];
  *(_QWORD *)v51 = v52;
  *((_QWORD *)v51 + 1) = v53;
  swift_retain();
LABEL_38:
  swift_retain();
  return v29;
}

uint64_t destroy for MapAnimator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int (*v9)(unint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int (*v26)(unint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1 + 15;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;
  v9 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  v30 = v6;
  v32 = v5;
  v34 = ~v7;
  v10 = *(unsigned int *)(v6 + 84);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v7 | 7;
  v16 = ((v7 + 16) & ~v7) + a1 + v11;
  if (!(_DWORD)v10)
    ++v16;
  v17 = (v16 + (v7 | 7 | v14)) & ~(v7 | 7 | v14);
  v18 = *(_DWORD *)(v13 + 84);
  if (v10 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v10;
  if (v19 <= v18)
    v20 = *(_DWORD *)(v13 + 84);
  else
    v20 = v19;
  if (v10 <= v20)
    v21 = v20;
  else
    v21 = v10;
  v22 = *(_QWORD *)(v13 + 64);
  v33 = ~v14;
  if (v18 == v21)
  {
    v23 = v17;
    if ((*(unsigned int (**)(uint64_t))(v13 + 48))(v17))
      goto LABEL_26;
    goto LABEL_25;
  }
  v24 = (v22 + v15 + ((v22 + v14 + v17) & ~v14)) & ~v15;
  if (v19 == v21)
  {
    if (v10 < 0x7FFFFFFF)
      goto LABEL_19;
LABEL_24:
    v26 = v9;
    v23 = v17;
    if (v26(v24, v10, v32))
      goto LABEL_26;
    goto LABEL_25;
  }
  v24 = (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 + v7 + v24) & v34;
  if (v10 >= v20)
    goto LABEL_24;
LABEL_19:
  v23 = v17;
  v25 = *(_QWORD *)((v11 + 7 + v24) & 0xFFFFFFFFFFFFF8);
  if (v25 >= 0xFFFFFFFF)
    LODWORD(v25) = -1;
  if ((_DWORD)v25 == -1)
  {
LABEL_25:
    v27 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v27(v23, v12);
    v27((v22 + v14 + v23) & v33, v12);
    v28 = (v22 + v15 + ((v22 + v14 + v23) & v33)) & ~v15;
    v31 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v31(v28, v32);
    swift_bridgeObjectRelease();
    v31((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 + v7 + v28) & v34, v32);
    swift_release();
  }
LABEL_26:
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for MapAnimator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t (*v12)(unint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  void (*v38)(char *, char *, uint64_t);
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v54;
  uint64_t (*v55)(unint64_t, uint64_t, uint64_t);
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *__dst;
  uint64_t v62;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v62 = ~v9;
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  v55 = v12;
  v59 = v7;
  if (v12((unint64_t)v11, 1, v7))
  {
    v13 = *(unsigned int *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
    if ((_DWORD)v13)
      v15 = *(_QWORD *)(v8 + 64);
    else
      v15 = v14 + 1;
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v13 = *(unsigned int *)(v8 + 84);
    v14 = *(_QWORD *)(v8 + 64);
  }
  if ((_DWORD)v13)
    v16 = v14 + ((v9 + 16) & v62);
  else
    v16 = v14 + ((v9 + 16) & v62) + 1;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v9 | 7;
  v21 = v9 | 7 | v19;
  v60 = a1;
  __dst = (char *)(((unint64_t)a1 + v21 + v16) & ~v21);
  v22 = (char *)(((unint64_t)a2 + v21 + v16) & ~v21);
  v23 = *(unsigned int *)(v18 + 84);
  if (v13 <= 0x7FFFFFFF)
    v24 = 0x7FFFFFFF;
  else
    v24 = v13;
  if (v24 <= v23)
    v25 = *(_DWORD *)(v18 + 84);
  else
    v25 = v24;
  if (v13 <= v25)
    v26 = v25;
  else
    v26 = v13;
  v27 = *(_QWORD *)(v18 + 64);
  v28 = v27 + v19;
  v29 = v27 + v20;
  v30 = v14 + 7;
  v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v32 = (v30 + ((v31 + ((v27 + v20 + ((v27 + v19) & ~v19)) & ~v20)) & v62)) & 0xFFFFFFFFFFFFFFF8;
  v57 = ~v19;
  v58 = ~v20;
  if ((_DWORD)v23 == v26)
  {
    v33 = v17;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v22, v23, v17);
    goto LABEL_29;
  }
  v35 = (v29 + ((unint64_t)&v22[v28] & ~v19)) & ~v20;
  v33 = v17;
  if (v24 == v26)
  {
    if (v13 < 0x7FFFFFFF)
      goto LABEL_23;
  }
  else
  {
    v35 = (v31 + v35) & v62;
    if (v13 < v25)
    {
LABEL_23:
      v36 = *(_QWORD *)((v30 + v35) & 0xFFFFFFFFFFFFF8);
      if (v36 >= 0xFFFFFFFF)
        LODWORD(v36) = -1;
      v37 = v32 + 16;
      if ((_DWORD)v36 != -1)
        goto LABEL_30;
      goto LABEL_26;
    }
  }
  v34 = v55(v35, v13, v59);
LABEL_29:
  v37 = v32 + 16;
  if (v34)
  {
LABEL_30:
    v45 = __dst;
    memcpy(__dst, v22, v37);
    goto LABEL_31;
  }
LABEL_26:
  v56 = v32;
  v38 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v38(__dst, v22, v33);
  v54 = v31;
  v39 = (unint64_t)&__dst[v28] & v57;
  v38((char *)v39, (char *)((unint64_t)&v22[v28] & v57), v33);
  v40 = (v29 + v39) & v58;
  v41 = (v29 + ((unint64_t)&v22[v28] & v57)) & v58;
  v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  v42(v40, v41, v59);
  *(_QWORD *)((v30 + v40) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v30 + v41) & 0xFFFFFFFFFFFFF8);
  v43 = (v54 + v40) & v62;
  v44 = (v54 + v41) & v62;
  swift_bridgeObjectRetain();
  v42(v43, v44, v59);
  v45 = __dst;
  v46 = v30 + v43;
  v32 = v56;
  v47 = (_QWORD *)((v30 + v44) & 0xFFFFFFFFFFFFFFF8);
  v48 = v47[1];
  v46 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v46 = *v47;
  *(_QWORD *)(v46 + 8) = v48;
  swift_retain();
LABEL_31:
  *(_QWORD *)&v45[v37] = *(_QWORD *)&v22[v37];
  v49 = ((v32 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v50 = &v45[v49];
  v51 = &v22[v49];
  v52 = *((_QWORD *)v51 + 1);
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = v52;
  swift_retain();
  swift_retain();
  return v60;
}

_QWORD *assignWithCopy for MapAnimator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(unint64_t, uint64_t, uint64_t);
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  void (*v86)(char *, uint64_t);
  void (*v87)(unint64_t, uint64_t);
  char *v88;
  unint64_t v89;
  unint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void (*v98)(unint64_t, uint64_t, uint64_t);
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v109;
  uint64_t v110;
  uint64_t (*v111)(unint64_t, uint64_t, uint64_t);
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_retain();
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ~v10;
  v12 = (void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  v13 = v10 + 8 + v6;
  v14 = v9;
  v15 = (void *)(v13 & ~v10);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v17 = v16(v12, 1, v8);
  v111 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v16;
  v18 = v16(v15, 1, v8);
  v119 = v8;
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v12, v15, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v12, v15, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v14 + 84))
    v19 = *(_QWORD *)(v14 + 64);
  else
    v19 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v12, v15, v19);
LABEL_10:
  v20 = *(unsigned int *)(v14 + 84);
  v115 = (_QWORD *)v14;
  v21 = *(_QWORD *)(v14 + 64);
  if ((_DWORD)v20)
    v22 = v21 + ((v10 + 16) & v11);
  else
    v22 = v21 + ((v10 + 16) & v11) + 1;
  v23 = type metadata accessor for Date();
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v10 | 7;
  v28 = v10 | 7 | v26;
  v120 = a1;
  v29 = (char *)(((unint64_t)a1 + v28 + v22) & ~v28);
  v30 = ((unint64_t)a2 + v28 + v22) & ~v28;
  v31 = *(unsigned int *)(v25 + 84);
  if (v20 <= 0x7FFFFFFF)
    v32 = 0x7FFFFFFF;
  else
    v32 = v20;
  if (v32 <= v31)
    v33 = *(_DWORD *)(v25 + 84);
  else
    v33 = v32;
  if (v20 <= v33)
    v34 = v33;
  else
    v34 = v20;
  v35 = *(_QWORD *)(v25 + 64);
  v36 = ~v26;
  v37 = v35 + v26;
  v38 = ~v27;
  v39 = v35 + v27;
  v40 = (v35 + v27 + ((v35 + v26) & ~v26)) & ~v27;
  v41 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + v10;
  v42 = ~v10;
  v43 = v41 + 8;
  v117 = (v21 + 7 + ((v41 + 8 + v40) & v11)) & 0xFFFFFFFFFFFFFFF8;
  v118 = v21 + 7;
  v116 = v41 + 8;
  v113 = *(_QWORD **)(v23 - 8);
  v114 = v38;
  v112 = v39;
  if ((_DWORD)v31 == v34)
  {
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    v45 = v36;
    v46 = v37;
    v47 = v44(v29, v31, v23);
    v48 = (char *)v30;
    v49 = v44((char *)v30, v31, v24);
    v37 = v46;
    v36 = v45;
    v50 = v120;
    v51 = v119;
    v52 = v29;
    if (v47)
    {
      if (!v49)
        goto LABEL_45;
      goto LABEL_54;
    }
LABEL_52:
    v85 = (unint64_t)&v52[v37] & v36;
    if (!v49)
    {
      v91 = (void (*)(char *, char *, uint64_t))v113[3];
      v70 = v48;
      v92 = v48;
      v93 = v36;
      v94 = v37;
      v91(v52, v92, v24);
      v95 = (unint64_t)&v70[v94] & v93;
      v91((char *)v85, (char *)v95, v24);
      v96 = (v112 + v85) & v114;
      v97 = (v112 + v95) & v114;
      v98 = (void (*)(unint64_t, uint64_t, uint64_t))v115[3];
      v98(v96, v97, v51);
      *(_QWORD *)((v118 + v96) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v118 + v97) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v50 = v120;
      swift_bridgeObjectRelease();
      v99 = (v116 + v96) & v42;
      v100 = (v116 + v97) & v42;
      v98(v99, v100, v51);
      v101 = (_QWORD *)((v118 + v99) & 0xFFFFFFFFFFFFFFF8);
      v102 = (_QWORD *)((v118 + v100) & 0xFFFFFFFFFFFFFFF8);
      v103 = v102[1];
      *v101 = *v102;
      v101[1] = v103;
      swift_retain();
      swift_release();
      goto LABEL_56;
    }
    v86 = (void (*)(char *, uint64_t))v113[1];
    v86(v52, v24);
    v86((char *)v85, v24);
    v87 = (void (*)(unint64_t, uint64_t))v115[1];
    v87((v112 + v85) & v114, v51);
    swift_bridgeObjectRelease();
    v87((v116 + ((v112 + v85) & v114)) & v42, v51);
    swift_release();
    goto LABEL_54;
  }
  v109 = v29;
  v110 = v23;
  v48 = (char *)v30;
  v53 = (v39 + ((unint64_t)&v29[v37] & v36)) & v38;
  if (v32 == v34)
  {
    if (v20 >= 0x7FFFFFFF)
    {
LABEL_28:
      v54 = v38;
      v55 = v39;
      v56 = v36;
      v57 = v37;
      v58 = v34;
      v59 = v111(v53, v20, v119);
      v34 = v58;
      v37 = v57;
      v36 = v56;
      v39 = v55;
      v38 = v54;
      v43 = v116;
      v60 = v59;
      goto LABEL_33;
    }
  }
  else
  {
    v53 = (v43 + v53) & v11;
    if (v20 >= v33)
      goto LABEL_28;
  }
  v61 = *(_QWORD *)((v118 + v53) & 0xFFFFFFFFFFFFF8);
  if (v61 >= 0xFFFFFFFF)
    LODWORD(v61) = -1;
  v60 = v61 + 1;
LABEL_33:
  v50 = v120;
  v62 = (v39 + ((unint64_t)&v48[v37] & v36)) & v38;
  if (!v60)
  {
    if (v32 == v34)
    {
      if (v20 >= 0x7FFFFFFF)
      {
LABEL_39:
        v51 = v119;
        v66 = v36;
        v67 = v37;
        v49 = v111(v62, v20, v119);
        v37 = v67;
        v36 = v66;
LABEL_51:
        v52 = v109;
        v24 = v110;
        goto LABEL_52;
      }
    }
    else
    {
      v62 = (v43 + v62) & v42;
      if (v20 >= v33)
        goto LABEL_39;
    }
    v51 = v119;
    v84 = *(_QWORD *)((v118 + v62) & 0xFFFFFFFFFFFFF8);
    if (v84 >= 0xFFFFFFFF)
      LODWORD(v84) = -1;
    v49 = v84 + 1;
    goto LABEL_51;
  }
  if (v32 == v34)
  {
    if (v20 >= 0x7FFFFFFF)
    {
LABEL_36:
      v51 = v119;
      v63 = v36;
      v64 = v37;
      v65 = v111(v62, v20, v119);
      v37 = v64;
      v36 = v63;
      goto LABEL_44;
    }
  }
  else
  {
    v62 = (v43 + v62) & v42;
    if (v20 >= v33)
      goto LABEL_36;
  }
  v51 = v119;
  v68 = *(_QWORD *)((v118 + v62) & 0xFFFFFFFFFFFFF8);
  if (v68 >= 0xFFFFFFFF)
    LODWORD(v68) = -1;
  v65 = v68 + 1;
LABEL_44:
  v52 = v109;
  v24 = v110;
  if (!v65)
  {
LABEL_45:
    v69 = (void (*)(char *, char *, uint64_t))v113[2];
    v70 = v48;
    v71 = v48;
    v72 = v36;
    v73 = v37;
    v69(v52, v71, v24);
    v74 = (unint64_t)&v70[v73] & v72;
    v69((char *)((unint64_t)&v52[v73] & v72), (char *)v74, v24);
    v75 = (v112 + ((unint64_t)&v52[v73] & v72)) & v114;
    v76 = v112 + v74;
    v50 = v120;
    v77 = v76 & v114;
    v78 = (void (*)(unint64_t, uint64_t, uint64_t))v115[2];
    v78(v75, v76 & v114, v51);
    *(_QWORD *)((v118 + v75) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v118 + v77) & 0xFFFFFFFFFFFFF8);
    v79 = (v116 + v75) & v42;
    v80 = (v116 + v77) & v42;
    swift_bridgeObjectRetain();
    v78(v79, v80, v51);
    v81 = (_QWORD *)((v118 + v80) & 0xFFFFFFFFFFFFFFF8);
    v82 = v81[1];
    v83 = (_QWORD *)((v118 + v79) & 0xFFFFFFFFFFFFFFF8);
    *v83 = *v81;
    v83[1] = v82;
    swift_retain();
LABEL_56:
    v89 = v117 + 16;
    v90 = v117;
    goto LABEL_57;
  }
LABEL_54:
  v70 = v48;
  v88 = v48;
  v89 = v117 + 16;
  memcpy(v52, v88, v117 + 16);
  v90 = v117;
LABEL_57:
  *(_QWORD *)&v52[v89] = *(_QWORD *)&v70[v89];
  swift_retain();
  swift_release();
  v104 = ((v90 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v105 = &v52[v104];
  v106 = &v70[v104];
  v107 = *((_QWORD *)v106 + 1);
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *((_QWORD *)v105 + 1) = v107;
  swift_retain();
  swift_release();
  return v50;
}

_QWORD *initializeWithTake for MapAnimator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  void (*v37)(char *, char *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(unint64_t, unint64_t, uint64_t);
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *__dst;
  uint64_t v55;

  *a1 = *a2;
  v5 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v55 = ~v9;
  v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v52 = v7;
  if (v48(v11, 1, v7))
  {
    v12 = *(unsigned int *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if ((_DWORD)v12)
      v14 = *(_QWORD *)(v8 + 64);
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    v12 = *(unsigned int *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if ((_DWORD)v12)
    v15 = v13 + ((v9 + 16) & v55);
  else
    v15 = v13 + ((v9 + 16) & v55) + 1;
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v9 | 7;
  v20 = v9 | 7 | v18;
  v53 = a1;
  __dst = (char *)(((unint64_t)a1 + v20 + v15) & ~v20);
  v21 = (char *)(((unint64_t)a2 + v20 + v15) & ~v20);
  v22 = *(unsigned int *)(v17 + 84);
  if (v12 <= 0x7FFFFFFF)
    v23 = 0x7FFFFFFF;
  else
    v23 = v12;
  if (v23 <= v22)
    v24 = *(_DWORD *)(v17 + 84);
  else
    v24 = v23;
  if (v12 <= v24)
    v25 = v24;
  else
    v25 = v12;
  v26 = *(_QWORD *)(v17 + 64);
  v27 = v26 + v18;
  v28 = v26 + v19;
  v29 = v13 + 7;
  v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v31 = (v29 + ((v30 + ((v26 + v19 + ((v26 + v18) & ~v18)) & ~v19)) & v55)) & 0xFFFFFFFFFFFFFFF8;
  v50 = ~v18;
  v51 = ~v19;
  if ((_DWORD)v22 == v25)
  {
    v32 = v16;
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v21, v22, v16);
    goto LABEL_29;
  }
  v34 = (v28 + ((unint64_t)&v21[v27] & ~v18)) & ~v19;
  v32 = v16;
  if (v23 == v25)
  {
    if (v12 < 0x7FFFFFFF)
      goto LABEL_23;
  }
  else
  {
    v34 = (v30 + v34) & v55;
    if (v12 < v24)
    {
LABEL_23:
      v35 = *(_QWORD *)((v29 + v34) & 0xFFFFFFFFFFFFF8);
      if (v35 >= 0xFFFFFFFF)
        LODWORD(v35) = -1;
      v36 = v31 + 16;
      if ((_DWORD)v35 != -1)
        goto LABEL_30;
      goto LABEL_26;
    }
  }
  v33 = v48((const void *)v34, v12, v52);
LABEL_29:
  v36 = v31 + 16;
  if (v33)
  {
LABEL_30:
    v44 = __dst;
    memcpy(__dst, v21, v36);
    goto LABEL_31;
  }
LABEL_26:
  v49 = v31;
  v37 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v37(__dst, v21, v32);
  v47 = v30;
  v38 = (unint64_t)&__dst[v27] & v50;
  v37((char *)v38, (char *)((unint64_t)&v21[v27] & v50), v32);
  v39 = (v28 + v38) & v51;
  v40 = (v28 + ((unint64_t)&v21[v27] & v50)) & v51;
  v41 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  v41(v39, v40, v52);
  *(_QWORD *)((v29 + v39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v29 + v40) & 0xFFFFFFFFFFFFF8);
  v42 = (v47 + v39) & v55;
  v43 = (v47 + v40) & v55;
  v41(v42, v43, v52);
  v44 = __dst;
  v45 = v29 + v42;
  v31 = v49;
  *(_OWORD *)(v45 & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v29 + v43) & 0xFFFFFFFFFFFFF8);
LABEL_31:
  *(_QWORD *)&v44[v36] = *(_QWORD *)&v21[v36];
  *(_OWORD *)&v44[((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 8] = *(_OWORD *)&v21[((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 8];
  return v53;
}

_QWORD *assignWithTake for MapAnimator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  int v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(unint64_t, uint64_t, uint64_t);
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(unint64_t, uint64_t);
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(unint64_t, uint64_t, uint64_t);
  unint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t (*v101)(unint64_t, uint64_t, uint64_t);
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;

  v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *v7 = *(_QWORD *)v6;
  swift_release();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ~v10;
  v12 = (void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  v13 = v10 + 8 + v6;
  v14 = v9;
  v15 = (void *)(v13 & ~v10);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v17 = v16(v12, 1, v8);
  v101 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v16;
  v18 = v16(v15, 1, v8);
  v108 = v8;
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v12, v15, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v8);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v12, v15, v8);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v12, v8);
  }
  if (*(_DWORD *)(v14 + 84))
    v19 = *(_QWORD *)(v14 + 64);
  else
    v19 = *(_QWORD *)(v14 + 64) + 1;
  memcpy(v12, v15, v19);
LABEL_10:
  v20 = a2;
  v21 = *(unsigned int *)(v14 + 84);
  v105 = (_QWORD *)v14;
  v22 = *(_QWORD *)(v14 + 64);
  if ((_DWORD)v21)
    v23 = v22 + ((v10 + 16) & v11);
  else
    v23 = v22 + ((v10 + 16) & v11) + 1;
  v24 = type metadata accessor for Date();
  v25 = v24;
  v26 = *(_QWORD *)(v24 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v10 | 7;
  v29 = v10 | 7 | v27;
  v109 = a1;
  v30 = (char *)(((unint64_t)a1 + v29 + v23) & ~v29);
  v31 = (char *)(((unint64_t)v20 + v29 + v23) & ~v29);
  v32 = *(unsigned int *)(v26 + 84);
  if (v21 <= 0x7FFFFFFF)
    v33 = 0x7FFFFFFF;
  else
    v33 = v21;
  if (v33 <= v32)
    v34 = *(_DWORD *)(v26 + 84);
  else
    v34 = v33;
  if (v21 <= v34)
    v35 = v34;
  else
    v35 = v21;
  v36 = *(_QWORD *)(v26 + 64);
  v37 = ~v27;
  v38 = v36 + v27;
  v39 = ~v28;
  v40 = v36 + v28;
  v41 = (v36 + v28 + ((v36 + v27) & ~v27)) & ~v28;
  v42 = v22 + 7;
  v43 = (v42 & 0xFFFFFFFFFFFFFFF8) + v10;
  v44 = ~v10;
  v45 = v43 + 8;
  v106 = v43 + 8;
  v107 = (v42 + ((v43 + 8 + v41) & v11)) & 0xFFFFFFFFFFFFFFF8;
  v103 = *(_QWORD **)(v24 - 8);
  v104 = v39;
  v102 = v40;
  if ((_DWORD)v32 == v35)
  {
    v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    v47 = v37;
    v48 = v38;
    v49 = v46(v30, v32, v24);
    v50 = v46(v31, v32, v25);
    v38 = v48;
    v37 = v47;
    v51 = v109;
    v52 = v31;
    v53 = v107;
    if (v49)
    {
      if (!v50)
        goto LABEL_45;
LABEL_54:
      v82 = v107 + 16;
      memcpy(v30, v52, v107 + 16);
      goto LABEL_55;
    }
LABEL_52:
    v84 = (unint64_t)&v30[v38] & v37;
    if (!v50)
    {
      v88 = (void (*)(char *, char *, uint64_t))v103[5];
      v89 = v37;
      v90 = v38;
      v88(v30, v52, v25);
      v91 = (unint64_t)&v52[v90] & v89;
      v88((char *)v84, (char *)v91, v25);
      v92 = (v102 + v84) & v104;
      v93 = v102 + v91;
      v51 = v109;
      v94 = v93 & v104;
      v95 = (void (*)(unint64_t, uint64_t, uint64_t))v105[5];
      v95(v92, v93 & v104, v108);
      *(_QWORD *)((v42 + v92) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v42 + v94) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      v96 = (v106 + v92) & v44;
      v97 = (v106 + v94) & v44;
      v95(v96, v97, v108);
      *(_OWORD *)((v42 + v96) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v42 + v97) & 0xFFFFFFFFFFFFF8);
      swift_release();
      v82 = v107 + 16;
      goto LABEL_55;
    }
    v85 = (void (*)(char *, uint64_t))v103[1];
    v85(v30, v25);
    v85((char *)v84, v25);
    v86 = (void (*)(unint64_t, uint64_t))v105[1];
    v86((v102 + v84) & v104, v108);
    swift_bridgeObjectRelease();
    v86((v106 + ((v102 + v84) & v104)) & v44, v108);
    swift_release();
    goto LABEL_54;
  }
  v99 = v24;
  v100 = v31;
  v98 = v30;
  v54 = (v40 + ((unint64_t)&v30[v38] & v37)) & v39;
  if (v33 == v35)
  {
    if (v21 >= 0x7FFFFFFF)
    {
LABEL_28:
      v55 = v39;
      v56 = v40;
      v57 = v37;
      v58 = v38;
      v59 = v44;
      v60 = v35;
      v61 = v101(v54, v21, v108);
      v35 = v60;
      v44 = v59;
      v38 = v58;
      v37 = v57;
      v40 = v56;
      v39 = v55;
      v45 = v106;
      v62 = v61;
      goto LABEL_33;
    }
  }
  else
  {
    v54 = (v45 + v54) & v11;
    if (v21 >= v34)
      goto LABEL_28;
  }
  v63 = *(_QWORD *)((v42 + v54) & 0xFFFFFFFFFFFFF8);
  if (v63 >= 0xFFFFFFFF)
    LODWORD(v63) = -1;
  v62 = v63 + 1;
LABEL_33:
  v51 = v109;
  v64 = (v40 + ((unint64_t)&v100[v38] & v37)) & v39;
  if (!v62)
  {
    if (v33 == v35)
    {
      if (v21 >= 0x7FFFFFFF)
      {
LABEL_39:
        v68 = v37;
        v69 = v38;
        v50 = v101(v64, v21, v108);
        v38 = v69;
        v37 = v68;
LABEL_51:
        v30 = v98;
        v25 = v99;
        v52 = v100;
        v53 = v107;
        goto LABEL_52;
      }
    }
    else
    {
      v64 = (v45 + v64) & v44;
      if (v21 >= v34)
        goto LABEL_39;
    }
    v83 = *(_QWORD *)((v42 + v64) & 0xFFFFFFFFFFFFF8);
    if (v83 >= 0xFFFFFFFF)
      LODWORD(v83) = -1;
    v50 = v83 + 1;
    goto LABEL_51;
  }
  if (v33 == v35)
  {
    if (v21 >= 0x7FFFFFFF)
    {
LABEL_36:
      v65 = v37;
      v66 = v38;
      v67 = v101(v64, v21, v108);
      v38 = v66;
      v37 = v65;
      goto LABEL_44;
    }
  }
  else
  {
    v64 = (v45 + v64) & v44;
    if (v21 >= v34)
      goto LABEL_36;
  }
  v70 = *(_QWORD *)((v42 + v64) & 0xFFFFFFFFFFFFF8);
  if (v70 >= 0xFFFFFFFF)
    LODWORD(v70) = -1;
  v67 = v70 + 1;
LABEL_44:
  v30 = v98;
  v25 = v99;
  v52 = v100;
  v53 = v107;
  if (v67)
    goto LABEL_54;
LABEL_45:
  v71 = (void (*)(char *, char *, uint64_t))v103[4];
  v72 = v37;
  v73 = v38;
  v71(v30, v52, v25);
  v74 = (unint64_t)&v30[v73] & v72;
  v75 = (unint64_t)&v52[v73] & v72;
  v71((char *)v74, (char *)v75, v25);
  v76 = (v102 + v74) & v104;
  v77 = v102 + v75;
  v51 = v109;
  v78 = v77 & v104;
  v79 = (void (*)(unint64_t, uint64_t, uint64_t))v105[4];
  v79(v76, v77 & v104, v108);
  *(_QWORD *)((v42 + v76) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v42 + v78) & 0xFFFFFFFFFFFFF8);
  v80 = (v106 + v76) & v44;
  v81 = (v106 + v78) & v44;
  v79(v80, v81, v108);
  *(_OWORD *)((v42 + v80) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v42 + v81) & 0xFFFFFFFFFFFFF8);
  v82 = v107 + 16;
LABEL_55:
  *(_QWORD *)&v30[v82] = *(_QWORD *)&v52[v82];
  swift_release();
  *(_OWORD *)&v30[((v53 + 23) & 0xFFFFFFFFFFFFFFF8) + 8] = *(_OWORD *)&v52[((v53 + 23) & 0xFFFFFFFFFFFFFFF8) + 8];
  swift_release();
  return v51;
}

uint64_t getEnumTagSinglePayload for MapAnimator(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = v8;
  v10 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v7 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v7;
  if (v12 <= v11)
    v13 = *(_DWORD *)(v10 + 84);
  else
    v13 = v12;
  if (v7 <= v13)
    v14 = v13;
  else
    v14 = v7;
  if (v14 - 1 <= v9)
    v15 = v9;
  else
    v15 = v14 - 1;
  v16 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v7)
    v17 = *(_QWORD *)(v6 + 64);
  else
    v17 = v16 + 1;
  if (!a2)
    return 0;
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = v18 | 7;
  v21 = v18 | 7 | v19;
  v22 = *(_QWORD *)(v10 + 64);
  v23 = v22 + v19;
  v24 = (v18 | 7) + v22;
  v25 = v16 + 7;
  v26 = (v25 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  v27 = v17 + ((v18 + 16) & ~v18) + v21;
  if (v15 < a2)
  {
    v28 = a2 - v15;
    if ((((v27 & ~v21)
         + ((((v25 + ((v26 + ((v24 + (v23 & ~v19)) & ~v20)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 24) & 0xFFFFFFF8) != 0)
      v29 = 2;
    else
      v29 = v28 + 1;
    if (v29 >= 0x10000)
      v30 = 4;
    else
      v30 = 2;
    if (v29 < 0x100)
      v30 = 1;
    if (v29 >= 2)
      v31 = v30;
    else
      v31 = 0;
    __asm { BR              X28 }
  }
  v33 = ~v18;
  if (v9 < v14 - 1)
  {
    v34 = (v27 + a1) & ~v21;
    if (v11 == v14)
    {
      v35 = (*(uint64_t (**)(uint64_t))(v10 + 48))(v34);
      goto LABEL_53;
    }
    v38 = (v24 + ((v23 + v34) & ~v19)) & ~v20;
    if (v12 == v14)
    {
      if (v7 < 0x7FFFFFFF)
        goto LABEL_50;
    }
    else
    {
      v38 = (v26 + v38) & v33;
      if (v7 < v13)
      {
LABEL_50:
        v39 = *(_QWORD *)((v25 + v38) & 0xFFFFFFFFFFFFF8);
        if (v39 >= 0xFFFFFFFF)
          LODWORD(v39) = -1;
        v35 = v39 + 1;
        goto LABEL_53;
      }
    }
LABEL_49:
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 48))(v38, v7, v5, v20, v24, v23, v27);
LABEL_53:
    if (v35 >= 2)
      return v35 - 1;
    else
      return 0;
  }
  v36 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0x80000000) != 0)
  {
    v38 = ((unint64_t)v36 + v18 + 8) & v33;
    goto LABEL_49;
  }
  v37 = *v36;
  if (v37 >= 0xFFFFFFFF)
    LODWORD(v37) = -1;
  return (v37 + 1);
}

uint64_t storeEnumTagSinglePayload for MapAnimator(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = 0u;
  v12 = *(_QWORD *)(type metadata accessor for Date() - 8);
  if (v8 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v8;
  if (v13 <= *(_DWORD *)(v12 + 84))
    v14 = *(_DWORD *)(v12 + 84);
  else
    v14 = v13;
  if (v8 <= v14)
    v15 = v14;
  else
    v15 = v8;
  result = v15 - 1;
  if (result <= v10)
    v17 = v10;
  else
    v17 = v15 - 1;
  v19 = *(_QWORD *)(v7 + 64);
  if (v8)
    v20 = *(_QWORD *)(v7 + 64);
  else
    v20 = v19 + 1;
  v21 = *(unsigned __int8 *)(v12 + 80);
  v18 = *(unsigned __int8 *)(v7 + 80);
  if (v17 < a3)
  {
    if ((((((_DWORD)v18 + 16) & ~(_DWORD)v18) + (_DWORD)v20 + (v18 | 7 | v21)) & ~(v18 | 7 | v21))
       + (((((_DWORD)v19
           + 7
           + (((((_DWORD)v19 + 7) & 0xFFFFFFF8)
             + (_DWORD)v18
             + 8
             + (((v18 | 7) + *(_DWORD *)(v12 + 64) + ((*(_DWORD *)(v12 + 64) + (_DWORD)v21) & ~(_DWORD)v21)) & ~(v18 | 7))) & ~(_DWORD)v18)) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == -24)
      v22 = a3 - v17 + 1;
    else
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v11 = v23;
    else
      v11 = 0;
  }
  if (a2 > v17)
  {
    if ((((((_DWORD)v18 + 16) & ~(_DWORD)v18) + (_DWORD)v20 + (v18 | 7 | v21)) & ~(v18 | 7 | v21))
       + (((((_DWORD)v19
           + 7
           + (((((_DWORD)v19 + 7) & 0xFFFFFFF8)
             + (_DWORD)v18
             + 8
             + (((v18 | 7) + *(_DWORD *)(v12 + 64) + ((*(_DWORD *)(v12 + 64) + (_DWORD)v21) & ~(_DWORD)v21)) & ~(v18 | 7))) & ~(_DWORD)v18)) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) != -24)
    {
      v24 = ~v17 + a2;
      bzero(a1, ((((v18 + 16) & ~v18) + v20 + (v18 | 7 | v21)) & ~(v18 | 7 | v21))+ ((((v19+ 7+ ((((v19 + 7) & 0xFFFFFFFFFFFFFFF8)+ v18+ 8+ (((v18 | 7) + *(_QWORD *)(v12 + 64) + ((*(_QWORD *)(v12 + 64) + v21) & ~v21)) & ~(v18 | 7))) & ~v18)) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 24);
      *a1 = v24;
    }
    __asm { BR              X10 }
  }
  return result;
}

void sub_1878284AC(unsigned int a1@<W0>, size_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, size_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  size_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  size_t v43;
  unsigned int v44;
  void *v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_DWORD *);
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v35[v36] = 0;
  if (!v32)
    return;
  if (v40 >= a1)
  {
    if (v40 < v32)
    {
      if ((_DWORD)a7)
      {
        if (a7 <= 3)
          v46 = a7;
        else
          v46 = 4;
        bzero(v35, a7);
        __asm { BR              X10 }
      }
      return;
    }
    v48 = (_QWORD *)((unint64_t)(v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v39 & 0x80000000) != 0)
    {
      v52 = (uint64_t)v48 + v29 + 8;
      if (v39 < v32)
      {
        if ((_DWORD)a2)
        {
          if (a2 <= 3)
            v53 = a2;
          else
            v53 = 4;
          bzero((void *)(v52 & v55), a2);
          __asm { BR              X10 }
        }
        return;
      }
      v50 = *(void (**)(_DWORD *))(v38 + 56);
      v51 = (_DWORD *)(v52 & v55);
LABEL_40:
      v50(v51);
      return;
    }
    if ((v32 & 0x80000000) != 0)
      v49 = v32 ^ 0x80000000;
    else
      v49 = v32 - 1;
LABEL_29:
    *v48 = v49;
    return;
  }
  v41 = (_DWORD *)((unint64_t)&v35[a6] & v37);
  if (a1 < v32)
  {
    v42 = (a5 + 23) & 0xFFFFFFF8;
    v43 = v42 + 8;
    if (v42 != -8)
    {
      v44 = v32 - v24;
      v45 = v41;
LABEL_15:
      bzero(v45, v43);
      *v41 = v44;
      return;
    }
    return;
  }
  v47 = v32 + 1;
  if (v32 + 1 <= v24)
  {
    if (v32 == -1)
      return;
    if (a3 == v24)
    {
      v50 = *(void (**)(_DWORD *))(v27 + 56);
      v51 = v41;
      goto LABEL_40;
    }
    v51 = (_DWORD *)((v31 + (((unint64_t)v41 + v30) & v33)) & v54);
    if (v26 == v24)
    {
      if (v34 < 0x7FFFFFFF)
      {
        v48 = (_QWORD *)(((unint64_t)v51 + v28) & 0xFFFFFFFFFFFFFFF8);
        if ((v47 & 0x80000000) != 0)
        {
          v49 = v32 - 0x7FFFFFFF;
          goto LABEL_29;
        }
LABEL_38:
        v49 = v32;
        goto LABEL_29;
      }
    }
    else
    {
      v51 = (_DWORD *)(((unint64_t)v51 + a4) & v55);
      if (v34 < v25)
      {
        v48 = (_QWORD *)(((unint64_t)v51 + v28) & 0xFFFFFFFFFFFFFFF8);
        if ((v47 & 0x80000000) != 0)
        {
          v49 = v32 - 0x7FFFFFFF;
          v48[1] = 0;
          goto LABEL_29;
        }
        goto LABEL_38;
      }
    }
    v50 = *(void (**)(_DWORD *))(v38 + 56);
    goto LABEL_40;
  }
  if ((_DWORD)v23)
  {
    v44 = v32 - v24;
    v45 = v41;
    v43 = v23;
    goto LABEL_15;
  }
}

void sub_187828664()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x187828670);
}

uint64_t type metadata completion function for MapAnimatorProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for AdapterState(255, *(_QWORD *)(a1 + 16), a3, a4);
  result = type metadata accessor for Binding();
  if (v5 <= 0x3F)
  {
    type metadata accessor for Optional();
    result = type metadata accessor for Binding();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MapAnimatorProxy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  const void *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  void (*v49)(void *, const void *, uint64_t);
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(unint64_t, unint64_t, uint64_t);
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  unsigned int (*v67)(const void *, uint64_t, uint64_t);
  unint64_t v69;
  size_t __n;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *__dst;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  _QWORD *v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;

  v6 = type metadata accessor for Date();
  v7 = a2;
  v8 = v6;
  v9 = *(_QWORD *)(v6 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  v11 = *(_DWORD *)(v9 + 80);
  v81 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v81 - 8);
  v13 = *(unsigned int *)(v12 + 84);
  v14 = *(_DWORD *)(v12 + 80);
  v15 = v14 | 7;
  v16 = (v14 | v11) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v17 = v16 & ((v14 | v11) + 16);
  if (v13 <= 0x7FFFFFFF)
    v18 = 0x7FFFFFFF;
  else
    v18 = *(_DWORD *)(v12 + 84);
  if (v18 <= v10)
    v19 = *(_DWORD *)(v9 + 84);
  else
    v19 = v18;
  if (v13 <= v19)
    v20 = v19;
  else
    v20 = *(_DWORD *)(v12 + 84);
  v79 = v20;
  v21 = *(_QWORD *)(v9 + 64);
  v22 = *(_QWORD *)(v12 + 64);
  v23 = ((v22 + 7 + ((((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8 + ((v15 + v21 + ((v21 + v11) & ~v11)) & ~v15)) & ~v14)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if ((_DWORD)v13)
    v24 = *(_QWORD *)(v12 + 64);
  else
    v24 = v22 + 1;
  v25 = (*(_DWORD *)(v12 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000;
  v26 = *v7;
  *a1 = *v7;
  v27 = (v14 | v11) <= 7 && v25 == 0;
  if (!v27 || v24 + ((v14 + 16) & ~v14) + ((v23 + v17 + v15) & ~v15) > 0x18)
  {
    v29 = v26 + v17;
    swift_retain();
    return (_QWORD *)v29;
  }
  v75 = v22 + 7;
  v71 = v21 + v11;
  v72 = v15 + v21;
  v69 = ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8;
  __n = v24;
  v73 = v8;
  v77 = v23 + v17 + v15;
  v30 = ~v11;
  v31 = ~v15;
  v76 = v12;
  v80 = a1;
  v32 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v78 = v7;
  v33 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  __dst = (void *)(v16 & ((unint64_t)v32 + 15));
  v34 = (const void *)(v16 & ((unint64_t)v33 + 15));
  swift_retain();
  swift_retain();
  if ((_DWORD)v10 != v79)
  {
    v43 = v31;
    v44 = (v72 + (((unint64_t)v34 + v71) & v30)) & v31;
    v27 = v18 == v79;
    v35 = v30;
    if (v27)
    {
      v45 = v13 >= 0x7FFFFFFF;
      v37 = v80;
      v46 = v81;
      v40 = ~v14;
    }
    else
    {
      v40 = ~v14;
      v44 = (v69 + v44) & ~v14;
      v45 = v13 >= v19;
      v37 = v80;
      v46 = v81;
    }
    v39 = v76;
    v41 = v75;
    if (v45)
    {
      v47 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))(v44, v13, v46);
    }
    else
    {
      v48 = *(_QWORD *)((v75 + v44) & 0xFFFFFFFFFFFFF8);
      if (v48 >= 0xFFFFFFFF)
        LODWORD(v48) = -1;
      v47 = v48 + 1;
    }
    v38 = v43;
    if (v47)
      goto LABEL_24;
LABEL_35:
    v49 = *(void (**)(void *, const void *, uint64_t))(v9 + 16);
    v49(__dst, v34, v73);
    v50 = ((unint64_t)__dst + v71) & v35;
    v51 = ((unint64_t)v34 + v71) & v35;
    v49((void *)v50, (const void *)v51, v73);
    v52 = (v72 + v50) & v38;
    v53 = (v72 + v51) & v38;
    v54 = *(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16);
    v42 = v81;
    v54(v52, v53, v81);
    *(_QWORD *)((v41 + v52) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v41 + v53) & 0xFFFFFFFFFFFFF8);
    v55 = (v69 + v52) & v40;
    v56 = (v69 + v53) & v40;
    swift_bridgeObjectRetain();
    v54(v55, v56, v81);
    v37 = v80;
    v57 = (_QWORD *)((v41 + v56) & 0xFFFFFFFFFFFFFFF8);
    v58 = v57[1];
    v59 = (_QWORD *)((v41 + v55) & 0xFFFFFFFFFFFFFFF8);
    *v59 = *v57;
    v59[1] = v58;
    swift_retain();
    goto LABEL_36;
  }
  v35 = v30;
  v36 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v34, v10, v73);
  v37 = a1;
  v38 = v31;
  v39 = v76;
  v40 = ~v14;
  v41 = v75;
  if (!v36)
    goto LABEL_35;
LABEL_24:
  memcpy(__dst, v34, v23);
  v42 = v81;
LABEL_36:
  v60 = (_QWORD *)(((unint64_t)v37 + v77) & v38);
  v61 = (_QWORD *)(((unint64_t)v78 + v77) & v38);
  *v60 = *v61;
  v62 = (_QWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  v63 = (_QWORD *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v62 = *v63;
  v64 = v14 + 8;
  v65 = (void *)(((unint64_t)v62 + v14 + 8) & v40);
  v66 = (const void *)(((unint64_t)v63 + v64) & v40);
  v67 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  swift_retain();
  swift_retain();
  if (v67(v66, 1, v42))
  {
    memcpy(v65, v66, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v65, v66, v42);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v65, 0, 1, v42);
  }
  return v80;
}

uint64_t destroy for MapAnimatorProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = a1 + 15;
  swift_release();
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v43 = v9 | v7;
  v10 = v9 | v7 | 7;
  v11 = v9 | 7;
  v12 = (v4 + v10 + 8) & ~v10;
  v13 = *(unsigned int *)(v6 + 84);
  v14 = *(_DWORD *)(v8 + 84);
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = *(_DWORD *)(v8 + 84);
  if (v15 <= v13)
    v16 = *(_DWORD *)(v6 + 84);
  else
    v16 = v15;
  if (v14 <= v16)
    v17 = v16;
  else
    v17 = *(_DWORD *)(v8 + 84);
  v18 = *(_QWORD *)(v6 + 64);
  v19 = ~v7;
  v20 = v18 + v7;
  v21 = v11 + v18;
  v22 = (v11 + v18 + ((v18 + v7) & ~v7)) & ~v11;
  v23 = *(_QWORD *)(v8 + 64) + 7;
  v46 = *(_QWORD *)(a2 + 16);
  v47 = ~v9;
  v24 = (v23 & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v25 = v23 + ((v24 + v22) & ~v9);
  v45 = ~v11;
  v42 = v21;
  v41 = v19;
  if ((_DWORD)v13 == v17)
  {
    v26 = v12;
    v27 = v5;
    v28 = v25;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, v13, v5);
    v25 = v28;
    goto LABEL_19;
  }
  v30 = (v21 + ((v20 + v12) & v19)) & ~v11;
  v27 = v5;
  if (v15 == v17)
  {
    if (v14 >= 0x7FFFFFFF)
    {
LABEL_14:
      v26 = v12;
      v31 = v25;
      v29 = (*(uint64_t (**)(unint64_t))(v8 + 48))(v30);
      v25 = v31;
      goto LABEL_19;
    }
  }
  else
  {
    v30 = (v24 + v30) & v47;
    if (v14 >= v16)
      goto LABEL_14;
  }
  v26 = v12;
  v32 = *(_QWORD *)((v23 + v30) & 0xFFFFFFFFFFFFF8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  v29 = v32 + 1;
LABEL_19:
  v33 = ~v10;
  v34 = v25 & 0xFFFFFFFFFFFFFFF8;
  if (!v29)
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v35(v26, v27);
    v36 = (v20 + v26) & v41;
    v35(v36, v27);
    v37 = (v42 + v36) & v45;
    v38 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v38(v37, v46);
    swift_bridgeObjectRelease();
    v38(((v23 & 0xFFFFFFFFFFFFFFF8) + v9 + 8 + v37) & v47, v46);
    swift_release();
  }
  swift_release();
  swift_release();
  v39 = (v9 + ((((a1 + v11 + ((v43 + 16) & v33) + v34 + 16) & v45) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v47;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v39, 1, v46);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v39, v46);
  return result;
}

_QWORD *initializeWithCopy for MapAnimatorProxy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(void *, const void *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  const void *v50;
  unsigned int (*v51)(const void *, uint64_t, uint64_t);
  size_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *__dst;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  unsigned int v72;
  uint64_t v73;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v60 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v60 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v70 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v70 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v9 | 7;
  v11 = (v9 | v7) + 8;
  v67 = v9 | v7;
  v12 = (v9 | v7) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)(((unint64_t)v4 + v11) & v12);
  v66 = v12;
  v13 = (const void *)(((unint64_t)v5 + v11) & v12);
  v14 = *(unsigned int *)(v6 + 84);
  v15 = *(_DWORD *)(v8 + 84);
  if (v15 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  else
    v16 = *(_DWORD *)(v8 + 84);
  if (v16 <= v14)
    v17 = *(_DWORD *)(v6 + 84);
  else
    v17 = v16;
  v72 = *(_DWORD *)(v8 + 84);
  if (v15 <= v17)
    v18 = v17;
  else
    v18 = *(_DWORD *)(v8 + 84);
  v19 = *(_QWORD *)(v6 + 64);
  v20 = ~v7;
  v21 = v19 + v7;
  v22 = ~v10;
  v23 = v10 + v19;
  v68 = v9 | 7;
  v62 = *(_QWORD *)(v70 - 8);
  v59 = *(_QWORD *)(v8 + 64);
  v73 = ~v9;
  v57 = ((v59 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  v58 = v59 + 7;
  v64 = *(unsigned __int8 *)(v8 + 80);
  v61 = (v59 + 7 + ((v57 + ((v10 + v19 + ((v19 + v7) & ~v7)) & ~v10)) & ~v9)) & 0xFFFFFFFFFFFFFFF8;
  swift_retain();
  swift_retain();
  v65 = v22;
  v55 = v20;
  v56 = v23;
  v54 = v21;
  if ((_DWORD)v14 == v18)
  {
    v24 = v60;
    v25 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v13, v14, v60);
    v26 = v70;
    v27 = v62;
    v28 = v73;
    v29 = v13;
    v30 = v6;
  }
  else
  {
    v31 = (v23 + (((unint64_t)v13 + v21) & v20)) & v22;
    if (v16 == v18)
    {
      v32 = v72 >= 0x7FFFFFFF;
    }
    else
    {
      v31 = (v57 + v31) & v73;
      v32 = v72 >= v17;
    }
    v26 = v70;
    v27 = v62;
    v24 = v60;
    v30 = v6;
    if (v32)
    {
      v25 = (*(uint64_t (**)(unint64_t))(v62 + 48))(v31);
    }
    else
    {
      v33 = *(_QWORD *)((v58 + v31) & 0xFFFFFFFFFFFFF8);
      if (v33 >= 0xFFFFFFFF)
        LODWORD(v33) = -1;
      v25 = v33 + 1;
    }
    v28 = v73;
    v29 = v13;
  }
  if (v25)
  {
    memcpy(__dst, v29, v61 + 16);
    v34 = v65;
  }
  else
  {
    v35 = *(void (**)(void *, const void *, uint64_t))(v30 + 16);
    v35(__dst, v29, v24);
    v35((void *)(((unint64_t)__dst + v54) & v55), (const void *)(((unint64_t)v29 + v54) & v55), v24);
    v34 = v65;
    v36 = (v56 + (((unint64_t)__dst + v54) & v55)) & v65;
    v37 = (v56 + (((unint64_t)v29 + v54) & v55)) & v65;
    v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 16);
    v38(v36, v37, v26);
    *(_QWORD *)((v58 + v36) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v58 + v37) & 0xFFFFFFFFFFFFF8);
    v39 = (v57 + v36) & v28;
    v40 = (v57 + v37) & v28;
    swift_bridgeObjectRetain();
    v38(v39, v40, v26);
    v41 = (_QWORD *)((v58 + v40) & 0xFFFFFFFFFFFFFFF8);
    v42 = v41[1];
    v43 = (_QWORD *)((v58 + v39) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v41;
    v43[1] = v42;
    swift_retain();
  }
  v44 = v61 + 16 + ((v67 + 16) & v66);
  v45 = (_QWORD *)(((unint64_t)a1 + v68 + v44) & v34);
  v46 = (_QWORD *)(((unint64_t)a2 + v68 + v44) & v34);
  *v45 = *v46;
  v47 = (_QWORD *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  v48 = (_QWORD *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v47 = *v48;
  v49 = (void *)(((unint64_t)v47 + v64 + 8) & v28);
  v50 = (const void *)(((unint64_t)v48 + v64 + 8) & v28);
  v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_retain();
  swift_retain();
  if (v51(v50, 1, v26))
  {
    if (v72)
      v52 = v59;
    else
      v52 = v59 + 1;
    memcpy(v49, v50, v52);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v49, v50, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v49, 0, 1, v26);
  }
  return a1;
}

_QWORD *assignWithCopy for MapAnimatorProxy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(void *, uint64_t);
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(void *, const void *, uint64_t);
  const void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(unint64_t, uint64_t, uint64_t);
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(void *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  void (*v68)(void *, const void *, uint64_t);
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(uint64_t, unint64_t, uint64_t);
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  uint64_t (*v86)(void *, uint64_t, uint64_t);
  int v87;
  size_t v88;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t __n;
  unint64_t v97;
  uint64_t v98;
  void *__dst;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v104 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v104 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | 7;
  v13 = (v11 | v9) + 8;
  v14 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v15 = (void *)(((unint64_t)v6 + v13) & v14);
  v16 = (const void *)((v13 + (v5 & 0xFFFFFFFFFFFFFFF8)) & v14);
  v17 = *(unsigned int *)(v8 + 84);
  v18 = *(_DWORD *)(v10 + 84);
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = *(_DWORD *)(v10 + 84);
  if (v19 <= v17)
    v20 = *(_DWORD *)(v8 + 84);
  else
    v20 = v19;
  if (v18 <= v20)
    v21 = v20;
  else
    v21 = *(_DWORD *)(v10 + 84);
  v22 = *(_QWORD *)(v8 + 64);
  v23 = ~v9;
  v24 = v22 + v9;
  v25 = ~v12;
  v26 = v12 + v22;
  v102 = *(_QWORD *)(v104 - 8);
  v27 = *(_QWORD *)(v10 + 64) + 7;
  v105 = ~v11;
  v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  __n = ((v27 + ((v28 + ((v12 + v22 + ((v22 + v9) & ~v9)) & ~v12)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v97 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v93 = *(_QWORD *)(v10 + 64);
  v94 = v28;
  v95 = *(_DWORD *)(v10 + 84);
  v98 = v11 | v9;
  v103 = ~v12;
  __dst = v15;
  v91 = v12 + v22;
  v92 = v7;
  if ((_DWORD)v17 == v21)
  {
    v29 = *(uint64_t (**)(void *, uint64_t))(v8 + 48);
    v30 = v7;
    v31 = v29(v15, v17);
    v32 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v29)(v16, v17, v30);
    v33 = v104;
    v34 = v102;
    if (!v31)
      goto LABEL_38;
LABEL_24:
    if (v32)
    {
LABEL_25:
      v41 = __n;
      memcpy(__dst, v16, __n);
      v42 = a2;
      v43 = a1;
      v44 = ~v11;
      v45 = v98;
      v46 = v11 | 7;
      v47 = v97;
      v48 = v103;
      goto LABEL_42;
    }
LABEL_33:
    v50 = *(void (**)(void *, const void *, uint64_t))(v8 + 16);
    v50(__dst, v16, v92);
    v51 = v16;
    v52 = ((unint64_t)__dst + v24) & v23;
    v53 = ((unint64_t)v51 + v24) & v23;
    v50((void *)v52, (const void *)v53, v92);
    v54 = (v91 + v52) & v103;
    v55 = (v91 + v53) & v103;
    v56 = *(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 16);
    v56(v54, v55, v33);
    *(_QWORD *)((v27 + v54) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v27 + v55) & 0xFFFFFFFFFFFFF8);
    v44 = ~v11;
    v57 = (v94 + v54) & v105;
    v58 = (v94 + v55) & v105;
    swift_bridgeObjectRetain();
    v56(v57, v58, v33);
    v59 = (_QWORD *)((v27 + v58) & 0xFFFFFFFFFFFFFFF8);
    v60 = v59[1];
    v61 = (_QWORD *)((v27 + v57) & 0xFFFFFFFFFFFFFFF8);
    *v61 = *v59;
    v61[1] = v60;
    swift_retain();
    v48 = v103;
    goto LABEL_41;
  }
  v90 = v16;
  v35 = (v26 + (((unint64_t)v15 + v24) & v23)) & v25;
  if (v19 == v21)
  {
    if (v18 >= 0x7FFFFFFF)
    {
LABEL_15:
      v36 = v12 + v22;
      v33 = v104;
      v37 = (*(uint64_t (**)(unint64_t))(v102 + 48))(v35);
      v18 = v95;
      v26 = v36;
      v28 = (v27 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
      v25 = v103;
      v38 = v37;
      goto LABEL_20;
    }
  }
  else
  {
    v35 = (v28 + v35) & v105;
    if (v18 >= v20)
      goto LABEL_15;
  }
  v39 = *(_QWORD *)((v27 + v35) & 0xFFFFFFFFFFFFF8);
  if (v39 >= 0xFFFFFFFF)
    LODWORD(v39) = -1;
  v38 = v39 + 1;
  v33 = v104;
LABEL_20:
  v40 = (v26 + (((unint64_t)v90 + v24) & v23)) & v25;
  if (v38)
  {
    if (v19 == v21)
    {
      if (v18 >= 0x7FFFFFFF)
      {
LABEL_23:
        v34 = v102;
        v32 = (*(uint64_t (**)(unint64_t))(v102 + 48))(v40);
        v16 = v90;
        goto LABEL_24;
      }
    }
    else
    {
      v40 = (v28 + v40) & v105;
      if (v18 >= v20)
        goto LABEL_23;
    }
    v49 = *(_QWORD *)((v27 + v40) & 0xFFFFFFFFFFFFF8);
    if (v49 >= 0xFFFFFFFF)
      LODWORD(v49) = -1;
    v16 = v90;
    v34 = v102;
    if ((_DWORD)v49 != -1)
      goto LABEL_25;
    goto LABEL_33;
  }
  if (v19 != v21)
  {
    v40 = (v28 + v40) & v105;
    if (v18 >= v20)
      goto LABEL_28;
LABEL_35:
    v62 = *(_QWORD *)((v27 + v40) & 0xFFFFFFFFFFFFF8);
    if (v62 >= 0xFFFFFFFF)
      LODWORD(v62) = -1;
    v32 = v62 + 1;
    v16 = v90;
    v34 = v102;
    goto LABEL_38;
  }
  if (v18 < 0x7FFFFFFF)
    goto LABEL_35;
LABEL_28:
  v34 = v102;
  v32 = (*(uint64_t (**)(unint64_t))(v102 + 48))(v40);
  v16 = v90;
LABEL_38:
  v63 = ((unint64_t)__dst + v24) & v23;
  if (v32)
  {
    v64 = *(void (**)(void *, uint64_t))(v8 + 8);
    v64(__dst, v92);
    v64((void *)v63, v92);
    v65 = v91 + v63;
    v33 = v104;
    v66 = v65 & v103;
    v67 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v67(v65 & v103, v104);
    swift_bridgeObjectRelease();
    v44 = ~v11;
    v67((v94 + v66) & v105, v104);
    swift_release();
    v41 = __n;
    memcpy(__dst, v16, __n);
    v48 = v103;
    v42 = a2;
    v43 = a1;
    v45 = v98;
    v46 = v11 | 7;
    v47 = v97;
    goto LABEL_42;
  }
  v68 = *(void (**)(void *, const void *, uint64_t))(v8 + 24);
  v68(__dst, v16, v92);
  v69 = ((unint64_t)v16 + v24) & v23;
  v68((void *)v63, (const void *)v69, v92);
  v70 = v91 + v63;
  v33 = v104;
  v71 = v70 & v103;
  v72 = (v91 + v69) & v103;
  v73 = *(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 24);
  v73(v70 & v103, v72, v104);
  *(_QWORD *)((v27 + v71) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v27 + v72) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = ~v11;
  v74 = (v94 + v71) & v105;
  v75 = (v94 + v72) & v105;
  v73(v74, v75, v104);
  v76 = (_QWORD *)((v27 + v74) & 0xFFFFFFFFFFFFFFF8);
  v77 = (_QWORD *)((v27 + v75) & 0xFFFFFFFFFFFFFFF8);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  swift_retain();
  swift_release();
  v48 = v103;
LABEL_41:
  v42 = a2;
  v43 = a1;
  v45 = v98;
  v46 = v11 | 7;
  v41 = __n;
  v47 = v97;
LABEL_42:
  v79 = v41 + ((v45 + 16) & v47);
  v80 = (_QWORD *)(((unint64_t)v43 + v46 + v79) & v48);
  v81 = (unint64_t)v42 + v46 + v79;
  v82 = (v81 & v48) + 15;
  *v80 = *(_QWORD *)(v81 & v48);
  swift_retain();
  swift_release();
  v83 = (_QWORD *)(((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8);
  v82 &= 0xFFFFFFFFFFFFFFF8;
  *v83 = *(_QWORD *)v82;
  swift_retain();
  swift_release();
  v84 = (void *)(((unint64_t)v83 + v11 + 8) & v44);
  v85 = (void *)((v11 + 8 + v82) & v44);
  v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  LODWORD(v82) = v86(v84, 1, v33);
  v87 = v86(v85, 1, v33);
  if ((_DWORD)v82)
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v84, v85, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v84, 0, 1, v33);
      return v43;
    }
  }
  else
  {
    if (!v87)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v84, v85, v33);
      return v43;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v84, v33);
  }
  if (v95)
    v88 = v93;
  else
    v88 = v93 + 1;
  memcpy(v84, v85, v88);
  return v43;
}

_QWORD *initializeWithTake for MapAnimatorProxy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(void);
  const void *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void *, const void *, uint64_t);
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, unint64_t, uint64_t);
  void (*v46)(unint64_t, unint64_t, uint64_t);
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  const void *v55;
  size_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v68;
  uint64_t v69;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v69 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v69 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v10 | 7;
  v12 = (v10 | v8) + 8;
  v65 = v10 | v8;
  v13 = (v10 | v8) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = (void *)(((unint64_t)v4 + v12) & v13);
  v64 = v13;
  v15 = (const void *)(((unint64_t)v5 + v12) & v13);
  v16 = *(_DWORD *)(v7 + 84);
  v17 = *(_DWORD *)(v9 + 84);
  if (v17 <= 0x7FFFFFFF)
    v18 = 0x7FFFFFFF;
  else
    v18 = *(_DWORD *)(v9 + 84);
  if (v18 <= v16)
    v19 = *(_DWORD *)(v7 + 84);
  else
    v19 = v18;
  if (v17 <= v19)
    v20 = v19;
  else
    v20 = *(_DWORD *)(v9 + 84);
  v21 = *(_QWORD *)(v7 + 64);
  v22 = ~v8;
  v23 = v21 + v8;
  v24 = v11 + v21;
  v25 = (v11 + v21 + ((v21 + v8) & ~v8)) & ~v11;
  v62 = *(_QWORD *)(v9 + 64);
  v63 = ~v11;
  v26 = v62 + 7;
  v68 = ~v10;
  v27 = ((v62 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  v28 = (v62 + 7 + ((v27 + v25) & ~v10)) & 0xFFFFFFFFFFFFFFF8;
  v60 = v27;
  v61 = v6;
  v58 = v22;
  v59 = v24;
  if (v16 == v20)
  {
    v29 = *(uint64_t (**)(void))(v7 + 48);
    v30 = v15;
LABEL_19:
    v34 = v14;
    v33 = v29();
    v14 = v34;
    goto LABEL_20;
  }
  v30 = v15;
  v31 = (v24 + (((unint64_t)v15 + v23) & v22)) & ~v11;
  if (v18 != v20)
  {
    v31 = (v27 + v31) & v68;
    if (v17 < v19)
      goto LABEL_14;
LABEL_18:
    v29 = *(uint64_t (**)(void))(v9 + 48);
    goto LABEL_19;
  }
  if (v17 >= 0x7FFFFFFF)
    goto LABEL_18;
LABEL_14:
  v32 = *(_QWORD *)((v26 + v31) & 0xFFFFFFFFFFFFF8);
  if (v32 >= 0xFFFFFFFF)
    LODWORD(v32) = -1;
  v33 = v32 + 1;
LABEL_20:
  v35 = v9;
  v36 = v28 + 16;
  if (v33)
  {
    memcpy(v14, v30, v36);
    v37 = ~v10;
    v38 = ~v11;
  }
  else
  {
    v39 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
    v40 = v14;
    v39(v14, v30, v61);
    v41 = ((unint64_t)v40 + v23) & v58;
    v42 = ((unint64_t)v30 + v23) & v58;
    v39((void *)v41, (const void *)v42, v61);
    v38 = ~v11;
    v43 = (v59 + v41) & v63;
    v44 = (v59 + v42) & v63;
    v45 = *(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 32);
    v45(v43, v44, v69);
    v46 = (void (*)(unint64_t, unint64_t, uint64_t))v45;
    *(_QWORD *)((v26 + v43) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v26 + v44) & 0xFFFFFFFFFFFFF8);
    v37 = ~v10;
    v47 = (v60 + v43) & v68;
    v48 = (v60 + v44) & v68;
    v46(v47, v48, v69);
    *(_OWORD *)((v26 + v47) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v26 + v48) & 0xFFFFFFFFFFFFF8);
  }
  v49 = v36 + ((v65 + 16) & v64);
  v50 = (_QWORD *)(((unint64_t)a1 + v11 + v49) & v38);
  v51 = (_QWORD *)(((unint64_t)a2 + v11 + v49) & v38);
  *v50 = *v51;
  v52 = (_QWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = (void *)(((unint64_t)v52 + v10 + 8) & v37);
  v55 = (const void *)(((unint64_t)v53 + v10 + 8) & v37);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v55, 1, v69))
  {
    if (v17)
      v56 = v62;
    else
      v56 = v62 + 1;
    memcpy(v54, v55, v56);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v54, v55, v69);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v54, 0, 1, v69);
  }
  return a1;
}

_QWORD *assignWithTake for MapAnimatorProxy(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t (*v30)(void *, uint64_t);
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(void *, const void *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(unint64_t, uint64_t, uint64_t);
  unint64_t v69;
  unint64_t v70;
  _OWORD *v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  void (*v75)(void *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  void (*v79)(void *, const void *, uint64_t);
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void (*v85)(uint64_t, unint64_t, uint64_t);
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  void *v93;
  void *v94;
  uint64_t (*v95)(void *, uint64_t, uint64_t);
  int v96;
  int v97;
  size_t v98;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t __n;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *__dst;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v115 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v115 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | 7;
  v13 = (v11 | v9) + 8;
  v14 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v15 = (void *)(((unint64_t)v6 + v13) & v14);
  v16 = (const void *)((v13 + (v5 & 0xFFFFFFFFFFFFFFF8)) & v14);
  v17 = *(unsigned int *)(v8 + 84);
  v18 = *(unsigned int *)(v10 + 84);
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = *(_DWORD *)(v10 + 84);
  if (v19 <= v17)
    v20 = *(_DWORD *)(v8 + 84);
  else
    v20 = v19;
  if (v18 <= v20)
    v21 = v20;
  else
    v21 = *(_DWORD *)(v10 + 84);
  v22 = *(_QWORD *)(v8 + 64);
  v23 = ~v9;
  v24 = v22 + v9;
  v25 = ~v12;
  v26 = v12 + v22;
  v113 = *(_QWORD *)(v115 - 8);
  v27 = *(_QWORD *)(v10 + 64);
  v28 = v27 + 7;
  v117 = ~v11;
  v29 = ((v27 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  __n = ((v27 + 7 + ((v29 + ((v12 + v22 + ((v22 + v9) & ~v9)) & ~v12)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v107 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v103 = v27;
  v104 = v29;
  v108 = v11 | v9;
  v109 = v11 | 7;
  v114 = ~v12;
  __dst = v15;
  v101 = v12 + v22;
  v102 = v7;
  v105 = *(unsigned __int8 *)(v10 + 80);
  if ((_DWORD)v17 == v21)
  {
    v30 = *(uint64_t (**)(void *, uint64_t))(v8 + 48);
    v31 = v7;
    v32 = *(_DWORD *)(v10 + 84);
    v18 = v27 + 7;
    v33 = v22 + v9;
    v34 = ~v9;
    v35 = v30(v15, v17);
    v36 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v30)(v16, v17, v31);
    v23 = v34;
    v24 = v33;
    v28 = v18;
    LODWORD(v18) = v32;
    v37 = v115;
    v38 = v113;
    if (!v35)
      goto LABEL_38;
LABEL_24:
    if (v36)
    {
LABEL_25:
      v50 = __n;
      memcpy(__dst, v16, __n);
      v51 = a2;
      v52 = a1;
      v53 = v108;
      v54 = v109;
      v55 = v117;
      v56 = v107;
      v57 = v114;
      goto LABEL_42;
    }
LABEL_33:
    v60 = *(void (**)(void *, const void *, uint64_t))(v8 + 32);
    v116 = v18;
    v18 = v28;
    v61 = v24;
    v62 = v23;
    v60(__dst, v16, v102);
    v63 = v16;
    v64 = ((unint64_t)__dst + v61) & v62;
    v65 = ((unint64_t)v63 + v61) & v62;
    v60((void *)v64, (const void *)v65, v102);
    v66 = (v101 + v64) & v114;
    v67 = (v101 + v65) & v114;
    v68 = *(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32);
    v68(v66, v67, v37);
    *(_QWORD *)((v18 + v66) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v18 + v67) & 0xFFFFFFFFFFFFF8);
    v55 = v117;
    v69 = (v104 + v66) & v117;
    v70 = (v104 + v67) & v117;
    v68(v69, v70, v37);
    v57 = v114;
    v71 = (_OWORD *)((v18 + v69) & 0xFFFFFFFFFFFFF8);
    v72 = v18 + v70;
    LODWORD(v18) = v116;
    *v71 = *(_OWORD *)(v72 & 0xFFFFFFFFFFFFF8);
    goto LABEL_41;
  }
  v100 = v16;
  v39 = (v26 + (((unint64_t)v15 + v24) & v23)) & v25;
  if (v19 == v21)
  {
    if (v18 >= 0x7FFFFFFF)
    {
LABEL_15:
      v40 = v12 + v22;
      v37 = v115;
      v41 = *(unsigned int *)(v10 + 84);
      v42 = v27 + 7;
      v43 = v22 + v9;
      v44 = ~v9;
      v45 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(v113 + 48))(v39, v41, v115);
      v23 = v44;
      v24 = v43;
      v28 = v42;
      v18 = v41;
      v26 = v40;
      v29 = v104;
      v25 = v114;
      v46 = v45;
      goto LABEL_20;
    }
  }
  else
  {
    v39 = (v29 + v39) & v117;
    if (v18 >= v20)
      goto LABEL_15;
  }
  v47 = *(_QWORD *)((v28 + v39) & 0xFFFFFFFFFFFFF8);
  if (v47 >= 0xFFFFFFFF)
    LODWORD(v47) = -1;
  v46 = v47 + 1;
  v37 = v115;
LABEL_20:
  v48 = (v26 + (((unint64_t)v100 + v24) & v23)) & v25;
  if (v46)
  {
    if (v19 == v21)
    {
      if (v18 >= 0x7FFFFFFF)
      {
LABEL_23:
        v38 = v113;
        v49 = v23;
        v36 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(v113 + 48))(v48, v18, v37);
        v23 = v49;
        v16 = v100;
        goto LABEL_24;
      }
    }
    else
    {
      v48 = (v29 + v48) & v117;
      if (v18 >= v20)
        goto LABEL_23;
    }
    v59 = *(_QWORD *)((v28 + v48) & 0xFFFFFFFFFFFFF8);
    if (v59 >= 0xFFFFFFFF)
      LODWORD(v59) = -1;
    v16 = v100;
    v38 = v113;
    if ((_DWORD)v59 != -1)
      goto LABEL_25;
    goto LABEL_33;
  }
  if (v19 != v21)
  {
    v48 = (v29 + v48) & v117;
    if (v18 >= v20)
      goto LABEL_28;
LABEL_35:
    v73 = *(_QWORD *)((v28 + v48) & 0xFFFFFFFFFFFFF8);
    if (v73 >= 0xFFFFFFFF)
      LODWORD(v73) = -1;
    v36 = v73 + 1;
    v16 = v100;
    v38 = v113;
    goto LABEL_38;
  }
  if (v18 < 0x7FFFFFFF)
    goto LABEL_35;
LABEL_28:
  v38 = v113;
  v58 = v23;
  v36 = (*(uint64_t (**)(unint64_t, size_t, uint64_t))(v113 + 48))(v48, v18, v37);
  v23 = v58;
  v16 = v100;
LABEL_38:
  v74 = ((unint64_t)__dst + v24) & v23;
  if (v36)
  {
    v75 = *(void (**)(void *, uint64_t))(v8 + 8);
    v75(__dst, v102);
    v75((void *)v74, v102);
    v76 = v101 + v74;
    v37 = v115;
    v77 = v76 & v114;
    v78 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v78(v76 & v114, v115);
    swift_bridgeObjectRelease();
    v55 = v117;
    v78((v104 + v77) & v117, v115);
    swift_release();
    v50 = __n;
    memcpy(__dst, v16, __n);
    v57 = v114;
    v51 = a2;
    v52 = a1;
    v53 = v108;
    v54 = v109;
    v56 = v107;
    goto LABEL_42;
  }
  v79 = *(void (**)(void *, const void *, uint64_t))(v8 + 40);
  v80 = v23;
  v79(__dst, v16, v102);
  v81 = ((unint64_t)v16 + v24) & v80;
  v79((void *)v74, (const void *)v81, v102);
  v82 = v101 + v74;
  v37 = v115;
  v83 = v82 & v114;
  v84 = (v101 + v81) & v114;
  v85 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 40);
  v85(v82 & v114, v84, v115);
  *(_QWORD *)((v28 + v83) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v28 + v84) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v55 = v117;
  v86 = (v104 + v83) & v117;
  v87 = (v104 + v84) & v117;
  v85(v86, v87, v115);
  *(_OWORD *)((v28 + v86) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v28 + v87) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v57 = v114;
LABEL_41:
  v51 = a2;
  v52 = a1;
  v53 = v108;
  v54 = v109;
  v50 = __n;
  v56 = v107;
LABEL_42:
  v88 = v50 + ((v53 + 16) & v56);
  v89 = (_QWORD *)(((unint64_t)v52 + v54 + v88) & v57);
  v90 = (_QWORD *)(((unint64_t)v51 + v54 + v88) & v57);
  *v89 = *v90;
  swift_release();
  v91 = (_QWORD *)(((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8);
  v92 = (_QWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v91 = *v92;
  swift_release();
  v93 = (void *)(((unint64_t)v91 + v105 + 8) & v55);
  v94 = (void *)(((unint64_t)v92 + v105 + 8) & v55);
  v95 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  v96 = v95(v93, 1, v37);
  v97 = v95(v94, 1, v37);
  if (v96)
  {
    if (!v97)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v93, v94, v37);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v93, 0, 1, v37);
      return v52;
    }
  }
  else
  {
    if (!v97)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v93, v94, v37);
      return v52;
    }
    (*(void (**)(void *, uint64_t))(v38 + 8))(v93, v37);
  }
  if ((_DWORD)v18)
    v98 = v103;
  else
    v98 = v103 + 1;
  memcpy(v93, v94, v98);
  return v52;
}

uint64_t getEnumTagSinglePayload for MapAnimatorProxy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  if (v10 > v12)
    v12 = *(_DWORD *)(v9 + 84);
  if (v12 - 1 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12 - 1;
  v14 = v10 - 1;
  if (!v10)
    v14 = 0;
  if (v14 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v14;
  if (v15 <= v13)
    v16 = v13;
  else
    v16 = v15;
  v17 = *(_QWORD *)(v9 + 64);
  if (v10)
    v18 = *(_QWORD *)(v9 + 64);
  else
    v18 = v17 + 1;
  if (!a2)
    return 0;
  v19 = *(unsigned __int8 *)(v7 + 80);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = v20 | 7;
  v22 = v20 | v19 | 7;
  v23 = *(_QWORD *)(v7 + 64);
  v24 = v23 + v19;
  v25 = (v23 + v19) & ~v19;
  v26 = (v20 | 7) + v23;
  v27 = (v26 + v25) & ~(v20 | 7);
  v28 = v17 + 7;
  v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  v30 = (((v20 | v19) + 16) & ~v22) + (v20 | 7) + ((v28 + ((v29 + v27) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v31 = a2 - v16;
  if (a2 <= v16)
    goto LABEL_43;
  v32 = v18 + ((v20 + 16) & ~v20) + (v30 & ~v21);
  v33 = 8 * v32;
  if (v32 <= 3)
  {
    v36 = ((v31 + ~(-1 << v33)) >> v33) + 1;
    if (HIWORD(v36))
    {
      v34 = *(_DWORD *)(a1 + v32);
      if (!v34)
        goto LABEL_43;
      goto LABEL_34;
    }
    if (v36 > 0xFF)
    {
      v34 = *(unsigned __int16 *)(a1 + v32);
      if (!*(_WORD *)(a1 + v32))
        goto LABEL_43;
      goto LABEL_34;
    }
    if (v36 < 2)
    {
LABEL_43:
      v39 = ~v21;
      if (v13 >= v15)
      {
        v42 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if (((v12 - 1) & 0x80000000) == 0)
        {
          v41 = *v42;
          goto LABEL_48;
        }
        v46 = ((unint64_t)v42 + v22 + 8) & ~v22;
        if (v8 == v12)
        {
          v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v46, *(unsigned int *)(v7 + 84), v6);
LABEL_56:
          if (v45 >= 2)
            return v45 - 1;
          else
            return 0;
        }
        v44 = (v26 + ((v24 + v46) & ~v19)) & v39;
        if (v11 == v12)
        {
          if (v10 < 0x7FFFFFFF)
          {
            v47 = *(_QWORD *)((v28 + v44) & 0xFFFFFFFFFFFFF8);
            if (v47 >= 0xFFFFFFFF)
              LODWORD(v47) = -1;
            v45 = v47 + 1;
            goto LABEL_56;
          }
          goto LABEL_53;
        }
        v43 = v29 + v44;
      }
      else
      {
        v40 = (unint64_t *)((((v30 + a1) & v39) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v14 & 0x80000000) == 0)
        {
          v41 = *v40;
LABEL_48:
          if (v41 >= 0xFFFFFFFF)
            LODWORD(v41) = -1;
          return (v41 + 1);
        }
        v43 = (uint64_t)v40 + v20 + 8;
      }
      v44 = v43 & ~v20;
LABEL_53:
      v45 = (*(uint64_t (**)(uint64_t))(v9 + 48))(v44);
      goto LABEL_56;
    }
  }
  v34 = *(unsigned __int8 *)(a1 + v32);
  if (!*(_BYTE *)(a1 + v32))
    goto LABEL_43;
LABEL_34:
  v37 = (v34 - 1) << v33;
  if (v32 > 3)
    v37 = 0;
  if ((_DWORD)v32)
  {
    if (v32 <= 3)
      v38 = v32;
    else
      v38 = 4;
    __asm { BR              X11 }
  }
  return v16 + v37 + 1;
}

uint64_t storeEnumTagSinglePayload for MapAnimatorProxy(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v8 = 0u;
  v9 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= *(_DWORD *)(v9 + 84))
    v13 = *(_DWORD *)(v9 + 84);
  else
    v13 = v12;
  if (v11 > v13)
    v13 = *(_DWORD *)(v10 + 84);
  result = v13 - 1;
  if (result <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  else
    v15 = v13 - 1;
  if (v11)
    v16 = v11 - 1;
  else
    v16 = 0;
  if (v16 <= 0x7FFFFFFF)
    v17 = 0x7FFFFFFF;
  else
    v17 = v16;
  if (v17 <= v15)
    v18 = v15;
  else
    v18 = v17;
  v21 = *(_QWORD *)(v10 + 64);
  if (v11)
    v22 = *(_QWORD *)(v10 + 64);
  else
    v22 = v21 + 1;
  v20 = *(unsigned __int8 *)(v10 + 80);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v23 = ((((v21
          + 7
          + ((((v21 + 7) & 0xFFFFFFFFFFFFFFF8)
            + v20
            + 8
            + (((v20 | 7) + *(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v9 + 64) + v19) & ~v19)) & ~(v20 | 7))) & ~v20)) & 0xFFFFFFFFFFFFFFF8)
        + 16
        + (((v20 | v19) + 16) & ~(v20 | v19 | 7))
        + (v20 | 7)) & ~(v20 | 7))
      + ((v20 + 16) & ~v20)
      + v22;
  v24 = a3 >= v18;
  v25 = a3 - v18;
  if (v25 == 0 || !v24)
  {
LABEL_33:
    if (v18 < a2)
      goto LABEL_34;
    return result;
  }
  if (v23 > 3)
  {
    v8 = 1u;
    if (v18 < a2)
      goto LABEL_34;
    return result;
  }
  v26 = ((v25 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
  if (!HIWORD(v26))
  {
    if (v26 >= 0x100)
      v8 = 2;
    else
      v8 = v26 > 1;
    goto LABEL_33;
  }
  v8 = 4u;
  if (v18 < a2)
  {
LABEL_34:
    v27 = ~v18 + a2;
    if (v23 < 4)
    {
      if ((_DWORD)v23)
      {
        v28 = v27 & ~(-1 << (8 * v23));
        bzero(a1, v23);
        if ((_DWORD)v23 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if ((_DWORD)v23 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v23);
      *(_DWORD *)a1 = v27;
    }
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for MapAnimatorProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MapAnimatorProxy);
}

uint64_t sub_18782AC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  type metadata accessor for _ValueActionModifier2<Date>();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for Optional();
  v23 = v1;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE998], v5, &v23);
  v6 = type metadata accessor for _ValueActionModifier2();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v9 = lazy protocol witness table accessor for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule();
  v10 = type metadata accessor for TimelineView(255, (uint64_t)&type metadata for AnimationTimelineSchedule, v8, v9);
  v11 = type metadata accessor for ModifiedContent();
  v12 = MEMORY[0x1E0CE5300];
  v22[0] = v2;
  v22[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ValueActionModifier2<Date> and conformance _ValueActionModifier2<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ValueActionModifier2<Date>, MEMORY[0x1E0CE5300]);
  v13 = MEMORY[0x1E0CE2E70];
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v22);
  v15 = MEMORY[0x1E0CE5EF8];
  v21[0] = v14;
  v21[1] = MEMORY[0x1E0CE5EF8];
  v20[0] = MEMORY[0x18D75FFDC](v13, v4, v21);
  v20[1] = MEMORY[0x18D75FFDC](v12, v6);
  v19[0] = MEMORY[0x18D75FFDC](v13, v7, v20);
  v19[1] = v15;
  v18 = MEMORY[0x18D75FFDC](v13, v8, v19);
  v17[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, v10, &v18);
  v17[1] = MEMORY[0x1E0CE4F80];
  return MEMORY[0x18D75FFDC](v13, v11, v17);
}

uint64_t type metadata completion function for AdapterState.PlaybackState()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for KeyframeTimeline();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdapterState.PlaybackState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_DWORD *)(v7 + 80);
  v10 = v8 + v9;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13 | 7;
  v15 = *(_QWORD *)(v12 + 64) + 7;
  if ((v13 | v9) > 7
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v15 + (((v15 & 0xFFFFFFFFFFFFFFF8) + v13 + 8 + (((v13 | 7) + v8 + ((v8 + v9) & ~v9)) & ~(v13 | 7))) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    v24 = (uint64_t *)(v18 + (((v13 | v9) & 0xF8 ^ 0x1F8) & ((v13 | v9) + 16)));
  }
  else
  {
    v19 = v6;
    v20 = ~v9;
    v35 = v11;
    v36 = (v15 & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
    v37 = ~v13;
    v21 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v21(a1, a2, v6);
    v38 = a1;
    v22 = ((unint64_t)a1 + v10) & v20;
    v23 = ((unint64_t)a2 + v10) & v20;
    v21((uint64_t *)v22, (uint64_t *)v23, v19);
    v24 = v38;
    v25 = v23 + v8;
    v26 = (v22 + v8 + v14) & ~v14;
    v27 = (v25 + v14) & ~v14;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v28(v26, v27, v35);
    *(_QWORD *)((v15 + v26) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v15 + v27) & 0xFFFFFFFFFFFFF8);
    v29 = (v36 + v26) & v37;
    v30 = (v36 + v27) & v37;
    swift_bridgeObjectRetain();
    v28(v29, v30, v35);
    v31 = (_QWORD *)((v15 + v30) & 0xFFFFFFFFFFFFFFF8);
    v32 = v31[1];
    v33 = (_QWORD *)((v15 + v29) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v31;
    v33[1] = v32;
  }
  swift_retain();
  return v24;
}

uint64_t destroy for AdapterState.PlaybackState(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = (v7 + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v6(v8, v4);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v7 + (v11 | 7)) & ~(v11 | 7);
  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v13(v12, v9);
  v14 = *(_QWORD *)(v10 + 64) + 7;
  swift_bridgeObjectRelease();
  v13((v11 + (v14 & 0xFFFFFFFFFFFFFFF8) + v12 + 8) & ~v11, v9);
  return swift_release();
}

uint64_t initializeWithCopy for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v9;
  v17 = (v16 + v11) & ~(v15 | 7);
  v18 = (v16 + v12) & ~(v15 | 7);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v19(v17, v18, v13);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  *(_QWORD *)((v20 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFF8);
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  v22 = (v21 + v17) & ~v15;
  v23 = (v21 + v18) & ~v15;
  swift_bridgeObjectRetain();
  v19(v22, v23, v13);
  v24 = (_QWORD *)((v20 + v23) & 0xFFFFFFFFFFFFFFF8);
  v25 = v24[1];
  v26 = (_QWORD *)((v20 + v22) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v24;
  v26[1] = v25;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v9;
  v17 = (v16 + v11) & ~(v15 | 7);
  v18 = (v16 + v12) & ~(v15 | 7);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v19(v17, v18, v13);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  *(_QWORD *)((v20 + v17) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  v22 = (v21 + v17) & ~v15;
  v23 = (v21 + v18) & ~v15;
  v19(v22, v23, v13);
  v24 = (_QWORD *)((v20 + v22) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((v20 + v23) & 0xFFFFFFFFFFFFFFF8);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v9;
  v17 = (v16 + v11) & ~(v15 | 7);
  v18 = (v16 + v12) & ~(v15 | 7);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v19(v17, v18, v13);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  *(_QWORD *)((v20 + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFF8);
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  v22 = (v21 + v17) & ~v15;
  v23 = (v21 + v18) & ~v15;
  v19(v22, v23, v13);
  *(_OWORD *)((v20 + v22) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v20 + v23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v9 + v10 + a1) & ~v10;
  v12 = (v9 + v10 + a2) & ~v10;
  v8(v11, v12, v6);
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v15 | 7) + v9;
  v17 = (v16 + v11) & ~(v15 | 7);
  v18 = (v16 + v12) & ~(v15 | 7);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40);
  v19(v17, v18, v13);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  *(_QWORD *)((v20 + v17) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v20 + v18) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  v22 = (v21 + v17) & ~v15;
  v23 = (v21 + v18) & ~v15;
  v19(v22, v23, v13);
  *(_OWORD *)((v20 + v22) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v20 + v23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterState.PlaybackState(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t (*v28)(unint64_t, uint64_t, uint64_t);
  unint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v8)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v12;
  if (v11 <= v13)
    v14 = v13;
  else
    v14 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v15 = v6;
  v16 = *(_QWORD *)(v7 + 64);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = v16 + v17;
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = v19 | 7;
  v21 = *(_QWORD *)(v10 + 64) + 7;
  v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + v19 + 8;
  if (v14 < a2)
  {
    v23 = a2 - v14;
    if (((((v21 + ((v22 + ((v20 + v16 + (v18 & ~v17)) & ~v20)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v24 = 2;
    else
      v24 = v23 + 1;
    if (v24 >= 0x10000)
      v25 = 4;
    else
      v25 = 2;
    if (v24 < 0x100)
      v25 = 1;
    if (v24 >= 2)
      v26 = v25;
    else
      v26 = 0;
    __asm { BR              X22 }
  }
  if (v8 == v14)
  {
    v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v29 = a1;
    v11 = *(unsigned int *)(v7 + 84);
    v9 = v15;
    return v28(v29, v11, v9);
  }
  v29 = (((v18 + a1) & ~v17) + v16 + v20) & ~v20;
  if (v12 == v14)
  {
    if (v11 >= 0x7FFFFFFF)
    {
LABEL_29:
      v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
      return v28(v29, v11, v9);
    }
  }
  else
  {
    v29 = (v22 + v29) & ~v19;
    if (v11 >= v13)
      goto LABEL_29;
  }
  v30 = *(_QWORD *)((v21 + v29) & 0xFFFFFFFFFFFFF8);
  if (v30 >= 0xFFFFFFFF)
    LODWORD(v30) = -1;
  return (v30 + 1);
}

void storeEnumTagSinglePayload for AdapterState.PlaybackState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v8 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= *(_DWORD *)(v8 + 84))
    v12 = *(_DWORD *)(v8 + 84);
  else
    v12 = v11;
  if (v10 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v9 + 84);
  v14 = *(_QWORD *)(v8 + 64);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = *(unsigned __int8 *)(v9 + 80);
  if (v13 >= a3)
  {
    v19 = 0u;
    if (a2 <= v13)
      goto LABEL_23;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((((*(_DWORD *)(v9 + 64) + 7) & 0xFFFFFFF8)
           + (_DWORD)v16
           + 8
           + (((v16 | 7) + (_DWORD)v14 + (((_DWORD)v14 + (_DWORD)v15) & ~(_DWORD)v15)) & ~(v16 | 7))) & ~(_DWORD)v16)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v17 = a3 - v13 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    if (a2 <= v13)
LABEL_23:
      __asm { BR              X23 }
  }
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((((*(_DWORD *)(v9 + 64) + 7) & 0xFFFFFFF8)
         + (_DWORD)v16
         + 8
         + (((v16 | 7) + (_DWORD)v14 + (((_DWORD)v14 + (_DWORD)v15) & ~(_DWORD)v15)) & ~(v16 | 7))) & ~(_DWORD)v16)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v20 = ~v13 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64)+ 7+ ((((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)+ v16+ 8+ (((v16 | 7) + v14 + ((v14 + v15) & ~v15)) & ~(v16 | 7))) & ~v16)) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v20;
  }
  __asm { BR              X10 }
}

void sub_18782B994()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18782BA68);
}

void sub_18782B99C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18782B9A4);
  JUMPOUT(0x18782BA68);
}

void sub_18782BA00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18782BA68);
}

void sub_18782BA08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18782BA68);
}

void sub_18782BA10(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (v6)
  {
    if (v3 != v4)
    {
      if (v5 == v4)
      {
        if (a3 < 0x7FFFFFFF)
        {
          if (v6 < 0)
            JUMPOUT(0x18782BA64);
          JUMPOUT(0x18782BA38);
        }
        JUMPOUT(0x18782BA40);
      }
      JUMPOUT(0x18782BA1CLL);
    }
    JUMPOUT(0x18782BA48);
  }
  JUMPOUT(0x18782BA68);
}

uint64_t type metadata completion function for AdapterState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for AdapterState.PlaybackState(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdapterState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *__src;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = *(unsigned int *)(v7 + 84);
  if (v11 <= v12)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v11;
  if (v10 <= v13)
    v14 = v13;
  else
    v14 = *(_DWORD *)(v9 + 84);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(_DWORD *)(v7 + 80);
  v17 = v15 + v16;
  v18 = *(_DWORD *)(v9 + 80) | 7;
  v19 = *(_QWORD *)(v9 + 64) + 7;
  v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + *(_DWORD *)(v9 + 80) + 8;
  v21 = ((v19
        + ((v20 + ((v18 + v15 + ((v15 + v16) & ~v16)) & ~v18)) & ~(unint64_t)*(_DWORD *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v22 = *(_DWORD *)(v9 + 80) | v16;
  if (v22 > 7 || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v21 > 0x18)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v22 & 0xF8 ^ 0x1F8) & (v22 + 16)));
LABEL_31:
    swift_retain();
    return a1;
  }
  v26 = v6;
  v46 = v8;
  __src = a2;
  v27 = ~(unint64_t)*(_DWORD *)(v9 + 80);
  v44 = ~v18;
  v45 = (v19 & 0xFFFFFFFFFFFFFFF8) + *(_DWORD *)(v9 + 80) + 8;
  v43 = ~v16;
  if ((_DWORD)v12 == v14)
  {
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(__src, v12, v6))
      goto LABEL_30;
    goto LABEL_25;
  }
  v28 = ((((unint64_t)__src + v17) & ~v16) + v15 + v18) & ~v18;
  if (v11 == v14)
  {
    if (v10 >= 0x7FFFFFFF)
      goto LABEL_24;
LABEL_27:
    v29 = *(_QWORD *)((v19 + v28) & 0xFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF)
      LODWORD(v29) = -1;
    if ((_DWORD)v29 == -1)
      goto LABEL_30;
    goto LABEL_25;
  }
  v28 = (v20 + v28) & v27;
  if (v10 < v13)
    goto LABEL_27;
LABEL_24:
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(v28))
  {
LABEL_30:
    v30 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    v30(a1, __src, v26);
    v31 = ((unint64_t)a1 + v17) & v43;
    v32 = ((unint64_t)__src + v17) & v43;
    v30((uint64_t *)v31, (uint64_t *)v32, v26);
    v33 = v32 + v15;
    v34 = (v31 + v15 + v18) & v44;
    v35 = (v33 + v18) & v44;
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v36(v34, v35, v46);
    *(_QWORD *)((v19 + v34) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v19 + v35) & 0xFFFFFFFFFFFFF8);
    v37 = (v45 + v34) & v27;
    v38 = (v45 + v35) & v27;
    swift_bridgeObjectRetain();
    v36(v37, v38, v46);
    v39 = (_QWORD *)((v19 + v38) & 0xFFFFFFFFFFFFFFF8);
    v40 = v39[1];
    v41 = (_QWORD *)((v19 + v37) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v39;
    v41[1] = v40;
    goto LABEL_31;
  }
LABEL_25:
  memcpy(a1, __src, v21);
  return a1;
}

uint64_t destroy for AdapterState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= v6)
    v11 = *(_DWORD *)(v5 + 84);
  else
    v11 = v10;
  if (v9 <= v11)
    v12 = v11;
  else
    v12 = *(_DWORD *)(v8 + 84);
  v13 = *(_QWORD *)(v5 + 64);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = v15 | 7;
  v17 = *(_QWORD *)(v8 + 64) + 7;
  if ((_DWORD)v6 == v12)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
    if (!(_DWORD)result)
      goto LABEL_21;
    return result;
  }
  v19 = (((v13 + v14 + a1) & ~v14) + v13 + v16) & ~(v15 | 7);
  if (v10 == v12)
  {
    if (v9 >= 0x7FFFFFFF)
      goto LABEL_15;
LABEL_18:
    v20 = *(_QWORD *)((v17 + v19) & 0xFFFFFFFFFFFFF8);
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    result = (v20 + 1);
    if ((_DWORD)v20 == -1)
      goto LABEL_21;
    return result;
  }
  v19 = ((v17 & 0xFFFFFFFFFFFFFFF8) + 8 + v15 + v19) & ~v15;
  if (v9 < v11)
    goto LABEL_18;
LABEL_15:
  result = (*(uint64_t (**)(unint64_t))(v8 + 48))(v19);
  if (!(_DWORD)result)
  {
LABEL_21:
    v21 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v21(a1, v4);
    v22 = (v13 + v14 + a1) & ~v14;
    v21(v22, v4);
    v23 = (v22 + v13 + v16) & ~(v15 | 7);
    v24 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v24(v23, v7);
    swift_bridgeObjectRelease();
    v24(((v17 & 0xFFFFFFFFFFFFFFF8) + 8 + v15 + v23) & ~v15, v7);
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for AdapterState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  void (*v24)(void *, const void *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;

  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v7)
    v12 = *(_DWORD *)(v6 + 84);
  else
    v12 = v11;
  if (v10 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v9 + 84);
  v14 = *(_QWORD *)(v6 + 64);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = v14 + v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = v17 | 7;
  v19 = *(_QWORD *)(v9 + 64) + 7;
  v42 = (v19 & 0xFFFFFFFFFFFFFFF8) + v17 + 8;
  v39 = ~v17;
  v40 = v8;
  v37 = ~v15;
  v38 = ~(v17 | 7);
  if ((_DWORD)v7 == v13)
  {
    if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
      goto LABEL_21;
    goto LABEL_16;
  }
  v20 = ((((unint64_t)a2 + v16) & ~v15) + v14 + v18) & ~(v17 | 7);
  if (v11 == v13)
  {
    if (v10 >= 0x7FFFFFFF)
      goto LABEL_15;
LABEL_18:
    v23 = *(_QWORD *)((v19 + v20) & 0xFFFFFFFFFFFFF8);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    if ((_DWORD)v23 == -1)
      goto LABEL_21;
    goto LABEL_16;
  }
  v20 = (v42 + v20) & ~v17;
  if (v10 < v12)
    goto LABEL_18;
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t))(v9 + 48))(v20))
  {
LABEL_21:
    v24 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
    v22 = a1;
    v24(a1, a2, v5);
    v25 = ((unint64_t)a1 + v16) & v37;
    v26 = ((unint64_t)a2 + v16) & v37;
    v24((void *)v25, (const void *)v26, v5);
    v27 = v26 + v14;
    v28 = (v25 + v14 + v18) & v38;
    v29 = (v27 + v18) & v38;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v30(v28, v29, v40);
    *(_QWORD *)((v19 + v28) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v19 + v29) & 0xFFFFFFFFFFFFF8);
    v31 = (v42 + v28) & v39;
    v32 = (v42 + v29) & v39;
    swift_bridgeObjectRetain();
    v30(v31, v32, v40);
    v33 = (_QWORD *)((v19 + v32) & 0xFFFFFFFFFFFFFFF8);
    v34 = v33[1];
    v35 = (_QWORD *)((v19 + v31) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v33;
    v35[1] = v34;
    swift_retain();
    return v22;
  }
LABEL_16:
  v21 = (v18 + v14 + (v16 & ~v15)) & ~v18;
  v22 = a1;
  memcpy(a1, a2, ((v19 + ((v42 + v21) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16);
  return v22;
}

void *assignWithCopy for AdapterState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  int v40;
  unint64_t v41;
  void (*v42)(void *, const void *, uint64_t);
  unint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, unint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(void *, uint64_t);
  void (*v55)(unint64_t, uint64_t);
  void (*v57)(void *, const void *, uint64_t);
  unint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(uint64_t, unint64_t, uint64_t);
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t __n;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v6 = type metadata accessor for Date();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = *((unsigned int *)v11 + 21);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = *((_DWORD *)v11 + 21);
  if (v13 <= v9)
    v14 = *(_DWORD *)(v8 + 84);
  else
    v14 = v13;
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = *((_DWORD *)v11 + 21);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = v16 + v17;
  v20 = *((unsigned __int8 *)v11 + 80);
  v21 = v20 | 7;
  v22 = ~(v20 | 7);
  v23 = v11[8] + 7;
  v24 = ~v20;
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  v77 = v23;
  v78 = v10;
  v75 = v25;
  v76 = ~v20;
  __n = ((v23 + ((v25 + (((v20 | 7) + v16 + ((v16 + v17) & ~v17)) & v22)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v74 = *(_QWORD **)(v10 - 8);
  v71 = ~v17;
  v72 = v22;
  v70 = *(_QWORD **)(v6 - 8);
  if ((_DWORD)v9 == v15)
  {
    v26 = v16 + v17;
    v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
    v28 = v27(a1, v9, v6);
    v29 = v27(a2, v9, v7);
    v30 = v7;
    if (v28)
    {
      if (!v29)
        goto LABEL_34;
LABEL_42:
      memcpy(a1, a2, __n);
      return a1;
    }
LABEL_40:
    if (!v29)
    {
      v57 = (void (*)(void *, const void *, uint64_t))v70[3];
      v57(a1, a2, v30);
      v58 = ((unint64_t)a1 + v26) & v71;
      v59 = a1;
      v57((void *)v58, (const void *)(((unint64_t)a2 + v26) & v71), v30);
      v60 = (v58 + v16 + v21) & v72;
      v61 = ((((unint64_t)a2 + v26) & v71) + v16 + v21) & v72;
      v62 = (void (*)(uint64_t, unint64_t, uint64_t))v74[3];
      v62(v60, v61, v78);
      *(_QWORD *)((v77 + v60) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v77 + v61) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v63 = (v75 + v60) & v76;
      v64 = (v75 + v61) & v76;
      v62(v63, v64, v78);
      v65 = v77 + v63;
      a1 = v59;
      v65 &= 0xFFFFFFFFFFFFFFF8;
      v66 = (_QWORD *)((v77 + v64) & 0xFFFFFFFFFFFFFFF8);
      v67 = v66[1];
      *(_QWORD *)v65 = *v66;
      *(_QWORD *)(v65 + 8) = v67;
      swift_retain();
      swift_release();
      return a1;
    }
    v54 = (void (*)(void *, uint64_t))v70[1];
    v54(a1, v30);
    v54((void *)(((unint64_t)a1 + v26) & v71), v30);
    v55 = (void (*)(unint64_t, uint64_t))v74[1];
    v55(((((unint64_t)a1 + v26) & v71) + v16 + v21) & v72, v78);
    swift_bridgeObjectRelease();
    v55((v75 + (((((unint64_t)a1 + v26) & v71) + v16 + v21) & v72)) & v76, v78);
    swift_release();
    goto LABEL_42;
  }
  v68 = a1;
  v69 = v6;
  v31 = ((((unint64_t)a1 + v19) & v18) + v16 + v21) & v22;
  if (v13 == v15)
  {
    if (v12 >= 0x7FFFFFFF)
    {
LABEL_16:
      v32 = ~(v20 | 7);
      v33 = ~v17;
      v34 = v16 + v17;
      v35 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v31, v12, v10);
      v19 = v34;
      v18 = v33;
      v22 = v32;
      v11 = v74;
      v25 = v75;
      v24 = v76;
      v10 = v78;
      v36 = v35;
      goto LABEL_21;
    }
  }
  else
  {
    v31 = (v25 + v31) & v24;
    if (v12 >= v14)
      goto LABEL_16;
  }
  v37 = *(_QWORD *)((v23 + v31) & 0xFFFFFFFFFFFFF8);
  if (v37 >= 0xFFFFFFFF)
    LODWORD(v37) = -1;
  v36 = v37 + 1;
LABEL_21:
  v38 = ((((unint64_t)a2 + v19) & v18) + v16 + v21) & v22;
  v39 = v13 == v15;
  if (!v36)
  {
    if (v13 == v15)
    {
      if (v12 >= 0x7FFFFFFF)
      {
LABEL_28:
        v26 = v19;
        v29 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v10);
LABEL_39:
        a1 = v68;
        v30 = v69;
        goto LABEL_40;
      }
    }
    else
    {
      v38 = (v25 + v38) & v24;
      if (v12 >= v14)
        goto LABEL_28;
    }
    v26 = v19;
    v53 = *(_QWORD *)((v77 + v38) & 0xFFFFFFFFFFFFF8);
    if (v53 >= 0xFFFFFFFF)
      LODWORD(v53) = -1;
    v29 = v53 + 1;
    goto LABEL_39;
  }
  v26 = v19;
  if (!v39)
  {
    v38 = (v25 + v38) & v24;
    if (v12 < v14)
      goto LABEL_30;
LABEL_25:
    v40 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v10);
    goto LABEL_33;
  }
  if (v12 >= 0x7FFFFFFF)
    goto LABEL_25;
LABEL_30:
  v41 = *(_QWORD *)((v77 + v38) & 0xFFFFFFFFFFFFF8);
  if (v41 >= 0xFFFFFFFF)
    LODWORD(v41) = -1;
  v40 = v41 + 1;
LABEL_33:
  a1 = v68;
  v30 = v69;
  if (v40)
    goto LABEL_42;
LABEL_34:
  v42 = (void (*)(void *, const void *, uint64_t))v70[2];
  v42(a1, a2, v30);
  v43 = ((unint64_t)a1 + v26) & v71;
  v44 = a1;
  v42((void *)v43, (const void *)(((unint64_t)a2 + v26) & v71), v30);
  v45 = (v43 + v16 + v21) & v72;
  v46 = ((((unint64_t)a2 + v26) & v71) + v16 + v21) & v72;
  v47 = (void (*)(uint64_t, unint64_t, uint64_t))v74[2];
  v47(v45, v46, v78);
  *(_QWORD *)((v77 + v45) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v77 + v46) & 0xFFFFFFFFFFFFF8);
  v48 = (v75 + v45) & v76;
  v49 = (v75 + v46) & v76;
  swift_bridgeObjectRetain();
  v47(v48, v49, v78);
  v50 = v77 + v48;
  a1 = v44;
  v51 = (_QWORD *)((v77 + v49) & 0xFFFFFFFFFFFFFFF8);
  v52 = v51[1];
  v50 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v50 = *v51;
  *(_QWORD *)(v50 + 8) = v52;
  swift_retain();
  return a1;
}

void *initializeWithTake for AdapterState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  void (*v24)(void *, const void *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;

  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v7)
    v12 = *(_DWORD *)(v6 + 84);
  else
    v12 = v11;
  if (v10 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v9 + 84);
  v14 = *(_QWORD *)(v6 + 64);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = v14 + v15;
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = v17 | 7;
  v19 = *(_QWORD *)(v9 + 64) + 7;
  v39 = (v19 & 0xFFFFFFFFFFFFFFF8) + v17 + 8;
  v36 = ~v17;
  v37 = v8;
  v34 = ~v15;
  v35 = ~(v17 | 7);
  if ((_DWORD)v7 == v13)
  {
    if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
      goto LABEL_21;
    goto LABEL_16;
  }
  v20 = ((((unint64_t)a2 + v16) & ~v15) + v14 + v18) & ~(v17 | 7);
  if (v11 == v13)
  {
    if (v10 >= 0x7FFFFFFF)
      goto LABEL_15;
LABEL_18:
    v23 = *(_QWORD *)((v19 + v20) & 0xFFFFFFFFFFFFF8);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    if ((_DWORD)v23 == -1)
      goto LABEL_21;
    goto LABEL_16;
  }
  v20 = (v39 + v20) & ~v17;
  if (v10 < v12)
    goto LABEL_18;
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t))(v9 + 48))(v20))
  {
LABEL_21:
    v24 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
    v22 = a1;
    v24(a1, a2, v5);
    v25 = ((unint64_t)a1 + v16) & v34;
    v26 = ((unint64_t)a2 + v16) & v34;
    v24((void *)v25, (const void *)v26, v5);
    v27 = v26 + v14;
    v28 = (v25 + v14 + v18) & v35;
    v29 = (v27 + v18) & v35;
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v30(v28, v29, v37);
    *(_QWORD *)((v19 + v28) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v19 + v29) & 0xFFFFFFFFFFFFF8);
    v31 = (v39 + v28) & v36;
    v32 = (v39 + v29) & v36;
    v30(v31, v32, v37);
    *(_OWORD *)((v19 + v31) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v19 + v32) & 0xFFFFFFFFFFFFF8);
    return v22;
  }
LABEL_16:
  v21 = (v18 + v14 + (v16 & ~v15)) & ~v18;
  v22 = a1;
  memcpy(a1, a2, ((v19 + ((v39 + v21) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16);
  return v22;
}

void *assignWithTake for AdapterState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  int v40;
  unint64_t v41;
  void (*v42)(void *, const void *, uint64_t);
  unint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, unint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(void *, uint64_t);
  void (*v53)(unint64_t, uint64_t);
  void (*v55)(void *, const void *, uint64_t);
  unint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, unint64_t, uint64_t);
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t __n;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v6 = type metadata accessor for Date();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = *((unsigned int *)v11 + 21);
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = *((_DWORD *)v11 + 21);
  if (v13 <= v9)
    v14 = *(_DWORD *)(v8 + 84);
  else
    v14 = v13;
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = *((_DWORD *)v11 + 21);
  v16 = *(_QWORD *)(v8 + 64);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = ~v17;
  v19 = v16 + v17;
  v20 = *((unsigned __int8 *)v11 + 80);
  v21 = v20 | 7;
  v22 = ~(v20 | 7);
  v23 = v11[8] + 7;
  v24 = ~v20;
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  v73 = v23;
  v74 = v10;
  v71 = v25;
  v72 = ~v20;
  __n = ((v23 + ((v25 + (((v20 | 7) + v16 + ((v16 + v17) & ~v17)) & v22)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v70 = *(_QWORD **)(v10 - 8);
  v67 = ~v17;
  v68 = v22;
  v66 = *(_QWORD **)(v6 - 8);
  if ((_DWORD)v9 == v15)
  {
    v26 = v16 + v17;
    v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
    v28 = v27(a1, v9, v6);
    v29 = v27(a2, v9, v7);
    v30 = v7;
    if (v28)
    {
      if (!v29)
        goto LABEL_34;
LABEL_42:
      memcpy(a1, a2, __n);
      return a1;
    }
LABEL_40:
    if (!v29)
    {
      v55 = (void (*)(void *, const void *, uint64_t))v66[5];
      v55(a1, a2, v30);
      v56 = ((unint64_t)a1 + v26) & v67;
      v57 = a1;
      v55((void *)v56, (const void *)(((unint64_t)a2 + v26) & v67), v30);
      v58 = (v56 + v16 + v21) & v68;
      v59 = ((((unint64_t)a2 + v26) & v67) + v16 + v21) & v68;
      v60 = (void (*)(uint64_t, unint64_t, uint64_t))v70[5];
      v60(v58, v59, v74);
      *(_QWORD *)((v73 + v58) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v73 + v59) & 0xFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      v61 = (v71 + v58) & v72;
      v62 = (v71 + v59) & v72;
      v60(v61, v62, v74);
      v63 = v73 + v61;
      a1 = v57;
      *(_OWORD *)(v63 & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v73 + v62) & 0xFFFFFFFFFFFFF8);
      swift_release();
      return a1;
    }
    v52 = (void (*)(void *, uint64_t))v66[1];
    v52(a1, v30);
    v52((void *)(((unint64_t)a1 + v26) & v67), v30);
    v53 = (void (*)(unint64_t, uint64_t))v70[1];
    v53(((((unint64_t)a1 + v26) & v67) + v16 + v21) & v68, v74);
    swift_bridgeObjectRelease();
    v53((v71 + (((((unint64_t)a1 + v26) & v67) + v16 + v21) & v68)) & v72, v74);
    swift_release();
    goto LABEL_42;
  }
  v64 = a1;
  v65 = v6;
  v31 = ((((unint64_t)a1 + v19) & v18) + v16 + v21) & v22;
  if (v13 == v15)
  {
    if (v12 >= 0x7FFFFFFF)
    {
LABEL_16:
      v32 = ~(v20 | 7);
      v33 = ~v17;
      v34 = v16 + v17;
      v35 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v31, v12, v10);
      v19 = v34;
      v18 = v33;
      v22 = v32;
      v11 = v70;
      v25 = v71;
      v24 = v72;
      v10 = v74;
      v36 = v35;
      goto LABEL_21;
    }
  }
  else
  {
    v31 = (v25 + v31) & v24;
    if (v12 >= v14)
      goto LABEL_16;
  }
  v37 = *(_QWORD *)((v23 + v31) & 0xFFFFFFFFFFFFF8);
  if (v37 >= 0xFFFFFFFF)
    LODWORD(v37) = -1;
  v36 = v37 + 1;
LABEL_21:
  v38 = ((((unint64_t)a2 + v19) & v18) + v16 + v21) & v22;
  v39 = v13 == v15;
  if (!v36)
  {
    if (v13 == v15)
    {
      if (v12 >= 0x7FFFFFFF)
      {
LABEL_28:
        v26 = v19;
        v29 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v10);
LABEL_39:
        a1 = v64;
        v30 = v65;
        goto LABEL_40;
      }
    }
    else
    {
      v38 = (v25 + v38) & v24;
      if (v12 >= v14)
        goto LABEL_28;
    }
    v26 = v19;
    v51 = *(_QWORD *)((v73 + v38) & 0xFFFFFFFFFFFFF8);
    if (v51 >= 0xFFFFFFFF)
      LODWORD(v51) = -1;
    v29 = v51 + 1;
    goto LABEL_39;
  }
  v26 = v19;
  if (!v39)
  {
    v38 = (v25 + v38) & v24;
    if (v12 < v14)
      goto LABEL_30;
LABEL_25:
    v40 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v10);
    goto LABEL_33;
  }
  if (v12 >= 0x7FFFFFFF)
    goto LABEL_25;
LABEL_30:
  v41 = *(_QWORD *)((v73 + v38) & 0xFFFFFFFFFFFFF8);
  if (v41 >= 0xFFFFFFFF)
    LODWORD(v41) = -1;
  v40 = v41 + 1;
LABEL_33:
  a1 = v64;
  v30 = v65;
  if (v40)
    goto LABEL_42;
LABEL_34:
  v42 = (void (*)(void *, const void *, uint64_t))v66[4];
  v42(a1, a2, v30);
  v43 = ((unint64_t)a1 + v26) & v67;
  v44 = a1;
  v42((void *)v43, (const void *)(((unint64_t)a2 + v26) & v67), v30);
  v45 = (v43 + v16 + v21) & v68;
  v46 = ((((unint64_t)a2 + v26) & v67) + v16 + v21) & v68;
  v47 = (void (*)(uint64_t, unint64_t, uint64_t))v70[4];
  v47(v45, v46, v74);
  *(_QWORD *)((v73 + v45) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v73 + v46) & 0xFFFFFFFFFFFFF8);
  v48 = (v71 + v45) & v72;
  v49 = (v71 + v46) & v72;
  v47(v48, v49, v74);
  v50 = v73 + v48;
  a1 = v44;
  *(_OWORD *)(v50 & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v73 + v49) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = v11;
  if (v10 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v14 = v6;
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = v15 + v16;
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = v18 | 7;
  v20 = *(_QWORD *)(v9 + 64) + 7;
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  if (v13 - 1 < a2)
  {
    v22 = a2 - v13 + 2;
    if (((((v20 + ((v21 + ((v19 + v15 + (v17 & ~v16)) & ~v19)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v24 = v23;
    else
      v24 = 0;
    __asm { BR              X22 }
  }
  if (v8 == v13)
  {
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(v7 + 48))(a1, *(unsigned int *)(v7 + 84), v14, v21, v17, v19);
    goto LABEL_33;
  }
  v27 = (((v17 + a1) & ~v16) + v15 + v19) & ~v19;
  if (v11 != v13)
  {
    v27 = (v21 + v27) & ~v18;
    if (v10 >= v12)
      goto LABEL_28;
LABEL_30:
    v28 = *(_QWORD *)((v20 + v27) & 0xFFFFFFFFFFFFF8);
    if (v28 >= 0xFFFFFFFF)
      LODWORD(v28) = -1;
    v26 = v28 + 1;
    goto LABEL_33;
  }
  if (v10 < 0x7FFFFFFF)
    goto LABEL_30;
LABEL_28:
  v26 = (*(uint64_t (**)(unint64_t))(v9 + 48))(v27);
LABEL_33:
  if (v26 >= 2)
    return v26 - 1;
  else
    return 0;
}

void storeEnumTagSinglePayload for AdapterState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v8 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= *(_DWORD *)(v8 + 84))
    v12 = *(_DWORD *)(v8 + 84);
  else
    v12 = v11;
  if (v10 <= v12)
    v13 = v12;
  else
    v13 = *(_DWORD *)(v9 + 84);
  v14 = v13 - 1;
  v15 = *(unsigned __int8 *)(v9 + 80);
  if (v13 - 1 >= a3)
  {
    v17 = 0u;
    if (v14 >= a2)
      goto LABEL_21;
  }
  else
  {
    v16 = a3 - v13 + 2;
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((((*(_DWORD *)(v9 + 64) + 7) & 0xFFFFFFF8)
           + (_DWORD)v15
           + 8
           + (((v15 | 7)
             + *(_DWORD *)(v8 + 64)
             + ((*(_DWORD *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~*(unsigned __int8 *)(v8 + 80))) & ~(v15 | 7))) & ~(_DWORD)v15)) & 0xFFFFFFF8) != 0xFFFFFFF0)
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 < 2)
      v17 = 0;
    if (v14 >= a2)
LABEL_21:
      __asm { BR              X23 }
  }
  v18 = a2 - v13;
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((((*(_DWORD *)(v9 + 64) + 7) & 0xFFFFFFF8)
         + (_DWORD)v15
         + 8
         + (((v15 | 7)
           + *(_DWORD *)(v8 + 64)
           + ((*(_DWORD *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~*(unsigned __int8 *)(v8 + 80))) & ~(v15 | 7))) & ~(_DWORD)v15)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    bzero(a1, ((*(_QWORD *)(v9 + 64)+ 7+ ((((*(_QWORD *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)+ v15+ 8+ (((v15 | 7)+ *(_QWORD *)(v8 + 64)+ ((*(_QWORD *)(v8 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v18;
  }
  __asm { BR              X10 }
}

void sub_18782D1CC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x18782D2CCLL);
}

void sub_18782D1D4()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18782D1DCLL);
  JUMPOUT(0x18782D2CCLL);
}

void sub_18782D224()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x18782D2CCLL);
}

void sub_18782D22C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x18782D2CCLL);
}

void sub_18782D234()
{
  int v0;
  int v1;
  unsigned int v2;
  int v3;
  _DWORD *v4;
  size_t v5;

  *(_WORD *)((char *)v4 + v5) = 0;
  if (v3)
  {
    if (v3 + 1 <= v2)
    {
      if (v3 != -1)
      {
        if (v1 == v2)
          JUMPOUT(0x18782D2A8);
        JUMPOUT(0x18782D240);
      }
    }
    else if ((_DWORD)v5)
    {
      v0 = v3 - v2;
      bzero(v4, v5);
      *v4 = v0;
    }
  }
  JUMPOUT(0x18782D2CCLL);
}

uint64_t getEnumTag for AdapterState(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v14)(unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= v6)
    v11 = *(_DWORD *)(v5 + 84);
  else
    v11 = v10;
  if (v9 <= v11)
    v12 = v11;
  else
    v12 = *(_DWORD *)(v8 + 84);
  if (v6 == v12)
  {
    v13 = v4;
    v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    v15 = a1;
    v9 = *(unsigned int *)(v5 + 84);
    v7 = v13;
    return v14(v15, v9, v7);
  }
  v16 = *(unsigned __int8 *)(v8 + 80);
  v17 = *(_QWORD *)(v8 + 64) + 7;
  v15 = (*(_QWORD *)(v5 + 64)
       + ((*(_QWORD *)(v5 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + (v16 | 7)) & ~(v16 | 7);
  if (v10 == v12)
  {
    if (v9 >= 0x7FFFFFFF)
    {
LABEL_14:
      v14 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
      return v14(v15, v9, v7);
    }
  }
  else
  {
    v15 = (v16 + (v17 & 0xFFFFFFFFFFFFFFF8) + v15 + 8) & ~v16;
    if (v9 >= v11)
      goto LABEL_14;
  }
  v19 = *(_QWORD *)((v17 + v15) & 0xFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF)
    LODWORD(v19) = -1;
  return (v19 + 1);
}

void destructiveInjectEnumTag for AdapterState(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  void (*v29)(_DWORD *, uint64_t, uint64_t, uint64_t);
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v8)
    v13 = *(_DWORD *)(v7 + 84);
  else
    v13 = v12;
  if (v11 <= v13)
    v14 = v13;
  else
    v14 = *(_DWORD *)(v10 + 84);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = ~v16;
  v18 = v15 + v16;
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = v19 | 7;
  v21 = ~(v19 | 7);
  v22 = *(_QWORD *)(v10 + 64);
  v23 = v22 + 7;
  v24 = ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + v19;
  v25 = ~v19;
  v26 = v24 + 8;
  if (v14 >= a2)
  {
    if (!(_DWORD)a2)
      return;
    if (v8 == v14)
    {
      v29 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v30 = a1;
      v31 = a2;
      v11 = *(unsigned int *)(v7 + 84);
      v9 = v6;
LABEL_24:
      v29(v30, v31, v11, v9);
      return;
    }
    v30 = (_DWORD *)(((((unint64_t)a1 + v18) & v17) + v15 + v20) & v21);
    if (v12 == v14)
    {
      if (v11 < 0x7FFFFFFF)
      {
        v32 = (_QWORD *)(((unint64_t)v30 + v23) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
        {
          *v32 = a2 ^ 0x80000000;
          return;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v30 = (_DWORD *)(((unint64_t)v30 + v26) & v25);
      if (v11 < v13)
      {
        v32 = (_QWORD *)(((unint64_t)v30 + v23) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
        {
          *v32 = a2 ^ 0x80000000;
          v32[1] = 0;
          return;
        }
LABEL_22:
        *v32 = (a2 - 1);
        return;
      }
    }
    v29 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v31 = a2;
    goto LABEL_24;
  }
  v27 = (((v26 + ((v20 + v15 + (v18 & v17)) & v21)) & v25) + v22 + 7) & 0xFFFFFFF8;
  if (v27 != -16)
  {
    v28 = ~v14 + a2;
    bzero(a1, (v27 + 16));
    *a1 = v28;
  }
}

void partial apply for closure #1 in closure #1 in MapAnimator.body.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_18782D5C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in closure #1 in MapAnimator.body.getter(v3, v1, v2 + ((v5 + 48) & ~v5), v4);
}

void partial apply for closure #2 in closure #1 in MapAnimator.body.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_18782D648()
{
  type metadata accessor for MapAnimator();
}

uint64_t sub_18782D670(uint64_t a1)
{
  char *v1;

  return MapAnimator.handleChangeOfUnderlyingValue(to:)(v1, a1);
}

void partial apply for closure #1 in MapAnimator.contentBinding.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_18782D6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in MapAnimator.contentBinding.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 64) & ~v3), v2);
}

void objectdestroy_12Tm_1()
{
  type metadata accessor for MapAnimator();
}

uint64_t sub_18782D750(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  uint64_t v17;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_unknownObjectRelease();
  v4 = v1 + ((v3 + 64) & ~v3);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  v5 = v4 + *(int *)(type metadata accessor for Binding() + 32);
  v6 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v5, 1))
    (*(void (**)(uint64_t))(v6 + 8))(v5);
  v9 = v4 + *(int *)(a1 + 52);
  v10 = (int *)type metadata accessor for AdapterState.PlaybackState(0, v17, v7, v8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v9, 1, v10))
  {
    v13 = type metadata accessor for Date();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(v9, v13);
    v14(v9 + v10[7], v13);
    v15 = *(void (**)(uint64_t))(v6 + 8);
    v15(v9 + v10[8]);
    type metadata accessor for KeyframeTimeline();
    swift_bridgeObjectRelease();
    v15(v9 + v10[9]);
    swift_release();
  }
  type metadata accessor for AdapterState(255, v17, v11, v12);
  type metadata accessor for State();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in MapAnimator.contentBinding.getter()
{
  type metadata accessor for MapAnimator();
}

void sub_18782D93C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #2 in MapAnimator.contentBinding.getter(v1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v4 + 64) & ~v4), v3);
}

uint64_t specialized MapAnimator.state.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for AdapterState(255, *(_QWORD *)(a2 + 16), a3, a4);
  v5 = type metadata accessor for State();
  return specialized State.wrappedValue.setter(a1, v5);
}

void static PageBuilder.buildPartialBlock<A>(first:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  static PageBuilder.buildPartialBlock<A>(first:)();
}

void static PageBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  static PageBuilder.buildPartialBlock<A, B>(accumulated:next:)();
}

void static PrintContent._makePrintContent(content:inputs:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for PrintContent.PrintBody : PrintContent in Never()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for PageBuilder()
{
  return &type metadata for PageBuilder;
}

uint64_t dispatch thunk of PrintContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static PrintContent._makePrintContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for _PrintingOutputs()
{
  return &type metadata for _PrintingOutputs;
}

ValueMetadata *type metadata accessor for _PrintingInputs()
{
  return &type metadata for _PrintingInputs;
}

_UNKNOWN **sub_18782DA44()
{
  return &protocol witness table for TuplePrintContent<A>;
}

uint64_t SecureField.init(_:prompt:onCommit:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15)
{
  char v16;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;

  v16 = a7;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  v19 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (a10)
  {
    v20 = a11;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  a9[8] = v19;
  a9[9] = 0;
  a9[10] = a10;
  a9[11] = v20;
  type metadata accessor for SecureField(0, a14, a15, a4);
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a5, a6, v16, a8);
  swift_retain();
  v21 = outlined copy of AppIntentExecutor?(a10);
  a12(v21);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a10);
  outlined consume of Text?(a5, a6, v16, a8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t SecureField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  char v49;
  __int16 v50;

  v3 = v2;
  v33 = a2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v32 = (char *)&v30 - v7;
  v8 = TextField.$text.getter();
  v9 = v2[8];
  v10 = v2[9];
  v11 = v2[10];
  v12 = v2[11];
  v39 = v8;
  v40 = v13;
  *(_QWORD *)&v41 = v14;
  *((_QWORD *)&v41 + 1) = v15;
  outlined copy of TextFieldState.FormatActions?(v9);
  type metadata accessor for Binding<String>();
  MEMORY[0x18D75B9C8](v38);
  v39 = v38[0];
  v40 = v38[1];
  v41 = 0u;
  v42 = 0u;
  v43 = v9;
  v44 = v10;
  v45 = v11;
  v46 = v12;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  v50 = 2;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v31 = TextField.$text.getter();
  v30 = v16;
  v18 = v17;
  v20 = v19;
  v21 = v2[4];
  v22 = v2[5];
  v23 = v2[6];
  v24 = v2[7];
  type metadata accessor for Binding<TextSelection?>(0);
  v26 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v32, 1, 1, v25);
  v27 = *(_QWORD *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 24);
  v35 = v27;
  v36 = v28;
  v37 = v3;
  outlined copy of Text?(v21, v22, v23, v24);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v39, v31, v30, v18, v20, 1, v21, v22, v33, v23, v24, 0, v26, (void (*)(uint64_t))partial apply for closure #1 in SecureField.body.getter, (uint64_t)v34, v27);
}

uint64_t closure #1 in SecureField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SecureField(0, v11, v12, v13);
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 44), a2, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v10, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a2);
}

uint64_t partial apply for closure #1 in SecureField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in SecureField.body.getter(v1[4], v1[2], v1[3], a1);
}

double SecureField<>.init(_:text:prompt:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, __int128 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  char v14;
  double result;
  uint64_t v16;
  uint64_t v17;

  v13 = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = a6;
  *(_QWORD *)(a5 + 48) = a7;
  *(_QWORD *)(a5 + 56) = a8;
  result = 0.0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_QWORD *)(a5 + 96) = v13;
  *(_QWORD *)(a5 + 104) = v16;
  *(_BYTE *)(a5 + 112) = v14 & 1;
  *(_QWORD *)(a5 + 120) = v17;
  return result;
}

uint64_t SecureField<>.init<A>(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];

  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = a3;
  *(_QWORD *)&v16 = a4;
  *((_QWORD *)&v16 + 1) = a5;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  *(_QWORD *)&v18 = a8;
  *((_QWORD *)&v18 + 1) = a10;
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v19);
  a9[4] = 0u;
  a9[5] = 0u;
  v13 = v19[1];
  a9[6] = v19[0];
  a9[7] = v13;
  *a9 = v15;
  a9[1] = v16;
  a9[2] = v17;
  a9[3] = v18;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a1, a11);
}

uint64_t SecureField.init(text:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13)
{
  return SecureField.init(_:prompt:onCommit:label:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, 0, a10, a11, a12, a13);
}

double SecureField<>.init(_:text:onCommit:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char v13;
  double result;
  uint64_t v15;
  uint64_t v16;

  v12 = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_QWORD *)(a5 + 64) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = a6;
  *(_QWORD *)(a5 + 88) = a7;
  *(_QWORD *)(a5 + 96) = v12;
  *(_QWORD *)(a5 + 104) = v15;
  *(_BYTE *)(a5 + 112) = v13 & 1;
  *(_QWORD *)(a5 + 120) = v16;
  return result;
}

uint64_t SecureField<>.init<A>(_:text:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  *(_QWORD *)&v15 = a4;
  *((_QWORD *)&v15 + 1) = a5;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v17);
  a9[4] = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  a9[5] = v16;
  v12 = v17[1];
  a9[6] = v17[0];
  a9[7] = v12;
  *a9 = v14;
  a9[1] = v15;
  a9[2] = 0u;
  a9[3] = 0u;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 8))(a1, a8);
}

uint64_t associated type witness table accessor for View.Body : View in SecureField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for SecureField()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureField(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 96) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    a1[3] = a2[3];
    v13 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    v14 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    v15 = *(_QWORD *)(v14 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15 < 0xFFFFFFFF)
    {
      v19 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v19;
    }
    else
    {
      v16 = *(_QWORD *)v14;
      v17 = *(_QWORD *)(v14 + 8);
      v18 = *(_BYTE *)(v14 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v14, v17, v18);
      *(_QWORD *)v13 = v16;
      *(_QWORD *)(v13 + 8) = v17;
      *(_BYTE *)(v13 + 16) = v18;
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
    }
    v20 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v21 < 0xFFFFFFFFuLL)
    {
      v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v24;
    }
    else
    {
      v22 = *(_QWORD *)(v21 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_QWORD *)(v20 + 8) = v22;
      v23 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v20 + 24) = v23;
      swift_retain();
      swift_retain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v20 + v6 + 32) & ~v6, (v21 + v6 + 32) & ~v6, v4);
  }
  return a1;
}

uint64_t destroy for SecureField(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  v5 = (_QWORD *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)v5 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for SecureField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v9 < 0xFFFFFFFF)
  {
    v13 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v13;
  }
  else
  {
    v10 = *(_QWORD *)v8;
    v11 = *(_QWORD *)(v8 + 8);
    v12 = *(_BYTE *)(v8 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v8, v11, v12);
    *(_QWORD *)v7 = v10;
    *(_QWORD *)(v7 + 8) = v11;
    *(_BYTE *)(v7 + 16) = v12;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v18;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v16;
    v17 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v14 + 24) = v17;
    swift_retain();
    swift_retain();
  }
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 16))((v14 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v15 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

_QWORD *assignWithCopy for SecureField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v6 + 24) < 0xFFFFFFFFuLL)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      v15 = *(_QWORD *)v7;
      v16 = *(_QWORD *)(v7 + 8);
      v17 = *(_BYTE *)(v7 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v7, v16, v17);
      *(_QWORD *)v6 = v15;
      *(_QWORD *)(v6 + 8) = v16;
      *(_BYTE *)(v6 + 16) = v17;
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 >= 0xFFFFFFFF)
    {
      v9 = *(_QWORD *)v7;
      v10 = *(_QWORD *)(v7 + 8);
      v11 = *(_BYTE *)(v7 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v7, v10, v11);
      v12 = *(_QWORD *)v6;
      v13 = *(_QWORD *)(v6 + 8);
      v14 = *(_BYTE *)(v6 + 16);
      *(_QWORD *)v6 = v9;
      *(_QWORD *)(v6 + 8) = v10;
      *(_BYTE *)(v6 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(v7 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_BYTE *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  v18 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v18;
LABEL_8:
  v19 = (_QWORD *)((v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  v20 = (unint64_t *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      v24 = v20[1];
      *v19 = v21;
      v19[1] = v24;
      v25 = v20[3];
      v19[2] = v20[2];
      v19[3] = v25;
      swift_retain();
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    v26 = *((_OWORD *)v20 + 1);
    *(_OWORD *)v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v26;
    goto LABEL_15;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  v22 = v20[1];
  *v19 = v21;
  v19[1] = v22;
  swift_retain();
  swift_release();
  v23 = v20[3];
  v19[2] = v20[2];
  v19[3] = v23;
  swift_retain();
  swift_release();
LABEL_15:
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v19 + *(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

_OWORD *initializeWithTake for SecureField(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_OWORD *)(((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8);
  v7 = v6[1];
  *v5 = *v6;
  v5[1] = v7;
  v8 = (_OWORD *)(((unint64_t)v5 + 39) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)(((unint64_t)v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))(((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

_QWORD *assignWithTake for SecureField(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      v9 = *(_BYTE *)(v8 + 16);
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      v12 = *(_BYTE *)(v7 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_BYTE *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_6:
  v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
LABEL_10:
    v17 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v17;
    goto LABEL_11;
  }
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  v16 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v16;
  swift_release();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  swift_release();
LABEL_11:
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))((v14 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (v15 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureField(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 96) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((((a1 + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18782EA14 + 4 * byte_187C62928[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SecureField(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for SecureField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureField);
}

void sub_18782ECAC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TextField(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t one-time initialization function for didPerformBackButtonPress()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD000000000000022, 0x8000000187BE94C0);
  static ClarityUI.didPerformBackButtonPress = result;
  return result;
}

uint64_t type metadata accessor for PlatformViewResponderBase()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlatformViewResponderBase;
  if (!type metadata singleton initialization cache for PlatformViewResponderBase)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PlatformViewResponderBase()
{
  return swift_initClassMetadata2();
}

uint64_t PlatformViewResponderBase.descriptionName.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;

  v1 = MEMORY[0x18D760234](v0 + 48);
  if (!v1)
    return recursiveDescriptionName(_:)();
  v2 = (void *)v1;
  v7 = recursiveDescriptionName(_:)();
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_getObjectType();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);

  return v7;
}

BOOL PlatformViewResponderBase.platformViewIsEnabled.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = (void *)MEMORY[0x18D760234](v0 + 40);
  v2 = v1;
  if (v1)

  return v2 != 0;
}

void PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(_QWORD *a1, double *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v4;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  char v17;
  _QWORD v18[3];
  uint64_t v19;

  v8 = *a4;
  if ((static UnifiedHitTestingFeature.isEnabled.getter() & 1) == 0)
  {
    v16[0] = v8;
    ViewResponder.containsGlobalPoints(_:cacheKey:options:)();
    return;
  }
  if (*((_QWORD *)a2 + 2))
  {
    v9 = a2[4];
    v10 = a2[5];
    v11 = (uint64_t)(v4 + 19);
    v12 = (*(uint64_t (**)(void))(class metadata base offset for PlatformViewResponderBase + *v4 + 40))();
    swift_beginAccess();
    outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)(v4 + 19), (uint64_t)v16);
    if (v17 == 1)
    {
      v13 = outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)v16);
      if (((v12 | v8) & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      outlined init with take of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v16, (uint64_t)v18);
      if ((a3 & 0x100000000) == 0 && LODWORD(v18[0]) == (_DWORD)a3)
      {
        v14 = (void *)MEMORY[0x18D760234](&v19);
        outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v18);
        if (!v14)
          goto LABEL_15;
        goto LABEL_11;
      }
      v13 = outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v18);
      if (((v12 | v8) & 1) != 0)
      {
LABEL_5:
        v14 = (void *)(*(uint64_t (**)(uint64_t, double, double))(class metadata base offset for PlatformViewResponderBase
                                                                         + *v4
                                                                         + 48))(v13, v9, v10);
        if (!v14)
        {
LABEL_15:
          v15 = 0;
          if ((a3 & 0x100000000) == 0)
            goto LABEL_16;
          goto LABEL_12;
        }
LABEL_11:
        swift_beginAccess();
        type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
        ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:)();
        swift_endAccess();
        v15 = v18[0];
        if ((a3 & 0x100000000) == 0)
        {
LABEL_16:
          LODWORD(v16[0]) = a3;
          *(double *)&v16[1] = v9;
          *(double *)&v16[2] = v10;
          swift_unknownObjectWeakInit();

          v17 = 0;
          swift_beginAccess();
          outlined assign with take of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)v16, v11);
          swift_endAccess();
          goto LABEL_17;
        }
LABEL_12:

LABEL_17:
        *a1 = v15;
        return;
      }
    }
    v14 = 0;
    goto LABEL_15;
  }
  __break(1u);
}

Swift::Void __swiftcall PlatformViewResponderBase.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.globalPosition.getter();
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 4202589;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
}

uint64_t PlatformViewResponderBase.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  ContentResponderHelper.init()();
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_BYTE *)(v0 + 184) = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  type metadata accessor for ViewGraph();
  v1 = MEMORY[0x18D75C5F8]();
  swift_beginAccess();
  MEMORY[0x18D760234](v1 + 200);
  v2 = *(_QWORD *)(v1 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PlatformViewResponderBase.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 152);
  return swift_unknownObjectWeakDestroy();
}

uint64_t PlatformViewResponderBase.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 152);
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PlatformViewResponderBase()
{
  return type metadata accessor for PlatformViewResponderBase();
}

uint64_t destroy for PlatformViewResponderBase.PlatformHitTestResult()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult()
{
  return &type metadata for PlatformViewResponderBase.PlatformHitTestResult;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return String.subscript.getter();
  else
    return 0;
}

uint64_t outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

uint64_t outlined destroy of PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t BorderlessButtonMenuStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_BYTE *)a1 = 2;
  *(_QWORD *)(a1 + 8) = KeyPath;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

void BorderlessButtonMenuStyle.init(showsMenuIndicator:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  char v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v8;
  v12 = *(_BYTE *)(v2 + 32);
  closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)((uint64_t)v11, v4, v5, v6, v7, a2);
  v9 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
  return closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)((uint64_t)v11, v4, v5, v6, v7, a2 + *(int *)(v9 + 52));
}

uint64_t closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[8];
  uint64_t KeyPath;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  _BYTE v48[104];
  _BYTE v49[104];
  _OWORD v50[6];
  __int128 v51;
  __int128 v52;
  char v53;
  _QWORD v54[2];
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[184];
  uint64_t v70;
  char v71;
  _QWORD v72[27];

  v38 = a6;
  v37 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1E0C80A78](v37, v11);
  v36 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UIButton.Configuration();
  v34 = *(_QWORD *)(v13 - 8);
  v35 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v33 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_BYTE *)(a1 + 32);
  outlined copy of AppIntentExecutor?(a2);
  outlined copy of AppIntentExecutor?(a4);
  outlined retain of BorderlessButtonMenuStyle(a1, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_BYTE *)(a1 + 16);
  outlined copy of Environment<Bool>.Content(v19, v20);
  v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  outlined retain of BorderlessButtonMenuStyle(a1, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  v54[0] = a2;
  v54[1] = a3;
  v55 = 0;
  v65 = v18;
  v66 = v21;
  outlined copy of AppIntentExecutor?(a2);
  outlined copy of AppIntentExecutor?(a4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  v67 = a4;
  v68 = a5;
  v39[0] = 0;
  KeyPath = swift_getKeyPath();
  v41 = 0;
  v42 = swift_getKeyPath();
  v43 = 0;
  v44 = swift_getKeyPath();
  v45 = 0;
  v46 = swift_getKeyPath();
  v47 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v39, (uint64_t)v48);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v39);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v48, (uint64_t)v49);
  outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v48);
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v49, (uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  *((_QWORD *)&v51 + 1) = v22;
  LOBYTE(v52) = 0;
  *((_QWORD *)&v52 + 1) = v23;
  v53 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  v61 = v50[5];
  v62 = v51;
  v63 = v52;
  v57 = v50[1];
  v58 = v50[2];
  v59 = v50[3];
  v60 = v50[4];
  v64 = v53;
  v56 = v50[0];
  v24 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v54, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  v69[176] = 0;
  v70 = v24;
  v71 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v69, (uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  v72[25] = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  v25 = v33;
  static UIButton.Configuration.borderless()();
  v27 = v34;
  v26 = v35;
  v28 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v36, v25, v35);
  v29 = v28 + *(int *)(v37 + 20);
  *(_QWORD *)v29 = swift_getKeyPath();
  *(_BYTE *)(v29 + 8) = 0;
  v30 = v38;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v72, v38, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
  outlined init with take of UIKitSystemButtonConfigurationModifier(v28, v30 + *(int *)(v31 + 36));
  (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v26);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

uint64_t closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24[8];
  uint64_t KeyPath;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  _BYTE v33[104];
  _BYTE v34[104];
  _OWORD v35[6];
  __int128 v36;
  __int128 v37;
  char v38;
  _QWORD v39[2];
  __int16 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[184];
  uint64_t v55;
  char v56;
  _BYTE v57[200];
  uint64_t v58;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 32);
  outlined copy of AppIntentExecutor?(a2);
  outlined copy of AppIntentExecutor?(a4);
  outlined retain of BorderlessButtonMenuStyle(a1, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v12, v13);
  v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Bool>.Content(v12, v13);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_BYTE *)(a1 + 16);
  outlined copy of Environment<Bool>.Content(v15, v16);
  LOBYTE(v12) = specialized Environment.wrappedValue.getter(v15, v16);
  outlined consume of Environment<Bool>.Content(v15, v16);
  outlined retain of BorderlessButtonMenuStyle(a1, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  v39[0] = a2;
  v39[1] = a3;
  v40 = 0;
  v50 = v14;
  v51 = v12;
  outlined copy of AppIntentExecutor?(a2);
  outlined copy of AppIntentExecutor?(a4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  v52 = a4;
  v53 = a5;
  v24[0] = 0;
  KeyPath = swift_getKeyPath();
  v26 = 0;
  v27 = swift_getKeyPath();
  v28 = 0;
  v29 = swift_getKeyPath();
  v30 = 0;
  v31 = swift_getKeyPath();
  v32 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v24, (uint64_t)v33);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v24);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v33, (uint64_t)v34);
  outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v33);
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v34, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  *((_QWORD *)&v36 + 1) = v17;
  LOBYTE(v37) = 0;
  *((_QWORD *)&v37 + 1) = v18;
  v38 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  v46 = v35[5];
  v47 = v36;
  v48 = v37;
  v42 = v35[1];
  v43 = v35[2];
  v44 = v35[3];
  v45 = v35[4];
  v49 = v38;
  v41 = v35[0];
  v19 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v39, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  v54[176] = 0;
  v55 = v19;
  v56 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v54, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  v58 = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  v22 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v57, a6, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  *(_QWORD *)(a6 + 208) = v20;
  a6 += 208;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_WORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 32) = v21;
  *(_BYTE *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 48) = v22;
  *(_BYTE *)(a6 + 56) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, Stat;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, Stat)
  {
    type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>)
  {
    type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for UIKitMenuButton();
  }
  return result;
}

void type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, MEMORY[0x1E0CE6010]);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>();
    v2 = v1;
    v3[0] = &protocol witness table for MenuStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier;
  if (!lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonShapesModifier, &unk_1E1AD2220);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitButtonStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
  }
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in BorderlessButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance BorderlessButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v11[2];
  char v12;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v8;
  v12 = *(_BYTE *)(v2 + 32);
  closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)((uint64_t)v11, v4, v5, v6, v7, a2);
  v9 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
  return closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)((uint64_t)v11, v4, v5, v6, v7, a2 + *(int *)(v9 + 52));
}

uint64_t initializeWithCopy for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(v2 + 24);
  LOBYTE(v2) = *(_BYTE *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v2);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for BorderlessButtonMenuStyle()
{
  return &type metadata for BorderlessButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, ()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for UIKitSystemButtonConfigurationModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>();
    v2 = v1;
    v3[0] = &protocol witness table for UIKitMenuButton<A, B>;
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for UIKitButtonStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for ButtonShapesModifier()
{
  return &unk_1E1AD2220;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonShapesModifier()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ButtonShapesModifier.body(content:)@<Q0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  char v9;
  __n128 result;
  uint64_t v11;
  __n128 v12;

  v9 = a4 & 1;
  outlined copy of Environment<Bool>.Content(a3, a4 & 1);
  specialized Environment.wrappedValue.getter(a3, v9);
  outlined consume of Environment<Bool>.Content(a3, v9);
  outlined copy of Environment<Color?>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, a2 & 1);
  outlined consume of Environment<Color?>.Content(a1, a2 & 1);
  static Text.LineStyle.Pattern.solid.getter();
  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1E1AD2220, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
  lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>();
  View.underline(_:pattern:color:)();
  swift_release();
  result = v12;
  *(_QWORD *)a5 = v11;
  *(__n128 *)(a5 + 8) = v12;
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance ButtonShapesModifier@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = ButtonShapesModifier.body(content:)(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1).n128_u64[0];
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1E1AD2220, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t outlined retain of BorderlessButtonMenuStyle(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 32);
  a2(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  a2(v4, v5);
  return a1;
}

uint64_t outlined init with take of UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1E1AD2220, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E0CE6C50], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>);
  }
}

uint64_t static ControlWidgetTemplate._kind.getter()
{
  return static ControlWidgetTemplate._kind.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplate._controlType.getter()
{
  return static ControlWidgetTemplate._controlType.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(a1, a2, a3, a4, a5);
}

{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  int v25;
  uint64_t result;
  Swift::String v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BYTE v43[4];
  int v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  v7 = *a1;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  v10 = a2[2];
  v33 = *(_OWORD *)(a2 + 3);
  v12 = a2[5];
  v11 = a2[6];
  v13 = *((_DWORD *)a2 + 14);
  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v14 = v48;
    v15 = v49;
    v16 = v50;
    v17 = HIDWORD(v50);
    v48 = v8;
    LODWORD(v49) = v9;
    v50 = v10;
    v51 = v33;
    v52 = v12;
    v53 = v11;
    v54 = v13;
    v29 = v17;
    v30 = v7;
    v44 = v7;
    v32 = v15;
    v34 = v14;
    HIDWORD(v37) = HIDWORD(v15);
    v31 = v16;
    v19 = type metadata accessor for ControlWidgetTemplateBodyAccessor(0, a3, a4, v18);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateBodyAccessor<A>, v19);
    BodyAccessor.makeBody(container:inputs:fields:)();
    v20 = v46;
    v28 = v45;
    v21 = v47;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v36 = v8;
    LODWORD(v37) = v49;
    v38 = v10;
    v39 = v51;
    v40 = v12;
    v41 = v11;
    v42 = v54;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 48))(&v45, v43, &v36, AssociatedTypeWitness, AssociatedConformanceWitness);
    v24 = v45;
    v25 = v46;
    if ((v21 & 1) == 0)
    {
      v45 = v28;
      v46 = v20;
      v44 = v30;
      v36 = v34;
      v37 = v32;
      LOBYTE(v38) = v31;
      HIDWORD(v38) = v29;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(_QWORD *)a5 = v24;
    *(_DWORD *)(a5 + 8) = v25;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  char v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  Swift::String v22;
  __int128 v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  _OWORD v35[3];

  if ((AGTypeID.isValueType.getter() & 1) != 0)
  {
    static DynamicPropertyCache.fields(of:)();
    v5 = v33;
    v6 = v34;
    v7 = DWORD1(v34);
    v8 = a2[1];
    v30 = *a2;
    v31 = v8;
    v32[0] = a2[2];
    *(_OWORD *)((char *)v32 + 12) = *(__int128 *)((char *)a2 + 44);
    v29 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>(0, v9, v10, v11);
    lazy protocol witness table accessor for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>(v12, v13, v14, v15);
    BodyAccessor.makeBody(container:inputs:fields:)();
    v16 = *((_QWORD *)&v24 + 1);
    v17 = v24;
    v18 = v25;
    v33 = v30;
    v34 = v31;
    v35[0] = v32[0];
    *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v32 + 12);
    specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(&v24, v27, &v33);
    v19 = v24;
    v20 = DWORD2(v24);
    if ((v18 & 1) == 0)
    {
      v27 = v17;
      v28 = v16;
      v29 = a1;
      v24 = v5;
      v25 = v6;
      v26 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v33);
    result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(_QWORD *)a3 = v19;
    *(_DWORD *)(a3 + 8) = v20;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x726576654ELL;
    v22._object = (void *)0xE500000000000000;
    String.append(_:)(v22);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateBodyAccessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ControlWidgetTemplateBodyAccessor);
}

uint64_t ControlWidgetTemplateBodyAccessor.updateBody(of:changed:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a2 & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, a2);
    v4 = type metadata accessor for ControlWidgetTemplateBodyAccessor(0, v2, v3, v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateBodyAccessor<A>, v4);
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetTemplateBodyAccessor<A>(uint64_t result, uint64_t a2)
{
  return ControlWidgetTemplateBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t static Never._controlType.getter()
{
  return MEMORY[0x1E0DEDCE8];
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance Never@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  __int128 v4;
  __int128 v6[2];
  _OWORD v7[2];

  v3 = *a1;
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(__int128 *)((char *)a2 + 44);
  return specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(v3, v6, a3);
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance EmptyControlWidgetTemplate()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for ControlWidgetTemplate.Body : ControlWidgetTemplate in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ControlWidgetTemplate.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetTemplate._kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static ControlWidgetTemplate._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

ValueMetadata *type metadata accessor for ControlWidgetTemplateBuilder()
{
  return &type metadata for ControlWidgetTemplateBuilder;
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance ControlWidgetTemplateModifier_Content<A>()
{
  specialized PrimitiveControlWidgetTemplate.body.getter();
}

void specialized ControlWidgetTemplate.controlWidgetTemplateBodyError()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveControlWidgetTemplate.body.getter()
{
  specialized ControlWidgetTemplate.controlWidgetTemplateBodyError()();
}

void type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ControlWidgetTemplateBodyAccessor<Never>)
  {
    v4 = type metadata accessor for ControlWidgetTemplateBodyAccessor(0, MEMORY[0x1E0DEDCE8], (uint64_t)&protocol witness table for Never, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetTemplateBodyAccessor<Never>);
  }
}

unint64_t lazy protocol witness table accessor for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>)
  {
    type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ControlWidgetTemplateBodyAccessor<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItems()
{
  return &type metadata for PlatformItems;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent()
{
  return &type metadata for PlatformItem.SelectionContent;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent()
{
  return &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
}

ValueMetadata *type metadata accessor for PlatformItem.AccessibilityContent()
{
  return &type metadata for PlatformItem.AccessibilityContent;
}

ValueMetadata *type metadata accessor for _ViewOutputs.FirstItem()
{
  return &type metadata for _ViewOutputs.FirstItem;
}

uint64_t assignWithTake for PlatformItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  void *v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v5 == (void *)1)
    goto LABEL_4;
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v6;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v7 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v7;
    v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v8;
    v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 24) = v4;

  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v13 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v14 = (_QWORD *)(a1 + 48);
  v15 = (_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 168) >> 1 == 4294967294)
    goto LABEL_8;
  v16 = *(_QWORD *)(a2 + 168);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v22 = *(unsigned __int8 *)(a1 + 56);
    if (v22 != 255)
    {
      v23 = *(unsigned __int8 *)(a2 + 56);
      if (v23 != 255)
      {
        v24 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *v15;
        *(_BYTE *)(a1 + 56) = v23;
        outlined consume of GraphicsImage.Contents(v24, v22);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 48);
    }
    *v14 = *v15;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
    *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
    v25 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v25;
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
    v26 = *(_QWORD *)(a1 + 168);
    *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
    if (v26 >> 1 != 0xFFFFFFFF)
    {
      if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        v28 = *(_QWORD *)(a2 + 176);
        v29 = *(_QWORD *)(a1 + 152);
        v30 = *(_QWORD *)(a1 + 160);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 168) = v16;
        *(_QWORD *)(a1 + 176) = v28;
        outlined consume of AccessibilityImageLabel(v29, v30, v26);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 152);
    }
    v27 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v27;
LABEL_19:
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    swift_release();
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    v31 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);

    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
    *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 48);
LABEL_8:
  v17 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v17;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
  v18 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v18;
  v19 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v19;
  v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 64) = v20;
  v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
LABEL_20:
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_release();
LABEL_21:
  v32 = *(_QWORD *)(a1 + 288);
  if (v32 == 1)
  {
LABEL_24:
    v34 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v34;
    v35 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v35;
    goto LABEL_30;
  }
  v33 = *(_QWORD *)(a2 + 288);
  if (v33 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 240);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  if (v32)
  {
    v36 = a1 + 264;
    if (v33)
      __swift_destroy_boxed_opaque_existential_1(v36);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v36);
  }
  v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
LABEL_30:
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItem()
{
  return &type metadata for PlatformItem;
}

ValueMetadata *type metadata accessor for _ViewInputs.RequestsPlatformItemsKey()
{
  return &type metadata for _ViewInputs.RequestsPlatformItemsKey;
}

ValueMetadata *type metadata accessor for _ViewInputs.PlatformItemFeaturesKey()
{
  return &type metadata for _ViewInputs.PlatformItemFeaturesKey;
}

ValueMetadata *type metadata accessor for _ViewInputs.PlatformItemsFeaturesKey()
{
  return &type metadata for _ViewInputs.PlatformItemsFeaturesKey;
}

ValueMetadata *type metadata accessor for PlatformItemsImageRepresentable()
{
  return &type metadata for PlatformItemsImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemsTextRepresentable()
{
  return &type metadata for PlatformItemsTextRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItems.Key()
{
  return &type metadata for PlatformItems.Key;
}

uint64_t destroy for PlatformItem.PrimaryContent(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 144);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    if (v3 != 255)
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 24), v3);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
  return swift_release();
}

uint64_t initializeWithCopy for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = a1 + 24;
  v8 = (uint64_t *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 144);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
  {
    v13 = *((_OWORD *)v8 + 9);
    *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
    *(_OWORD *)(v7 + 144) = v13;
    *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
    *(_DWORD *)(v7 + 175) = *(_DWORD *)((char *)v8 + 175);
    v14 = *((_OWORD *)v8 + 5);
    *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
    *(_OWORD *)(v7 + 80) = v14;
    v15 = *((_OWORD *)v8 + 7);
    *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
    *(_OWORD *)(v7 + 112) = v15;
    v16 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v16;
    v17 = *((_OWORD *)v8 + 3);
    *(_OWORD *)(v7 + 32) = *((_OWORD *)v8 + 2);
    *(_OWORD *)(v7 + 48) = v17;
  }
  else
  {
    v18 = *(unsigned __int8 *)(a2 + 32);
    if (v18 == 255)
    {
      *(_QWORD *)v7 = *v8;
      *(_BYTE *)(v7 + 8) = *((_BYTE *)v8 + 8);
    }
    else
    {
      v19 = *v8;
      outlined copy of GraphicsImage.Contents((id)*v8, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v19;
      *(_BYTE *)(a1 + 32) = v18;
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    v20 = *(_OWORD *)(a2 + 104);
    *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
    *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
    *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
    *(_OWORD *)(a1 + 104) = v20;
    if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
      v21 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v21;
    }
    else
    {
      v22 = *(_QWORD *)(a2 + 128);
      v23 = *(_QWORD *)(a2 + 136);
      v24 = *(_QWORD *)(a2 + 152);
      outlined copy of AccessibilityImageLabel(v22, v23, v9);
      *(_QWORD *)(a1 + 128) = v22;
      *(_QWORD *)(a1 + 136) = v23;
      *(_QWORD *)(a1 + 144) = v9;
      *(_QWORD *)(a1 + 152) = v24;
    }
    v25 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = v25;
    *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v26 = *(void **)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v26;
    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    swift_unknownObjectRetain();
    swift_retain();
    v27 = v26;
  }
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _OWORD *v13;
  id *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  id v35;
  int v36;
  id v37;
  void *v38;
  char v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  void *v75;
  id v76;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 16);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  v12 = v11;

  v13 = (_OWORD *)(a1 + 24);
  v14 = (id *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 144) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      v16 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(a2 + 40);
      v18 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v18;
      *v13 = v16;
      *(_OWORD *)(a1 + 40) = v17;
      v19 = *(_OWORD *)(a2 + 88);
      v20 = *(_OWORD *)(a2 + 104);
      v21 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v21;
      *(_OWORD *)(a1 + 88) = v19;
      *(_OWORD *)(a1 + 104) = v20;
      v22 = *(_OWORD *)(a2 + 152);
      v23 = *(_OWORD *)(a2 + 168);
      v24 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      *(_OWORD *)(a1 + 168) = v23;
      *(_OWORD *)(a1 + 184) = v24;
      *(_OWORD *)(a1 + 152) = v22;
    }
    else
    {
      v34 = *(unsigned __int8 *)(a2 + 32);
      if (v34 == 255)
      {
        v40 = *v14;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)v13 = v40;
      }
      else
      {
        v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 32));
        *(_QWORD *)(a1 + 24) = v35;
        *(_BYTE *)(a1 + 32) = v34;
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v41 = *(_OWORD *)(a2 + 68);
      *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
      *(_OWORD *)(a1 + 68) = v41;
      v42 = *(_OWORD *)(a2 + 88);
      v43 = *(_OWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v43;
      *(_OWORD *)(a1 + 88) = v42;
      *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
      *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
      *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
      v44 = *(_QWORD *)(a2 + 144);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v45;
      }
      else
      {
        v46 = *(_QWORD *)(a2 + 128);
        v47 = *(_QWORD *)(a2 + 136);
        v48 = *(_QWORD *)(a2 + 152);
        outlined copy of AccessibilityImageLabel(v46, v47, *(_QWORD *)(a2 + 144));
        *(_QWORD *)(a1 + 128) = v46;
        *(_QWORD *)(a1 + 136) = v47;
        *(_QWORD *)(a1 + 144) = v44;
        *(_QWORD *)(a1 + 152) = v48;
      }
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
      v49 = *(_DWORD *)(a2 + 180);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
      *(_DWORD *)(a1 + 180) = v49;
      v50 = *(void **)(a2 + 192);
      *(_QWORD *)(a1 + 192) = v50;
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 24);
    v25 = *(_OWORD *)(a2 + 72);
    v27 = *(_OWORD *)v14;
    v26 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v25;
    *v13 = v27;
    *(_OWORD *)(a1 + 40) = v26;
    v28 = *(_OWORD *)(a2 + 136);
    v30 = *(_OWORD *)(a2 + 88);
    v29 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v28;
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = v29;
    v32 = *(_OWORD *)(a2 + 168);
    v31 = *(_OWORD *)(a2 + 184);
    v33 = *(_OWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
    *(_OWORD *)(a1 + 168) = v32;
    *(_OWORD *)(a1 + 184) = v31;
    *(_OWORD *)(a1 + 152) = v33;
  }
  else
  {
    v36 = *(unsigned __int8 *)(a2 + 32);
    if (*(unsigned __int8 *)(a1 + 32) == 255)
    {
      if (v36 == 255)
      {
        v54 = *v14;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        *(_QWORD *)v13 = v54;
      }
      else
      {
        v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 32));
        *(_QWORD *)(a1 + 24) = v52;
        *(_BYTE *)(a1 + 32) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 24);
      v53 = *(_BYTE *)(a2 + 32);
      *(_QWORD *)v13 = *v14;
      *(_BYTE *)(a1 + 32) = v53;
    }
    else
    {
      v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 32));
      v38 = *(void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v37;
      v39 = *(_BYTE *)(a1 + 32);
      *(_BYTE *)(a1 + 32) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v55 = *(_OWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
    *(_OWORD *)(a1 + 68) = v55;
    v56 = *(_OWORD *)(a2 + 88);
    v57 = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v57;
    *(_OWORD *)(a1 + 88) = v56;
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
    *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
    *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
    v58 = (_OWORD *)(a1 + 128);
    v59 = (_OWORD *)(a2 + 128);
    v60 = *(_QWORD *)(a2 + 144);
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 144) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        v62 = *(_OWORD *)(a2 + 144);
        *v58 = *v59;
        *(_OWORD *)(a1 + 144) = v62;
      }
      else
      {
        v64 = *(_QWORD *)(a2 + 128);
        v65 = *(_QWORD *)(a2 + 136);
        v66 = *(_QWORD *)(a2 + 152);
        outlined copy of AccessibilityImageLabel(v64, v65, *(_QWORD *)(a2 + 144));
        *(_QWORD *)(a1 + 128) = v64;
        *(_QWORD *)(a1 + 136) = v65;
        *(_QWORD *)(a1 + 144) = v60;
        *(_QWORD *)(a1 + 152) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 128);
      v63 = *(_OWORD *)(a2 + 144);
      *v58 = *v59;
      *(_OWORD *)(a1 + 144) = v63;
    }
    else
    {
      v67 = *(_QWORD *)(a2 + 128);
      v68 = *(_QWORD *)(a2 + 136);
      v69 = *(_QWORD *)(a2 + 152);
      outlined copy of AccessibilityImageLabel(v67, v68, *(_QWORD *)(a2 + 144));
      v70 = *(_QWORD *)(a1 + 128);
      v71 = *(_QWORD *)(a1 + 136);
      v72 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 128) = v67;
      *(_QWORD *)(a1 + 136) = v68;
      *(_QWORD *)(a1 + 144) = v60;
      *(_QWORD *)(a1 + 152) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
    v73 = *(_DWORD *)(a2 + 180);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    *(_DWORD *)(a1 + 180) = v73;
    v74 = *(void **)(a1 + 192);
    v75 = *(void **)(a2 + 192);
    *(_QWORD *)(a1 + 192) = v75;
    v76 = v75;

    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
  }
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  void *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v7 = (_QWORD *)(a1 + 24);
  v8 = (_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 144) >> 1 == 4294967294)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 144);
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v15 = *(unsigned __int8 *)(a1 + 32);
    if (v15 != 255)
    {
      v16 = *(unsigned __int8 *)(a2 + 32);
      if (v16 != 255)
      {
        v17 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *v8;
        *(_BYTE *)(a1 + 32) = v16;
        outlined consume of GraphicsImage.Contents(v17, v15);
        goto LABEL_10;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 24);
    }
    *v7 = *v8;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
LABEL_10:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
    v18 = *(_QWORD *)(a1 + 144);
    *(_WORD *)(a1 + 122) = *(_WORD *)(a2 + 122);
    if (v18 >> 1 != 0xFFFFFFFF)
    {
      if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        v20 = *(_QWORD *)(a2 + 152);
        v21 = *(_QWORD *)(a1 + 128);
        v22 = *(_QWORD *)(a1 + 136);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = v9;
        *(_QWORD *)(a1 + 152) = v20;
        outlined consume of AccessibilityImageLabel(v21, v22, v18);
        goto LABEL_15;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 128);
    }
    v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
LABEL_15:
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    swift_release();
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_BYTE *)(a1 + 177) = *(_BYTE *)(a2 + 177);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
    v23 = *(void **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);

    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    goto LABEL_16;
  }
  outlined destroy of Image.Resolved(a1 + 24);
LABEL_4:
  v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
  v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v11;
  v12 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v12;
  v13 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 40) = v13;
  v14 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v14;
LABEL_16:
  *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItem.PrimaryContent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 216))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItem.PrimaryContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 216) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItem.PrimaryContent()
{
  return &type metadata for PlatformItem.PrimaryContent;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(_QWORD *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance AccessibilityPlatformItemTransform(uint64_t *a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(*a1, a1[1], a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityPlatformItemTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(_QWORD *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance LabelIconPlatformItemModifier(uint64_t a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelIconPlatformItemModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(_QWORD *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance PlatformNewDocumentButtonTransform(unsigned int *a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(*a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformNewDocumentButtonTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, _QWORD *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(_QWORD *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr)@<X2>, uint64_t (*a4)(_QWORD *, _OWORD *, uint64_t)@<X6>, _QWORD *a5@<X8>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;

  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  v20 = *(_OWORD *)(a2 + 32);
  v21 = v7;
  v9 = *(_OWORD *)(a2 + 48);
  v22 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v10;
  v15 = v20;
  v16 = v9;
  v17 = *(_OWORD *)(a2 + 64);
  v11 = *a1;
  v23 = *(_DWORD *)(a2 + 80);
  v18 = *(_DWORD *)(a2 + 80);
  v13 = v19[0];
  v14 = v8;
  a3(a5);
  return a4(a5, v19, v11);
}

char *PlatformItems.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v15[42];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return (char *)MEMORY[0x1E0DEE9D8];
  v3 = v1 + 32;
  swift_bridgeObjectRetain();
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    outlined init with copy of PlatformItem(v3, (uint64_t)v15);
    v5 = v15[0];
    swift_bridgeObjectRetain();
    result = (char *)outlined destroy of PlatformItem((uint64_t)v15);
    v7 = *(_QWORD *)(v5 + 16);
    v8 = *((_QWORD *)v4 + 2);
    v9 = v8 + v7;
    if (__OFADD__(v8, v7))
      break;
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
    {
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v8 <= v9)
        v10 = v8 + v7;
      else
        v10 = v8;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v4);
      v4 = result;
      if (*(_QWORD *)(v5 + 16))
      {
LABEL_14:
        v11 = *((_QWORD *)v4 + 2);
        if ((*((_QWORD *)v4 + 3) >> 1) - v11 < v7)
          goto LABEL_23;
        result = (char *)memcpy(&v4[4 * v11 + 32], (const void *)(v5 + 32), 4 * v7);
        if (v7)
        {
          v12 = *((_QWORD *)v4 + 2);
          v13 = __OFADD__(v12, v7);
          v14 = v12 + v7;
          if (v13)
            goto LABEL_24;
          *((_QWORD *)v4 + 2) = v14;
        }
        goto LABEL_4;
      }
    }
    if (v7)
      goto LABEL_22;
LABEL_4:
    swift_bridgeObjectRelease();
    v3 += 336;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t PlatformItems.subscript.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(v2 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 16) = v5;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  *(_QWORD *)(v2 + 16) = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(v5 + 16) > a2)
  {
    outlined assign with copy of PlatformItem(a1, v5 + 336 * a2 + 32);
    return outlined destroy of PlatformItem(a1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PlatformItems(uint64_t a1, unint64_t *a2)
{
  return PlatformItems.subscript.setter(a1, *a2);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(void (**a1)(uint64_t *a1, char a2), unint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*result)(uint64_t *, char);
  unint64_t v6;
  uint64_t v7;

  result = (void (*)(uint64_t *, char))malloc(0x2B0uLL);
  *a1 = result;
  *((_QWORD *)result + 84) = v2;
  v6 = *a2;
  *((_QWORD *)result + 85) = *a2;
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 16);
    if (v6 < *(_QWORD *)(v7 + 16))
    {
      outlined init with copy of PlatformItem(v7 + 336 * v6 + 32, (uint64_t)result);
      return protocol witness for MutableCollection.subscript.modify in conformance PlatformItems;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(uint64_t *a1, char a2)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2[85];
    outlined init with copy of PlatformItem(*a1, (uint64_t)(v2 + 42));
    PlatformItems.subscript.setter((uint64_t)(v2 + 42), v3);
    outlined destroy of PlatformItem((uint64_t)v2);
  }
  else
  {
    PlatformItems.subscript.setter(*a1, v2[85]);
  }
  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PlatformItems(uint64_t a1, char **a2)
{
  char *v2;
  char *v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;

  v3 = *a2;
  v2 = a2[1];
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = *(_QWORD *)(a1 + 32);
  specialized MutableCollection<>.subscript.setter((uint64_t *)v6, v3, v2);
  return outlined release of Slice<PlatformItems>((uint64_t)v6);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(void (***a1)(uint64_t a1, char a2), uint64_t *a2))(_QWORD *a1)
{
  void (**v4)(uint64_t, char);

  v4 = (void (**)(uint64_t, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(uint64_t a1, char a2), uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t *v3;
  void (*result)(uint64_t, char);
  uint64_t v8;
  int v9;
  uint64_t v10;

  result = (void (*)(uint64_t, char))malloc(0x190uLL);
  *a1 = result;
  *((_QWORD *)result + 48) = a3;
  *((_QWORD *)result + 49) = v3;
  *((_QWORD *)result + 47) = a2;
  if (a2 < 0 || (v8 = v3[2], *(_QWORD *)(v8 + 16) < a3))
  {
    __break(1u);
  }
  else
  {
    v9 = *((_DWORD *)v3 + 2);
    v10 = *v3;
    *((_QWORD *)result + 43) = a3;
    *((_QWORD *)result + 44) = v10;
    *((_DWORD *)result + 90) = v9;
    *((_QWORD *)result + 46) = v8;
    *((_QWORD *)result + 42) = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 384);
  v6 = *(char **)(*(_QWORD *)a1 + 336);
  v5 = *(char **)(*(_QWORD *)a1 + 344);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 368);
  v8 = *(char **)(*(_QWORD *)(*(_QWORD *)a1 + 392) + 16);
  v9 = *((_QWORD *)v8 + 2);
  if ((a2 & 1) == 0)
  {
    if (v9 < v4)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v19 = v3[47];
    if (v19 == v4)
      goto LABEL_42;
    v29 = v6 - v5;
    if (v6 == v5)
    {
      __break(1u);
    }
    else if (v19 < v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_25;
      goto LABEL_62;
    }
    __break(1u);
LABEL_62:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
LABEL_25:
    v2 = 0;
    *(_QWORD *)(v3[49] + 16) = v8;
    v20 = v3[47];
    v28 = v5;
    if ((uint64_t)v5 <= (uint64_t)v6)
      v21 = v6;
    else
      v21 = v5;
    v22 = v21 - v6;
    v8 = (char *)(v7 + 336 * (_QWORD)v6 + 32);
    v23 = 336 * v20 + 32;
    while (v22 != v2)
    {
      if (((unint64_t)v6 & 0x8000000000000000) != 0)
        goto LABEL_49;
      if ((unint64_t)&v6[v2] >= *(_QWORD *)(v7 + 16))
        goto LABEL_50;
      v24 = v3[49];
      outlined init with copy of PlatformItem((uint64_t)v8, (uint64_t)v3);
      v5 = *(char **)(v24 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v24 + 16) = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v27 = v3[49];
        v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
        *(_QWORD *)(v27 + 16) = v5;
      }
      if ((unint64_t)(v20 + v2) >= *((_QWORD *)v5 + 2))
        goto LABEL_51;
      v26 = v3[48];
      outlined assign with copy of PlatformItem((uint64_t)v3, (uint64_t)&v5[v23]);
      outlined destroy of PlatformItem((uint64_t)v3);
      if (v20 + v2 + 1 == v26)
        goto LABEL_41;
      ++v2;
      v8 += 336;
      v23 += 336;
      if (!(v29 + v2))
        goto LABEL_53;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v9 < v4)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v10 = v3[47];
  if (v10 == v4)
    goto LABEL_39;
  v29 = v6 - v5;
  if (v6 == v5)
    goto LABEL_57;
  if (v10 >= v4)
    goto LABEL_58;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_59;
  while (1)
  {
    v2 = 0;
    *(_QWORD *)(v3[49] + 16) = v8;
    v11 = v3[47];
    v28 = v5;
    v12 = (uint64_t)v5 <= (uint64_t)v6 ? v6 : v5;
    v13 = v12 - v6;
    v8 = (char *)(v7 + 336 * (_QWORD)v6 + 32);
    v14 = 336 * v11 + 32;
    while (1)
    {
      if (v13 == v2)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (((unint64_t)v6 & 0x8000000000000000) != 0)
        goto LABEL_45;
      if ((unint64_t)&v6[v2] >= *(_QWORD *)(v7 + 16))
        goto LABEL_46;
      v15 = v3[49];
      outlined init with copy of PlatformItem((uint64_t)v8, (uint64_t)v3);
      v5 = *(char **)(v15 + 16);
      v16 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v15 + 16) = v5;
      if ((v16 & 1) == 0)
      {
        v18 = v3[49];
        v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
        *(_QWORD *)(v18 + 16) = v5;
      }
      if ((unint64_t)(v11 + v2) >= *((_QWORD *)v5 + 2))
        goto LABEL_47;
      v17 = v3[48];
      outlined assign with copy of PlatformItem((uint64_t)v3, (uint64_t)&v5[v14]);
      outlined destroy of PlatformItem((uint64_t)v3);
      if (v11 + v2 + 1 == v17)
        break;
      ++v2;
      v8 += 336;
      v14 += 336;
      if (!(v29 + v2))
        goto LABEL_52;
    }
    swift_bridgeObjectRelease();
    v6 += v2 + 1;
    v5 = v28;
LABEL_39:
    if (v6 == v5)
      break;
    __break(1u);
LABEL_41:
    v6 += v2 + 1;
    v5 = v28;
LABEL_42:
    if (v6 == v5)
      break;
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  }
  swift_bridgeObjectRelease();
  free(v3);
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance PlatformItems@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance PlatformItems(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v8[336];
  _BYTE v9[344];

  if (result != a2)
  {
    v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(char **)(v3 + 16);
      v6 = *((_QWORD *)v4 + 2);
      if (v6 > result)
      {
        v2 = a2;
        outlined init with copy of PlatformItem((uint64_t)&v4[336 * result + 32], (uint64_t)v9);
        if (v6 > v2)
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[336 * v2 + 32], (uint64_t)v8);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 16) = v4;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_6;
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
        *(_QWORD *)(v3 + 16) = v4;
LABEL_6:
        if (*((_QWORD *)v4 + 2) <= v5)
        {
          __break(1u);
        }
        else
        {
          outlined assign with copy of PlatformItem((uint64_t)v8, (uint64_t)&v4[336 * v5 + 32]);
          outlined destroy of PlatformItem((uint64_t)v8);
          v5 = *(_QWORD *)(v3 + 16);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 16) = v5;
          if ((result & 1) != 0)
            goto LABEL_8;
        }
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        v5 = result;
        *(_QWORD *)(v3 + 16) = result;
LABEL_8:
        if (*(_QWORD *)(v5 + 16) <= v2)
        {
          __break(1u);
        }
        else
        {
          outlined assign with copy of PlatformItem((uint64_t)v9, v5 + 336 * v2 + 32);
          return outlined destroy of PlatformItem((uint64_t)v9);
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance PlatformItems()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance PlatformItems()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

void protocol witness for Collection.endIndex.getter in conformance PlatformItems(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance PlatformItems(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  uint64_t v2;
  void (*result)(uint64_t *);
  unint64_t v6;
  uint64_t v7;

  result = (void (*)(uint64_t *))malloc(0x150uLL);
  *a1 = result;
  v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 16);
    if (v6 < *(_QWORD *)(v7 + 16))
    {
      outlined init with copy of PlatformItem(v7 + 336 * v6 + 32, (uint64_t)result);
      return protocol witness for Collection.subscript.read in conformance PlatformItems;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance PlatformItems(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of PlatformItem(*a1);
  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance PlatformItems@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = (uint64_t *)v2[2], result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    v5 = *((_DWORD *)v2 + 2);
    v6 = *v2;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 32) = result;
    *(_QWORD *)a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance PlatformItems(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PlatformItems()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance PlatformItems@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PlatformItems@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t result;
  char v7;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *(_QWORD *)v4, *(unsigned int *)(v4 + 8), *(_QWORD *)(v4 + 16));
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance PlatformItems(unint64_t *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  if (*result <= v4 && v3 <= v4)
    return (unint64_t *)(v3 - *result);
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PlatformItems(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PlatformItems()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance PlatformItems()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD *)v0, *(_DWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PlatformItems(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_DWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
}

Swift::Int PlatformItem.ID.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  Swift::UInt32 *v3;
  Swift::UInt32 v4;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt32 *)(a1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PlatformItem.ID()
{
  uint64_t *v0;

  return PlatformItem.ID.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PlatformItem.ID()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt32 *v3;
  Swift::UInt32 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlatformItem.ID()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt32 *v3;
  Swift::UInt32 v4;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlatformItem.ID(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

BOOL PlatformItem.hasContent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];
  _BYTE v8[216];
  _BYTE v9[240];
  _BYTE v10[80];
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13[3];
  uint64_t v14;

  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1)
    return 0;
  v2 = *(_QWORD *)(v0 + 8);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
    {
      if ((v2 & 8) == 0)
      {
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
        outlined retain of PlatformItem.PrimaryContent((uint64_t)v9);
        v1 = 1;
        goto LABEL_22;
      }
      outlined init with copy of PlatformItem(v0, (uint64_t)v9);
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  v1 = (v2 & 2) == 0 && v13[0] != 0;
  if ((v2 & 2) != 0 && v13[0])
LABEL_15:
    v1 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v14) == 0;
  if ((v2 & 8) == 0)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined retain of PlatformItem.PrimaryContent((uint64_t)v9);
    goto LABEL_22;
  }
  outlined init with copy of PlatformItem(v0, (uint64_t)v9);
  if ((v1 & 1) == 0)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined retain of PlatformItem.PrimaryContent((uint64_t)v8);
    outlined destroy of PlatformItem((uint64_t)v9);
    v1 = 0;
    goto LABEL_22;
  }
LABEL_21:
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)v7, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined retain of PlatformItem.PrimaryContent((uint64_t)v8);
  outlined destroy of PlatformItem((uint64_t)v9);
  v1 = v7[6] != 1;
  outlined destroy of AccessibilityValueStorage?((uint64_t)v7, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
LABEL_22:
  v4 = *(_QWORD *)(v0 + 8);
  if ((v4 & 0x10) != 0)
  {
    if (v13[1])
      v1 = v1;
    else
      v1 = 0;
    if ((v4 & 0x20) == 0)
    {
LABEL_24:
      if ((v4 & 0x40) == 0)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_24;
  }
  if (v13[2])
    v1 = v1;
  else
    v1 = 0;
  if ((v4 & 0x40) == 0)
    goto LABEL_26;
LABEL_25:
  outlined init with copy of PlatformItem(v0, (uint64_t)v9);
  v1 = v1 & (v10[72] ^ 1);
  outlined destroy of PlatformItem((uint64_t)v9);
LABEL_26:
  outlined release of PlatformItem.PrimaryContent?((uint64_t)v12);
  if ((*(_BYTE *)(v0 + 8) & 0x80) != 0)
  {
    outlined init with copy of PlatformItem(v0, (uint64_t)v9);
    if ((_DWORD)v1)
    {
      v5 = v11;
      swift_bridgeObjectRetain();
      outlined destroy of PlatformItem((uint64_t)v9);
      swift_bridgeObjectRelease();
      return v5 != 0;
    }
    else
    {
      outlined destroy of PlatformItem((uint64_t)v9);
    }
  }
  return v1;
}

uint64_t PlatformItem.merge(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int Attribute;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[13];
  uint64_t v18;
  _OWORD v19[13];
  uint64_t v20;
  _OWORD v21[3];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[216];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v2 = v1;
  v4 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(unsigned int *)(v1 + 16);
  if ((_DWORD)v6 != -1 && v5 != 0)
  {
    if ((_DWORD)v6)
      v8 = v5 == -1;
    else
      v8 = 1;
    if (!v8)
      v5 = merge32(_:_:)(v6, v5);
    *(_DWORD *)(v1 + 16) = v5;
  }
  outlined init with take of PlatformItem.PrimaryContent?(a1 + 24, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v27, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v28) != 1)
  {
    outlined init with take of PlatformItem.PrimaryContent?(v1 + 24, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v21, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v23) == 1)
    {
      v17[10] = v38;
      v17[11] = v39;
      v17[12] = v40;
      v18 = v41;
      v17[6] = v34;
      v17[7] = v35;
      v17[8] = v36;
      v17[9] = v37;
      v17[2] = v30;
      v17[3] = v31;
      v17[4] = v32;
      v17[5] = v33;
      v17[0] = v28;
      v17[1] = v29;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v17);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v17, v1 + 24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v27, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
      outlined retain of PlatformItem.PrimaryContent((uint64_t)v19);
    }
    else
    {
      v19[10] = v38;
      v19[11] = v39;
      v19[12] = v40;
      v20 = v41;
      v19[6] = v34;
      v19[7] = v35;
      v19[8] = v36;
      v19[9] = v37;
      v19[2] = v30;
      v19[3] = v31;
      v19[4] = v32;
      v19[5] = v33;
      v19[0] = v28;
      v19[1] = v29;
      PlatformItem.PrimaryContent.merge(_:features:)((uint64_t)v19, *(_QWORD *)(v1 + 8));
    }
  }
  outlined init with copy of AccessibilityValueStorage?(a1 + 240, (uint64_t)v21, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  if ((_QWORD)v22 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v21, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
    if ((*(_BYTE *)(a1 + 312) & 1) != 0)
      goto LABEL_28;
LABEL_23:
    v13 = *(_QWORD *)(a1 + 304);
    if ((*(_BYTE *)(v2 + 312) & 1) != 0)
    {
      *(_QWORD *)(v2 + 304) = v13;
      *(_BYTE *)(v2 + 312) = 0;
    }
    else
    {
      Attribute = AGWeakAttributeGetAttribute();
      if (Attribute == *MEMORY[0x1E0CFED28] && AGWeakAttributeGetAttribute() != Attribute)
        *(_QWORD *)(v2 + 304) = v13;
    }
    goto LABEL_28;
  }
  v23 = v21[0];
  v24 = v21[1];
  v25 = v21[2];
  v26 = v22;
  outlined init with copy of AccessibilityValueStorage?(v1 + 240, (uint64_t)v21, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  v9 = v22;
  result = outlined destroy of AccessibilityValueStorage?((uint64_t)v21, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  if (v9 == 1)
  {
    outlined destroy of AccessibilityValueStorage?(v1 + 240, &lazy cache variable for type metadata for PlatformItem.SelectionContent?);
    v11 = v24;
    *(_OWORD *)(v1 + 240) = v23;
    *(_OWORD *)(v1 + 256) = v11;
    v12 = v26;
    *(_OWORD *)(v1 + 272) = v25;
    *(_OWORD *)(v1 + 288) = v12;
    if ((*(_BYTE *)(a1 + 312) & 1) == 0)
      goto LABEL_23;
  }
  else
  {
    if (*(_QWORD *)(v1 + 288) == 1)
    {
      __break(1u);
      return result;
    }
    PlatformItem.SelectionContent.merge(_:)((int *)&v23);
    outlined destroy of PlatformItem.SelectionContent((uint64_t)&v23);
    if ((*(_BYTE *)(a1 + 312) & 1) == 0)
      goto LABEL_23;
  }
LABEL_28:
  result = *(_QWORD *)(a1 + 320);
  if (result)
  {
    v15 = *(_QWORD *)(v2 + 320);
    if (v15)
    {
      *(_QWORD *)&v21[0] = *(_QWORD *)(a1 + 320);
      *(_QWORD *)&v23 = v15;
      result = AccessibilityProperties.merge(with:)((uint64_t *)v21);
      *(_QWORD *)(v2 + 320) = v23;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(v2 + 320) = result;
      *(_QWORD *)(v2 + 328) = v16;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

id PlatformItem.PrimaryContent.merge(_:features:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v4;
  void *v5;
  _QWORD *v6;
  id v7;
  id v8;
  id result;
  id v10;
  _BYTE v11[184];
  _BYTE v12[184];
  _BYTE v13[184];
  _BYTE v14[184];
  _BYTE v15[184];

  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v10 = *(id *)(a1 + 16);
  outlined init with take of PlatformItem.PrimaryContent?(a1 + 24, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  if (v4)
  {
    v6 = v2;
    if (!*v2 || (v6 = v2 + 1, !v2[1]) && (a2 & 0x10) != 0)
    {
      *v6 = v4;
      v7 = v4;
    }
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)(v2 + 3), (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v14) == 1)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v12) != 1)
    {
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)(v2 + 3), (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
      outlined retain of Image.Resolved((uint64_t)v11);
    }
  }
  if (!v2[1] && v5)
  {
    v2[1] = v5;
    v8 = v5;
  }
  result = v10;
  if (!v2[2])
  {
    if (v10)
    {
      v2[2] = v10;
      return v10;
    }
  }
  return result;
}

uint64_t PlatformItem.SelectionContent.merge(_:)(int *a1)
{
  uint64_t v1;
  int Attribute;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[24];
  uint64_t v13;

  Attribute = AGWeakAttributeGetAttribute();
  v4 = *MEMORY[0x1E0CFED28];
  if (Attribute == *MEMORY[0x1E0CFED28])
  {
    v5 = *a1;
    v6 = a1[1];
    if (AGWeakAttributeGetAttribute() != Attribute)
    {
      *(_DWORD *)v1 = v5;
      *(_DWORD *)(v1 + 4) = v6;
    }
  }
  if (AGWeakAttributeGetAttribute() == v4)
  {
    v7 = a1[2];
    v8 = a1[3];
    if (AGWeakAttributeGetAttribute() != v4)
    {
      *(_DWORD *)(v1 + 8) = v7;
      *(_DWORD *)(v1 + 12) = v8;
    }
  }
  if (!*(_QWORD *)(v1 + 16))
    *(_QWORD *)(v1 + 16) = *((_QWORD *)a1 + 2);
  v9 = v1 + 24;
  outlined init with copy of AccessibilityValueStorage?(v9, (uint64_t)v12, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?);
  v10 = v13;
  result = outlined destroy of AccessibilityValueStorage?((uint64_t)v12, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?);
  if (!v10)
    return outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)(a1 + 6), v9);
  return result;
}

void (**closure #1 in closure #1 in PlatformItem.SelectionContent.select()@<X0>(char *a1@<X8>))(uint64_t)
{
  void (**result)(uint64_t);
  void (*v3)(uint64_t);
  uint64_t v4;
  char v5;

  type metadata accessor for (())?(0);
  result = (void (**)(uint64_t))AGGraphGetWeakValue();
  if (result && (v3 = *result) != 0)
  {
    v4 = swift_retain();
    v3(v4);
    result = (void (**)(uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v3);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  *a1 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *WeakValue;
  uint64_t v3;
  uint64_t v4;

  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
  {
    if (one-time initialization token for configuredForPlatform != -1)
      swift_once();
    WeakValue = &static EnvironmentValues.configuredForPlatform;
  }
  v4 = *WeakValue;
  v3 = WeakValue[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t PlatformItemsTransform.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Value;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;

  v3 = v2;
  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v8 + 24);
  if (*MEMORY[0x1E0CFED28] == *(_DWORD *)(v3 + 4))
  {
    v22 = 0;
    v18 = 0;
    v21 = 0;
    v23 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Value = AGGraphGetValue();
    v12 = v11;
    v13 = v4;
    v14 = v9;
    v15 = v6;
    v16 = v7;
    v17 = *(_QWORD *)Value;
    LODWORD(v18) = *(_DWORD *)(Value + 8);
    v19 = swift_bridgeObjectRetain();
    if (v19)
      v20 = v12 & 1;
    else
      v20 = 0;
    if (v19)
      v18 = v18;
    else
      v18 = 0;
    if (v19)
      v21 = v17;
    else
      v21 = 0;
    v7 = v16;
    v6 = v15;
    v9 = v14;
    v4 = v13;
    v22 = v20;
    if (v19)
      v23 = v19;
    else
      v23 = MEMORY[0x1E0DEE9D8];
  }
  v41 = v21;
  v42 = v18;
  v43 = (char *)v23;
  v24 = AGGraphGetValue();
  v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v6, v24, v4);
  if (!AGGraphGetOutputValue() || (v26 & 1) != 0 || v22)
  {
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(v9 + 24))(v6, &v41, v4, v9);
    v27 = v7 + 1;
    *(_DWORD *)(v3 + 8) = v7 + 1;
    if ((_DWORD)v18 != -1 && v7 != -1)
    {
      if ((_DWORD)v18 && v7 != -2)
        v27 = merge32(_:_:)(v18, v27);
      v42 = v27;
    }
    v28 = v43;
    v29 = *((_QWORD *)v43 + 2);
    if (v29)
    {
      v30 = 0;
      v31 = 32;
      do
      {
        v32 = v43;
        if (v30 >= *((_QWORD *)v43 + 2))
        {
          __break(1u);
LABEL_43:
          __break(1u);
        }
        v33 = *(unsigned int *)(v3 + 8);
        outlined init with copy of PlatformItem((uint64_t)&v43[v31], (uint64_t)&v44);
        if ((_DWORD)v46 != -1 && (_DWORD)v33 != 0)
        {
          if ((_DWORD)v46 && (_DWORD)v33 != -1)
          {
            v35 = (v33 | ((unint64_t)v46 << 32)) + ~(v33 << 32);
            v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
            v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
            LODWORD(v33) = ((v37 + ~(v37 << 27)) >> 31) ^ (v37 + ~((_DWORD)v37 << 27));
          }
          LODWORD(v46) = v33;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
          v43 = v32;
        }
        if (v30 >= *((_QWORD *)v32 + 2))
          goto LABEL_43;
        ++v30;
        outlined assign with copy of PlatformItem((uint64_t)&v44, (uint64_t)&v32[v31]);
        outlined destroy of PlatformItem((uint64_t)&v44);
        v31 += 336;
      }
      while (v29 != v30);
      v28 = v43;
    }
    v44 = v41;
    v45 = v42;
    v46 = v28;
    AGGraphSetOutputValue();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PlatformItems.Key@<X0>(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = dword_1EDDD4C00;
  v3 = qword_1EDDD4C08;
  *(_QWORD *)a1 = static PlatformItems.Key.defaultValue;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _ViewInputs.RequestsPlatformItemsKey()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ViewInputs.RequestsPlatformItemsKey()
{
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in _ViewInputs.RequestsPlatformItemsKey()
{
  return &protocol witness table for _ViewInputs.RequestsPlatformItemsKey;
}

uint64_t _ViewOutputs.FirstItem.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[216];

  v2 = *(_QWORD *)(AGGraphGetValue() + 16);
  if (*(_QWORD *)(v2 + 16))
    return outlined init with copy of PlatformItem(v2 + 32, a1);
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v4);
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = xmmword_187BFE310;
  *(_QWORD *)a1 = &outlined read-only object #0 of _ViewOutputs.FirstItem.value.getter;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, a1 + 24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewOutputs.FirstItem@<X0>(uint64_t a1@<X8>)
{
  return _ViewOutputs.FirstItem.value.getter(a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformItems()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<PlatformItems>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

unint64_t lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems, &type metadata for PlatformItems);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems, &type metadata for PlatformItems);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems, &type metadata for PlatformItems);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems, &type metadata for PlatformItems);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems, &type metadata for PlatformItems);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PlatformItems()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<PlatformItems>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItems>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<PlatformItems>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems();
    v7 = a3(a1, &type metadata for PlatformItems, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems, MEMORY[0x1E0DEDE30]);
}

uint64_t lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItems>(255, &lazy cache variable for type metadata for Slice<PlatformItems>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems, MEMORY[0x1E0DEDE40]);
}

uint64_t static PlatformItemsTextRepresentable.representationOptions(inputs:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a1 = (v3 << 61 >> 63) & 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemsTextRepresentable.PlatformItemContent()
{
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformTextRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemsTextRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemsTextRepresentable()
{
  return specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemsImageRepresentable.PlatformItemContent()
{
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemsImageRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 1) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemsImageRepresentable()
{
  return specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)();
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_BYTE *);
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  char v13;
  _BYTE v14[344];

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  if (v3)
  {
    v4 = v1;
    v5 = (uint64_t (*)(_BYTE *))result;
    v6 = 0;
    v7 = -304;
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 16);
      if ((unint64_t)v6 >= *(_QWORD *)(v8 + 16))
        break;
      outlined init with copy of PlatformItem(v8 + 336 * v6 + 32, (uint64_t)v14);
      v9 = v5(v14);
      result = outlined destroy of PlatformItem((uint64_t)v14);
      if (v2)
        return v6;
      if ((v9 & 1) != 0)
      {
        if (v6 >= v3 - 1)
          return v6;
        v10 = v7;
        for (i = v7 + 336 * v3--; ; i -= 336)
        {
          v12 = *(_QWORD *)(v4 + 16);
          if (v3 >= *(_QWORD *)(v12 + 16))
            break;
          outlined init with copy of PlatformItem(v12 + i, (uint64_t)v14);
          v13 = v5(v14);
          result = outlined destroy of PlatformItem((uint64_t)v14);
          if ((v13 & 1) == 0)
          {
            result = specialized MutableCollection.swapAt(_:_:)(v6, v3);
            v7 = v10;
            goto LABEL_5;
          }
          if (v6 >= --v3)
            return v6;
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v6 >= v3)
        return v6;
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  a2();
  a3();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t specialized static PlatformItems.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v14;
  _BYTE v15[336];
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    a2(&v16);
    v9 = v17;
    v10 = v18;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11 != -1 && v17 != 0)
    {
      if ((_DWORD)v11)
      {
        if (v17 != -1)
          v9 = merge32(_:_:)(v11, v17);
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    return specialized Array.append<A>(contentsOf:)(v10);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (!*(_QWORD *)(v4 + 16))
    {
      a2(&v16);
      result = swift_bridgeObjectRelease();
      v13 = v17;
      v14 = v18;
      *(_QWORD *)a1 = v16;
      *(_DWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = v14;
      return result;
    }
    outlined init with copy of PlatformItem(v4 + 32, (uint64_t)&v16);
    v5 = PlatformItem.hasContent.getter();
    result = outlined destroy of PlatformItem((uint64_t)&v16);
    if (!v5)
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t))a2)(&v16, result);
      v7 = v18;
      if (*(_QWORD *)(v18 + 16))
      {
        outlined init with copy of PlatformItem(v18 + 32, (uint64_t)&v16);
        swift_bridgeObjectRelease();
        v8 = *(_QWORD *)(a1 + 16);
        if (*(_QWORD *)(v8 + 16))
        {
          outlined init with copy of PlatformItem(v8 + 32, (uint64_t)v15);
          PlatformItem.merge(_:)((uint64_t)&v16);
          outlined destroy of PlatformItem((uint64_t)&v16);
          v7 = *(_QWORD *)(a1 + 16);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(a1 + 16) = v7;
          if ((result & 1) != 0)
          {
            if (*(_QWORD *)(v7 + 16))
            {
LABEL_8:
              outlined assign with copy of PlatformItem((uint64_t)v15, v7 + 32);
              return outlined destroy of PlatformItem((uint64_t)v15);
            }
            goto LABEL_23;
          }
        }
        else
        {
          __break(1u);
        }
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        v7 = result;
        *(_QWORD *)(a1 + 16) = result;
        if (*(_QWORD *)(result + 16))
          goto LABEL_8;
LABEL_23:
        __break(1u);
        return result;
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t outlined retain of PlatformItem.PrimaryContent(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(void **)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 104);
  v18 = *(_OWORD *)(a1 + 88);
  v15 = *(_OWORD *)(a1 + 136);
  v16 = *(_OWORD *)(a1 + 120);
  v13 = *(_OWORD *)(a1 + 168);
  v14 = *(_OWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(void **)(a1 + 192);
  v9 = *(id *)(a1 + 16);
  v10 = v2;
  v11 = v3;
  outlined copy of Image.Resolved?(v23, v22, v21, v20, v19, v4, v5, v6, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((unint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v7,
    v8);
  swift_retain();
  return a1;
}

uint64_t outlined release of PlatformItem.PrimaryContent?(uint64_t a1)
{
  outlined consume of PlatformItem.PrimaryContent?(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(void **)(a1 + 192));
  return a1;
}

void *outlined consume of PlatformItem.PrimaryContent?(void *result, void *a2, void *a3, void *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (result != (void *)1)
  {

    outlined consume of Image.Resolved?(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
      a23,
      a24,
      a25);
    return (void *)swift_release();
  }
  return result;
}

uint64_t *specialized MutableCollection<>.subscript.setter(uint64_t *result, char *a2, char *a3)
{
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  _BYTE v16[344];

  if (((unint64_t)a2 & 0x8000000000000000) != 0
    || (v6 = a3, v5 = *(char **)(v4 + 16), *((_QWORD *)v5 + 2) < (uint64_t)a3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3 = a2;
  v7 = *result;
  v8 = result[1];
  if (a2 == a3)
    goto LABEL_20;
  v15 = v7 - v8;
  if (v7 == v8)
    goto LABEL_29;
  if ((uint64_t)a2 >= (uint64_t)a3)
    goto LABEL_30;
  v9 = result[4];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_31;
  while (1)
  {
    v10 = 0;
    *(_QWORD *)(v4 + 16) = v5;
    v11 = *(_QWORD *)(v9 + 16);
    if (v11 <= v7)
      v11 = v7;
    v12 = (char *)(v11 - v7);
    v5 = (char *)(v9 + 336 * v7 + 32);
    v13 = &v6[~(unint64_t)v3];
    v9 = 336 * (_QWORD)v3 + 32;
    while (1)
    {
      if ((uint64_t)&v10[v7] >= v8)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v7 < 0)
        goto LABEL_23;
      if (v12 == v10)
        goto LABEL_24;
      outlined init with copy of PlatformItem((uint64_t)v5, (uint64_t)v16);
      v6 = *(char **)(v4 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v4 + 16) = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        *(_QWORD *)(v4 + 16) = v6;
      }
      if (&v10[(_QWORD)v3] >= (char *)*((_QWORD *)v6 + 2))
        goto LABEL_25;
      outlined assign with copy of PlatformItem((uint64_t)v16, (uint64_t)&v6[v9]);
      result = (uint64_t *)outlined destroy of PlatformItem((uint64_t)v16);
      if (v13 == v10)
        break;
      ++v10;
      v5 += 336;
      v9 += 336;
      if (!&v10[v15])
        goto LABEL_26;
    }
    v7 += (uint64_t)(v10 + 1);
LABEL_20:
    if (v7 == v8)
      return result;
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
}

uint64_t partial apply for specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)()
{
  uint64_t v0;

  return specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(*(_QWORD *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(*(_QWORD *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTextRepresentable.PlatformItemContent, &unk_1E1AFD610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTextRepresentable.PlatformItemContent, &unk_1E1AFD610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsTextRepresentable.PlatformItemContent, &unk_1E1AFD610);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

uint64_t specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  uint64_t result;
  uint64_t v1;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.viewPhase.getter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) != 0)
  {
    MEMORY[0x1E0C80A78](result, v1);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsImageRepresentable.PlatformItemContent, &unk_1E1AFF5F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsImageRepresentable.PlatformItemContent, &unk_1E1AFF5F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemsImageRepresentable.PlatformItemContent, &unk_1E1AFF5F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

uint64_t outlined release of Slice<PlatformItems>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for PlatformItemsImageRepresentable.PlatformItemContent()
{
  return &unk_1E1AFF5F8;
}

uint64_t getEnumTagSinglePayload for PlatformItemsTextRepresentable.PlatformItemContent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlatformItemsTextRepresentable.PlatformItemContent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 44) = v3;
  return result;
}

void *type metadata accessor for PlatformItemsTextRepresentable.PlatformItemContent()
{
  return &unk_1E1AFD610;
}

uint64_t type metadata accessor for PlatformItemsTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformItemsTransform);
}

ValueMetadata *type metadata accessor for PlatformItem.ChildrenContent()
{
  return &type metadata for PlatformItem.ChildrenContent;
}

ValueMetadata *type metadata accessor for PlatformItem.Features()
{
  return &type metadata for PlatformItem.Features;
}

ValueMetadata *type metadata accessor for PlatformItem.ID()
{
  return &type metadata for PlatformItem.ID;
}

ValueMetadata *type metadata accessor for PlatformItems.Features()
{
  return &type metadata for PlatformItems.Features;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent.Options()
{
  return &type metadata for PlatformItem.SelectionContent.Options;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.SelectionContent.Options, &type metadata for PlatformItem.SelectionContent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.SelectionContent.Options, &type metadata for PlatformItem.SelectionContent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.SelectionContent.Options, &type metadata for PlatformItem.SelectionContent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.SelectionContent.Options, &type metadata for PlatformItem.SelectionContent.Options);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItems.Features and conformance PlatformItems.Features()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems.Features, &type metadata for PlatformItems.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems.Features, &type metadata for PlatformItems.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems.Features, &type metadata for PlatformItems.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItems.Features, &type metadata for PlatformItems.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.ID and conformance PlatformItem.ID()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID;
  if (!lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.ID, &type metadata for PlatformItem.ID);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.Features and conformance PlatformItem.Features()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.Features, &type metadata for PlatformItem.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.Features, &type metadata for PlatformItem.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.Features, &type metadata for PlatformItem.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItem.Features, &type metadata for PlatformItem.Features);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

void base witness table accessor for _AttributeBody in PlatformItemsTransform<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

unint64_t instantiation function for generic protocol witness table for PlatformItemsTextRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PlatformItemsImageRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemRuleConfiguration()
{
  return &type metadata for PlatformItemRuleConfiguration;
}

uint64_t EnvironmentValues.dialogSeverity.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

BOOL static DialogSeverity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static DialogSeverity.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static DialogSeverity.critical.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static DialogSeverity.informational.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t View.dialogSeverity(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.dialogSeverity : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_187835D54()
{
  return EnvironmentValues.dialogSeverity.setter();
}

uint64_t EnvironmentValues.dialogSeverity.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void Scene.dialogSeverity(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for DialogSeverity()
{
  return &type metadata for DialogSeverity;
}

uint64_t sub_187835E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<DialogSeverity>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<DialogSeverity>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DialogSeverity>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSeverity>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSeverity>);
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.DialogSeverityKey()
{
  return &type metadata for EnvironmentValues.DialogSeverityKey;
}

uint64_t AccessibilityNotificationAction.announcement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v6 = v5;
  v33 = a2;
  v34 = a4;
  v30 = a3;
  v31 = a5;
  v32 = a1;
  v7 = type metadata accessor for TimeZone();
  v28 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for configuredForPlatform != -1)
    swift_once();
  v40 = static EnvironmentValues.configuredForPlatform;
  v41 = unk_1ECE20280;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v6, v16);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  v21 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v6 + v21[5], v11);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v10, v6 + v21[6], v29);
  EnvironmentValues.timeZone.setter();
  v22 = v6 + v21[7];
  v23 = *(_QWORD *)(v22 + 8);
  v24 = *(_BYTE *)(v22 + 16);
  v25 = *(_BYTE *)(v22 + 17);
  LOWORD(v35) = *(_WORD *)v22;
  v36 = v23;
  v37 = v24;
  v38 = v25;
  v39 = *(_OWORD *)(v22 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  v35 = v40;
  v36 = v41;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for AccessibilityNotificationAction()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AccessibilityNotificationAction;
  if (!type metadata singleton initialization cache for AccessibilityNotificationAction)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)()
{
  if (!static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)())
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    JUMPOUT(0x18D754CA8);
  }
  return AccessibilityNotification.Announcement.init(_:)();
}

uint64_t AccessibilityNotificationAction.announcement(_:)@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  LODWORD(v33) = a1;
  v36 = a2;
  v4 = type metadata accessor for TimeZone();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Calendar();
  v8 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = Text.init(_:tableName:bundle:comment:)();
  v30 = v18;
  v31 = v17;
  v20 = v19;
  v33 = v21;
  if (one-time initialization token for configuredForPlatform != -1)
    swift_once();
  v42 = static EnvironmentValues.configuredForPlatform;
  v43 = unk_1ECE20280;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3, v12);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  v22 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + v22[5], v32);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v7, v3 + v22[6], v35);
  EnvironmentValues.timeZone.setter();
  v23 = v3 + v22[7];
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_BYTE *)(v23 + 16);
  v26 = *(_BYTE *)(v23 + 17);
  LOWORD(v37) = *(_WORD *)v23;
  v38 = v24;
  v39 = v25;
  v40 = v26;
  v41 = *(_OWORD *)(v23 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  v37 = v42;
  v38 = v43;
  v28 = v30;
  v27 = v31;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  outlined consume of Text.Storage(v27, v28, v20 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AccessibilityNotificationAction.announcement<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v43 = a3;
  v7 = type metadata accessor for TimeZone();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Calendar();
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v21);
  v38 = Text.init<A>(_:)();
  v39 = v24;
  v26 = v25;
  v28 = v27;
  if (one-time initialization token for configuredForPlatform != -1)
    swift_once();
  v49 = static EnvironmentValues.configuredForPlatform;
  v50 = unk_1ECE20280;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v4, v14);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  v29 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v13, v4 + v29[5], v40);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v10, v4 + v29[6], v42);
  EnvironmentValues.timeZone.setter();
  v30 = v4 + v29[7];
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(_BYTE *)(v30 + 16);
  v33 = *(_BYTE *)(v30 + 17);
  LOWORD(v44) = *(_WORD *)v30;
  v45 = v31;
  v46 = v32;
  v47 = v33;
  v48 = *(_OWORD *)(v30 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  v44 = v49;
  v45 = v50;
  v34 = v38;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  outlined consume of Text.Storage(v34, v26, v28 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.accessibilityNotification.getter()
{
  lazy protocol witness table accessor for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey();
  return EnvironmentValues.subscript.getter();
}

double static AccessibilityNotificationActionKey.value(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  char v8;
  char v9;
  __int128 v10;

  v3 = *a1;
  v4 = a1[1];
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.getter();
  v5 = type metadata accessor for AccessibilityNotificationAction();
  EnvironmentValues.calendar.getter();
  EnvironmentValues.timeZone.getter();
  AccessibilitySpeechAttributes.init(in:)();
  v6 = a2 + *(int *)(v5 + 28);
  *(_WORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = v8;
  *(_BYTE *)(v6 + 17) = v9;
  result = *(double *)&v10;
  *(_OWORD *)(v6 + 24) = v10;
  return result;
}

BOOL specialized static AccessibilitySpeechAttributes.== infix(_:_:)(double *a1, double *a2)
{
  int v4;
  int v5;
  double v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  double v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  char v21;
  char v22;

  v4 = *(unsigned __int8 *)a1;
  v5 = *((unsigned __int8 *)a1 + 1);
  v6 = a1[1];
  v7 = *((_BYTE *)a1 + 16);
  v8 = *((unsigned __int8 *)a1 + 17);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 4);
  v11 = *(unsigned __int8 *)a2;
  v12 = *((unsigned __int8 *)a2 + 1);
  v13 = a2[1];
  v14 = *((unsigned __int8 *)a2 + 16);
  v15 = *((unsigned __int8 *)a2 + 17);
  v16 = *((_QWORD *)a2 + 3);
  v17 = *((_QWORD *)a2 + 4);
  if (v4 == 2)
  {
    if (v11 != 2)
      return 0;
  }
  else
  {
    v18 = 0;
    v19 = (v4 & 1) == 0;
    if (v11 == 2 || ((v19 ^ v11) & 1) == 0)
      return v18;
  }
  if (v5 == 2)
  {
    if (v12 != 2)
      return 0;
  }
  else
  {
    v18 = 0;
    v20 = (v5 & 1) == 0;
    if (v12 == 2 || ((v20 ^ v12) & 1) == 0)
      return v18;
  }
  if ((v7 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (v6 == v13)
      v21 = v14;
    else
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  if (v8 == 3)
  {
    if (v15 != 3)
      return 0;
  }
  else
  {
    v18 = 0;
    if (v15 == 3 || v8 != v15)
      return v18;
  }
  if (!v10)
    return !v17;
  if (!v17)
    return 0;
  if (v9 == v16 && v10 == v17)
    return 1;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v18 = 0;
  if ((v22 & 1) != 0)
    return 1;
  return v18;
}

BOOL specialized static AccessibilityNotificationAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  double v6;
  char v7;
  char v8;
  uint64_t v9;
  double v10;
  char v11;
  char v12;
  double v15[2];
  char v16;
  char v17;
  __int128 v18;
  double v19[2];
  char v20;
  char v21;
  __int128 v22;

  if ((MEMORY[0x18D754A20]() & 1) != 0
    && (v4 = (int *)type metadata accessor for AccessibilityNotificationAction(),
        (MEMORY[0x18D754A8C](a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (MEMORY[0x18D754B64](a1 + v4[6], a2 + v4[6]) & 1) != 0)
  {
    v5 = a1 + v4[7];
    v6 = *(double *)(v5 + 8);
    v7 = *(_BYTE *)(v5 + 16);
    v8 = *(_BYTE *)(v5 + 17);
    LOWORD(v19[0]) = *(_WORD *)v5;
    v19[1] = v6;
    v20 = v7;
    v21 = v8;
    v22 = *(_OWORD *)(v5 + 24);
    v9 = a2 + v4[7];
    v10 = *(double *)(v9 + 8);
    v11 = *(_BYTE *)(v9 + 16);
    v12 = *(_BYTE *)(v9 + 17);
    LOWORD(v15[0]) = *(_WORD *)v9;
    v15[1] = v10;
    v16 = v11;
    v17 = v12;
    v18 = *(_OWORD *)(v9 + 24);
    return specialized static AccessibilitySpeechAttributes.== infix(_:_:)(v19, v15);
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey;
  if (!lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNotificationActionKey, &unk_1E1B03E80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityNotificationAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_WORD *)v17 = *(_WORD *)v18;
    *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
    *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
    v19 = *((_QWORD *)v18 + 4);
    *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
    *((_QWORD *)v17 + 4) = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_WORD *)v16 = *(_WORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_WORD *)(v16 + 16) = *(_WORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v16 + 32) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  *(_BYTE *)(v16 + 1) = *(_BYTE *)(v17 + 1);
  v18 = *(_QWORD *)(v17 + 8);
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_QWORD *)(v16 + 8) = v18;
  *(_BYTE *)(v16 + 17) = *(_BYTE *)(v17 + 17);
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  return a1;
}

uint64_t assignWithTake for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_WORD *)v16 = *(_WORD *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_WORD *)(v16 + 16) = *(_WORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  v18 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v16 + 24) = v19;
  *(_QWORD *)(v16 + 32) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNotificationAction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878370EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  int v17;

  v6 = type metadata accessor for Locale();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Calendar();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for TimeZone();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7] + 32);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  v17 = v16 - 1;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNotificationAction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1878371D4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for Locale();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for Calendar();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for TimeZone();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7] + 32) = a2;
  return result;
}

uint64_t type metadata completion function for AccessibilityNotificationAction()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for TimeZone();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityNotificationActionKey()
{
  return &unk_1E1B03E80;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction;
  if (!lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction)
  {
    v1 = type metadata accessor for AccessibilityNotificationAction();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNotificationAction, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction);
  }
  return result;
}

void NavigationSplitSidebarStateMachine.transitionCount.didset(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(v2 + 16);
  if (v12 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v12 != a1)
  {
    static Log.splitViewVisibility.getter();
    v13 = type metadata accessor for Logger();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v15(v11, 1, v13) == 1)
    {
      outlined destroy of Logger?((uint64_t)v11);
    }
    else
    {
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v18 = 134217984;
        v24 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_186E48000, v16, v17, "old transitionCount: %ld", v18, 0xCu);
        MEMORY[0x18D760108](v18, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    }
    static Log.splitViewVisibility.getter();
    if (v15(v7, 1, v13) == 1)
    {
      outlined destroy of Logger?((uint64_t)v7);
      if (*(_QWORD *)(v2 + 16))
        return;
      goto LABEL_15;
    }
    swift_retain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v21 = 134217984;
      v24 = *(_QWORD *)(v2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_186E48000, v19, v20, "new transitionCount: %ld", v21, 0xCu);
      MEMORY[0x18D760108](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    if (!*(_QWORD *)(v2 + 16))
    {
LABEL_15:
      v22 = (_QWORD *)MEMORY[0x18D760234](v2 + 32);
      swift_unknownObjectWeakAssign();
      NavigationSplitSidebarStateMachine.coordinatedHost.didset(v22);

    }
  }
}

void NavigationSplitSidebarStateMachine.coordinatedHost.didset(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + 32;
  v14 = (_QWORD *)MEMORY[0x18D760234](v1 + 32, v10);
  if (v14)
  {
    v15 = v14;

    if (a1 && v15 == a1)
      return;
  }
  else if (!a1)
  {
    return;
  }
  static Log.splitViewVisibility.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Logger?((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
    v16 = (void *)MEMORY[0x18D760234](v1 + 32);
    if (v16)
    {
      v40 = (uint64_t)v16;

    }
    else
    {
      v40 = 0;
    }
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v41 = (uint64_t)a1;
      v42 = v39;
      *(_DWORD *)v19 = 136315138;
      v38 = v19 + 4;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ObjectIdentifier?, MEMORY[0x1E0DEA520], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v20 = String.init<A>(describing:)();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v17, v18, "old coordinatedHost: %s", v19, 0xCu);
      v22 = v39;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v19, -1, -1);
    }

    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v39 = v26;
      *(_DWORD *)v25 = 136315138;
      v38 = v25 + 4;
      v41 = v40;
      v42 = v26;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ObjectIdentifier?, MEMORY[0x1E0DEA520], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v27 = String.init<A>(describing:)();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v23, v24, "new coordinatedHost: %s", v25, 0xCu);
      v29 = v39;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v29, -1, -1);
      MEMORY[0x18D760108](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }
  v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (a1)
  {
    v31 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0xB0);
    v32 = *(_DWORD *)((char *)a1 + v31);
    v33 = __OFSUB__(v32, 1);
    v34 = v32 - 1;
    if (v33)
    {
      __break(1u);
      return;
    }
    *(_DWORD *)((char *)a1 + v31) = v34 & ~(v34 >> 31);
  }
  v35 = (_QWORD *)MEMORY[0x18D760234](v13);
  if (v35)
  {
    v36 = *(_QWORD *)((*v30 & *v35) + 0xB0);
    ++*(_DWORD *)((char *)v35 + v36);

  }
}

void NavigationSplitSidebarStateMachine.dependenciesDidChange(visibilityEngine:splitController:isAnimated:)(uint64_t a1, UISplitViewController *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  __int16 v28;
  __int16 v29;
  int v30;
  UISplitViewController *v31;
  char v32;
  _QWORD v33[2];
  uint8_t *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  UISplitViewController *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;

  v40 = a2;
  v39 = a3;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int16 *)(a1 + 16);
  v44 = *(unsigned __int16 *)(a1 + 18);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  LODWORD(v6) = *(unsigned __int8 *)(a1 + 56);
  v42 = v10;
  v43 = v6;
  static Log.splitViewVisibility.getter();
  v15 = type metadata accessor for Logger();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v7, 1, v15) == 1)
  {
    outlined destroy of Logger?((uint64_t)v7);
    v17 = v41;
  }
  else
  {
    v38 = v16;
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?(v11, v12, v13);
    swift_retain();
    swift_retain();
    outlined copy of NavigationEventHandlers?(v11, v12, v13);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.default.getter();
    v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      v21 = swift_slowAlloc();
      v36 = v20;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc();
      v35 = v23;
      v37 = v18;
      *(_DWORD *)v22 = 136315138;
      v45 = v23;
      v46 = v8;
      v33[1] = v22 + 4;
      v34 = v22;
      v47 = v9;
      v48 = v42;
      v49 = v44;
      v50 = v11;
      v51 = v12;
      v52 = v13;
      v53 = v14;
      v54 = v43;
      v24 = UISplitViewControllerVisibilityEngine.description.getter();
      v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of NavigationEventHandlers?(v11, v12, v13);
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?(v11, v12, v13);
      v26 = v34;
      _os_log_impl(&dword_186E48000, v37, (os_log_type_t)v36, "updated from dependencies, %s", v34, 0xCu);
      v27 = v35;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v27, -1, -1);
      MEMORY[0x18D760108](v26, -1, -1);

    }
    else
    {
      swift_release();
      swift_release();

      outlined consume of NavigationEventHandlers?(v11, v12, v13);
      swift_release();
      swift_release();
      outlined consume of NavigationEventHandlers?(v11, v12, v13);
    }
    v17 = v41;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v15);
  }
  v46 = v8;
  v47 = v9;
  v28 = v42;
  v48 = v42;
  v49 = v44;
  v50 = v11;
  v51 = v12;
  v52 = v13;
  v53 = v14;
  v54 = v43;
  UISplitViewControllerVisibilityEngine.visibility.getter((__int16 *)&v45);
  v29 = *(_WORD *)(v17 + 24);
  v30 = v29 & 0xFF00;
  v31 = v40;
  if ((v45 & 0xFF00) == 0x200)
  {
    if (v30 == 512)
      return;
  }
  else if (v30 != 512 && v29 == v45)
  {
    return;
  }
  if (!-[UISplitViewController isCollapsed](v40, sel_isCollapsed))
  {
    v46 = v8;
    v47 = v9;
    v48 = v28;
    v49 = v44;
    v50 = v11;
    v51 = v12;
    v52 = v13;
    v53 = v14;
    v54 = v43;
    v32 = v39;
    UISplitViewControllerVisibilityEngine.updateSplitViewController(_:isAnimated:)(v31, v39 & 1);
    *(_WORD *)(v17 + 24) = v45;
    if ((v32 & 1) != 0)
      NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(v31);
  }
}

void NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(void *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[2];

  v4 = v3;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3[1];
  v40 = *a3;
  v41 = v12;
  v42[0] = a3[2];
  *(_OWORD *)((char *)v42 + 9) = *(__int128 *)((char *)a3 + 41);
  static Log.splitViewVisibility.getter();
  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
  {
    outlined destroy of Logger?((uint64_t)v11);
  }
  else
  {
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      v37 = v16;
      v17 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v39 = v36;
      *(_DWORD *)v17 = 136315138;
      v18 = 0xE900000000000063;
      v19 = 0x6974616D6F747561;
      switch(a2)
      {
        case 0:
          break;
        case 1:
          v18 = 0xED0000796C6E4F79;
          v19 = 0x7261646E6F636573;
          break;
        case 2:
          v19 = 0xD000000000000012;
          v20 = "oneBesideSecondary";
          goto LABEL_13;
        case 3:
          v21 = "oneOverSecondary";
          goto LABEL_11;
        case 4:
          v19 = 0xD000000000000012;
          v20 = "twoBesideSecondary";
          goto LABEL_13;
        case 5:
          v21 = "twoOverSecondary";
LABEL_11:
          v18 = (unint64_t)(v21 - 32) | 0x8000000000000000;
          v19 = 0xD000000000000010;
          break;
        case 6:
          v19 = 0xD000000000000014;
          v20 = "twoDisplaceSecondary";
LABEL_13:
          v18 = (unint64_t)(v20 - 32) | 0x8000000000000000;
          break;
        default:
          v18 = 0xE700000000000000;
          v19 = 0x6E776F6E6B6E75;
          break;
      }
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v15, (os_log_type_t)v37, "willChangeTo %s", v17, 0xCu);
      v22 = v36;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
  }
  v23 = swift_allocObject();
  v24 = v41;
  *(_OWORD *)(v23 + 16) = v40;
  *(_OWORD *)(v23 + 32) = v24;
  *(_OWORD *)(v23 + 48) = v42[0];
  *(_OWORD *)(v23 + 57) = *(_OWORD *)((char *)v42 + 9);
  *(_QWORD *)(v23 + 80) = a1;
  *(_QWORD *)(v23 + 88) = a2;
  *(_QWORD *)(v23 + 96) = v4;
  outlined retain of UISplitViewControllerVisibilityEngine(&v40);
  v25 = a1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  if (objc_msgSend(v25, sel_style))
  {
    v26 = objc_msgSend(v25, sel_viewControllerForColumn_, 2);
    if (v26)
    {
      v27 = v26;
      objc_opt_self();
      v28 = (void *)swift_dynamicCastObjCClass();
      if (!v28)
      {
        v34 = 0;
LABEL_26:

        goto LABEL_27;
      }
      v29 = objc_msgSend(v28, sel_topViewController);

      if (v29)
      {
        type metadata accessor for UIHostingController<AnyView>(0, v30, v31, v32);
        v33 = swift_dynamicCastClass();
        if (v33)
          v34 = *(id *)(v33 + direct field offset for UIHostingController.host);
        else
          v34 = 0;
        v27 = v29;
        goto LABEL_26;
      }
    }
  }
  v34 = 0;
LABEL_27:
  v35 = (_QWORD *)MEMORY[0x18D760234](v4 + 32);
  swift_unknownObjectWeakAssign();
  NavigationSplitSidebarStateMachine.coordinatedHost.didset(v35);

}

uint64_t closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[7];
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[4] = a1;
  v23[5] = a2;
  v23[6] = a3;
  *(_QWORD *)&v25 = 0;
  LOBYTE(v24) = 1;
  Transaction.subscript.setter();
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release_n();
  v12 = a1[1];
  v25 = *a1;
  v26 = v12;
  v27[0] = a1[2];
  *(_OWORD *)((char *)v27 + 9) = *(__int128 *)((char *)a1 + 41);
  UISplitViewControllerVisibilityEngine.visibility.getter((__int16 *)&v24);
  *(_WORD *)(a4 + 24) = v24;
  static Log.splitViewVisibility.getter();
  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
    return outlined destroy of Logger?((uint64_t)v11);
  outlined retain of UISplitViewControllerVisibilityEngine(a1);
  outlined retain of UISplitViewControllerVisibilityEngine(a1);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v24 = v19;
    *(_DWORD *)v18 = 136315138;
    v23[1] = v18 + 4;
    v20 = a1[1];
    v25 = *a1;
    v26 = v20;
    v27[0] = a1[2];
    *(_OWORD *)((char *)v27 + 9) = *(__int128 *)((char *)a1 + 41);
    v21 = UISplitViewControllerVisibilityEngine.description.getter();
    *(_QWORD *)&v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of UISplitViewControllerVisibilityEngine(a1);
    outlined release of UISplitViewControllerVisibilityEngine(a1);
    _os_log_impl(&dword_186E48000, v16, v17, "wrote visibility back to bindings, %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v19, -1, -1);
    MEMORY[0x18D760108](v18, -1, -1);

  }
  else
  {

    outlined release of UISplitViewControllerVisibilityEngine(a1);
    outlined release of UISplitViewControllerVisibilityEngine(a1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v11, v13);
}

id closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(__int128 *a1, void *a2)
{
  id result;
  __int128 v4;
  int v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 4);
  outlined init with take of NavigationSplitViewVisibility?((uint64_t)&v5 + 2, (uint64_t)&v6 + 2);
  result = (id)outlined init with take of NavigationSplitViewVisibility?((uint64_t)&v6 + 2, (uint64_t)&v6 + 4);
  if (BYTE5(v6) << 8 == 512)
  {
    result = objc_msgSend(a2, sel_isCollapsed);
    if (!(_DWORD)result)
    {
      outlined retain of CompositeNavigationSplitViewVisibility((uint64_t)&v4);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v6);
      AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (id)outlined release of CompositeNavigationSplitViewVisibility((uint64_t)&v4);
    }
  }
  return result;
}

Swift::Void __swiftcall NavigationSplitSidebarStateMachine.splitViewController(_:willHide:)(UISplitViewController *_, UISplitViewControllerColumn willHide)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Logger?((uint64_t)v7);
  }
  else
  {
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v19 = v17;
      *(_DWORD *)v12 = 136315138;
      v13 = 0xE700000000000000;
      v14 = 0x7972616D697270;
      switch(willHide)
      {
        case UISplitViewControllerColumnPrimary:
          break;
        case UISplitViewControllerColumnSupplementary:
          v13 = 0xED0000797261746ELL;
          v14 = 0x656D656C70707573;
          break;
        case UISplitViewControllerColumnSecondary:
          v13 = 0xE900000000000079;
          v14 = 0x7261646E6F636573;
          break;
        case UISplitViewControllerColumnCompact:
          v14 = 0x746361706D6F63;
          break;
        default:
          v14 = 0x6E776F6E6B6E75;
          break;
      }
      v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v10, v11, "willHide %s", v12, 0xCu);
      v15 = v17;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v15, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(_);
}

Swift::Void __swiftcall NavigationSplitSidebarStateMachine.splitViewController(_:willShow:)(UISplitViewController *_, UISplitViewControllerColumn willShow)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  UISplitViewController *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of Logger?((uint64_t)v9);
  }
  else
  {
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v20 = _;
      v14 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v14 = 136315138;
      v15 = 0xE700000000000000;
      v16 = 0x7972616D697270;
      switch(willShow)
      {
        case UISplitViewControllerColumnPrimary:
          break;
        case UISplitViewControllerColumnSupplementary:
          v15 = 0xED0000797261746ELL;
          v16 = 0x656D656C70707573;
          break;
        case UISplitViewControllerColumnSecondary:
          v15 = 0xE900000000000079;
          v16 = 0x7261646E6F636573;
          break;
        case UISplitViewControllerColumnCompact:
          v16 = 0x746361706D6F63;
          break;
        default:
          v16 = 0x6E776F6E6B6E75;
          break;
      }
      v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v12, v13, "willShow %s", v14, 0xCu);
      v17 = v19;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v17, -1, -1);
      MEMORY[0x18D760108](v14, -1, -1);

      _ = v20;
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(_);
  if (willShow == UISplitViewControllerColumnSecondary && !*(_QWORD *)(v3 + 16))
  {
    v18 = (_QWORD *)MEMORY[0x18D760234](v3 + 32);
    swift_unknownObjectWeakAssign();
    NavigationSplitSidebarStateMachine.coordinatedHost.didset(v18);

  }
}

uint64_t NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(void *a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD aBlock[6];

  swift_weakInit();
  v2 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  v3 = objc_msgSend(a1, sel_transitionCoordinator);
  if (!v3)
  {
    swift_release_n();
    return swift_weakDestroy();
  }
  v4 = v3;
  if (!objc_msgSend(a1, sel_style))
    goto LABEL_9;
  v5 = objc_msgSend(a1, sel_viewControllerForColumn_, 2);
  if (!v5)
    goto LABEL_9;
  v6 = v5;
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_topViewController);

    if (v8)
    {
      type metadata accessor for UIHostingController<AnyView>(0, v9, v10, v11);
      v12 = swift_dynamicCastClass();
      if (!v12)
      {
        swift_release_n();
        swift_unknownObjectRelease();

        return swift_weakDestroy();
      }
      v6 = *(id *)(v12 + direct field offset for UIHostingController.host);

      specialized closure #1 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)();
      v13 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0xB0);
      ++*(_DWORD *)((char *)v6 + v13);
      v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v15 = (_QWORD *)swift_allocObject();
      v15[2] = v14;
      v15[3] = partial apply for closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:);
      v15[4] = v2;
      aBlock[4] = partial apply for closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:);
      aBlock[5] = v15;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      aBlock[3] = &block_descriptor_60;
      v16 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v4, sel_animateAlongsideTransition_completion_, 0, v16);
      _Block_release(v16);
      goto LABEL_8;
    }
LABEL_9:
    swift_release_n();
    swift_unknownObjectRelease();
    return swift_weakDestroy();
  }
LABEL_8:
  swift_release_n();
  swift_unknownObjectRelease();

  return swift_weakDestroy();
}

uint64_t specialized closure #1 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    static Log.splitViewVisibility.getter();
    v6 = type metadata accessor for Logger();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
    {
      outlined destroy of Logger?((uint64_t)v3);
    }
    else
    {
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_186E48000, v8, v9, "begin animateAlongsideTransition", v10, 2u);
        MEMORY[0x18D760108](v10, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
    }
    v11 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v11 + 1;
    NavigationSplitSidebarStateMachine.transitionCount.didset(v11);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    static Log.splitViewVisibility.getter();
    v6 = type metadata accessor for Logger();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
    {
      outlined destroy of Logger?((uint64_t)v3);
    }
    else
    {
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_186E48000, v8, v9, "end animateAlongsideTransition", v10, 2u);
        MEMORY[0x18D760108](v10, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
    }
    v11 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v11 - 1;
    NavigationSplitSidebarStateMachine.transitionCount.didset(v11);
    return swift_release();
  }
  return result;
}

uint64_t NavigationSplitSidebarStateMachine.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NavigationSplitSidebarStateMachine()
{
  return objc_opt_self();
}

void specialized NavigationSplitSidebarStateMachine.splitViewController(_:didChangeTo:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Logger?((uint64_t)v7);
  }
  else
  {
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v20 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = 0xE900000000000063;
      v15 = 0x6974616D6F747561;
      switch(a1)
      {
        case 0:
          break;
        case 1:
          v14 = 0xED0000796C6E4F79;
          v15 = 0x7261646E6F636573;
          break;
        case 2:
          v15 = 0xD000000000000012;
          v16 = "oneBesideSecondary";
          goto LABEL_13;
        case 3:
          v17 = "oneOverSecondary";
          goto LABEL_11;
        case 4:
          v15 = 0xD000000000000012;
          v16 = "twoBesideSecondary";
          goto LABEL_13;
        case 5:
          v17 = "twoOverSecondary";
LABEL_11:
          v14 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          v15 = 0xD000000000000010;
          break;
        case 6:
          v15 = 0xD000000000000014;
          v16 = "twoDisplaceSecondary";
LABEL_13:
          v14 = (unint64_t)(v16 - 32) | 0x8000000000000000;
          break;
        default:
          v14 = 0xE700000000000000;
          v15 = 0x6E776F6E6B6E75;
          break;
      }
      v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_186E48000, v10, v11, "didChangeTo: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18D760108](v13, -1, -1);
      MEMORY[0x18D760108](v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  v18 = (_QWORD *)MEMORY[0x18D760234](v2 + 32);
  swift_unknownObjectWeakAssign();
  NavigationSplitSidebarStateMachine.coordinatedHost.didset(v18);

}

uint64_t sub_18783940C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  return closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)();
}

void type metadata accessor for UIHostingController<AnyView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIHostingController<AnyView>)
  {
    v4 = type metadata accessor for UIHostingController(0, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<AnyView>);
  }
}

uint64_t sub_187839494()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1878394B8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_1878394F0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1)
      goto LABEL_6;
    swift_release();
  }
  if (*(_QWORD *)(v0 + 56))
    swift_release();
LABEL_6:

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)()
{
  uint64_t v0;

  return closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)((__int128 *)(v0 + 16), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

_QWORD *outlined retain of UISplitViewControllerVisibilityEngine(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  swift_retain();
  swift_retain();
  outlined copy of NavigationEventHandlers?(v2, v3, v4);
  return a1;
}

id partial apply for closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(*(__int128 **)(v0 + 16), *(void **)(v0 + 24));
}

_QWORD *outlined release of UISplitViewControllerVisibilityEngine(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v2, v3, v4);
  return a1;
}

uint64_t outlined init with take of NavigationSplitViewVisibility?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for NavigationSplitViewVisibility?, (uint64_t)&type metadata for NavigationSplitViewVisibility, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of CompositeNavigationSplitViewVisibility(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of CompositeNavigationSplitViewVisibility(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for IsFromSplitViewKey()
{
  return &type metadata for IsFromSplitViewKey;
}

void type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>);
  }
}

uint64_t EnvironmentValues.undoManager.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues._undoManager.setter(void *a1)
{
  uint64_t v1;
  id v3;

  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
  v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {

  }
  return swift_release();
}

void (*EnvironmentValues._undoManager.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[2] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues._undoManager.modify;
}

void EnvironmentValues._undoManager.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(id *)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
  v6 = v5;
  v7 = v6;
  if ((a2 & 1) != 0)
  {
    v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance UndoManagerKey(void **a1, void **a2)
{
  void *v2;
  void *v3;
  _BOOL8 result;
  BOOL v5;
  id v6;
  id v7;
  char v8;

  v2 = *a1;
  v3 = *a2;
  result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    type metadata accessor for NSUndoManager();
    v6 = v2;
    v7 = v3;
    v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

uint64_t sub_187839BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.undoManager.getter(a1, a2);
  *a3 = result;
  return result;
}

void sub_187839C1C(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

ValueMetadata *type metadata accessor for UndoManagerKey()
{
  return &type metadata for UndoManagerKey;
}

unint64_t type metadata accessor for NSUndoManager()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSUndoManager;
  if (!lazy cache variable for type metadata for NSUndoManager)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUndoManager);
  }
  return result;
}

ValueMetadata *type metadata accessor for Transaction.ImplicitUndoSuppressedKey()
{
  return &type metadata for Transaction.ImplicitUndoSuppressedKey;
}

void type metadata completion function for SearchModifier()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, &lazy cache variable for type metadata for State<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

unint64_t initializeBufferWithCopyOfBuffer for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for AttributedString();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | 7;
  v14 = *(_QWORD *)(v11 + 64);
  if ((v12 | (unint64_t)v7) <= 7 && ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) == 0)
  {
    v15 = ((v12 + 16) & ~v12) + v14 + 7;
    v17 = ((((v12 + 9) & ~v12) + v14) & 0xFFFFFFFFFFFFFFF8)
        + (((v12 | 7)
          + 18
          + ((v15
            + (((v12 | 7) + v9 + ((v7 + 40) & ~(unint64_t)v7)) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) != 0
       && ((((v12 + 9) & ~v12) + v14) & 0xFFFFFFFFFFFFFFF8)
        + (((v12 | 7)
          + 18
          + ((v15
            + (((v12 | 7) + v9 + ((v7 + 40) & ~(unint64_t)v7)) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) < 0xFFFFFFFFFFFFFFE8;
  }
  else
  {
    v17 = 1;
  }
  if (v17)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = v18 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16));
  }
  else
  {
    v54 = (v12 | 7) + 18;
    v55 = v12 + 9;
    v56 = ((v12 + 9) & ~v12) + v14;
    v57 = *(_QWORD *)(v11 + 64);
    v52 = ((v12 + 16) & ~v12) + v14 + 7;
    v50 = v9;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v58 = v10;
    v59 = a1;
    v20 = a1 & 0xFFFFFFFFFFFFFFF8;
    v21 = a2 & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    v23 = *(_QWORD *)(v21 + 16);
    v24 = *(_BYTE *)(v21 + 24);
    v51 = v11;
    outlined copy of Text.Storage(v22, v23, v24);
    *(_QWORD *)(v20 + 8) = v22;
    *(_QWORD *)(v20 + 16) = v23;
    *(_BYTE *)(v20 + 24) = v24;
    *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
    v25 = (v20 + v8 + 40) & ~v8;
    v26 = (v21 + v8 + 40) & ~v8;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v28 = ~v12;
    swift_bridgeObjectRetain();
    v27(v25, v26, v5);
    v29 = (_QWORD *)((v25 + v50 + v13) & ~v13);
    v53 = ~v13;
    v30 = (_QWORD *)((v26 + v50 + v13) & ~v13);
    *v29 = *v30;
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    v33 = ((unint64_t)v31 + v12 + 8) & ~v12;
    v34 = ((unint64_t)v32 + v12 + 8) & ~v12;
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    swift_retain();
    swift_retain();
    v35(v33, v34, v58);
    v36 = ((unint64_t)v29 + v52) & 0xFFFFFFFFFFFFFFF8;
    v37 = ((unint64_t)v30 + v52) & 0xFFFFFFFFFFFFFFF8;
    v38 = *(unsigned __int8 *)(v37 + 17);
    if (v38 >= 2)
      v38 = *(_DWORD *)v37 + 2;
    if (v38 == 1)
    {
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
      *(_BYTE *)(v36 + 16) = *(_BYTE *)(v37 + 16);
      swift_retain();
      v39 = 1;
    }
    else
    {
      v39 = 0;
      *(_BYTE *)v36 = *(_BYTE *)v37;
      *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
    }
    swift_retain();
    *(_BYTE *)(v36 + 17) = v39;
    v40 = (v54 + v36) & v53;
    v41 = (v54 + v37) & v53;
    *(_BYTE *)v40 = *(_BYTE *)v41;
    *(_BYTE *)(v40 | 1) = *(_BYTE *)(v41 | 1);
    *(_BYTE *)(v40 | 2) = *(_BYTE *)(v41 | 2);
    *(_BYTE *)(v40 | 3) = *(_BYTE *)(v41 | 3);
    v42 = v40 | 4;
    v43 = *(_DWORD *)(v41 | 4);
    *(_BYTE *)(v42 + 4) = *(_BYTE *)((v41 | 4) + 4);
    *(_DWORD *)v42 = v43;
    v44 = (v55 + v40) & v28;
    v45 = (v55 + v41) & v28;
    v35(v44, v45, v58);
    *(_BYTE *)(v44 + v57) = *(_BYTE *)(v45 + v57);
    v46 = (v44 + v57) & 0xFFFFFFFFFFFFFFFCLL;
    v47 = (v45 + v57) & 0xFFFFFFFFFFFFFFFCLL;
    v48 = *(_DWORD *)(v47 + 4);
    *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
    *(_DWORD *)(v46 + 4) = v48;
    *(_QWORD *)((v56 + 16 + v40) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v56 + 16 + v41) & 0xFFFFFFFFFFFFF8);
    v19 = v59;
  }
  swift_retain();
  return v19;
}

uint64_t destroy for SearchModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, uint64_t);
  unint64_t v12;
  unsigned int v13;

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for AttributedString();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v6 + (v9 | 7)) & ~(v9 | 7);
  swift_release();
  swift_release();
  v11 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v11((v9 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9, v7);
  v12 = (((v9 + 16) & ~v9) + *(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(unsigned __int8 *)(v12 + 17);
  if (v13 >= 2)
    v13 = *(_DWORD *)v12 + 2;
  if (v13 == 1)
    swift_release();
  swift_release();
  v11((v9 + 9 + (((v9 | 7) + v12 + 18) & ~(v9 | 7))) & ~v9, v7);
  return swift_release();
}

unint64_t initializeWithCopy for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 40 + v4) & ~v11;
  v13 = (v11 + 40 + v5) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v14(v12, v13, v9);
  v15 = *(_QWORD *)(v10 + 64);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v18 | 7;
  v20 = (v18 | 7) + v15;
  v21 = (_QWORD *)((v20 + v12) & ~(v18 | 7));
  v22 = (_QWORD *)((v20 + v13) & ~(v18 | 7));
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + v18 + 8) & ~v18;
  v26 = ((unint64_t)v24 + v18 + 8) & ~v18;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  swift_retain();
  swift_retain();
  v47 = v27;
  v27(v25, v26, v16);
  v28 = *(_QWORD *)(v17 + 64);
  v29 = v28 + ((v18 + 16) & ~v18) + 7;
  v30 = ((unint64_t)v21 + v29) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v22 + v29) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned __int8 *)(v31 + 17);
  if (v32 >= 2)
    v32 = *(_DWORD *)v31 + 2;
  v33 = ~v19;
  v34 = ~v18;
  if (v32 == 1)
  {
    *(_QWORD *)v30 = *(_QWORD *)v31;
    *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
    *(_BYTE *)(v30 + 16) = *(_BYTE *)(v31 + 16);
    swift_retain();
    v35 = 1;
  }
  else
  {
    v35 = 0;
    *(_BYTE *)v30 = *(_BYTE *)v31;
    *(_QWORD *)(v30 + 8) = *(_QWORD *)(v31 + 8);
  }
  swift_retain();
  *(_BYTE *)(v30 + 17) = v35;
  v36 = (v19 + 18 + v30) & v33;
  v37 = (v19 + 18 + v31) & v33;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  *(_BYTE *)(v36 | 1) = *(_BYTE *)(v37 | 1);
  *(_BYTE *)(v36 | 2) = *(_BYTE *)(v37 | 2);
  *(_BYTE *)(v36 | 3) = *(_BYTE *)(v37 | 3);
  v38 = v36 | 4;
  v39 = *(_DWORD *)(v37 | 4);
  *(_BYTE *)(v38 + 4) = *(_BYTE *)((v37 | 4) + 4);
  *(_DWORD *)v38 = v39;
  v40 = v18 + 9;
  v41 = (v40 + v36) & v34;
  v42 = (v40 + v37) & v34;
  v47(v41, v42, v16);
  *(_BYTE *)(v41 + v28) = *(_BYTE *)(v42 + v28);
  v43 = (v41 + v28) & 0xFFFFFFFFFFFFFFFCLL;
  v44 = (v42 + v28) & 0xFFFFFFFFFFFFFFFCLL;
  v45 = *(_DWORD *)(v44 + 4);
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_DWORD *)(v43 + 4) = v45;
  *(_QWORD *)((v28 + (v40 & v34) + 16 + v36) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v28 + (v40 & v34) + 16 + v37) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

unint64_t assignWithCopy for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_BYTE *)(v4 + 24);
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 40 + v4) & ~v13;
  v15 = (v13 + 40 + v5) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64);
  v17 = type metadata accessor for AttributedString();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v19 | 7;
  v21 = (v19 | 7) + v16;
  v45 = ~(v19 | 7);
  v22 = (_QWORD *)((v21 + v14) & v45);
  v23 = (_QWORD *)((v21 + v15) & v45);
  *v22 = *v23;
  swift_retain();
  swift_release();
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_retain();
  swift_release();
  v26 = (unint64_t)v24 + v19 + 8;
  v27 = ~v19;
  v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 24);
  v28(v26 & ~v19, ((unint64_t)v25 + v19 + 8) & ~v19, v17);
  v29 = *(_QWORD *)(v18 + 64);
  v30 = v29 + ((v19 + 16) & ~v19) + 7;
  v31 = ((unint64_t)v22 + v30) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v23 + v30) & 0xFFFFFFFFFFFFFFF8;
  if (v31 != v32)
  {
    v33 = *(unsigned __int8 *)(v31 + 17);
    if (v33 >= 2)
      v33 = *(_DWORD *)v31 + 2;
    if (v33 == 1)
      swift_release();
    swift_release();
    v34 = *(unsigned __int8 *)(v32 + 17);
    if (v34 >= 2)
      v34 = *(_DWORD *)v32 + 2;
    if (v34 == 1)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
      *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
      *(_BYTE *)(v31 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v31 = *(_BYTE *)v32;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v32 + 8);
      *(_BYTE *)(v31 + 17) = 0;
    }
    swift_retain();
  }
  v35 = (v20 + 18 + v31) & v45;
  v36 = (v20 + 18 + v32) & v45;
  *(_BYTE *)v35 = *(_BYTE *)v36;
  *(_BYTE *)(v35 | 1) = *(_BYTE *)(v36 | 1);
  *(_BYTE *)(v35 | 2) = *(_BYTE *)(v36 | 2);
  *(_BYTE *)(v35 | 3) = *(_BYTE *)(v36 | 3);
  v37 = v35 | 4;
  v38 = *(_DWORD *)(v36 | 4);
  *(_BYTE *)(v37 + 4) = *(_BYTE *)((v36 | 4) + 4);
  *(_DWORD *)v37 = v38;
  v39 = v19 + 9;
  v40 = (v39 + v35) & v27;
  v41 = (v39 + v36) & v27;
  v28(v40, v41, v17);
  *(_BYTE *)(v40 + v29) = *(_BYTE *)(v41 + v29);
  v42 = (v40 + v29) & 0xFFFFFFFFFFFFFFFCLL;
  v43 = (v41 + v29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v42 + 4) = *(_DWORD *)(v43 + 4);
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  *(_QWORD *)((v29 + (v39 & v27) + 16 + v35) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v29 + (v39 & v27) + 16 + v36) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

unint64_t initializeWithTake for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void (*v20)(unint64_t, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v9 = (v7 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for AttributedString();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v15 = (v13 | 7) + v10;
  v16 = (_QWORD *)((v15 + v8) & ~(v13 | 7));
  v17 = (_QWORD *)((v15 + v9) & ~(v13 | 7));
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32);
  v20(((unint64_t)v18 + v13 + 8) & ~v13, ((unint64_t)v19 + v13 + 8) & ~v13, v11);
  v21 = *(_QWORD *)(v12 + 64);
  v22 = v21 + ((v13 + 16) & ~v13) + 7;
  v23 = ((unint64_t)v16 + v22) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v17 + v22) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(unsigned __int8 *)(v24 + 17);
  if (v25 >= 2)
    v25 = *(_DWORD *)v24 + 2;
  v26 = ~v14;
  v27 = ~v13;
  if (v25 == 1)
  {
    v28 = *(_OWORD *)v24;
    *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
    *(_OWORD *)v23 = v28;
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  *(_BYTE *)(v23 + 17) = v29;
  v30 = v14 + 18;
  v31 = (v14 + 18 + v23) & v26;
  v32 = (v30 + v24) & v26;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  *(_BYTE *)(v31 | 1) = *(_BYTE *)(v32 | 1);
  *(_BYTE *)(v31 | 2) = *(_BYTE *)(v32 | 2);
  *(_BYTE *)(v31 | 3) = *(_BYTE *)(v32 | 3);
  v33 = v31 | 4;
  v34 = *(_DWORD *)(v32 | 4);
  *(_BYTE *)(v33 + 4) = *(_BYTE *)((v32 | 4) + 4);
  *(_DWORD *)v33 = v34;
  v35 = v13 + 9;
  v36 = (v35 + v31) & v27;
  v37 = (v35 + v32) & v27;
  v20(v36, v37, v11);
  *(_BYTE *)(v36 + v21) = *(_BYTE *)(v37 + v21);
  v38 = (v36 + v21) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = (v37 + v21) & 0xFFFFFFFFFFFFFFFCLL;
  v40 = *(_DWORD *)(v39 + 4);
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_DWORD *)(v38 + 4) = v40;
  *(_QWORD *)((v21 + (v35 & v27) + 16 + v31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v21 + (v35 & v27) + 16 + v32) & 0xFFFFFFFFFFFFF8);
  return a1;
}

unint64_t assignWithTake for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_BYTE *)(v4 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  *(_BYTE *)(v4 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 40 + v4) & ~v11;
  v13 = (v11 + 40 + v5) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = type metadata accessor for AttributedString();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v17 | 7;
  v19 = (v17 | 7) + v14;
  v20 = v19 + v12;
  v21 = ~(v17 | 7);
  v22 = v20 & v21;
  v23 = (_QWORD *)((v19 + v13) & v21);
  v24 = (_QWORD *)(v20 & v21);
  *v24 = *v23;
  swift_release();
  v25 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  swift_release();
  v27 = (unint64_t)v25 + v17 + 8;
  v28 = ~v17;
  v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40);
  v29(v27 & ~v17, ((unint64_t)v26 + v17 + 8) & ~v17, v15);
  v30 = *(_QWORD *)(v16 + 64);
  v31 = v30 + ((v17 + 16) & ~v17) + 7;
  v32 = (v31 + v22) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v23 + v31) & 0xFFFFFFFFFFFFFFF8;
  if (v32 != v33)
  {
    v34 = *(unsigned __int8 *)(v32 + 17);
    if (v34 >= 2)
      v34 = *(_DWORD *)v32 + 2;
    if (v34 == 1)
      swift_release();
    swift_release();
    v35 = *(unsigned __int8 *)(v33 + 17);
    if (v35 >= 2)
      v35 = *(_DWORD *)v33 + 2;
    if (v35 == 1)
    {
      v36 = *(_OWORD *)v33;
      *(_BYTE *)(v32 + 16) = *(_BYTE *)(v33 + 16);
      *(_OWORD *)v32 = v36;
      v37 = 1;
    }
    else
    {
      v37 = 0;
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    *(_BYTE *)(v32 + 17) = v37;
  }
  v38 = (v18 + 18 + v32) & v21;
  v39 = (v18 + 18 + v33) & v21;
  *(_BYTE *)v38 = *(_BYTE *)v39;
  *(_BYTE *)(v38 | 1) = *(_BYTE *)(v39 | 1);
  *(_BYTE *)(v38 | 2) = *(_BYTE *)(v39 | 2);
  *(_BYTE *)(v38 | 3) = *(_BYTE *)(v39 | 3);
  v40 = v38 | 4;
  v41 = *(_DWORD *)(v39 | 4);
  *(_BYTE *)(v40 + 4) = *(_BYTE *)((v39 | 4) + 4);
  *(_DWORD *)v40 = v41;
  v42 = v17 + 9;
  v43 = (v42 + v38) & v28;
  v44 = (v42 + v39) & v28;
  v29(v43, v44, v15);
  *(_BYTE *)(v43 + v30) = *(_BYTE *)(v44 + v30);
  v45 = (v43 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  v46 = (v44 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_QWORD *)((v30 + (v42 & v28) + 16 + v38) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v30 + (v42 & v28) + 16 + v39) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v10 <= 0xFE)
    v13 = 254;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = *(_DWORD *)(v9 + 84);
  if (v12 <= v14)
    v12 = v14;
  if (!a2)
    return 0;
  v15 = v8;
  v16 = *(unsigned __int8 *)(v6 + 80);
  v17 = *(_QWORD *)(v6 + 64);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = v18 | 7;
  v20 = *(_QWORD *)(v9 + 64);
  v21 = ((v18 + 16) & ~v18) + v20 + 7;
  v22 = (v18 | 7) + 18;
  v23 = ((v18 + 9) & ~v18) + v20;
  if (v12 < a2)
  {
    if ((((v23 & 0xFFFFFFFFFFFFFFF8)
         + ((v22 + ((v21 + ((v19 + v17 + ((v16 + 40) & ~v16)) & ~v19)) & 0xFFFFFFFFFFFFFFF8)) & ~v19)
         + 24) & 0xFFFFFFF8) != 0)
      v24 = 2;
    else
      v24 = a2 - v12 + 1;
    if (v24 >= 0x10000)
      v25 = 4;
    else
      v25 = 2;
    if (v24 < 0x100)
      v25 = 1;
    if (v24 >= 2)
      v26 = v25;
    else
      v26 = 0;
    __asm { BR              X24 }
  }
  v28 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0x80000000) == 0)
  {
    v29 = *(_QWORD *)(v28 + 32);
    if (v29 >= 0xFFFFFFFF)
      LODWORD(v29) = -1;
    return (v29 + 1);
  }
  v30 = (v28 + v16 + 40) & ~v16;
  if ((_DWORD)v7 == v12)
  {
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v10 = v7;
    v15 = v5;
    return v31(v30, v10, v15);
  }
  v32 = (v30 + v17 + v19) & ~v19;
  if (v11 == v12)
  {
    v33 = v18 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
LABEL_38:
    v30 = v33 & ~v18;
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v31(v30, v10, v15);
  }
  v34 = (v22 + ((v21 + v32) & 0xFFFFFFFFFFFFFFF8)) & ~v19;
  if (v13 == v14)
  {
    if (v10 <= 0xFE)
    {
      v35 = *(unsigned __int8 *)(v34 | 1);
      if (v35 >= 2)
        return v35 - 1;
      else
        return 0;
    }
    v33 = v18 + 9 + v34;
    goto LABEL_38;
  }
  v36 = *(_QWORD *)((v23 + v34 + 16) & 0xFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF)
    LODWORD(v36) = -1;
  if ((v36 + 1) >= 2)
    return v36;
  else
    return 0;
}

void storeEnumTagSinglePayload for SearchModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  if (v10 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (v12 <= v13)
    v12 = v13;
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (((v14 | 7)
        + 18
        + ((((v14 + 16) & ~v14)
          + *(_QWORD *)(v9 + 64)
          + 7
          + (((v14 | 7)
            + *(_QWORD *)(v7 + 64)
            + ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v14 | 7))
      + ((((v14 + 9) & ~v14) + *(_QWORD *)(v9 + 64)) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v12 >= a3)
  {
    v18 = 0u;
    if (a2 <= v12)
      goto LABEL_25;
  }
  else
  {
    if ((_DWORD)v15)
      v16 = 2;
    else
      v16 = a3 - v12 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    if (a2 <= v12)
LABEL_25:
      __asm { BR              X28 }
  }
  if ((_DWORD)v15)
  {
    v19 = ~v12 + a2;
    bzero(a1, v15);
    *a1 = v19;
  }
  __asm { BR              X10 }
}

void sub_18783B144()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x18783B1BCLL);
}

void sub_18783B14C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x18783B154);
  JUMPOUT(0x18783B1BCLL);
}

void sub_18783B16C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x18783B1BCLL);
}

void sub_18783B174()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x18783B1BCLL);
}

void sub_18783B17C()
{
  unint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (v2)
  {
    v0 = v3 & 0xFFFFFFFFFFFFFFF8;
    if (v1 < 0)
      JUMPOUT(0x18783B188);
    if (v2 < 0)
      JUMPOUT(0x18783B1B0);
    *(_QWORD *)(v0 + 32) = (v2 - 1);
  }
  JUMPOUT(0x18783B1BCLL);
}

uint64_t type metadata accessor for SearchModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchModifier);
}

void base witness table accessor for ViewModifier in SearchModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SearchModifier.init(text:isPresented:prompt:placement:control:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t (*a11)(uint64_t), uint64_t *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char v29;
  char *v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;

  v53 = a5;
  v54 = a7;
  v63 = a4;
  v61 = a2;
  v62 = a3;
  v60 = a1;
  v57 = a12;
  v55 = a11;
  v56 = a10;
  v17 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a13;
  v59 = a14;
  v22 = (int *)type metadata accessor for SearchModifier(0, a13, a14, v21);
  v23 = a9 + v22[12];
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_WORD *)(v23 + 16) = 0;
  *v20 = 2;
  v24 = (void *)objc_opt_self();
  v25 = objc_msgSend(v24, sel_currentTraitCollection);
  v26 = objc_msgSend(v25, sel_horizontalSizeClass);

  v27 = objc_msgSend(v24, sel_currentTraitCollection);
  v28 = objc_msgSend(v27, sel_userInterfaceIdiom);

  v29 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v26, (uint64_t)v28, 2u);
  v20[1] = (v29 == 2) | v29 & 1;
  *((_WORD *)v20 + 1) = 2;
  *((_DWORD *)v20 + 1) = 0;
  v20[8] = 1;
  AttributedString.init()();
  v20[*(int *)(v17 + 40)] = 0;
  v30 = &v20[*(int *)(v17 + 44)];
  *(_DWORD *)v30 = 0;
  v30[4] = 0;
  if (a8)
  {
    v32 = v53;
    v31 = v54;
    v33 = v54 & 1;
    v64 = 0;
    outlined copy of Text.Storage(v53, a6, v54 & 1);
    swift_bridgeObjectRetain();
    Text.assertUnstyled(_:options:)();
    outlined consume of Text.Storage(v32, a6, v33);
    swift_bridgeObjectRelease();
    v34 = v32;
    v35 = a6;
    v36 = v31;
    v37 = a8;
  }
  else
  {
    v34 = static Text.System.search.getter();
    v36 = v38 & 1;
    v32 = v53;
    v31 = v54;
  }
  v39 = a6;
  *(_QWORD *)(a9 + 8) = v34;
  *(_QWORD *)(a9 + 16) = v35;
  *(_BYTE *)(a9 + 24) = v36 & 1;
  *(_QWORD *)(a9 + 32) = v37;
  v40 = v60;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v60, a9 + v22[11], (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v41 = a9 + v22[13];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, v41, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  *(_QWORD *)(v41 + *(int *)(v42 + 28)) = 0;
  v43 = outlined copy of Text?(v32, v39, v31, a8);
  v44 = v31;
  v45 = v55(v43);
  v57 = &v53;
  *(_BYTE *)a9 = v56;
  MEMORY[0x1E0C80A78](v45, v46);
  v47 = v59;
  *(&v53 - 4) = v58;
  *(&v53 - 3) = v47;
  *(&v53 - 2) = a9;
  v48 = a8;
  v49 = v32;
  v51 = v61;
  v50 = v62;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7BindingVySbG_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:), (uint64_t)(&v53 - 6), v61, v62, v63);
  outlined consume of Text?(v49, v39, v44, v48);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v40, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v51, v50);
}

void View.resetSearchEnvironment()()
{
  JUMPOUT(0x18D75B4ACLL);
}

uint64_t SearchModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  char v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD v60[4];
  unsigned __int8 v61;

  v51 = a2;
  v45 = type metadata accessor for SearchEnvironmentWritingModifier();
  MEMORY[0x1E0C80A78](v45, v3);
  v50 = &v39[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for SearchPrimitiveModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v5);
  v48 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = &v39[-v9];
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, a1, v8);
  v11 = type metadata accessor for _ViewModifier_Content();
  v12 = type metadata accessor for ModifiedContent();
  v13 = type metadata accessor for ModifiedContent();
  v47 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v42 = &v39[-v15];
  v16 = type metadata accessor for ModifiedContent();
  v49 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v43 = &v39[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19, v20);
  v46 = &v39[-v21];
  KeyPath = swift_getKeyPath();
  v55[0] = 1;
  v56 = 4;
  v57 = KeyPath;
  v58 = 0;
  v59 = 0;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v11);
  MEMORY[0x18D75B4AC](v60, v55, v11, &type metadata for SubmitScopeModifier, v23);
  outlined consume of Environment<AppIntentExecutor?>.Content(KeyPath, 0, 0);
  v24 = v60[2];
  v41 = v60[3];
  v40 = v61;
  SearchModifier.primitiveModifier.getter(a1, v25, (uint64_t)v10);
  v26 = lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier();
  v54[0] = v23;
  v54[1] = v26;
  v27 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v12, v54);
  v28 = v42;
  v29 = v12;
  v30 = v44;
  MEMORY[0x18D75B4AC](v10, v29, v44, v27);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v10, v30);
  v31 = v50;
  SearchModifier.environmentModifier.getter(a1, v50);
  v53[0] = v27;
  v53[1] = &protocol witness table for SearchPrimitiveModifier<A>;
  v32 = MEMORY[0x1E0CE2E70];
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v13, v53);
  v34 = v43;
  MEMORY[0x18D75B4AC](v31, v13, v45, v33);
  outlined consume of Environment<AppIntentExecutor?>.Content(v24, v41, v40);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for SearchEnvironmentWritingModifier);
  (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v28, v13);
  v52[0] = v33;
  v52[1] = &protocol witness table for SearchEnvironmentWritingModifier;
  v35 = MEMORY[0x18D75FFDC](v32, v16, v52);
  v36 = (uint64_t)v46;
  static ViewBuilder.buildExpression<A>(_:)(v34, v16, v35);
  v37 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8);
  v37((uint64_t)v34, v16);
  static ViewBuilder.buildBlock<A>(_:)(v36, v16, v51);
  return v37(v36, v16);
}

uint64_t SearchModifier.primitiveModifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SearchField(0, v6, v7, a2);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v20 - v10;
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v3, a1, v14);
  SearchModifier.searchField.getter(a1, v18, (uint64_t)v11);
  return SearchPrimitiveModifier.init(base:searchField:)((uint64_t)v16, (uint64_t)v11, v6, v7, a3);
}

uint64_t SearchModifier.environmentModifier.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  SearchModifier.adjustedState.getter(a1, a2);
  v5 = (uint64_t)&v2[*(int *)(a1 + 44)];
  v6 = type metadata accessor for SearchEnvironmentWritingModifier();
  result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)a2 + *(int *)(v6 + 20), (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  *((_BYTE *)a2 + *(int *)(v6 + 24)) = *v2;
  return result;
}

uint64_t SearchModifier.adjustedState.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v44 = a2;
  type metadata accessor for Binding<AttributedString>();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  v10 = v9;
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<(SearchFieldState, AttributedString)>(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (uint64_t *)((char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>(0);
  v42 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (uint64_t *)((char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = a1;
  v40 = v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for State<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2 + *(int *)(a1 + 44), (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  v23 = v13[1];
  v24 = *((_QWORD *)v8 + 1);
  v41 = v15;
  swift_retain();
  swift_retain();
  v43 = v10;
  MEMORY[0x18D75B9C8](v10);
  type metadata accessor for (SearchFieldState, AttributedString)();
  v26 = v25;
  MEMORY[0x18D75B9C8](v5);
  v47 = v23;
  v48 = v24;
  type metadata accessor for LocationBox<SearchZipLocation>();
  swift_allocObject();
  v27 = LocationBox.init(_:)();
  *v18 = *v13;
  v18[1] = v27;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v28 = (uint64_t *)(v40 + *(int *)(v39 + 48));
  v29 = *v28;
  v30 = v28[1];
  if ((*((_BYTE *)v28 + 17) & 1) != 0)
  {
    v31 = v28[2] & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v45 = v29 & 1;
    v46 = v30;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    v29 = v47;
    v30 = v48;
    v31 = v49;
  }
  v47 = v29;
  v48 = v30;
  v49 = v31;
  Binding.zip<A>(with:)();
  swift_release();
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<(SearchFieldState, AttributedString)>);
  v32 = (uint64_t)v22 + *(int *)(v42 + 32);
  v33 = (char *)(v32 + *(int *)(v26 + 48));
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)();
  v35 = v44;
  SearchStateProjection.get(base:)(v32, v33, *(unsigned __int8 *)(v32 + *(int *)(v34 + 48)), (uint64_t)v44 + *(int *)(v43 + 32));
  lazy protocol witness table accessor for type SearchStateProjection and conformance SearchStateProjection();
  v36 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *v35 = *v22;
  v35[1] = v36;
  swift_retain();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>);
}

uint64_t SearchModifier.searchField.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  SearchModifier.adjustedState.getter(a1, v14);
  v15 = v3 + *(int *)(a1 + 48);
  v16 = *(_QWORD *)v15;
  v17 = *(_QWORD *)(v15 + 8);
  if ((*(_BYTE *)(v15 + 17) & 1) != 0)
  {
    v18 = *(_BYTE *)(v15 + 16) & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    v20[8] = v16 & 1;
    v21 = v17;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
    v16 = v22;
    v17 = v23;
    v18 = v24;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + *(int *)(a1 + 40), v7);
  return SearchField.init(state:isPresented:control:)((uint64_t)v14, v16, v17, v18, (uint64_t)v10, v7, *(_QWORD *)(a1 + 24), a3);
}

uint64_t SearchPrimitiveModifier.init(base:searchField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = type metadata accessor for SearchModifier(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for SearchPrimitiveModifier(0, a3, a4, v11) + 36);
  v14 = type metadata accessor for SearchField(0, a3, a4, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, a2, v14);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t type metadata accessor for SearchEnvironmentWritingModifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchEnvironmentWritingModifier;
  if (!type metadata singleton initialization cache for SearchEnvironmentWritingModifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for SearchPrimitiveModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier);
}

void type metadata accessor for Binding<(SearchFieldState, AttributedString)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<(SearchFieldState, AttributedString)>, (uint64_t (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

void type metadata accessor for (SearchFieldState, AttributedString)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (SearchFieldState, AttributedString))
  {
    type metadata accessor for SearchFieldState();
    type metadata accessor for AttributedString();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SearchFieldState, AttributedString));
  }
}

void type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Binding<((SearchFieldState, AttributedString), Bool)>, (uint64_t (*)(uint64_t))type metadata accessor for ((SearchFieldState, AttributedString), Bool), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
}

void type metadata accessor for ((SearchFieldState, AttributedString), Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool))
  {
    type metadata accessor for (SearchFieldState, AttributedString)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool));
  }
}

void type metadata accessor for LocationBox<SearchZipLocation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<SearchZipLocation>)
  {
    lazy protocol witness table accessor for type SearchZipLocation and conformance SearchZipLocation();
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<SearchZipLocation>);
  }
}

unint64_t lazy protocol witness table accessor for type SearchZipLocation and conformance SearchZipLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation;
  if (!lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchZipLocation, &type metadata for SearchZipLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation;
  if (!lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchZipLocation, &type metadata for SearchZipLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation);
  }
  return result;
}

uint64_t closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = a2 + *(int *)(type metadata accessor for SearchModifier(0, a3, a4, a4) + 48);
  v9 = *(_QWORD *)v7;
  v8 = *(_QWORD *)(v7 + 8);
  v10 = *(_BYTE *)(v7 + 17);
  *(_QWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = v5;
  v11 = *(unsigned __int8 *)(v7 + 16);
  *(_BYTE *)(v7 + 16) = v6;
  *(_BYTE *)(v7 + 17) = 1;
  swift_retain();
  swift_retain();
  return outlined consume of StateOrBinding<Bool>(v9, v8, v11, v10);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchEnvironmentWritingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchEnvironmentWritingModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchEnvironmentWritingModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchEnvironmentWritingModifier()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SearchEnvironmentWritingModifier and conformance SearchEnvironmentWritingModifier, (uint64_t (*)(uint64_t))type metadata accessor for SearchEnvironmentWritingModifier, (uint64_t)&protocol conformance descriptor for SearchEnvironmentWritingModifier);
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t static SearchPrimitiveModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ForwardEnv;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Modifier;
  uint64_t v43;
  uint64_t v44;
  uint64_t OffsetAttribute2;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t DefaultView;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(unint64_t *, _QWORD);
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  int v126;
  int v127;
  _QWORD v128[6];
  unint64_t v129;
  int v130;
  unint64_t v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  __int128 v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  __int128 v144;
  unint64_t v145;
  unint64_t v146;
  __int128 v147;
  unint64_t v148;
  int v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  __int128 v153;
  unint64_t v154;
  unint64_t v155;
  __int128 v156;
  unint64_t v157;
  int v158;
  uint64_t v159;

  v7 = a6;
  v102 = a6;
  v8 = a5;
  v104 = a5;
  v96 = a3;
  v97 = a4;
  v94 = a7;
  v159 = *MEMORY[0x1E0C80C00];
  type metadata accessor for SearchFieldState?(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v99 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter(0, v8, v7, v14);
  v93 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v15);
  v100 = (_DWORD *)((char *)&v93 - v16);
  v112 = *a1;
  v17 = *(_QWORD *)a2;
  LODWORD(v16) = *(_DWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(_DWORD *)(a2 + 24);
  v20 = *(_DWORD *)(a2 + 28);
  v21 = *(_DWORD *)(a2 + 32);
  v115 = *(_DWORD *)(a2 + 36);
  v116 = v19;
  v23 = *(_QWORD *)(a2 + 40);
  v22 = *(_QWORD *)(a2 + 48);
  v24 = *(_DWORD *)(a2 + 60);
  v108 = *(_DWORD *)(a2 + 56);
  v109 = v21;
  v25 = *(_DWORD *)(a2 + 68);
  v106 = *(_DWORD *)(a2 + 64);
  v107 = v24;
  v103 = v25;
  v26 = *(_DWORD *)(a2 + 76);
  v113 = *(_DWORD *)(a2 + 72);
  v114 = v20;
  LODWORD(v120) = v26;
  LODWORD(v119) = *(_DWORD *)(a2 + 80);
  v27 = v17;
  v150 = v17;
  v152 = v18;
  v151 = v16;
  LODWORD(v7) = v16;
  v110 = v16;
  *(_QWORD *)&v153 = __PAIR64__(v20, v19);
  *((_QWORD *)&v153 + 1) = __PAIR64__(v115, v21);
  v154 = v23;
  v155 = v22;
  v28 = v22;
  *(_QWORD *)&v156 = __PAIR64__(v24, v108);
  *((_QWORD *)&v156 + 1) = __PAIR64__(v25, v106);
  v157 = __PAIR64__(v26, v113);
  v158 = v119;
  LOBYTE(v141) = 1;
  lazy protocol witness table accessor for type IsSearchAllowedInput and conformance IsSearchAllowedInput();
  v118 = v27;
  swift_retain();
  v117 = v18;
  swift_retain();
  v111 = v23;
  swift_bridgeObjectRetain();
  v105 = v22;
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
  lazy protocol witness table accessor for type _AnyPreferenceKey<IsSearchImplementedPreferenceKey> and conformance _AnyPreferenceKey<A>();
  PreferenceKeys.add(_:)();
  PreferenceKeys.remove<A>(_:)();
  _GraphInputs.pushStableIndex(_:)(0);
  v141 = v27;
  v143 = v18;
  v142 = v7;
  LODWORD(v22) = v116;
  *(_QWORD *)&v144 = __PAIR64__(v114, v116);
  LODWORD(v8) = v114;
  v29 = v108;
  LODWORD(v7) = v109;
  *((_QWORD *)&v144 + 1) = __PAIR64__(v115, v109);
  v145 = v23;
  v146 = v28;
  *(_QWORD *)&v147 = __PAIR64__(v107, v108);
  LODWORD(v23) = v106;
  LODWORD(v28) = v107;
  *((_QWORD *)&v147 + 1) = __PAIR64__(v103, v106);
  LODWORD(v18) = v103;
  v148 = __PAIR64__(v120, v113);
  v149 = v119;
  swift_getKeyPath();
  v98 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v141 = v118;
  v143 = v117;
  v142 = v110;
  *(_QWORD *)&v144 = __PAIR64__(v8, v22);
  *((_QWORD *)&v144 + 1) = __PAIR64__(v115, v7);
  v145 = v111;
  v146 = v105;
  *(_QWORD *)&v147 = __PAIR64__(v28, v29);
  *((_QWORD *)&v147 + 1) = __PAIR64__(v18, v23);
  v148 = __PAIR64__(v120, v113);
  v149 = v119;
  swift_getKeyPath();
  LODWORD(v27) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v141 = __PAIR64__(v27, v98);
  v30 = v104;
  v31 = v102;
  v128[2] = type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment(0, v104, v102, v32);
  ForwardEnv = type metadata accessor for SearchPrimitiveModifier.MakeForwardEnv(0, v30, v31, v33);
  v128[3] = ForwardEnv;
  v128[4] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.MakeForwardEnv, ForwardEnv);
  v35 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v141, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v128, ForwardEnv, MEMORY[0x1E0DEDCE8], v35, MEMORY[0x1E0DEDD18], v36);
  LODWORD(v7) = v131;
  LODWORD(v141) = v112;
  type metadata accessor for SearchPrimitiveModifier(255, v30, v31, v37);
  v38 = type metadata accessor for _GraphValue();
  LODWORD(ForwardEnv) = _GraphValue.value.getter();
  v40 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(0, v30, v31, v39);
  v141 = __PAIR64__(v7, ForwardEnv);
  v98 = v7;
  Modifier = type metadata accessor for SearchPrimitiveModifier.MakeModifier(0, v30, v31, v41);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.MakeModifier, Modifier);
  _GraphValue.init<A>(_:)();
  v141 = v150;
  v143 = v152;
  v144 = v153;
  v145 = v154;
  v146 = v155;
  v147 = v156;
  v148 = v157;
  v142 = v151;
  v149 = v158;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v40);
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v141) = v112;
  v97 = v38;
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SearchField(0, v30, v31, v43) - 8) + 64))
    closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(1, v30, v31, v44);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v96) = OffsetAttribute2;
  v141 = v105;
  v142 = v108;
  v46 = v108;
  MEMORY[0x1E0C80A78](OffsetAttribute2, v47);
  *(&v93 - 4) = v30;
  *(&v93 - 3) = v31;
  *((_DWORD *)&v93 - 4) = v48;
  v50 = v49;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v141 = v118;
  v143 = v117;
  v52 = v109;
  v51 = v110;
  v142 = v110;
  *(_QWORD *)&v144 = __PAIR64__(v114, v116);
  *((_QWORD *)&v144 + 1) = __PAIR64__(v115, v109);
  v53 = v111;
  v145 = v111;
  v146 = v50;
  *(_QWORD *)&v147 = __PAIR64__(v107, v46);
  v55 = v106;
  v54 = v107;
  *((_QWORD *)&v147 + 1) = __PAIR64__(v103, v106);
  LODWORD(v50) = v103;
  v56 = v113;
  v148 = __PAIR64__(v120, v113);
  v149 = v119;
  swift_getKeyPath();
  v95 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v141 = v118;
  v143 = v117;
  v142 = v51;
  v57 = v115;
  *(_QWORD *)&v144 = __PAIR64__(v114, v116);
  *((_QWORD *)&v144 + 1) = __PAIR64__(v115, v52);
  v145 = v53;
  v58 = v105;
  v146 = v105;
  v59 = v108;
  *(_QWORD *)&v147 = __PAIR64__(v54, v108);
  *((_QWORD *)&v147 + 1) = __PAIR64__(v50, v55);
  v148 = __PAIR64__(v120, v56);
  v149 = v119;
  swift_getKeyPath();
  v60 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v61 = type metadata accessor for SearchFieldState();
  v62 = (uint64_t)v99;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v99, 1, 1, v61);
  v63 = v58;
  v64 = v100;
  v65 = v95;
  *v100 = v96;
  v64[1] = v65;
  v64[2] = v60;
  v66 = v102;
  v67 = outlined init with take of TableCellFormula(v62, (uint64_t)v64 + *(int *)(v101 + 44), (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  v123 = v63;
  v124 = v59;
  MEMORY[0x1E0C80A78](v67, v68);
  *(&v93 - 4) = v104;
  *(&v93 - 3) = v66;
  *(&v93 - 2) = (uint64_t)v64;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  v141 = v118;
  v143 = v117;
  v142 = v110;
  *(_QWORD *)&v144 = __PAIR64__(v114, v116);
  *((_QWORD *)&v144 + 1) = __PAIR64__(v57, v109);
  v145 = v111;
  v146 = v63;
  *(_QWORD *)&v147 = __PAIR64__(v107, v59);
  *((_QWORD *)&v147 + 1) = __PAIR64__(v50, v106);
  v148 = __PAIR64__(v120, v113);
  v149 = v119;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.implicitRootType.setter();
  _GraphInputs.pushStableIndex(_:)(1);
  v69 = v125;
  v70 = v126;
  v131 = v125;
  v132 = v126;
  v71 = PreferencesOutputs.subscript.getter();
  LODWORD(v131) = v112;
  v72 = _GraphValue.value.getter();
  LOBYTE(v131) = BYTE4(v71) & 1;
  v73 = v104;
  v75 = type metadata accessor for SearchPrimitiveModifier.DefaultSearchView(0, v104, v66, v74);
  LODWORD(v131) = v71;
  BYTE4(v131) = BYTE4(v71) & 1;
  v132 = v72;
  v133 = v98;
  DefaultView = type metadata accessor for SearchPrimitiveModifier.MakeDefaultView(0, v73, v66, v76);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.MakeDefaultView, DefaultView);
  _GraphValue.init<A>(_:)();
  v119 = v143;
  v120 = v141;
  v131 = v141;
  v134 = v143;
  v135 = v144;
  v117 = v146;
  v118 = v145;
  v136 = v145;
  v137 = v146;
  v138 = v147;
  v139 = v148;
  v132 = v142;
  v140 = v149;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.DefaultSearchView, v75);
  static View.makeDebuggableView(view:inputs:)();
  v78 = v129;
  v79 = v130;
  v129 = v69;
  v130 = v70;
  v121 = v78;
  LODWORD(v122) = v79;
  swift_bridgeObjectRetain();
  PairwisePreferenceCombinerVisitor.init(outputs:)();
  v121 = v63;
  v122 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v80 = MEMORY[0x1E0CE6700];
    v81 = MEMORY[0x1E0CE66F8];
    do
    {
      v82 = (void (*)(unint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v84 = *v83;
      v85 = v83[1];
      v82(&v129, 0);
      v86 = v122;
      v129 = v121;
      swift_bridgeObjectRetain();
      v87 = PreferenceKeys.endIndex.getter();
      if (v86 < 0 || v86 >= v87)
        __break(1u);
      v88 = v86 + 1;
      v122 = v88;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 16))(&v131, v80, v81, v84, v85);
    }
    while (v88 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v89 = v94;
  *(_DWORD *)(v94 + 12) = v127;
  v90 = *((_QWORD *)&v135 + 1);
  v91 = v136;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)v89 = v90;
  *(_DWORD *)(v89 + 8) = v91;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(_DWORD *, uint64_t))(v93 + 8))(v100, v101);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for SearchPrimitiveModifier(0, a2, a3, a4);
  v8 = a1 + *(int *)(v7 + 36);
  v13[2] = v7;
  v14 = type metadata accessor for SearchField(0, a2, a3, v9);
  v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  return v15;
}

uint64_t implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  uint64_t IsSearchFocused;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  IsSearchFocused = type metadata accessor for SearchPrimitiveModifier.MakeIsSearchFocused(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.MakeIsSearchFocused, IsSearchFocused);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v9, IsSearchFocused, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v14[4];
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter(0, a2, a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)v14 - v9, a1, v5, v8);
  v16 = v5;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.FocusStoreListFilter, v5);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_23, (uint64_t)v15, v5, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  return v14[3];
}

uint64_t SearchPrimitiveModifier.MakeForwardEnv.value.getter()
{
  uint64_t v0;
  uint64_t *Value;

  v0 = *(unsigned __int8 *)AGGraphGetValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for TriggerSubmitAction?, (uint64_t)&type metadata for TriggerSubmitAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (uint64_t *)AGGraphGetValue();
  outlined copy of AppIntentExecutor?(*Value);
  return v0;
}

double protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeForwardEnv@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_187BF9840;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeForwardEnv@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = SearchPrimitiveModifier.MakeForwardEnv.value.getter();
  *(_BYTE *)a1 = result & 1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t SearchPrimitiveModifier.MakeIsSearchFocused.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v18;

  v5 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SearchField(0, a2, a3, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v18 - v13;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, Value, v10);
  SearchField.state.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v16 = v8[*(int *)(v5 + 40)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return v16;
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeIsSearchFocused@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;

  result = SearchPrimitiveModifier.MakeIsSearchFocused.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result & 1;
  return result;
}

uint64_t SearchPrimitiveModifier.MakeModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Value;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v34 = a3;
  v35 = a5;
  v8 = type metadata accessor for SearchField(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v34 - v11;
  v14 = type metadata accessor for SearchPrimitiveModifier(0, a2, a3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v34 - v21;
  Value = AGGraphGetValue();
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24(v22, Value, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, &v22[*(int *)(v14 + 36)], v8);
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v22, v14);
  v26 = AGGraphGetValue();
  v24(v18, v26, v14);
  LOBYTE(v8) = *v18;
  v25(v18, v14);
  v27 = v34;
  v29 = specialized SearchPrimitiveModifier.MakeModifier.forwardEnv.getter(a1, a2, v34, v28);
  v31 = v30;
  SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)((uint64_t)v12, v8, v29 & 1, v30, v32, a2, v27, v35);
  return outlined copy of AppIntentExecutor?(v31);
}

uint64_t SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v16 = type metadata accessor for SearchField(0, a6, a7, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a8, a1, v16);
  result = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(0, a6, a7, v17);
  *(_BYTE *)(a8 + *(int *)(result + 36)) = a2;
  v19 = a8 + *(int *)(result + 40);
  *(_BYTE *)v19 = a3;
  *(_QWORD *)(v19 + 8) = a4;
  *(_QWORD *)(v19 + 16) = a5;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return SearchPrimitiveModifier.MakeModifier.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

void SearchPrimitiveModifier.SearchConfigModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[3];

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier);
  type metadata accessor for _ViewModifier_Content();
  v4 = type metadata accessor for SearchField(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
  v6 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  v9[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>, v4);
  v9[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v7 = MEMORY[0x1E0CE2E70];
  v8[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v9);
  v8[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>, MEMORY[0x1E0CE65C0]);
  MEMORY[0x18D75FFDC](v7, v6, v8);
  type metadata accessor for StaticSourceWriter();
}

void sub_18783D9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v4, v5);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v9 = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v3 - 192) = v1;
  *(_QWORD *)(v3 - 184) = v9;
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 224);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0, v8);
  View.viewAlias<A, B>(_:_:)(v2, (uint64_t)partial apply for closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:));
}

uint64_t sub_18783DA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v5 - 168) = v1;
  *(_QWORD *)(v5 - 160) = &protocol witness table for StaticSourceWriter<A, B>;
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v0, v3, v6);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v0, v3);
  static ViewBuilder.buildBlock<A>(_:)(v4, v3, *(_QWORD *)(v5 - 216));
  return v7(v4, v3);
}

uint64_t closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  _QWORD v29[2];
  _QWORD v30[2];

  v7 = type metadata accessor for SearchField(255, a1, a2, a3);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
  v9 = type metadata accessor for ModifiedContent();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v29 - v16;
  v19 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(0, a1, a2, v18);
  SearchPrimitiveModifier.SearchConfigModifier.field.getter(v19, v20, (uint64_t)v13);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>, v7);
  v22 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v30[0] = v21;
  v30[1] = v22;
  v23 = MEMORY[0x1E0CE2E70];
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v30);
  v25 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>, MEMORY[0x1E0CE65C0]);
  v29[0] = v24;
  v29[1] = v25;
  v26 = MEMORY[0x18D75FFDC](v23, v9, v29);
  static ViewBuilder.buildExpression<A>(_:)(v13, v9, v26);
  v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v13, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v17, v9, a4);
  return ((uint64_t (*)(char *, uint64_t))v27)(v17, v9);
}

uint64_t SearchPrimitiveModifier.SearchConfigModifier.field.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v23[1] = a3;
  v6 = type metadata accessor for SearchField(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v23 - v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)v23 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v4, v6, v14);
  swift_getKeyPath();
  v17 = v4 + *(int *)(a1 + 40);
  LOBYTE(v25) = *(_BYTE *)v17;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>, v6);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  swift_getKeyPath();
  v19 = *(_QWORD *)(v17 + 8);
  v20 = *(_QWORD *)(v17 + 16);
  v25 = v19;
  v26 = v20;
  outlined copy of AppIntentExecutor?(v19);
  v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v24[0] = v18;
  v24[1] = v21;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v24);
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
}

uint64_t SearchPrimitiveModifier.MakeDefaultView.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  uint64_t Value;
  char Default;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;

  v29 = a2;
  v30 = a5;
  v28 = type metadata accessor for SearchField(0, a3, a4, a4);
  v8 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v9);
  v11 = &v26[-v10];
  v13 = type metadata accessor for SearchPrimitiveModifier(0, a3, a4, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = &v26[-v16];
  v31 = BYTE4(a1) & 1;
  if ((a1 & 0x100000000) != 0)
    v18 = 1;
  else
    v18 = *(unsigned __int8 *)AGGraphGetValue() ^ 1;
  v27 = v18;
  v19 = v29;
  Value = AGGraphGetValue();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v17, Value, v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v11, &v17[*(int *)(v13 + 36)], v28);
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  Default = specialized SearchPrimitiveModifier.MakeDefaultView.forwardEnv.getter(a1 | ((HIDWORD(a1) & 1) << 32), v19, a3, a4);
  v23 = v22;
  SearchPrimitiveModifier.DefaultSearchView.init(shouldUse:searchField:forwardEnv:)(v27 & 1, (uint64_t)v11, Default & 1, v22, v24, a3, a4, v30);
  return outlined copy of AppIntentExecutor?(v23);
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.init(shouldUse:searchField:forwardEnv:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _BYTE *v20;

  *a8 = a1;
  v15 = type metadata accessor for SearchPrimitiveModifier.DefaultSearchView(0, a6, a7, a4);
  v16 = &a8[*(int *)(v15 + 36)];
  v18 = type metadata accessor for SearchField(0, a6, a7, v17);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, a2, v18);
  v20 = &a8[*(int *)(v15 + 40)];
  *v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  *((_QWORD *)v20 + 2) = a5;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeDefaultView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for SearchPrimitiveModifier.DefaultSearchView, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeDefaultView@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unsigned int *v2;

  return SearchPrimitiveModifier.MakeDefaultView.value.getter(*v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32), *((_QWORD *)v2 + 1), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[2];
  __int16 v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[3];

  v4 = v3;
  v55 = a3;
  v6 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v51 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v49 - v8;
  v10 = type metadata accessor for ModifiedContent();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v53 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v54 = (char *)&v49 - v16;
  v17 = type metadata accessor for Optional();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v49 - v25;
  v52 = v4;
  if (*v4 == 1)
  {
    KeyPath = swift_getKeyPath();
    v50 = v18;
    v28 = KeyPath;
    v29 = swift_getKeyPath();
    v49 = v11;
    v30 = v17;
    v31 = v6;
    v32 = v26;
    v33 = v29;
    v34 = swift_getKeyPath();
    v57 = 0;
    v58 = v28;
    v59 = 0;
    v60 = v33;
    v26 = v32;
    v6 = v31;
    v17 = v30;
    v61 = 0;
    v62 = v34;
    v63 = 0;
    SearchPrimitiveModifier.DefaultSearchView.modifier.getter(a1, v35, (uint64_t)v9);
    v36 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
    v37 = v53;
    MEMORY[0x18D75B4AC](v9, &type metadata for SearchOverlayView, v6, v36);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v9, v6);
    outlined consume of Environment<Bool>.Content(v58, v59);
    outlined consume of Environment<Bool>.Content(v60, v61);
    outlined consume of Environment<Bool>.Content(v62, v63);
    v38 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v6);
    v56[0] = v36;
    v56[1] = v38;
    v39 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v56);
    v40 = (uint64_t)v54;
    static ViewBuilder.buildExpression<A>(_:)(v37, v10, v39);
    v41 = v49;
    v42 = *(void (**)(char *, uint64_t))(v49 + 8);
    v42(v37, v10);
    static ViewBuilder.buildBlock<A>(_:)(v40, v10, (uint64_t)v21);
    v42((char *)v40, v10);
    v18 = v50;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v21, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v11 + 56))(v21, 1, 1, v10, v24);
    v43 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
    v44 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v6);
    v66[0] = v43;
    v66[1] = v44;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v66);
  }
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v21, (uint64_t)v26);
  v45 = *(void (**)(char *, uint64_t))(v18 + 8);
  v45(v21, v17);
  v46 = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
  v47 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v6);
  v65[0] = v46;
  v65[1] = v47;
  v64 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v65);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v17, &v64);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v26, v17, v55);
  return ((uint64_t (*)(char *, uint64_t))v45)(v26, v17);
}

uint64_t SearchPrimitiveModifier.DefaultSearchView.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = type metadata accessor for SearchField(0, v6, v7, a2);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v17 - v11;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v17 - v11, v3 + *(int *)(a1 + 36), v10);
  v14 = v3 + *(int *)(a1 + 40);
  v15 = *(_QWORD *)(v14 + 8);
  SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)((uint64_t)v12, 2, *(_BYTE *)v14, v15, *(_QWORD *)(v14 + 16), v6, v7, a3);
  return outlined copy of AppIntentExecutor?(v15);
}

uint64_t SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t Value;

  v4 = type metadata accessor for SearchField(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a3, Value, v4);
}

uint64_t SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  char v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  char v51;
  uint64_t Value;
  char v53;
  char v54;
  uint64_t *v55;
  char v56;
  char v57;
  uint64_t OutputValue;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81[7];

  v81[5] = *MEMORY[0x1E0C80C00];
  v72 = type metadata accessor for SearchFieldState();
  v74 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v3);
  v67 = (unsigned __int8 *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (SearchFieldState?, SearchFieldState?)();
  v75 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v73 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchFieldState?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v68 = (unsigned __int8 *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v66 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v66 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  v77 = *(_QWORD *)(a1 + 24);
  v78 = v19;
  v21 = type metadata accessor for SearchField(0, v19, v77, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v66 - v28;
  type metadata accessor for Binding<SearchFieldState>(0);
  v69 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v70 = v32;
  v71 = (uint64_t)&v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v66 - v35;
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter(a1, v37, (uint64_t)v29);
  v76 = v36;
  v38 = (uint64_t)v36;
  v39 = v72;
  SearchField.$state.getter(v38);
  v40 = *(void (**)(char *, uint64_t))(v22 + 8);
  v40(v29, v21);
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter(a1, v41, (uint64_t)v25);
  SearchField.state.getter();
  v42 = v21;
  v43 = v1;
  v40(v25, v42);
  v45 = (uint64_t)v73;
  v44 = v74;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v18, 0, 1, v39);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + *(int *)(a1 + 44), (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  v46 = v45 + *(int *)(v75 + 48);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v18, v45, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, v46, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v47(v45, 1, v39) != 1)
  {
    v49 = v68;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
    if (v47(v46, 1, v39) != 1)
    {
      v50 = v67;
      outlined init with take of TableCellFormula(v46, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      v51 = specialized static SearchFieldState.== infix(_:_:)(v49, v50);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
      v48 = v51 ^ 1;
      goto LABEL_8;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  if (v47(v46, 1, v39) != 1)
  {
LABEL_6:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for (SearchFieldState?, SearchFieldState?));
    v48 = 1;
    goto LABEL_8;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState?);
  v48 = 0;
LABEL_8:
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  v54 = v53;
  outlined init with take of SearchFocusContext?(Value, (uint64_t)v81);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E0CE7DD0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v55 = (uint64_t *)AGGraphGetValue();
  v57 = v56;
  type metadata accessor for (_:)();
  OutputValue = AGGraphGetOutputValue();
  v59 = (uint64_t)v76;
  if (!OutputValue || (v48 & 1) != 0 || (v54 & 1) != 0 || (v57 & 1) != 0)
  {
    v60 = *v55;
    v61 = v71;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v76, v71, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v62 = (*(unsigned __int8 *)(v69 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
    v63 = swift_allocObject();
    outlined init with take of SearchFocusContext?((uint64_t)v81, v63 + 16);
    *(_QWORD *)(v63 + 56) = v60;
    outlined init with take of TableCellFormula(v61, v63 + v62, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v79 = partial apply for closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue();
    v80 = v63;
    outlined retain of SearchFocusContext?(v81);
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_release();
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v59, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  return $defer #1 <A>() in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(v43, v78, v77, v64);
}

uint64_t $defer #1 <A>() in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v7 = type metadata accessor for SearchField(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v26 - v10;
  v13 = type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter(0, a2, a3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v26 - v16;
  type metadata accessor for SearchFieldState?(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v13, v20);
  SearchPrimitiveModifier.FocusStoreListFilter.searchField.getter(v13, v23, (uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  SearchField.state.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v24 = type metadata accessor for SearchFieldState();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v22, 0, 1, v24);
  return outlined assign with take of SearchFieldState?((uint64_t)v22, a1 + *(int *)(v13 + 44));
}

uint64_t closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[72];
  _QWORD v15[9];
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BYTE v21[16];
  uint64_t v22;
  __int128 v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  __int128 v25;
  __int128 v26;

  outlined init with take of SearchFocusContext?(a2, (uint64_t)v21);
  result = outlined init with take of SearchFocusContext?(a2, (uint64_t)&v22);
  if ((_QWORD)v23)
  {
    v25 = v23;
    v9 = v22;
    v10 = v24;
    swift_retain();
    swift_retain();
    DisplayList.Version.init(forUpdate:)();
    v26 = v25;
    swift_retain();
    v11 = v10(a3, a4);
    v16[0] = v15[0];
    v16[1] = v9;
    v17 = v26;
    v18 = v11;
    v19 = v12;
    swift_weakInit();
    swift_weakInit();
    v20 = 0;
    v13 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    outlined init with copy of FocusStoreList.Item((uint64_t)v16, (uint64_t)v15);
    outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v15, (uint64_t)v14);
    specialized Array.replaceSubrange<A>(_:with:)(v13, v13, (uint64_t)v14);
    outlined destroy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v15);
    outlined release of AnyDynamicChild<A, B>((uint64_t)&v26);
    swift_release();
    return outlined destroy of FocusStoreList.Item((uint64_t)v16);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchPrimitiveModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchPrimitiveModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>, a5);
  return static UnaryViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetSearchEnvironmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetSearchEnvironmentModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetSearchEnvironmentModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ResetSearchEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static ResetSearchEnvironmentModifier.makeEnvironment(modifier:environment:)(a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetSearchEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SearchStateProjection and conformance SearchStateProjection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchStateProjection, &type metadata for SearchStateProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchStateProjection, &type metadata for SearchStateProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchStateProjection, &type metadata for SearchStateProjection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

uint64_t partial apply for closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(a1, v1[4], v1[2], v1[3]);
}

ValueMetadata *type metadata accessor for IsSearchAllowedInput()
{
  return &type metadata for IsSearchAllowedInput;
}

ValueMetadata *type metadata accessor for IsSearchImplementedPreferenceKey()
{
  return &type metadata for IsSearchImplementedPreferenceKey;
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchEnvironmentWritingModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v30;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v30 = &v10[v13];
    v14 = &v11[v13];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v30, v14, v15);
    v17 = v16;
    v10[v12[10]] = v11[v12[10]];
    v18 = v12[11];
    v19 = &v10[v18];
    v20 = &v11[v18];
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v21 = *(int *)(a3 + 20);
    v22 = (_QWORD *)((char *)v7 + v21);
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    *v22 = *(_QWORD *)((char *)a2 + v21);
    v22[1] = v24;
    type metadata accessor for Binding<AttributedString>();
    v26 = *(int *)(v25 + 32);
    v27 = (char *)v22 + v26;
    v28 = &v23[v26];
    swift_retain();
    swift_retain();
    v17(v27, v28, v15);
    *((_BYTE *)v7 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v7;
}

uint64_t destroy for SearchEnvironmentWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);

  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = v5 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v7 = type metadata accessor for AttributedString();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v11(v6, v7);
  v8 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 32), v7);
}

_QWORD *initializeWithCopy for SearchEnvironmentWritingModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v28)(char *, char *, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v28 = v15;
  swift_retain();
  swift_retain();
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = *(int *)(a3 + 20);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  *v20 = *(_QWORD *)((char *)a2 + v19);
  v20[1] = v22;
  type metadata accessor for Binding<AttributedString>();
  v24 = *(int *)(v23 + 32);
  v25 = (char *)v20 + v24;
  v26 = &v21[v24];
  swift_retain();
  swift_retain();
  v28(v25, v26, v14);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithCopy for SearchEnvironmentWritingModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_retain();
  swift_release();
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v15(&v20[*(int *)(v22 + 32)], &v21[*(int *)(v22 + 32)], v14);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *initializeWithTake for SearchEnvironmentWritingModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v17 = v11[11];
  v18 = &v9[v17];
  v19 = &v10[v17];
  v18[4] = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  v20 = *(int *)(a3 + 20);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20 + 8);
  *(_QWORD *)v21 = *(_QWORD *)((char *)a2 + v20);
  *((_QWORD *)v21 + 1) = v23;
  type metadata accessor for Binding<AttributedString>();
  v16(&v21[*(int *)(v24 + 32)], &v22[*(int *)(v24 + 32)], v15);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for SearchEnvironmentWritingModifier(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_release();
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v15(&v20[*(int *)(v22 + 32)], &v21[*(int *)(v22 + 32)], v14);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEnvironmentWritingModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18783F84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  type metadata accessor for Binding<AttributedString>();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 7u)
    v14 = 7;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v15 = v14 - 7;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 2u)
    return v15;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SearchEnvironmentWritingModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18783F908(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for Binding<SearchFieldState>(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  type metadata accessor for Binding<AttributedString>();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 7;
}

void type metadata completion function for SearchEnvironmentWritingModifier()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for SearchPrimitiveModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  result = type metadata accessor for SearchModifier(319, v4, v5, a4);
  if (v8 <= 0x3F)
  {
    result = type metadata accessor for SearchField(319, v4, v5, v7);
    if (v9 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(unint64_t, unint64_t, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  char v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  char v87;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void (*v97)(unint64_t, unint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = (v8 + 40) & ~v8;
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for AttributedString();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13;
  v15 = v13 | 7;
  v16 = *(_QWORD *)(v12 + 64);
  v17 = ((v14 + 16) & ~v14) + v16 + 7;
  v18 = v15 + 18;
  v107 = v13 + 9;
  v109 = v16;
  v19 = ((v14 + 9) & ~v14) + v16;
  v20 = v13 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = v15 | v7;
  v23 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + ((v13 + 16) & v20) + 9;
  if (v23 <= v21)
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  v105 = v23;
  v24 = v10
      + ((v7 + (v23 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)v7)
      + ((((v18
          + ((v17 + (((v13 | 7) + v10 + v9) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v13 | 7))
        + v21
        + v22) & ~v22)
      + 1;
  v25 = (v13 | v7) & 0x100000;
  if ((v14 | (unint64_t)v7) > 7 || v25 != 0 || v24 > 0x18)
  {
    v28 = *a2;
    *(_QWORD *)a1 = *a2;
    v29 = v28 + (((v14 | v7) & 0xF8 ^ 0x1F8) & ((v14 | v7) + 16));
    swift_retain();
  }
  else
  {
    v92 = v14 | 7 | v7;
    v93 = (v14 | 7) + 18;
    v94 = ((v18 + ((v17 + (((v14 | 7) + v10 + v9) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v14 | 7)) + v21 + v22;
    v95 = ((v14 + 9) & ~v14) + v16;
    v90 = v20;
    v108 = ~v14;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v101 = a1;
    v30 = (unint64_t)a2;
    v31 = a1 & 0xFFFFFFFFFFFFFFF8;
    v96 = v30;
    v32 = v30 & 0xFFFFFFFFFFFFFFF8;
    v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 8);
    v34 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 16);
    v106 = v10;
    v35 = *(_BYTE *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
    v103 = v12;
    v104 = v11;
    v102 = v14;
    v91 = ((v14 + 16) & ~v14) + v16 + 7;
    outlined copy of Text.Storage(v33, v34, v35);
    *(_QWORD *)(v31 + 8) = v33;
    *(_QWORD *)(v31 + 16) = v34;
    *(_BYTE *)(v31 + 24) = v35;
    *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
    v98 = ~v8;
    v99 = v8;
    v36 = (v32 + v8 + 40) & ~v8;
    v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v100 = v5;
    v97 = v37;
    v37((v31 + v8 + 40) & ~v8, v36, v5);
    v38 = (_QWORD *)((((v31 + v8 + 40) & ~v8) + v106 + v15) & ~v15);
    v39 = ~v15;
    v40 = (_QWORD *)((v36 + v106 + v15) & ~v15);
    *v38 = *v40;
    v41 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    v42 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v41 = *v42;
    v43 = ((unint64_t)v41 + v102 + 8) & v108;
    v89 = v102 + 8;
    v44 = ((unint64_t)v42 + v102 + 8) & v108;
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16);
    swift_retain();
    swift_retain();
    v45(v43, v44, v104);
    v46 = ((unint64_t)v38 + v91) & 0xFFFFFFFFFFFFFFF8;
    v47 = ((unint64_t)v40 + v91) & 0xFFFFFFFFFFFFFFF8;
    v48 = *(unsigned __int8 *)(v47 + 17);
    if (v48 >= 2)
      v48 = *(_DWORD *)v47 + 2;
    v49 = ~v92;
    if (v48 == 1)
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
      *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
      swift_retain();
      v50 = 1;
    }
    else
    {
      v50 = 0;
      *(_BYTE *)v46 = *(_BYTE *)v47;
      *(_QWORD *)(v46 + 8) = *(_QWORD *)(v47 + 8);
    }
    v29 = v101;
    swift_retain();
    *(_BYTE *)(v46 + 17) = v50;
    v51 = (v93 + v46) & v39;
    v52 = (v93 + v47) & v39;
    *(_BYTE *)v51 = *(_BYTE *)v52;
    *(_BYTE *)(v51 | 1) = *(_BYTE *)(v52 | 1);
    *(_BYTE *)(v51 | 2) = *(_BYTE *)(v52 | 2);
    *(_BYTE *)(v51 | 3) = *(_BYTE *)(v52 | 3);
    v53 = v51 | 4;
    v54 = *(_DWORD *)(v52 | 4);
    *(_BYTE *)(v53 + 4) = *(_BYTE *)((v52 | 4) + 4);
    *(_DWORD *)v53 = v54;
    v55 = (v107 + v51) & v108;
    v56 = (v107 + v52) & v108;
    v45(v55, v56, v104);
    *(_BYTE *)(v55 + v109) = *(_BYTE *)(v56 + v109);
    v57 = (v55 + v109) & 0xFFFFFFFFFFFFFFFCLL;
    v58 = (v56 + v109) & 0xFFFFFFFFFFFFFFFCLL;
    v59 = *(_DWORD *)(v58 + 4);
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
    *(_DWORD *)(v57 + 4) = v59;
    *(_QWORD *)((v95 + 16 + v51) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v95 + 16 + v52) & 0xFFFFFFFFFFFFF8);
    v60 = (v94 + v101) & v49;
    v61 = (v94 + v96) & v49;
    v62 = *(unsigned __int8 *)(v61 + v105);
    swift_retain();
    if (v62 >= 2)
    {
      if (v105 <= 3)
        v63 = v105;
      else
        v63 = 4;
      __asm { BR              X11 }
    }
    if (v62 == 1)
    {
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v64 = (_QWORD *)((v60 + 15) & 0xFFFFFFFFFFFFFFF8);
      v65 = (_QWORD *)((v61 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v64 = *v65;
      v66 = ((unint64_t)v64 + v89) & v90;
      v67 = ((unint64_t)v65 + v89) & v90;
      v68 = v67 + 7;
      *(_BYTE *)v66 = *(_BYTE *)v67;
      *(_BYTE *)(v66 | 1) = *(_BYTE *)(v67 | 1);
      *(_BYTE *)(v66 | 2) = *(_BYTE *)(v67 | 2);
      *(_BYTE *)(v66 | 3) = *(_BYTE *)(v67 | 3);
      v69 = (v66 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v70 = *(_DWORD *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
      *(_BYTE *)(v69 + 4) = *(_BYTE *)((v68 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(_DWORD *)v69 = v70;
      v71 = (v102 + 5 + v69) & v108;
      v72 = (v102 + 5 + (v68 & 0xFFFFFFFFFFFFFFFCLL)) & v108;
      swift_retain();
      swift_retain();
      v45(v71, v72, v104);
      *(_BYTE *)(v71 + v109) = *(_BYTE *)(v72 + v109);
      v73 = (v71 + v109) & 0xFFFFFFFFFFFFFFFCLL;
      v74 = (v72 + v109) & 0xFFFFFFFFFFFFFFFCLL;
      v75 = *(_DWORD *)(v74 + 4);
      *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
      *(_DWORD *)(v73 + 4) = v75;
      v76 = 1;
    }
    else
    {
      *(_BYTE *)v60 = *(_BYTE *)v61;
      *(_BYTE *)(v60 | 1) = *(_BYTE *)(v61 | 1);
      *(_BYTE *)(v60 | 2) = *(_BYTE *)(v61 | 2);
      *(_BYTE *)(v60 | 3) = *(_BYTE *)(v61 | 3);
      v77 = v60 | 4;
      v78 = *(_DWORD *)(v61 | 4);
      *(_BYTE *)(v77 + 4) = *(_BYTE *)((v61 | 4) + 4);
      *(_DWORD *)v77 = v78;
      v79 = (v107 + v60) & v108;
      v80 = (v107 + v61) & v108;
      v45(v79, v80, v104);
      *(_BYTE *)(v79 + v109) = *(_BYTE *)(v80 + v109);
      v81 = (v79 + v109) & 0xFFFFFFFFFFFFFFFCLL;
      v82 = (v80 + v109) & 0xFFFFFFFFFFFFFFFCLL;
      v83 = *(_DWORD *)(v82 + 4);
      *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
      *(_DWORD *)(v81 + 4) = v83;
      *(_QWORD *)((v95 + 16 + v60) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v95 + 16 + v61) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      v76 = 0;
    }
    *(_BYTE *)(v60 + v105) = v76;
    v84 = (v105 + 8 + v60) & 0xFFFFFFFFFFFFFFF8;
    v85 = (v105 + 8 + v61) & 0xFFFFFFFFFFFFFFF8;
    v86 = *(unsigned __int8 *)(v85 + 17);
    if (v86 >= 2)
      v86 = *(_DWORD *)v85 + 2;
    if (v86 == 1)
    {
      *(_QWORD *)v84 = *(_QWORD *)v85;
      *(_QWORD *)(v84 + 8) = *(_QWORD *)(v85 + 8);
      *(_BYTE *)(v84 + 16) = *(_BYTE *)(v85 + 16);
      swift_retain();
      v87 = 1;
    }
    else
    {
      v87 = 0;
      *(_BYTE *)v84 = *(_BYTE *)v85;
      *(_QWORD *)(v84 + 8) = *(_QWORD *)(v85 + 8);
    }
    swift_retain();
    *(_BYTE *)(v84 + 17) = v87;
    v97((v99 + 18 + v84) & v98, (v99 + 18 + v85) & v98, v100);
    *(_BYTE *)(((v99 + 18 + v84) & v98) + v106) = *(_BYTE *)(((v99 + 18 + v85) & v98) + v106);
  }
  return v29;
}

uint64_t destroy for SearchPrimitiveModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, uint64_t);

  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 40 + v3) & ~v6;
  v33 = *(void (**)(uint64_t))(v5 + 8);
  v34 = v4;
  v33(v7);
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 | 7;
  v31 = v8;
  v13 = ((v11 | 7) + v8 + v7) & ~(v11 | 7);
  swift_release();
  swift_release();
  v36 = *(void (**)(unint64_t, uint64_t))(v10 + 8);
  v36((v11 + 8 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11, v9);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = v14 + ((v11 + 16) & ~v11);
  v16 = (v15 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(unsigned __int8 *)(v16 + 17);
  if (v17 >= 2)
    v17 = *(_DWORD *)v16 + 2;
  v30 = ~v6;
  v18 = ~v12;
  v35 = ~v11;
  if (v17 == 1)
    swift_release();
  swift_release();
  v36((v11 + 9 + ((v12 + 18 + v16) & v18)) & v35, v9);
  v19 = v14 + ((v11 + 9) & v35);
  v20 = v11 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v21 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + ((v11 + 16) & v20);
  swift_release();
  v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  v23 = ((v12 | v6)
       + a1
       + v22
       + ((v12 + 18 + ((((((v6 + 40) & v30) + v31 + v12) & v18 | 7) + v15) & 0xFFFFFFFFFFFFFFF8)) & v18)) & ~(v12 | v6);
  if (v21 + 9 <= v22)
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v24 = v21 + 9;
  v25 = *(unsigned __int8 *)(v23 + v24);
  if (v25 >= 2)
  {
    if (v24 <= 3)
      v26 = v24;
    else
      v26 = 4;
    __asm { BR              X12 }
  }
  if (v25 == 1)
  {
    swift_release();
    swift_release();
    v36((v11 + ((((v11 + 8 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8)) & v20) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v35, v9);
  }
  else
  {
    v36((v11 + 9 + v23) & v35, v9);
    swift_release();
  }
  v27 = (v24 + v23 + 8) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(unsigned __int8 *)(v27 + 17);
  if (v28 >= 2)
    v28 = *(_DWORD *)v27 + 2;
  if (v28 == 1)
    swift_release();
  swift_release();
  return ((uint64_t (*)(unint64_t, uint64_t))v33)((v6 + v27 + 18) & v30, v34);
}

unint64_t initializeWithCopy for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  unint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v84)(unint64_t, unint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 40 + v4) & ~v11;
  v82 = v11 + 40;
  v92 = v11;
  v13 = (v11 + 40 + v5) & ~v11;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  v84 = v14;
  v85 = v9;
  v14(v12, v13, v9);
  v15 = *(_QWORD *)(v10 + 64);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v18 | 7;
  v90 = v15;
  v20 = (v18 | 7) + v15;
  v21 = (_QWORD *)((v20 + v12) & ~(v18 | 7));
  v22 = (_QWORD *)((v20 + v13) & ~(v18 | 7));
  *v21 = *v22;
  v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + v18 + 8) & ~v18;
  v80 = v18 + 8;
  v26 = ((unint64_t)v24 + v18 + 8) & ~v18;
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  swift_retain();
  swift_retain();
  v87 = v27;
  v88 = v16;
  v27(v25, v26, v16);
  v86 = *(_QWORD *)(v17 + 64);
  v81 = v86 + ((v18 + 16) & ~v18);
  v28 = ((unint64_t)v21 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v22 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(unsigned __int8 *)(v29 + 17);
  if (v30 >= 2)
    v30 = *(_DWORD *)v29 + 2;
  v89 = ~v92;
  v31 = ~v19;
  v32 = ~v18;
  if (v30 == 1)
  {
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
    *(_BYTE *)(v28 + 16) = *(_BYTE *)(v29 + 16);
    swift_retain();
    v33 = 1;
  }
  else
  {
    v33 = 0;
    *(_BYTE *)v28 = *(_BYTE *)v29;
    *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  }
  swift_retain();
  *(_BYTE *)(v28 + 17) = v33;
  v34 = (v19 + 18 + v28) & v31;
  v35 = (v19 + 18 + v29) & v31;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  *(_BYTE *)(v34 | 1) = *(_BYTE *)(v35 | 1);
  *(_BYTE *)(v34 | 2) = *(_BYTE *)(v35 | 2);
  *(_BYTE *)(v34 | 3) = *(_BYTE *)(v35 | 3);
  v36 = v34 | 4;
  v37 = *(_DWORD *)(v35 | 4);
  *(_BYTE *)(v36 + 4) = *(_BYTE *)((v35 | 4) + 4);
  *(_DWORD *)v36 = v37;
  v38 = v18 + 9;
  v39 = (v18 + 9 + v35) & v32;
  v87((v18 + 9 + v34) & v32, v39, v88);
  v40 = ((v18 + 9 + v34) & v32) + v86;
  *(_BYTE *)v40 = *(_BYTE *)(v39 + v86);
  v40 &= 0xFFFFFFFFFFFFFFFCLL;
  v41 = (v39 + v86) & 0xFFFFFFFFFFFFFFFCLL;
  v42 = *(_DWORD *)(v41 + 4);
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  *(_DWORD *)(v40 + 4) = v42;
  v43 = v86 + ((v18 + 9) & v32);
  v44 = v18 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v45 = (v43 & 0xFFFFFFFFFFFFFFFCLL) + ((v18 + 16) & v44);
  v46 = v43 + 16;
  *(_QWORD *)((v43 + 16 + v34) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v43 + 16 + v35) & 0xFFFFFFFFFFFFF8);
  v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  v48 = v19 | v92;
  v49 = ((v19 + 18 + (((((v82 & v89) + v90 + v19) & v31 | 7) + v81) & 0xFFFFFFFFFFFFFFF8)) & v31) + v47 + (v19 | v92);
  v50 = (v49 + a1) & ~(v19 | v92);
  v51 = (v49 + a2) & ~v48;
  v52 = v45 + 9;
  if (v52 <= v47)
    v53 = v47;
  else
    v53 = v52;
  v54 = *(unsigned __int8 *)(v51 + v53);
  swift_retain();
  if (v54 >= 2)
  {
    if (v53 <= 3)
      v55 = v53;
    else
      v55 = 4;
    __asm { BR              X11 }
  }
  if (v54 == 1)
  {
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v56 = (_QWORD *)((v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    v57 = (_QWORD *)((v51 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v56 = *v57;
    v58 = ((unint64_t)v56 + v80) & v44;
    v59 = ((unint64_t)v57 + v80) & v44;
    v60 = v59 + 7;
    *(_BYTE *)v58 = *(_BYTE *)v59;
    *(_BYTE *)(v58 | 1) = *(_BYTE *)(v59 | 1);
    *(_BYTE *)(v58 | 2) = *(_BYTE *)(v59 | 2);
    *(_BYTE *)(v58 | 3) = *(_BYTE *)(v59 | 3);
    v61 = (v58 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v62 = *(_DWORD *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
    *(_BYTE *)(v61 + 4) = *(_BYTE *)((v60 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)v61 = v62;
    v63 = (v18 + 5 + v61) & v32;
    v64 = (v18 + 5 + (v60 & 0xFFFFFFFFFFFFFFFCLL)) & v32;
    swift_retain();
    swift_retain();
    v87(v63, v64, v88);
    *(_BYTE *)(v63 + v86) = *(_BYTE *)(v64 + v86);
    v65 = (v63 + v86) & 0xFFFFFFFFFFFFFFFCLL;
    v66 = (v64 + v86) & 0xFFFFFFFFFFFFFFFCLL;
    v67 = *(_DWORD *)(v66 + 4);
    *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
    *(_DWORD *)(v65 + 4) = v67;
    v68 = 1;
  }
  else
  {
    *(_BYTE *)v50 = *(_BYTE *)v51;
    *(_BYTE *)(v50 | 1) = *(_BYTE *)(v51 | 1);
    *(_BYTE *)(v50 | 2) = *(_BYTE *)(v51 | 2);
    *(_BYTE *)(v50 | 3) = *(_BYTE *)(v51 | 3);
    v69 = v50 | 4;
    v70 = *(_DWORD *)(v51 | 4);
    *(_BYTE *)(v69 + 4) = *(_BYTE *)((v51 | 4) + 4);
    *(_DWORD *)v69 = v70;
    v71 = (v38 + v51) & v32;
    v87((v38 + v50) & v32, v71, v88);
    v72 = ((v38 + v50) & v32) + v86;
    *(_BYTE *)v72 = *(_BYTE *)(v71 + v86);
    v72 &= 0xFFFFFFFFFFFFFFFCLL;
    v73 = (v71 + v86) & 0xFFFFFFFFFFFFFFFCLL;
    v74 = *(_DWORD *)(v73 + 4);
    *(_BYTE *)(v72 + 8) = *(_BYTE *)(v73 + 8);
    *(_DWORD *)(v72 + 4) = v74;
    *(_QWORD *)((v46 + v50) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v46 + v51) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v68 = 0;
  }
  *(_BYTE *)(v50 + v53) = v68;
  v75 = (v53 + 8 + v50) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v53 + 8 + v51) & 0xFFFFFFFFFFFFFFF8;
  v77 = *(unsigned __int8 *)(v76 + 17);
  if (v77 >= 2)
    v77 = *(_DWORD *)v76 + 2;
  if (v77 == 1)
  {
    *(_QWORD *)v75 = *(_QWORD *)v76;
    *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
    *(_BYTE *)(v75 + 16) = *(_BYTE *)(v76 + 16);
    swift_retain();
    v78 = 1;
  }
  else
  {
    v78 = 0;
    *(_BYTE *)v75 = *(_BYTE *)v76;
    *(_QWORD *)(v75 + 8) = *(_QWORD *)(v76 + 8);
  }
  swift_retain();
  *(_BYTE *)(v75 + 17) = v78;
  v84((v92 + 18 + v75) & v89, (v92 + 18 + v76) & v89, v85);
  result = a1;
  *(_BYTE *)(((v92 + 18 + v75) & v89) + v90) = *(_BYTE *)(((v92 + 18 + v76) & v89) + v90);
  return result;
}

unint64_t assignWithCopy for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  unint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(unint64_t, unint64_t, uint64_t);
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v8 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_BYTE *)(v4 + 24);
  *(_QWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 24) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v88 = ~v14;
  v89 = v14;
  v15 = (v14 + 40 + v4) & ~v14;
  v82 = v14 + 40;
  v16 = (v14 + 40 + v5) & ~v14;
  v84 = *(void (**)(uint64_t, uint64_t))(v13 + 24);
  v85 = v12;
  v84(v15, v16);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = type metadata accessor for AttributedString();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v20 | 7;
  v87 = v17;
  v22 = (v20 | 7) + v17;
  v81 = ~(v20 | 7);
  v23 = (_QWORD *)((v22 + v15) & v81);
  v24 = (_QWORD *)((v22 + v16) & v81);
  *v23 = *v24;
  swift_retain();
  swift_release();
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  swift_retain();
  swift_release();
  v91 = ~v20;
  v76 = v20 + 8;
  v92 = v18;
  v78 = *(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 24);
  v78(((unint64_t)v25 + v20 + 8) & ~v20, ((unint64_t)v26 + v20 + 8) & ~v20, v18);
  v77 = v19;
  v86 = *(_QWORD *)(v19 + 64);
  v80 = v86 + ((v20 + 16) & ~v20);
  v27 = ((unint64_t)v23 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v24 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v27 != v28)
  {
    v29 = *(unsigned __int8 *)(v27 + 17);
    if (v29 >= 2)
      v29 = *(_DWORD *)v27 + 2;
    if (v29 == 1)
      swift_release();
    swift_release();
    v30 = *(unsigned __int8 *)(v28 + 17);
    if (v30 >= 2)
      v30 = *(_DWORD *)v28 + 2;
    if (v30 == 1)
    {
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
      *(_BYTE *)(v27 + 16) = *(_BYTE *)(v28 + 16);
      *(_BYTE *)(v27 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v27 = *(_BYTE *)v28;
      *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
      *(_BYTE *)(v27 + 17) = 0;
    }
    swift_retain();
  }
  v31 = (v21 + 18 + v27) & v81;
  v32 = (v21 + 18 + v28) & v81;
  *(_BYTE *)v31 = *(_BYTE *)v32;
  *(_BYTE *)(v31 | 1) = *(_BYTE *)(v32 | 1);
  *(_BYTE *)(v31 | 2) = *(_BYTE *)(v32 | 2);
  *(_BYTE *)(v31 | 3) = *(_BYTE *)(v32 | 3);
  v33 = v31 | 4;
  v34 = *(_DWORD *)(v32 | 4);
  *(_BYTE *)(v33 + 4) = *(_BYTE *)((v32 | 4) + 4);
  *(_DWORD *)v33 = v34;
  v35 = v20 + 9;
  v36 = (v20 + 9 + v31) & v91;
  v37 = (v20 + 9 + v32) & v91;
  v78(v36, v37, v92);
  *(_BYTE *)(v36 + v86) = *(_BYTE *)(v37 + v86);
  v38 = (v36 + v86) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = (v37 + v86) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v38 + 4) = *(_DWORD *)(v39 + 4);
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = v86 + ((v20 + 9) & v91);
  v79 = v20 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v41 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + ((v20 + 16) & v79);
  *(_QWORD *)((v40 + 16 + v31) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v40 + 16 + v32) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 24;
  v43 = ((v21 + 18 + (((((v82 & v88) + v87 + v21) & v81 | 7) + v80) & 0xFFFFFFFFFFFFFFF8)) & v81) + v42 + (v21 | v89);
  v44 = (v43 + a1) & ~(v21 | v89);
  v45 = (v43 + a2) & ~(v21 | v89);
  if (v41 + 9 <= v42)
    v46 = (v40 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v46 = v41 + 9;
  if (v44 != v45)
  {
    v47 = *(unsigned __int8 *)(v44 + v46);
    if (v47 >= 2)
    {
      if (v46 <= 3)
        v48 = v46;
      else
        v48 = 4;
      __asm { BR              X12 }
    }
    if (v47 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v77 + 8))((v20 + ((((v76 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8)) & v79) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v91, v92);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v77 + 8))((v35 + v44) & v91, v92);
      swift_release();
    }
    v49 = *(unsigned __int8 *)(v45 + v46);
    if (v49 >= 2)
    {
      if (v46 <= 3)
        v50 = v46;
      else
        v50 = 4;
      __asm { BR              X12 }
    }
    if (v49 == 1)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v51 = (_QWORD *)((v44 + 15) & 0xFFFFFFFFFFFFFFF8);
      v52 = (_QWORD *)((v45 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v51 = *v52;
      v53 = ((unint64_t)v51 + v76) & v79;
      v54 = ((unint64_t)v52 + v76) & v79;
      *(_BYTE *)v53 = *(_BYTE *)v54;
      *(_BYTE *)(v53 | 1) = *(_BYTE *)(v54 | 1);
      *(_BYTE *)(v53 | 2) = *(_BYTE *)(v54 | 2);
      *(_BYTE *)(v53 | 3) = *(_BYTE *)(v54 | 3);
      v55 = (v53 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v56 = (v54 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v57 = *(_DWORD *)v56;
      *(_BYTE *)(v55 + 4) = *(_BYTE *)(v56 + 4);
      *(_DWORD *)v55 = v57;
      v58 = (v20 + 5 + v55) & v91;
      v59 = (v20 + 5 + v56) & v91;
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
      swift_retain();
      swift_retain();
      v60(v58, v59, v92);
      *(_BYTE *)(v58 + v86) = *(_BYTE *)(v59 + v86);
      v61 = (v58 + v86) & 0xFFFFFFFFFFFFFFFCLL;
      v62 = (v59 + v86) & 0xFFFFFFFFFFFFFFFCLL;
      v63 = *(_DWORD *)(v62 + 4);
      *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
      *(_DWORD *)(v61 + 4) = v63;
      *(_BYTE *)(v44 + v46) = 1;
    }
    else
    {
      *(_BYTE *)v44 = *(_BYTE *)v45;
      *(_BYTE *)(v44 | 1) = *(_BYTE *)(v45 | 1);
      *(_BYTE *)(v44 | 2) = *(_BYTE *)(v45 | 2);
      *(_BYTE *)(v44 | 3) = *(_BYTE *)(v45 | 3);
      v64 = v44 | 4;
      v65 = *(_DWORD *)(v45 | 4);
      *(_BYTE *)(v64 + 4) = *(_BYTE *)((v45 | 4) + 4);
      *(_DWORD *)v64 = v65;
      v66 = (v35 + v44) & v91;
      v67 = (v35 + v45) & v91;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 16))(v66, v67, v92);
      *(_BYTE *)(v66 + v86) = *(_BYTE *)(v67 + v86);
      v68 = (v66 + v86) & 0xFFFFFFFFFFFFFFFCLL;
      v69 = (v67 + v86) & 0xFFFFFFFFFFFFFFFCLL;
      v70 = *(_DWORD *)(v69 + 4);
      *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
      *(_DWORD *)(v68 + 4) = v70;
      *(_QWORD *)((v40 + 16 + v44) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v40 + 16 + v45) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v44 + v46) = 0;
      swift_retain();
    }
  }
  v71 = (v46 + 8 + v44) & 0xFFFFFFFFFFFFFFF8;
  v72 = (v46 + 8 + v45) & 0xFFFFFFFFFFFFFFF8;
  if (v71 != v72)
  {
    v73 = *(unsigned __int8 *)(v71 + 17);
    if (v73 >= 2)
      v73 = *(_DWORD *)v71 + 2;
    if (v73 == 1)
      swift_release();
    swift_release();
    v74 = *(unsigned __int8 *)(v72 + 17);
    if (v74 >= 2)
      v74 = *(_DWORD *)v72 + 2;
    if (v74 == 1)
    {
      *(_QWORD *)v71 = *(_QWORD *)v72;
      *(_QWORD *)(v71 + 8) = *(_QWORD *)(v72 + 8);
      *(_BYTE *)(v71 + 16) = *(_BYTE *)(v72 + 16);
      *(_BYTE *)(v71 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v71 = *(_BYTE *)v72;
      *(_QWORD *)(v71 + 8) = *(_QWORD *)(v72 + 8);
      *(_BYTE *)(v71 + 17) = 0;
    }
    swift_retain();
  }
  ((void (*)(unint64_t, unint64_t, uint64_t))v84)((v89 + 18 + v71) & v88, (v89 + 18 + v72) & v88, v85);
  *(_BYTE *)(((v89 + 18 + v71) & v88) + v87) = *(_BYTE *)(((v89 + 18 + v72) & v88) + v87);
  return a1;
}

unint64_t initializeWithTake for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  void (*v81)(unint64_t, unint64_t);
  uint64_t v82;
  uint64_t v84;
  void (*v85)(unint64_t, unint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v78 = v7 + 40;
  v9 = (v7 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v81 = *(void (**)(unint64_t, unint64_t))(v6 + 32);
  v82 = v5;
  v81(v8, v9);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for AttributedString();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v88 = v10;
  v15 = (v13 | 7) + v10;
  v16 = (_QWORD *)((v15 + v8) & ~(v13 | 7));
  v17 = (_QWORD *)((v15 + v9) & ~(v13 | 7));
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v76 = v13 + 8;
  v85 = *(void (**)(unint64_t, unint64_t))(v12 + 32);
  v86 = v11;
  v85(((unint64_t)v18 + v13 + 8) & ~v13, ((unint64_t)v19 + v13 + 8) & ~v13);
  v84 = *(_QWORD *)(v12 + 64);
  v77 = v84 + ((v13 + 16) & ~v13);
  v20 = ((unint64_t)v16 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v17 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v21 + 17);
  if (v22 >= 2)
    v22 = *(_DWORD *)v21 + 2;
  v87 = ~v7;
  v23 = ~v14;
  v24 = ~v13;
  v80 = v7;
  if (v22 == 1)
  {
    v25 = *(_OWORD *)v21;
    *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
    *(_OWORD *)v20 = v25;
    v26 = 1;
  }
  else
  {
    v26 = 0;
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  *(_BYTE *)(v20 + 17) = v26;
  v27 = (v14 + 18 + v20) & v23;
  v28 = (v14 + 18 + v21) & v23;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  *(_BYTE *)(v27 | 1) = *(_BYTE *)(v28 | 1);
  *(_BYTE *)(v27 | 2) = *(_BYTE *)(v28 | 2);
  *(_BYTE *)(v27 | 3) = *(_BYTE *)(v28 | 3);
  v29 = v27 | 4;
  v30 = *(_DWORD *)(v28 | 4);
  *(_BYTE *)(v29 + 4) = *(_BYTE *)((v28 | 4) + 4);
  *(_DWORD *)v29 = v30;
  v31 = v13 + 9;
  v32 = (v13 + 9 + v28) & v24;
  ((void (*)(uint64_t, uint64_t, uint64_t))v85)((v13 + 9 + v27) & v24, v32, v86);
  v33 = ~v13;
  v34 = ((v13 + 9 + v27) & v24) + v84;
  *(_BYTE *)v34 = *(_BYTE *)(v32 + v84);
  v34 &= 0xFFFFFFFFFFFFFFFCLL;
  v35 = (v32 + v84) & 0xFFFFFFFFFFFFFFFCLL;
  v36 = *(_DWORD *)(v35 + 4);
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  *(_DWORD *)(v34 + 4) = v36;
  v37 = v84 + ((v13 + 9) & v24);
  v38 = v13 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  v39 = (v37 & 0xFFFFFFFFFFFFFFFCLL) + ((v13 + 16) & v38);
  v40 = v37 + 16;
  *(_QWORD *)((v37 + 16 + v27) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v37 + 16 + v28) & 0xFFFFFFFFFFFFF8);
  v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 24;
  v42 = ((v14 + 18 + (((((v78 & v87) + v88 + v14) & v23 | 7) + v77) & 0xFFFFFFFFFFFFFFF8)) & v23) + v41 + (v14 | v80);
  v43 = (v42 + a1) & ~(v14 | v80);
  v44 = (v42 + a2) & ~(v14 | v80);
  v45 = v39 + 9;
  if (v45 <= v41)
    v46 = v41;
  else
    v46 = v45;
  v47 = *(unsigned __int8 *)(v44 + v46);
  if (v47 >= 2)
  {
    if (v46 <= 3)
      v48 = v46;
    else
      v48 = 4;
    __asm { BR              X13 }
  }
  if (v47 == 1)
  {
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v49 = (_QWORD *)((v43 + 15) & 0xFFFFFFFFFFFFFFF8);
    v50 = (_QWORD *)((v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v49 = *v50;
    v51 = ((unint64_t)v49 + v76) & v38;
    v52 = ((unint64_t)v50 + v76) & v38;
    v53 = v52 + 7;
    *(_BYTE *)v51 = *(_BYTE *)v52;
    *(_BYTE *)(v51 | 1) = *(_BYTE *)(v52 | 1);
    *(_BYTE *)(v51 | 2) = *(_BYTE *)(v52 | 2);
    *(_BYTE *)(v51 | 3) = *(_BYTE *)(v52 | 3);
    v54 = (v51 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v51) = *(_DWORD *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
    *(_BYTE *)(v54 + 4) = *(_BYTE *)((v53 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)v54 = v51;
    v55 = (v13 + 5 + v54) & v33;
    v56 = (v13 + 5 + (v53 & 0xFFFFFFFFFFFFFFFCLL)) & v33;
    ((void (*)(uint64_t, unint64_t, uint64_t))v85)(v55, v56, v86);
    *(_BYTE *)(v55 + v84) = *(_BYTE *)(v56 + v84);
    v57 = (v55 + v84) & 0xFFFFFFFFFFFFFFFCLL;
    v58 = (v56 + v84) & 0xFFFFFFFFFFFFFFFCLL;
    v59 = *(_DWORD *)(v58 + 4);
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
    *(_DWORD *)(v57 + 4) = v59;
    v60 = 1;
  }
  else
  {
    *(_BYTE *)v43 = *(_BYTE *)v44;
    *(_BYTE *)(v43 | 1) = *(_BYTE *)(v44 | 1);
    *(_BYTE *)(v43 | 2) = *(_BYTE *)(v44 | 2);
    *(_BYTE *)(v43 | 3) = *(_BYTE *)(v44 | 3);
    v61 = v43 | 4;
    v62 = *(_DWORD *)(v44 | 4);
    *(_BYTE *)(v61 + 4) = *(_BYTE *)((v44 | 4) + 4);
    *(_DWORD *)v61 = v62;
    v63 = (v31 + v43) & v33;
    v64 = (v31 + v44) & v33;
    ((void (*)(unint64_t, unint64_t, uint64_t))v85)(v63, v64, v86);
    v60 = 0;
    *(_BYTE *)(v63 + v84) = *(_BYTE *)(v64 + v84);
    v65 = (v63 + v84) & 0xFFFFFFFFFFFFFFFCLL;
    v66 = (v64 + v84) & 0xFFFFFFFFFFFFFFFCLL;
    v67 = *(_DWORD *)(v66 + 4);
    *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
    *(_DWORD *)(v65 + 4) = v67;
    *(_QWORD *)((v40 + v43) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v40 + v44) & 0xFFFFFFFFFFFFF8);
  }
  *(_BYTE *)(v43 + v46) = v60;
  v68 = (v46 + 8 + v43) & 0xFFFFFFFFFFFFFFF8;
  v69 = (v46 + 8 + v44) & 0xFFFFFFFFFFFFFFF8;
  v70 = *(unsigned __int8 *)(v69 + 17);
  if (v70 >= 2)
    v70 = *(_DWORD *)v69 + 2;
  if (v70 == 1)
  {
    v71 = *(_OWORD *)v69;
    *(_BYTE *)(v68 + 16) = *(_BYTE *)(v69 + 16);
    *(_OWORD *)v68 = v71;
    v72 = 1;
  }
  else
  {
    v72 = 0;
    *(_OWORD *)v68 = *(_OWORD *)v69;
  }
  *(_BYTE *)(v68 + 17) = v72;
  v73 = (v80 + 18 + v68) & v87;
  v74 = (v80 + 18 + v69) & v87;
  ((void (*)(uint64_t, uint64_t, uint64_t))v81)(v73, v74, v82);
  *(_BYTE *)(v73 + v88) = *(_BYTE *)(v74 + v88);
  return a1;
}

unint64_t assignWithTake for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  __int128 v77;
  char v78;
  uint64_t v80;
  void (*v81)(unint64_t, unint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v9 = *(_BYTE *)(v4 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  *(_BYTE *)(v4 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v92 = ~v12;
  v13 = (v12 + 40 + v4) & ~v12;
  v85 = v12 + 40;
  v93 = v12;
  v14 = (v12 + 40 + v5) & ~v12;
  v87 = *(void (**)(uint64_t, uint64_t))(v11 + 40);
  v88 = v10;
  v87(v13, v14);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = type metadata accessor for AttributedString();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v18 | 7;
  v91 = v15;
  v20 = (v18 | 7) + v15;
  v21 = ~(v18 | 7);
  v22 = (_QWORD *)((v20 + v13) & v21);
  v23 = (_QWORD *)((v20 + v14) & v21);
  *v22 = *v23;
  swift_release();
  v24 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  swift_release();
  v94 = ~v18;
  v80 = v18 + 8;
  v95 = v16;
  v81 = *(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40);
  v81(((unint64_t)v24 + v18 + 8) & ~v18, ((unint64_t)v25 + v18 + 8) & ~v18, v16);
  v90 = *(_QWORD *)(v17 + 64);
  v84 = v90 + ((v18 + 16) & ~v18);
  v26 = ((unint64_t)v22 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = ((unint64_t)v23 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v26 != v27)
  {
    v28 = *(unsigned __int8 *)(v26 + 17);
    if (v28 >= 2)
      v28 = *(_DWORD *)v26 + 2;
    if (v28 == 1)
      swift_release();
    swift_release();
    v29 = *(unsigned __int8 *)(v27 + 17);
    if (v29 >= 2)
      v29 = *(_DWORD *)v27 + 2;
    if (v29 == 1)
    {
      v30 = *(_OWORD *)v27;
      *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
      *(_OWORD *)v26 = v30;
      v31 = 1;
    }
    else
    {
      v31 = 0;
      *(_OWORD *)v26 = *(_OWORD *)v27;
    }
    *(_BYTE *)(v26 + 17) = v31;
  }
  v32 = (v19 + 18 + v26) & v21;
  v33 = (v19 + 18 + v27) & v21;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  *(_BYTE *)(v32 | 1) = *(_BYTE *)(v33 | 1);
  *(_BYTE *)(v32 | 2) = *(_BYTE *)(v33 | 2);
  *(_BYTE *)(v32 | 3) = *(_BYTE *)(v33 | 3);
  v34 = v32 | 4;
  v35 = *(_DWORD *)(v33 | 4);
  *(_BYTE *)(v34 + 4) = *(_BYTE *)((v33 | 4) + 4);
  *(_DWORD *)v34 = v35;
  v36 = (v18 + 9 + v32) & v94;
  v37 = (v18 + 9 + v33) & v94;
  v81(v36, v37, v95);
  *(_BYTE *)(v36 + v90) = *(_BYTE *)(v37 + v90);
  v38 = (v36 + v90) & 0xFFFFFFFFFFFFFFFCLL;
  v39 = (v37 + v90) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v38 + 4) = *(_DWORD *)(v39 + 4);
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v82 = v18 + 9;
  v40 = v90 + ((v18 + 9) & v94);
  v41 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + ((v18 + 16) & (v18 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL));
  v83 = v40 + 16;
  *(_QWORD *)((v40 + 16 + v32) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v40 + 16 + v33) & 0xFFFFFFFFFFFFF8);
  swift_release();
  v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 24;
  v43 = ((v19 + 18 + (((((v85 & v92) + v91 + (v18 | 7)) & ~(v18 | 7) | 7) + v84) & 0xFFFFFFFFFFFFFFF8)) & ~(v18 | 7))
      + v42
      + (v18 | 7 | v93);
  v44 = (v43 + a1) & ~(v18 | 7 | v93);
  v45 = (v43 + a2) & ~(v18 | 7 | v93);
  if (v41 + 9 <= v42)
    v46 = (v40 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v46 = v41 + 9;
  if (v44 != v45)
  {
    v47 = *(unsigned __int8 *)(v44 + v46);
    if (v47 >= 2)
    {
      if (v46 <= 3)
        v48 = v46;
      else
        v48 = 4;
      __asm { BR              X12 }
    }
    v49 = v18 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    if (v47 == 1)
    {
      swift_release();
      swift_release();
      v50 = v17;
      (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v18 + ((((v80 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8)) & v49) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v94, v95);
    }
    else
    {
      v50 = v17;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))((v82 + v44) & v94, v95);
      swift_release();
    }
    v51 = *(unsigned __int8 *)(v45 + v46);
    if (v51 >= 2)
    {
      if (v46 <= 3)
        v52 = v46;
      else
        v52 = 4;
      __asm { BR              X12 }
    }
    if (v51 == 1)
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v53 = (_QWORD *)((v44 + 15) & 0xFFFFFFFFFFFFFFF8);
      v54 = (_QWORD *)((v45 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v53 = *v54;
      v55 = ((unint64_t)v53 + v80) & v49;
      v56 = ((unint64_t)v54 + v80) & v49;
      *(_BYTE *)v55 = *(_BYTE *)v56;
      *(_BYTE *)(v55 | 1) = *(_BYTE *)(v56 | 1);
      *(_BYTE *)(v55 | 2) = *(_BYTE *)(v56 | 2);
      *(_BYTE *)(v55 | 3) = *(_BYTE *)(v56 | 3);
      v57 = (v55 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v58 = (v56 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v59 = *(_DWORD *)v58;
      *(_BYTE *)(v57 + 4) = *(_BYTE *)(v58 + 4);
      *(_DWORD *)v57 = v59;
      v60 = (v18 + 5 + v57) & v94;
      v61 = (v18 + 5 + v58) & v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v60, v61, v95);
      *(_BYTE *)(v60 + v90) = *(_BYTE *)(v61 + v90);
      v62 = (v60 + v90) & 0xFFFFFFFFFFFFFFFCLL;
      v63 = (v61 + v90) & 0xFFFFFFFFFFFFFFFCLL;
      v64 = *(_DWORD *)(v63 + 4);
      *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
      *(_DWORD *)(v62 + 4) = v64;
      v65 = 1;
    }
    else
    {
      *(_BYTE *)v44 = *(_BYTE *)v45;
      *(_BYTE *)(v44 | 1) = *(_BYTE *)(v45 | 1);
      *(_BYTE *)(v44 | 2) = *(_BYTE *)(v45 | 2);
      *(_BYTE *)(v44 | 3) = *(_BYTE *)(v45 | 3);
      v66 = v44 | 4;
      v67 = *(_DWORD *)(v45 | 4);
      *(_BYTE *)(v66 + 4) = *(_BYTE *)((v45 | 4) + 4);
      *(_DWORD *)v66 = v67;
      v68 = (v82 + v44) & v94;
      v69 = (v82 + v45) & v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v68, v69, v95);
      v65 = 0;
      *(_BYTE *)(v68 + v90) = *(_BYTE *)(v69 + v90);
      v70 = (v68 + v90) & 0xFFFFFFFFFFFFFFFCLL;
      v71 = (v69 + v90) & 0xFFFFFFFFFFFFFFFCLL;
      v72 = *(_DWORD *)(v71 + 4);
      *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
      *(_DWORD *)(v70 + 4) = v72;
      *(_QWORD *)((v83 + v44) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v83 + v45) & 0xFFFFFFFFFFFFF8);
    }
    *(_BYTE *)(v44 + v46) = v65;
  }
  v73 = (v46 + 8 + v44) & 0xFFFFFFFFFFFFFFF8;
  v74 = (v46 + 8 + v45) & 0xFFFFFFFFFFFFFFF8;
  if (v73 != v74)
  {
    v75 = *(unsigned __int8 *)(v73 + 17);
    if (v75 >= 2)
      v75 = *(_DWORD *)v73 + 2;
    if (v75 == 1)
      swift_release();
    swift_release();
    v76 = *(unsigned __int8 *)(v74 + 17);
    if (v76 >= 2)
      v76 = *(_DWORD *)v74 + 2;
    if (v76 == 1)
    {
      v77 = *(_OWORD *)v74;
      *(_BYTE *)(v73 + 16) = *(_BYTE *)(v74 + 16);
      *(_OWORD *)v73 = v77;
      v78 = 1;
    }
    else
    {
      v78 = 0;
      *(_OWORD *)v73 = *(_OWORD *)v74;
    }
    *(_BYTE *)(v73 + 17) = v78;
  }
  ((void (*)(unint64_t, unint64_t, uint64_t))v87)((v93 + 18 + v73) & v92, (v93 + 18 + v74) & v92, v88);
  *(_BYTE *)(((v93 + 18 + v73) & v92) + v91) = *(_BYTE *)(((v93 + 18 + v74) & v92) + v91);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  char v34;
  int v35;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t (*v46)(unint64_t, uint64_t, uint64_t);
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v10 <= 0xFE)
    v13 = 254;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = *(_DWORD *)(v9 + 84);
  if (v12 <= v14)
    v15 = v14;
  else
    v15 = v12;
  v16 = *(_DWORD *)(v9 + 80);
  v17 = *(_QWORD *)(v9 + 64);
  v18 = ((v16 + 9) & ~v16) + v17;
  v19 = v16 + 16;
  v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v18 & 0xFFFFFFFFFFFFFFFCLL) + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FC) & v19) + 9 <= v20)
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v21 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FC) & v19) + 9;
  if (v7 <= 0xFE)
    v22 = 254;
  else
    v22 = v7;
  if (v22 <= v15)
    v23 = v15;
  else
    v23 = v22;
  if (!a2)
    return 0;
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = *(_QWORD *)(v6 + 64);
  v26 = v16 | 7;
  v27 = (v16 | 7) + v25;
  v28 = (v19 & ~v16) + v17 + 7;
  v29 = (v16 | 7) + 18;
  v30 = v16 | 7 | v24;
  v31 = ((v29 + ((v28 + ((v27 + ((v24 + 40) & ~v24)) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v16 | 7)) + v20 + v30;
  v32 = a2 - v23;
  if (a2 <= v23)
    goto LABEL_45;
  v33 = v25 + ((v24 + (v21 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v24) + (v31 & ~v30) + 1;
  v34 = 8 * v33;
  if (v33 > 3)
    goto LABEL_28;
  v37 = ((v32 + ~(-1 << v34)) >> v34) + 1;
  if (HIWORD(v37))
  {
    v35 = *(_DWORD *)(a1 + v33);
    if (v35)
      goto LABEL_36;
  }
  else
  {
    if (v37 <= 0xFF)
    {
      if (v37 < 2)
        goto LABEL_45;
LABEL_28:
      v35 = *(unsigned __int8 *)(a1 + v33);
      if (!*(_BYTE *)(a1 + v33))
        goto LABEL_45;
LABEL_36:
      v38 = (v35 - 1) << v34;
      if (v33 > 3)
        v38 = 0;
      if ((_DWORD)v33)
      {
        if (v33 <= 3)
          v39 = v33;
        else
          v39 = 4;
        __asm { BR              X11 }
      }
      return v23 + v38 + 1;
    }
    v35 = *(unsigned __int16 *)(a1 + v33);
    if (*(_WORD *)(a1 + v33))
      goto LABEL_36;
  }
LABEL_45:
  v40 = ~v24;
  if (v15 < v22)
  {
    v41 = (v31 + a1) & ~v30;
    if (v7 <= 0xFE)
    {
      v42 = *(unsigned __int8 *)(v41 + v21);
      if (v42 >= 2)
        return (v42 ^ 0xFF) + 1;
      else
        return 0;
    }
    v45 = (v24 + ((v21 + v41 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & v40;
    goto LABEL_56;
  }
  v43 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0x80000000) == 0)
  {
    v44 = *(_QWORD *)(v43 + 32);
    if (v44 >= 0xFFFFFFFF)
      LODWORD(v44) = -1;
    return (v44 + 1);
  }
  v45 = (v43 + v24 + 40) & v40;
  if ((_DWORD)v7 == v15)
  {
LABEL_56:
    v46 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    v10 = v7;
    v8 = v5;
    return v46(v45, v10, v8);
  }
  v47 = (v27 + v45) & ~v26;
  if (v11 == v15)
  {
    v48 = v16 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_71;
  }
  v49 = (v29 + ((v28 + v47) & 0xFFFFFFFFFFFFFFF8)) & ~v26;
  if (v13 == v14)
  {
    if (v10 <= 0xFE)
    {
      v50 = *(unsigned __int8 *)(v49 | 1);
      if (v50 >= 2)
        return v50 - 1;
      else
        return 0;
    }
    v48 = v16 + 9 + v49;
LABEL_71:
    v45 = v48 & ~v16;
    v46 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v46(v45, v10, v8);
  }
  v51 = *(_QWORD *)((v18 + v49 + 16) & 0xFFFFFFFFFFFFF8);
  if (v51 >= 0xFFFFFFFF)
    LODWORD(v51) = -1;
  if ((v51 + 1) >= 2)
    return v51;
  else
    return 0;
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v8 <= v11)
    v12 = v11;
  else
    v12 = v8;
  if (v10 <= 0x7FFFFFFE)
    v13 = 2147483646;
  else
    v13 = *(_DWORD *)(v9 + 84);
  if (v12 <= v13)
    v14 = v13;
  else
    v14 = v12;
  v16 = *(_QWORD *)(v9 + 64);
  v17 = ((*(_DWORD *)(v9 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v9 + 80)) + v16;
  v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v17 & 0xFFFFFFFFFFFFFFFCLL)
     + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v9 + 80) + 16))
     + 9 <= v18)
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL)
        + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v9 + 80) + 16))
        + 9;
  if (v8 <= 0xFE)
    v20 = 254;
  else
    v20 = v8;
  if (v20 <= v14)
    v21 = v14;
  else
    v21 = v20;
  v22 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_DWORD *)(v9 + 80);
  v23 = (((((v15 | 7)
          + 18
          + ((((v15 + 16) & ~v15) + v16 + 7 + (((v15 | 7) + *(_QWORD *)(v7 + 64) + ((v22 + 40) & ~v22)) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v15 | 7))
        + v18
        + (v15 | 7 | v22)) & ~(v15 | 7 | v22))
      + *(_QWORD *)(v7 + 64)
      + ((v22 + (v19 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v22)
      + 1;
  v24 = a3 >= v21;
  v25 = a3 - v21;
  if (v25 != 0 && v24)
  {
    if (v23 <= 3)
    {
      v28 = ((v25 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
      if (HIWORD(v28))
      {
        v26 = 4u;
      }
      else if (v28 >= 0x100)
      {
        v26 = 2;
      }
      else
      {
        v26 = v28 > 1;
      }
      if (v21 < a2)
        goto LABEL_28;
    }
    else
    {
      v26 = 1u;
      if (v21 < a2)
        goto LABEL_28;
    }
  }
  else
  {
    v26 = 0u;
    if (v21 < a2)
    {
LABEL_28:
      v27 = ~v21 + a2;
      if (v23 < 4)
      {
        if ((_DWORD)v23)
        {
          v29 = v27 & ~(-1 << (8
                             * ((((((v15 | 7)
                                  + 18
                                  + ((((*(_DWORD *)(v9 + 80) + 16) & ~(_BYTE)v15)
                                    + v16
                                    + 7
                                    + (((v15 | 7) + *(_BYTE *)(v7 + 64) + ((v22 + 40) & ~(_BYTE)v22)) & ~(v15 | 7))) & 0xF8)) & ~(v15 | 7))
                                + v18
                                + (v15 | 7 | v22)) & ~(v15 | 7 | v22))
                              + *(_BYTE *)(v7 + 64)
                              + ((v22 + (v19 & 0xF8) + 26) & ~(_BYTE)v22)
                              + 1)));
          bzero(a1, v23);
          if ((_DWORD)v23 == 3)
          {
            *(_WORD *)a1 = v29;
            a1[2] = BYTE2(v29);
          }
          else if ((_DWORD)v23 == 2)
          {
            *(_WORD *)a1 = v29;
          }
          else
          {
            *a1 = v29;
          }
        }
      }
      else
      {
        bzero(a1, v23);
        *(_DWORD *)a1 = v27;
      }
      __asm { BR              X10 }
    }
  }
  __asm { BR              X21 }
}

void sub_187842848()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_187842850()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

void sub_187842930()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
}

void sub_187842948()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
}

void sub_187842958()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
}

void sub_187842960()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
}

ValueMetadata *type metadata accessor for IsSearchFocusedPreferenceKey()
{
  return &type metadata for IsSearchFocusedPreferenceKey;
}

uint64_t sub_187842A64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SearchModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for SearchPrimitiveModifier(255, v4, v5, v9);
  v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for SearchEnvironmentWritingModifier();
  v11 = type metadata accessor for ModifiedContent();
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v16[1] = lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier();
  v12 = MEMORY[0x1E0CE2E70];
  v15[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v16);
  v15[1] = &protocol witness table for SearchPrimitiveModifier<A>;
  v14[0] = MEMORY[0x18D75FFDC](v12, v10, v15);
  v14[1] = &protocol witness table for SearchEnvironmentWritingModifier;
  return MEMORY[0x18D75FFDC](v12, v11, v14);
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchPrimitiveModifier<A>()
{
  return &protocol witness table for SearchPrimitiveModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchEnvironmentWritingModifier()
{
  return &protocol witness table for SearchEnvironmentWritingModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchEnvironmentWritingModifier()
{
  return &protocol witness table for SearchEnvironmentWritingModifier;
}

void type metadata accessor for SearchFieldState?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for SearchFieldState?, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.FocusStoreListFilter);
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<IsSearchImplementedPreferenceKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<IsSearchImplementedPreferenceKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<IsSearchImplementedPreferenceKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<IsSearchImplementedPreferenceKey>, (uint64_t)&type metadata for IsSearchImplementedPreferenceKey, (uint64_t)&protocol witness table for IsSearchImplementedPreferenceKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<IsSearchImplementedPreferenceKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.ForwardedEnvironment);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeForwardEnv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.MakeForwardEnv);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.SearchConfigModifier);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.MakeModifier);
}

uint64_t partial apply for implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t partial apply for implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return implicit closure #2 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(v4[4], v4[2], v4[3], a4);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.DefaultSearchView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.DefaultSearchView);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeDefaultView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.MakeDefaultView);
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeIsSearchFocused(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchPrimitiveModifier.MakeIsSearchFocused);
}

uint64_t specialized static SearchEnvironmentWritingModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t Value;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  char v42;
  BOOL v43;
  char v44;

  v3 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v3, v4);
  v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v36 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v37 = (uint64_t)&v36 - v11;
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - v18;
  v20 = type metadata accessor for SearchEnvironmentWritingModifier();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SearchEnvironmentWritingModifier);
  v25 = *(int *)(v20 + 24);
  v40 = v23;
  v38 = v25;
  v44 = v23[v25];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  v26 = *(_QWORD *)(a2 + 8);
  if (v26)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  v27 = (uint64_t)v40;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v40[*(int *)(v20 + 20)], (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>);
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v19, 0, 1, v28);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchTextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchTextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v26)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for Binding<AttributedString>?);
  v29 = v37;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, v37, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  type metadata accessor for Binding<SearchFieldState>(0);
  v31 = v30;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, v36, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v29, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  v32 = v39;
  MEMORY[0x18D75B9C8](v31);
  v33 = *v32 != 2;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  v43 = v33;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    v27 = (uint64_t)v40;
    swift_release();
  }
  swift_release();
  if (*(_BYTE *)(v27 + v38) == 4)
  {
    v34 = *(_QWORD *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v34)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (!v42)
    {
      v41 = 1;
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v34)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      v27 = (uint64_t)v40;
    }
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v27, (uint64_t (*)(_QWORD))type metadata accessor for SearchEnvironmentWritingModifier);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchTextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchTextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchTextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchTextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata completion function for SearchPrimitiveModifier.DefaultSearchView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SearchField(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.DefaultSearchView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, unint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 | v8;
  v14 = ~(v13 | 7);
  v15 = v8 + 9;
  v16 = *(_QWORD *)(v7 + 64);
  v17 = ((v9 + 9) & ~v9) + v16;
  v18 = v8 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  if ((v17 & 0xFFFFFFFFFFFFFFFCLL) + ((v8 + 16) & v18) + 9 <= (v17 & 0xFFFFFFFFFFFFFFF8) + 24)
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 24;
  else
    v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + ((v8 + 16) & v18) + 9;
  v20 = (*(_DWORD *)(v11 + 80) | v8) & 0x100000;
  v21 = v13 <= 7 && v20 == 0;
  if (v21
    && (v22 = *(_QWORD *)(v11 + 64),
        ((v22 + ((v12 + (v19 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v12) + 1 + (((v13 | 7) + 1) & ~(v13 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 24 <= 0x18))
  {
    v69 = a1;
    *a1 = *a2;
    v23 = (unint64_t)(a1 + 8) & v14;
    v24 = (unint64_t)(a2 + 8) & v14;
    v25 = *(unsigned __int8 *)(v24 + v19);
    v65 = v22;
    v66 = v22 + ((v12 + (v19 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v12) + 1;
    if (v25 >= 2)
    {
      if (v19 <= 3)
        v26 = v19;
      else
        v26 = 4;
      __asm { BR              X16 }
    }
    v67 = v11;
    v68 = v10;
    v29 = ~v9;
    v30 = v19 + 1;
    if (v25 == 1)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v31 = (_QWORD *)((v23 + 15) & 0xFFFFFFFFFFFFFFF8);
      v32 = (_QWORD *)((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v31 = *v32;
      v33 = ((unint64_t)v31 + v9 + 8) & v18;
      v34 = ((unint64_t)v32 + v9 + 8) & v18;
      *(_BYTE *)v33 = *(_BYTE *)v34;
      *(_BYTE *)(v33 | 1) = *(_BYTE *)(v34 | 1);
      *(_BYTE *)(v33 | 2) = *(_BYTE *)(v34 | 2);
      *(_BYTE *)(v33 | 3) = *(_BYTE *)(v34 | 3);
      v35 = (v33 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v33) = *(_DWORD *)v36;
      *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
      *(_DWORD *)v35 = v33;
      v37 = v9 + 5;
      v38 = (v37 + v35) & v29;
      v39 = (v37 + v36) & v29;
      v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      v41 = v6;
      swift_retain();
      swift_retain();
      v40(v38, v39, v41);
      *(_BYTE *)(v38 + v16) = *(_BYTE *)(v39 + v16);
      v42 = (v38 + v16) & 0xFFFFFFFFFFFFFFFCLL;
      v43 = (v39 + v16) & 0xFFFFFFFFFFFFFFFCLL;
      v44 = *(_DWORD *)(v43 + 4);
      *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v44;
      v45 = 1;
    }
    else
    {
      *(_BYTE *)v23 = *(_BYTE *)v24;
      *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
      *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
      *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
      v46 = v23 | 4;
      v47 = *(_DWORD *)(v24 | 4);
      *(_BYTE *)(v46 + 4) = *(_BYTE *)((v24 | 4) + 4);
      *(_DWORD *)v46 = v47;
      v48 = (v15 + v23) & v29;
      v49 = (v15 + v24) & v29;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v48, v49, v6);
      *(_BYTE *)(v48 + v16) = *(_BYTE *)(v49 + v16);
      v50 = (v48 + v16) & 0xFFFFFFFFFFFFFFFCLL;
      v51 = (v49 + v16) & 0xFFFFFFFFFFFFFFFCLL;
      v52 = *(_DWORD *)(v51 + 4);
      *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
      *(_DWORD *)(v50 + 4) = v52;
      *(_QWORD *)((v17 + 16 + v23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v17 + 16 + v24) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      v45 = 0;
    }
    *(_BYTE *)(v23 + v19) = v45;
    v53 = v23 | 7;
    v54 = (v53 + v30) & 0xFFFFFFFFFFFFFFF8;
    v55 = v24 | 7;
    v56 = (v55 + v30) & 0xFFFFFFFFFFFFFFF8;
    v57 = *(unsigned __int8 *)(v56 + 17);
    if (v57 >= 2)
      v57 = *(_DWORD *)v56 + 2;
    v58 = ~v12;
    if (v57 == 1)
    {
      *(_QWORD *)v54 = *(_QWORD *)v56;
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v56 + 8);
      *(_BYTE *)(v54 + 16) = *(_BYTE *)(v56 + 16);
      swift_retain();
      v59 = 1;
    }
    else
    {
      v59 = 0;
      *(_BYTE *)v54 = *(_BYTE *)v56;
      *(_QWORD *)(v54 + 8) = *(_QWORD *)(v56 + 8);
    }
    swift_retain();
    *(_BYTE *)(v54 + 17) = v59;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v67 + 16))((v12 + 18 + v54) & v58, (v12 + 18 + v56) & v58, v68);
    *(_BYTE *)(((v12 + 18 + v54) & v58) + v65) = *(_BYTE *)(((v12 + 18 + v56) & v58) + v65);
    v60 = (v53 + v66) & 0xFFFFFFFFFFFFFFF8;
    v61 = (v55 + v66) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v60 = *(_BYTE *)v61;
    v62 = *(_QWORD *)(v61 + 8);
    if (v62)
    {
      v63 = *(_QWORD *)(v61 + 16);
      *(_QWORD *)(v60 + 8) = v62;
      *(_QWORD *)(v60 + 16) = v63;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v60 + 8) = *(_OWORD *)(v61 + 8);
    }
    return v69;
  }
  else
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v28 = v27 + ((v13 + 16) & v14);
    swift_retain();
  }
  return (_BYTE *)v28;
}

uint64_t destroy for SearchPrimitiveModifier.DefaultSearchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t result;
  uint64_t v22;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v22 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (a1 + (v6 | v8 | 7) + 1) & ~(v6 | v8 | 7);
  v10 = ((v6 + 9) & ~v6) + *(_QWORD *)(v5 + 64);
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = *(_DWORD *)(v5 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v11 + ((v6 + 16) & v13) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v6 + 16) & v13);
  v15 = *(unsigned __int8 *)(v9 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  v17 = ~v6;
  if (v15 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((((v6 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v13) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v17, v4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v6 + 9 + v9) & v17, v4);
    swift_release();
  }
  v18 = v9 + 8;
  v19 = (v9 + 8 + v14) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v19 + 17);
  if (v20 >= 2)
    v20 = *(_DWORD *)v19 + 2;
  if (v20 == 1)
    swift_release();
  swift_release();
  result = (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))((v8 + v19 + 18) & ~v8, v22);
  if (*(_QWORD *)(((v18 + *(_QWORD *)(v7 + 64) + ((v8 + (v14 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
                 + 8))
    return swift_release();
  return result;
}

_BYTE *initializeWithCopy for SearchPrimitiveModifier.DefaultSearchView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  void (*v33)(unint64_t, unint64_t, uint64_t);
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = a1;
  *a1 = *a2;
  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v61 = *(_QWORD *)(a3 + 16);
  v62 = *(_QWORD *)(v61 - 8);
  v9 = *(unsigned __int8 *)(v62 + 80);
  v10 = v8 | v9 | 7;
  v11 = (unint64_t)&v5[v10 + 1] & ~v10;
  v12 = (unint64_t)&a2[v10 + 1] & ~v10;
  v13 = v8 + 9;
  v14 = *(_QWORD *)(v7 + 64);
  v15 = ((v8 + 9) & ~v8) + v14;
  v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
  v18 = *(_DWORD *)(v7 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v16 + ((v8 + 16) & v18) <= v17)
    v19 = v17;
  else
    v19 = v16 + ((v8 + 16) & v18);
  v20 = *(unsigned __int8 *)(v12 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X16 }
  }
  v22 = ~v8;
  if (v20 == 1)
  {
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v23 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = ((unint64_t)v23 + v8 + 8) & v18;
    v26 = ((unint64_t)v24 + v8 + 8) & v18;
    v60 = v6;
    *(_BYTE *)v25 = *(_BYTE *)v26;
    *(_BYTE *)(v25 | 1) = *(_BYTE *)(v26 | 1);
    *(_BYTE *)(v25 | 2) = *(_BYTE *)(v26 | 2);
    *(_BYTE *)(v25 | 3) = *(_BYTE *)(v26 | 3);
    v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v25) = *(_DWORD *)v28;
    *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
    *(_DWORD *)v27 = v25;
    v29 = v8 + 5;
    v30 = (v29 + v27) & v22;
    v31 = (v29 + v28) & v22;
    v32 = v5;
    v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v33(v30, v31, v60);
    v5 = v32;
    *(_BYTE *)(v30 + v14) = *(_BYTE *)(v31 + v14);
    v34 = (v30 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = (v31 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v36 = *(_DWORD *)(v35 + 4);
    *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
    *(_DWORD *)(v34 + 4) = v36;
    v37 = v11 | 7;
    v38 = v12 | 7;
    v39 = 1;
  }
  else
  {
    *(_BYTE *)v11 = *(_BYTE *)v12;
    *(_BYTE *)(v11 | 1) = *(_BYTE *)(v12 | 1);
    *(_BYTE *)(v11 | 2) = *(_BYTE *)(v12 | 2);
    *(_BYTE *)(v11 | 3) = *(_BYTE *)(v12 | 3);
    v40 = v11 | 4;
    v41 = *(_DWORD *)(v12 | 4);
    *(_BYTE *)(v40 + 4) = *(_BYTE *)((v12 | 4) + 4);
    *(_DWORD *)v40 = v41;
    v42 = (v13 + v11) & v22;
    v43 = (v13 + v12) & v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v42, v43, v6);
    *(_BYTE *)(v42 + v14) = *(_BYTE *)(v43 + v14);
    v44 = (v42 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v45 = (v43 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    v46 = *(_DWORD *)(v45 + 4);
    *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
    *(_DWORD *)(v44 + 4) = v46;
    v37 = v11 | 7;
    v38 = v12 | 7;
    *(_QWORD *)(((v11 | 7) + v16) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v38 + v16) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v39 = 0;
  }
  *(_BYTE *)(v11 + v19) = v39;
  v47 = (v37 + v19 + 1) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v38 + v19 + 1) & 0xFFFFFFFFFFFFFFF8;
  v49 = *(unsigned __int8 *)(v48 + 17);
  if (v49 >= 2)
    v49 = *(_DWORD *)v48 + 2;
  if (v49 == 1)
  {
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
    *(_BYTE *)(v47 + 16) = *(_BYTE *)(v48 + 16);
    swift_retain();
    v50 = 1;
  }
  else
  {
    v50 = 0;
    *(_BYTE *)v47 = *(_BYTE *)v48;
    *(_QWORD *)(v47 + 8) = *(_QWORD *)(v48 + 8);
  }
  swift_retain();
  *(_BYTE *)(v47 + 17) = v50;
  v51 = (v9 + 18 + v47) & ~v9;
  v52 = (v9 + 18 + v48) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v51, v52, v61);
  v53 = *(_QWORD *)(v62 + 64);
  *(_BYTE *)(v53 + v51) = *(_BYTE *)(v53 + v52);
  v54 = ((v9 + (v19 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v9) + v53 + 1;
  v55 = (v37 + v54) & 0xFFFFFFFFFFFFFFF8;
  v56 = (v38 + v54) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v55 = *(_BYTE *)v56;
  v57 = *(_QWORD *)(v56 + 8);
  if (v57)
  {
    v58 = *(_QWORD *)(v56 + 16);
    *(_QWORD *)(v55 + 8) = v57;
    *(_QWORD *)(v55 + 16) = v58;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v55 + 8) = *(_OWORD *)(v56 + 8);
  }
  return v5;
}

_BYTE *assignWithCopy for SearchPrimitiveModifier.DefaultSearchView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;

  *a1 = *a2;
  v73 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v73 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v6 | 3;
  v70 = *(_QWORD *)(a3 + 16);
  v71 = *(_QWORD *)(v70 - 8);
  v8 = *(unsigned __int8 *)(v71 + 80);
  v9 = v6 | v8 | 7;
  v10 = (unint64_t)&a1[v9 + 1] & ~v9;
  v11 = (unint64_t)&a2[v9 + 1] & ~v9;
  if (v10 == v11)
  {
    v18 = *(_QWORD *)(v5 + 64) + ((v6 + 9) & ~v6);
    v19 = v18 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (v18 & 0xFFFFFFFFFFFFFFF8) + 24;
    v20 = (v6 + 16) & ~v7;
  }
  else
  {
    v65 = v6 + 9;
    v67 = *(_QWORD *)(v5 + 64);
    v12 = v67 + ((v6 + 9) & ~v6);
    v69 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 24;
    v68 = (v6 + 16) & ~v7;
    v66 = v13;
    if (v13 + v68 <= v14)
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 24;
    else
      v15 = v13 + v68;
    v16 = *(unsigned __int8 *)(v10 + v15);
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    v21 = ~v6;
    v22 = ~v7;
    if (v16 == 1)
    {
      swift_release();
      swift_release();
      v21 = ~v6;
      v23 = v22;
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((((v6 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v22) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v6, v73);
    }
    else
    {
      v23 = ~v7;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))((v65 + v10) & v21, v73);
      swift_release();
    }
    v24 = *(unsigned __int8 *)(v11 + v15);
    if (v24 >= 2)
    {
      if (v15 <= 3)
        v25 = v15;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = (_QWORD *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
      v27 = (_QWORD *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v26 = *v27;
      v28 = ((unint64_t)v26 + v6 + 8) & v23;
      v29 = ((unint64_t)v27 + v6 + 8) & v23;
      *(_BYTE *)v28 = *(_BYTE *)v29;
      *(_BYTE *)(v28 | 1) = *(_BYTE *)(v29 | 1);
      *(_BYTE *)(v28 | 2) = *(_BYTE *)(v29 | 2);
      *(_BYTE *)(v28 | 3) = *(_BYTE *)(v29 | 3);
      v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v32 = *(_DWORD *)v31;
      *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
      *(_DWORD *)v30 = v32;
      v33 = v6 + 5;
      v34 = (v6 + 5 + v30) & v21;
      v35 = (v33 + v31) & v21;
      v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      swift_retain();
      swift_retain();
      v36(v34, v35, v73);
      *(_BYTE *)(v67 + v34) = *(_BYTE *)(v67 + v35);
      v37 = (v67 + v34) & 0xFFFFFFFFFFFFFFFCLL;
      v38 = (v67 + v35) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = *(_DWORD *)(v38 + 4);
      *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
      *(_DWORD *)(v37 + 4) = v39;
      *(_BYTE *)(v10 + v15) = 1;
    }
    else
    {
      *(_BYTE *)v10 = *(_BYTE *)v11;
      *(_BYTE *)(v10 | 1) = *(_BYTE *)(v11 | 1);
      *(_BYTE *)(v10 | 2) = *(_BYTE *)(v11 | 2);
      *(_BYTE *)(v10 | 3) = *(_BYTE *)(v11 | 3);
      v40 = v10 | 4;
      v41 = *(_DWORD *)(v11 | 4);
      *(_BYTE *)(v40 + 4) = *(_BYTE *)((v11 | 4) + 4);
      *(_DWORD *)v40 = v41;
      v42 = (v65 + v10) & v21;
      v43 = (v65 + v11) & v21;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v42, v43, v73);
      *(_BYTE *)(v67 + v42) = *(_BYTE *)(v67 + v43);
      v44 = (v67 + v42) & 0xFFFFFFFFFFFFFFFCLL;
      v45 = (v67 + v43) & 0xFFFFFFFFFFFFFFFCLL;
      v46 = *(_DWORD *)(v45 + 4);
      *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
      *(_DWORD *)(v44 + 4) = v46;
      *(_QWORD *)(((v10 | 7) + v66) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 | 7) + v66) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v10 + v15) = 0;
      swift_retain();
    }
    v20 = v68;
    v19 = v69;
  }
  v47 = v20 + v19 + 9;
  if (v47 <= v14)
    v48 = v14;
  else
    v48 = v47;
  v49 = ((v10 | 7) + v48 + 1) & 0xFFFFFFFFFFFFFFF8;
  v50 = ((v11 | 7) + v48 + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v49 != v50)
  {
    v51 = *(unsigned __int8 *)(v49 + 17);
    if (v51 >= 2)
      v51 = *(_DWORD *)v49 + 2;
    if (v51 == 1)
      swift_release();
    swift_release();
    v52 = *(unsigned __int8 *)(v50 + 17);
    if (v52 >= 2)
      v52 = *(_DWORD *)v50 + 2;
    if (v52 == 1)
    {
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
      *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
      *(_BYTE *)(v49 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v49 = *(_BYTE *)v50;
      *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
      *(_BYTE *)(v49 + 17) = 0;
    }
    swift_retain();
  }
  v53 = (v8 + 18 + v49) & ~v8;
  v54 = (v8 + 18 + v50) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 24))(v53, v54, v70);
  v55 = *(_QWORD *)(v71 + 64);
  *(_BYTE *)(v55 + v53) = *(_BYTE *)(v55 + v54);
  v56 = ((v8 + (v48 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v8) + v55 + 1;
  v57 = ((v10 | 7) + v56) & 0xFFFFFFFFFFFFFFF8;
  v58 = ((v11 | 7) + v56) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v57 = *(_BYTE *)v58;
  v59 = (_OWORD *)(v57 + 8);
  v61 = (_OWORD *)(v58 + 8);
  v60 = *(_QWORD *)(v58 + 8);
  if (!*(_QWORD *)(v57 + 8))
  {
    if (v60)
    {
      v63 = *(_QWORD *)(v58 + 16);
      *(_QWORD *)(v57 + 8) = v60;
      *(_QWORD *)(v57 + 16) = v63;
      swift_retain();
      return a1;
    }
LABEL_43:
    *v59 = *v61;
    return a1;
  }
  if (!v60)
  {
    outlined destroy of TriggerSubmitAction(v57 + 8);
    goto LABEL_43;
  }
  v62 = *(_QWORD *)(v58 + 16);
  *(_QWORD *)(v57 + 8) = v60;
  *(_QWORD *)(v57 + 16) = v62;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of TriggerSubmitAction(uint64_t a1)
{
  destroy for UpdateViewCache();
  return a1;
}

_BYTE *initializeWithTake for SearchPrimitiveModifier.DefaultSearchView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v61;

  *a1 = *a2;
  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v61 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v61 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | 7;
  v12 = (unint64_t)&a1[v11 + 1] & ~v11;
  v13 = (unint64_t)&a2[v11 + 1] & ~v11;
  v14 = v8 + 9;
  v15 = *(_QWORD *)(v7 + 64);
  v16 = ((v8 + 9) & ~v8) + v15;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 24;
  v19 = *(_DWORD *)(v7 + 80) & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v17 + ((v8 + 16) & v19) <= v18)
    v20 = v18;
  else
    v20 = v17 + ((v8 + 16) & v19);
  v21 = *(unsigned __int8 *)(v13 + v20);
  if (v21 >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X16 }
  }
  v23 = ~v8;
  if (v21 == 1)
  {
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v24 = (_QWORD *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v25 = (_QWORD *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = ((unint64_t)v24 + v8 + 8) & v19;
    v27 = ((unint64_t)v25 + v8 + 8) & v19;
    *(_BYTE *)v26 = *(_BYTE *)v27;
    *(_BYTE *)(v26 | 1) = *(_BYTE *)(v27 | 1);
    *(_BYTE *)(v26 | 2) = *(_BYTE *)(v27 | 2);
    *(_BYTE *)(v26 | 3) = *(_BYTE *)(v27 | 3);
    v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v26) = *(_DWORD *)v29;
    *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
    *(_DWORD *)v28 = v26;
    v30 = v8 + 5;
    v31 = (v30 + v28) & v23;
    v32 = (v30 + v29) & v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v31, v32, v6);
    *(_BYTE *)(v31 + v15) = *(_BYTE *)(v32 + v15);
    v33 = (v31 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = (v32 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = *(_DWORD *)(v34 + 4);
    *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
    *(_DWORD *)(v33 + 4) = v35;
    v36 = v12 | 7;
    v37 = v13 | 7;
    v38 = 1;
  }
  else
  {
    *(_BYTE *)v12 = *(_BYTE *)v13;
    *(_BYTE *)(v12 | 1) = *(_BYTE *)(v13 | 1);
    *(_BYTE *)(v12 | 2) = *(_BYTE *)(v13 | 2);
    *(_BYTE *)(v12 | 3) = *(_BYTE *)(v13 | 3);
    v39 = v12 | 4;
    v40 = *(_DWORD *)(v13 | 4);
    *(_BYTE *)(v39 + 4) = *(_BYTE *)((v13 | 4) + 4);
    *(_DWORD *)v39 = v40;
    v41 = (v14 + v12) & v23;
    v42 = (v14 + v13) & v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v41, v42, v6);
    v38 = 0;
    *(_BYTE *)(v41 + v15) = *(_BYTE *)(v42 + v15);
    v43 = (v41 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    v44 = (v42 + v15) & 0xFFFFFFFFFFFFFFFCLL;
    v45 = *(_DWORD *)(v44 + 4);
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_DWORD *)(v43 + 4) = v45;
    v36 = v12 | 7;
    v37 = v13 | 7;
    *(_QWORD *)(((v12 | 7) + v17) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v37 + v17) & 0xFFFFFFFFFFFFF8);
  }
  *(_BYTE *)(v12 + v20) = v38;
  v46 = (v36 + v20 + 1) & 0xFFFFFFFFFFFFFFF8;
  v47 = (v37 + v20 + 1) & 0xFFFFFFFFFFFFFFF8;
  v48 = *(unsigned __int8 *)(v47 + 17);
  if (v48 >= 2)
    v48 = *(_DWORD *)v47 + 2;
  if (v48 == 1)
  {
    v49 = *(_OWORD *)v47;
    *(_BYTE *)(v46 + 16) = *(_BYTE *)(v47 + 16);
    *(_OWORD *)v46 = v49;
    v50 = 1;
  }
  else
  {
    v50 = 0;
    *(_OWORD *)v46 = *(_OWORD *)v47;
  }
  *(_BYTE *)(v46 + 17) = v50;
  v51 = (v10 + 18 + v46) & ~v10;
  v52 = (v10 + 18 + v47) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v51, v52, v61);
  v53 = *(_QWORD *)(v9 + 64);
  *(_BYTE *)(v53 + v51) = *(_BYTE *)(v53 + v52);
  v54 = ((v10 + (v20 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v10) + v53 + 1;
  v55 = v36 + v54;
  v56 = (v37 + v54) & 0xFFFFFFFFFFFFFFF8;
  v57 = *(_QWORD *)(v56 + 16);
  v58 = *(_OWORD *)v56;
  v59 = v55 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v59 = v58;
  *(_QWORD *)(v59 + 16) = v57;
  return a1;
}

_BYTE *assignWithTake for SearchPrimitiveModifier.DefaultSearchView(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;

  *a1 = *a2;
  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v8 | 3;
  v77 = a1;
  v78 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v78 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 | v11 | 7;
  v13 = (unint64_t)&a1[v12 + 1] & ~v12;
  v14 = (unint64_t)&a2[v12 + 1] & ~v12;
  if (v13 == v14)
  {
    v21 = *(_QWORD *)(v7 + 64) + ((v8 + 9) & ~v8);
    v22 = v21 & 0xFFFFFFFFFFFFFFFCLL;
    v17 = (v21 & 0xFFFFFFFFFFFFFFF8) + 24;
    v23 = (v8 + 16) & ~v9;
  }
  else
  {
    v70 = v8 + 9;
    v71 = *(_QWORD *)(v7 + 64);
    v15 = v71 + ((v8 + 9) & ~v8);
    v75 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    v76 = *(_QWORD *)(v78 - 8);
    v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
    v74 = (v8 + 16) & ~v9;
    v72 = v16;
    if (v16 + v74 <= v17)
      v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
    else
      v18 = v16 + v74;
    v19 = *(unsigned __int8 *)(v13 + v18);
    if (v19 >= 2)
    {
      if (v18 <= 3)
        v20 = v18;
      else
        v20 = 4;
      __asm { BR              X13 }
    }
    v24 = ~v8;
    v25 = ~v9;
    v73 = v6;
    if (v19 == 1)
    {
      v69 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
      v26 = v6;
      swift_release();
      swift_release();
      v24 = ~v8;
      v27 = v25;
      v28 = v26;
      v17 = v69;
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((((v8 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v25) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v8, v28);
    }
    else
    {
      v27 = ~v9;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v70 + v13) & v24, v6);
      swift_release();
    }
    v29 = *(unsigned __int8 *)(v14 + v18);
    if (v29 >= 2)
    {
      if (v18 <= 3)
        v30 = v18;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      v31 = (_QWORD *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
      v32 = (_QWORD *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v31 = *v32;
      v33 = ((unint64_t)v31 + v8 + 8) & v27;
      v34 = ((unint64_t)v32 + v8 + 8) & v27;
      *(_BYTE *)v33 = *(_BYTE *)v34;
      *(_BYTE *)(v33 | 1) = *(_BYTE *)(v34 | 1);
      *(_BYTE *)(v33 | 2) = *(_BYTE *)(v34 | 2);
      *(_BYTE *)(v33 | 3) = *(_BYTE *)(v34 | 3);
      v35 = (v33 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v37 = *(_DWORD *)v36;
      *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
      *(_DWORD *)v35 = v37;
      v38 = (v8 + 5 + v35) & v24;
      v39 = (v8 + 5 + v36) & v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v38, v39, v73);
      *(_BYTE *)(v71 + v38) = *(_BYTE *)(v71 + v39);
      v40 = (v71 + v38) & 0xFFFFFFFFFFFFFFFCLL;
      v41 = (v71 + v39) & 0xFFFFFFFFFFFFFFFCLL;
      v42 = *(_DWORD *)(v41 + 4);
      *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
      *(_DWORD *)(v40 + 4) = v42;
      *(_BYTE *)(v13 + v18) = 1;
    }
    else
    {
      *(_BYTE *)v13 = *(_BYTE *)v14;
      *(_BYTE *)(v13 | 1) = *(_BYTE *)(v14 | 1);
      *(_BYTE *)(v13 | 2) = *(_BYTE *)(v14 | 2);
      *(_BYTE *)(v13 | 3) = *(_BYTE *)(v14 | 3);
      v43 = v13 | 4;
      v44 = *(_DWORD *)(v14 | 4);
      *(_BYTE *)(v43 + 4) = *(_BYTE *)((v14 | 4) + 4);
      *(_DWORD *)v43 = v44;
      v45 = (v70 + v13) & v24;
      v46 = (v70 + v14) & v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v45, v46, v73);
      *(_BYTE *)(v71 + v45) = *(_BYTE *)(v71 + v46);
      v47 = (v71 + v45) & 0xFFFFFFFFFFFFFFFCLL;
      v48 = (v71 + v46) & 0xFFFFFFFFFFFFFFFCLL;
      v49 = *(_DWORD *)(v48 + 4);
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_DWORD *)(v47 + 4) = v49;
      *(_QWORD *)(((v13 | 7) + v72) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v14 | 7) + v72) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(v13 + v18) = 0;
    }
    v22 = v75;
    v10 = v76;
    v23 = v74;
  }
  v50 = v23 + v22 + 9;
  if (v50 <= v17)
    v51 = v17;
  else
    v51 = v50;
  v52 = v13 | 7;
  v53 = ((v13 | 7) + v51 + 1) & 0xFFFFFFFFFFFFFFF8;
  v54 = ((v14 | 7) + v51 + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v53 != v54)
  {
    v55 = *(unsigned __int8 *)(v53 + 17);
    if (v55 >= 2)
      v55 = *(_DWORD *)v53 + 2;
    if (v55 == 1)
      swift_release();
    swift_release();
    v56 = *(unsigned __int8 *)(v54 + 17);
    if (v56 >= 2)
      v56 = *(_DWORD *)v54 + 2;
    if (v56 == 1)
    {
      v57 = *(_OWORD *)v54;
      *(_BYTE *)(v53 + 16) = *(_BYTE *)(v54 + 16);
      *(_OWORD *)v53 = v57;
      v58 = 1;
    }
    else
    {
      v58 = 0;
      *(_OWORD *)v53 = *(_OWORD *)v54;
    }
    *(_BYTE *)(v53 + 17) = v58;
  }
  v59 = (v11 + 18 + v53) & ~v11;
  v60 = (v11 + 18 + v54) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v59, v60, v78);
  v61 = *(_QWORD *)(v10 + 64);
  *(_BYTE *)(v61 + v59) = *(_BYTE *)(v61 + v60);
  v62 = ((v11 + (v51 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v11) + v61 + 1;
  v63 = (v52 + v62) & 0xFFFFFFFFFFFFFFF8;
  v64 = ((v14 | 7) + v62) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v65 = (_OWORD *)(v63 + 8);
  v66 = (_OWORD *)(v64 + 8);
  if (!*(_QWORD *)(v63 + 8))
    goto LABEL_41;
  if (!*(_QWORD *)v66)
  {
    outlined destroy of TriggerSubmitAction(v63 + 8);
LABEL_41:
    *v65 = *v66;
    return v77;
  }
  v67 = *(_QWORD *)(v64 + 16);
  *(_QWORD *)(v63 + 8) = *(_QWORD *)v66;
  *(_QWORD *)(v63 + 16) = v67;
  swift_release();
  return v77;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.DefaultSearchView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v27;

  v6 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = ((v8 + 9) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  v12 = ((v7 & 0xFC ^ 0x1FCu) & (v7 + 16)) + v10 + 9;
  if (v12 <= v11)
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  if (v14 <= 0xFE)
    v15 = 254;
  else
    v15 = *(_DWORD *)(v13 + 84);
  if (v14 <= 0x7FFFFFFE)
    v16 = 2147483646;
  else
    v16 = *(_DWORD *)(v13 + 84);
  if (!a2)
    return 0;
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = v8 | v17 | 7;
  v19 = *(_QWORD *)(v13 + 64) + ((v17 + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + 1;
  if (v16 < a2)
  {
    if (((((v19 + ((v18 + 1) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v20 = 2;
    else
      v20 = a2 - v16 + 1;
    if (v20 >= 0x10000)
      v21 = 4;
    else
      v21 = 2;
    if (v20 < 0x100)
      v21 = 1;
    if (v20 >= 2)
      v22 = v21;
    else
      v22 = 0;
    __asm { BR              X3 }
  }
  v24 = (a1 + v18 + 1) & ~v18;
  if (v15 == v16)
  {
    if (v14 > 0xFE)
    {
      return (*(uint64_t (**)(unint64_t))(v13 + 48))((v17
                                                                     + ((v12 + v24 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 18) & ~v17);
    }
    else
    {
      v25 = *(unsigned __int8 *)(v24 + v12);
      if (v25 >= 2)
        return (v25 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v26 = *(_QWORD *)((((v24 | 7) + v19) & 0xFFFFFFFFFFFFF8) + 8);
    if (v26 >= 0xFFFFFFFF)
      LODWORD(v26) = -1;
    v27 = v26 - 1;
    if (v27 < 0)
      v27 = -1;
    return (v27 + 1);
  }
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier.DefaultSearchView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = ((v10 + 9) & ~v10) + *(_QWORD *)(v8 + 64);
  v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 24;
  v14 = ((v9 & 0xFC ^ 0x1FCu) & (v9 + 16)) + v12 + 9;
  if (v14 > v13)
    v13 = v14;
  v15 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v15 + 84) <= 0x7FFFFFFEu)
    v16 = 2147483646;
  else
    v16 = *(_DWORD *)(v15 + 84);
  if (v16 >= a3)
  {
    v19 = 0u;
    if (a2 <= v16)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v15 + 64)
         + ((*(unsigned __int8 *)(v15 + 80) + (v13 & 0xFFFFFFF8) + 26) & ~*(unsigned __int8 *)(v15 + 80))
         + 1
         + (((v10 | *(unsigned __int8 *)(v15 + 80) | 7) + 1) & ~(v10 | *(unsigned __int8 *)(v15 + 80) | 7))
         + 7) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v17 = a3 - v16 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    if (a2 <= v16)
LABEL_19:
      __asm { BR              X1 }
  }
  if (((*(_DWORD *)(v15 + 64)
       + ((*(unsigned __int8 *)(v15 + 80) + (v13 & 0xFFFFFFF8) + 26) & ~*(unsigned __int8 *)(v15 + 80))
       + 1
       + (((v10 | *(unsigned __int8 *)(v15 + 80) | 7) + 1) & ~(v10 | *(unsigned __int8 *)(v15 + 80) | 7))
       + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v20 = ~v16 + a2;
    bzero(a1, ((*(_QWORD *)(v15 + 64)+ ((*(unsigned __int8 *)(v15 + 80) + (v13 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ 1+ (((v10 | *(unsigned __int8 *)(v15 + 80) | 7) + 1) & ~(v10 | *(unsigned __int8 *)(v15 + 80) | 7))+ 7) & 0xFFFFFFFFFFFFFFF8)+ 24);
    *a1 = v20;
  }
  __asm { BR              X10 }
}

void sub_187845480()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187845544);
}

void sub_187845488()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187845490);
  JUMPOUT(0x187845544);
}

void sub_1878454E4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187845544);
}

void sub_1878454EC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187845544);
}

void sub_1878454F4(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  *(_WORD *)(v9 + v10) = 0;
  if (v8)
  {
    v2 = (v9 + v5 + 1) & v7;
    if (v4 == v3)
    {
      if (a1 > 0xFE)
        JUMPOUT(0x187845500);
      if (v8 > 0xFE)
        JUMPOUT(0x187845558);
      *(_BYTE *)(v2 + a2) = -(char)v8;
    }
    else
    {
      if (v8 > 0x7FFFFFFE)
        JUMPOUT(0x187845534);
      *(_QWORD *)((((v2 | 7) + v6) & 0xFFFFFFFFFFFFFFF8) + 8) = v8;
    }
  }
  JUMPOUT(0x187845544);
}

void sub_1878455AC()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x187845544);
}

void sub_1878455B4()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x187845544);
}

void sub_1878455C4()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x187845544);
}

void sub_1878455CC()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x187845544);
}

uint64_t type metadata completion function for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SearchField(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(unint64_t, unint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  int v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(_QWORD *)(a3 + 16);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = *(_QWORD *)(v16 + 64);
  if ((v17 | v8) <= 7 && ((*(_DWORD *)(v16 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0)
  {
    v19 = ((v17 + (v14 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + v18;
    v21 = ((v19 + 9) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v19 + 9) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8;
  }
  else
  {
    v21 = 1;
  }
  if (v21)
  {
    v22 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v22 + (((v17 | v8) & 0xF8 ^ 0x1F8) & ((v17 | v8) + 16));
  }
  else
  {
    v23 = *((unsigned __int8 *)a2 + v14);
    v71 = *(_QWORD *)(v15 - 8);
    if (v23 >= 2)
    {
      if (v14 <= 3)
        v24 = v14;
      else
        v24 = 4;
      __asm { BR              X15 }
    }
    v69 = ((v17 + (v14 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + v18;
    v70 = *(_QWORD *)(v16 + 64);
    v72 = *(_QWORD *)(a3 + 16);
    v73 = a2;
    v25 = ~v8;
    v68 = v14 + 1;
    if (v23 == 1)
    {
      v26 = (uint64_t)a2 + 7;
      *(_QWORD *)a1 = *a2;
      v27 = a1 + 7;
      v28 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v29 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v28 = *v29;
      v30 = ((unint64_t)v28 + v13 + 8) & ~v13;
      v31 = ((unint64_t)v29 + v13 + 8) & ~v13;
      v67 = v6;
      *(_BYTE *)v30 = *(_BYTE *)v31;
      *(_BYTE *)(v30 | 1) = *(_BYTE *)(v31 | 1);
      *(_BYTE *)(v30 | 2) = *(_BYTE *)(v31 | 2);
      *(_BYTE *)(v30 | 3) = *(_BYTE *)(v31 | 3);
      v32 = (v30 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v33 = (v31 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v30) = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
      *(_DWORD *)v32 = v30;
      v34 = v8 + 5;
      v35 = (v34 + v32) & v25;
      v36 = (v34 + v33) & v25;
      v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v37(v35, v36, v67);
      *(_BYTE *)(v35 + v9) = *(_BYTE *)(v36 + v9);
      v38 = (v35 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (v36 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 4);
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_DWORD *)(v38 + 4) = v40;
      v41 = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
      *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
      *(_BYTE *)(a1 + 3) = *((_BYTE *)a2 + 3);
      v27 = a1 + 7;
      v42 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v26 = (uint64_t)a2 + 7;
      v43 = ((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v44 = *(_DWORD *)v43;
      *(_BYTE *)(v42 + 4) = *(_BYTE *)(v43 + 4);
      *(_DWORD *)v42 = v44;
      v45 = (v42 + v8 + 5) & v25;
      v46 = (v43 + v8 + 5) & v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v45, v46, v6);
      *(_BYTE *)(v45 + v9) = *(_BYTE *)(v46 + v9);
      v47 = (v45 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v48 = (v46 + v9) & 0xFFFFFFFFFFFFFFFCLL;
      v49 = *(_DWORD *)(v48 + 4);
      *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
      *(_DWORD *)(v47 + 4) = v49;
      *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFF8);
      swift_retain();
      v41 = 0;
    }
    *(_BYTE *)(a1 + v14) = v41;
    v50 = (v27 + v68) & 0xFFFFFFFFFFFFFFF8;
    v51 = (v26 + v68) & 0xFFFFFFFFFFFFFFF8;
    v52 = *(unsigned __int8 *)(v51 + 17);
    if (v52 >= 2)
      v52 = *(_DWORD *)v51 + 2;
    v53 = ~v17;
    v54 = v69 + 1;
    if (v52 == 1)
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
      *(_BYTE *)(v50 + 16) = *(_BYTE *)(v51 + 16);
      swift_retain();
      v55 = 1;
    }
    else
    {
      v55 = 0;
      *(_BYTE *)v50 = *(_BYTE *)v51;
      *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
    }
    swift_retain();
    *(_BYTE *)(v50 + 17) = v55;
    v56 = (v17 + 18 + v50) & v53;
    v57 = (v17 + 18 + v51) & v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v56, v57, v72);
    *(_BYTE *)(v56 + v70) = *(_BYTE *)(v57 + v70);
    *(_BYTE *)(v54 + a1) = *((_BYTE *)v73 + v54);
    v58 = (v54 + a1) & 0xFFFFFFFFFFFFF8;
    v59 = ((unint64_t)v73 + v54) & 0xFFFFFFFFFFFFFFF8;
    v60 = v59 + 8;
    *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
    v61 = v58 + 8;
    v64 = *(_QWORD *)(v59 + 16);
    v62 = (_OWORD *)(v59 + 16);
    v63 = v64;
    if (!v64)
    {
      *(_OWORD *)(v61 + 8) = *v62;
      return a1;
    }
    v65 = *(_QWORD *)(v60 + 16);
    *(_QWORD *)(v61 + 8) = v63;
    *(_QWORD *)(v61 + 16) = v65;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = type metadata accessor for AttributedString();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v6 + 9) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v8 + ((v6 + 16) & ~(v6 | 3)) <= v9)
    v10 = v9;
  else
    v10 = v8 + ((v6 + 16) & ~(v6 | 3));
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 2)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = ~v6;
  if (v11 == 1)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v6 | 3) + 8) & ~(v6 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v13, v4);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 5) & v13, v4);
    swift_release();
  }
  v14 = (a1 + v10 + 8) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v14 + 17);
  if (v15 >= 2)
    v15 = *(_DWORD *)v14 + 2;
  if (v15 == 1)
    swift_release();
  swift_release();
  v16 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  result = (*(uint64_t (**)(unint64_t))(v16 + 8))((v14 + v17 + 18) & ~v17);
  if (*(_QWORD *)(((a1 + *(_QWORD *)(v16 + 64) + (((v10 & 0xFFFFFFFFFFFFFFF8) + v17 + 26) & ~v17) + 1) & 0xFFFFFFFFFFFFFFF8)
                 + 16))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(unint64_t, unint64_t, uint64_t);
  unint64_t v32;
  unint64_t v33;
  int v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X15 }
  }
  v17 = ~v8;
  if (v15 == 1)
  {
    v18 = ~v13;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (char *)v19 + v13;
    v22 = (char *)v20 + v13;
    v23 = (unint64_t)(v21 + 8) & v18;
    v24 = (unint64_t)(v22 + 8) & v18;
    v25 = v6;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
    *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
    *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
    v26 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v27 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v23) = *(_DWORD *)v27;
    *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
    *(_DWORD *)v26 = v23;
    v28 = v8 + 5;
    v29 = (v28 + v26) & v17;
    v30 = (v28 + v27) & v17;
    v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v25);
    *(_BYTE *)(v29 + v9) = *(_BYTE *)(v30 + v9);
    v32 = (v29 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v33 = (v30 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = *(_DWORD *)(v33 + 4);
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    *(_DWORD *)(v32 + 4) = v34;
    v35 = 1;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
    *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
    v36 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v37 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v38 = *(_DWORD *)v37;
    *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
    *(_DWORD *)v36 = v38;
    v39 = (v36 + v8 + 5) & v17;
    v40 = (v37 + v8 + 5) & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v39, v40, v6);
    *(_BYTE *)(v39 + v9) = *(_BYTE *)(v40 + v9);
    v41 = (v39 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v42 = (v40 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v43 = *(_DWORD *)(v42 + 4);
    *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
    *(_DWORD *)(v41 + 4) = v43;
    *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v11) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v35 = 0;
  }
  *(_BYTE *)(a1 + v14) = v35;
  v44 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v14 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(unsigned __int8 *)(v45 + 17);
  if (v46 >= 2)
    v46 = *(_DWORD *)v45 + 2;
  if (v46 == 1)
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    swift_retain();
    v47 = 1;
  }
  else
  {
    v47 = 0;
    *(_BYTE *)v44 = *(_BYTE *)v45;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
  }
  swift_retain();
  *(_BYTE *)(v44 + 17) = v47;
  v48 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  (*(void (**)(unint64_t, unint64_t))(v48 + 16))((v44 + v49 + 18) & ~v49, (v45 + v49 + 18) & ~v49);
  v50 = *(_QWORD *)(v48 + 64);
  *(_BYTE *)(((v44 + v49 + 18) & ~v49) + v50) = *(_BYTE *)(((v45 + v49 + 18) & ~v49) + v50);
  v51 = v50 + (((v14 & 0xFFFFFFFFFFFFFFF8) + v49 + 26) & ~v49) + 1;
  v52 = v51 + a2;
  *(_BYTE *)(v51 + a1) = *(_BYTE *)(v51 + a2);
  v53 = (v51 + a1) & 0xFFFFFFFFFFFFF8;
  v52 &= 0xFFFFFFFFFFFFFFF8;
  v54 = v52 + 8;
  *(_BYTE *)(v53 + 8) = *(_BYTE *)(v52 + 8);
  v55 = v53 + 8;
  v58 = *(_QWORD *)(v52 + 16);
  v56 = (_OWORD *)(v52 + 16);
  v57 = v58;
  if (v58)
  {
    v59 = *(_QWORD *)(v54 + 16);
    *(_QWORD *)(v55 + 8) = v57;
    *(_QWORD *)(v55 + 16) = v59;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v55 + 8) = *v56;
  }
  return a1;
}

uint64_t assignWithCopy for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t, unint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v69;

  v3 = a3;
  if (a1 != a2)
  {
    v69 = type metadata accessor for AttributedString();
    v6 = *(_QWORD *)(v69 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v67 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 9) & ~v7) + v67;
    v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10)
      v12 = v10;
    else
      v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v7;
    v16 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v16) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v69);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v15, v69);
      swift_release();
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v19 = *v20;
      v21 = ((unint64_t)v19 + v11 + 8) & v16;
      v22 = ((unint64_t)v20 + v11 + 8) & v16;
      *(_BYTE *)v21 = *(_BYTE *)v22;
      *(_BYTE *)(v21 | 1) = *(_BYTE *)(v22 | 1);
      *(_BYTE *)(v21 | 2) = *(_BYTE *)(v22 | 2);
      *(_BYTE *)(v21 | 3) = *(_BYTE *)(v22 | 3);
      v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)v24;
      *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
      *(_DWORD *)v23 = v25;
      v26 = v7 + 5;
      v27 = (v7 + 5 + v23) & v15;
      v28 = (v26 + v24) & v15;
      v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v29(v27, v28, v69);
      *(_BYTE *)(v27 + v67) = *(_BYTE *)(v28 + v67);
      v30 = (v27 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = (v28 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v32 = *(_DWORD *)(v31 + 4);
      *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
      *(_DWORD *)(v30 + 4) = v32;
      *(_BYTE *)(a1 + v12) = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
      v33 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v34 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v35 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
      *(_DWORD *)v33 = v35;
      v36 = (v33 + v7 + 5) & v15;
      v37 = (v34 + v7 + 5) & v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v36, v37, v69);
      *(_BYTE *)(v36 + v67) = *(_BYTE *)(v37 + v67);
      v38 = (v36 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (v37 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 4);
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_DWORD *)(v38 + 4) = v40;
      *(_QWORD *)((a1 + 7 + v9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v9) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(a1 + v12) = 0;
      swift_retain();
    }
    v3 = a3;
  }
  v41 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v42 = *(_DWORD *)(v41 + 80);
  v43 = ((v42 + 9) & ~(unint64_t)v42) + *(_QWORD *)(v41 + 64);
  v44 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  v46 = ((v42 & 0xFC ^ 0x1FCu) & (v42 + 16)) + v44 + 9;
  if (v46 <= v45)
    v47 = v45;
  else
    v47 = v46;
  v48 = (v47 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v47 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v48 != v49)
  {
    v50 = *(unsigned __int8 *)(v48 + 17);
    if (v50 >= 2)
      v50 = *(_DWORD *)v48 + 2;
    if (v50 == 1)
      swift_release();
    swift_release();
    v51 = *(unsigned __int8 *)(v49 + 17);
    if (v51 >= 2)
      v51 = *(_DWORD *)v49 + 2;
    if (v51 == 1)
    {
      *(_QWORD *)v48 = *(_QWORD *)v49;
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
      *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
      *(_BYTE *)(v48 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(_BYTE *)v48 = *(_BYTE *)v49;
      *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
      *(_BYTE *)(v48 + 17) = 0;
    }
    swift_retain();
  }
  v52 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = (v48 + v53 + 18) & ~v53;
  (*(void (**)(uint64_t, unint64_t))(v52 + 24))(v54, (v49 + v53 + 18) & ~v53);
  v55 = *(_QWORD *)(v52 + 64);
  *(_BYTE *)(v54 + v55) = *(_BYTE *)(((v49 + v53 + 18) & ~v53) + v55);
  v56 = v55 + (((v47 & 0xFFFFFFFFFFFFFFF8) + v53 + 26) & ~v53) + 1;
  v57 = v56 + a2;
  *(_BYTE *)(v56 + a1) = *(_BYTE *)(v56 + a2);
  v58 = (v56 + a1) & 0xFFFFFFFFFFFFF8;
  *(_BYTE *)(v58 + 8) = *(_BYTE *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8);
  v59 = v58 + 8;
  v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
  v61 = (_OWORD *)(v59 + 8);
  v63 = (uint64_t *)((v57 & 0xFFFFFFFFFFFFFFF8) + 16);
  v62 = *v63;
  if (!*(_QWORD *)(v59 + 8))
  {
    if (v62)
    {
      v65 = *(_QWORD *)(v60 + 16);
      *(_QWORD *)(v59 + 8) = v62;
      *(_QWORD *)(v59 + 16) = v65;
      swift_retain();
      return a1;
    }
LABEL_42:
    *v61 = *(_OWORD *)v63;
    return a1;
  }
  if (!v62)
  {
    outlined destroy of TriggerSubmitAction(v59 + 8);
    goto LABEL_42;
  }
  v64 = *(_QWORD *)(v60 + 16);
  *(_QWORD *)(v59 + 8) = v62;
  *(_QWORD *)(v59 + 16) = v64;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for AttributedString();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = ((v8 + 9) & ~v8) + v9;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12)
    v14 = v12;
  else
    v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  v15 = *(unsigned __int8 *)(a2 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X15 }
  }
  v17 = ~v8;
  if (v15 == 1)
  {
    v18 = ~v13;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v21 = (char *)v19 + v13;
    v22 = (char *)v20 + v13;
    v23 = (unint64_t)(v21 + 8) & v18;
    v24 = (unint64_t)(v22 + 8) & v18;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_BYTE *)(v23 | 1) = *(_BYTE *)(v24 | 1);
    *(_BYTE *)(v23 | 2) = *(_BYTE *)(v24 | 2);
    *(_BYTE *)(v23 | 3) = *(_BYTE *)(v24 | 3);
    v25 = (v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v23) = *(_DWORD *)v26;
    *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
    *(_DWORD *)v25 = v23;
    v27 = v8 + 5;
    v28 = (v27 + v25) & v17;
    v29 = (v27 + v26) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v28, v29, v6);
    *(_BYTE *)(v28 + v9) = *(_BYTE *)(v29 + v9);
    v30 = (v28 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = (v29 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v32 = *(_DWORD *)(v31 + 4);
    *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
    *(_DWORD *)(v30 + 4) = v32;
    v33 = 1;
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
    *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
    v34 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    v36 = *(_DWORD *)v35;
    *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
    *(_DWORD *)v34 = v36;
    v37 = (v34 + v8 + 5) & v17;
    v38 = (v35 + v8 + 5) & v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v37, v38, v6);
    v33 = 0;
    *(_BYTE *)(v37 + v9) = *(_BYTE *)(v38 + v9);
    v39 = (v37 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v40 = (v38 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    v41 = *(_DWORD *)(v40 + 4);
    *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
    *(_DWORD *)(v39 + 4) = v41;
    *(_QWORD *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  }
  *(_BYTE *)(a1 + v14) = v33;
  v42 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v14 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(unsigned __int8 *)(v43 + 17);
  if (v44 >= 2)
    v44 = *(_DWORD *)v43 + 2;
  if (v44 == 1)
  {
    v45 = *(_OWORD *)v43;
    *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
    *(_OWORD *)v42 = v45;
    v46 = 1;
  }
  else
  {
    v46 = 0;
    *(_OWORD *)v42 = *(_OWORD *)v43;
  }
  *(_BYTE *)(v42 + 17) = v46;
  v47 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v48 = *(unsigned __int8 *)(v47 + 80);
  v49 = (v42 + v48 + 18) & ~v48;
  v50 = (v43 + v48 + 18) & ~v48;
  (*(void (**)(uint64_t, uint64_t))(v47 + 32))(v49, v50);
  v51 = *(_QWORD *)(v47 + 64);
  *(_BYTE *)(v49 + v51) = *(_BYTE *)(v50 + v51);
  v52 = v51 + (((v14 & 0xFFFFFFFFFFFFFFF8) + v48 + 26) & ~v48) + 1;
  v53 = v52 + a1;
  v54 = v52 + a2;
  *(_BYTE *)v53 = *(_BYTE *)v54;
  v53 &= 0xFFFFFFFFFFFFFFF8;
  v54 &= 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)(v54 + 24);
  *(_OWORD *)(v53 + 8) = *(_OWORD *)(v54 + 8);
  *(_QWORD *)(v53 + 24) = v55;
  return a1;
}

uint64_t assignWithTake for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v69;

  v3 = a3;
  if (a1 != a2)
  {
    v69 = type metadata accessor for AttributedString();
    v6 = *(_QWORD *)(v69 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v67 = *(_QWORD *)(v6 + 64);
    v8 = ((v7 + 9) & ~v7) + v67;
    v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10)
      v12 = v10;
    else
      v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    v15 = ~v7;
    v16 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v16) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v69);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v15, v69);
      swift_release();
    }
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v19 = (_QWORD *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v20 = (_QWORD *)((a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v19 = *v20;
      v21 = ((unint64_t)v19 + v11 + 8) & v16;
      v22 = ((unint64_t)v20 + v11 + 8) & v16;
      *(_BYTE *)v21 = *(_BYTE *)v22;
      *(_BYTE *)(v21 | 1) = *(_BYTE *)(v22 | 1);
      *(_BYTE *)(v21 | 2) = *(_BYTE *)(v22 | 2);
      *(_BYTE *)(v21 | 3) = *(_BYTE *)(v22 | 3);
      v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = *(_DWORD *)v24;
      *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
      *(_DWORD *)v23 = v25;
      v26 = v7 + 5;
      v27 = (v7 + 5 + v23) & v15;
      v28 = (v26 + v24) & v15;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v27, v28, v69);
      *(_BYTE *)(v27 + v67) = *(_BYTE *)(v28 + v67);
      v29 = (v27 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v30 = (v28 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = *(_DWORD *)(v30 + 4);
      *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
      *(_DWORD *)(v29 + 4) = v31;
      *(_BYTE *)(a1 + v12) = 1;
    }
    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
      v32 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v33 = (a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v34 = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
      *(_DWORD *)v32 = v34;
      v35 = v33 + v7;
      v36 = (v32 + v7 + 5) & v15;
      v37 = (v35 + 5) & v15;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v36, v37, v69);
      *(_BYTE *)(v36 + v67) = *(_BYTE *)(v37 + v67);
      v38 = (v36 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v39 = (v37 + v67) & 0xFFFFFFFFFFFFFFFCLL;
      v40 = *(_DWORD *)(v39 + 4);
      *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
      *(_DWORD *)(v38 + 4) = v40;
      *(_QWORD *)((a1 + 7 + v9) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + 7 + v9) & 0xFFFFFFFFFFFFF8);
      *(_BYTE *)(a1 + v12) = 0;
    }
    v3 = a3;
  }
  v41 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v42 = *(_DWORD *)(v41 + 80);
  v43 = ((v42 + 9) & ~(unint64_t)v42) + *(_QWORD *)(v41 + 64);
  v44 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  v46 = ((v42 & 0xFC ^ 0x1FCu) & (v42 + 16)) + v44 + 9;
  if (v46 <= v45)
    v47 = v45;
  else
    v47 = v46;
  v48 = (v47 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v47 + 8 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (v48 != v49)
  {
    v50 = *(unsigned __int8 *)(v48 + 17);
    if (v50 >= 2)
      v50 = *(_DWORD *)v48 + 2;
    if (v50 == 1)
      swift_release();
    swift_release();
    v51 = *(unsigned __int8 *)(v49 + 17);
    if (v51 >= 2)
      v51 = *(_DWORD *)v49 + 2;
    if (v51 == 1)
    {
      v52 = *(_OWORD *)v49;
      *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
      *(_OWORD *)v48 = v52;
      v53 = 1;
    }
    else
    {
      v53 = 0;
      *(_OWORD *)v48 = *(_OWORD *)v49;
    }
    *(_BYTE *)(v48 + 17) = v53;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = (v48 + v55 + 18) & ~v55;
  v57 = (v49 + v55 + 18) & ~v55;
  (*(void (**)(uint64_t, uint64_t))(v54 + 40))(v56, v57);
  v58 = *(_QWORD *)(v54 + 64);
  *(_BYTE *)(v56 + v58) = *(_BYTE *)(v57 + v58);
  v59 = v58 + (((v47 & 0xFFFFFFFFFFFFFFF8) + v55 + 26) & ~v55) + 1;
  v60 = v59 + a2;
  *(_BYTE *)(v59 + a1) = *(_BYTE *)(v59 + a2);
  v61 = (v59 + a1) & 0xFFFFFFFFFFFFF8;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)((v60 & 0xFFFFFFFFFFFFFFF8) + 8);
  v62 = v61 + 8;
  v63 = (_OWORD *)(v62 + 8);
  v64 = (_OWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!*(_QWORD *)(v62 + 8))
    goto LABEL_40;
  if (!*(_QWORD *)v64)
  {
    outlined destroy of TriggerSubmitAction(v62 + 8);
LABEL_40:
    *v63 = *v64;
    return a1;
  }
  v65 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v62 + 8) = *(_QWORD *)v64;
  *(_QWORD *)(v62 + 16) = v65;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v22;
  unint64_t v23;
  int v24;

  v6 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ((v7 + 9) & ~(unint64_t)v7) + *(_QWORD *)(v6 + 64);
  v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
  v11 = ((v7 & 0xFC ^ 0x1FCu) & (v7 + 16)) + v9 + 9;
  if (v11 <= v10)
    v11 = v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= 0xFE)
    v14 = 254;
  else
    v14 = *(_DWORD *)(v12 + 84);
  if (v13 <= 0x7FFFFFFE)
    v15 = 2147483646;
  else
    v15 = *(_DWORD *)(v12 + 84);
  if (!a2)
    return 0;
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = ((v16 + (v11 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + *(_QWORD *)(v12 + 64);
  if (v15 < a2)
  {
    if (((((v17 + 9) & 0xFFFFFFFFFFFFFFF8) + 24) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v15 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X0 }
  }
  if (v14 == v15)
  {
    if (v13 > 0xFE)
    {
      return (*(uint64_t (**)(unint64_t))(v12 + 48))((v16 + ((a1 + v11 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v16);
    }
    else
    {
      v22 = *(unsigned __int8 *)(a1 + v11);
      if (v22 >= 2)
        return (v22 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v23 = *(_QWORD *)(((a1 + v17 + 1) & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    v24 = v23 - 1;
    if (v24 < 0)
      v24 = -1;
    return (v24 + 1);
  }
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier.SearchConfigModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;

  v8 = *(_QWORD *)(type metadata accessor for AttributedString() - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((v9 + 9) & ~(unint64_t)v9) + *(_QWORD *)(v8 + 64);
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  v13 = ((v9 & 0xFC ^ 0x1FCu) & (v9 + 16)) + v11 + 9;
  if (v13 > v12)
    v12 = v13;
  v14 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v14 + 84) <= 0x7FFFFFFEu)
    v15 = 2147483646;
  else
    v15 = *(_DWORD *)(v14 + 84);
  if (v15 >= a3)
  {
    v18 = 0u;
    if (a2 <= v15)
      goto LABEL_19;
  }
  else
  {
    if (((((*(unsigned __int8 *)(v14 + 80) + (v12 & 0xFFFFFFF8) + 26) & ~*(unsigned __int8 *)(v14 + 80))
         + *(_DWORD *)(v14 + 64)
         + 9) & 0xFFFFFFF8) == 0xFFFFFFE8)
      v16 = a3 - v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    if (a2 <= v15)
LABEL_19:
      __asm { BR              X17 }
  }
  if (((((*(unsigned __int8 *)(v14 + 80) + (v12 & 0xFFFFFFF8) + 26) & ~*(unsigned __int8 *)(v14 + 80))
       + *(_DWORD *)(v14 + 64)
       + 9) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    v19 = ~v15 + a2;
    bzero(a1, ((((*(unsigned __int8 *)(v14 + 80) + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 64)+ 9) & 0xFFFFFFFFFFFFFFF8)+ 24);
    *a1 = v19;
  }
  __asm { BR              X10 }
}

void sub_187847338()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1878473F0);
}

void sub_187847340()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x187847348);
  JUMPOUT(0x1878473F0);
}

void sub_187847390()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878473F0);
}

void sub_187847398()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1878473F0);
}

void sub_1878473A0(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *(_WORD *)(v5 + v7) = 0;
  if (v6)
  {
    if (v3 == v2)
    {
      if (a1 > 0xFE)
        JUMPOUT(0x1878473ACLL);
      if (v6 > 0xFE)
        JUMPOUT(0x187847404);
      *(_BYTE *)(v5 + a2) = -(char)v6;
    }
    else
    {
      if (v6 > 0x7FFFFFFE)
        JUMPOUT(0x1878473E0);
      *(_QWORD *)(((v5 + v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16) = v6;
    }
  }
  JUMPOUT(0x1878473F0);
}

void sub_187847454()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x1878473F0);
}

void sub_18784745C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x1878473F0);
}

void sub_18784746C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x1878473F0);
}

void sub_187847474()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x1878473F0);
}

uint64_t destroy for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    outlined destroy of TriggerSubmitAction(a1 + 8);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  if (!v4)
  {
    outlined destroy of TriggerSubmitAction(a1 + 8);
LABEL_5:
    *v3 = *v5;
    return a1;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

void type metadata completion function for SearchPrimitiveModifier.FocusStoreListFilter()
{
  unint64_t v0;

  type metadata accessor for SearchFieldState?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    v5 = *(int *)(a3 + 44);
    v6 = (_BYTE *)(a1 + v5);
    v7 = (char *)a2 + v5;
    v8 = (int *)type metadata accessor for SearchFieldState();
    v9 = *((_QWORD *)v8 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for SearchFieldState?(0);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      *v6 = *v7;
      v6[1] = v7[1];
      *((_WORD *)v6 + 1) = *((_WORD *)v7 + 1);
      *((_DWORD *)v6 + 1) = *((_DWORD *)v7 + 1);
      v6[8] = v7[8];
      v12 = v8[9];
      v13 = &v6[v12];
      v14 = &v7[v12];
      v15 = type metadata accessor for AttributedString();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      v6[v8[10]] = v7[v8[10]];
      v16 = v8[11];
      v17 = &v6[v16];
      v18 = &v7[v16];
      v17[4] = v18[4];
      *(_DWORD *)v17 = *(_DWORD *)v18;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = a1 + *(int *)(a2 + 44);
  v3 = type metadata accessor for SearchFieldState();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = v2 + *(int *)(v3 + 36);
    v6 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 44);
  v5 = (_BYTE *)(a1 + v4);
  v6 = (_BYTE *)(a2 + v4);
  v7 = (int *)type metadata accessor for SearchFieldState();
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for SearchFieldState?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v5[1] = v6[1];
    *((_WORD *)v5 + 1) = *((_WORD *)v6 + 1);
    *((_DWORD *)v5 + 1) = *((_DWORD *)v6 + 1);
    v5[8] = v6[8];
    v10 = v7[9];
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = type metadata accessor for AttributedString();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v5[v7[10]] = v6[v7[10]];
    v14 = v7[11];
    v15 = &v5[v14];
    v16 = &v6[v14];
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_DWORD *assignWithCopy for SearchPrimitiveModifier.FocusStoreListFilter(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, int *);
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 44);
  v5 = (uint64_t)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for SearchFieldState();
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9((uint64_t)v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      *(_BYTE *)v5 = *v6;
      *(_BYTE *)(v5 + 1) = v6[1];
      *(_BYTE *)(v5 + 2) = v6[2];
      *(_BYTE *)(v5 + 3) = v6[3];
      v23 = *((_DWORD *)v6 + 1);
      *(_BYTE *)(v5 + 8) = v6[8];
      *(_DWORD *)(v5 + 4) = v23;
      v24 = v7[9];
      v25 = v5 + v24;
      v26 = &v6[v24];
      v27 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
      *(_BYTE *)(v5 + v7[10]) = v6[v7[10]];
      v28 = v7[11];
      v29 = v5 + v28;
      v30 = &v6[v28];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      *(_BYTE *)(v29 + 4) = v30[4];
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for SearchFieldState?(0);
    memcpy((void *)v5, v6, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v5 = *v6;
  *(_BYTE *)(v5 + 1) = v6[1];
  *(_BYTE *)(v5 + 2) = v6[2];
  *(_BYTE *)(v5 + 3) = v6[3];
  v12 = *((_DWORD *)v6 + 1);
  *(_BYTE *)(v5 + 8) = v6[8];
  *(_DWORD *)(v5 + 4) = v12;
  v13 = v7[9];
  v14 = v5 + v13;
  v15 = &v6[v13];
  v16 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  *(_BYTE *)(v5 + v7[10]) = v6[v7[10]];
  v17 = v7[11];
  v18 = v5 + v17;
  v19 = &v6[v17];
  v20 = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v20;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t initializeWithTake for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 44);
  v5 = (_BYTE *)(a1 + v4);
  v6 = (_BYTE *)(a2 + v4);
  v7 = (int *)type metadata accessor for SearchFieldState();
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for SearchFieldState?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v5[1] = v6[1];
    *((_WORD *)v5 + 1) = *((_WORD *)v6 + 1);
    *((_DWORD *)v5 + 1) = *((_DWORD *)v6 + 1);
    v5[8] = v6[8];
    v10 = v7[9];
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = type metadata accessor for AttributedString();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v5[v7[10]] = v6[v7[10]];
    v14 = v7[11];
    v15 = &v5[v14];
    v16 = &v6[v14];
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = (int *)type metadata accessor for SearchFieldState();
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      *(_BYTE *)v5 = *(_BYTE *)v6;
      *(_BYTE *)(v5 + 1) = *(_BYTE *)(v6 + 1);
      *(_WORD *)(v5 + 2) = *(_WORD *)(v6 + 2);
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
      *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
      v21 = v7[9];
      v22 = v5 + v21;
      v23 = v6 + v21;
      v24 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
      *(_BYTE *)(v5 + v7[10]) = *(_BYTE *)(v6 + v7[10]);
      v25 = v7[11];
      v26 = v5 + v25;
      v27 = v6 + v25;
      *(_DWORD *)v26 = *(_DWORD *)v27;
      *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for SearchFieldState?(0);
    memcpy((void *)v5, (const void *)v6, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  *(_BYTE *)v5 = *(_BYTE *)v6;
  *(_BYTE *)(v5 + 1) = *(_BYTE *)(v6 + 1);
  *(_WORD *)(v5 + 2) = *(_WORD *)(v6 + 2);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  v12 = v7[9];
  v13 = v5 + v12;
  v14 = v6 + v12;
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_BYTE *)(v5 + v7[10]) = *(_BYTE *)(v6 + v7[10]);
  v16 = v7[11];
  v17 = v5 + v16;
  v18 = v6 + v16;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.FocusStoreListFilter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187847E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 44);
  type metadata accessor for SearchFieldState?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SearchPrimitiveModifier.FocusStoreListFilter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187847EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 44);
  type metadata accessor for SearchFieldState?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

ValueMetadata *type metadata accessor for ResetSearchEnvironmentModifier()
{
  return &type metadata for ResetSearchEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetSearchEnvironmentModifier()
{
  return &protocol witness table for ResetSearchEnvironmentModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ResetSearchEnvironmentModifier()
{
  return &protocol witness table for ResetSearchEnvironmentModifier;
}

void base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeIsSearchFocused()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.FocusStoreListFilter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in SearchPrimitiveModifier<A>.DefaultSearchView()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeDefaultView()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchPrimitiveModifier<A>.SearchConfigModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeModifier()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeForwardEnv()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized SearchPrimitiveModifier.MakeModifier.forwardEnv.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment(0, a2, a3, a4);
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t specialized SearchPrimitiveModifier.MakeDefaultView.forwardEnv.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for SearchPrimitiveModifier.ForwardedEnvironment(0, a3, a4, a4);
  return *(unsigned __int8 *)AGGraphGetValue();
}

unint64_t lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView;
  if (!lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchOverlayView, &type metadata for SearchOverlayView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchOverlayView and conformance SearchOverlayView);
  }
  return result;
}

void type metadata accessor for (SearchFieldState?, SearchFieldState?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (SearchFieldState?, SearchFieldState?))
  {
    type metadata accessor for SearchFieldState?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SearchFieldState?, SearchFieldState?));
  }
}

uint64_t sub_187848124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for Binding<SearchFieldState>(0);
  v2 = v1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  if (*(_QWORD *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v4 = *(int *)(v2 + 32);
  v5 = v0 + ((v3 + 64) & ~v3) + v4 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Binding<SearchFieldState>(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(a1, v1 + 16, *(_QWORD *)(v1 + 56), v1 + ((v4 + 64) & ~v4));
}

uint64_t *outlined retain of SearchFocusContext?(uint64_t *a1)
{
  outlined copy of SearchFocusContext?(*a1, a1[1]);
  return a1;
}

uint64_t outlined assign with take of SearchFieldState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for SearchFieldState?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEC628]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEC628]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResetSearchEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;

  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v14 - v8;
  v10 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v10)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (LOBYTE(v14[0]) == 4)
  {
    LOBYTE(v14[0]) = 3;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v10)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  LOBYTE(v14[0]) = 7;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldStateKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldStateKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>?);
  LOBYTE(v14[0]) = 0;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v14[0]) = 2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResetSearchEnvironmentModifier, &type metadata for ResetSearchEnvironmentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetSearchEnvironmentModifier and conformance ResetSearchEnvironmentModifier);
  }
  return result;
}

void sub_187848A40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v6);
  type metadata accessor for _ViewModifier_Content();
  v8 = type metadata accessor for SearchField(255, v4, v5, v7);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v9 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>();
  v10 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  v13[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchField<A>, v8);
  v13[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v11 = MEMORY[0x1E0CE2E70];
  v12[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v13);
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>, MEMORY[0x1E0CE65C0]);
  MEMORY[0x18D75FFDC](v11, v10, v12);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187848B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[18];

  v2 = type metadata accessor for ModifiedContent();
  v4[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v4[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v1, v2, v4);
}

uint64_t sub_187848BE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[2];

  v4 = type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier(255, *a1, a1[1], a4);
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for Optional();
  v9[0] = lazy protocol witness table accessor for type SearchOverlayView and conformance SearchOverlayView();
  v9[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchPrimitiveModifier<A>.SearchConfigModifier, v4);
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v9);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v6, &v8);
}

uint64_t MenuControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance MenuControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t CompactMenuControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in MenuControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in CompactMenuControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance CompactMenuControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

ValueMetadata *type metadata accessor for MenuControlGroupStyle()
{
  return &type metadata for MenuControlGroupStyle;
}

ValueMetadata *type metadata accessor for CompactMenuControlGroupStyle()
{
  return &type metadata for CompactMenuControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase;
  if (!lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuControlGroupStyleBase, &unk_1E1AEA530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MenuControlGroupSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187848E54 + 4 * byte_187C64965[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187848E88 + 4 * byte_187C64960[v4]))();
}

uint64_t sub_187848E88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187848E90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187848E98);
  return result;
}

uint64_t sub_187848EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187848EACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187848EB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187848EB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MenuControlGroupSize()
{
  return &type metadata for MenuControlGroupSize;
}

uint64_t initializeWithCopy for MenuControlGroupStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for MenuControlGroupStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MenuControlGroupStyleBase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

void *type metadata accessor for MenuControlGroupStyleBase()
{
  return &unk_1E1AEA530;
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupSize and conformance MenuControlGroupSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize;
  if (!lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuControlGroupSize, &type metadata for MenuControlGroupSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize);
  }
  return result;
}

uint64_t MenuControlGroupStyleBase.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int v7;
  BOOL v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  v13 = static VerticalAlignment.center.getter();
  outlined copy of Environment<Bool>.Content(v3, v4);
  v7 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  v8 = v7 == 2;
  KeyPath = swift_getKeyPath();
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0xE000000000000000;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  *(_BYTE *)(v11 + 24) = v4;
  *(_QWORD *)(v11 + 32) = v5;
  *(_BYTE *)(v11 + 40) = v6;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = KeyPath;
  *(_BYTE *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = partial apply for closure #3 in MenuControlGroupStyleBase.body.getter;
  *(_QWORD *)(a1 + 96) = v11;
  return outlined copy of Environment<Bool>.Content(v3, v4);
}

uint64_t EnvironmentValues.menuControlGroupSize.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1E1AE1F90, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1E1AE1F90, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.menuControlGroupSize : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuControlGroupSize.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuControlGroupSize : EnvironmentValues()
{
  return EnvironmentValues.menuControlGroupSize.setter();
}

uint64_t EnvironmentValues.menuControlGroupSize.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1E1AE1F90, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void closure #3 in MenuControlGroupStyleBase.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_9:
      v5 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    v9 = 0;
    a5 = !a5;
    do
    {
      if (v9 >= v5[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      v10 = v9 + 1;
      v11 = type metadata accessor for PlatformItemList.Item();
      v12 = (unint64_t)v5
          + ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v9;
      v13 = *(void **)(v12 + 296);
      v14 = *(_QWORD *)(v12 + 304);
      v15 = *(_QWORD *)(v12 + 312);
      v16 = *(_QWORD *)(v12 + 320);
      v17 = *(_QWORD *)(v12 + 328);
      v18 = *(_QWORD *)(v12 + 336);
      v19 = *(_QWORD *)(v12 + 344);
      v20 = *(_QWORD *)(v12 + 352);
      v21 = *(_OWORD *)(v12 + 360);
      v22 = *(_OWORD *)(v12 + 376);
      v23 = *(_QWORD *)(v12 + 392);
      *(_QWORD *)(v12 + 296) = 4;
      *(_QWORD *)(v12 + 304) = 0;
      *(_QWORD *)(v12 + 312) = 0;
      *(_QWORD *)(v12 + 320) = 0;
      *(_QWORD *)(v12 + 328) = 0xC000000000000000;
      *(_OWORD *)(v12 + 368) = 0u;
      *(_OWORD *)(v12 + 384) = 0u;
      *(_OWORD *)(v12 + 336) = 0u;
      *(_OWORD *)(v12 + 352) = 0u;
      outlined consume of PlatformItemList.Item.SystemItem?(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22), v23);
      *(_BYTE *)(v12 + 633) = a5;
      v9 = v10;
    }
    while (v6 != v10);
    *(_QWORD *)a1 = v5;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuControlGroupStyleBase()
{
  type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t associated type witness table accessor for View.Body : View in MenuControlGroupStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18784958C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.menuControlGroupSize.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1878495C4()
{
  return EnvironmentValues.menuControlGroupSize.setter();
}

uint64_t sub_1878495E8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_18784960C()
{
  uint64_t v0;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject();
}

void partial apply for closure #3 in MenuControlGroupStyleBase.body.getter(uint64_t a1)
{
  uint64_t v1;

  closure #3 in MenuControlGroupStyleBase.body.getter(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1E1AE1F90, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>)
  {
    type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>();
    type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>);
  }
}

uint64_t type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>;
  if (!lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label?> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>, MEMORY[0x1E0CE73D0]);
    type metadata accessor for Menu();
  }
  return result;
}

void type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ControlGroupStyleConfiguration.Label?);
    lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label? and conformance <A> A?();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label?>);
  }
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  _UNKNOWN **v2;

  result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ControlGroupStyleConfiguration.Label?);
    v2 = &protocol witness table for ControlGroupStyleConfiguration.Label;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for MenuControlGroupSize?);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for MenuControlGroupSizeKey()
{
  return &unk_1E1AE1F90;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  }
}

uint64_t static TypesettingConfigurationKey.read(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v0 = type metadata accessor for TypesettingLanguage();
  MEMORY[0x1E0C80A78](v0, v1);
  type metadata accessor for Locale.Language?();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale.Language();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18D75D948](v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Locale.Language?((uint64_t)v5);
    v12 = static TypesettingLanguage.automatic.getter();
    MEMORY[0x18D75A510](&v17, v12);
    v15 = v17;
    v16 = v18;
    return TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
    v14 = static TypesettingLanguage.explicit(_:)();
    MEMORY[0x18D75A510](&v17, v14);
    v15 = v17;
    v16 = v18;
    TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
}

void type metadata accessor for Locale.Language?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Locale.Language?)
  {
    type metadata accessor for Locale.Language();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale.Language?);
  }
}

uint64_t outlined destroy of Locale.Language?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Locale.Language?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static TypesettingConfigurationKey.write(to:value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  type metadata accessor for Locale.Language?();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale.Language();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TypesettingLanguage.Storage();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage.Storage(a2, (uint64_t)v16);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 2, v17))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
    return UIMutableTraits.typesettingLanguage.setter();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v16, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v12, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
    UIMutableTraits.typesettingLanguage.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t outlined init with copy of TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TypesettingLanguage.Storage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI15_ToolbarOutputsVG_AF011PreferencesG0Vs5NeverOTg503_s7d9UI19Tuplef39ContentV05_makeD07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = (_DWORD *)(a1 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      v6 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_DWORD *)(v9 + 40) = v6;
      v4 += 6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t TupleToolbarContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t static Group<A>._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  _BYTE v26[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 14);
  v11 = a2[8];
  v12 = *((_DWORD *)a2 + 18);
  LODWORD(v17) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v16 = *(_OWORD *)(a2 + 5);
  v13 = a2[3];
  v14 = a2[4];
  _GraphValue.subscript.getter();
  v17 = v7;
  v18 = v8;
  v19 = v9;
  v20 = v13;
  v21 = v14;
  v22 = v16;
  v23 = v10;
  v24 = v11;
  v25 = v12;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v26, &v17, a3, a4);
}

uint64_t partial apply for closure #1 in static Group<A>._makeToolbar(content:inputs:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Group<A>._makeToolbar(content:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static Group<A>._makeContent(content:inputs:resolved:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[4];

  v9 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = a2[2];
  v12 = a2[5];
  LODWORD(v16) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v13 = a2[3];
  v14 = a2[4];
  _GraphValue.subscript.getter();
  v16 = v9;
  v17 = v10;
  v18 = v11;
  v19 = v13;
  v20 = v14;
  v21 = v12;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 40))(v22, &v16, a3, a4, a5);
}

uint64_t closure #1 in static Group<A>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for Group();
  v10[3] = a2;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v10, a2, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

uint64_t partial apply for closure #1 in static Group<A>._makeContent(content:inputs:resolved:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Group<A>._makeToolbar(content:inputs:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Group<A>._makeContent(content:inputs:resolved:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a5 - 8));
}

void TupleToolbarContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static TupleToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t D07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int128 *, _QWORD);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v39 = *a1;
  v6 = *a2;
  v37 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v9 = a2[6];
  v10 = *((_DWORD *)a2 + 14);
  v11 = a2[8];
  v12 = *((_DWORD *)a2 + 18);
  lazy protocol witness table accessor for type ToolbarContentDescriptor and conformance ToolbarContentDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v8;
  v14 = v7;
  v15 = v45[0];
  LODWORD(v45[0]) = v39;
  v45[1] = v6;
  v46 = v37;
  v47 = v14;
  v48 = *(_OWORD *)(a2 + 3);
  v49 = v13;
  v50 = v9;
  v51 = v10;
  v38 = v11;
  v52 = v11;
  v53 = v12;
  v54 = 0;
  v55 = 0;
  v56 = MEMORY[0x1E0DEE9D8];
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = (__int128 *)(v15 + 40);
    do
    {
      v18 = *v17;
      v17 = (__int128 *)((char *)v17 + 24);
      v54 = AGTupleElementOffset();
      v44 = v18;
      v21 = type metadata accessor for TupleToolbarContent.Visitor(0, a3, v19, v20);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v45, v21, (uint64_t)&protocol witness table for TupleToolbarContent<A>.Visitor);
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v22 = swift_bridgeObjectRetain();
  D07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI15_ToolbarOutputsVG_AF011PreferencesG0Vs5NeverOTg503_s7d9UI19Tuplef39ContentV05_makeD07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n(v22);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  v41 = D07content6inputsAA01_D7g25VAA11_GraphValueVyACyxGG_q18_D6InputsVtFZAA011H57I0VAHcfu_33_22819586c44c68699c8129f2100aeaa3AhPTf3nnnpk_nTf1cn_n;
  v42 = v44;
  v43 = DWORD2(v44);
  v40 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v24 = MEMORY[0x1E0CE6550];
    v25 = MEMORY[0x1E0CE6548];
    do
    {
      v26 = (void (*)(__int128 *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v28 = *v27;
      v29 = v27[1];
      v26(&v44, 0);
      v30 = v40;
      *(_QWORD *)&v44 = v9;
      swift_bridgeObjectRetain();
      v31 = PreferenceKeys.endIndex.getter();
      if (v40 < 0 || v40 >= v31)
        __break(1u);
      ++v40;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(&v41, v24, v25, v28, v29);
    }
    while (v30 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v56 + 16))
  {
    v32 = *(_QWORD *)(v56 + 48);
    v33 = a4;
  }
  else
  {
    v33 = a4;
    v32 = v38;
  }
  v34 = v43;
  *(_QWORD *)v33 = v42;
  *(_DWORD *)(v33 + 8) = v34;
  *(_QWORD *)(v33 + 16) = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleToolbarContent.Visitor);
}

uint64_t TupleToolbarContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t result;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _BYTE v40[4];
  uint64_t v41;
  int v42;
  uint64_t v43;

  v8 = *((_QWORD *)v5 + 9);
  v9 = *((_QWORD *)v5 + 12);
  v10 = __OFADD__(v8, v9);
  v11 = v8 + v9;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v4 = v5;
    v14 = *((_QWORD *)v5 + 3);
    v15 = *((_QWORD *)v5 + 6);
    v16 = *((_QWORD *)v5 + 7);
    v26 = *((_DWORD *)v5 + 16);
    v28 = *((_DWORD *)v5 + 20);
    v24 = *((_DWORD *)v5 + 4);
    v17 = *((_QWORD *)v5 + 1);
    v25 = v11;
    LODWORD(v30) = *(_DWORD *)v5;
    v29 = v9;
    type metadata accessor for TupleToolbarContent(255, *(_QWORD *)(a2 + 16), a3, a4);
    type metadata accessor for _GraphValue();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v18 = *((_QWORD *)v5 + 4);
    v19 = *((_QWORD *)v5 + 5);
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    _GraphValue.init(_:)();
    v30 = v17;
    v31 = v24;
    v32 = v14;
    v33 = v18;
    v34 = v19;
    v35 = v15;
    v36 = v16;
    v37 = v26;
    v38 = v25;
    v39 = v28;
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v41, v40, &v30, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v27 = v41;
    v7 = v42;
    v6 = v43;
    *((_QWORD *)v5 + 12) = v43 + v29;
    v5 = (char *)*((_QWORD *)v5 + 13);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_3;
  }
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
LABEL_3:
  v21 = *((_QWORD *)v5 + 2);
  v20 = *((_QWORD *)v5 + 3);
  if (v21 >= v20 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v21 + 1;
  v22 = &v5[24 * v21];
  *((_QWORD *)v22 + 4) = v27;
  *((_DWORD *)v22 + 10) = v7;
  *((_QWORD *)v22 + 6) = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *((_QWORD *)v4 + 13) = v5;
  return result;
}

uint64_t protocol witness for ToolbarContentTypeVisitor.visit<A>(type:) in conformance TupleToolbarContent<A>.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleToolbarContent.Visitor.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t instantiation function for generic protocol witness table for <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> Group<A>, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void protocol witness for ToolbarContent.body.getter in conformance TupleToolbarContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance TupleToolbarContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleToolbarContent._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t getEnumTagSinglePayload for TupleToolbarContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_18784AB94 + 4 * byte_187C64B40[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleToolbarContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t initializeWithCopy for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t static Text.Transition.identity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  int v4;
  unint64_t v5;
  char v6;
  char v7;

  if (one-time initialization token for identity != -1)
    swift_once();
  v2 = static Text.Transition.identity;
  v3 = word_1EDE34854;
  v4 = dword_1EDE34850;
  v5 = dword_1EDE34850 | ((unint64_t)word_1EDE34854 << 32);
  v6 = byte_1EDE34856;
  *(_QWORD *)a1 = static Text.Transition.identity;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v7 = HIBYTE(word_1EDE34854);
  *(_BYTE *)(a1 + 13) = HIBYTE(word_1EDE34854);
  *(_BYTE *)(a1 + 14) = v6;
  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t one-time initialization function for opacity()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  __int16 v3;
  char v4;

  result = static ContentTransition.opacity.getter();
  static Text.Transition.opacity = v1;
  word_1EDE34864 = v3;
  dword_1EDE34860 = v2;
  byte_1EDE34866 = v4;
  return result;
}

uint64_t static Text.Transition.opacity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  int v4;
  unint64_t v5;
  char v6;
  char v7;

  if (one-time initialization token for opacity != -1)
    swift_once();
  v2 = static Text.Transition.opacity;
  v3 = word_1EDE34864;
  v4 = dword_1EDE34860;
  v5 = dword_1EDE34860 | ((unint64_t)word_1EDE34864 << 32);
  v6 = byte_1EDE34866;
  *(_QWORD *)a1 = static Text.Transition.opacity;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v7 = HIBYTE(word_1EDE34864);
  *(_BYTE *)(a1 + 13) = HIBYTE(word_1EDE34864);
  *(_BYTE *)(a1 + 14) = v6;
  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t one-time initialization function for interpolate()
{
  uint64_t result;
  uint64_t v1;
  int v2;
  __int16 v3;
  char v4;

  result = static ContentTransition.interpolate.getter();
  static Text.Transition.interpolate = v1;
  word_1EDE34874 = v3;
  dword_1EDE34870 = v2;
  byte_1EDE34876 = v4;
  return result;
}

uint64_t static Text.Transition.interpolate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  int v4;
  unint64_t v5;
  char v6;
  char v7;

  if (one-time initialization token for interpolate != -1)
    swift_once();
  v2 = static Text.Transition.interpolate;
  v3 = word_1EDE34874;
  v4 = dword_1EDE34870;
  v5 = dword_1EDE34870 | ((unint64_t)word_1EDE34874 << 32);
  v6 = byte_1EDE34876;
  *(_QWORD *)a1 = static Text.Transition.interpolate;
  *(_BYTE *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v7 = HIBYTE(word_1EDE34874);
  *(_BYTE *)(a1 + 13) = HIBYTE(word_1EDE34874);
  *(_BYTE *)(a1 + 14) = v6;
  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t View.textTransition(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.textTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  __int16 v5;
  char v6;

  result = EnvironmentValues.contentTransition.getter();
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_18784B2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  __int16 v5;
  char v6;

  result = EnvironmentValues.contentTransition.getter();
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_18784B330(uint64_t a1)
{
  return key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(a1);
}

uint64_t EnvironmentValues.textTransition.setter()
{
  return EnvironmentValues.contentTransition.setter();
}

uint64_t key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(uint64_t a1)
{
  outlined copy of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
  return EnvironmentValues.contentTransition.setter();
}

uint64_t (*EnvironmentValues.textTransition.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v4;
  int v5;
  __int16 v6;
  char v7;

  *(_QWORD *)(a1 + 16) = v1;
  EnvironmentValues.contentTransition.getter();
  *(_QWORD *)a1 = v4;
  *(_WORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 14) = v7;
  return EnvironmentValues.textTransition.modify;
}

uint64_t EnvironmentValues.textTransition.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  v4 = *(_BYTE *)(a1 + 13);
  if ((a2 & 1) == 0)
    return EnvironmentValues.contentTransition.setter();
  outlined copy of ContentTransition.Storage(v2, v3, v4);
  EnvironmentValues.contentTransition.setter();
  return outlined consume of ContentTransition.Storage(v2, v3, v4);
}

uint64_t EnvironmentValues.textTransitionAddsDrawingGroup.getter()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
}

uint64_t (*EnvironmentValues.textTransitionAddsDrawingGroup.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
  return EnvironmentValues.textTransitionAddsDrawingGroup.modify;
}

uint64_t EnvironmentValues.textTransitionAddsDrawingGroup.modify()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter();
}

uint64_t sub_18784B5AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  __int16 v5;
  char v6;

  result = EnvironmentValues.contentTransition.getter();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
  *(_BYTE *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_18784B604(uint64_t a1)
{
  return key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(a1);
}

uint64_t sub_18784B618@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.contentTransitionAddsDrawingGroup.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18784B654()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter();
}

uint64_t destroy for Text.Transition(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 13) = v7;
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  return a1;
}

uint64_t assignWithCopy for Text.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 12);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(_QWORD *)a2, v6 | (v5 << 32), v7);
  v8 = *(_QWORD *)a1;
  v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 12) = v5;
  v10 = *(_BYTE *)(a1 + 13);
  *(_BYTE *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(_BYTE *)(a1 + 14) = *(_BYTE *)(a2 + 14);
  return a1;
}

uint64_t assignWithTake for Text.Transition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 2);
  v7 = *(_QWORD *)a1;
  v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  v9 = *(_BYTE *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(_BYTE *)(a1 + 14) = *((_BYTE *)a2 + 14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Transition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 15))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 14);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 15) = 0;
    if (a2)
      *(_BYTE *)(result + 14) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Transition()
{
  return &type metadata for Text.Transition;
}

uint64_t sub_18784B89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Text.Transition>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Transition>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Transition>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Transition>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Transition>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

BOOL static NSUserActivity.TypedPayloadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSUserActivity.TypedPayloadError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NSUserActivity.TypedPayloadError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void NSUserActivity.typedPayload<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v3;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE *v15;

  v7 = objc_msgSend(v3, sel_userInfo);
  if (v7)
  {
    v8 = v7;
    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for DictionaryDecoder();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = 0;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 2;
    *(_QWORD *)(inited + 40) = 1;
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_OWORD *)(inited + 80) = 0u;
    *(_OWORD *)(inited + 96) = 0u;
    *(_QWORD *)(inited + 112) = 0;
    *(_QWORD *)(inited + 120) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    type metadata accessor for _ContiguousArrayStorage<(Any, Any)>();
    v11 = swift_allocObject();
    v12 = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v11 + 16) = xmmword_187BF9830;
    *(_QWORD *)(v11 + 56) = v12;
    strcpy((char *)(v11 + 32), "__DICTIONARY__");
    *(_BYTE *)(v11 + 47) = -18;
    type metadata accessor for [AnyHashable : Any]();
    *(_QWORD *)(v11 + 88) = v13;
    *(_QWORD *)(v11 + 64) = v9;
    type metadata accessor for NSDictionary();
    v14 = (void *)NSDictionary.init(dictionaryLiteral:)();
    DictionaryDecoder.decode<A>(_:from:)(a1, v14, a1, a2, a3);
    swift_bridgeObjectRelease();

  }
  else
  {
    lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError();
    swift_allocError();
    *v15 = 0;
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError;
  if (!lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSUserActivity.TypedPayloadError, &type metadata for NSUserActivity.TypedPayloadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError;
  if (!lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NSUserActivity.TypedPayloadError, &type metadata for NSUserActivity.TypedPayloadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(Any, Any)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>)
  {
    type metadata accessor for (Any, Any)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
  }
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

void NSUserActivity.setTypedPayload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t inited;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  Class isa;
  _BYTE *v15;
  _OWORD v16[2];
  _BYTE v17[24];
  uint64_t v18;

  v6 = v4;
  type metadata accessor for DictionaryEncoder();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 24) = 0;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 16) = 0;
  *(_BYTE *)(inited + 40) = 2;
  *(_QWORD *)(inited + 48) = 1;
  *(_OWORD *)(inited + 56) = 0u;
  *(_OWORD *)(inited + 72) = 0u;
  *(_OWORD *)(inited + 88) = 0u;
  *(_OWORD *)(inited + 104) = 0u;
  *(_QWORD *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v11 = DictionaryEncoder.encode<A>(_:)(a1, a2, a4);
  if (v5)
  {
    swift_release();
    return;
  }
  v12 = v11;
  strcpy((char *)v16, "__DICTIONARY__");
  HIBYTE(v16[0]) = -18;
  v13 = objc_msgSend(v11, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v16[0]);
  swift_unknownObjectRelease();
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
  if (v18)
  {
    type metadata accessor for [AnyHashable : Any]();
    if ((swift_dynamicCast() & 1) != 0)
    {
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v6, sel_setUserInfo_, isa);

      swift_setDeallocating();
      outlined consume of DictionaryEncoder.DateEncodingStrategy(*(_QWORD *)(inited + 24), *(_QWORD *)(inited + 32), *(unsigned __int8 *)(inited + 40));
      outlined consume of DictionaryDecoder.DataDecodingStrategy(*(_QWORD *)(inited + 48), *(_QWORD *)(inited + 56));
      outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(_QWORD *)(inited + 64), *(_QWORD *)(inited + 72));
      outlined consume of DictionaryDecoder.DataDecodingStrategy(*(_QWORD *)(inited + 112), *(_QWORD *)(inited + 120));
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v17);
  }
  lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError();
  swift_allocError();
  *v15 = 1;
  swift_willThrow();
  swift_release();

}

uint64_t storeEnumTagSinglePayload for NSUserActivity.TypedPayloadError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18784C008 + 4 * byte_187C64C95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18784C03C + 4 * asc_187C64C90[v4]))();
}

uint64_t sub_18784C03C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18784C044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18784C04CLL);
  return result;
}

uint64_t sub_18784C058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18784C060);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18784C064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18784C06C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NSUserActivity.TypedPayloadError()
{
  return &type metadata for NSUserActivity.TypedPayloadError;
}

id specialized UIKitTextInputTraits.updateTraits(in:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id result;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  if (a2)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    objc_msgSend(v3, sel_setKeyboardType_, v10);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    objc_msgSend(v3, sel_setKeyboardType_, v10);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v5 = 1;
  if ((v10 & 1) == 0)
    v5 = 2;
  if (v10 == 2)
    v6 = 0;
  else
    v6 = v5;
  objc_msgSend(v3, sel_setAutocorrectionType_, v6);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v11)
  {
    v7 = (void *)MEMORY[0x18D75CC88]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v3, sel_setTextContentType_, v7);

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  objc_msgSend(v3, sel_setAutocapitalizationType_, v10);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  swift_retain_n();
  if (a2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v8 = (id)qword_187C64E18[(char)v10];
  result = objc_msgSend(v3, sel_returnKeyType);
  if (result != v8)
    return objc_msgSend(v3, sel_setReturnKeyType_, v8);
  return result;
}

void specialized UITextInputTraits_Private.updatePrivateTraits(in:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  unsigned int v3;
  unsigned __int16 v4;
  unsigned __int8 v5;

  if (a2)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v3 = v4 | (v5 << 16);
  if (v4 != 2)
  {
    if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceEnableDictation) & 1) != 0)
    {
      if (((v3 ^ objc_msgSend(v2, sel_forceEnableDictation)) & 1) == 0)
      {
LABEL_10:
        if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        {
          if ((v4 & 1) != 0)
          {
LABEL_16:
            if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceSpellingDictation) & 1) != 0)
            {
              if (objc_msgSend(v2, sel_forceSpellingDictation) == (unsigned __int16)(v4 & 0x100) >> 8)
              {
LABEL_21:
                if ((objc_msgSend(v2, sel_respondsToSelector_, sel_preferOnlineDictation) & 1) != 0)
                {
                  if (objc_msgSend(v2, sel_preferOnlineDictation) == (v3 & 0x10000) >> 16)
                    return;
                }
                else if ((v3 & 0x10000) == 0)
                {
                  return;
                }
                _UITextInputTraitSetPreferOnlineDictation(v2, HIWORD(v3) & 1);
                return;
              }
            }
            else if ((v4 & 0x100) == 0)
            {
              goto LABEL_21;
            }
            _UITextInputTraitSetForceSpellingDictation(v2, (v3 >> 8) & 1);
            goto LABEL_21;
          }
LABEL_15:
          _UITextInputTraitSetForceDisableDictation(v2, (v4 & 1) == 0);
          goto LABEL_16;
        }
LABEL_14:
        if (((v3 ^ objc_msgSend(v2, sel_forceDisableDictation)) & 1) != 0)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else if ((v4 & 1) == 0)
    {
      if ((objc_msgSend(v2, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
    _UITextInputTraitSetForceEnableDictation(v2, v4 & 1);
    goto LABEL_10;
  }
}

void UIKitRichTextEditor.makeUIView(context:)(_OWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46[2];
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  objc_super v58;
  uint64_t v59[3];
  unsigned __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v2 = type metadata accessor for AttributedString();
  MEMORY[0x1E0C80A78](v2, v3);
  v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[1];
  v61 = *a1;
  v62 = v8;
  v9 = a1[2];
  v10 = a1[1];
  v64 = *a1;
  v65 = v10;
  v66 = *((_BYTE *)a1 + 32);
  v63 = v9;
  v11 = v10;
  v51 = v4;
  v50 = v12;
  if (v66 == 1)
  {
    MEMORY[0x1E0C80A78](v4, v5);
    v46[-2] = (id)__ROR8__(v11, 32);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>((uint64_t)&v61);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v64);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)&v64);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>((uint64_t)&v61);
    v13 = *((_QWORD *)&v60 + 1);
    v11 = v60;
  }
  else
  {
    v13 = *((_QWORD *)&v65 + 1);
    v60 = __PAIR128__(*((unint64_t *)&v65 + 1), v10);
    swift_retain();
    swift_retain();
  }
  v59[0] = v11;
  v59[1] = v13;
  RichTextAttributeResolver.init(environment:)(v59, &aBlock);
  v14 = aBlock;
  v15 = v53;
  v16 = v54;
  v17 = *((_QWORD *)&v63 + 1);
  v18 = (_QWORD *)(*((_QWORD *)&v63 + 1) + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver);
  v19 = *(_QWORD *)(*((_QWORD *)&v63 + 1) + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver);
  v20 = *(_QWORD *)(*((_QWORD *)&v63 + 1)
                  + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver
                  + 8);
  v21 = *(_QWORD *)(*((_QWORD *)&v63 + 1)
                  + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver
                  + 16);
  *v18 = aBlock;
  v18[1] = v15;
  v18[2] = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v19, v20, v21);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C8]), sel_init);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12F0]), (SEL)&selRef_userActivityWillSave_);
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), (SEL)&selRef_userActivityWillSave_);
  objc_msgSend(v22, sel_addTextLayoutManager_, v23);
  v48 = v23;
  v47 = v24;
  objc_msgSend(v23, sel_setTextContainer_, v24);
  v25 = OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage;
  v49 = v17;
  v26 = *(void **)(v17 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage);
  *(_QWORD *)(v17 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage) = v22;
  v46[0] = v22;

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  v27 = (objc_class *)type metadata accessor for NSSwiftMutableAttributedString(0);
  v28 = (char *)objc_allocWithZone(v27);
  v29 = &v28[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  v30 = v50;
  v31 = v51;
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(&v28[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage], v7, v51);
  v32 = &v29[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
  *(_QWORD *)v32 = v14;
  *((_QWORD *)v32 + 1) = v15;
  *((_QWORD *)v32 + 2) = v16;
  v58.receiver = v28;
  v58.super_class = v27;
  v46[1] = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v33 = objc_msgSendSuper2(&v58, sel_init);
  v34 = v31;
  v35 = v49;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v34);
  v36 = *(void **)(v35 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage);
  *(_QWORD *)(v35 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage) = v33;

  v37 = *(void **)(v35 + v25);
  if (v37)
  {
    v38 = (_OWORD *)swift_allocObject();
    v39 = v62;
    v38[1] = v61;
    v38[2] = v39;
    v38[3] = v63;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for closure #1 in UIKitRichTextEditor.makeUIView(context:);
    *(_QWORD *)(v40 + 24) = v38;
    v56 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
    v57 = v40;
    aBlock = (void *)MEMORY[0x1E0C809B0];
    v53 = 1107296256;
    v54 = thunk for @escaping @callee_guaranteed () -> ();
    v55 = &block_descriptor_15_2;
    v41 = _Block_copy(&aBlock);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>((uint64_t)&v61);
    v42 = v37;
    swift_retain();
    swift_release();
    objc_msgSend(v42, sel_performEditingTransactionUsingBlock_, v41);

    _Block_release(v41);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v41 & 1) == 0)
    {
      v43 = objc_allocWithZone((Class)type metadata accessor for TextEditorTextView());
      v44 = v47;
      v45 = objc_msgSend(v43, sel_initWithFrame_textContainer_, v47, 0.0, 0.0, 0.0, 0.0);
      objc_msgSend(v45, sel_setDelegate_, v35);
      objc_msgSend(v45, sel_setAllowsEditingTextAttributes_, 1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t UIKitRichTextEditor.updateUIView(_:context:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(void **)(a2 + 40);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    v7 = v6;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);

    v4 = v9;
    v5 = v10;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  specialized UIKitTextInputTraits.updateTraits(in:)(v4, v5);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v4, v5);
  v9 = v4;
  v10 = v5;
  UIKitRichTextEditorCoordinator.update(_:configuration:env:)(a1, v2, &v9);
  v9 = v4;
  v10 = v5;
  specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(a1, (uint64_t)&v9);
  swift_release();
  return swift_release();
}

uint64_t UIKitRichTextEditorCoordinator.update(_:configuration:env:)(char *a1, uint64_t a2, uint64_t *a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  _BYTE *v16;
  int *v17;
  _BYTE *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  objc_super v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  _OWORD v48[14];
  _OWORD v49[2];

  v7 = type metadata accessor for AttributedString();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a3;
  v12 = a3[1];
  v13 = (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration];
  swift_beginAccess();
  outlined assign with copy of UIKitRichTextEditor(a2, v13);
  result = swift_endAccess();
  v15 = (uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver];
  if (!*(_QWORD *)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 16])
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v38 = v3;
  *v15 = v11;
  v15[1] = v12;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_QWORD *)&v48[0] = v11;
  *((_QWORD *)&v48[0] + 1) = v12;
  specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(a1, (uint64_t)v48);
  v16 = TextEditorTextView.helper.getter();
  v42 = v11;
  v43 = v12;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v42, (uint64_t)v48);
  v17 = (int *)&v16[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v17, (uint64_t)&v42);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)v48, (uint64_t)v17);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v42);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v48);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v42);

  v18 = TextEditorTextView.helper.getter();
  v42 = v11;
  v43 = v12;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)v48);
  v19 = &v18[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  v19[12] = v48[12];
  v19[13] = v48[13];
  v19[14] = v49[0];
  *(_OWORD *)((char *)v19 + 233) = *(_OWORD *)((char *)v49 + 9);
  v19[8] = v48[8];
  v19[9] = v48[9];
  v19[10] = v48[10];
  v19[11] = v48[11];
  v19[4] = v48[4];
  v19[5] = v48[5];
  v19[6] = v48[6];
  v19[7] = v48[7];
  *v19 = v48[0];
  v19[1] = v48[1];
  v19[2] = v48[2];
  v19[3] = v48[3];
  ScrollViewHelper.didChangeMargins(from:)();

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8]();
  v20 = v15[2];
  if (!v20)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v22 = *v15;
  v21 = v15[1];
  v23 = (objc_class *)type metadata accessor for NSSwiftMutableAttributedString(0);
  v24 = (char *)objc_allocWithZone(v23);
  v25 = &v24[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  v26 = v39;
  v27 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(&v24[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage], v10, v40);
  v28 = &v25[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
  *(_QWORD *)v28 = v22;
  *((_QWORD *)v28 + 1) = v21;
  *((_QWORD *)v28 + 2) = v20;
  v41.receiver = v24;
  v41.super_class = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v29 = objc_msgSendSuper2(&v41, sel_init);
  result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  v30 = v38;
  v31 = *(void **)&v38[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage];
  if (v31)
  {
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = v30;
    *(_QWORD *)(v32 + 24) = v29;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:);
    *(_QWORD *)(v33 + 24) = v32;
    v46 = partial apply for thunk for @callee_guaranteed () -> ();
    v47 = v33;
    v42 = MEMORY[0x1E0C809B0];
    v43 = 1107296256;
    v44 = thunk for @escaping @callee_guaranteed () -> ();
    v45 = &block_descriptor_61;
    v34 = _Block_copy(&v42);
    v35 = v31;
    v36 = v30;
    v37 = v29;
    swift_retain();
    swift_release();
    objc_msgSend(v35, sel_performEditingTransactionUsingBlock_, v34);

    _Block_release(v34);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v37 & 1) == 0)
      return result;
    __break(1u);
    goto LABEL_6;
  }
LABEL_8:
  __break(1u);
  return result;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitRichTextEditor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  id v7;
  id result;
  uint64_t v9;

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v6, type metadata accessor for UIKitRichTextEditor);
  v7 = objc_allocWithZone((Class)type metadata accessor for UIKitRichTextEditorCoordinator(0));
  result = UIKitRichTextEditorCoordinator.init(configuration:)((uint64_t)v6);
  *a3 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance UIKitRichTextEditor(uint64_t *a1)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  char v5;

  v2 = _ProposedSize.width.getter();
  if ((v3 & 1) == 0)
    *a1 = v2;
  result = _ProposedSize.height.getter();
  if ((v5 & 1) == 0)
    a1[1] = result;
  return result;
}

id UIKitRichTextEditorCoordinator.init(configuration:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage] = 0;
  v4 = &v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver];
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  v5 = OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_helper;
  v6 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  v7 = v1;
  *(_QWORD *)&v1[v5] = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  swift_unknownObjectWeakInit();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration], type metadata accessor for UIKitRichTextEditor);

  v10.receiver = v7;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_init);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for UIKitRichTextEditor);
  return v8;
}

Swift::Void __swiftcall UIKitRichTextEditorCoordinator.textViewDidChange(_:)(UITextView *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  NSTextStorage *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;

  v3 = type metadata accessor for UIKitRichTextEditor(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for AttributedString();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v38 - v22;
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v38 - v27;
  v29 = -[UITextView textStorage](a1, sel_textStorage, v26);
  type metadata accessor for NSSwiftAttributedString(0);
  v30 = swift_dynamicCastClass();
  if (v30)
  {
    v38 = v1;
    v39 = v6;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v31(v23, v30 + OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage, v15);

  }
  else
  {
    type metadata accessor for NSSwiftMutableAttributedString(0);
    v32 = swift_dynamicCastClass();
    if (!v32)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
      goto LABEL_8;
    }
    v38 = v1;
    v39 = v6;
    v33 = v32 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v33, (uint64_t)v10, type metadata accessor for _NSSwiftAttributedStringStorage);

    v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v31(v23, (uint64_t)v10, v15);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, type metadata accessor for _NSSwiftAttributedStringStorage);
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v34(v14, v23, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    v34(v28, v14, v15);
    v35 = v38 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration;
    swift_beginAccess();
    v36 = (uint64_t)v39;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v35, (uint64_t)v39, type metadata accessor for UIKitRichTextEditor);
    v31(v19, (uint64_t)v28, v15);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    v37 = *(void (**)(char *, uint64_t))(v16 + 8);
    v37(v19, v15);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v36, type metadata accessor for UIKitRichTextEditor);
    v37(v28, v15);
    return;
  }
LABEL_8:
  outlined destroy of AttributedString?((uint64_t)v14);
}

void closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage);
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v4, sel_replaceCharactersInRange_withAttributedString_, 0, objc_msgSend(v4, sel_length), a2);

  }
  else
  {
    __break(1u);
  }
}

uint64_t UIKitRichTextEditorCoordinator.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration, type metadata accessor for UIKitRichTextEditor);

  outlined consume of RichTextAttributeResolver?(*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 16));
  return swift_unknownObjectWeakDestroy();
}

uint64_t ObjC metadata update function for UIKitRichTextEditorCoordinator()
{
  return type metadata accessor for UIKitRichTextEditorCoordinator(0);
}

uint64_t type metadata accessor for UIKitRichTextEditorCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitRichTextEditorCoordinator);
}

void type metadata completion function for UIKitRichTextEditorCoordinator()
{
  unint64_t v0;

  type metadata accessor for Binding<AttributedString>(319, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitRichTextEditor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    v7 = *(int *)(v4 + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for AttributedString();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for UIKitRichTextEditor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

_QWORD *initializeWithCopy for UIKitRichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  return a1;
}

_QWORD *assignWithCopy for UIKitRichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

_QWORD *initializeWithTake for UIKitRichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for UIKitRichTextEditor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitRichTextEditor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18784E014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitRichTextEditor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18784E06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitRichTextEditor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitRichTextEditor);
}

void type metadata completion function for UIKitRichTextEditor()
{
  unint64_t v0;

  type metadata accessor for Binding<AttributedString>(319, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t outlined assign with copy of UIKitRichTextEditor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UIKitRichTextEditor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_18784E18C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)()
{
  uint64_t v0;

  closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_18784E1C0()
{
  return swift_deallocObject();
}

void _UITextInputTraitSetForceDisableDictation(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setForceDisableDictation:", a2);

}

void _UITextInputTraitSetPreferOnlineDictation(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setPreferOnlineDictation:", a2);

}

void _UITextInputTraitSetForceSpellingDictation(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setForceSpellingDictation:", a2);

}

void _UITextInputTraitSetForceEnableDictation(void *a1, uint64_t a2)
{
  id v3;

  v3 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(v3, "setForceEnableDictation:", a2);

}

uint64_t outlined consume of RichTextAttributeResolver?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_18784E34C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));

  return swift_deallocObject();
}

id partial apply for closure #1 in UIKitRichTextEditor.makeUIView(context:)()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(v0 + 56);
  result = *(id *)(v1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage);
  if (result)
    return objc_msgSend(result, sel_setTextStorage_, *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage));
  __break(1u);
  return result;
}

uint64_t sub_18784E3BC()
{
  return swift_deallocObject();
}

void type metadata accessor for Binding<AttributedString>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for AttributedString();
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined destroy of AttributedString?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for Binding<AttributedString>(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnyListSelection.Storage.__allocating_init(box:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = swift_allocObject();
  v3 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 184);
  v5 = type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(*(_QWORD *)v2 + 168), *(_QWORD *)(*(_QWORD *)v2 + 176), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, a1, v5);
  return v2;
}

void AnyListSelection.StorageBase.isEmpty.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.allowsMultipleSelection.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.count.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.isSelected(value:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.canSelect(value:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.equals(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.deselectAll()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.validateSelection(value:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.apply<A>(as:operation:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyListSelection.StorageBase.description.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AnyListSelection.StorageBase()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for AnyListSelection.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SelectionManagerBox(319, *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyListSelection.StorageBase()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t AnyListSelection.Storage.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyListSelection.Storage.isEmpty.getter(SelectionManagerBox.isEmpty.getter, a2, a3, a4);
}

uint64_t AnyListSelection.Storage.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 168);
  v7 = type metadata accessor for SelectionManagerBox(0, v6, *(_QWORD *)(*v4 + 176), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v17 - v10;
  v12 = (uint64_t)v4 + *(_QWORD *)(v5 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v14 = Set.count.getter();
    swift_bridgeObjectRelease();
    return v14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return 1;
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v11, 1, v6) != 1)
  {
    v15 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v11, v15);
    return 1;
  }
  return 0;
}

uint64_t AnyListSelection.Storage.allowsMultipleSelection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyListSelection.Storage.isEmpty.getter((uint64_t (*)(uint64_t))SelectionManagerBox.allowsMultipleSelection.getter, a2, a3, a4);
}

uint64_t AnyListSelection.Storage.isEmpty.getter(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *v4;
  v7 = type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(*v4 + 168), *(_QWORD *)(*v4 + 176), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - v10;
  v12 = (uint64_t)v4 + *(_QWORD *)(v6 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  LOBYTE(a1) = a1(v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return a1 & 1;
}

uint64_t AnyListSelection.Storage.isSelected(value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 168);
  v8 = *(_QWORD *)(*v4 + 176);
  v9 = type metadata accessor for SelectionManagerBox(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v16 - v12;
  v14 = (uint64_t)v4 + *(_QWORD *)(v6 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  LOBYTE(a1) = AnyNavigationLinkPresentedValue.isSelected<A>(in:)((uint64_t)v13, a1, v7, v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return a1 & 1;
}

BOOL AnyListSelection.Storage.canSelect(value:)(uint64_t a1)
{
  uint64_t v1;

  return specialized AnyNavigationLinkPresentedValue.canBeSelected<A>(in:)(a1, *(_QWORD *)(*(_QWORD *)v1 + 168));
}

uint64_t AnyListSelection.Storage.equals(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  _BYTE v25[24];

  v5 = *v4;
  v7 = *(_QWORD *)(*v4 + 168);
  v6 = *(_QWORD *)(*v4 + 176);
  v8 = type metadata accessor for SelectionManagerBox(0, v7, v6, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v25[-v15];
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v18 = v17;
    v19 = (uint64_t)v4 + *(_QWORD *)(v5 + 184);
    swift_beginAccess();
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v20(v16, v19, v8);
    v21 = v18 + *(_QWORD *)(*(_QWORD *)v18 + 184);
    swift_beginAccess();
    v20(v12, v21, v8);
    v22 = static SelectionManagerBox.== infix(_:_:)((uint64_t)v16, v12, v7, v6);
    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v12, v8);
    v23(v16, v8);
  }
  else
  {
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t AnyListSelection.Storage.deselectAll()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_beginAccess();
  type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), v2);
  LOBYTE(v1) = SelectionManagerBox.deselectAll()();
  swift_endAccess();
  return v1 & 1;
}

uint64_t AnyListSelection.Storage.validateSelection(value:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 184);
  swift_beginAccess();
  AnyNavigationLinkPresentedValue.validateSelection<A>(in:)(v4, a1, *(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176));
  return swift_endAccess();
}

uint64_t AnyListSelection.Storage.apply<A>(as:operation:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  int EnumCaseMultiPayload;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v6 = v5;
  v53 = a4;
  v54 = a5;
  v51 = a2;
  v52 = a3;
  v49 = a1;
  v7 = (_QWORD *)*v5;
  v8 = type metadata accessor for Optional();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v46 = (char *)&v44 - v10;
  v11 = v7[21];
  v45 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v44 = (char *)&v44 - v18;
  v19 = type metadata accessor for Optional();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v44 - v22;
  v50 = (char *)v7[22];
  v25 = type metadata accessor for SelectionManagerBox(0, v11, (uint64_t)v50, v24);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (uint64_t *)((char *)&v44 - v28);
  v30 = (char *)v6 + v7[23];
  swift_beginAccess();
  (*(void (**)(uint64_t *, char *, uint64_t))(v26 + 16))(v29, v30, v25);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v20 + 32))(v23, v29, v19);
      Optional<A>.apply<A>(as:operation:)(v49, (uint64_t)v51, v52, v19, v53, (uint64_t)v50, v54);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    }
    else
    {
      v34 = v44;
      v33 = v45;
      (*(void (**)(char *, uint64_t *, uint64_t))(v45 + 32))(v44, v29, v11);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v15, v34, v11);
      v35 = v46;
      v36 = v53;
      v37 = swift_dynamicCast();
      v38 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, v37 ^ 1u, 1, v36);
      MEMORY[0x1E0C80A78](v38, v39);
      *(&v44 - 6) = (char *)v11;
      *(&v44 - 5) = (char *)v36;
      v40 = v54;
      *(&v44 - 4) = v50;
      *(&v44 - 3) = (char *)v40;
      v41 = v52;
      *(&v44 - 2) = (char *)v51;
      *(&v44 - 1) = (char *)v41;
      v42 = v48;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A1) -> (), (uint64_t)(&v44 - 8), MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, v43, (uint64_t)&v55);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v35, v42);
    }
  }
  else
  {
    Set.apply<A>(as:operation:)(v49, v51, v52, *v29, v11, v53, (uint64_t)v50, v54);
    return swift_bridgeObjectRelease();
  }
}

uint64_t AnyListSelection.Storage.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *v4;
  v6 = type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(*v4 + 168), *(_QWORD *)(*v4 + 176), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v15 - v9;
  v11 = (uint64_t)v4 + *(_QWORD *)(v5 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
  v13 = SelectionManagerBox.description.getter(v6, v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v13;
}

uint64_t AnyListSelection.Storage.__ivar_destroyer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 184);
  v6 = type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(*(_QWORD *)v4 + 168), *(_QWORD *)(*(_QWORD *)v4 + 176), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t AnyListSelection.Storage.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 184);
  v6 = type metadata accessor for SelectionManagerBox(0, *(_QWORD *)(*(_QWORD *)v4 + 168), *(_QWORD *)(*(_QWORD *)v4 + 176), a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyListSelection.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyListSelection.Storage);
}

uint64_t type metadata accessor for ToAnyListSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToAnyListSelection);
}

ValueMetadata *type metadata accessor for AnyListSelection()
{
  return &type metadata for AnyListSelection;
}

unint64_t AnyListSelection.description.getter(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;

  _StringGuts.grow(_:)(20);
  v2 = swift_bridgeObjectRelease();
  v3._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyListSelection(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 120))(*a1) & 1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyListSelection()
{
  uint64_t *v0;

  return AnyListSelection.description.getter(*v0);
}

uint64_t AnyListSelection.contains<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  AnyNavigationLinkPresentedValue.init<A>(_:)((uint64_t)v9, a3, a4, v11);
  LOBYTE(a3) = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 104))();
  swift_release();
  return a3 & 1;
}

uint64_t AnyListSelection.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a4 + 144))(a1, a2, a3, a5, a6);
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance AnyListSelection()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))() & 1;
}

uint64_t protocol witness for Selection.allowsMultiple.getter in conformance AnyListSelection()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))() & 1;
}

uint64_t protocol witness for Selection.count.getter in conformance AnyListSelection()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance AnyListSelection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return AnyListSelection.contains<A>(id:)(a1, *v3, a2, a3);
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance AnyListSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return AnyListSelection.apply<A>(as:operation:)(a1, a2, a3, *v5, a4, a5);
}

uint64_t protocol witness for Projection.get(base:) in conformance ToAnyListSelection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = specialized ToAnyListSelection.get(base:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  *a4 = result;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToAnyListSelection<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return specialized ToAnyListSelection.set(base:newValue:)(a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void base witness table accessor for Equatable in ToAnyListSelection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in ToAnyListSelection<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized ToAnyListSelection.get(base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = type metadata accessor for SelectionManagerBox(0, a2, a3, a4);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v15 - v10, a1, v9);
  type metadata accessor for AnyListSelection.Storage(0, a2, a3, v13);
  return AnyListSelection.Storage.__allocating_init(box:)((uint64_t)v11);
}

uint64_t specialized ToAnyListSelection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = type metadata accessor for SelectionManagerBox(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  type metadata accessor for AnyListSelection.Storage(0, a3, a4, v9);
  v10 = swift_dynamicCastClassUnconditional();
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 184);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v11, v7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(a1, *(uint64_t (**)(void))(v1 + 48));
}

unint64_t specialized Dictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t result;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  v3 = v2;
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v7 = v6;
  if ((v6 & 1) != 0)
  {
    v8 = result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v10 = v11;
    }
    outlined init with take of WeakBox<Swift.AnyObject>(*(_QWORD *)(v10 + 56) + 8 * v8, a2);
    specialized _NativeDictionary._delete(at:)(v8, v10);
    *v3 = v10;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v7 & 1) == 0;
  return result;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(unsigned int a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  double result;
  uint64_t v14;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v14;
    }
    v10 = (_OWORD *)(*(_QWORD *)(v9 + 56) + (v7 << 6));
    v11 = v10[1];
    *a2 = *v10;
    a2[1] = v11;
    v12 = v10[3];
    a2[2] = v10[2];
    a2[3] = v12;
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of UpdateViewDestinationRequest(*(_QWORD *)(v9 + 56) + 160 * v7, a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 128) = 0x1FFFFFFFCLL;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }
    outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t static HostingViewRegistry.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t HostingViewRegistry.forEach(_:)(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v2;

  swift_beginAccess();
  v2 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t HostingViewRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HostingViewRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22[8];
  char v23[8];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    if (!v14)
      break;
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_21:
    outlined init with copy of WeakBox<Swift.AnyObject>(*(_QWORD *)(a1 + 56) + 8 * v12, (uint64_t)v23);
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v23, (uint64_t)v22);
    v16 = MEMORY[0x18D760234](v22);
    if (v16)
    {
      v17 = v16;
      swift_getObjectType();
      v18 = swift_conformsToProtocol2();
      if (v18)
        v19 = v18;
      else
        v19 = 0;
      if (v18)
        v20 = v17;
      else
        v20 = 0;
      if (v20)
      {
        a2(v20, v19);
        if (v2)
        {
          swift_unknownObjectRelease();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>);
          return swift_release();
        }
      }
      swift_unknownObjectRelease();
    }
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<Swift.AnyObject>);
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v10 + 2;
  if (v10 + 2 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v10 + 3;
  if (v10 + 3 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v10 + 4;
  if (v10 + 4 >= v8)
    return swift_release();
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_19:
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of HostingViewProtocol.preferenceValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of HostingViewProtocol.convertAnchor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t method lookup function for HostingViewRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HostingViewRegistry.forEach(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t outlined init with copy of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for WeakBox<Swift.AnyObject>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _ScrollViewBoundsModifier.transform.getter(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t _ScrollViewBoundsModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_ScrollViewBoundsModifier.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a3 + a2;
  v9 = *a1;
  v8 = a1[1];
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v7 - 16);
  *(_QWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 40) = v8;
  *a5 = a4;
  a5[1] = v10;
  return swift_retain();
}

uint64_t key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = a4 + a3;
  v10 = *a1;
  v9 = a1[1];
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v8 - 16);
  *(_QWORD *)(v11 + 32) = v10;
  *(_QWORD *)(v11 + 40) = v9;
  swift_retain();
  result = swift_release();
  *a2 = a6;
  a2[1] = v11;
  return result;
}

uint64_t (*_ScrollViewBoundsModifier2.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ScrollViewBoundsModifier<A>()
{
  return &protocol witness table for _ScrollViewBoundsModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ScrollViewBoundsModifier2<A>()
{
  return &protocol witness table for _ScrollViewBoundsModifier2<A>;
}

uint64_t sub_18784FDA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A), a4);
}

uint64_t sub_18784FDCC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1E1B460C8, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A));
}

uint64_t sub_18784FDF0()
{
  return 16;
}

__n128 sub_18784FDFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18784FE08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGRect?) -> (@out A), a4);
}

uint64_t sub_18784FE2C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1E1B46078, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize, @in_guaranteed CGRect?) -> (@out A));
}

uint64_t sub_18784FE50()
{
  return 16;
}

__n128 sub_18784FE5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18784FE68(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _ScrollViewBoundsModifier, (uint64_t)&protocol witness table for _ScrollViewBoundsModifier<A>);
}

uint64_t sub_18784FE7C(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for _ScrollViewBoundsModifier2, (uint64_t)&protocol witness table for _ScrollViewBoundsModifier2<A>);
}

uint64_t sub_18784FE90()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize, @in_guaranteed CGRect?) -> (@out A)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _BYTE *);
  _BYTE v6[40];
  _QWORD v7[2];

  v4 = *(uint64_t (**)(_QWORD *, _BYTE *))(v3 + 32);
  *(double *)v7 = a2;
  *(double *)&v7[1] = a3;
  outlined init with take of CGRect?(a1, (uint64_t)v6);
  return v4(v7, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGRect?) -> (@out A)(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_BYTE *, double, double);
  double v4;
  double v5;
  _BYTE v7[40];

  v3 = *(uint64_t (**)(_BYTE *, double, double))(v2 + 32);
  v4 = *a1;
  v5 = a1[1];
  outlined init with take of CGRect?(a2, (uint64_t)v7);
  return v3(v7, v4, v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 32);
  outlined init with take of CGRect?(a1, (uint64_t)v4);
  return v2(v4);
}

void static ClarityUIBackButtonActionWrapper.makeBackButtonAction()(_QWORD *a1@<X8>)
{
  id v2;
  objc_class *v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D017D0]), sel_init);
  objc_msgSend(v2, sel_setFlag_forSetting_, BSSettingFlagForBool(), 313000);
  v3 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  v4 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInfo_responder_, v2, 0);

  a1[3] = v3;
  *a1 = v4;
}

void static ClarityUIBackButtonActionWrapper.makeBackButtonAction(isAnimated:)(_QWORD *a1@<X8>)
{
  id v2;
  objc_class *v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D017D0]), sel_init);
  objc_msgSend(v2, sel_setFlag_forSetting_, BSSettingFlagForBool(), 313000);
  v3 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  v4 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInfo_responder_, v2, 0);

  a1[3] = v3;
  *a1 = v4;
}

uint64_t type metadata accessor for ClarityUIBackButtonAction()
{
  return objc_opt_self();
}

uint64_t ClarityUIBackButtonActionWrapper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ClarityUIBackButtonActionWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClarityUIBackButtonActionWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClarityUIBackButtonActionWrapper()
{
  return swift_lookUpClassMethod();
}

id ClarityUIBackButtonAction.init(info:timeout:forResponseOn:withHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  void *v5;
  void *v10;
  objc_class *v11;
  id v12;
  _QWORD v14[6];
  objc_super v15;

  if (a3)
  {
    v14[4] = a3;
    v14[5] = a4;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
    v14[3] = &block_descriptor_62;
    v10 = _Block_copy(v14);
    swift_retain();
    swift_release();
  }
  else
  {
    v10 = 0;
  }
  v11 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  v15.receiver = v5;
  v15.super_class = v11;
  v12 = objc_msgSendSuper2(&v15, sel_initWithInfo_timeout_forResponseOnQueue_withHandler_, a1, a2, v10, a5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);

  _Block_release(v10);
  return v12;
}

id @objc ClarityUIBackButtonAction.init(xpcDictionary:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for ClarityUIBackButtonAction();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id ClarityUIBackButtonAction.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIBackButtonAction);
}

id ClarityUIBackButtonActionHandler.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIBackButtonActionHandler);
}

uint64_t type metadata accessor for ClarityUIBackButtonActionHandler()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for BSAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BSAction;
  if (!lazy cache variable for type metadata for BSAction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BSAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BSAction and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type BSAction and conformance NSObject;
  if (!lazy protocol witness table cache variable for type BSAction and conformance NSObject)
  {
    v1 = type metadata accessor for BSAction();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  }
  return result;
}

void specialized ClarityUIBackButtonActionHandler._respond(to:for:in:from:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  char IsYes;
  id v22;
  uint64_t v23;
  uint64_t inited;
  Class isa;
  _QWORD *v26;
  id v27[22];

  v1 = a1;
  v27[15] = (id)MEMORY[0x1E0DEE9E8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BSAction();
    lazy protocol witness table accessor for type BSAction and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = (unint64_t)v27[16];
    v26 = v27[17];
    v2 = (uint64_t)v27[18];
    v3 = v27[19];
    v4 = (unint64_t)v27[20];
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v26 = (_QWORD *)(a1 + 56);
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  while ((v1 & 0x8000000000000000) != 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_37;
    type metadata accessor for BSAction();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v27[0];
    swift_unknownObjectRelease();
    v11 = (char *)v3;
    v9 = v4;
    if (!v12)
      goto LABEL_37;
LABEL_32:
    type metadata accessor for ClarityUIBackButtonAction();
    v16 = swift_dynamicCastClass();
    if (!v16)
      goto LABEL_9;
    v17 = (void *)v16;
    v18 = v12;
    v19 = objc_msgSend(v17, sel_info);
    if (!v19)
    {

LABEL_9:
      specialized Set._Variant.insert(_:)(v27, v12);

      goto LABEL_10;
    }
    v20 = v19;
    objc_msgSend(v19, sel_flagForSetting_, 313000);
    IsYes = BSSettingFlagIsYes();
    v22 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (one-time initialization token for didPerformBackButtonPress != -1)
      swift_once();
    v23 = static ClarityUI.didPerformBackButtonPress;
    type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    v27[0] = (id)0x646574616D696E61;
    v27[1] = (id)0xE800000000000000;
    AnyHashable.init<A>(_:)();
    *(_QWORD *)(inited + 96) = MEMORY[0x1E0DEAFA0];
    *(_BYTE *)(inited + 72) = IsYes;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v22, sel_postNotificationName_object_userInfo_, v23, 0, isa);

LABEL_10:
    v3 = v11;
    v4 = v9;
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | ((_QWORD)v3 << 6);
    v11 = (char *)v3;
LABEL_31:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_37;
    goto LABEL_32;
  }
  v13 = (uint64_t)v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8)
      goto LABEL_37;
    v14 = v26[v13];
    v11 = (char *)v3 + 1;
    if (!v14)
    {
      v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8)
        goto LABEL_37;
      v14 = v26[(_QWORD)v11];
      if (!v14)
      {
        v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8)
          goto LABEL_37;
        v14 = v26[(_QWORD)v11];
        if (!v14)
        {
          v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8)
            goto LABEL_37;
          v14 = v26[(_QWORD)v11];
          if (!v14)
          {
            v15 = (char *)v3 + 5;
            while ((char *)v8 != v15)
            {
              v14 = v26[(_QWORD)v15++];
              if (v14)
              {
                v11 = v15 - 1;
                goto LABEL_30;
              }
            }
LABEL_37:
            outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_30:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + ((_QWORD)v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_187850964()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned BSActionResponse) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier()
{
  return &type metadata for ReplacedRootDismissModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReplacedRootDismissModifier()
{
  return &protocol witness table for ReplacedRootDismissModifier;
}

uint64_t static ReplacedRootDismissModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 24);
  v20 = *(_DWORD *)(a2 + 36);
  v21 = *(_DWORD *)(a2 + 28);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v18 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 56);
  v17 = *(_DWORD *)(a2 + 64);
  v24 = *(_DWORD *)(a2 + 32);
  v25 = *(_DWORD *)(a2 + 68);
  v16 = *(_DWORD *)(a2 + 72);
  v26 = *(_DWORD *)(a2 + 80);
  v27 = *(_DWORD *)(a2 + 76);
  LODWORD(v38) = *a1;
  v9 = MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ReplacedRootDismissModifier>, (uint64_t)&type metadata for ReplacedRootDismissModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))v9);
  v22 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
  v10 = v38;
  Attribute.init<A>(body:value:flags:update:)();
  v38 = v3;
  v39 = v4;
  v40 = v5;
  *(_QWORD *)&v41 = __PAIR64__(v21, v6);
  *((_QWORD *)&v41 + 1) = __PAIR64__(v20, v24);
  v42 = v7;
  v43 = v8;
  *(_QWORD *)&v44 = __PAIR64__(v18, v19);
  *((_QWORD *)&v44 + 1) = __PAIR64__(v25, v17);
  v45 = __PAIR64__(v27, v16);
  v46 = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = AGCreateWeakAttribute();
  v12 = v11;
  v15 = HIDWORD(v11);
  *(_QWORD *)&v32 = __PAIR64__(v21, v6);
  *((_QWORD *)&v32 + 1) = __PAIR64__(v20, v24);
  v33 = v7;
  v34 = v8;
  *(_QWORD *)&v35 = __PAIR64__(v18, v19);
  *((_QWORD *)&v35 + 1) = __PAIR64__(v25, v17);
  v36 = __PAIR64__(v27, v16);
  v37 = v26;
  LODWORD(v3) = _ViewInputs.environment.getter();
  type metadata accessor for ViewGraph();
  MEMORY[0x18D75C118]();
  v28 = __PAIR64__(v15, v12);
  v29 = v22;
  v30 = v3;
  v31 = v10;
  swift_weakInit();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ReplacedRootDismissModifier.ChildEnvironment((uint64_t)&v28);
  _ViewInputs.environment.setter();
  v28 = v38;
  v29 = v39;
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = swift_bridgeObjectRetain();
  a3(v13, &v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t ReplacedRootDismissModifier.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t WeakValue;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int Attribute;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  v23 = *Value;
  v24 = v5;
  if (swift_weakLoadStrong())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of NavigationAuthority?(WeakValue, (uint64_t)&v17);
      if (v18 == 1)
      {
        swift_retain();
        swift_retain();
        swift_release();
        result = outlined destroy of NavigationAuthority?((uint64_t)&v17);
      }
      else
      {
        outlined init with take of NavigationAuthority((uint64_t)&v17, (uint64_t)v22);
        v9 = AGGraphGetValue();
        v10 = *(_QWORD *)v9;
        v11 = *(_BYTE *)(v9 + 8);
        v12 = *(_QWORD *)(v9 + 16);
        v13 = *v2;
        outlined init with copy of NavigationAuthority((uint64_t)v22, (uint64_t)&v21);
        v17 = v13;
        v18 = v10;
        v19 = v11;
        v20 = v12;
        swift_weakInit();
        type metadata accessor for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>();
        swift_allocObject();
        swift_retain();
        swift_retain();
        v14 = LocationBox.init(_:)();
        Attribute = AGWeakAttributeGetAttribute();
        v16 = 0;
        if (Attribute != *MEMORY[0x1E0CFED28])
          v16 = *(_BYTE *)AGGraphGetValue() ^ 1;
        v17 = 0;
        v18 = v14;
        v19 = v16 & 1;
        type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
        lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain();
        swift_retain();
        PropertyList.subscript.setter();
        v5 = v24;
        if (v24)
        {
          swift_retain();
          swift_retain();
          PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          v5 = v24;
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        result = outlined destroy of NavigationAuthority((uint64_t)v22);
        v6 = v23;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      result = swift_release();
    }
  }
  else
  {
    swift_retain();
    result = swift_retain();
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

uint64_t closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return AGGraphSetValue();
  return result;
}

_BYTE *protocol witness for Location.get() in conformance ReplacedRootDismissModifier.PresentationModeLocation@<X0>(_BYTE *a1@<X8>)
{
  _BYTE *result;
  char v3;

  result = (_BYTE *)AGGraphGetWeakValue();
  if (result)
    v3 = *result ^ 1;
  else
    v3 = 0;
  *a1 = v3 & 1;
  return result;
}

uint64_t protocol witness for Location.update() in conformance ReplacedRootDismissModifier.PresentationModeLocation(_BYTE *a1)
{
  _BYTE *WeakValue;
  char v3;

  WeakValue = (_BYTE *)AGGraphGetWeakValue();
  if (WeakValue)
    v3 = *WeakValue ^ 1;
  else
    v3 = 0;
  *a1 = v3 & 1;
  return 1;
}

void protocol witness for ViewModifier.body(content:) in conformance ReplacedRootDismissModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReplacedRootDismissModifier.ChildEnvironment, &type metadata for ReplacedRootDismissModifier.ChildEnvironment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>)
  {
    lazy protocol witness table accessor for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation();
    v0 = type metadata accessor for LocationBox();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>);
  }
}

unint64_t lazy protocol witness table accessor for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReplacedRootDismissModifier.PresentationModeLocation, &type metadata for ReplacedRootDismissModifier.PresentationModeLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ReplacedRootDismissModifier.PresentationModeLocation, &type metadata for ReplacedRootDismissModifier.PresentationModeLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation);
  }
  return result;
}

uint64_t destroy for ReplacedRootDismissModifier.PresentationModeLocation()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier.PresentationModeLocation()
{
  return &type metadata for ReplacedRootDismissModifier.PresentationModeLocation;
}

uint64_t destroy for ReplacedRootDismissModifier.ChildEnvironment()
{
  return swift_weakDestroy();
}

_QWORD *initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(a1, a2, a3, (void (*)(_QWORD *, _QWORD *))MEMORY[0x1E0DEEF90]);
}

_DWORD *assignWithCopy for ReplacedRootDismissModifier.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_weakCopyAssign();
  return a1;
}

_QWORD *initializeWithTake for ReplacedRootDismissModifier.ChildEnvironment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(a1, a2, a3, (void (*)(_QWORD *, _QWORD *))MEMORY[0x1E0DEEFB8]);
}

_QWORD *initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(_QWORD *a1, _QWORD *a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD *))
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a4(a1 + 3, a2 + 3);
  return a1;
}

uint64_t assignWithTake for ReplacedRootDismissModifier.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_weakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier.ChildEnvironment()
{
  return &type metadata for ReplacedRootDismissModifier.ChildEnvironment;
}

_BYTE *specialized ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)(_BYTE *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  if ((*result & 1) == 0)
  {
    if (swift_weakLoadStrong())
    {
      static Transaction.current.getter();
      outlined init with copy of ReplacedRootDismissModifier.PresentationModeLocation(v1, (uint64_t)&v6);
      v2 = swift_allocObject();
      outlined init with take of ReplacedRootDismissModifier.PresentationModeLocation((uint64_t)&v6, v2 + 16);
      v6 = (uint64_t)partial apply for closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:);
      *(_QWORD *)&v7 = v2;
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      swift_release();
      swift_release();
      swift_release();
    }
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(unsigned __int8 *)(v1 + 16);
    v5 = *(_QWORD *)(v1 + 24);
    v6 = 1;
    v7 = 0u;
    v8 = 0u;
    v9 = 0u;
    v10 = 0;
    v11 = 22;
    v12 = v3;
    v13 = v4;
    v14 = v5;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    return (_BYTE *)NavigationAuthority.enqueueRequest(_:)((__int128 *)&v6);
  }
  return result;
}

uint64_t outlined init with copy of ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ReplacedRootDismissModifier.PresentationModeLocation(a2, a1);
  return a2;
}

uint64_t sub_1878518D8()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t outlined init with take of ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  swift_weakTakeInit();
  return a2;
}

uint64_t partial apply for closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)()
{
  return closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.listLayout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ClarityUIApplicationSceneSetting@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized ClarityUIApplicationSceneSetting.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)@<X0>(void *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  id v20;
  _OWORD v21[2];
  _OWORD v22[2];

  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v19 - v14;
  if (objc_msgSend(a1, sel_objectForSetting_, a2 + 312000, v13))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v21, v22);
    outlined init with copy of Any((uint64_t)v22, (uint64_t)v21);
    type metadata accessor for NSNumber();
    if (swift_dynamicCast())
    {
      v16 = v20;
      *(_QWORD *)&v21[0] = objc_msgSend(v20, sel_integerValue);
      dispatch thunk of RawRepresentable.init(rawValue:)();
      v17 = *(_QWORD *)(a4 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, a4) != 1)
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a5, v15, a4);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);

    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, a3, a4);
}

id static ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled(otherSettings:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLForSetting_, 312001);
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.navigationBarHost(otherSettings:)@<X0>(void *a1@<X0>, void (*a2)(void)@<X3>, unsigned __int8 a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v10;

  v10 = 0;
  a2();
  return static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(a1, a3, (uint64_t)&v10, a4, a5);
}

id static ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled(otherSettings:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLForSetting_, 312003);
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.keyDescription(setting:)()
{
  return String.init<A>(describing:)();
}

void static ClarityUIApplicationSceneSettingsProtocol.valueDescription(flag:object:setting:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X11 }
}

uint64_t sub_187851CA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  outlined init with copy of Any?(a1, (uint64_t)&v2);
  type metadata accessor for Any?();
  return String.init<A>(describing:)();
}

void ClarityUIApplicationSceneSettings.navigationBarHost.getter(uint64_t a1@<X8>)
{
  ClarityUIApplicationSceneSettings.navigationBarHost.getter((void (*)(void))lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost, 0, (uint64_t)&type metadata for NavigationBarHost, a1);
}

void ClarityUIApplicationSceneSettings.listLayout.getter(uint64_t a1@<X8>)
{
  ClarityUIApplicationSceneSettings.navigationBarHost.getter((void (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, 2u, (uint64_t)&type metadata for MultimodalListStyle.Layout, a1);
}

void ClarityUIApplicationSceneSettings.navigationBarHost.getter(void (*a1)(void)@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  void *v8;
  id v10;
  char v11;

  v8 = v4;
  v10 = objc_msgSend(v8, sel_otherSettings);
  v11 = 0;
  a1();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v10, a2, (uint64_t)&v11, a3, a4);

}

id ClarityUIApplicationSceneSettings.areBadgesEnabled.getter()
{
  void *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(v0, sel_otherSettings);
  v2 = objc_msgSend(v1, sel_BOOLForSetting_, 312003);

  return v2;
}

id ClarityUIApplicationSceneSettings.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIApplicationSceneSettings);
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1@<X8>)
{
  protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings((void (*)(void))lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost, 0, (uint64_t)&type metadata for NavigationBarHost, a1);
}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2)
{
  return protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(a1, a2, (uint64_t (*)(void))static ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled(otherSettings:));
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.listLayout.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1@<X8>)
{
  protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings((void (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, 2u, (uint64_t)&type metadata for MultimodalListStyle.Layout, a1);
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings(void (*a1)(void)@<X2>, unsigned __int8 a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  void *v4;
  void *v8;
  id v10;

  v8 = v4;
  v10 = objc_msgSend(v8, sel_otherSettings);
  static ClarityUIApplicationSceneSettingsProtocol.navigationBarHost(otherSettings:)(v10, a1, a2, a3, a4);

}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2)
{
  return protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(a1, a2, (uint64_t (*)(void))static ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled(otherSettings:));
}

void (*ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  void *v1;
  id v3;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  *(_BYTE *)(a1 + 8) = 0;
  lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v3, 0, a1 + 8, (uint64_t)&type metadata for NavigationBarHost, a1 + 9);

  return ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify;
}

void ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1, uint64_t a2)
{
  ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(a1, a2, 312000);
}

void (*ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(uint64_t a1))(id *a1, uint64_t a2)
{
  void *v1;
  id v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  v4 = objc_msgSend(v3, sel_BOOLForSetting_, 312001);

  *(_BYTE *)(a1 + 8) = v4;
  return ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify;
}

void ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(id *a1, uint64_t a2)
{
  ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(a1, a2, 312001);
}

void (*ClarityUIMutableApplicationSceneSettings.listLayout.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  void *v1;
  id v3;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  *(_BYTE *)(a1 + 8) = 0;
  lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v3, 2u, a1 + 8, (uint64_t)&type metadata for MultimodalListStyle.Layout, a1 + 9);

  return ClarityUIMutableApplicationSceneSettings.listLayout.modify;
}

void ClarityUIMutableApplicationSceneSettings.listLayout.modify(uint64_t a1, uint64_t a2)
{
  ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(a1, a2, 312002);
}

void ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  id v6;

  v4 = *(unsigned __int8 *)(a1 + 9);
  v6 = objc_msgSend(*(id *)a1, sel_otherSettings);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v4);
  objc_msgSend(v6, sel_setObject_forSetting_, v5, a3);

}

void (*ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify(uint64_t a1))(id *a1, uint64_t a2)
{
  void *v1;
  id v3;
  unsigned __int8 v4;

  *(_QWORD *)a1 = v1;
  v3 = objc_msgSend(v1, sel_otherSettings);
  v4 = objc_msgSend(v3, sel_BOOLForSetting_, 312003);

  *(_BYTE *)(a1 + 8) = v4;
  return ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify;
}

void ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify(id *a1, uint64_t a2)
{
  ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(a1, a2, 312003);
}

void ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(id *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = objc_msgSend(*a1, sel_otherSettings);
  objc_msgSend(v4, sel_setFlag_forSetting_, BSSettingFlagForBool(), a3);

}

id @objc ClarityUIApplicationSceneSettings.keyDescription(forSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  objc_super v16;

  if (specialized ClarityUIApplicationSceneSetting.init(rawValue:)(a3) != 4)
  {
    v10 = static ClarityUIApplicationSceneSettingsProtocol.keyDescription(setting:)();
    v12 = v13;
    goto LABEL_5;
  }
  v16.receiver = a1;
  v16.super_class = (Class)a4();
  v7 = a1;
  v8 = objc_msgSendSuper2(&v16, sel_keyDescriptionForSetting_, a3);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

LABEL_5:
    v14 = (void *)MEMORY[0x18D75CC88](v10, v12);
    swift_bridgeObjectRelease();
    return v14;
  }

  return 0;
}

uint64_t ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  objc_super v22;
  _QWORD v23[3];
  uint64_t v24;

  v7 = a3 - 312000;
  if (v7 > 3)
  {
    v11 = outlined init with copy of Any?(a2, (uint64_t)v23);
    v12 = v24;
    if (v24)
    {
      v13 = __swift_project_boxed_opaque_existential_1(v23, v24);
      v14 = *(_QWORD *)(v12 - 8);
      v15 = MEMORY[0x1E0C80A78](v13, v13);
      v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v14 + 16))(v17, v15);
      v18 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
      v11 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      v18 = 0;
    }
    v19 = (objc_class *)a4(v11);
    v22.receiver = v4;
    v22.super_class = v19;
    v20 = objc_msgSendSuper2(&v22, sel_valueDescriptionForFlag_object_ofSetting_, a1, v18, a3);
    swift_unknownObjectRelease();
    if (v20)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  else
  {
    static ClarityUIApplicationSceneSettingsProtocol.valueDescription(flag:object:setting:)(a1, a2, v7);
    return v8;
  }
  return v9;
}

id @objc ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _OWORD v17[2];

  if (a4)
  {
    v10 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    v11 = a1;
  }
  v12 = ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(a3, (uint64_t)v17, a5, a6);
  v14 = v13;

  outlined destroy of Any?((uint64_t)v17);
  if (!v14)
    return 0;
  v15 = (void *)MEMORY[0x18D75CC88](v12, v14);
  swift_bridgeObjectRelease();
  return v15;
}

id ClarityUIMutableApplicationSceneSettings.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for ClarityUIMutableApplicationSceneSettings);
}

uint64_t type metadata accessor for ClarityUIMutableApplicationSceneSettings()
{
  return objc_opt_self();
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(a1, a2, a3, 312000);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.modify in conformance ClarityUIMutableApplicationSceneSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(a1, a2, a3, 312001);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.modify in conformance ClarityUIMutableApplicationSceneSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(a1, a2, a3, 312002);
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  id v7;
  id v8;

  v6 = *a1;
  v7 = objc_msgSend(v4, sel_otherSettings);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v6);
  objc_msgSend(v7, sel_setObject_forSetting_, v8, a4);

}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.modify in conformance ClarityUIMutableApplicationSceneSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.listLayout.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(a1, a2, a3, 312003);
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v6;

  v6 = objc_msgSend(v4, sel_otherSettings);
  objc_msgSend(v6, sel_setFlag_forSetting_, BSSettingFlagForBool(), a4);

}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.modify in conformance ClarityUIMutableApplicationSceneSettings(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v3;
  id v5;

  v5 = objc_msgSend(v3, sel_otherSettings);
  LOBYTE(a3) = a3();

  return a3 & 1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost;
  if (!lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBarHost, &type metadata for NavigationBarHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost;
  if (!lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationBarHost, &type metadata for NavigationBarHost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost);
  }
  return result;
}

uint64_t specialized ClarityUIApplicationSceneSetting.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 312000) >= 4)
    return 4;
  else
    return a1 - 312000;
}

uint64_t storeEnumTagSinglePayload for ClarityUIApplicationSceneSetting(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187852924 + 4 * byte_187C655A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187852958 + 4 * byte_187C655A4[v4]))();
}

uint64_t sub_187852958(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187852960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187852968);
  return result;
}

uint64_t sub_187852974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18785297CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187852980(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187852988(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIApplicationSceneSetting()
{
  return &type metadata for ClarityUIApplicationSceneSetting;
}

unint64_t lazy protocol witness table accessor for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting;
  if (!lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ClarityUIApplicationSceneSetting, &type metadata for ClarityUIApplicationSceneSetting);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting);
  }
  return result;
}

uint64_t specialized EnvironmentValues.subscript.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.editMode.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
}

BOOL EditMode.isEditing.getter()
{
  _BYTE *v0;

  return *v0 != 0;
}

void EditMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int EditMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void (*EnvironmentValues.editMode.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.editMode.modify;
}

void EnvironmentValues.editMode.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = (*a1)[6];
  v5 = **a1;
  v6 = (*a1)[1];
  v3[3] = v5;
  v7 = *((_BYTE *)v3 + 16);
  v3[4] = v6;
  *((_BYTE *)v3 + 40) = v7;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(v5, v6);
  if ((a2 & 1) != 0)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v6);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of Binding<NavigationSplitViewColumn>?(v5, v6);
    v8 = *v3;
    v9 = v3[1];
  }
  else
  {
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    v8 = v5;
    v9 = v6;
  }
  outlined consume of Binding<NavigationSplitViewColumn>?(v8, v9);
  free(v3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EditModeScopeModifier.TransformModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EditModeScopeModifier.TransformModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance EditModeScopeModifier.TransformModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance EditModeScopeModifier.TransformModifier()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = AGGraphGetValue();
  if (*(_BYTE *)result == 1)
  {
    v2 = *(_QWORD *)(result + 8);
    v1 = *(_QWORD *)(result + 16);
    v3 = *(unsigned __int8 *)(result + 24);
    swift_retain();
    swift_retain();
    specialized EnvironmentValues.subscript.setter(v2, v1, v3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EditModeScopeModifier.TransformModifier()
{
  lazy protocol witness table accessor for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier();
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance EditModeScopeModifier@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for State<EditMode>, (uint64_t)&type metadata for EditMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  result = State.projectedValue.getter();
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  return result;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v3;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  outlined copy of Text.Suffix.Storage(a1, a2, a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EditMode and conformance EditMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EditMode and conformance EditMode;
  if (!lazy protocol witness table cache variable for type EditMode and conformance EditMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditMode, &type metadata for EditMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditMode and conformance EditMode);
  }
  return result;
}

uint64_t assignWithTake for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EditModeScopeModifier()
{
  return &type metadata for EditModeScopeModifier;
}

ValueMetadata *type metadata accessor for EditModeKey()
{
  return &type metadata for EditModeKey;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in EditModeScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppIntentExecutor.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogCustomizationIDKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogCustomizationIDKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>, (uint64_t)&type metadata for UserInteractionActivityKey, (uint64_t)&protocol witness table for UserInteractionActivityKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(void *a1)
{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>, (uint64_t)&type metadata for AlwaysOnFrameSpecifier, (uint64_t)&protocol witness table for AlwaysOnFrameSpecifier, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, (uint64_t)&type metadata for DefaultAppStorageDefaultsKey, (uint64_t)&protocol witness table for DefaultAppStorageDefaultsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>, (uint64_t)&type metadata for NSManagedObjectContextEnvironmentKey, (uint64_t)&protocol witness table for NSManagedObjectContextEnvironmentKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized EnvironmentValues.subscript.setter(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  id v9;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  v9 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v4;

  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)&v4, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>);
  outlined retain of PresentSharingPickerAction?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;
  _BYTE v4[40];

  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
  outlined retain of SearchFocusContext?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;
  _BYTE v4[56];

  outlined init with take of Image.Resolved?((uint64_t)a1, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
  outlined retain of DialogSuppressionConfiguration?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogMessageKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogMessageKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogConfirmationLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogConfirmationLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileExporterFilenameLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileExporterFilenameLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  uint64_t v8;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a5);
  outlined copy of Text?(a1, a2, a3, a4);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a8, a5);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v8 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v7 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined retain of HeaderFooterConfiguration(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a6, a3);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v6 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t *outlined retain of PresentSharingPickerAction?(uint64_t *a1)
{
  outlined copy of PresentSharingPickerAction?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
  return a1;
}

uint64_t *outlined retain of DialogSuppressionConfiguration?(uint64_t *a1)
{
  outlined copy of DialogSuppressionConfiguration?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t assignWithCopy for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for EditModeScopeModifier.TransformModifier()
{
  return &type metadata for EditModeScopeModifier.TransformModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for EditModeScopeModifier.TransformModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<EditModeScopeModifier>, EditModeScopeModifier.TransformModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<EditModeScopeModifier>)
  {
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<EditModeScopeModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<EditModeScopeModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<EditModeScopeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EditModeScopeModifier.TransformModifier()
{
  return &protocol witness table for EditModeScopeModifier.TransformModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in EditModeScopeModifier.TransformModifier()
{
  return &protocol witness table for EditModeScopeModifier.TransformModifier;
}

unint64_t lazy protocol witness table accessor for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier;
  if (!lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EditModeScopeModifier.TransformModifier, &type metadata for EditModeScopeModifier.TransformModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier);
  }
  return result;
}

uint64_t PlainTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in PlainTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlainTextFieldStyle()
{
  return &type metadata for PlainTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent)
  {
    v1 = type metadata accessor for PlainTextFieldStyle.BodyContent(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlainTextFieldStyle.BodyContent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent);
  }
  return result;
}

uint64_t (*Transaction.scrollToRequiresCompleteVisibility.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = Transaction._scrollToRequiresCompleteVisibility.getter() & 1;
  return Transaction.scrollToRequiresCompleteVisibility.modify;
}

uint64_t Transaction.scrollToRequiresCompleteVisibility.modify()
{
  return Transaction._scrollToRequiresCompleteVisibility.setter();
}

uint64_t sub_187855850@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Transaction._scrollToRequiresCompleteVisibility.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18785587C()
{
  return Transaction._scrollToRequiresCompleteVisibility.setter();
}

void LabeledView.init(content:label:)(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(double);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a5;
  v21 = a6;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = *(_QWORD *)(v11 - 8);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v18(v15);
  a1(v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a7, v17, a3);
  v22 = a3;
  v23 = a4;
  v24 = v20;
  v25 = v21;
  type metadata accessor for LabeledView();
}

uint64_t sub_187855978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v3 + *(int *)(a1 + 52), v4, v1);
}

uint64_t LabeledView.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  v6 = a1[2];
  v7 = a1[3];
  v8 = type metadata accessor for LabeledContent(0, v6, v7, a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v22[-v15];
  v28 = v6;
  v29 = v7;
  v18 = a1[4];
  v17 = a1[5];
  v30 = v18;
  v31 = v17;
  v32 = v3;
  v23 = v6;
  v24 = v7;
  v25 = v18;
  v26 = v17;
  v27 = v3;
  LabeledContent<>.init(content:label:)(partial apply for closure #1 in LabeledView.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #1 in LabeledToolbarItemGroupContent.body.getter, (uint64_t)v22, v6, v7, (uint64_t)v12);
  v33[0] = v18;
  v33[1] = v17;
  v19 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v8, v33);
  static ViewBuilder.buildExpression<A>(_:)(v12, v8, v19);
  v20 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v20(v12, v8);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v8, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v20)(v16, v8);
}

void closure #1 in LabeledView.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for LabeledView();
}

uint64_t sub_187855B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  static ViewBuilder.buildExpression<A>(_:)(v3 + *(int *)(a1 + 52), v2, v1);
  static ViewBuilder.buildBlock<A>(_:)(v5, v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v2);
}

uint64_t partial apply for closure #1 in LabeledView.body.getter()
{
  return partial apply for closure #1 in SidebarListBody.body.getter((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in LabeledView.body.getter);
}

void LabeledView<>.init(_:content:)(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  _BYTE v5[16];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = a2;
  LabeledView.init(content:label:)((void (*)(uint64_t))partial apply for closure #1 in ViewThatFits.init(in:content:), (uint64_t)v5, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE6C58], a4, a5);
}

uint64_t sub_187855C30()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void LabeledView<>.init<A>(_:content:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = a1;
  v13 = a2;
  LabeledView.init(content:label:)((void (*)(uint64_t))partial apply for closure #1 in LabeledView<>.init<A>(_:content:), (uint64_t)v7, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE6C58], a5, a7);
}

uint64_t sub_187855CB4()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
}

uint64_t partial apply for closure #1 in LabeledView<>.init<A>(_:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in LabeledContent<>.init<A>(_:content:)(v1[6], v1[7], v1[2], v1[4], a1);
}

uint64_t LabeledView<>.init<A>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = Text.init(_:tableName:bundle:comment:)();
  v8 = v7;
  v10 = v9;
  v17 = v11;
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v18[0];
  v13 = v18[1];
  v14 = v19;
  v15 = v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v10 & 1;
  *(_QWORD *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 32) = v12;
  *(_QWORD *)(a3 + 40) = v13;
  *(_BYTE *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 56) = v15;
  return result;
}

void LabeledView<>.init<A, B>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[64];

  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(_BYTE *, uint64_t, double))(v12 + 16))(&v15[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v13);
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a2;
  LabeledView<>.init<A>(_:content:)((uint64_t)partial apply for closure #2 in LabeledView<>.init<A>(_:content:), (uint64_t)v15, MEMORY[0x1E0CE6CF8], a3, MEMORY[0x1E0CE6C58], a5, (uint64_t)v21);
}

__n128 sub_187855EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3, v1);
  v7 = *(_BYTE *)(v6 - 128);
  v8 = *(_QWORD *)(v6 - 120);
  v9 = *(_BYTE *)(v6 - 96);
  v10 = *(_QWORD *)(v6 - 88);
  result = *(__n128 *)(v6 - 144);
  v12 = *(_OWORD *)(v6 - 112);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v7;
  *(_QWORD *)(v0 + 24) = v8;
  *(_OWORD *)(v0 + 32) = v12;
  *(_BYTE *)(v0 + 48) = v9;
  *(_QWORD *)(v0 + 56) = v10;
  return result;
}

uint64_t partial apply for closure #2 in LabeledView<>.init<A>(_:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ModalLink<>.init<A>(_:presenting:)(*(_QWORD *)(v1 + 48), a1);
}

uint64_t LabeledView<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = Text.init(_:tableName:bundle:comment:)();
  v20 = v8;
  v10 = v9;
  v18 = v11;
  closure #1 in LabeledContent<>.init<A>(_:value:format:)(a1, a2, a3, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v21[0];
  v13 = v21[1];
  v14 = v22;
  v15 = v23;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v18 & 1;
  *(_QWORD *)(a4 + 24) = v20;
  *(_QWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 40) = v13;
  *(_BYTE *)(a4 + 48) = v14;
  *(_QWORD *)(a4 + 56) = v15;
  return result;
}

void LabeledView<>.init<A, B>(_:value:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[80];

  v20 = a8;
  v15 = *(_QWORD *)(a4 - 8);
  v16 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a7;
  v26 = v20;
  v27 = a2;
  v28 = a3;
  LabeledView<>.init<A>(_:content:)((uint64_t)partial apply for closure #1 in LabeledContent<>.init<A, B>(_:value:format:), (uint64_t)v21, MEMORY[0x1E0CE6CF8], a4, MEMORY[0x1E0CE6C58], a6, (uint64_t)v29);
}

__n128 sub_18785616C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v5, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  v9 = *(_BYTE *)(v7 - 144);
  v10 = *(_QWORD *)(v7 - 136);
  v11 = *(_BYTE *)(v7 - 112);
  v12 = *(_QWORD *)(v7 - 104);
  result = *(__n128 *)(v7 - 160);
  v14 = *(_OWORD *)(v7 - 128);
  *(__n128 *)v0 = result;
  *(_BYTE *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v10;
  *(_OWORD *)(v0 + 32) = v14;
  *(_BYTE *)(v0 + 48) = v11;
  *(_QWORD *)(v0 + 56) = v12;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LabeledView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for LabeledView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_187856324 + 4 * byte_187C65938[v17 - 1]))();
}

void storeEnumTagSinglePayload for LabeledView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void type metadata accessor for LabeledView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_1878565AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  __int128 v7;

  v5 = type metadata accessor for LabeledContent(255, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), a4);
  v7 = *(_OWORD *)(a1 + 16);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v5, &v7);
}

void static ToolbarDefaultItemKind.sidebarToggle.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ToolbarDefaultItemKind.title.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t storeEnumTagSinglePayload for ToolbarDefaultItemKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18785665C + 4 * byte_187C65995[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187856690 + 4 * byte_187C65990[v4]))();
}

uint64_t sub_187856690(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187856698(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1878566A0);
  return result;
}

uint64_t sub_1878566AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1878566B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1878566B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1878566C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToolbarDefaultItemKind.Kind] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A])
  {
    type metadata accessor for [ToolbarDefaultItemKind.Kind]();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ToolbarDefaultItemKind.Kind]()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for [ToolbarDefaultItemKind.Kind])
  {
    v0 = type metadata accessor for Array();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarDefaultItemKind.Kind]);
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance ToolbarDefaultItemKind.Kind(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ToolbarDefaultItemKind.Kind;
}

uint64_t getEnumTagSinglePayload for ShadowListDataSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187856848 + 4 * byte_187C65A80[v10]))();
  }
}

void storeEnumTagSinglePayload for ShadowListDataSource(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1878569C8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187856A3CLL);
}

void sub_1878569D0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1878569D8);
  JUMPOUT(0x187856A3CLL);
}

void sub_187856A18()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187856A3CLL);
}

void sub_187856A20()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187856A3CLL);
}

uint64_t sub_187856A28(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187856A3CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187856A38);
    JUMPOUT(0x187856A34);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs.Sequence.Element : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t ShadowListDataSource.performDrop(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 160))(a1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall ShadowListDataSource.commitUpdates()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v3, *(_QWORD *)(v4 + 8), v1);
  v6 = *(_QWORD *)(updated - 8);
  v8 = MEMORY[0x1E0C80A78](updated, v7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v6 + 16))(&v10[-v9], v2, updated, v8);
  v11 = v3;
  v12 = v4;
  v13 = v2;
  ShadowListUpdateRecorder.withBase(do:)((void (*)(char *))partial apply for closure #1 in ShadowListDataSource.commitUpdates(), (uint64_t)v10, updated);
  ShadowListUpdateRecorder.clearUpdates()();
}

uint64_t sub_187856BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v0, v1, v2);
}

void ShadowListDataSource.updateBase(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8), a4);
  ShadowListUpdateRecorder.updateBase(to:)();
}

Swift::Void __swiftcall ShadowListDataSource.discardUpdatesForDeletion()()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 8), v1);
  ShadowListUpdateRecorder.clearUpdates()();
}

uint64_t ShadowListDataSource.configureGlobalHeader(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 24) + 80))(a1, a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void closure #1 in ShadowListDataSource.commitUpdates()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  _QWORD v25[15];
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v25[14] = a2;
  v28 = a4;
  v29 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v5 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25[6] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v25[5] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v31 = (char *)v25 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v25[4] = (char *)v25 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v30 = (char *)v25 - v16;
  v34 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v25[3] = (char *)v25 - v19;
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v25[2] = (char *)v25 - v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = swift_getAssociatedConformanceWitness();
  v32 = AssociatedTypeWitness;
  v35 = AssociatedTypeWitness;
  v36 = v5;
  v27 = v5;
  v37 = AssociatedConformanceWitness;
  v38 = v24;
  type metadata accessor for ListUpdate();
}

void ShadowListDataSource.configureFooter(_:transaction:forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v9 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v12);
  type metadata accessor for ShadowListUpdateRecorder(0, v5, v6, v14);
  ShadowListUpdateRecorder.initialIndex(_:)();
}

uint64_t sub_1878574A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v1 + 96))(*(_QWORD *)(v7 - 96), *(_QWORD *)(v7 - 88), v5, v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v0);
}

uint64_t ShadowListDataSource.firstIndexPath<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + 120))(a1, a3, a4, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t ShadowListDataSource.firstIndexPath(viewListID:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2, v5);
  v12[0] = *a1;
  v12[1] = v10;
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(a2 + 24) + 128))(v12, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t ShadowListDataSource.firstCollectionViewIndex(of:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2, v5);
  v13[0] = *a1;
  v13[1] = v10;
  v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(a2 + 24) + 136))(v13, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v11;
}

uint64_t ShadowListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v5 = a4;
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4, v9);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 24) + 144))(a1, a2, a3, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v5 & 1;
}

void ShadowListDataSource.deleteCell(forRow:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

void sub_187857974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  *(_QWORD *)(v11 - 176) = a1;
  *(_QWORD *)(v11 - 160) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v11 - 200) = (char *)&a9 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v11 - 168) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v14);
  *(_QWORD *)(v11 - 192) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&a9 - v18;
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&a9 - v23;
  v26 = (char *)&a9 + *(int *)(v25 + 48) - v23;
  v27 = v9;
  v28 = *(_QWORD *)(v9 - 8);
  v29 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  *(_QWORD *)(v11 - 184) = v28;
  ((void (*)(char *, _QWORD, uint64_t, double))v29)((char *)&a9 - v23, *(_QWORD *)(v11 - 152), v9, v22);
  *(_QWORD *)(v11 - 216) = v10;
  v30 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v11 - 152) = v30;
  v31 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v31(v26, *(char **)(v11 - 144), v10);
  v32 = *(int *)(TupleTypeMetadata2 + 48);
  v33 = TupleTypeMetadata2;
  v34 = *(_QWORD *)(v11 - 200);
  *(_QWORD *)(v11 - 208) = v34 + v32;
  v35 = &v19[v32];
  *(_QWORD *)(v11 - 144) = &v19[v32];
  v29(v19, v24, v27);
  v36 = v35;
  v37 = *(_QWORD *)(v11 - 216);
  v31(v36, v26, v37);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v34, v19, v27);
  v38 = (char *)(*(_QWORD *)(v11 - 192) + *(int *)(v33 + 48));
  v29(*(char **)(v11 - 192), v24, v27);
  v31(v38, v26, v37);
  (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v11 - 152) + 32))(*(_QWORD *)(v11 - 208), v38, v37);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(v11 - 136), *(_QWORD *)(v11 - 128), v39);
  ShadowListUpdateRecorder.recordUpdate(_:)();
}

uint64_t sub_187857B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 168) + 8))(v5, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 184) + 8))(v4, v6);
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v8 - 144), v7);
}

void ShadowListDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, double);
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t updated;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v46 = a1;
  v47 = a2;
  v3 = *(_QWORD *)(a3 + 16);
  v48 = *(_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(v48 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v45 = (uint64_t)&v38 - v8;
  v43 = v4;
  swift_getAssociatedTypeWitness();
  v49 = v3;
  swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v9 - 8);
  v10 = v39;
  MEMORY[0x1E0C80A78](v9, v11);
  v42 = (uint64_t)&v38 - v12;
  v40 = *(_QWORD *)(v3 - 8);
  v13 = v40;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v17;
  v18 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v44 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v38 - v26;
  v29 = *(int *)(v28 + 48);
  v41 = v28;
  v30 = (char *)&v38 + v29 - v26;
  v31 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v31((char *)&v38 - v26, v46, v9, v25);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v32(v30, v47, v18);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v34 = v49;
  v33(v17, v51, v49);
  v35 = (uint64_t)&v22[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v31)(v22, v27, v9);
  v32((char *)v35, (uint64_t)v30, v18);
  updated = type metadata accessor for ShadowListUpdateRecorder(0, v34, v43, v36);
  ShadowListUpdateRecorder.initialIndex(_:)(v42, v45, (uint64_t)v22, v35, updated);
}

uint64_t sub_187857E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char v12;

  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 96) + 8);
  v8(v6, v0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 184) + 8);
  v9(v2, v5);
  v10 = *(_QWORD *)(v7 - 104);
  v11 = *(_QWORD *)(v7 - 192);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 168))(v4, v3, v10);
  v8(v3, v0);
  v9(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 176) + 8))(v11, v10);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 144) + 8))(v1, *(_QWORD *)(v7 - 168));
  return v12 & 1;
}

void ShadowListDataSource.canMoveCell(from:to:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  void (*v40)(_BYTE *, uint64_t, uint64_t, double);
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[16];
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *updated;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;

  updated = (_BYTE *)a4;
  v57 = a2;
  v58 = a3;
  v56 = a1;
  v5 = *(_QWORD *)(a5 + 16);
  v62 = *(_QWORD *)(a5 + 24);
  v6 = *(_QWORD *)(v62 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v68 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v61 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v70 = &v49[-v12];
  v54 = v6;
  swift_getAssociatedTypeWitness();
  v63 = v5;
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v13 - 8);
  v14 = v51;
  MEMORY[0x1E0C80A78](v13, v15);
  v55 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17, v18);
  v67 = &v49[-v19];
  v66 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v49[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = v23;
  v24 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v59 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v26);
  v28 = &v49[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = &v49[-v31];
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  v37 = &v49[-v36];
  v50 = &v49[*(int *)(v38 + 48) - v36];
  v39 = v50;
  v40 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v14 + 16);
  v53 = &v49[-v36];
  v40(&v49[-v36], v56, v13, v35);
  v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16);
  v41(v39, v57, v24);
  v42 = *(int *)(TupleTypeMetadata2 + 48);
  v64 = TupleTypeMetadata2;
  v65 = v32;
  v43 = v32;
  v44 = &v32[v42];
  v57 = v44;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v40)(v43, v58, v13);
  v45 = v24;
  v41(v44, updated, v24);
  v46 = v63;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v66 + 16))(v23, v69, v63);
  v47 = (uint64_t)&v28[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v40)(v28, v37, v13);
  v41((_BYTE *)v47, v50, v45);
  updated = (_BYTE *)type metadata accessor for ShadowListUpdateRecorder(0, v46, v54, v48);
  ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v67, (uint64_t)v70, (uint64_t)v28, v47, (uint64_t)updated);
}

void sub_18785826C()
{
  void (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 112) + 8))(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v5, v3);
  v7 = *(_QWORD *)(v6 - 136);
  v8 = v5 + *(int *)(*(_QWORD *)(v6 - 144) + 48);
  *(_QWORD *)(v6 - 264) = v3;
  v0(v5, v7, v3);
  v2(v8, *(_QWORD *)(v6 - 200), v4);
  ShadowListUpdateRecorder.initialIndex(_:)(*(_QWORD *)(v6 - 216), *(_QWORD *)(v6 - 168), v5, v8, *(_QWORD *)(v6 - 176));
}

uint64_t sub_1878582F0()
{
  void (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(_QWORD, uint64_t);
  uint64_t v18;

  v6(v2, v4);
  v0(v7, v5);
  v9 = *(_QWORD *)(v8 - 152);
  v10 = *(_QWORD *)(v8 - 120);
  v11 = *(_QWORD *)(v8 - 96);
  v12 = v1;
  v13 = v1;
  v14 = *(_QWORD *)(v8 - 240);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 176))(v10, v11, v13, v3, v9);
  v6(v3, v4);
  v16 = *(_QWORD *)(v8 - 264);
  v0(v12, v16);
  v6(v11, v4);
  v0(v10, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 128) + 8))(v14, v9);
  v17 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 184) + 8);
  v18 = *(_QWORD *)(v8 - 144);
  v17(*(_QWORD *)(v8 - 136), v18);
  v17(*(_QWORD *)(v8 - 232), v18);
  return v15 & 1;
}

void ShadowListDataSource.moveCell(fromRowAt:to:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
}

void sub_187858530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t, double);
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;

  *(_QWORD *)(v12 - 184) = a1;
  *(_QWORD *)(v12 - 168) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&a9 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v12 - 176) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v16);
  v18 = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&a9 - v22;
  v25 = (char *)&a9 + *(int *)(v24 + 48) - v22;
  v26 = *(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)(v10 - 8) + 16);
  v26((char *)&a9 - v22, *(_QWORD *)(v12 - 160), v10, v21);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v27(v25, *(_QWORD *)(v12 - 152), v11);
  v28 = *(int *)(TupleTypeMetadata2 + 48);
  v29 = v18;
  *(_QWORD *)(v12 - 192) = v18;
  v30 = &v18[v28];
  *(_QWORD *)(v12 - 152) = v30;
  ((void (*)(char *, _QWORD, uint64_t))v26)(v29, *(_QWORD *)(v12 - 144), v10);
  v27(v30, v9, v11);
  v31 = &v14[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v26)(v14, v23, v10);
  v27(v32, (uint64_t)v25, v11);
  v33 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, _QWORD, uint64_t))v26)(v31, *(_QWORD *)(v12 - 192), v10);
  v27(v33, *(_QWORD *)(v12 - 152), v11);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ShadowListUpdateRecorder(0, *(_QWORD *)(v12 - 136), *(_QWORD *)(v12 - 128), v34);
  ShadowListUpdateRecorder.recordUpdate(_:)();
}

uint64_t sub_1878586D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 168) + 8))(v3, v0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 176) + 8);
  v6(v1, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(v4, v2);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ShadowListDataSource.firstIndexPath<A>(for:)(a1, a4, a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance ShadowListDataSource<A>(_QWORD *a1, uint64_t a2)
{
  return ShadowListDataSource.firstCollectionViewIndex(of:)(a1, a2);
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

void partial apply for closure #1 in ShadowListDataSource.commitUpdates()(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in ShadowListDataSource.commitUpdates()(a1, v1[4], v1[2], v1[3]);
}

void BorderedButtonStyle.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void BorderedButtonStyle.init(tint:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t BorderedButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  char *v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a1;
  v47 = a2;
  v45 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v45, v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v40 - v12;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>();
  v43 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0);
  v41 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
  v44 = v26;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *v2;
  v31 = *((_BYTE *)v2 + 8);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, (uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v32 = v5[1];
  *v9 = *v5;
  v9[1] = v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v5[*(int *)(v45 + 24)], (uint64_t)&v9[*(int *)(v42 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v9, (uint64_t)v13);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13, (uint64_t)v17);
  v17[*(int *)(v43 + 36)] = v31;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>);
  v33 = &v25[*(int *)(v41 + 36)];
  *(_QWORD *)v33 = v30;
  v33[8] = 0;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>);
  KeyPath = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  v37 = swift_getKeyPath();
  swift_retain();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  v38 = &v29[*(int *)(v44 + 36)];
  *(_QWORD *)v38 = v30;
  v38[8] = 0;
  *((_QWORD *)v38 + 2) = KeyPath;
  v38[24] = 0;
  *((_QWORD *)v38 + 4) = v35;
  *((_WORD *)v38 + 20) = 0;
  *((_QWORD *)v38 + 6) = v36;
  v38[56] = 0;
  *((_QWORD *)v38 + 8) = v37;
  v38[72] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  }
}

uint64_t sub_187858CB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.dynamicTypeSize.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187858CF8()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput, (uint64_t)&type metadata for ButtonContainerIsBorderedInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<PlatterButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>, (uint64_t)&type metadata for ButtonBorderShapeKey, (uint64_t)&protocol witness table for ButtonBorderShapeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double Text.LineStyle.init(nsUnderlineStyle:)@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  Text.LineStyle.init(_nsUnderlineStyle:)();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t NSUnderlineStyle.init(_:)(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_release();
  return v1;
}

void static SceneBuilder.buildBlock()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SceneBuilder.buildOptional<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for SceneBuilder()
{
  return &type metadata for SceneBuilder;
}

_UNKNOWN **sub_187859070()
{
  return &protocol witness table for _EmptyScene;
}

void TransferableProvider.makeContent()()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_1878590FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE v27[96];

  v5 = type metadata accessor for Optional();
  *(_QWORD *)(v4 - 272) = v5;
  *(_QWORD *)(v4 - 280) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v27[-v7];
  v9 = *(_QWORD *)(v2 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v4 - 312) = type metadata accessor for NSItemProvider();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(&v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v0, v2);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  v15 = *(_QWORD *)(v2 + 16);
  *((_QWORD *)v14 + 2) = v15;
  *((_QWORD *)v14 + 3) = v3;
  v16 = *(_QWORD *)(v2 + 40);
  *((_QWORD *)v14 + 4) = v1;
  *((_QWORD *)v14 + 5) = v16;
  v17 = *(_QWORD *)(v4 - 288);
  v18 = *(_QWORD *)(v4 - 296);
  *((_QWORD *)v14 + 6) = v17;
  *((_QWORD *)v14 + 7) = v18;
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(&v14[v13], &v27[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  v19 = NSItemProvider.init<A>(transferable:)();
  v20 = *(_QWORD *)(v4 - 280);
  v21 = *(_QWORD *)(v4 - 272);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v20 + 16))(v8, *(_QWORD *)(v4 - 304) + *(int *)(v2 + 68), v21);
  v22 = *(_QWORD *)(v4 - 320);
  *(_QWORD *)(v4 - 240) = v15;
  *(_QWORD *)(v4 - 232) = v22;
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 216) = v16;
  *(_QWORD *)(v4 - 208) = v17;
  *(_QWORD *)(v4 - 200) = v18;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TransferableProvider.makeContent(), v4 - 256, MEMORY[0x1E0DEDCE8], (uint64_t)&type metadata for AnySharePreview, v23, v4 - 184);
  (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v8, v21);
  v24 = *(uint64_t **)(v4 - 264);
  outlined init with take of TableCellFormula(v4 - 184, (uint64_t)(v24 + 1), (uint64_t (*)(_QWORD))type metadata accessor for AnySharePreview?);
  *v24 = v19;
  v25 = type metadata accessor for TitleDocumentContent();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
}

void closure #1 in TransferableProvider.makeContent()()
{
  type metadata accessor for SharePreview();
}

void sub_18785936C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v10 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))((char *)&a9 - v12, v9, v10);
  AnySharePreview.init<A, B>(_:)();
}

void TransferableProvider.init(document:preview:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for TransferableProvider();
}

void sub_18785944C()
{
  type metadata accessor for SharePreview();
}

uint64_t sub_187859468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
}

uint64_t protocol witness for TitleDocumentProvider.makeContent() in conformance URLProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
  v4 = type metadata accessor for TitleDocumentContent();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
}

void View.navigationDocument<A>(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TransferableProvider();
}

void sub_1878595A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v9 + 16))(v11, *(_QWORD *)(v12 - 224), v10, v15);
  *(_QWORD *)(v12 - 152) = 0;
  *(_QWORD *)(v12 - 144) = 0;
  *(_QWORD *)(v12 - 136) = 0;
  *(_QWORD *)(v12 - 128) = 1;
  *(_OWORD *)(v12 - 120) = 0u;
  *(_OWORD *)(v12 - 104) = 0u;
  *(_WORD *)(v12 - 88) = 0;
  TransferableProvider.init(document:preview:)(v11, v10, (uint64_t)v17);
}

void sub_187859648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for NavigationDocumentBox(0, v7, (uint64_t)&protocol witness table for TransferableProvider<A, B, C>, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  v10 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(v5);
  *(_BYTE *)(v9 - 152) = v4;
  NavigationPropertiesModifier.init(provider:title:)(v10, (_QWORD *)(v9 - 168));
}

void sub_1878596B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v3 - 160);
  *(_QWORD *)(v3 - 184) = *(_QWORD *)(v3 - 168);
  *(_BYTE *)(v3 - 176) = v4;
  *(_QWORD *)(v3 - 152) = v2;
  *(_QWORD *)(v3 - 144) = v0;
  *(_QWORD *)(v3 - 136) = v0;
  *(_QWORD *)(v3 - 128) = v1;
  *(_QWORD *)(v3 - 120) = v1;
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_1878596D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v4 - 184, *(_QWORD *)(v4 - 208), a1, *(_QWORD *)(v4 - 200));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

void type metadata accessor for TransferableProvider()
{
  JUMPOUT(0x18D75FF28);
}

void View.navigationDocument<A>(_:preview:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for TransferableProvider();
}

void sub_1878597B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&a9 - v16;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v11 + 16))(v9, *(_QWORD *)(v12 - 240), v10, v15);
  outlined init with copy of SharePreview<Never, Never>(*(_QWORD *)(v12 - 232), v12 - 160);
  TransferableProvider.init(document:preview:)(v9, v10, (uint64_t)v17);
}

void sub_18785984C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for NavigationDocumentBox(0, v5, (uint64_t)&protocol witness table for TransferableProvider<A, B, C>, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v6, v5);
  v9 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(v4);
  *(_BYTE *)(v8 - 160) = 1;
  NavigationPropertiesModifier.init(provider:title:)(v9, (_QWORD *)(v8 - 176));
}

void sub_1878598B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v3 - 168);
  *(_QWORD *)(v3 - 192) = *(_QWORD *)(v3 - 176);
  *(_BYTE *)(v3 - 184) = v4;
  *(_QWORD *)(v3 - 160) = v2;
  *(_QWORD *)(v3 - 152) = v0;
  *(_QWORD *)(v3 - 144) = v0;
  *(_QWORD *)(v3 - 136) = v1;
  *(_QWORD *)(v3 - 128) = v1;
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_1878598E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v4 - 192, *(_QWORD *)(v4 - 216), a1, *(_QWORD *)(v4 - 208));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

uint64_t outlined init with copy of SharePreview<Never, Never>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharePreview<Never, Never>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SharePreview<Never, Never>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for SharePreview<Never, Never>;
  if (!lazy cache variable for type metadata for SharePreview<Never, Never>)
    type metadata accessor for SharePreview();
  return result;
}

void View.navigationDocument<A, B>(_:preview:)()
{
  type metadata accessor for SharePreview();
}

{
  type metadata accessor for SharePreview();
}

void sub_187859A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v5;
  *(_QWORD *)(v6 - 88) = v0;
  type metadata accessor for TransferableProvider();
}

void sub_187859ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  *(_QWORD *)(v14 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v9, *(_QWORD *)(v14 - 208), v12, v17);
  v20 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v10, *(_QWORD *)(v14 - 200), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v10, 0, 1, v11);
  TransferableProvider.init(document:preview:)(v9, v12, (uint64_t)v19);
}

void sub_187859B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for NavigationDocumentBox(0, v5, (uint64_t)&protocol witness table for TransferableProvider<A, B, C>, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 216) + 16))(v4, v7, v5);
  v9 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(v4);
  *(_BYTE *)(v8 - 128) = v6;
  NavigationPropertiesModifier.init(provider:title:)(v9, (_QWORD *)(v8 - 144));
}

void sub_187859BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v3 - 136);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v3 - 144);
  *(_BYTE *)(v3 - 152) = v4;
  *(_QWORD *)(v3 - 128) = v2;
  *(_QWORD *)(v3 - 120) = v0;
  *(_QWORD *)(v3 - 112) = v0;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v1;
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_187859C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v4 - 160, *(_QWORD *)(v4 - 184), a1, *(_QWORD *)(v4 - 176));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

void sub_187859CD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v6 - 128) = v2;
  *(_QWORD *)(v6 - 120) = v4;
  *(_QWORD *)(v6 - 112) = v3;
  *(_QWORD *)(v6 - 104) = v1;
  *(_QWORD *)(v6 - 96) = v0;
  *(_QWORD *)(v6 - 88) = v5;
  type metadata accessor for TransferableProvider();
}

void sub_187859D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  *(_QWORD *)(v14 - 216) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v9, *(_QWORD *)(v14 - 208), v12, v17);
  v20 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v10, *(_QWORD *)(v14 - 200), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v10, 0, 1, v11);
  TransferableProvider.init(document:preview:)(v9, v12, (uint64_t)v19);
}

void sub_187859E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for NavigationDocumentBox(0, v5, (uint64_t)&protocol witness table for TransferableProvider<A, B, C>, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 216) + 16))(v4, v7, v5);
  v9 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(v4);
  *(_BYTE *)(v8 - 128) = v6;
  NavigationPropertiesModifier.init(provider:title:)(v9, (_QWORD *)(v8 - 144));
}

void sub_187859E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v3 - 136);
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v3 - 144);
  *(_BYTE *)(v3 - 152) = v4;
  *(_QWORD *)(v3 - 128) = v2;
  *(_QWORD *)(v3 - 120) = v0;
  *(_QWORD *)(v3 - 112) = v0;
  *(_QWORD *)(v3 - 104) = v1;
  *(_QWORD *)(v3 - 96) = v1;
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_187859EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v4 - 160, *(_QWORD *)(v4 - 184), a1, *(_QWORD *)(v4 - 176));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

void View.navigationDocument<A, B, C>(_:preview:)()
{
  type metadata accessor for SharePreview();
}

void sub_187859F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v6 - 136) = v3;
  *(_QWORD *)(v6 - 128) = v4;
  *(_QWORD *)(v6 - 120) = v1;
  *(_QWORD *)(v6 - 112) = v0;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v5;
  type metadata accessor for TransferableProvider();
}

void sub_187859FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  *(_QWORD *)(v14 - 224) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&a9 - v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v13 + 16))(v12, *(_QWORD *)(v14 - 216), v11, v17);
  v20 = *(_QWORD *)(v10 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v9, *(_QWORD *)(v14 - 208), v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v9, 0, 1, v10);
  TransferableProvider.init(document:preview:)(v12, v11, (uint64_t)v19);
}

void sub_18785A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for NavigationDocumentBox(0, v6, (uint64_t)&protocol witness table for TransferableProvider<A, B, C>, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 224) + 16))(v5, v4, v6);
  v9 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(v5);
  *(_BYTE *)(v8 - 136) = v7;
  NavigationPropertiesModifier.init(provider:title:)(v9, (_QWORD *)(v8 - 152));
}

void sub_18785A0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v4 = *(_BYTE *)(v3 - 144);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 152);
  *(_BYTE *)(v3 - 160) = v4;
  *(_QWORD *)(v3 - 136) = v2;
  *(_QWORD *)(v3 - 128) = v0;
  *(_QWORD *)(v3 - 120) = v0;
  *(_QWORD *)(v3 - 112) = v1;
  *(_QWORD *)(v3 - 104) = v1;
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_18785A120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x18D75B4AC](v4 - 168, *(_QWORD *)(v4 - 192), a1, *(_QWORD *)(v4 - 184));
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
}

uint64_t View.navigationDocument(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v6 = type metadata accessor for URLProvider();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a1, v10);
  type metadata accessor for NavigationDocumentBox<URLProvider>(0);
  v11 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v9, v11 + *(_QWORD *)(*(_QWORD *)v11 + 112), (uint64_t (*)(_QWORD))type metadata accessor for URLProvider);
  v14 = v11;
  v15 = 1;
  v12 = type metadata accessor for NavigationPropertiesModifier<URL, EmptyView, EmptyView>();
  MEMORY[0x18D75B4AC](&v14, a2, v12, a3);
  return swift_release();
}

uint64_t type metadata accessor for URLProvider()
{
  uint64_t result;

  result = type metadata singleton initialization cache for URLProvider;
  if (!type metadata singleton initialization cache for URLProvider)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata accessor for NavigationDocumentBox<URLProvider>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for NavigationDocumentBox<URLProvider>)
  {
    v2 = type metadata accessor for URLProvider();
    v4 = type metadata accessor for NavigationDocumentBox(a1, v2, (uint64_t)&protocol witness table for URLProvider, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for NavigationDocumentBox<URLProvider>);
  }
}

uint64_t type metadata accessor for NavigationPropertiesModifier<URL, EmptyView, EmptyView>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for NavigationPropertiesModifier<URL, EmptyView, EmptyView>;
  if (!lazy cache variable for type metadata for NavigationPropertiesModifier<URL, EmptyView, EmptyView>)
  {
    type metadata accessor for URL();
    type metadata accessor for NavigationPropertiesModifier();
  }
  return result;
}

void sub_18785A384()
{
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_18785A3C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[11];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for NavigationPropertiesModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

void sub_18785A404()
{
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_18785A444()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[11];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for NavigationPropertiesModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

void sub_18785A484()
{
  type metadata accessor for NavigationPropertiesModifier();
}

uint64_t sub_18785A4C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[11];

  v1 = type metadata accessor for ModifiedContent();
  v3[0] = v0;
  v3[1] = &protocol witness table for NavigationPropertiesModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v3);
}

uint64_t sub_18785A504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for NavigationPropertiesModifier<URL, EmptyView, EmptyView>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for NavigationPropertiesModifier<A, B, C>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t initializeBufferWithCopyOfBuffer for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t initializeWithCopy for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLProvider()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18785A6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for URLProvider()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18785A700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for URLProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for TransferableProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
    type metadata accessor for SharePreview();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransferableProvider(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  unsigned int v39;
  _OWORD *v40;
  unsigned int v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  void *v52;
  const void *v53;
  void *v54;
  const void *v55;
  size_t __n;
  size_t v58;
  size_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;

  v5 = a3[3];
  v6 = a3[4];
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(v5 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v11 = *(_QWORD *)(v6 - 8);
  v12 = *(unsigned int *)(v11 + 84);
  v13 = *(_DWORD *)(v11 + 80);
  v14 = v10 | v13 | 7;
  v15 = v14 + *(_QWORD *)(v7 + 64);
  if ((_DWORD)v9)
    v16 = v9 - 1;
  else
    v16 = 0;
  v17 = v12 - 1;
  if (!(_DWORD)v12)
    v17 = 0;
  if (v16 <= v17)
    v18 = v17;
  else
    v18 = v16;
  if (v18 <= 0x7FFFFFFE)
    v19 = 2147483646;
  else
    v19 = v18;
  if ((_DWORD)v9)
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = *(_QWORD *)(v8 + 64) + 1;
  v21 = (v20 + v13 + ((v10 + 64) & ~v10)) & ~v13;
  if ((_DWORD)v12)
    v22 = *(_QWORD *)(v11 + 64);
  else
    v22 = *(_QWORD *)(v11 + 64) + 1;
  v23 = v21 + v22;
  v24 = v21 + v22 + (v15 & ~v14);
  v25 = v14 | *(_DWORD *)(v7 + 80);
  if (v25 != 7 || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v24 > 0x18)
  {
    v28 = *a2;
    *a1 = *a2;
    v29 = (uint64_t *)(v28 + ((v25 + 16) & ~v25));
    swift_retain();
    return v29;
  }
  v60 = v19;
  __n = v23;
  v58 = v20;
  v62 = v20 + v13;
  v63 = *(_QWORD *)(v5 - 8);
  v59 = v22;
  v64 = a3[3];
  v65 = *(_QWORD *)(v6 - 8);
  v66 = a3[4];
  v30 = a1;
  v31 = ~v14;
  v61 = ~v13;
  (*(void (**)(uint64_t *, uint64_t *))(v7 + 16))(a1, a2);
  v67 = v30;
  v32 = (_OWORD *)(((unint64_t)v30 + v15) & v31);
  v33 = (_OWORD *)(((unint64_t)a2 + v15) & v31);
  if (v18 <= 0x7FFFFFFE)
  {
    v34 = ~v10;
    v35 = *((_QWORD *)v33 + 3);
    if (v35 >= 0xFFFFFFFF)
      LODWORD(v35) = -1;
    v36 = v66;
    v29 = v67;
    if ((v35 + 1) < 2)
      goto LABEL_38;
LABEL_40:
    memcpy(v32, v33, __n);
    return v29;
  }
  v34 = ~v10;
  v37 = (v10 + (((unint64_t)v33 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v10;
  if (v16 == v60)
  {
    v36 = v66;
    v29 = v67;
    if (v9 >= 2)
    {
      v38 = v32;
      v39 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v63 + 48))(v37, v9, v64);
      v32 = v38;
      if (v39 >= 2)
        goto LABEL_40;
    }
  }
  else
  {
    v36 = v66;
    v29 = v67;
    if (v12 >= 2)
    {
      v40 = v32;
      v41 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v65 + 48))((v62 + v37) & v61, v12, v66);
      v32 = v40;
      if (v41 > 1)
        goto LABEL_40;
    }
  }
LABEL_38:
  v42 = *((_QWORD *)v33 + 3);
  if (v42 < 0xFFFFFFFF)
  {
    v44 = v33[1];
    *v32 = *v33;
    v32[1] = v44;
  }
  else
  {
    *((_QWORD *)v32 + 3) = v42;
    v43 = v32;
    (**(void (***)(_OWORD *, _OWORD *))(v42 - 8))(v32, v33);
    v32 = v43;
  }
  v45 = ((unint64_t)v32 + 39) & 0xFFFFFFFFFFFFFFF8;
  v46 = ((unint64_t)v33 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v46 + 24) < 0xFFFFFFFFuLL)
  {
    v51 = *(_OWORD *)(v46 + 16);
    *(_OWORD *)v45 = *(_OWORD *)v46;
    *(_OWORD *)(v45 + 16) = v51;
  }
  else
  {
    v47 = *(_QWORD *)v46;
    v48 = *(_QWORD *)(v46 + 8);
    v49 = v36;
    v50 = *(_BYTE *)(v46 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v46, v48, v50);
    *(_QWORD *)v45 = v47;
    *(_QWORD *)(v45 + 8) = v48;
    *(_BYTE *)(v45 + 16) = v50;
    v36 = v49;
    *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
    swift_bridgeObjectRetain();
  }
  v52 = (void *)((v10 + 32 + v45) & v34);
  v53 = (const void *)((v10 + 32 + v46) & v34);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v53, 1, v64))
  {
    memcpy(v52, v53, v58);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v52, v53, v64);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v52, 0, 1, v64);
  }
  v54 = (void *)(((unint64_t)v52 + v62) & v61);
  v55 = (const void *)(((unint64_t)v53 + v62) & v61);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48))(v55, 1, v36))
  {
    memcpy(v54, v55, v59);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v65 + 16))(v54, v55, v36);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v54, 0, 1, v36);
  }
  return v67;
}

uint64_t destroy for TransferableProvider(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a2[2] - 8);
  result = (*(uint64_t (**)(void))(v4 + 8))();
  v6 = *(_QWORD *)(v4 + 64) + a1;
  v8 = a2[3];
  v7 = a2[4];
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v6 + (v10 | v12 | 7)) & ~(v10 | v12 | 7);
  v14 = *(unsigned int *)(v9 + 84);
  v15 = v14 - 1;
  if (!(_DWORD)v14)
    v15 = 0;
  v16 = *(_DWORD *)(v11 + 84);
  v17 = v16 - 1;
  if (!v16)
    v17 = 0;
  if (v15 > v17)
    v17 = v15;
  v18 = ~v10;
  v19 = *(_QWORD *)(v9 + 64);
  v27 = ~v12;
  if (v17 > 0x7FFFFFFE)
  {
    v21 = (v10 + ((v13 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & v18;
    if (v15 == v17)
    {
      if (v14 >= 2)
      {
        result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v21, v14, v8);
        if (result >= 2)
          return result;
      }
    }
    else if (v16 >= 2)
    {
      v22 = (_DWORD)v14 ? *(unsigned __int8 *)(v11 + 80) : v12 + 1;
      result = (*(uint64_t (**)(unint64_t))(v11 + 48))((v22 + v19 + v21) & v27);
      if (result > 1)
        return result;
    }
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(v13 + 24);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  if ((v20 + 1) < 2)
  {
LABEL_21:
    if (*(_QWORD *)(v13 + 24) >= 0xFFFFFFFFuLL)
      __swift_destroy_boxed_opaque_existential_1(v13);
    v23 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v23 + 24) >= 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
      swift_bridgeObjectRelease();
    }
    v24 = (v10 + v23 + 32) & v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v24, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v24, v8);
    if ((_DWORD)v14)
      v25 = v12;
    else
      v25 = v12 + 1;
    v26 = (v25 + v19 + v24) & v27;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v26, 1, v7);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v26, v7);
  }
  return result;
}

uint64_t initializeWithCopy for TransferableProvider(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  unint64_t *v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  __int128 v45;
  void *v46;
  const void *v47;
  size_t v48;
  size_t v49;
  void *v50;
  unint64_t *v51;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v9 = a3[3];
  v8 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v61 = v8;
  v12 = *(_QWORD *)(v8 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 | v13 | 7;
  v15 = v14 + v7;
  v16 = (_OWORD *)((v15 + a1) & ~v14);
  v17 = (unint64_t *)((v15 + a2) & ~v14);
  v18 = *(_DWORD *)(v10 + 84);
  v19 = v18 - 1;
  if (!v18)
    v19 = 0;
  v20 = *(unsigned int *)(v12 + 84);
  v21 = v20 - 1;
  if (!(_DWORD)v20)
    v21 = 0;
  if (v19 > v21)
    v21 = v19;
  v22 = *(_QWORD *)(v10 + 64);
  v23 = ~v13;
  v24 = *(_QWORD *)(v12 + 64);
  v25 = v21 > 0x7FFFFFFE;
  if (v21 <= 0x7FFFFFFE)
    v21 = 2147483646;
  v56 = ~v11;
  if (v25)
  {
    v27 = (v11 + (((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v11;
    if (v19 == v21)
    {
      if (v18 < 2)
        goto LABEL_23;
      v62 = *(_DWORD *)(v10 + 84);
      v57 = *(_QWORD *)(v10 + 64);
      v28 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))(v27, v18, v9);
      v22 = v57;
      v23 = ~v13;
      v18 = v62;
      if (v28 < 2)
        goto LABEL_23;
    }
    else
    {
      if (v20 < 2)
        goto LABEL_23;
      v29 = v18 ? *(unsigned __int8 *)(v12 + 80) : v13 + 1;
      v63 = *(_DWORD *)(v10 + 84);
      v58 = *(_QWORD *)(v10 + 64);
      v30 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v12 + 48))((v29 + v22 + v27) & v23, v20, v61);
      v22 = v58;
      v23 = ~v13;
      v18 = v63;
      if (v30 <= 1)
        goto LABEL_23;
    }
LABEL_25:
    v32 = ((v11 + 64) & ~v11) + v13;
    if (!v18)
      ++v32;
    v33 = (v32 + v22) & v23;
    if ((_DWORD)v20)
      v34 = v24;
    else
      v34 = v24 + 1;
    v35 = v34 + v33;
    v36 = v16;
    v37 = v17;
    goto LABEL_48;
  }
  v26 = v17[3];
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  if ((v26 + 1) >= 2)
    goto LABEL_25;
LABEL_23:
  v31 = v17[3];
  v54 = v24;
  v55 = v9;
  v59 = v22;
  v60 = v23;
  v64 = v18;
  if (v31 < 0xFFFFFFFF)
  {
    v38 = *((_OWORD *)v17 + 1);
    *v16 = *(_OWORD *)v17;
    v16[1] = v38;
  }
  else
  {
    *((_QWORD *)v16 + 3) = v31;
    (**(void (***)(_OWORD *, unint64_t *))(v31 - 8))(v16, v17);
  }
  v39 = ((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v40 = ((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v40 + 24) < 0xFFFFFFFFuLL)
  {
    v45 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)v39 = *(_OWORD *)v40;
    *(_OWORD *)(v39 + 16) = v45;
  }
  else
  {
    v41 = *(_QWORD *)v40;
    v42 = *(_QWORD *)(v40 + 8);
    v53 = v13;
    v43 = v20;
    v20 = a1;
    v44 = *(_BYTE *)(v40 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v40, v42, v44);
    *(_QWORD *)v39 = v41;
    *(_QWORD *)(v39 + 8) = v42;
    *(_BYTE *)(v39 + 16) = v44;
    a1 = v20;
    LODWORD(v20) = v43;
    v13 = v53;
    *(_QWORD *)(v39 + 24) = *(_QWORD *)(v40 + 24);
    swift_bridgeObjectRetain();
  }
  v46 = (void *)((v11 + 32 + v39) & v56);
  v47 = (const void *)((v11 + 32 + v40) & v56);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v47, 1, v55))
  {
    if (v64)
      v48 = v59;
    else
      v48 = v59 + 1;
    memcpy(v46, v47, v48);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v46, v47, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v46, 0, 1, v55);
    if (v64)
      v48 = v59;
    else
      v48 = v59 + 1;
  }
  v49 = v48 + v13;
  v50 = (void *)(((unint64_t)v46 + v48 + v13) & v60);
  v51 = (unint64_t *)(((unint64_t)v47 + v49) & v60);
  if (!(*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v12 + 48))(v51, 1, v61))
  {
    (*(void (**)(void *, unint64_t *, uint64_t))(v12 + 16))(v50, v51, v61);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v50, 0, 1, v61);
    return a1;
  }
  if ((_DWORD)v20)
    v35 = v54;
  else
    v35 = v54 + 1;
  v36 = v50;
  v37 = v51;
LABEL_48:
  memcpy(v36, v37, v35);
  return a1;
}

uint64_t assignWithCopy for TransferableProvider(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  size_t v44;
  size_t v45;
  void *v46;
  const void *v47;
  unint64_t v48;
  unsigned int v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  void *v64;
  void *v65;
  uint64_t (*v66)(void *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t (*v78)(void *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  void *v91;
  const void *v92;
  size_t v93;
  size_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v102 = a3[3];
  v103 = a3[4];
  v8 = *(_QWORD *)(v102 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v103 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 | v11 | 7;
  v13 = v12 + v7;
  v100 = a1;
  v14 = (v13 + a1) & ~v12;
  v15 = (v13 + a2) & ~v12;
  v16 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v16)
    v17 = v16 - 1;
  else
    v17 = 0;
  v18 = *(unsigned int *)(v10 + 84);
  v19 = v18 - 1;
  if (!(_DWORD)v18)
    v19 = 0;
  if (v17 > v19)
    v19 = v17;
  v20 = ~v9;
  v98 = (v9 + 64) & ~v9;
  v104 = *(_QWORD *)(v8 + 64);
  v105 = *(unsigned __int8 *)(v10 + 80);
  v21 = ~v11;
  v99 = *(_QWORD *)(v10 + 64);
  if (v19 <= 0x7FFFFFFE)
    v22 = 2147483646;
  else
    v22 = v19;
  v101 = *(_DWORD *)(v10 + 84);
  v106 = ~v9;
  if (v19 > 0x7FFFFFFE)
  {
    v27 = ~v11;
    v28 = v9 + 32;
    v29 = (v9 + 32 + ((v14 + 39) & 0xFFFFFFFFFFFFFFF8)) & v20;
    if (v17 == v22)
    {
      if (v16 < 2)
        goto LABEL_31;
      v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v29, v16, v102);
    }
    else
    {
      if (v18 < 2)
        goto LABEL_31;
      v34 = *(unsigned __int8 *)(v10 + 80);
      if (!(_DWORD)v16)
        v34 = v11 + 1;
      v30 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v34 + v104 + v29) & v27, v18, v103);
    }
    v20 = ~v9;
    LODWORD(v18) = v101;
    if (v30 >= 2)
    {
      v48 = (v28 + ((v15 + 39) & 0xFFFFFFFFFFFFFFF8)) & v106;
      if (v17 == v22)
      {
        v21 = v27;
        if (v16 >= 2)
        {
          v49 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v48, v16, v102);
          LODWORD(v18) = v101;
          if (v49 >= 2)
            goto LABEL_23;
        }
      }
      else
      {
        v21 = v27;
        if (v101 >= 2)
        {
          v81 = v105;
          if (!(_DWORD)v16)
            v81 = v105 + 1;
          v82 = (*(uint64_t (**)(size_t))(v10 + 48))((v81 + v104 + v48) & v27);
          LODWORD(v18) = v101;
          if (v82 > 1)
            goto LABEL_23;
        }
      }
      goto LABEL_93;
    }
LABEL_31:
    v35 = (v28 + ((v15 + 39) & 0xFFFFFFFFFFFFFFF8)) & v20;
    if (v17 == v22)
    {
      v21 = v27;
      if (v16 >= 2)
      {
        v36 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v35, v16, v102);
        v20 = ~v9;
        if (v36 >= 2)
          goto LABEL_42;
      }
    }
    else
    {
      v21 = v27;
      if (v18 >= 2)
      {
        v37 = v105;
        if (!(_DWORD)v16)
          v37 = v105 + 1;
        v38 = (*(uint64_t (**)(size_t, _QWORD, uint64_t))(v10 + 48))((v37 + v104 + v35) & v27, v101, v103);
        v20 = ~v9;
        if (v38 > 1)
          goto LABEL_42;
      }
    }
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(v14 + 24);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  v24 = v23 + 1;
  v25 = *(_QWORD *)(v15 + 24);
  if (v25 >= 0xFFFFFFFF)
    LODWORD(v25) = -1;
  v26 = v25 + 1;
  if (v24 >= 2)
  {
    if (v26 >= 2)
    {
LABEL_23:
      v31 = v98 + v105;
      if (!(_DWORD)v16)
        ++v31;
      v32 = (_DWORD)v18 == 0;
      v33 = v31 + v104;
      goto LABEL_54;
    }
LABEL_93:
    v83 = *(_QWORD *)(v15 + 24);
    v97 = v21;
    if (v83 < 0xFFFFFFFF)
    {
      v84 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v84;
    }
    else
    {
      *(_QWORD *)(v14 + 24) = v83;
      (**(void (***)(uint64_t, uint64_t))(v83 - 8))(v14, v15);
    }
    v85 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    v86 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v86 + 24) < 0xFFFFFFFFuLL)
    {
      v90 = *(_OWORD *)(v86 + 16);
      *(_OWORD *)v85 = *(_OWORD *)v86;
      *(_OWORD *)(v85 + 16) = v90;
    }
    else
    {
      v87 = *(_QWORD *)v86;
      v88 = *(_QWORD *)(v86 + 8);
      v89 = *(_BYTE *)(v86 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v86, v88, v89);
      *(_QWORD *)v85 = v87;
      *(_QWORD *)(v85 + 8) = v88;
      *(_BYTE *)(v85 + 16) = v89;
      *(_QWORD *)(v85 + 24) = *(_QWORD *)(v86 + 24);
      swift_bridgeObjectRetain();
    }
    v91 = (void *)((v9 + 32 + v85) & v106);
    v92 = (const void *)((v9 + 32 + v86) & v106);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v92, 1, v102))
    {
      if ((_DWORD)v16)
        v93 = v104;
      else
        v93 = v104 + 1;
      memcpy(v91, v92, v93);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v91, v92, v102);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v91, 0, 1, v102);
      if ((_DWORD)v16)
        v93 = v104;
      else
        v93 = v104 + 1;
    }
    v94 = v93 + v105;
    v76 = (void *)(((unint64_t)v91 + v93 + v105) & v97);
    v77 = (void *)(((unint64_t)v92 + v94) & v97);
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v77, 1, v103))
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v76, v77, v103);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v76, 0, 1, v103);
      return v100;
    }
    goto LABEL_108;
  }
  if (v26 >= 2)
  {
LABEL_42:
    if (*(_QWORD *)(v14 + 24) >= 0xFFFFFFFFuLL)
    {
      __swift_destroy_boxed_opaque_existential_1(v14);
      v20 = ~v9;
    }
    v40 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v40 + 24) >= 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(_QWORD *)v40, *(_QWORD *)(v40 + 8), *(_BYTE *)(v40 + 16));
      swift_bridgeObjectRelease();
      v20 = ~v9;
    }
    v41 = (v9 + v40 + 32) & v20;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v41, 1, v102))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v41, v102);
    if ((_DWORD)v16)
      v42 = v104;
    else
      v42 = v104 + 1;
    if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v42 + v105 + v41) & v21, 1, v103))
      (*(void (**)(size_t, uint64_t))(v10 + 8))((v42 + v105 + v41) & v21, v103);
    v32 = v101 == 0;
    v33 = v98 + v105 + v42;
LABEL_54:
    v43 = v33 & v21;
    v44 = v99;
    if (v32)
      v44 = v99 + 1;
    v45 = v44 + v43;
    v46 = (void *)v14;
    v47 = (const void *)v15;
    goto LABEL_112;
  }
LABEL_39:
  v39 = *(_QWORD *)(v15 + 24);
  v96 = v21;
  if (*(_QWORD *)(v14 + 24) < 0xFFFFFFFFuLL)
  {
    if (v39 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(v14 + 24) = v39;
      (**(void (***)(uint64_t, uint64_t))(v39 - 8))(v14, v15);
      goto LABEL_65;
    }
  }
  else
  {
    if (v39 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v14, (uint64_t *)v15);
      goto LABEL_65;
    }
    __swift_destroy_boxed_opaque_existential_1(v14);
  }
  v50 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v50;
LABEL_65:
  v51 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  v53 = *(_QWORD *)(v52 + 24);
  if (*(_QWORD *)(v51 + 24) < 0xFFFFFFFFuLL)
  {
    if (v53 >= 0xFFFFFFFF)
    {
      v60 = *(_QWORD *)v52;
      v61 = *(_QWORD *)(v52 + 8);
      v62 = *(_BYTE *)(v52 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v52, v61, v62);
      *(_QWORD *)v51 = v60;
      *(_QWORD *)(v51 + 8) = v61;
      *(_BYTE *)(v51 + 16) = v62;
      *(_QWORD *)(v51 + 24) = *(_QWORD *)(v52 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_72;
    }
  }
  else
  {
    if (v53 >= 0xFFFFFFFF)
    {
      v54 = *(_QWORD *)v52;
      v55 = *(_QWORD *)(v52 + 8);
      v56 = *(_BYTE *)(v52 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v52, v55, v56);
      v57 = *(_QWORD *)v51;
      v58 = *(_QWORD *)(v51 + 8);
      v59 = *(_BYTE *)(v51 + 16);
      *(_QWORD *)v51 = v54;
      *(_QWORD *)(v51 + 8) = v55;
      *(_BYTE *)(v51 + 16) = v56;
      outlined consume of Text.Storage(v57, v58, v59);
      *(_QWORD *)(v51 + 24) = *(_QWORD *)(v52 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }
    outlined consume of Text.Storage(*(_QWORD *)v51, *(_QWORD *)(v51 + 8), *(_BYTE *)(v51 + 16));
    swift_bridgeObjectRelease();
  }
  v63 = *(_OWORD *)(v52 + 16);
  *(_OWORD *)v51 = *(_OWORD *)v52;
  *(_OWORD *)(v51 + 16) = v63;
LABEL_72:
  v64 = (void *)((v9 + 32 + v51) & v106);
  v65 = (void *)((v9 + 32 + v52) & v106);
  v66 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v67 = v66(v64, 1, v102);
  v68 = v66(v65, 1, v102);
  if (v67)
  {
    v69 = v103;
    v70 = v105;
    v71 = v96;
    if (!v68)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v64, v65, v102);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v64, 0, 1, v102);
      v72 = v104;
      goto LABEL_81;
    }
  }
  else
  {
    v69 = v103;
    v70 = v105;
    v71 = v96;
    if (!v68)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v64, v65, v102);
      v72 = v104;
      goto LABEL_81;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v64, v102);
  }
  v72 = v104;
  if ((_DWORD)v16)
    v73 = v104;
  else
    v73 = v104 + 1;
  memcpy(v64, v65, v73);
LABEL_81:
  if ((_DWORD)v16)
    v74 = v72;
  else
    v74 = v72 + 1;
  v75 = v74 + v70;
  v76 = (void *)(((unint64_t)v64 + v75) & v71);
  v77 = (void *)(((unint64_t)v65 + v75) & v71);
  v78 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v79 = v78(v76, 1, v69);
  v80 = v78(v77, 1, v69);
  if (!v79)
  {
    if (!v80)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v76, v77, v69);
      return v100;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v76, v69);
    goto LABEL_108;
  }
  if (v80)
  {
LABEL_108:
    if (v101)
      v45 = v99;
    else
      v45 = v99 + 1;
    v46 = v76;
    v47 = v77;
LABEL_112:
    memcpy(v46, v47, v45);
    return v100;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v76, v77, v69);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v76, 0, 1, v69);
  return v100;
}

uint64_t initializeWithTake for TransferableProvider(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  void *v35;
  const void *v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  void *v42;
  unint64_t *v43;
  size_t v44;
  void *v45;
  unint64_t *v46;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v9 = a3[3];
  v8 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v55 = v8;
  v56 = a1;
  v12 = *(_QWORD *)(v8 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 | v13 | 7;
  v15 = v14 + v7;
  v16 = (_OWORD *)((v15 + a1) & ~v14);
  v17 = (unint64_t *)((v15 + a2) & ~v14);
  v18 = *(_DWORD *)(v10 + 84);
  v19 = v18 - 1;
  if (!v18)
    v19 = 0;
  v20 = *(_DWORD *)(v12 + 84);
  v21 = v20 - 1;
  if (!v20)
    v21 = 0;
  if (v19 > v21)
    v21 = v19;
  v22 = ~v11;
  v23 = *(_QWORD *)(v10 + 64);
  v24 = ~v13;
  v25 = *(_QWORD *)(v12 + 64);
  if (v21 > 0x7FFFFFFE)
  {
    v27 = (v11 + (((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & v22;
    if (v19 == v21)
    {
      if (v18 < 2)
        goto LABEL_21;
      v48 = *(_QWORD *)(v12 + 64);
      v51 = *(_QWORD *)(v10 + 64);
      v28 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))(v27, *(unsigned int *)(v10 + 84), v9);
      v23 = v51;
      v24 = ~v13;
      v25 = v48;
      if (v28 < 2)
        goto LABEL_21;
    }
    else
    {
      if (v20 < 2)
        goto LABEL_21;
      v29 = v18 ? *(unsigned __int8 *)(v12 + 80) : v13 + 1;
      v49 = *(_QWORD *)(v12 + 64);
      v52 = *(_QWORD *)(v10 + 64);
      v30 = (*(uint64_t (**)(size_t, _QWORD, uint64_t))(v12 + 48))((v29 + v23 + v27) & v24, *(unsigned int *)(v12 + 84), v55);
      v23 = v52;
      v24 = ~v13;
      v25 = v49;
      if (v30 <= 1)
        goto LABEL_21;
    }
LABEL_26:
    v38 = ((v11 + 64) & ~v11) + v13;
    if (!v18)
      ++v38;
    v39 = (v38 + v23) & v24;
    if (v20)
      v40 = v25;
    else
      v40 = v25 + 1;
    v41 = v40 + v39;
    v42 = v16;
    v43 = v17;
    goto LABEL_40;
  }
  v26 = v17[3];
  if (v26 >= 0xFFFFFFFF)
    LODWORD(v26) = -1;
  if ((v26 + 1) >= 2)
    goto LABEL_26;
LABEL_21:
  v53 = v23;
  v54 = v24;
  v50 = v25;
  v31 = *((_OWORD *)v17 + 1);
  *v16 = *(_OWORD *)v17;
  v16[1] = v31;
  v32 = (_OWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (void *)(((unint64_t)v32 + v11 + 32) & v22);
  v36 = (const void *)(((unint64_t)v33 + v11 + 32) & v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v36, 1, v9))
  {
    if (v18)
      v37 = v53;
    else
      v37 = v53 + 1;
    memcpy(v35, v36, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v35, 0, 1, v9);
    if (v18)
      v37 = v53;
    else
      v37 = v53 + 1;
  }
  v44 = v37 + v13;
  v45 = (void *)(((unint64_t)v35 + v37 + v13) & v54);
  v46 = (unint64_t *)(((unint64_t)v36 + v44) & v54);
  if (!(*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v12 + 48))(v46, 1, v55))
  {
    (*(void (**)(void *, unint64_t *, uint64_t))(v12 + 32))(v45, v46, v55);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v45, 0, 1, v55);
    return v56;
  }
  if (v20)
    v41 = v50;
  else
    v41 = v50 + 1;
  v42 = v45;
  v43 = v46;
LABEL_40:
  memcpy(v42, v43, v41);
  return v56;
}

uint64_t assignWithTake for TransferableProvider(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  size_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  void *v54;
  const void *v55;
  __int128 v56;
  unint64_t v57;
  unsigned int v58;
  __int128 v59;
  void *v60;
  void *v61;
  uint64_t (*v62)(void *, uint64_t, uint64_t);
  int v63;
  int v64;
  size_t v65;
  size_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t (*v70)(void *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  __int128 v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  void *v79;
  const void *v80;
  size_t v81;
  size_t v82;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;

  v6 = *(_QWORD *)(a3[2] - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v91 = a3[3];
  v8 = *(_QWORD *)(v91 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = a3[4];
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v9 | v12 | 7;
  v14 = v13 + v7;
  v88 = a1;
  v15 = (v14 + a1) & ~v13;
  v16 = (_OWORD *)((v14 + a2) & ~v13);
  v17 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v17)
    v18 = v17 - 1;
  else
    v18 = 0;
  v92 = *(_DWORD *)(v11 + 84);
  v19 = v92 - 1;
  if (!v92)
    v19 = 0;
  if (v18 > v19)
    v19 = v18;
  v20 = ~v9;
  v86 = (v9 + 64) & ~v9;
  v21 = *(_QWORD *)(v8 + 64);
  v90 = ~v12;
  v89 = *(_QWORD *)(v10 - 8);
  v87 = *(_QWORD *)(v11 + 64);
  if (v19 <= 0x7FFFFFFE)
    v22 = 2147483646;
  else
    v22 = v19;
  if (v19 <= 0x7FFFFFFE)
  {
    v23 = *(_QWORD *)(v15 + 24);
    if (v23 >= 0xFFFFFFFF)
      LODWORD(v23) = -1;
    v24 = v23 + 1;
    v25 = *((_QWORD *)v16 + 3);
    if (v25 >= 0xFFFFFFFF)
      LODWORD(v25) = -1;
    v26 = v25 + 1;
    if (v24 < 2)
    {
      v27 = v10;
      v28 = *(_QWORD *)(v10 - 8);
      if (v26 < 2)
        goto LABEL_41;
      goto LABEL_46;
    }
    if (v26 >= 2)
    {
LABEL_23:
      v33 = v86 + v12;
      if (!(_DWORD)v17)
        ++v33;
      v34 = v92 == 0;
      v35 = (v33 + v21) & v90;
      goto LABEL_58;
    }
LABEL_90:
    v75 = v16[1];
    *(_OWORD *)v15 = *v16;
    *(_OWORD *)(v15 + 16) = v75;
    v76 = (_OWORD *)((v15 + 39) & 0xFFFFFFFFFFFFFFF8);
    v77 = (_OWORD *)(((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    v79 = (void *)(((unint64_t)v76 + v9 + 32) & v20);
    v80 = (const void *)(((unint64_t)v77 + v9 + 32) & v20);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v80, 1, v91))
    {
      if ((_DWORD)v17)
        v81 = v21;
      else
        v81 = v21 + 1;
      memcpy(v79, v80, v81);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v79, v80, v91);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v79, 0, 1, v91);
      if ((_DWORD)v17)
        v81 = v21;
      else
        v81 = v21 + 1;
    }
    v82 = v81 + v12;
    v68 = (void *)(((unint64_t)v79 + v81 + v12) & v90);
    v69 = (void *)(((unint64_t)v80 + v82) & v90);
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v89 + 48))(v69, 1, v10))
    {
      (*(void (**)(void *, void *, uint64_t))(v89 + 32))(v68, v69, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v68, 0, 1, v10);
      return v88;
    }
    goto LABEL_99;
  }
  v85 = *(_QWORD *)(v8 + 64);
  v29 = *(unsigned __int8 *)(v11 + 80);
  v30 = v9 + 32;
  v31 = (v9 + 32 + ((v15 + 39) & 0xFFFFFFFFFFFFFFF8)) & v20;
  if (v18 == v22)
  {
    if (v17 < 2)
      goto LABEL_32;
    v32 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v31, v17, v91);
  }
  else
  {
    if (v92 < 2)
      goto LABEL_32;
    if ((_DWORD)v17)
      v36 = *(unsigned __int8 *)(v11 + 80);
    else
      v36 = v29 + 1;
    v32 = (*(uint64_t (**)(size_t, _QWORD, uint64_t))(v11 + 48))((v36 + v85 + v31) & v90, v92, v10);
  }
  v20 = ~v9;
  if (v32 >= 2)
  {
    v57 = (v30 + (((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v9;
    if (v18 == v22)
    {
      v12 = v29;
      v21 = v85;
      if (v17 >= 2)
      {
        v58 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v57, v17, v91);
        v20 = ~v9;
        if (v58 >= 2)
          goto LABEL_23;
      }
    }
    else
    {
      v12 = v29;
      v21 = v85;
      if (v92 >= 2)
      {
        v73 = (_DWORD)v17 ? v12 : v12 + 1;
        v74 = (*(uint64_t (**)(size_t, _QWORD, uint64_t))(v89 + 48))((v73 + v85 + v57) & v90, v92, v10);
        v20 = ~v9;
        if (v74 > 1)
          goto LABEL_23;
      }
    }
    goto LABEL_90;
  }
LABEL_32:
  v37 = (v30 + (((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8)) & v20;
  if (v18 == v22)
  {
    v27 = v10;
    v28 = v89;
    v12 = v29;
    v21 = v85;
    if (v17 >= 2)
    {
      v38 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v37, v17, v91);
      v20 = ~v9;
      if (v38 >= 2)
      {
LABEL_46:
        if (*(_QWORD *)(v15 + 24) >= 0xFFFFFFFFuLL)
        {
          __swift_destroy_boxed_opaque_existential_1(v15);
          v20 = ~v9;
        }
        v49 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
        if (*(_QWORD *)(v49 + 24) >= 0xFFFFFFFFuLL)
        {
          outlined consume of Text.Storage(*(_QWORD *)v49, *(_QWORD *)(v49 + 8), *(_BYTE *)(v49 + 16));
          swift_bridgeObjectRelease();
          v20 = ~v9;
        }
        v50 = (v9 + v49 + 32) & v20;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v50, 1, v91))
          (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v50, v91);
        if ((_DWORD)v17)
          v51 = v21;
        else
          v51 = v21 + 1;
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v28 + 48))((v51 + v12 + v50) & v90, 1, v27))
          (*(void (**)(size_t, uint64_t))(v28 + 8))((v51 + v12 + v50) & v90, v27);
        v34 = v92 == 0;
        v35 = (v86 + v12 + v51) & v90;
LABEL_58:
        v52 = v87;
        if (v34)
          v52 = v87 + 1;
        v53 = v52 + v35;
        v54 = (void *)v15;
        v55 = v16;
        goto LABEL_103;
      }
    }
  }
  else
  {
    v27 = v10;
    v28 = v89;
    v12 = v29;
    v21 = v85;
    if (v92 >= 2)
    {
      v39 = (_DWORD)v17 ? v12 : v12 + 1;
      v40 = (*(uint64_t (**)(size_t, _QWORD, uint64_t))(v89 + 48))((v39 + v85 + v37) & v90, v92, v27);
      v20 = ~v9;
      if (v40 > 1)
        goto LABEL_46;
    }
  }
LABEL_41:
  if (*(_QWORD *)(v15 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v15);
    v20 = ~v9;
  }
  v41 = v16[1];
  *(_OWORD *)v15 = *v16;
  *(_OWORD *)(v15 + 16) = v41;
  v42 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((unint64_t)v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  v84 = v27;
  if (*(_QWORD *)(v42 + 24) < 0xFFFFFFFFuLL)
  {
    v44 = v28;
    v56 = *(_OWORD *)(v43 + 16);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 16) = v56;
  }
  else
  {
    v44 = v28;
    if (*(_QWORD *)(v43 + 24) < 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(_QWORD *)v42, *(_QWORD *)(v42 + 8), *(_BYTE *)(v42 + 16));
      swift_bridgeObjectRelease();
      v59 = *(_OWORD *)(v43 + 16);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v59;
    }
    else
    {
      v45 = *(_BYTE *)(v43 + 16);
      v46 = *(_QWORD *)v42;
      v47 = *(_QWORD *)(v42 + 8);
      v48 = *(_BYTE *)(v42 + 16);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_BYTE *)(v42 + 16) = v45;
      outlined consume of Text.Storage(v46, v47, v48);
      *(_QWORD *)(v42 + 24) = *(_QWORD *)(v43 + 24);
      swift_bridgeObjectRelease();
    }
    v20 = ~v9;
  }
  v60 = (void *)((v9 + 32 + v42) & v20);
  v61 = (void *)((v9 + 32 + v43) & v20);
  v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v63 = v62(v60, 1, v91);
  v64 = v62(v61, 1, v91);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v60, v61, v91);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v60, 0, 1, v91);
      goto LABEL_77;
    }
  }
  else
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v60, v61, v91);
      goto LABEL_77;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v60, v91);
  }
  if ((_DWORD)v17)
    v65 = v21;
  else
    v65 = v21 + 1;
  memcpy(v60, v61, v65);
LABEL_77:
  if ((_DWORD)v17)
    v66 = v21;
  else
    v66 = v21 + 1;
  v67 = v66 + v12;
  v68 = (void *)(((unint64_t)v60 + v67) & v90);
  v69 = (void *)(((unint64_t)v61 + v67) & v90);
  v70 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  v71 = v70(v68, 1, v84);
  v72 = v70(v69, 1, v84);
  if (!v71)
  {
    if (!v72)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v68, v69, v84);
      return v88;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v68, v84);
    goto LABEL_99;
  }
  if (v72)
  {
LABEL_99:
    if (v92)
      v53 = v87;
    else
      v53 = v87 + 1;
    v54 = v68;
    v55 = v69;
LABEL_103:
    memcpy(v54, v55, v53);
    return v88;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v68, v69, v84);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v68, 0, 1, v84);
  return v88;
}

uint64_t getEnumTagSinglePayload for TransferableProvider(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = v11 - 1;
  if (!v11)
    v12 = 0;
  if (v8 <= v12)
    v13 = v12;
  else
    v13 = v8;
  if (v13 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = v13;
  if (v14 - 1 <= v5)
    v15 = *(_DWORD *)(v4 + 84);
  else
    v15 = v14 - 1;
  if (v7)
    v16 = *(_QWORD *)(v6 + 64);
  else
    v16 = *(_QWORD *)(v6 + 64) + 1;
  if (v11)
    v17 = *(_QWORD *)(v10 + 64);
  else
    v17 = *(_QWORD *)(v10 + 64) + 1;
  if (!a2)
    return 0;
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = v18 | v19 | 7;
  v21 = v20 + *(_QWORD *)(v4 + 64);
  v22 = v16 + v19;
  v23 = a2 - v15;
  if (a2 <= v15)
    goto LABEL_40;
  v24 = v17 + (v21 & ~v20) + ((v22 + ((v18 + 64) & ~v18)) & ~v19);
  v25 = 8 * v24;
  if (v24 <= 3)
  {
    v27 = ((v23 + ~(-1 << v25)) >> v25) + 1;
    if (HIWORD(v27))
    {
      v26 = *(_DWORD *)(a1 + v24);
      if (!v26)
        goto LABEL_40;
      goto LABEL_31;
    }
    if (v27 > 0xFF)
    {
      v26 = *(unsigned __int16 *)(a1 + v24);
      if (!*(_WORD *)(a1 + v24))
        goto LABEL_40;
      goto LABEL_31;
    }
    if (v27 < 2)
    {
LABEL_40:
      if (v5 >= v14 - 1)
        return (*(uint64_t (**)(void))(v4 + 48))();
      if (v13 <= 0x7FFFFFFE)
      {
        v30 = *(_QWORD *)(((v21 + a1) & ~v20) + 0x18);
        if (v30 >= 0xFFFFFFFF)
          LODWORD(v30) = -1;
        if ((v30 + 1) >= 2)
        {
          result = (v30 - 1);
          if (v30 > 1)
            return result;
        }
        return 0;
      }
      v31 = (v18 + ((((v21 + a1) & ~v20) + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v18;
      if (v8 == v14)
      {
        if (v7 < 2)
          return 0;
        v32 = (*(uint64_t (**)(unint64_t))(v6 + 48))(v31);
        if (v32 < 2)
          return 0;
      }
      else
      {
        if (v11 < 2)
          return 0;
        v32 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v31) & ~v19, *(unsigned int *)(v10 + 84), v9);
        if (v32 < 2)
          return 0;
      }
      v33 = v32 != 1;
      result = v32 - 2;
      if ((_DWORD)result != 0 && v33)
        return result;
      return 0;
    }
  }
  v26 = *(unsigned __int8 *)(a1 + v24);
  if (!*(_BYTE *)(a1 + v24))
    goto LABEL_40;
LABEL_31:
  v28 = (v26 - 1) << v25;
  if (v24 > 3)
    v28 = 0;
  if ((_DWORD)v24)
  {
    if (v24 <= 3)
      v29 = v24;
    else
      v29 = 4;
    __asm { BR              X11 }
  }
  return v15 + v28 + 1;
}

void storeEnumTagSinglePayload for TransferableProvider(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;

  v6 = 0u;
  v7 = *(_QWORD *)(a4[2] - 8);
  v8 = *(_QWORD *)(a4[3] - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a4[4] - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = v12 - 1;
  if (!v12)
    v13 = 0;
  if (v10 <= v13)
    v14 = v13;
  else
    v14 = v10;
  if (v14 <= 0x7FFFFFFE)
    v15 = 2147483646;
  else
    v15 = v14;
  if ((v15 - 1) <= *(_DWORD *)(v7 + 84))
    v16 = *(_DWORD *)(v7 + 84);
  else
    v16 = v15 - 1;
  v17 = *(_QWORD *)(v8 + 64);
  if (!v9)
    ++v17;
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = v18 | v19 | 7;
  v22 = (v17 + v19 + ((v18 + 64) & ~v18)) & ~v19;
  v23 = *(_QWORD *)(v11 + 64);
  if (!v12)
    ++v23;
  v24 = v23 + v22;
  v21 = v20 + *(_QWORD *)(v7 + 64);
  v25 = v24 + (v21 & ~v20);
  v26 = a3 >= v16;
  v27 = a3 - v16;
  if (v27 != 0 && v26)
  {
    if (v25 > 3)
    {
      v6 = 1u;
      if (v16 < a2)
        goto LABEL_28;
      goto LABEL_23;
    }
    v28 = ((v27 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
    if (HIWORD(v28))
    {
      v6 = 4u;
      if (v16 < a2)
      {
LABEL_28:
        v29 = ~v16 + a2;
        if (v25 < 4)
        {
          if ((_DWORD)v25)
          {
            v30 = v29 & ~(-1 << (8 * v25));
            bzero(a1, v25);
            if ((_DWORD)v25 == 3)
            {
              *a1 = v30;
              *((_BYTE *)a1 + 2) = BYTE2(v30);
            }
            else if ((_DWORD)v25 == 2)
            {
              *a1 = v30;
            }
            else
            {
              *(_BYTE *)a1 = v30;
            }
          }
        }
        else
        {
          bzero(a1, v24 + (v21 & ~v20));
          *(_DWORD *)a1 = v29;
        }
        __asm { BR              X10 }
      }
LABEL_23:
      __asm { BR              X26 }
    }
    v6 = v28 > 1;
    if (v28 >= 0x100)
      v6 = 2;
  }
  if (v16 < a2)
    goto LABEL_28;
  goto LABEL_23;
}

void sub_18785CAC4()
{
  type metadata accessor for TransferableProvider();
}

void sub_18785CB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1 + ((v3 + 64) & ~v3), v2);
  type metadata accessor for SharePreview();
}

uint64_t sub_18785CB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v3, 1, a1))
  {
    if (*(_QWORD *)(v3 + 24))
      __swift_destroy_boxed_opaque_existential_1(v3);
    if (*(_QWORD *)(v3 + 56))
    {
      outlined consume of Text.Storage(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));
      swift_bridgeObjectRelease();
    }
    v5 = v3 + *(int *)(a1 + 56);
    v6 = *(_QWORD *)(v1 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
    v7 = v3 + *(int *)(a1 + 60);
    v8 = *(_QWORD *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v2);
  }
  return swift_deallocObject();
}

void partial apply for implicit closure #1 in TransferableProvider.makeContent()()
{
  type metadata accessor for TransferableProvider();
}

uint64_t sub_18785CC78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v2 + ((v3 + 64) & ~v3));
}

void partial apply for closure #1 in TransferableProvider.makeContent()()
{
  closure #1 in TransferableProvider.makeContent()();
}

void type metadata accessor for AnySharePreview?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AnySharePreview?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?);
  }
}

void static DefaultTabViewStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18785CDA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for ResolvedTabView(255, v1, v0, v2);
  type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>(255, v3, v4, v5);
  type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for DefaultTabViewStyle.Body(0, v1, v0, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultTabViewStyle.Body<A>, v7);
  _GraphValue.init<A>(_:)();
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _TabViewStyleWriter<SystemTabViewStyle>)
  {
    v4 = type metadata accessor for _TabViewStyleWriter(0, (uint64_t)&type metadata for SystemTabViewStyle, (uint64_t)&protocol witness table for SystemTabViewStyle, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _TabViewStyleWriter<SystemTabViewStyle>);
  }
}

uint64_t type metadata accessor for DefaultTabViewStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultTabViewStyle.Body);
}

void static DefaultTabViewStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18785CFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for ResolvedTabView(255, v1, v0, v2);
  type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>(255, v3, v4, v5);
  type metadata accessor for ModifiedContent();
  v7 = type metadata accessor for DefaultTabViewStyle.Body(0, v1, v0, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for DefaultTabViewStyle.Body<A>, v7);
  _GraphValue.init<A>(_:)();
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

void DefaultTabViewStyle.Body.base.getter()
{
  type metadata accessor for _TabViewValue();
}

uint64_t sub_18785D0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void DefaultTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for TabViewStyleConfiguration(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _TabViewValue();
}

void sub_18785D1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for ResolvedTabView(0, v3, v2, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  DefaultTabViewStyle.Body.base.getter();
}

uint64_t sub_18785D230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v4, v5, v3);
  v10 = ResolvedTabView.init(configuration:)(v4, v2, v1, v9, v7);
  View.tabViewStyle<A>(_:)(v10, v6, (uint64_t)&type metadata for SystemTabViewStyle, (uint64_t)&protocol witness table for ResolvedTabView<A>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v6);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for ResolvedTabView(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>(255, v4, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

void protocol witness for Rule.value.getter in conformance DefaultTabViewStyle.Body<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;

  DefaultTabViewStyle.Body.value.getter(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

ValueMetadata *type metadata accessor for DefaultTabViewStyle()
{
  return &type metadata for DefaultTabViewStyle;
}

void base witness table accessor for _AttributeBody in DefaultTabViewStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t key path getter for EnvironmentValues.textEditorStyle : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.textEditorStyle.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.textEditorStyle : EnvironmentValues()
{
  return EnvironmentValues.textEditorStyle.setter();
}

uint64_t PlainTextEditorStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;

  v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for TextEditorStyleConfiguration);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v12, type metadata accessor for UIKitTextEditor);
  v14 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v14 = KeyPath;
  v14[8] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for UIKitTextEditor);
  v15 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  v17 = (uint64_t *)(a2 + *(int *)(v16 + 36));
  *v17 = v15;
  v17[1] = (uint64_t)closure #1 in PlainTextEditorStyle.makeBody(configuration:);
  v17[2] = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

uint64_t sub_18785D4F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.textEditorStyle.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18785D534()
{
  return EnvironmentValues.textEditorStyle.setter();
}

uint64_t closure #1 in PlainTextEditorStyle.makeBody(configuration:)(uint64_t result)
{
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 2;
  return result;
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in PlainTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance PlainTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;

  v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for TextEditorStyleConfiguration);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v12, type metadata accessor for UIKitTextEditor);
  v14 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v14 = KeyPath;
  v14[8] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for UIKitTextEditor);
  v15 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  v17 = (uint64_t *)(a2 + *(int *)(v16 + 36));
  *v17 = v15;
  v17[1] = (uint64_t)closure #1 in PlainTextEditorStyle.makeBody(configuration:);
  v17[2] = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

ValueMetadata *type metadata accessor for PlainTextEditorStyle()
{
  return &type metadata for PlainTextEditorStyle;
}

uint64_t TimelineView.Context.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[15];
  char v20;

  v10 = type metadata accessor for Date();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, double))(v15 + 16))(v14, a1, v12);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  v17 = *(int *)(v16 + 48);
  v20 = *(_BYTE *)(a1 + *(int *)(v16 + 44));
  outlined init with copy of TimelineInvalidationAction(a1 + v17, (uint64_t)v19);
  outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context(a1);
  return TimelineView.Context.init(date:cadence:invalidationAction:)((uint64_t)v14, &v20, (uint64_t)v19, a2, a3, a4, a5);
}

uint64_t TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v16 = *(_QWORD *)(a4 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a4;
  v21[3] = a5;
  v21[4] = a6;
  v21[5] = a7;
  v21[6] = a2;
  v21[7] = a3;
  TimelineView<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TimelineView<>.init(_:content:), (uint64_t)v21, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

{
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v16 = *(_QWORD *)(a4 - 8);
  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a4;
  v21[3] = a5;
  v21[4] = a6;
  v21[5] = a7;
  v21[6] = a2;
  v21[7] = a3;
  TimelineView<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TimelineView<>.init(_:content:), (uint64_t)v21, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
}

{
  uint64_t (*v15)(uint64_t);
  uint64_t result;
  uint64_t (**v17)(uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a8, a1, a4);
  v15 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((_QWORD *)v15 + 2) = a4;
  *((_QWORD *)v15 + 3) = a5;
  *((_QWORD *)v15 + 4) = a6;
  *((_QWORD *)v15 + 5) = a7;
  *((_QWORD *)v15 + 6) = a2;
  *((_QWORD *)v15 + 7) = a3;
  result = type metadata accessor for TimelineView(0, a4, a5, a6);
  v17 = (uint64_t (**)(uint64_t))(a8 + *(int *)(result + 44));
  *v17 = partial apply for closure #1 in TimelineView<>.init(_:content:);
  v17[1] = v15;
  return result;
}

uint64_t closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  void (*v26)(char *, uint64_t);
  _QWORD v27[2];
  void (*v28)(char *);
  uint64_t v29;

  v27[1] = a3;
  v28 = a2;
  v29 = a8;
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  MEMORY[0x1E0C80A78](v13, v15);
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v27 - v23;
  result = type metadata accessor for TimelineView.Context(0, a4, a5, a6);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v14)
  {
    outlined init with copy of TimelineView<PeriodicTimelineSchedule, Never>.Context(a1, (uint64_t)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    v28((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context((uint64_t)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    static ViewBuilder.buildExpression<A>(_:)(v20, a5, a7);
    v26 = *(void (**)(char *, uint64_t))(v16 + 8);
    v26(v20, a5);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, a5, v29);
    return ((uint64_t (*)(char *, uint64_t))v26)(v24, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  void (*v26)(char *, uint64_t);
  _QWORD v27[2];
  void (*v28)(char *);
  uint64_t v29;

  v27[1] = a3;
  v28 = a2;
  v29 = a8;
  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context(0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  MEMORY[0x1E0C80A78](v13, v15);
  v16 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v27 - v23;
  result = type metadata accessor for TimelineView.Context(0, a4, a5, a6);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v14)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    v28((char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    static ViewBuilder.buildExpression<A>(_:)(v20, a5, a7);
    v26 = *(void (**)(char *, uint64_t))(v16 + 8);
    v26(v20, a5);
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)v24, a5, v29);
    return ((uint64_t (*)(char *, uint64_t))v26)(v24, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_18785DA20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TimelineView<PeriodicTimelineSchedule, Never>.Context(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for EnvironmentValues.locale : EnvironmentValues()
{
  return EnvironmentValues.locale.getter();
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38], (uint64_t (*)(char *))MEMORY[0x1E0CE3C60]);
}

uint64_t key path getter for EnvironmentValues.calendar : EnvironmentValues()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t key path setter for EnvironmentValues.calendar : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB11F0], (uint64_t (*)(char *))MEMORY[0x1E0CE3C70]);
}

uint64_t key path getter for EnvironmentValues.timeZone : EnvironmentValues()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t key path setter for EnvironmentValues.timeZone : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1470], (uint64_t (*)(char *))MEMORY[0x1E0CE3C90]);
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = a5(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t))(v12 + 16))((char *)&v14 - v10, a1);
  return a6(v11);
}

uint64_t WheelDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 1;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  swift_storeEnumTagMultiPayload();
  v5 = (uint64_t *)(a2 + v3[7]);
  *v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[8]);
  *v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with copy of DatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_18785DD64()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_18785DD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38], (uint64_t (*)(char *))MEMORY[0x1E0CE3C60]);
}

uint64_t sub_18785DDB8()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t sub_18785DDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB11F0], (uint64_t (*)(char *))MEMORY[0x1E0CE3C70]);
}

uint64_t sub_18785DE0C()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t sub_18785DE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB1470], (uint64_t (*)(char *))MEMORY[0x1E0CE3C90]);
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in WheelDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance WheelDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;

  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(_QWORD *)(a2 + v3[5]) = 1;
  v4 = (uint64_t *)(a2 + v3[6]);
  *v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  swift_storeEnumTagMultiPayload();
  v5 = (uint64_t *)(a2 + v3[7]);
  *v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t *)(a2 + v3[8]);
  *v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for WheelDatePickerStyle()
{
  return &type metadata for WheelDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type UIKitDatePicker and conformance UIKitDatePicker()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker;
  if (!lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker)
  {
    v1 = type metadata accessor for UIKitDatePicker(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitDatePicker, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:placement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v7;
  unint64_t v8;
  _QWORD v10[2];
  char v11;

  v7 = *a3;
  v10[0] = a1;
  v10[1] = a2;
  v11 = v7;
  v8 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5710], (uint64_t)v10, 1, a4, MEMORY[0x1E0CE5710], MEMORY[0x1E0CE5700], v8, a5);
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  _QWORD v8[2];
  char v9;

  v8[0] = a1;
  v8[1] = a2;
  v9 = 0;
  v6 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5710], (uint64_t)v8, 1, a3, MEMORY[0x1E0CE5710], MEMORY[0x1E0CE5700], v6, a4);
}

uint64_t View.accessibilityIdentifier(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];
  char v7;

  v6[0] = a1;
  v6[1] = a2;
  v7 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E0CE5710], (uint64_t)v6, a3, a4, MEMORY[0x1E0CE5710], a5);
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v8;
  _QWORD v10[2];
  char v11;

  v10[0] = a1;
  v10[1] = a2;
  v11 = 0;
  v8 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E0CE5710], (uint64_t)v10, a3, a4, MEMORY[0x1E0CE5710], MEMORY[0x1E0CE5700], v8, a5);
}

unint64_t lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityIdentifierStorage?();
    v2 = MEMORY[0x1E0CE64A8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for AccessibilityIdentifierStorage?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for AccessibilityIdentifierStorage?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
  }
}

uint64_t TabContent.accessibilityIdentifier(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v10;
  _QWORD v12[2];
  char v13;

  v12[0] = a1;
  v12[1] = a2;
  v13 = 0;
  v10 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)v12, a3, a4, MEMORY[0x1E0CE5710], a5, MEMORY[0x1E0CE5700], v10, a6);
}

uint64_t Scene.accessibilityIdentifier(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD v9[2];
  char v10;
  char v11;

  v9[0] = a1;
  v9[1] = a2;
  v10 = 0;
  v11 = a3;
  type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(0, &lazy cache variable for type metadata for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for AccessibilityScenePropertiesModifier);
  return Scene.modifier<A>(_:)(v9, a4, v7, a5);
}

uint64_t sub_18785E2E4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(255, &lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.IdentifierKey>, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for AccessibilityDetachedPropertyModifier);
  v5 = type metadata accessor for ModifiedTabContent(255, v1, v3, v4);
  v7[0] = v2;
  v7[1] = &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
    v7 = a3(a1, MEMORY[0x1E0CE5710], MEMORY[0x1E0CE5700], v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_18785E3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(255, &lazy cache variable for type metadata for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))type metadata accessor for AccessibilityScenePropertiesModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for AccessibilityScenePropertiesModifier<A>;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedContent<A, B>, v2, v4);
}

void type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowSpacing>);
  }
}

uint64_t key path setter for EnvironmentValues.listRowSpacing : EnvironmentValues()
{
  return EnvironmentValues.listRowSpacing.setter();
}

uint64_t EnvironmentValues.listRowSpacing.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.listRowSpacing(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t sub_18785E604@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.listRowSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18785E634()
{
  return EnvironmentValues.listRowSpacing.setter();
}

void (*EnvironmentValues.listRowSpacing.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 24);
  *v3 = v3[2];
  *((_BYTE *)v3 + 8) = v4;
  return EnvironmentValues.listRowSpacing.modify;
}

void EnvironmentValues.listRowSpacing.modify(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = (*a1)[4];
  v3 = *((_BYTE *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

uint64_t sub_18785E884@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.listRowSpacing.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_18785E8C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>)
  {
    type metadata accessor for CGFloat?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>);
  }
}

ValueMetadata *type metadata accessor for ListRowSpacing()
{
  return &type metadata for ListRowSpacing;
}

void View.onNavigationIconChange(perform:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationTitleStorage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = a1[3];
  v3 = a2[3];
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 | v3) == 0;
  v6 = a2[1];
  v5 = a2[2];
  v7 = *a2;
  v9 = a1[1];
  v8 = a1[2];
  v10 = *a1;
  outlined copy of Text?(*a2, v6, v5, v3);
  outlined copy of Text?(v10, v9, v8, v2);
  v11 = static Text.== infix(_:_:)();
  outlined consume of Text?(v7, v6, v5, v3);
  outlined consume of Text?(v10, v9, v8, v2);
  return v11 & 1;
}

void View.onNavigationSubtitleChange(perform:)()
{
  View.onNavigationIconChange(perform:)();
}

void View.onNavigationTitleChange(perform:)()
{
  View.onNavigationIconChange(perform:)();
}

uint64_t destroy for CheckmarkToggleStyle(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  outlined consume of Environment<EdgeInsets>.Content(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 88), *(_BYTE *)(a1 + 96));
}

uint64_t initializeWithCopy for CheckmarkToggleStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<EdgeInsets>.Content(v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 72);
  LOBYTE(v9) = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v13, v9);
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = v9;
  v14 = *(_QWORD *)(a2 + 88);
  LOBYTE(v9) = *(_BYTE *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v14, v9);
  *(_QWORD *)(a1 + 88) = v14;
  *(_BYTE *)(a1 + 96) = v9;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithCopy for CheckmarkToggleStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_BYTE *)(a2 + 64);
  outlined copy of Environment<EdgeInsets>.Content(v12, v13, v14, v15, v16);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_BYTE *)(a1 + 64) = v16;
  outlined consume of Environment<EdgeInsets>.Content(v17, v18, v19, v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  LOBYTE(v13) = *(_BYTE *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v22, v13);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v22;
  *(_BYTE *)(a1 + 80) = v13;
  outlined consume of Environment<Bool>.Content(v23, v24);
  v25 = *(_QWORD *)(a2 + 88);
  LOBYTE(v13) = *(_BYTE *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v25, v13);
  v26 = *(_QWORD *)(a1 + 88);
  v27 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v25;
  *(_BYTE *)(a1 + 96) = v13;
  outlined consume of Environment<Bool>.Content(v26, v27);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for CheckmarkToggleStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *((_BYTE *)a2 + 64);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_BYTE *)(a1 + 64);
  v17 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 64) = v11;
  outlined consume of Environment<EdgeInsets>.Content(v12, v13, v14, v15, v16);
  v18 = *((_BYTE *)a2 + 80);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  v21 = *((_BYTE *)a2 + 96);
  v22 = *(_QWORD *)(a1 + 88);
  v23 = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_BYTE *)(a1 + 96) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CheckmarkToggleStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CheckmarkToggleStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 113) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CheckmarkToggleStyle()
{
  return &type metadata for CheckmarkToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in CheckmarkToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CheckmarkToggleStyle.adjustedCheckmarkWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v4);
  outlined consume of Environment<Bool>.Content(v1, v2);
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE18B8]);
  return ScaledMetric.wrappedValue.getter();
}

uint64_t CheckmarkToggleStyle.makeBody(configuration:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _WORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[7];
  char v64;
  _OWORD v65[13];
  char v66;
  _BYTE v67[216];
  char v68;
  __int128 v69;
  _OWORD v70[14];
  __int128 v71;

  v40 = a2;
  v4 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (_WORD *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = a1[3];
  v59 = a1[2];
  v60 = v8;
  v9 = a1[5];
  v61 = a1[4];
  v62 = v9;
  v10 = a1[1];
  v57 = *a1;
  v58 = v10;
  v11 = *(_OWORD *)(v2 + 80);
  v63[4] = *(_OWORD *)(v2 + 64);
  v63[5] = v11;
  v63[6] = *(_OWORD *)(v2 + 96);
  v64 = *(_BYTE *)(v2 + 112);
  v12 = *(_OWORD *)(v2 + 16);
  v63[0] = *(_OWORD *)v2;
  v63[1] = v12;
  v13 = *(_OWORD *)(v2 + 48);
  v63[2] = *(_OWORD *)(v2 + 32);
  v63[3] = v13;
  v14 = (_OWORD *)swift_allocObject();
  v15 = a1[3];
  v14[3] = a1[2];
  v14[4] = v15;
  v16 = a1[5];
  v14[5] = a1[4];
  v14[6] = v16;
  v17 = a1[1];
  v14[1] = *a1;
  v14[2] = v17;
  *v7 = 256;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v19 = (_QWORD *)((char *)v7 + *(int *)(v18 + 36));
  *v19 = partial apply for closure #1 in CheckmarkToggleStyle.menuContent(configuration:);
  v19[1] = v14;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v20 = (_WORD *)((char *)v7 + *(int *)(v4 + 52));
  v21 = (_OWORD *)swift_allocObject();
  v22 = v60;
  v21[3] = v59;
  v21[4] = v22;
  v23 = v62;
  v21[5] = v61;
  v21[6] = v23;
  v24 = v58;
  v21[1] = v57;
  v21[2] = v24;
  *v20 = 256;
  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>(0);
  v26 = v25;
  v27 = (_QWORD *)((char *)v20 + *(int *)(v25 + 36));
  *v27 = partial apply for closure #1 in CheckmarkToggleStyle.defaultContent(configuration:);
  v27[1] = v21;
  swift_storeEnumTagMultiPayload();
  v28 = (_OWORD *)((char *)v20 + *(int *)(v26 + 40));
  outlined retain of ToggleStyleConfiguration(&v57);
  outlined retain of ToggleStyleConfiguration(&v57);
  swift_retain();
  v29 = static VerticalAlignment.center.getter();
  closure #1 in closure #2 in CheckmarkToggleStyle.defaultContent(configuration:)(&v57, (uint64_t)v63, (uint64_t)v65);
  *(_OWORD *)&v67[167] = v65[10];
  *(_OWORD *)&v67[183] = v65[11];
  *(_OWORD *)&v67[199] = v65[12];
  *(_OWORD *)&v67[103] = v65[6];
  *(_OWORD *)&v67[119] = v65[7];
  *(_OWORD *)&v67[135] = v65[8];
  *(_OWORD *)&v67[151] = v65[9];
  *(_OWORD *)&v67[39] = v65[2];
  *(_OWORD *)&v67[55] = v65[3];
  *(_OWORD *)&v67[71] = v65[4];
  *(_OWORD *)&v67[87] = v65[5];
  *(_OWORD *)&v67[7] = v65[0];
  *(_OWORD *)&v67[23] = v65[1];
  *(_OWORD *)((char *)&v70[10] + 1) = *(_OWORD *)&v67[160];
  *(_OWORD *)((char *)&v70[11] + 1) = *(_OWORD *)&v67[176];
  *(_OWORD *)((char *)&v70[12] + 1) = *(_OWORD *)&v67[192];
  *(_OWORD *)((char *)&v70[6] + 1) = *(_OWORD *)&v67[96];
  *(_OWORD *)((char *)&v70[7] + 1) = *(_OWORD *)&v67[112];
  *(_OWORD *)((char *)&v70[8] + 1) = *(_OWORD *)&v67[128];
  *(_OWORD *)((char *)&v70[9] + 1) = *(_OWORD *)&v67[144];
  *(_OWORD *)((char *)&v70[2] + 1) = *(_OWORD *)&v67[32];
  *(_OWORD *)((char *)&v70[3] + 1) = *(_OWORD *)&v67[48];
  *(_OWORD *)((char *)&v70[4] + 1) = *(_OWORD *)&v67[64];
  *(_OWORD *)((char *)&v70[5] + 1) = *(_OWORD *)&v67[80];
  *(_OWORD *)((char *)v70 + 1) = *(_OWORD *)v67;
  v68 = 1;
  v67[215] = v66;
  v69 = (unint64_t)v29;
  LOBYTE(v70[0]) = 1;
  *(_QWORD *)((char *)&v70[13] + 1) = *(_QWORD *)&v67[208];
  *(_OWORD *)((char *)&v70[1] + 1) = *(_OWORD *)&v67[16];
  static Color.primary.getter();
  type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, MEMORY[0x1E0CE73D0]);
  View.defaultForegroundColor(_:)();
  swift_release();
  outlined release of TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>(v65);
  swift_release();
  v70[11] = v53;
  v70[12] = v54;
  v70[13] = v55;
  v71 = v56;
  v70[7] = v49;
  v70[8] = v50;
  v70[9] = v51;
  v70[10] = v52;
  v70[3] = v45;
  v70[4] = v46;
  v70[5] = v47;
  v70[6] = v48;
  v69 = v41;
  v70[0] = v42;
  v70[1] = v43;
  v70[2] = v44;
  v30 = v54;
  v28[12] = v53;
  v28[13] = v30;
  v31 = v71;
  v28[14] = v70[13];
  v28[15] = v31;
  v32 = v70[8];
  v28[8] = v70[7];
  v28[9] = v32;
  v33 = v70[10];
  v28[10] = v70[9];
  v28[11] = v33;
  v34 = v70[4];
  v28[4] = v70[3];
  v28[5] = v34;
  v35 = v70[6];
  v28[6] = v70[5];
  v28[7] = v35;
  v36 = v70[0];
  *v28 = v69;
  v28[1] = v36;
  v37 = v70[2];
  v28[2] = v70[1];
  v28[3] = v37;
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>((uint64_t)v7, v40);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>((uint64_t)v7);
}

uint64_t closure #1 in closure #2 in CheckmarkToggleStyle.defaultContent(configuration:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t KeyPath;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[25];
  char v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  char v70;
  double v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  char v81;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if ((v8 & 1) != 0)
    v47 = 0;
  else
    v47 = static Color.tertiary.getter();
  KeyPath = swift_getKeyPath();
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E0CE71D8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE3200]);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0x72616D6B63656863;
  *(_QWORD *)(v9 + 24) = 0xE90000000000006BLL;
  *(_DWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 36) = 1;
  *(_OWORD *)(v9 + 40) = xmmword_187BF9F90;
  *(_OWORD *)(v9 + 56) = xmmword_187C66080;
  *(_OWORD *)(v9 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v9 + 88) = 0;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  outlined retain of CheckmarkToggleStyle(a2);
  outlined copy of Environment<Bool>.Content(v10, v11);
  specialized Environment.wrappedValue.getter(v10, v11, &v59);
  outlined consume of Environment<Bool>.Content(v10, v11);
  v12 = v59;
  outlined release of CheckmarkToggleStyle(a2);
  v45 = v12 < 9;
  v44 = swift_getKeyPath();
  static Font.PrivateTextStyle.emphasizedBody.getter();
  v13 = (void *)v59;
  *(_QWORD *)&v48 = v59;
  LOBYTE(v74) = 4;
  v43 = static Font.system(_:design:weight:)();

  v42 = swift_getKeyPath();
  v41 = static Color.accentColor.getter();
  v40 = swift_getKeyPath();
  v14 = *(_OWORD *)(a2 + 80);
  v63 = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 96);
  v64 = v14;
  v65 = v15;
  LOBYTE(v66) = *(_BYTE *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 16);
  v59 = *(_OWORD *)a2;
  v60 = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v61 = *(_OWORD *)(a2 + 32);
  v62 = v17;
  CheckmarkToggleStyle.adjustedCheckmarkWidth.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v18 = v74;
  v19 = v75;
  v20 = v76;
  v21 = v77;
  v22 = v79;
  v39 = v78;
  v80 = *a1;
  v81 = *((_BYTE *)a1 + 16);
  v59 = *a1;
  LOBYTE(v60) = *((_BYTE *)a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v24 = v23;
  MEMORY[0x18D75B9C8](&v48);
  v25 = v48;
  _SymbolEffect.HiddenConfiguration.init()();
  LODWORD(v59) = v48;
  WORD2(v59) = WORD2(v48);
  _SymbolEffect.HiddenConfiguration.flags.setter();
  v26 = 0x100000000;
  if (!BYTE4(v59))
    v26 = 0;
  v27 = 0x10000000000;
  if (v25)
    v27 = 0;
  v28 = v27 | v59 | v26;
  v59 = v80;
  LOBYTE(v60) = v81;
  MEMORY[0x18D75B9C8](&v48, v24);
  if ((_BYTE)v48)
    v29 = 1.0;
  else
    v29 = 0.0;
  v30 = swift_getKeyPath();
  *(_QWORD *)&v48 = v9;
  *((_QWORD *)&v48 + 1) = v44;
  LOBYTE(v49) = v45;
  *((_QWORD *)&v49 + 1) = v42;
  *(_QWORD *)&v50 = v43;
  *((_QWORD *)&v50 + 1) = v40;
  *(_QWORD *)&v51 = v41;
  *((_QWORD *)&v51 + 1) = v18;
  LOBYTE(v52) = v19;
  *((_QWORD *)&v52 + 1) = v20;
  LOBYTE(v53) = v21;
  *((_QWORD *)&v53 + 1) = v39;
  *(_QWORD *)&v54 = v22;
  v55 = 0uLL;
  *((_QWORD *)&v54 + 1) = v28;
  v56 = xmmword_187C0CE10;
  v57[4] = 1;
  *(_DWORD *)v57 = 0;
  *(double *)&v57[8] = v29;
  *(_QWORD *)&v57[16] = v30;
  v57[24] = 0;
  v58 = 0;
  v31 = v52;
  v32 = v53;
  *(_OWORD *)(a3 + 136) = v54;
  *(_OWORD *)(a3 + 120) = v32;
  *(_OWORD *)(a3 + 104) = v31;
  v33 = v50;
  *(_OWORD *)(a3 + 88) = v51;
  *(_OWORD *)(a3 + 193) = *(_OWORD *)&v57[9];
  v34 = v56;
  *(_OWORD *)(a3 + 184) = *(_OWORD *)v57;
  *(_OWORD *)(a3 + 168) = v34;
  *(_OWORD *)(a3 + 152) = 0uLL;
  v35 = v48;
  v36 = v49;
  *(_OWORD *)(a3 + 72) = v33;
  *(_OWORD *)(a3 + 56) = v36;
  *(_OWORD *)(a3 + 40) = v35;
  v37 = v58;
  *(_QWORD *)a3 = KeyPath;
  *(_QWORD *)(a3 + 8) = v47;
  *(_QWORD *)(a3 + 16) = 0x4030000000000000;
  *(_BYTE *)(a3 + 24) = v37;
  *(_QWORD *)(a3 + 32) = 0xBFF0000000000000;
  *(_QWORD *)&v59 = v9;
  *((_QWORD *)&v59 + 1) = v44;
  LOBYTE(v60) = v45;
  *((_QWORD *)&v60 + 1) = v42;
  *(_QWORD *)&v61 = v43;
  *((_QWORD *)&v61 + 1) = v40;
  *(_QWORD *)&v62 = v41;
  *((_QWORD *)&v62 + 1) = v18;
  LOBYTE(v63) = v19;
  *((_QWORD *)&v63 + 1) = v20;
  LOBYTE(v64) = v21;
  *((_QWORD *)&v64 + 1) = v39;
  *(_QWORD *)&v65 = v22;
  v66 = 0;
  v67 = 0;
  *((_QWORD *)&v65 + 1) = v28;
  v68 = xmmword_187C0CE10;
  v70 = 1;
  v69 = 0;
  v71 = v29;
  v72 = v30;
  v73 = 0;
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(&v48);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(&v59);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE3238], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>(255);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, &lazy cache variable for type metadata for Color?, MEMORY[0x1E0CE7170]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>);
  }
}

