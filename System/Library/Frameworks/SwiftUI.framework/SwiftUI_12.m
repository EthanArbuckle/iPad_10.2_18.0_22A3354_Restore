void (*sub_18740BDE8(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v17[96];

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = &v17[-v11];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v9 + 16))(&v17[-v11], v6, a1, v10);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = (char *)swift_allocObject();
  *((_QWORD *)v14 + 2) = v5;
  *((_QWORD *)v14 + 3) = v4;
  *((_QWORD *)v14 + 4) = v3;
  *((_QWORD *)v14 + 5) = v2;
  v15 = *(_QWORD *)(v7 - 136);
  *((_QWORD *)v14 + 6) = *(_QWORD *)(v7 - 144);
  *((_QWORD *)v14 + 7) = v15;
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(&v14[v13], v12, a1);
  return partial apply for implicit closure #2 in implicit closure #1 in PlatformItemLabelView.body.getter;
}

uint64_t static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v38;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  int v61;

  v32 = *a1;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 6);
  v11 = *((_DWORD *)a2 + 7);
  v13 = *((_DWORD *)a2 + 8);
  v12 = *((_DWORD *)a2 + 9);
  v14 = a2[5];
  v15 = a2[6];
  v17 = *((_DWORD *)a2 + 14);
  v16 = *((_DWORD *)a2 + 15);
  v18 = *((_DWORD *)a2 + 16);
  v19 = *((_DWORD *)a2 + 17);
  v20 = *((_DWORD *)a2 + 18);
  v21 = *((_DWORD *)a2 + 19);
  v22 = *((_DWORD *)a2 + 20);
  v53 = *a2;
  v54 = v8;
  v55 = v9;
  *(_QWORD *)&v56 = __PAIR64__(v11, v10);
  *((_QWORD *)&v56 + 1) = __PAIR64__(v12, v13);
  v57 = v14;
  v58 = v15;
  *(_QWORD *)&v59 = __PAIR64__(v16, v17);
  *((_QWORD *)&v59 + 1) = __PAIR64__(v19, v18);
  v60 = __PAIR64__(v21, v20);
  v61 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableIndex(_:)(0);
  v44 = v53;
  LODWORD(v45) = v54;
  v47 = v56;
  v46 = v9;
  v48 = v14;
  v49 = v15;
  v50 = v59;
  v23 = v17;
  v51 = v60;
  v52 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = swift_bridgeObjectRetain();
  a3(&v41, v24, &v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v25 = v41;
  v40 = v42;
  v38 = v43;
  v44 = v15;
  LODWORD(v45) = v23;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v31 = v25;
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v26 = v44;
    v27 = (*(uint64_t (**)(uint64_t))(a6 + 8))(a4);
    if ((v27 & ~v26) == 0)
    {
      MEMORY[0x1E0C80A78](v27, v28);
      LODWORD(v41) = v32;
      v44 = a4;
      v45 = a5;
      v46 = a6;
      *(_QWORD *)&v47 = a7;
      type metadata accessor for PlatformItemListGeneratingViewModifier();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v30 = a8;
    v25 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
    v30 = a8;
  }
  *(_QWORD *)v30 = v25;
  *(_DWORD *)(v30 + 8) = v40;
  *(_DWORD *)(v30 + 12) = v38;
  return result;
}

void closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for PlatformItemListGeneratingViewModifier();
}

uint64_t sub_18740C4E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemListGeneratingViewModifier<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  return static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemListGeneratingViewModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListGeneratingViewModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t PlatformItemListTransformModifier.Transform.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *);
  uint64_t v10;

  v5 = MergePlatformItemsView.Transform.list.getter(a1);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v5)
    v7 = v5;
  v10 = v7;
  type metadata accessor for PlatformItemListTransformModifier(0, a2, a3, v6);
  v8 = *(void (**)(uint64_t *))AGGraphGetValue();
  swift_retain();
  v8(&v10);
  swift_release();
  return v10;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTransformModifier<A>.Transform@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = PlatformItemListTransformModifier.Transform.value.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemListTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTransformModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in PlatformItemListReader.init(flags:content:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  void (*v16)(double);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v19 - v14;
  v16(v13);
  static ViewBuilder.buildExpression<A>(_:)(v10, a3, a4);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a3);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, a3, a5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, a3);
}

void static PlatformItemListReader._makeView(view:inputs:)()
{
  type metadata accessor for PlatformItemListReader();
}

void sub_18740C89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *(_QWORD *)(v9 + 80) = a1;
  v19 = type metadata accessor for _GraphValue();
  *(_QWORD *)(v9 + 88) = v17;
  *(_QWORD *)(v9 + 96) = v10;
  v20 = type metadata accessor for ZStack();
  *(_QWORD *)(v9 + 64) = v19;
  _GraphValue.subscript.getter();
  *(_QWORD *)(v9 + 48) = v20;
  type metadata accessor for _GraphValue();
  *(_DWORD *)(v9 + 56) = _GraphValue.value.getter();
  v21 = *(_QWORD *)(v9 + 168);
  *(_QWORD *)(v9 + 336) = v21;
  LODWORD(v20) = *(_DWORD *)(v9 + 164);
  *(_DWORD *)(v9 + 344) = v20;
  *(_QWORD *)(v9 + 352) = v11;
  *(_DWORD *)(v9 + 360) = v12;
  *(_DWORD *)(v9 + 364) = v13;
  *(_DWORD *)(v9 + 368) = v14;
  *(_DWORD *)(v9 + 372) = v15;
  v22 = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v9 + 376) = v16;
  *(_QWORD *)(v9 + 384) = v22;
  *(_DWORD *)(v9 + 392) = *(_DWORD *)(v9 + 220);
  *(_DWORD *)(v9 + 396) = *(_DWORD *)(v9 + 216);
  *(_DWORD *)(v9 + 400) = *(_DWORD *)(v9 + 212);
  *(_DWORD *)(v9 + 404) = *(_DWORD *)(v9 + 208);
  *(_DWORD *)(v9 + 408) = *(_DWORD *)(v9 + 204);
  *(_DWORD *)(v9 + 412) = *(_DWORD *)(v9 + 200);
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 196);
  _ViewInputs.withoutGeometryDependencies.getter();
  *(_QWORD *)(v9 + 336) = v21;
  *(_DWORD *)(v9 + 344) = v20;
  *(_QWORD *)(v9 + 128) = v11;
  *(_QWORD *)(v9 + 352) = v11;
  *(_DWORD *)(v9 + 120) = v13;
  *(_DWORD *)(v9 + 124) = v12;
  *(_DWORD *)(v9 + 360) = v12;
  *(_DWORD *)(v9 + 364) = v13;
  *(_DWORD *)(v9 + 112) = v15;
  *(_DWORD *)(v9 + 116) = v14;
  *(_DWORD *)(v9 + 368) = v14;
  *(_DWORD *)(v9 + 372) = v15;
  *(_QWORD *)(v9 + 104) = v16;
  v23 = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v9 + 376) = v16;
  *(_QWORD *)(v9 + 384) = v23;
  *(_DWORD *)(v9 + 392) = *(_DWORD *)(v9 + 220);
  *(_DWORD *)(v9 + 396) = *(_DWORD *)(v9 + 216);
  *(_DWORD *)(v9 + 400) = *(_DWORD *)(v9 + 212);
  *(_DWORD *)(v9 + 404) = *(_DWORD *)(v9 + 208);
  *(_DWORD *)(v9 + 408) = *(_DWORD *)(v9 + 204);
  *(_DWORD *)(v9 + 412) = *(_DWORD *)(v9 + 200);
  *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 196);
  PreferenceKeys.init()();
  *(_QWORD *)(v9 + 264) = *(_QWORD *)(v9 + 240);
  *(_BYTE *)(v9 + 263) = 0;
  _ViewInputs.intern<A>(_:id:)();
  v24 = *(_QWORD *)(v9 + 152);
  swift_bridgeObjectRelease();
  PreferencesInputs.init(hostKeys:)();
  v25 = *(_QWORD *)(v9 + 336);
  v26 = *(_DWORD *)(v9 + 344);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v18 - 136) = v25;
  *(_DWORD *)(v18 - 128) = v26;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 184) + 8))(v24) & 0x10) != 0)
  {
    *(_QWORD *)(v9 + 336) = *(_QWORD *)(v9 + 224);
    *(_DWORD *)(v9 + 344) = *(_DWORD *)(v9 + 220);
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
      lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>((unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<AccessibilityAttachment.Key> and conformance _AnyPreferenceKey<A>, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key);
      PreferenceKeys.add(_:)();
    }
  }
  _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(v24, 0, v24, *(_QWORD *)(v9 + 184));
  *(_BYTE *)(v9 + 336) = 1;
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  v27 = *(_QWORD *)(v9 + 48);
  _GraphValue.init(_:)();
  v28 = *(_QWORD *)(v18 - 184);
  v29 = *(_DWORD *)(v18 - 176);
  v30 = *(_QWORD *)(v18 - 168);
  v32 = *(_DWORD *)(v18 - 160);
  v31 = *(_DWORD *)(v18 - 156);
  v34 = *(_DWORD *)(v18 - 152);
  v33 = *(_DWORD *)(v18 - 148);
  v35 = *(_QWORD *)(v18 - 144);
  v36 = *(_QWORD *)(v18 - 136);
  v37 = *(_DWORD *)(v18 - 128);
  v38 = *(_DWORD *)(v18 - 124);
  v39 = *(_DWORD *)(v18 - 120);
  v40 = *(_DWORD *)(v18 - 116);
  v41 = *(_DWORD *)(v18 - 112);
  v42 = *(_DWORD *)(v18 - 108);
  v43 = *(_DWORD *)(v18 - 104);
  *(_QWORD *)(v9 + 336) = v28;
  *(_DWORD *)(v9 + 344) = v29;
  *(_QWORD *)(v9 + 352) = v30;
  *(_DWORD *)(v9 + 360) = v32;
  *(_DWORD *)(v9 + 364) = v31;
  *(_DWORD *)(v9 + 368) = v34;
  *(_DWORD *)(v9 + 56) = v33;
  *(_DWORD *)(v9 + 372) = v33;
  *(_QWORD *)(v9 + 32) = v36;
  *(_QWORD *)(v9 + 40) = v35;
  *(_QWORD *)(v9 + 376) = v35;
  *(_QWORD *)(v9 + 384) = v36;
  *(_DWORD *)(v9 + 24) = v38;
  *(_DWORD *)(v9 + 28) = v37;
  *(_DWORD *)(v9 + 392) = v37;
  *(_DWORD *)(v9 + 396) = v38;
  *(_DWORD *)(v9 + 16) = v40;
  *(_DWORD *)(v9 + 20) = v39;
  *(_DWORD *)(v9 + 400) = v39;
  *(_DWORD *)(v9 + 404) = v40;
  *(_DWORD *)(v9 + 8) = v42;
  *(_DWORD *)(v9 + 12) = v41;
  *(_DWORD *)(v9 + 408) = v41;
  *(_DWORD *)(v9 + 412) = v42;
  *(_DWORD *)(v9 + 4) = v43;
  *(_DWORD *)(v9 + 416) = v43;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE74D8], v27);
  static View.makeDebuggableView(view:inputs:)();
  v44 = *(_DWORD *)(v9 + 248);
  *(_QWORD *)(v9 + 336) = *(_QWORD *)(v9 + 240);
  *(_DWORD *)(v9 + 344) = v44;
  v45 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v45 & 0x100000000) != 0)
  {
    *(_QWORD *)(v9 + 336) = v28;
    *(_DWORD *)(v9 + 344) = v29;
    *(_QWORD *)(v9 + 352) = v30;
    *(_DWORD *)(v9 + 360) = v32;
    *(_DWORD *)(v9 + 364) = v31;
    *(_DWORD *)(v9 + 368) = v34;
    *(_DWORD *)(v9 + 372) = *(_DWORD *)(v9 + 56);
    v46 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v9 + 376) = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 384) = v46;
    *(_DWORD *)(v9 + 392) = *(_DWORD *)(v9 + 28);
    *(_DWORD *)(v9 + 396) = *(_DWORD *)(v9 + 24);
    *(_DWORD *)(v9 + 400) = *(_DWORD *)(v9 + 20);
    *(_DWORD *)(v9 + 404) = *(_DWORD *)(v9 + 16);
    *(_DWORD *)(v9 + 408) = *(_DWORD *)(v9 + 12);
    *(_DWORD *)(v9 + 412) = *(_DWORD *)(v9 + 8);
    *(_DWORD *)(v9 + 416) = *(_DWORD *)(v9 + 4);
    *(_QWORD *)(v9 + 240) = MEMORY[0x1E0DEE9D8];
    *(_BYTE *)(v9 + 264) = 0;
    v45 = _ViewInputs.intern<A>(_:id:)();
  }
  *(_QWORD *)(v9 + 56) = v45;
  *(_DWORD *)(v9 + 336) = *(_DWORD *)(v9 + 72);
  v47 = _GraphValue.value.getter();
  v48 = v47;
  MEMORY[0x1E0C80A78](v47, v49);
  v50 = *(_QWORD *)(v9 + 144);
  v59[0] = v24;
  v59[1] = v50;
  v52 = *(_QWORD *)(v9 + 88);
  v53 = *(_QWORD *)(v9 + 184);
  v62 = *(_QWORD *)(v9 + 96);
  v51 = v62;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v9 + 72) = &a9;
  *(_DWORD *)(v9 + 336) = v48;
  *(_QWORD *)(v9 + 344) = KeyPath;
  MEMORY[0x1E0C80A78](KeyPath, v55);
  v59[2] = swift_getFunctionTypeMetadata1();
  v60 = type metadata accessor for Focus();
  v61 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v60);
  v56 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9 + 336, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v59, v60, MEMORY[0x1E0DEDCE8], v56, MEMORY[0x1E0DEDD18], v57);
  swift_release();
  swift_release();
  v58 = *(_DWORD *)(v9 + 240);
  *(_DWORD *)(v9 + 240) = *(_QWORD *)(v9 + 56);
  *(_DWORD *)(v9 + 244) = v58;
  *(_QWORD *)(v9 + 336) = *(_QWORD *)(v9 + 152);
  *(_QWORD *)(v9 + 344) = v50;
  *(_QWORD *)(v9 + 352) = v52;
  *(_QWORD *)(v9 + 360) = v53;
  *(_QWORD *)(v9 + 368) = *(_QWORD *)(v9 + 176);
  *(_QWORD *)(v9 + 376) = v51;
  type metadata accessor for PlatformItemListReader.Child();
}

uint64_t sub_18740CE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListReader<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 168);
  *(_DWORD *)(v1 + 344) = *(_DWORD *)(v1 + 164);
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 128);
  *(_DWORD *)(v1 + 360) = *(_DWORD *)(v1 + 124);
  *(_DWORD *)(v1 + 364) = *(_DWORD *)(v1 + 120);
  *(_DWORD *)(v1 + 368) = *(_DWORD *)(v1 + 116);
  *(_DWORD *)(v1 + 372) = *(_DWORD *)(v1 + 112);
  v2 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v1 + 376) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 384) = v2;
  *(_DWORD *)(v1 + 392) = *(_DWORD *)(v1 + 220);
  *(_DWORD *)(v1 + 396) = *(_DWORD *)(v1 + 216);
  *(_DWORD *)(v1 + 400) = *(_DWORD *)(v1 + 212);
  *(_DWORD *)(v1 + 404) = *(_DWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 408) = *(_DWORD *)(v1 + 204);
  *(_DWORD *)(v1 + 412) = *(_DWORD *)(v1 + 200);
  *(_DWORD *)(v1 + 416) = *(_DWORD *)(v1 + 196);
  static View.makeDebuggableView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #1 in static PlatformItemListReader._makeView(view:inputs:)()
{
  type metadata accessor for PlatformItemListReader();
}

uint64_t sub_18740CF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v2 = v1 + *(int *)(a1 + 68);
  v6[2] = a1;
  v7 = type metadata accessor for ZStack();
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t key path getter for PlatformItemListReader.content : <A, B, C>PlatformItemListReader<A, B, C>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v5 = a3 + a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  v9 = *(_OWORD *)(v5 - 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 48);
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 72) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PlatformItemList) -> (@out B);
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for PlatformItemListReader.content : <A, B, C>PlatformItemListReader<A, B, C>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;

  v5 = a4 + a3;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  v9 = *(_OWORD *)(v5 - 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 48);
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 72) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B);
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t (*PlatformItemListReader.Child.makeContent.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))()
{
  uint64_t *Value;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v15 = *Value;
  v14 = Value[1];
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = a5;
  v16[6] = a6;
  v16[7] = a7;
  v16[8] = v15;
  v16[9] = v14;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B)partial apply;
}

void PlatformItemListReader.Child.value.getter()
{
  type metadata accessor for PlatformItemListReader.Child();
}

uint64_t sub_18740D200(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListReader<A, B, C>.Child, a1);
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in PlatformItemListReader.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)();
  uint64_t v8;

  v7 = PlatformItemListReader.Child.makeContent.getter(a1, a2, a3, a4, a5, a6, a7);
  AGGraphGetValue();
  v8 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))v7)(v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

void protocol witness for Rule.value.getter in conformance PlatformItemListReader<A, B, C>.Child()
{
  PlatformItemListReader.Child.value.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance PlatformItemListReader<A, B, C>()
{
  static PlatformItemListReader._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatformItemListReader<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListReader<A, B, C>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformItemListReader<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for PlatformItemListReader<A, B, C>);
}

void protocol witness for View.body.getter in conformance PlatformItemListReader<A, B, C>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListReader<A, B, C>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t specialized implicit closure #1 in _ViewOutputs.writePlatformItemList(inputs:value:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  __int128 v10[2];
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v0 = type metadata accessor for PlatformItemList.Item();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  memset(v10, 0, sizeof(v10));
  v11 = 0xC000000000000000;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  PlatformItemList.Item.init(systemItem:)(v10, (uint64_t)v4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v4, v6 + v5);
  *(_QWORD *)&v10[0] = v6;
  v9[15] = 5;
  v7 = GraphHost.intern<A>(_:for:id:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v7;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v0 = type metadata accessor for PlatformItemList.Item();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  v10 = 1uLL;
  v11 = 0;
  v12 = 0;
  v13 = 0xC000000000000000;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  PlatformItemList.Item.init(systemItem:)(&v10, (uint64_t)v4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v4, v6 + v5);
  *(_QWORD *)&v10 = v6;
  v9[7] = 5;
  v7 = GraphHost.intern<A>(_:for:id:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v7;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsPlatformItemListSourcePredicate()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

void View.onDoubleClick(action:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18740D6A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for PlatformItemListContentModifier()
{
  return &type metadata for PlatformItemListContentModifier;
}

uint64_t type metadata completion function for PlatformItemLabelView()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlatformItemLabelView(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for PlatformItemLabelView(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void type metadata accessor for PlatformItemLabelView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t a1)
{
  uint64_t result;

  result = swift_release();
  if (*(_QWORD *)(a1 + 8))
    return swift_release();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatformItemList.Item.SecondaryNavigationBehavior(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v5 = a2 + 1;
  v4 = a2[1];
  swift_retain();
  if (v4)
  {
    v6 = a2[2];
    a1[1] = v4;
    a1[2] = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *v5;
  }
  return a1;
}

_QWORD *assignWithCopy for PlatformItemList.Item.SecondaryNavigationBehavior(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for PlatformItemList.Item.SecondaryNavigationBehavior(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  swift_release();
  v4 = a2[1];
  if (!a1[1])
  {
    if (v4)
    {
      v6 = a2[2];
      a1[1] = v4;
      a1[2] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item.SecondaryNavigationBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SecondaryNavigationBehavior()
{
  return &type metadata for PlatformItemList.Item.SecondaryNavigationBehavior;
}

uint64_t destroy for PlatformItemList.Item.SelectionBehavior(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 8))
    result = swift_release();
  if (*(_QWORD *)(v1 + 24))
    result = swift_release();
  if (*(_QWORD *)(v1 + 40))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  v12 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v14;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_22;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain();
  swift_release();
LABEL_22:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item.SelectionBehavior(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v4 = (_OWORD *)(a1 + 8);
  v6 = (_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v8;
    goto LABEL_8;
  }
  *v4 = *v6;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v9)
  {
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_15:
  v12 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v12)
    {
      v14 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v14;
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_22;
  }
  if (!v12)
  {
    swift_release();
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  swift_release();
LABEL_22:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SelectionBehavior()
{
  return &type metadata for PlatformItemList.Item.SelectionBehavior;
}

char *initializeBufferWithCopyOfBuffer for PlatformItemList.Item(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  char *v7;
  char *v8;
  char *v9;
  char **v10;
  char **v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char *v78;
  _BYTE *v79;
  uint64_t v80;
  void (*v81)(char *, _BYTE *, uint64_t);
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned int (*v93)(_BYTE *, uint64_t, uint64_t);
  uint64_t v94;
  char *__dsta;
  char *__dst;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    goto LABEL_47;
  }
  v8 = a2[1];
  v7 = a2[2];
  *((_QWORD *)a1 + 1) = v8;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = a2[3];
  a1[32] = *((_BYTE *)a2 + 32);
  v9 = a2[6];
  *((_QWORD *)a1 + 5) = a2[5];
  *((_QWORD *)a1 + 6) = v9;
  a1[56] = *((_BYTE *)a2 + 56);
  v10 = (char **)(a1 + 64);
  v11 = a2 + 8;
  v12 = (unint64_t)a2[23];
  v13 = v5;
  v14 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v12 >> 1 != 4294967294)
  {
    v24 = *((unsigned __int8 *)a2 + 72);
    if (v24 == 255)
    {
      *v10 = *v11;
      a1[72] = *((_BYTE *)v11 + 8);
    }
    else
    {
      v25 = a2[8];
      outlined copy of GraphicsImage.Contents(v25, *((_BYTE *)a2 + 72));
      *((_QWORD *)a1 + 8) = v25;
      a1[72] = v24;
      v12 = (unint64_t)a2[23];
    }
    *((_QWORD *)a1 + 10) = a2[10];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    a1[104] = *((_BYTE *)a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    a1[124] = *((_BYTE *)a2 + 124);
    v26 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v26;
    *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
    a1[162] = *((_BYTE *)a2 + 162);
    a1[163] = *((_BYTE *)a2 + 163);
    if (v12 >> 1 == 0xFFFFFFFF)
    {
      v27 = *(_OWORD *)(a2 + 23);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
      *(_OWORD *)(a1 + 184) = v27;
    }
    else
    {
      v28 = (uint64_t)a2[21];
      v29 = (uint64_t)a2[22];
      v30 = a2[24];
      outlined copy of AccessibilityImageLabel(v28, v29, v12);
      *((_QWORD *)a1 + 21) = v28;
      *((_QWORD *)a1 + 22) = v29;
      *((_QWORD *)a1 + 23) = v12;
      *((_QWORD *)a1 + 24) = v30;
    }
    v31 = a2[26];
    *((_QWORD *)a1 + 25) = a2[25];
    *((_QWORD *)a1 + 26) = v31;
    *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
    *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
    a1[224] = *((_BYTE *)a2 + 224);
    v32 = a2[29];
    *((_QWORD *)a1 + 29) = v32;
    *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
    a1[242] = *((_BYTE *)a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v33 = v32;
    v20 = a2[32];
    if (v20)
      goto LABEL_4;
LABEL_15:
    v34 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v34;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_16;
  }
  v15 = *((_OWORD *)v11 + 9);
  *((_OWORD *)a1 + 12) = *((_OWORD *)v11 + 8);
  *((_OWORD *)a1 + 13) = v15;
  *((_OWORD *)a1 + 14) = *((_OWORD *)v11 + 10);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)v11 + 175);
  v16 = *((_OWORD *)v11 + 5);
  *((_OWORD *)a1 + 8) = *((_OWORD *)v11 + 4);
  *((_OWORD *)a1 + 9) = v16;
  v17 = *((_OWORD *)v11 + 7);
  *((_OWORD *)a1 + 10) = *((_OWORD *)v11 + 6);
  *((_OWORD *)a1 + 11) = v17;
  v18 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)a1 + 5) = v18;
  v19 = *((_OWORD *)v11 + 3);
  *((_OWORD *)a1 + 6) = *((_OWORD *)v11 + 2);
  *((_OWORD *)a1 + 7) = v19;
  v20 = a2[32];
  if (!v20)
    goto LABEL_15;
LABEL_4:
  *((_QWORD *)a1 + 31) = a2[31];
  *((_QWORD *)a1 + 32) = v20;
  v21 = a2[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v21 >= 2)
    v22 = v21;
  *((_QWORD *)a1 + 33) = v21;
  *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
  a1[276] = *((_BYTE *)a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
  v23 = a2[36];
  *((_QWORD *)a1 + 35) = a2[35];
  *((_QWORD *)a1 + 36) = v23;
  swift_retain();
  swift_retain();
LABEL_16:
  v35 = (unint64_t)a2[41];
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    v36 = *(_OWORD *)(a2 + 47);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
    *(_OWORD *)(a1 + 376) = v36;
    *((_QWORD *)a1 + 49) = a2[49];
    v37 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(a2 + 43);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 344) = v38;
  }
  else
  {
    v39 = a2[37];
    v40 = (uint64_t)a2[38];
    v41 = (uint64_t)a2[39];
    v42 = (uint64_t)a2[40];
    v43 = (uint64_t)a2[42];
    v44 = (uint64_t)a2[43];
    v45 = a2[44];
    v89 = (uint64_t)a2[45];
    v90 = (uint64_t)a2[46];
    v91 = (uint64_t)a2[47];
    v92 = a2[48];
    __dsta = a2[49];
    outlined copy of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v35, v43, v44, (char)v45, v89, v90, v91, (char)v92, (uint64_t)__dsta);
    *((_QWORD *)a1 + 37) = v39;
    *((_QWORD *)a1 + 38) = v40;
    *((_QWORD *)a1 + 39) = v41;
    *((_QWORD *)a1 + 40) = v42;
    *((_QWORD *)a1 + 41) = v35;
    *((_QWORD *)a1 + 42) = v43;
    *((_QWORD *)a1 + 43) = v44;
    *((_QWORD *)a1 + 44) = v45;
    *((_QWORD *)a1 + 45) = v89;
    *((_QWORD *)a1 + 46) = v90;
    *((_QWORD *)a1 + 47) = v91;
    *((_QWORD *)a1 + 48) = v92;
    *((_QWORD *)a1 + 49) = __dsta;
  }
  v46 = a2[51];
  if (v46 != (char *)1)
  {
    *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
    a1[404] = *((_BYTE *)a2 + 404);
    if (v46)
    {
      v49 = a2[52];
      *((_QWORD *)a1 + 51) = v46;
      *((_QWORD *)a1 + 52) = v49;
      swift_retain();
      v50 = a2[53];
      if (v50)
        goto LABEL_23;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
      v50 = a2[53];
      if (v50)
      {
LABEL_23:
        v51 = a2[54];
        *((_QWORD *)a1 + 53) = v50;
        *((_QWORD *)a1 + 54) = v51;
        swift_retain();
        v52 = a2[55];
        if (v52)
        {
LABEL_24:
          v53 = a2[56];
          *((_QWORD *)a1 + 55) = v52;
          *((_QWORD *)a1 + 56) = v53;
          swift_retain();
LABEL_28:
          *((_QWORD *)a1 + 57) = a2[57];
          a1[464] = *((_BYTE *)a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
    v52 = a2[55];
    if (v52)
      goto LABEL_24;
    goto LABEL_27;
  }
  v47 = *((_OWORD *)a2 + 28);
  *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
  *((_OWORD *)a1 + 28) = v47;
  a1[464] = *((_BYTE *)a2 + 464);
  v48 = *((_OWORD *)a2 + 26);
  *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
  *((_OWORD *)a1 + 26) = v48;
LABEL_29:
  v54 = a2[60];
  *((_QWORD *)a1 + 59) = a2[59];
  *((_QWORD *)a1 + 60) = v54;
  *((_QWORD *)a1 + 61) = a2[61];
  a1[496] = *((_BYTE *)a2 + 496);
  v55 = a2[63];
  swift_bridgeObjectRetain();
  if (v55)
  {
    v56 = a2[64];
    *((_QWORD *)a1 + 63) = v55;
    *((_QWORD *)a1 + 64) = v56;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
  }
  *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
  v57 = a2[66];
  if (v57)
  {
    *((_QWORD *)a1 + 66) = v57;
    *((_QWORD *)a1 + 67) = a2[67];
    *((_QWORD *)a1 + 68) = a2[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((_QWORD *)a1 + 68) = a2[68];
  }
  v58 = a2[69];
  if (v58 == (char *)1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
    *((_QWORD *)a1 + 71) = a2[71];
  }
  else
  {
    *((_QWORD *)a1 + 69) = v58;
    v59 = a2[70];
    swift_retain();
    if (v59)
    {
      v60 = a2[71];
      *((_QWORD *)a1 + 70) = v59;
      *((_QWORD *)a1 + 71) = v60;
      swift_retain();
    }
    else
    {
      *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
    }
  }
  v61 = a2[72];
  *((_QWORD *)a1 + 72) = v61;
  *((_QWORD *)a1 + 73) = a2[73];
  *((_QWORD *)a1 + 74) = a2[74];
  *((_QWORD *)a1 + 75) = a2[75];
  *((_QWORD *)a1 + 76) = a2[76];
  *((_QWORD *)a1 + 77) = a2[77];
  v62 = a2[78];
  *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
  a1[634] = *((_BYTE *)a2 + 634);
  v63 = a3[28];
  __dst = &a1[v63];
  v64 = (char *)a2 + v63;
  *((_QWORD *)a1 + 78) = v62;
  v65 = type metadata accessor for CommandOperation();
  v66 = *(_QWORD *)(v65 - 8);
  v93 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
  v67 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v93(v64, 1, v65))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(__dst, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    v69 = a3;
  }
  else
  {
    v94 = v66;
    *__dst = *v64;
    v70 = v65;
    v71 = *(int *)(v65 + 20);
    v72 = &__dst[v71];
    v73 = &v64[v71];
    v74 = *(_QWORD *)&v64[v71];
    v75 = *(_QWORD *)&v64[v71 + 8];
    v76 = v64[v71 + 16];
    outlined copy of Text.Storage(v74, *((_QWORD *)v73 + 1), v73[16]);
    *(_QWORD *)v72 = v74;
    *((_QWORD *)v72 + 1) = v75;
    v72[16] = v76;
    *((_QWORD *)v72 + 3) = *((_QWORD *)v73 + 3);
    v77 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v78 = &v72[v77];
    v79 = &v73[v77];
    v80 = type metadata accessor for UUID();
    v81 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v81(v78, v79, v80);
    v82 = *(int *)(v70 + 24);
    v83 = &__dst[v82];
    v84 = &v64[v82];
    if (*v84)
    {
      v85 = v84[1];
      *(_QWORD *)v83 = *v84;
      *((_QWORD *)v83 + 1) = v85;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v83 = *(_OWORD *)v84;
    }
    v69 = a3;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(__dst, 0, 1, v70);
  }
  v86 = v69[30];
  a1[v69[29]] = *((_BYTE *)a2 + v69[29]);
  a1[v86] = *((_BYTE *)a2 + v86);
  v87 = v69[32];
  a1[v69[31]] = *((_BYTE *)a2 + v69[31]);
  a1[v87] = *((_BYTE *)a2 + v87);
  *(_QWORD *)&a1[v69[33]] = *(char **)((char *)a2 + v69[33]);
LABEL_47:
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  _OWORD *v13;
  id *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  id v35;
  int v36;
  id v37;
  void *v38;
  char v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  id v51;
  id v52;
  char v53;
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  void *v75;
  id v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  void *v83;
  id v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  id v90;
  int v91;
  __int128 *v92;
  __int128 *v93;
  unint64_t v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD *v131;
  _OWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  _OWORD *v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _OWORD *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 *v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  id v175;
  uint64_t v176;
  _BYTE *v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t (*v181)(_BYTE *, uint64_t, uint64_t);
  int v182;
  uint64_t (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  uint64_t v194;
  void (*v195)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  int *v233;
  int *v234;
  int *v235;
  int *v236;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  v8 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = v8;

  v10 = *(void **)(a1 + 8);
  v11 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  v12 = v11;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v13 = (_OWORD *)(a1 + 64);
  v14 = (id *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      v16 = *(_OWORD *)v14;
      v17 = *(_OWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v18;
      *v13 = v16;
      *(_OWORD *)(a1 + 80) = v17;
      v19 = *(_OWORD *)(a2 + 128);
      v20 = *(_OWORD *)(a2 + 144);
      v21 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v21;
      *(_OWORD *)(a1 + 128) = v19;
      *(_OWORD *)(a1 + 144) = v20;
      v22 = *(_OWORD *)(a2 + 192);
      v23 = *(_OWORD *)(a2 + 208);
      v24 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v23;
      *(_OWORD *)(a1 + 224) = v24;
      *(_OWORD *)(a1 + 192) = v22;
    }
    else
    {
      v34 = *(unsigned __int8 *)(a2 + 72);
      if (v34 == 255)
      {
        v40 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v40;
      }
      else
      {
        v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v35;
        *(_BYTE *)(a1 + 72) = v34;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v41 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v41;
      v42 = *(_OWORD *)(a2 + 128);
      v43 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v42;
      *(_OWORD *)(a1 + 144) = v43;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v44 = *(_QWORD *)(a2 + 184);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        v45 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v45;
      }
      else
      {
        v46 = *(_QWORD *)(a2 + 168);
        v47 = *(_QWORD *)(a2 + 176);
        v48 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v46, v47, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v46;
        *(_QWORD *)(a1 + 176) = v47;
        *(_QWORD *)(a1 + 184) = v44;
        *(_QWORD *)(a1 + 192) = v48;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v49 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v49;
      v50 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v50;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 64);
    v25 = *(_OWORD *)(a2 + 112);
    v27 = *(_OWORD *)v14;
    v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v25;
    *v13 = v27;
    *(_OWORD *)(a1 + 80) = v26;
    v28 = *(_OWORD *)(a2 + 176);
    v30 = *(_OWORD *)(a2 + 128);
    v29 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v28;
    *(_OWORD *)(a1 + 128) = v30;
    *(_OWORD *)(a1 + 144) = v29;
    v32 = *(_OWORD *)(a2 + 208);
    v31 = *(_OWORD *)(a2 + 224);
    v33 = *(_OWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    *(_OWORD *)(a1 + 208) = v32;
    *(_OWORD *)(a1 + 224) = v31;
    *(_OWORD *)(a1 + 192) = v33;
  }
  else
  {
    v36 = *(unsigned __int8 *)(a2 + 72);
    if (*(unsigned __int8 *)(a1 + 72) == 255)
    {
      if (v36 == 255)
      {
        v54 = *v14;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v13 = v54;
      }
      else
      {
        v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v52;
        *(_BYTE *)(a1 + 72) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 64);
      v53 = *(_BYTE *)(a2 + 72);
      *(_QWORD *)v13 = *v14;
      *(_BYTE *)(a1 + 72) = v53;
    }
    else
    {
      v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(_BYTE *)(a2 + 72));
      v38 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v37;
      v39 = *(_BYTE *)(a1 + 72);
      *(_BYTE *)(a1 + 72) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    v55 = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_OWORD *)(a1 + 108) = v55;
    v56 = *(_OWORD *)(a2 + 128);
    v57 = *(_OWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_OWORD *)(a1 + 128) = v56;
    *(_OWORD *)(a1 + 144) = v57;
    *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    v58 = (_OWORD *)(a1 + 168);
    v59 = (_OWORD *)(a2 + 168);
    v60 = *(_QWORD *)(a2 + 184);
    v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a1 + 184) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        v62 = *(_OWORD *)(a2 + 184);
        *v58 = *v59;
        *(_OWORD *)(a1 + 184) = v62;
      }
      else
      {
        v64 = *(_QWORD *)(a2 + 168);
        v65 = *(_QWORD *)(a2 + 176);
        v66 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v64, v65, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v64;
        *(_QWORD *)(a1 + 176) = v65;
        *(_QWORD *)(a1 + 184) = v60;
        *(_QWORD *)(a1 + 192) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 168);
      v63 = *(_OWORD *)(a2 + 184);
      *v58 = *v59;
      *(_OWORD *)(a1 + 184) = v63;
    }
    else
    {
      v67 = *(_QWORD *)(a2 + 168);
      v68 = *(_QWORD *)(a2 + 176);
      v69 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v67, v68, *(_QWORD *)(a2 + 184));
      v70 = *(_QWORD *)(a1 + 168);
      v71 = *(_QWORD *)(a1 + 176);
      v72 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 168) = v67;
      *(_QWORD *)(a1 + 176) = v68;
      *(_QWORD *)(a1 + 184) = v60;
      *(_QWORD *)(a1 + 192) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    swift_retain();
    swift_release();
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
    v73 = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_DWORD *)(a1 + 220) = v73;
    v74 = *(void **)(a1 + 232);
    v75 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v75;
    v76 = v75;

    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
  }
  v77 = (_OWORD *)(a1 + 248);
  v78 = (_OWORD *)(a2 + 248);
  v79 = *(_QWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 256))
  {
    if (!v79)
    {
      outlined destroy of Image.NamedResolved(a1 + 248);
      v87 = *(_OWORD *)(a2 + 264);
      v86 = *(_OWORD *)(a2 + 280);
      *v77 = *v78;
      *(_OWORD *)(a1 + 264) = v87;
      *(_OWORD *)(a1 + 280) = v86;
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v80 = *(void **)(a1 + 264);
    v81 = *(void **)(a2 + 264);
    if ((unint64_t)v80 >= 2)
    {
      if ((unint64_t)v81 >= 2)
      {
        *(_QWORD *)(a1 + 264) = v81;
        v90 = v81;

        goto LABEL_43;
      }

      v81 = *(void **)(a2 + 264);
    }
    else if ((unint64_t)v81 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v81;
      v82 = v81;
LABEL_43:
      v91 = *(_DWORD *)(a2 + 272);
      *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
      *(_DWORD *)(a1 + 272) = v91;
      *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
      *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_retain();
      swift_release();
      goto LABEL_44;
    }
    *(_QWORD *)(a1 + 264) = v81;
    goto LABEL_43;
  }
  if (v79)
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v83 = *(void **)(a2 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v83 >= 2)
      v84 = v83;
    *(_QWORD *)(a1 + 264) = v83;
    v85 = *(_DWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
    *(_DWORD *)(a1 + 272) = v85;
    *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
    *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    v88 = *v78;
    v89 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v89;
    *v77 = v88;
  }
LABEL_44:
  v92 = (__int128 *)(a1 + 296);
  v93 = (__int128 *)(a2 + 296);
  v94 = *(_QWORD *)(a2 + 328);
  v95 = v94 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(_QWORD *)(a1 + 328) >> 2 == 0xFFFFFFFFLL)
  {
    if (v95 == 0x3FFFFFFFCLL)
    {
      v96 = *v93;
      v97 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v97;
      *v92 = v96;
      v98 = *(_OWORD *)(a2 + 344);
      v99 = *(_OWORD *)(a2 + 360);
      v100 = *(_OWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v99;
      *(_OWORD *)(a1 + 376) = v100;
      *(_OWORD *)(a1 + 344) = v98;
    }
    else
    {
      v106 = *(void **)(a2 + 296);
      v107 = *(_QWORD *)(a2 + 304);
      v108 = *(_QWORD *)(a2 + 312);
      v109 = *(_QWORD *)(a2 + 320);
      v230 = v6;
      v233 = a3;
      v110 = *(_QWORD *)(a2 + 336);
      v111 = *(_QWORD *)(a2 + 344);
      v112 = *(_QWORD *)(a2 + 352);
      v220 = *(_QWORD *)(a2 + 360);
      v222 = *(_QWORD *)(a2 + 368);
      v224 = *(_QWORD *)(a2 + 376);
      v226 = *(_QWORD *)(a2 + 384);
      v228 = *(_QWORD *)(a2 + 392);
      outlined copy of PlatformItemList.Item.SystemItem(v106, v107, v108, v109, v94, v110, v111, v112, v220, v222, v224, v226, v228);
      *(_QWORD *)(a1 + 296) = v106;
      *(_QWORD *)(a1 + 304) = v107;
      *(_QWORD *)(a1 + 312) = v108;
      *(_QWORD *)(a1 + 320) = v109;
      *(_QWORD *)(a1 + 328) = v94;
      *(_QWORD *)(a1 + 336) = v110;
      *(_QWORD *)(a1 + 344) = v111;
      *(_QWORD *)(a1 + 352) = v112;
      v6 = v230;
      a3 = v233;
      *(_QWORD *)(a1 + 360) = v220;
      *(_QWORD *)(a1 + 368) = v222;
      *(_QWORD *)(a1 + 376) = v224;
      *(_QWORD *)(a1 + 384) = v226;
      *(_QWORD *)(a1 + 392) = v228;
    }
  }
  else if (v95 == 0x3FFFFFFFCLL)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    v102 = *(_OWORD *)(a2 + 312);
    v101 = *(_OWORD *)(a2 + 328);
    *v92 = *v93;
    *(_OWORD *)(a1 + 312) = v102;
    *(_OWORD *)(a1 + 328) = v101;
    v104 = *(_OWORD *)(a2 + 360);
    v103 = *(_OWORD *)(a2 + 376);
    v105 = *(_OWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 360) = v104;
    *(_OWORD *)(a1 + 376) = v103;
    *(_OWORD *)(a1 + 344) = v105;
  }
  else
  {
    v113 = *(void **)(a2 + 296);
    v114 = *(_QWORD *)(a2 + 304);
    v231 = v6;
    v234 = a3;
    v115 = *(_QWORD *)(a2 + 312);
    v116 = *(_QWORD *)(a2 + 320);
    v117 = *(_QWORD *)(a2 + 336);
    v118 = *(_QWORD *)(a2 + 344);
    v119 = *(_QWORD *)(a2 + 352);
    v221 = *(_QWORD *)(a2 + 360);
    v223 = *(_QWORD *)(a2 + 368);
    v225 = *(_QWORD *)(a2 + 376);
    v227 = *(_QWORD *)(a2 + 384);
    v229 = *(_QWORD *)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v113, v114, v115, v116, v94, v117, v118, v119, v221, v223, v225, v227, v229);
    v120 = *(void **)(a1 + 296);
    v121 = *(_QWORD *)(a1 + 304);
    v122 = *(_QWORD *)(a1 + 312);
    v123 = *(_QWORD *)(a1 + 320);
    v124 = *(_QWORD *)(a1 + 328);
    v125 = *(_QWORD *)(a1 + 336);
    v126 = *(_QWORD *)(a1 + 344);
    v127 = *(_QWORD *)(a1 + 352);
    v128 = *(_OWORD *)(a1 + 360);
    v129 = *(_OWORD *)(a1 + 376);
    v130 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 296) = v113;
    *(_QWORD *)(a1 + 304) = v114;
    *(_QWORD *)(a1 + 312) = v115;
    *(_QWORD *)(a1 + 320) = v116;
    *(_QWORD *)(a1 + 328) = v94;
    *(_QWORD *)(a1 + 336) = v117;
    v6 = v231;
    a3 = v234;
    *(_QWORD *)(a1 + 344) = v118;
    *(_QWORD *)(a1 + 352) = v119;
    *(_QWORD *)(a1 + 360) = v221;
    *(_QWORD *)(a1 + 368) = v223;
    *(_QWORD *)(a1 + 376) = v225;
    *(_QWORD *)(a1 + 384) = v227;
    *(_QWORD *)(a1 + 392) = v229;
    outlined consume of PlatformItemList.Item.SystemItem(v120, v121, v122, v123, v124, v125, v126, v127, v128, *((uint64_t *)&v128 + 1), v129, SBYTE8(v129), v130);
  }
  v131 = (_OWORD *)(a1 + 400);
  v132 = (_OWORD *)(v6 + 122);
  v133 = (_OWORD *)(a1 + 408);
  v134 = *(_QWORD *)(a1 + 408);
  v135 = (_OWORD *)(a2 + 408);
  v136 = *(_QWORD *)(a2 + 408);
  if (v134 != 1)
  {
    if (v136 == 1)
    {
      outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
      *v131 = *v132;
      v141 = *(_OWORD *)(v6 + 154);
      v140 = *(_OWORD *)(v6 + 170);
      v142 = *(_OWORD *)(v6 + 138);
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
      *(_OWORD *)(a1 + 432) = v141;
      *(_OWORD *)(a1 + 448) = v140;
      *(_OWORD *)(a1 + 416) = v142;
      goto LABEL_85;
    }
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
    *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
    *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
    *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    v148 = *(_QWORD *)(a2 + 408);
    if (v134)
    {
      if (v148)
      {
        v149 = *(_QWORD *)(a2 + 416);
        *(_QWORD *)(a1 + 408) = v148;
        *(_QWORD *)(a1 + 416) = v149;
        swift_retain();
        swift_release();
        goto LABEL_70;
      }
      swift_release();
    }
    else if (v148)
    {
      v150 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v148;
      *(_QWORD *)(a1 + 416) = v150;
      swift_retain();
      goto LABEL_70;
    }
    *v133 = *v135;
LABEL_70:
    v151 = *(_QWORD *)(a2 + 424);
    if (*(_QWORD *)(a1 + 424))
    {
      if (v151)
      {
        v152 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v151;
        *(_QWORD *)(a1 + 432) = v152;
        swift_retain();
        swift_release();
        goto LABEL_77;
      }
      swift_release();
    }
    else if (v151)
    {
      v153 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v151;
      *(_QWORD *)(a1 + 432) = v153;
      swift_retain();
      goto LABEL_77;
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_77:
    v147 = *(_QWORD *)(a2 + 440);
    if (*(_QWORD *)(a1 + 440))
    {
      if (v147)
      {
        v154 = *(_QWORD *)(a2 + 448);
        *(_QWORD *)(a1 + 440) = v147;
        *(_QWORD *)(a1 + 448) = v154;
        swift_retain();
        swift_release();
        goto LABEL_84;
      }
      swift_release();
    }
    else if (v147)
    {
      goto LABEL_81;
    }
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_84;
  }
  if (v136 == 1)
  {
    *v131 = *v132;
    v137 = *(_OWORD *)(v6 + 138);
    v138 = *(_OWORD *)(v6 + 154);
    v139 = *(_OWORD *)(v6 + 170);
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    *(_OWORD *)(a1 + 432) = v138;
    *(_OWORD *)(a1 + 448) = v139;
    *(_OWORD *)(a1 + 416) = v137;
    goto LABEL_85;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  v143 = *(_QWORD *)(a2 + 408);
  if (v143)
  {
    v144 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v143;
    *(_QWORD *)(a1 + 416) = v144;
    swift_retain();
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
      goto LABEL_58;
  }
  else
  {
    *v133 = *v135;
    v145 = *(_QWORD *)(a2 + 424);
    if (v145)
    {
LABEL_58:
      v146 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v145;
      *(_QWORD *)(a1 + 432) = v146;
      swift_retain();
      v147 = *(_QWORD *)(a2 + 440);
      if (!v147)
        goto LABEL_65;
LABEL_81:
      v155 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v147;
      *(_QWORD *)(a1 + 448) = v155;
      swift_retain();
      goto LABEL_84;
    }
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  v147 = *(_QWORD *)(a2 + 440);
  if (v147)
    goto LABEL_81;
LABEL_65:
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
LABEL_84:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_85:
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v156 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v156)
    {
      v157 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v156;
      *(_QWORD *)(a1 + 512) = v157;
      swift_retain();
      swift_release();
      goto LABEL_92;
    }
    swift_release();
  }
  else if (v156)
  {
    v158 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v156;
    *(_QWORD *)(a1 + 512) = v158;
    swift_retain();
    goto LABEL_92;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_92:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v159 = (_OWORD *)(a1 + 528);
  v160 = (_OWORD *)(a2 + 528);
  v161 = *(_QWORD *)(a2 + 528);
  if (*(_QWORD *)(a1 + 528))
  {
    if (v161)
    {
      *(_QWORD *)(a1 + 528) = v161;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
      v162 = *(_QWORD *)(a2 + 544);
      *v159 = *v160;
      *(_QWORD *)(a1 + 544) = v162;
    }
  }
  else if (v161)
  {
    *(_QWORD *)(a1 + 528) = v161;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v163 = *v160;
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *v159 = v163;
  }
  v164 = (__int128 *)(a1 + 552);
  v165 = (__int128 *)(a2 + 552);
  v166 = *(_QWORD *)(a2 + 552);
  if (*(_QWORD *)(a1 + 552) == 1)
  {
    if (v166 == 1)
    {
      v167 = *v165;
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *v164 = v167;
      goto LABEL_115;
    }
    *(_QWORD *)(a1 + 552) = v166;
    v169 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (!v169)
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
      goto LABEL_115;
    }
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v169;
    goto LABEL_112;
  }
  if (v166 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    v168 = *(_QWORD *)(a2 + 568);
    *v164 = *v165;
    *(_QWORD *)(a1 + 568) = v168;
    goto LABEL_115;
  }
  *(_QWORD *)(a1 + 552) = v166;
  swift_retain();
  swift_release();
  v171 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v171)
    {
      v172 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v171;
      *(_QWORD *)(a1 + 568) = v172;
      swift_retain();
      swift_release();
      goto LABEL_115;
    }
    swift_release();
  }
  else if (v171)
  {
    v170 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v171;
LABEL_112:
    *(_QWORD *)(a1 + 568) = v170;
    swift_retain();
    goto LABEL_115;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_115:
  v173 = *(void **)(a1 + 576);
  v174 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v174;
  v175 = v174;

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v176 = a3[28];
  v177 = (_BYTE *)(a1 + v176);
  v178 = (_BYTE *)(a2 + v176);
  v179 = type metadata accessor for CommandOperation();
  v180 = *(_QWORD *)(v179 - 8);
  v181 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v180 + 48);
  LODWORD(v173) = v181(v177, 1, v179);
  v182 = v181(v178, 1, v179);
  if (!(_DWORD)v173)
  {
    if (!v182)
    {
      v236 = a3;
      *v177 = *v178;
      v200 = *(int *)(v179 + 20);
      v201 = &v177[v200];
      v202 = &v178[v200];
      v203 = *(_QWORD *)&v178[v200];
      v204 = *(_QWORD *)&v178[v200 + 8];
      v205 = v178[v200 + 16];
      outlined copy of Text.Storage(v203, v204, v205);
      v206 = *(_QWORD *)v201;
      v207 = *((_QWORD *)v201 + 1);
      v208 = v201[16];
      *(_QWORD *)v201 = v203;
      *((_QWORD *)v201 + 1) = v204;
      v201[16] = v205;
      outlined consume of Text.Storage(v206, v207, v208);
      *((_QWORD *)v201 + 3) = *((_QWORD *)v202 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v209 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v210 = &v201[v209];
      v211 = &v202[v209];
      v212 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v212 - 8) + 24))(v210, v211, v212);
      v213 = *(int *)(v179 + 24);
      v214 = &v177[v213];
      v215 = &v178[v213];
      v216 = *(_QWORD *)&v178[v213];
      if (*v214)
      {
        a3 = v236;
        if (v216)
        {
          v217 = *((_QWORD *)v215 + 1);
          *v214 = v216;
          v214[1] = v217;
          swift_retain();
          swift_release();
          goto LABEL_128;
        }
        swift_release();
      }
      else
      {
        a3 = v236;
        if (v216)
        {
          v219 = *((_QWORD *)v215 + 1);
          *v214 = v216;
          v214[1] = v219;
          swift_retain();
          goto LABEL_128;
        }
      }
      *(_OWORD *)v214 = *(_OWORD *)v215;
      goto LABEL_128;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v177, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v183 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_120;
  }
  if (v182)
  {
    v183 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_120:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v183);
    memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
    goto LABEL_128;
  }
  v232 = v178;
  v235 = a3;
  *v177 = *v178;
  v185 = *(int *)(v179 + 20);
  v186 = &v177[v185];
  v187 = &v178[v185];
  v188 = *(_QWORD *)v187;
  v189 = *((_QWORD *)v187 + 1);
  v190 = v187[16];
  outlined copy of Text.Storage(*(_QWORD *)v187, v189, v190);
  *(_QWORD *)v186 = v188;
  *((_QWORD *)v186 + 1) = v189;
  v186[16] = v190;
  *((_QWORD *)v186 + 3) = *((_QWORD *)v187 + 3);
  v191 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v192 = &v186[v191];
  v193 = &v187[v191];
  v194 = type metadata accessor for UUID();
  v195 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v194 - 8) + 16);
  swift_bridgeObjectRetain();
  v195(v192, v193, v194);
  v196 = *(int *)(v179 + 24);
  v197 = &v177[v196];
  v198 = &v232[v196];
  if (*v198)
  {
    v199 = v198[1];
    *v197 = *v198;
    v197[1] = v199;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v197 = *(_OWORD *)v198;
  }
  a3 = v235;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
LABEL_128:
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  *(_BYTE *)(a1 + a3[30]) = *(_BYTE *)(a2 + a3[30]);
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + a3[32]) = *(_BYTE *)(a2 + a3[32]);
  *(_QWORD *)(a1 + a3[33]) = *(_QWORD *)(a2 + a3[33]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v10;
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v13 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v13;
  v14 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v14;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v15 = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 312) = v15;
  v16 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v16;
  v17 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v17;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v18 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v18;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
  v19 = *(_QWORD *)(a2 + 504);
  if (v19)
  {
    v20 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v19;
    *(_QWORD *)(a1 + 512) = v20;
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  v21 = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v22 = a3[28];
  v23 = (_BYTE *)(a1 + v22);
  v24 = (_BYTE *)(a2 + v22);
  *(_BYTE *)(a1 + 632) = v21;
  v25 = type metadata accessor for CommandOperation();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *v24;
    v28 = *(int *)(v25 + 20);
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = *(_OWORD *)&v24[v28 + 16];
    *v29 = *(_OWORD *)&v24[v28];
    v29[1] = v31;
    v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v33 = (char *)v29 + v32;
    v34 = &v30[v32];
    v35 = type metadata accessor for UUID();
    (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
    v36 = *(int *)(v25 + 24);
    v37 = &v23[v36];
    v38 = (uint64_t *)&v24[v36];
    v39 = *v38;
    if (*v38)
    {
      v40 = v38[1];
      *v37 = v39;
      v37[1] = v40;
    }
    else
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v41 = a3[30];
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v41) = *(_BYTE *)(a2 + v41);
  v42 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  *(_QWORD *)(a1 + a3[33]) = *(_QWORD *)(a2 + a3[33]);
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  void *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(_BYTE *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  _BYTE *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;

  v6 = a2 + 278;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_release();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = (_OWORD *)(a1 + 64);
  v12 = (_OWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 184) >> 1 == 4294967294)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 184) >> 1 == 4294967294)
  {
    outlined destroy of Image.Resolved(a1 + 64);
LABEL_4:
    v13 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v13;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    v15 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v15;
    v16 = *(_OWORD *)(a2 + 80);
    *v11 = *v12;
    *(_OWORD *)(a1 + 80) = v16;
    v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_16;
  }
  v18 = *(unsigned __int8 *)(a1 + 72);
  if (v18 != 255)
  {
    v19 = *(unsigned __int8 *)(a2 + 72);
    if (v19 != 255)
    {
      v20 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
      *(_BYTE *)(a1 + 72) = v19;
      outlined consume of GraphicsImage.Contents(v20, v18);
      goto LABEL_10;
    }
    outlined destroy of GraphicsImage.Contents(a1 + 64);
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
LABEL_10:
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  v21 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v21;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v22 = *(_QWORD *)(a1 + 184);
  *(_WORD *)(a1 + 162) = *(_WORD *)(a2 + 162);
  if (v22 >> 1 != 0xFFFFFFFF)
  {
    v23 = *(_QWORD *)(a2 + 184);
    if (v23 >> 1 != 0xFFFFFFFF)
    {
      v25 = *(_QWORD *)(a2 + 192);
      v26 = *(_QWORD *)(a1 + 168);
      v27 = *(_QWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 184) = v23;
      *(_QWORD *)(a1 + 192) = v25;
      outlined consume of AccessibilityImageLabel(v26, v27, v22);
      goto LABEL_15;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 168);
  }
  v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_15:
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v28 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);

  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
LABEL_16:
  if (!*(_QWORD *)(a1 + 256))
  {
LABEL_21:
    v32 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v32;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_26;
  }
  v29 = *(_QWORD *)(a2 + 256);
  if (!v29)
  {
    outlined destroy of Image.NamedResolved(a1 + 248);
    goto LABEL_21;
  }
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  v30 = *(void **)(a1 + 264);
  v31 = *(_QWORD *)(a2 + 264);
  if ((unint64_t)v30 >= 2)
  {
    if (v31 >= 2)
    {
      *(_QWORD *)(a1 + 264) = v31;

    }
    else
    {

      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = v31;
  }
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_WORD *)(a1 + 276) = *(_WORD *)(a2 + 276);
  *(_BYTE *)(a1 + 278) = *(_BYTE *)v6;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_release();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_release();
LABEL_26:
  v33 = (_OWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a1 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
LABEL_29:
    v36 = *(_OWORD *)(v6 + 98);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(v6 + 82);
    *(_OWORD *)(a1 + 376) = v36;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(v6 + 114);
    v37 = *(_OWORD *)(v6 + 34);
    *v33 = *(_OWORD *)(v6 + 18);
    *(_OWORD *)(a1 + 312) = v37;
    v38 = *(_OWORD *)(v6 + 66);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v6 + 50);
    *(_OWORD *)(a1 + 344) = v38;
    goto LABEL_31;
  }
  v35 = *(_QWORD *)(a2 + 328);
  if (v35 >> 2 == 0xFFFFFFFF)
  {
    outlined destroy of PlatformItemList.Item.SystemItem(a1 + 296);
    goto LABEL_29;
  }
  v39 = *(void **)(a1 + 296);
  v40 = *(_QWORD *)(a1 + 304);
  v41 = *(_QWORD *)(a1 + 312);
  v42 = *(_QWORD *)(a1 + 320);
  v43 = *(_QWORD *)(a1 + 336);
  v44 = *(_QWORD *)(a1 + 344);
  v45 = *(_QWORD *)(a1 + 352);
  v46 = *(_OWORD *)(a1 + 360);
  v47 = *(_OWORD *)(a1 + 376);
  v48 = *(_QWORD *)(a1 + 392);
  v49 = *(_OWORD *)(v6 + 34);
  *v33 = *(_OWORD *)(v6 + 18);
  *(_OWORD *)(a1 + 312) = v49;
  *(_QWORD *)(a1 + 328) = v35;
  v50 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v50;
  v51 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v51;
  outlined consume of PlatformItemList.Item.SystemItem(v39, v40, v41, v42, v34, v43, v44, v45, v46, *((uint64_t *)&v46 + 1), v47, SBYTE8(v47), v48);
LABEL_31:
  v52 = *(_QWORD *)(a1 + 408);
  if (v52 == 1)
  {
LABEL_34:
    v54 = *(_OWORD *)(v6 + 170);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v6 + 154);
    *(_OWORD *)(a1 + 448) = v54;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(v6 + 186);
    v55 = *(_OWORD *)(v6 + 138);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v6 + 122);
    *(_OWORD *)(a1 + 416) = v55;
    goto LABEL_57;
  }
  v53 = *(_QWORD *)(a2 + 408);
  if (v53 == 1)
  {
    outlined destroy of PlatformItemList.Item.SelectionBehavior(a1 + 400);
    goto LABEL_34;
  }
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(v6 + 122);
  *(_BYTE *)(a1 + 401) = *(_BYTE *)(v6 + 123);
  *(_BYTE *)(a1 + 402) = *(_BYTE *)(v6 + 124);
  *(_BYTE *)(a1 + 403) = *(_BYTE *)(v6 + 125);
  *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
  if (v52)
  {
    if (v53)
    {
      v56 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v53;
      *(_QWORD *)(a1 + 416) = v56;
      swift_release();
      goto LABEL_42;
    }
    swift_release();
  }
  else if (v53)
  {
    v57 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = v53;
    *(_QWORD *)(a1 + 416) = v57;
    goto LABEL_42;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
LABEL_42:
  v58 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424))
  {
    if (v58)
    {
      v59 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v58;
      *(_QWORD *)(a1 + 432) = v59;
      swift_release();
      goto LABEL_49;
    }
    swift_release();
  }
  else if (v58)
  {
    v60 = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v58;
    *(_QWORD *)(a1 + 432) = v60;
    goto LABEL_49;
  }
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
LABEL_49:
  v61 = *(_QWORD *)(a2 + 440);
  if (!*(_QWORD *)(a1 + 440))
  {
    if (v61)
    {
      v63 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = v61;
      *(_QWORD *)(a1 + 448) = v63;
      goto LABEL_56;
    }
LABEL_55:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_56;
  }
  if (!v61)
  {
    swift_release();
    goto LABEL_55;
  }
  v62 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v61;
  *(_QWORD *)(a1 + 448) = v62;
  swift_release();
LABEL_56:
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_57:
  v64 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v64;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v65 = *(_QWORD *)(a2 + 504);
  if (*(_QWORD *)(a1 + 504))
  {
    if (v65)
    {
      v66 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v65;
      *(_QWORD *)(a1 + 512) = v66;
      swift_release();
      goto LABEL_64;
    }
    swift_release();
  }
  else if (v65)
  {
    v67 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v65;
    *(_QWORD *)(a1 + 512) = v67;
    goto LABEL_64;
  }
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
LABEL_64:
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  if (*(_QWORD *)(a1 + 528))
  {
    v68 = *(_QWORD *)(a2 + 528);
    if (v68)
    {
      *(_QWORD *)(a1 + 528) = v68;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_release();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      swift_release();
      goto LABEL_69;
    }
    outlined destroy of PlatformItemList.Item.Accessibility(a1 + 528);
  }
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
LABEL_69:
  if (*(_QWORD *)(a1 + 552) == 1)
  {
LABEL_72:
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    goto LABEL_73;
  }
  v69 = *(_QWORD *)(a2 + 552);
  if (v69 == 1)
  {
    outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(a1 + 552);
    goto LABEL_72;
  }
  *(_QWORD *)(a1 + 552) = v69;
  swift_release();
  v81 = *(_QWORD *)(a2 + 560);
  if (*(_QWORD *)(a1 + 560))
  {
    if (v81)
    {
      v82 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v81;
      *(_QWORD *)(a1 + 568) = v82;
      swift_release();
      goto LABEL_73;
    }
    swift_release();
  }
  else if (v81)
  {
    v111 = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 560) = v81;
    *(_QWORD *)(a1 + 568) = v111;
    goto LABEL_73;
  }
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
LABEL_73:
  v70 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);

  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
  v71 = a3[28];
  v72 = (_BYTE *)(a1 + v71);
  v73 = (_BYTE *)(a2 + v71);
  v74 = type metadata accessor for CommandOperation();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (!v77)
  {
    if (!v78)
    {
      *v72 = *v73;
      v96 = *(int *)(v74 + 20);
      v97 = &v72[v96];
      v98 = &v73[v96];
      LOBYTE(v96) = v73[v96 + 16];
      v99 = *(_QWORD *)v97;
      v100 = *((_QWORD *)v97 + 1);
      v101 = v97[16];
      *(_OWORD *)v97 = *(_OWORD *)v98;
      v97[16] = v96;
      outlined consume of Text.Storage(v99, v100, v101);
      *((_QWORD *)v97 + 3) = *((_QWORD *)v98 + 3);
      swift_bridgeObjectRelease();
      v102 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v103 = &v97[v102];
      v104 = &v98[v102];
      v105 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v105 - 8) + 40))(v103, v104, v105);
      v106 = *(int *)(v74 + 24);
      v107 = &v72[v106];
      v108 = (uint64_t *)&v73[v106];
      v109 = *v108;
      if (*v107)
      {
        if (v109)
        {
          v110 = v108[1];
          *v107 = v109;
          v107[1] = v110;
          swift_release();
          goto LABEL_91;
        }
        swift_release();
      }
      else if (v109)
      {
        v115 = v108[1];
        *v107 = v109;
        v107[1] = v115;
        goto LABEL_91;
      }
      *(_OWORD *)v107 = *(_OWORD *)v108;
      goto LABEL_91;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v72, (uint64_t (*)(_QWORD))type metadata accessor for CommandOperation);
    v79 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_78;
  }
  if (v78)
  {
    v79 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_78:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, v79);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_91;
  }
  *v72 = *v73;
  v83 = *(int *)(v74 + 20);
  v84 = &v72[v83];
  v85 = &v73[v83];
  v86 = *(_OWORD *)&v73[v83 + 16];
  *v84 = *(_OWORD *)&v73[v83];
  v84[1] = v86;
  v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v88 = (char *)v84 + v87;
  v89 = &v85[v87];
  v90 = type metadata accessor for UUID();
  (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v90 - 8) + 32))(v88, v89, v90);
  v91 = *(int *)(v74 + 24);
  v92 = &v72[v91];
  v93 = (uint64_t *)&v73[v91];
  v94 = *v93;
  if (*v93)
  {
    v95 = v93[1];
    *v92 = v94;
    v92[1] = v95;
  }
  else
  {
    *(_OWORD *)v92 = *(_OWORD *)v93;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
LABEL_91:
  v112 = a3[30];
  *(_BYTE *)(a1 + a3[29]) = *(_BYTE *)(a2 + a3[29]);
  *(_BYTE *)(a1 + v112) = *(_BYTE *)(a2 + v112);
  v113 = a3[32];
  *(_BYTE *)(a1 + a3[31]) = *(_BYTE *)(a2 + a3[31]);
  *(_BYTE *)(a1 + v113) = *(_BYTE *)(a2 + v113);
  *(_QWORD *)(a1 + a3[33]) = *(_QWORD *)(a2 + a3[33]);
  swift_release();
  return a1;
}

uint64_t sub_1874105E8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 112)], a2, v9);
  }
}

char *sub_187410688(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 112)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PlatformItemListReader()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatformItemListReader(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, unint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v9 = v6 + 16;
  v10 = v8 & v9;
  v11 = v6 & 0x100000;
  v12 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + v10 > 0x18)
  {
    *a1 = v12;
    a1 = (_QWORD *)(v12 + v10);
    swift_retain();
  }
  else
  {
    v15 = ~v7;
    v16 = a2[1];
    *a1 = v12;
    a1[1] = v16;
    v17 = (_OWORD *)(v8 & ((unint64_t)a1 + 23));
    v18 = (_OWORD *)(v8 & ((unint64_t)a2 + 23));
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v9) & v15;
    v20 = ((unint64_t)v18 + v9) & v15;
    v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v21(v19, v20, v4);
  }
  return a1;
}

uint64_t destroy for PlatformItemListReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 32) - 8);
  return (*(uint64_t (**)(unint64_t))(v4 + 8))((*(unsigned __int8 *)(v4 + 80)
                                                               + ((a1 + (*(unsigned __int8 *)(v4 + 80) | 7) + 16) & ~(*(unsigned __int8 *)(v4 + 80) | 7))
                                                               + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
}

_QWORD *initializeWithCopy for PlatformItemListReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v9 = (_OWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (_OWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v11 = ((unint64_t)v9 + v7 + 16) & ~v7;
  v12 = ((unint64_t)v10 + v7 + 16) & ~v7;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  v13(v11, v12, v5);
  return a1;
}

_QWORD *assignWithCopy for PlatformItemListReader(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 16;
  v10 = (_QWORD *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *v10 = *v11;
  v10[1] = v11[1];
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v10 + v8 + 16) & ~v8, ((unint64_t)v11 + v8 + 16) & ~v8);
  return a1;
}

_OWORD *initializeWithTake for PlatformItemListReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 16;
  v7 = (_OWORD *)(((unint64_t)a1 + v6) & ~(v5 | 7));
  v8 = (_OWORD *)(((unint64_t)a2 + v6) & ~(v5 | 7));
  *v7 = *v8;
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)v7 + v5 + 16) & ~v5, ((unint64_t)v8 + v5 + 16) & ~v5);
  return a1;
}

_OWORD *assignWithTake for PlatformItemListReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = *a2;
  swift_release();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 | 7) + 16;
  v9 = (_QWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  v10 = (_QWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *v9 = *v10;
  v9[1] = v10[1];
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v9 + v7 + 16) & ~v7, ((unint64_t)v10 + v7 + 16) & ~v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListReader(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  v9 = v7 + 16;
  v10 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v11 = (v9 & ~v7) + *(_QWORD *)(v4 + 64) + (v9 & ~v8);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(_WORD *)((char *)a1 + v11))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v7);
      v17 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v17) = -1;
      return (v17 + 1);
    }
  }
  v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((_BYTE *)a1 + v11))
    goto LABEL_22;
LABEL_15:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v6 + v16 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187410BD4 + 4 * byte_187C2E42A[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformItemListReader(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 32) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7));
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, ((v7 + 16) & ~v7) + *(_QWORD *)(v5 + 64) + ((v7 + 16) & ~(v7 | 7)));
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

void sub_187410EC4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187410EB0);
}

void sub_187410ECC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187410EB0);
}

void sub_187410EDC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187410EB0);
}

void type metadata accessor for PlatformItemListReader()
{
  JUMPOUT(0x18D75FF28);
}

void destroy for PlatformItemList.Item.SystemItem(uint64_t a1)
{
  outlined consume of PlatformItemList.Item.SystemItem(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
}

_QWORD *initializeWithCopy for PlatformItemList.Item.SystemItem(_QWORD *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  outlined copy of PlatformItemList.Item.SystemItem(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return a1;
}

uint64_t assignWithCopy for PlatformItemList.Item.SystemItem(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v25 = *(_QWORD *)(a2 + 80);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  outlined copy of PlatformItemList.Item.SystemItem(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25, v26, v27);
  v12 = *(void **)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v24;
  *(_QWORD *)(a1 + 80) = v25;
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  outlined consume of PlatformItemList.Item.SystemItem(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, SBYTE8(v21), v22);
  return a1;
}

uint64_t assignWithTake for PlatformItemList.Item.SystemItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)(a2 + 96);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 96) = v3;
  outlined consume of PlatformItemList.Item.SystemItem(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, SBYTE8(v13), v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemList.Item.SystemItem(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32) >> 2;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for PlatformItemList.Item.SystemItem(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = 4 * -a2;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for PlatformItemList.Item.SystemItem(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

uint64_t destructiveInjectEnumTag for PlatformItemList.Item.SystemItem(uint64_t result, uint64_t a2)
{
  if (a2 < 3)
  {
    *(_QWORD *)(result + 32) = *(_QWORD *)(result + 32) & 3 | (a2 << 62);
  }
  else
  {
    *(_QWORD *)result = (a2 - 3);
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0xC000000000000000;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SystemItem()
{
  return &type metadata for PlatformItemList.Item.SystemItem;
}

ValueMetadata *type metadata accessor for PlatformItemList.Key()
{
  return &type metadata for PlatformItemList.Key;
}

ValueMetadata *type metadata accessor for IsPlatformItemListSourcePredicate()
{
  return &type metadata for IsPlatformItemListSourcePredicate;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemListTransformModifier<A>()
{
  return &protocol witness table for PlatformItemListTransformModifier<A>;
}

_UNKNOWN **base witness table accessor for View in PlatformItemListReader<A, B, C>()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlatformItemListContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in PlatformItemLabelView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformItemListTextRepresentable.PlatformRepresentation.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  __int128 v12[4];
  char v13;
  _BYTE v14[184];
  _QWORD v15[23];

  v0 = type metadata accessor for PlatformItemList.Item();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(_QWORD *)AGGraphGetValue();
  v5 = PlatformTextRepresentableContext.text.getter();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v15);
  outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v12[0] = xmmword_187BF9840;
  memset(&v12[1], 0, 48);
  v13 = 0;
  v10 = 0uLL;
  v11 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(v5, (uint64_t)v14, v12, &v10, 0, 0, (uint64_t)v4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v4, v7 + v6);
  return v7;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTextRepresentable.PlatformRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PlatformItemListTextRepresentable.PlatformRepresentation.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListTextRepresentable.PlatformRepresentation()
{
  lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformTextRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListTextRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 2) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformTextRepresentable.representationOptions(inputs:) in conformance PlatformItemListTextRepresentable@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  unsigned __int8 v3;

  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListTextRepresentable()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  a2();
  a3();
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t PlatformItemListImageRepresentable.PlatformRepresentation.value.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *Value;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __int128 v22[4];
  char v23;
  _BYTE v24[184];
  _OWORD v25[10];
  _BYTE v26[19];
  _BYTE __dst[184];

  v0 = type metadata accessor for PlatformItemList.Item();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = (char *)AGGraphGetValue();
  v6 = *((_OWORD *)Value + 3);
  v8 = *(_OWORD *)Value;
  v7 = *((_OWORD *)Value + 1);
  v25[2] = *((_OWORD *)Value + 2);
  v25[3] = v6;
  v25[0] = v8;
  v25[1] = v7;
  v9 = *((_OWORD *)Value + 7);
  v11 = *((_OWORD *)Value + 4);
  v10 = *((_OWORD *)Value + 5);
  v25[6] = *((_OWORD *)Value + 6);
  v25[7] = v9;
  v25[4] = v11;
  v25[5] = v10;
  v13 = *((_OWORD *)Value + 9);
  v12 = *((_OWORD *)Value + 10);
  v14 = *((_OWORD *)Value + 8);
  *(_DWORD *)&v26[15] = *(_DWORD *)(Value + 175);
  v25[9] = v13;
  *(_OWORD *)v26 = v12;
  v25[8] = v14;
  memmove(__dst, Value, 0xB3uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst);
  outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v22[0] = xmmword_187BF9840;
  memset(&v22[1], 0, 48);
  v23 = 0;
  v20 = 0uLL;
  v21 = 0;
  v15 = AGGraphGetValue();
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v24, v22, &v20, *(_QWORD *)(v15 + 184), *(_QWORD *)(v15 + 192), (uint64_t)v4);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v4, v17 + v16);
  outlined retain of Image.Resolved((uint64_t)v25);
  swift_retain();
  swift_retain();
  return v17;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListImageRepresentable.PlatformRepresentation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = PlatformItemListImageRepresentable.PlatformRepresentation.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListImageRepresentable.PlatformRepresentation()
{
  lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListImageRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 1) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListImageRepresentable()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

_QWORD *closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[48];
  _QWORD v16[6];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE6B88], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v15[-v4];
  v6 = type metadata accessor for ImageResolutionContext();
  v7 = MEMORY[0x1E0CE5448];
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Value = AGGraphGetValue();
  v12 = *(_QWORD *)(Value + 16);
  v16[0] = *(_QWORD *)(Value + 8);
  v16[1] = v12;
  v13 = type metadata accessor for Text.Style();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  AGGraphGetValue();
  swift_retain();
  Image.resolveNamedImage(in:)();
  swift_release();
  outlined init with take of Image.Resolved?((uint64_t)v15, (uint64_t)v16, &lazy cache variable for type metadata for Image.NamedResolved?, MEMORY[0x1E0CE7260]);
  outlined release of PreferenceList.Value<EditMenuPresentation?>(v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Image.NamedResolved?);
  specialized PlatformItemList.modify(_:)(a1, v16);
  outlined release of PreferenceList.Value<EditMenuPresentation?>(v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Image.NamedResolved?);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))v7);
  return outlined release of PreferenceList.Value<EditMenuPresentation?>(v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Image.NamedResolved?);
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule((uint64_t)partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> (), a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule()
{
  lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformNamedImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListNamedImageRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 5) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformNamedImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemListNamedImageRepresentable()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable()
{
  return protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable();
}

{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PlatformSpacerRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListSpacerRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 3) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformDividerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListDividerRepresentable()
{
  return protocol witness for static PlatformSpacerRepresentable.makeRepresentation(inputs:outputs:) in conformance PlatformItemListSpacerRepresentable();
}

uint64_t implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)()
{
  uint64_t v0;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList();
  swift_retain();
  v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  __n128 v16;
  uint64_t v17;
  __int128 v18[4];
  char v19;
  _BYTE v20[184];
  uint64_t v21;
  _BYTE v22[184];

  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v15 - v9;
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x1E0DEE9D8];
  v15[2] = &v21;
  SizeFittingState.applyChildren(selectLast:to:)(0);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v22);
  outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v18[0] = xmmword_187BF9840;
  memset(&v18[1], 0, 48);
  v19 = 0;
  v16 = 0uLL;
  v17 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v20, v18, &v16, 0, 0, (uint64_t)v10);
  v11 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v10 + 77) = v11;
  outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v6);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v6, v13 + v12);
  *a1 = v13;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;

  v5 = type metadata accessor for PlatformItemList.Item();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *((_DWORD *)a1 + 2);
  v17 = *a1;
  v18 = v10;
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) == 0)
  {
    AGGraphGetValue();
    v11 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v11, (uint64_t)v9);
    swift_bridgeObjectRelease();
    v12 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      *a3 = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      v12 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1, v12);
      *a3 = v12;
    }
    v12[2] = v15 + 1;
    outlined init with take of PlatformItemList.Item((uint64_t)v9, (uint64_t)v12+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v15);
  }
  return 0;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter;
  *(_QWORD *)(v4 + 24) = v3;
  *a1 = thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply;
  a1[1] = v4;
  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList()
{
  lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList();
  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static PlatformViewThatFitsRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListViewThatFitsRepresentable(uint64_t a1)
{
  char v1;
  uint64_t result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 48);
  v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  result = 0;
  if ((v1 & 1) != 0)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 6) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:) in conformance PlatformItemListViewThatFitsRepresentable()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PlatformHiddenRepresentable.makeRepresentation(inputs:allowedKeys:) in conformance PlatformItemListHiddenRepresentable(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  if ((*a2 & 2) == 0)
    return PreferenceKeys.remove<A>(_:)();
  return result;
}

uint64_t implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  a2();
  type metadata accessor for (_:)();
  a3();
  return Attribute.init<A>(body:value:flags:update:)();
}

_BYTE *closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(_QWORD *a1)
{
  _BYTE *result;

  result = (_BYTE *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 2) == 0)
  {
    result = (_BYTE *)swift_bridgeObjectRelease();
    *a1 = MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule((uint64_t)partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter, (uint64_t)thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()partial apply, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, _QWORD *a3@<X8>)
{
  int *v3;
  int v7;
  uint64_t v8;
  uint64_t result;

  v7 = *v3;
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v7;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = v8;
  *a3 = a2;
  a3[1] = result;
  return result;
}

uint64_t protocol witness for static PlatformDynamicHiddenRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListDynamicHiddenRepresentable()
{
  return PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1;
}

uint64_t protocol witness for static PlatformDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:) in conformance PlatformItemListDynamicHiddenRepresentable()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

id outlined copy of PlatformItemList.Item.SystemItem?(id result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a5 >> 2 != 0xFFFFFFFF)
    return outlined copy of PlatformItemList.Item.SystemItem(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return result;
}

uint64_t outlined assign with take of PlatformItemList.Item.SystemItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_18741288C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  return swift_deallocObject();
}

uint64_t outlined copy of PlatformItemList.Item.Accessibility?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined copy of Image.Location(a3);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in PlatformItemList.containerSelectionBehavior.getter()
{
  uint64_t v0;

  return specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(*(_QWORD *)(v0 + 16));
}

uint64_t sub_187412988()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(char a1)
{
  uint64_t v1;

  return specialized closure #3 in PlatformItemList.containerSelectionBehavior.getter(a1 & 1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1874129B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned ()?) -> (@unowned Bool)@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result & 1;
  return result;
}

void partial apply for closure #1 in static PlatformItemListReader._makeView(view:inputs:)()
{
  closure #1 in static PlatformItemListReader._makeView(view:inputs:)();
}

uint64_t sub_187412A24()
{
  return 48;
}

__n128 sub_187412A30(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void type metadata accessor for PlatformItemListReader.Child()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<PlatformItemList.Key> and conformance _AnyPreferenceKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187412A98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed PlatformItemList) -> (@out B)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 64);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PlatformItemList) -> (@out B)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 64))(*a1);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListContentModifier, &type metadata for PlatformItemListContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  }
  return result;
}

uint64_t type metadata accessor for MergePlatformItemsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MergePlatformItemsView);
}

void type metadata accessor for PlatformItemListGeneratingViewModifier()
{
  JUMPOUT(0x18D75FF28);
}

void sub_187412B6C()
{
  type metadata accessor for PlatformItemLabelView();
}

uint64_t sub_187412BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = v2 + ((v5 + 64) & ~v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v6, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v6 + *(int *)(a1 + 68), v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6 + *(int *)(a1 + 72));
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in PlatformItemLabelView.body.getter()
{
  type metadata accessor for PlatformItemLabelView();
}

void sub_187412C70()
{
  uint64_t *v0;

  specialized PlatformItemLabelView.applyLabel(_:)(v0);
}

uint64_t specialized PlatformItemList.modify(_:)(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[184];
  _BYTE v20[192];

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v3)
  {
    v15 = (_QWORD *)result;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
      if (v2[2])
        goto LABEL_4;
    }
    else
    {
      result = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v2 = (_QWORD *)result;
      if (*(_QWORD *)(result + 16))
      {
LABEL_4:
        v4 = 0;
        v5 = *(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8);
        v6 = *(_QWORD *)(v5 + 72);
        v7 = v3 - 1;
        v8 = (_QWORD *)((char *)v2
                      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                      + 248);
        v9 = MEMORY[0x1E0CE7280];
        v16 = v7;
        v17 = v6;
        do
        {
          outlined init with take of Image.Resolved?((uint64_t)(v8 - 23), (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v9);
          outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v9);
          result = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v20);
          if ((_DWORD)result != 1)
          {
            v11 = *v8;
            v10 = v8[1];
            v12 = (void *)v8[2];
            outlined release of PreferenceList.Value<EditMenuPresentation?>(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Image.NamedResolved?);
            v13 = v10;
            v7 = v16;
            v14 = v12;
            v9 = MEMORY[0x1E0CE7280];
            outlined consume of Image.NamedResolved?(v11, v13, v14);
            v6 = v17;
            result = outlined init with take of Image.Resolved?((uint64_t)a2, (uint64_t)v8, &lazy cache variable for type metadata for Image.NamedResolved?, MEMORY[0x1E0CE7260]);
          }
          if (v7 == v4)
            goto LABEL_10;
          ++v4;
          v8 = (uint64_t *)((char *)v8 + v6);
        }
        while (v4 < v2[2]);
      }
    }
    __break(1u);
LABEL_10:
    *v15 = v2;
  }
  return result;
}

void specialized PlatformItemLabelView.applyLabel(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for PlatformItemList.Item();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (id *)((char *)&v24 - v9);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (id *)((char *)&v24 - v13);
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 16);
  if (v16)
  {
    v17 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    outlined init with copy of PlatformItemList.Item(v15 + v17, (uint64_t)&v24 - v13);
    if (v16 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = v15 + v17 + *(_QWORD *)(v3 + 72);
      v19 = *(void **)(v18 + 576);
      outlined init with copy of PlatformItemList.Item(v18, (uint64_t)v10);
      v20 = v19;
      if (!v19)
      {
        v20 = *v10;
        v21 = *v10;
      }
      v22 = v19;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      swift_bridgeObjectRelease();

      v14[72] = v20;
    }
    outlined init with copy of PlatformItemList.Item((uint64_t)v14, (uint64_t)v6);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_187BF9830;
    outlined init with take of PlatformItemList.Item((uint64_t)v6, v23 + v17);
    *a1 = v23;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
}

uint64_t sub_187412FC0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemSelector(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemSelector(_:)(a1, *(_QWORD *)(v1 + 16));
}

_QWORD *outlined retain of PlatformItemList.Item.SystemItem?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItemListDynamicHiddenRepresentable()
{
  return &type metadata for PlatformItemListDynamicHiddenRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListHiddenRepresentable()
{
  return &type metadata for PlatformItemListHiddenRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListViewThatFitsRepresentable()
{
  return &type metadata for PlatformItemListViewThatFitsRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListDividerRepresentable()
{
  return &type metadata for PlatformItemListDividerRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListSpacerRepresentable()
{
  return &type metadata for PlatformItemListSpacerRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListNamedImageRepresentable()
{
  return &type metadata for PlatformItemListNamedImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListImageRepresentable()
{
  return &type metadata for PlatformItemListImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemListTextRepresentable()
{
  return &type metadata for PlatformItemListTextRepresentable;
}

ValueMetadata *type metadata accessor for IsPlatformItemListSourceInput()
{
  return &type metadata for IsPlatformItemListSourceInput;
}

uint64_t assignWithTake for OnPlatformContainerSelectionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  if (!*(_QWORD *)a1)
  {
    if (v4)
    {
      v6 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = *((_BYTE *)a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  v10 = a2[7];
  v11 = *((_BYTE *)a2 + 64);
  v12 = *((_BYTE *)a2 + 65);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_BYTE *)(a1 + 65);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = v10;
  v17 = *(unsigned __int8 *)(a1 + 64);
  *(_BYTE *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 65) = v12;
  outlined consume of Environment<KeyboardShortcut?>.Content(v13, v14, v15, v17, v16);
  v18 = *((_BYTE *)a2 + 80);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(unsigned __int8 *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_BYTE *)(a1 + 80) = v18;
  outlined consume of Environment<ControlSize>.Content(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnPlatformContainerSelectionModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 81))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnPlatformContainerSelectionModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t destroy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1)
{
  swift_release();
  if (*(_QWORD *)(a1 + 8))
    swift_release();
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t initializeWithCopy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  swift_retain();
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *v5;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  return a1;
}

uint64_t assignWithCopy for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<ControlSize>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for OnPlatformContainerSecondaryNavigationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  swift_release();
LABEL_8:
  v7 = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of Environment<ControlSize>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnPlatformContainerSecondaryNavigationModifier(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OnPlatformContainerSecondaryNavigationModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for OnPlatformContainerSecondaryNavigationModifier()
{
  return &type metadata for OnPlatformContainerSecondaryNavigationModifier;
}

uint64_t getEnumTagSinglePayload for PlatformItemListGeneratingViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874135FC + 4 * byte_187C2E43C[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformItemListGeneratingViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t getEnumTagSinglePayload for MergePlatformItemsView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874138AC + 4 * byte_187C2E44A[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for MergePlatformItemsView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.ImageColorResolver()
{
  return &type metadata for PlatformItemList.Item.ImageColorResolver;
}

uint64_t storeEnumTagSinglePayload for PlatformItemList.Item.SelectionBehavior.VisualStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187413B08 + 4 * byte_187C2E45D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187413B3C + 4 * byte_187C2E458[v4]))();
}

uint64_t sub_187413B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187413B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187413B4CLL);
  return result;
}

uint64_t sub_187413B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187413B60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187413B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187413B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SelectionBehavior.VisualStyle()
{
  return &type metadata for PlatformItemList.Item.SelectionBehavior.VisualStyle;
}

void sub_187413B88(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v4 = a1[4];
  type metadata accessor for MergePlatformItemsView(255, a1[2], a1[5], a4);
  v5 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v8);
  type metadata accessor for MergePlatformItemsView(255, v5, v6, v7);
  type metadata accessor for PlatformItemListGeneratingViewModifier();
}

uint64_t sub_187413C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[16];

  v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for PlatformItemListTransformModifier(255, v1, v2, v5);
  v6 = type metadata accessor for ModifiedContent();
  v9[0] = v3;
  v9[1] = &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
  v8[0] = MEMORY[0x18D75FFDC](v0, v4, v9);
  v8[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
  return MEMORY[0x18D75FFDC](v0, v6, v8);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = &protocol witness table for HiddenModifierAllowingPlatformItemList;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>, HiddenModifierAllowingPlatformItemList>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemListContentModifier>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<PlatformItemListContentModifier>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
    v3[1] = MEMORY[0x1E0CE1A80];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PlatformItemListContentModifier>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemList.Item.SelectionBehavior.VisualStyle, &type metadata for PlatformItemList.Item.SelectionBehavior.VisualStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemList.Item.SelectionBehavior.VisualStyle and conformance PlatformItemList.Item.SelectionBehavior.VisualStyle);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in MergePlatformItemsView<A>()
{
  return &protocol witness table for MergePlatformItemsView<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemListGeneratingViewModifier<A, B>()
{
  return &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnPlatformContainerSecondaryNavigationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnPlatformContainerSelectionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in PlatformItemListReader<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in PlatformItemListTransformModifier<A>.Transform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static MergePlatformItemsView._makeView(view:inputs:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for MergePlatformItemsView.Transform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MergePlatformItemsView.Transform);
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTextRepresentable.PlatformRepresentation, &unk_1E1B032A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTextRepresentable.PlatformRepresentation, &unk_1E1B032A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextRepresentable.PlatformRepresentation and conformance PlatformItemListTextRepresentable.PlatformRepresentation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncludesStyledText, &type metadata for IncludesStyledText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncludesStyledText, &type metadata for IncludesStyledText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncludesStyledText, &type metadata for IncludesStyledText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncludesStyledText, &type metadata for IncludesStyledText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText;
  if (!lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncludesStyledText, &type metadata for IncludesStyledText);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncludesStyledText and conformance IncludesStyledText);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListImageRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static PlatformItemListTextRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListImageRepresentable.PlatformRepresentation, &unk_1E1B04978);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation;
  if (!lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListImageRepresentable.PlatformRepresentation, &unk_1E1B04978);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListImageRepresentable.PlatformRepresentation and conformance PlatformItemListImageRepresentable.PlatformRepresentation);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListNamedImageRepresentable.NamedResolvedRule, &unk_1E1B087F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule;
  if (!lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListNamedImageRepresentable.NamedResolvedRule, &unk_1E1B087F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListNamedImageRepresentable.NamedResolvedRule and conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule);
  }
  return result;
}

uint64_t outlined consume of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_187414170()
{
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(uint64_t a1)
{
  return closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(a1);
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)()
{
  return implicit closure #1 in static PlatformItemListViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList, &unk_1E1B09448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList, &unk_1E1B09448);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList and conformance PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(a1, a2, *(_QWORD ***)(v2 + 16));
}

uint64_t partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1)
{
  return closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(a1);
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static PlatformItemListNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(*(unsigned int *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform);
}

unint64_t lazy protocol witness table accessor for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform;
  if (!lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform, &unk_1E1B09768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform and conformance PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform);
  }
  return result;
}

uint64_t sub_187414260()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(_QWORD *a1)
{
  return closure #1 in PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform.value.getter(a1);
}

uint64_t partial apply for closure #1 in PlatformItemListReader.init(flags:content:source:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in PlatformItemListReader.init(flags:content:source:)(v1[8], v1[9], v1[4], v1[7], a1);
}

void partial apply for closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)()
{
  closure #1 in static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t partial apply for closure #1 in PlatformItemListReader.Child.value.getter()
{
  uint64_t *v0;

  return closure #1 in PlatformItemListReader.Child.value.getter(v0[8], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_1874142BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemHierarchicalLevel(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in View.platformItemHierarchicalLevel(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1874142D4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(unsigned __int8 *)(v0 + 80), *(_BYTE *)(v0 + 81));
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 88), *(unsigned __int8 *)(v0 + 96));
  return swift_deallocObject();
}

uint64_t outlined retain of OnPlatformContainerSelectionModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 65);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(unsigned __int8 *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 64);
  outlined copy of AppIntentExecutor?(*(_QWORD *)a1);
  outlined copy of Environment<ControlSize>.Content(v2, v3);
  outlined copy of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined copy of Environment<ControlSize>.Content(v8, v9);
  return a1;
}

uint64_t sub_1874143C8()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in OnPlatformContainerSecondaryNavigationModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of Environment<Bool>(uint64_t a1)
{
  outlined copy of Environment<ControlSize>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return a1;
}

uint64_t outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  }
  return result;
}

uint64_t sub_187414474()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  if (*(_QWORD *)(v0 + 120))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(a1, (_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_BYTE *)(v1 + 136), *(_BYTE *)(v1 + 137));
}

void *type metadata accessor for PlatformItemListDynamicHiddenRepresentable.PlatformItemListTransform()
{
  return &unk_1E1B09768;
}

void *type metadata accessor for PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList()
{
  return &unk_1E1B09448;
}

void *type metadata accessor for PlatformItemListNamedImageRepresentable.NamedResolvedRule()
{
  return &unk_1E1B087F0;
}

void *type metadata accessor for PlatformItemListImageRepresentable.PlatformRepresentation()
{
  return &unk_1E1B04978;
}

void *type metadata accessor for PlatformItemListTextRepresentable.PlatformRepresentation()
{
  return &unk_1E1B032A8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    v2[0] = &protocol witness table for MergePlatformItemsView<A>;
    v2[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

void type metadata accessor for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnPlatformContainerSelectionModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
    v6 = type metadata accessor for MergePlatformItemsView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnPlatformContainerSecondaryNavigationModifier>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

unint64_t lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier;
  if (!lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnPlatformContainerSecondaryNavigationModifier, &type metadata for OnPlatformContainerSecondaryNavigationModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
  }
  return result;
}

void base witness table accessor for _AttributeBody in MergePlatformItemsView<A>.Transform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t FocusState.Binding.propertyID.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for FocusStoreLocation(0, v4, v5, a4);
  if (swift_dynamicCastClass())
    return FocusStoreLocation.id.getter();
  else
    return type metadata accessor for FocusState.Binding.PrivateType(0, v4, v5, v6);
}

uint64_t EnvironmentValues.focusBridge.getter()
{
  uint64_t v0;
  uint64_t Strong;
  _BYTE v3[8];

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<FocusBridge>((uint64_t)v3);
  return Strong;
}

uint64_t View.focused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v7;
  _QWORD v8[2];
  char v9;

  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  v7 = 1;
  return View.focused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E0DEAFA0], a5, MEMORY[0x1E0DEAFB0], a6);
}

uint64_t FocusState.init<>()()
{
  return 0;
}

uint64_t FocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized FocusState.Binding.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void FocusState.Binding.wrappedValue.getter()
{
  type metadata accessor for Binding();
  JUMPOUT(0x18D75B9C8);
}

void (*FocusState.Binding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v5[4] = malloc(v8);
  v9 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v9);
  return FocusState.Binding.wrappedValue.modify;
}

void FocusState.Binding.wrappedValue.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t FocusState.Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t FocusState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusState.getValue(forReading:)(1, a1, a2);
}

uint64_t FocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized SceneStorage.wrappedValue.setter(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t FocusState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (!*(_QWORD *)(v3 + *(int *)(a2 + 36)))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3);
  type metadata accessor for GraphHost();
  swift_retain();
  if ((static GraphHost.isUpdating.getter() & 1) != 0)
  {
    if ((a1 & 1) != 0)
      dispatch thunk of AnyLocation.wasRead.setter();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3);
  }
  dispatch thunk of AnyLocation.get()();
  return swift_release();
}

void (*FocusState.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  FocusState.getValue(forReading:)(1, a2, (uint64_t)v9);
  return SceneStorage.wrappedValue.modify;
}

uint64_t FocusState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Binding();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v22 - v18;
  FocusState.getValue(forReading:)(0, a1, (uint64_t)&v22 - v18);
  if (*(_QWORD *)(v2 + *(int *)(a1 + 36)))
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v19, v5);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    v20 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v10, v6);
}

uint64_t static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6, a7);
}

uint64_t FocusState.init<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v6 = type metadata accessor for Optional();
  v12 = a2;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v6, &v12);
  v9 = type metadata accessor for FocusState(0, v6, v7, v8);
  *(_QWORD *)(a3 + *(int *)(v9 + 36)) = 0;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v10(a3, 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(a3 + *(int *)(v9 + 40), 1, 1, a1);
}

uint64_t FocusState.Box.store.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;

  if (*MEMORY[0x1E0CFED28] == (_DWORD)result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v4 = *(_QWORD *)(Value + 8);
    v5 = *(_QWORD *)(Value + 16);
    *(_DWORD *)a2 = *(_DWORD *)Value;
    a2[1] = v4;
    a2[2] = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void FocusState.Box.focusedItem.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(void);
  uint64_t Value;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(int64x2_t *)(a2 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a2 + 56) = 0;
  }
  else
  {
    v3 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    outlined init with copy of AccessibilityScrollableContext?(Value, a2, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))v3);
  }
}

Swift::Void __swiftcall FocusState.Box.reset()()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 8) = 0;
}

uint64_t FocusState.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[40];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  v32 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v3[1];
  HIDWORD(v31) = v11 == 0;
  v12 = *(_QWORD *)(v7 + 24);
  v13 = v11;
  if (!v11)
  {
    v15 = type metadata accessor for FocusState(0, v6, *(_QWORD *)(v7 + 24), v8);
    if (*(_QWORD *)(a1 + *(int *)(v15 + 36))
      && (type metadata accessor for FocusStoreLocation(0, v6, v12, v14), (v16 = swift_dynamicCastClass()) != 0))
    {
      v13 = v16;
      swift_retain();
    }
    else
    {
      type metadata accessor for FocusStoreLocation(0, v6, v12, v14);
      type metadata accessor for GraphHost();
      v17 = MEMORY[0x18D75C118]();
      v13 = specialized FocusStoreLocation.__allocating_init(host:resetValue:)(v17, a1 + *(int *)(v15 + 40));
      swift_release();
    }
    v4[1] = v13;
  }
  v18 = *v4;
  FocusState.Box.store.getter(*v4, &v36);
  v19 = v37;
  if (v37)
  {
    v20 = v38;
    v21 = v36;
  }
  else
  {
    v19 = MEMORY[0x1E0DEE9D8];
    v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v21 = 0;
  }
  *(_DWORD *)(v13 + 16) = v21;
  *(_QWORD *)(v13 + 24) = v19;
  *(_QWORD *)(v13 + 32) = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  FocusState.Box.focusedItem.getter(v18, (uint64_t)v33);
  if (v34 == 1 && v35 == 1)
  {
    result = outlined destroy of FocusItem??((uint64_t)v33);
    v24 = 0;
  }
  else
  {
    outlined init with take of Binding<SearchFieldState>((uint64_t)v33, (uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
    if (v39 || v40 != 1)
    {
      v24 = v41;
      result = outlined destroy of FocusItem((uint64_t)&v36);
    }
    else
    {
      result = outlined destroy of AccessibilityScrollableContext?((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v24 = 0;
    }
  }
  *(_DWORD *)(v13 + *(_QWORD *)(class metadata base offset for FocusStoreLocation + *(_QWORD *)v13 + 40)) = v24;
  if (!v4[1])
  {
    __break(1u);
    goto LABEL_28;
  }
  v25 = FocusStoreLocation.update()(v10, v23);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 24))(a1, v10, v6);
  v27 = v4[1];
  if (!v27)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v28 = *(int *)(type metadata accessor for FocusState(0, v6, v12, v26) + 36);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + v28) = v27;
  if (*MEMORY[0x1E0CFED28] == *(_DWORD *)v4 || (result = AGGraphGetValue(), (v29 & 1) != 0))
  {
    swift_weakInit();
    specialized closure #1 in FocusState.Box.update(property:phase:)();
    result = swift_weakDestroy();
  }
  if (!v25)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v6);
    v30 = BYTE4(v31);
    return v30 & 1;
  }
  if (v4[1])
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v6);
    v30 = (v11 == 0) | FocusStoreLocation.wasRead.getter();
    return v30 & 1;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in FocusState.Box.update(property:phase:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    FocusStoreLocation.performDeferredUpdate()();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance FocusState<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

uint64_t View.focused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a5;
  v29 = a7;
  v30 = a3;
  v27 = a1;
  v28 = a2;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FocusState.Binding(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - v17;
  v20 = type metadata accessor for FocusStateBindingModifier(0, a4, a6, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v27 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v27, v14, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v28, a4);
  FocusStateBindingModifier.init(binding:value:)((uint64_t)v18, (uint64_t)v11, a4, a6, (uint64_t)v25);
  MEMORY[0x18D75B4AC](v25, v30, v20, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v20);
}

uint64_t FocusStateBindingModifier.init(binding:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = type metadata accessor for FocusState.Binding(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for FocusStateBindingModifier(0, a3, a4, v11) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v12, a2, a3);
}

void FocusStateBindingModifier.ListItemFilter.focusItem.getter(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(void);
  uint64_t Value;

  if (*MEMORY[0x1E0CFED28] == a1)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(int64x2_t *)(a2 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a2 + 56) = 0;
  }
  else
  {
    v3 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Value = AGGraphGetValue();
    outlined init with copy of AccessibilityScrollableContext?(Value, a2, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))v3);
  }
}

uint64_t FocusStateBindingModifier.ListItemFilter.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t (*v22)(void);
  uint64_t *Value;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[5];
  uint64_t v78;
  uint64_t v79;
  char v80;
  _QWORD v81[9];

  v81[8] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v69 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v8 = type metadata accessor for FocusState.Binding(0, v3, v6, v7);
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v73 = (char *)&v62 - v10;
  v76 = v3;
  v11 = v3;
  v12 = v2;
  v13 = v6;
  v15 = type metadata accessor for FocusStateBindingModifier(0, v11, v6, v14);
  v65 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v66 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v67 = (char *)&v62 - v20;
  v72 = *(_QWORD *)(v2 + 8);
  AGGraphGetValue();
  v64 = v21;
  v22 = MEMORY[0x1E0DEAEC8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  Value = (uint64_t *)AGGraphGetValue();
  v63 = v24;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E0CE7DD0], (uint64_t (*)(_QWORD, uint64_t))v22);
  v25 = (uint64_t *)AGGraphGetValue();
  v62 = v26;
  v27 = *Value;
  v28 = (unint64_t)*Value >> 62;
  v71 = *v25;
  if (!v28)
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v29)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_25;
LABEL_3:
  if ((v27 & 0xC000000000000001) != 0)
  {
LABEL_26:
    v30 = MEMORY[0x18D75E3BC](0, v27);
    goto LABEL_6;
  }
  if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_28:
    __break(1u);
  }
  v30 = *(_QWORD *)(v27 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  v31 = swift_conformsToProtocol2();
  if (!v31)
    goto LABEL_28;
  v32 = v31;
  FocusStateBindingModifier.ListItemFilter.focusItem.getter(v72, (uint64_t)v81);
  v70 = v30;
  if (v81[5] == 1 && v81[6] == 1)
  {
    outlined destroy of FocusItem??((uint64_t)v81);
    if ((*(_BYTE *)(v2 + 20) & 1) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  outlined init with take of Binding<SearchFieldState>((uint64_t)v81, (uint64_t)v77, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  if (v78 || v79 != 1)
  {
    v34 = swift_retain();
    v33 = FocusItem.inFocusedResponderChain(_:)(v34);
    swift_release();
    outlined destroy of FocusItem((uint64_t)v77);
    if ((v33 & 1) != *(_BYTE *)(v12 + 20))
      goto LABEL_16;
  }
  else
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v77, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if ((*(_BYTE *)(v2 + 20) & 1) != 0)
    {
LABEL_14:
      v33 = 0;
LABEL_16:
      *(_BYTE *)(v12 + 20) = v33 & 1;
LABEL_22:
      v35 = AGGraphGetValue();
      v36 = v65;
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      v63 = v32;
      v38 = v67;
      v37(v67, v35, v15);
      v64 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
      v72 = v13;
      v39 = (uint64_t)v73;
      v64(v73, v38, v75);
      v40 = *(void (**)(char *, uint64_t))(v36 + 8);
      v40(v38, v15);
      v41 = AGGraphGetValue();
      v42 = v66;
      v37(v66, v41, v15);
      v43 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v68 + 2);
      v44 = (uint64_t)v69;
      v45 = v12;
      v46 = v76;
      v43(v69, &v42[*(int *)(v15 + 36)], v76);
      v40(v42, v15);
      v68 = FocusStateBindingUpdateAction.init<A>(binding:value:)(v39, v44, v46, v72);
      v66 = v47;
      v48 = AGGraphGetValue();
      v37(v38, v48, v15);
      v43((char *)v44, &v38[*(int *)(v15 + 36)], v46);
      v40(v38, v15);
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for FocusBridge?, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      v49 = (uint64_t *)AGGraphGetValue();
      v50 = specialized FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(v44, v70, v63, *v49, v71, v46, v72);
      v76 = v51;
      DisplayList.Version.init(forUpdate:)();
      v52 = v81[0];
      v53 = AGGraphGetValue();
      v37(v38, v53, v15);
      v54 = v73;
      v55 = v75;
      v64(v73, v38, v75);
      v40(v38, v15);
      v59 = FocusState.Binding.propertyID.getter(v55, v56, v57, v58);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v55);
      LOBYTE(v55) = *(_BYTE *)(v45 + 20);
      v77[0] = v52;
      v77[1] = v59;
      v77[2] = v68;
      v77[3] = v66;
      v77[4] = v50;
      v78 = v76;
      swift_weakInit();
      swift_weakInit();
      v80 = v55;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_187BF9830;
      outlined init with take of FocusStoreList.Item((uint64_t)v77, v60 + 32);
      v77[0] = v60;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
LABEL_17:
  if ((v64 & 1) != 0 || (v63 & 1) != 0 || (v62 & 1) != 0 || !AGGraphGetOutputValue())
    goto LABEL_22;
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t (*FocusStateBindingModifier.ListTransform.value.getter())(uint64_t a1)
{
  uint64_t v0;

  v0 = *(_QWORD *)AGGraphGetValue();
  *(_QWORD *)(swift_allocObject() + 16) = v0;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in FocusStateBindingModifier.ListTransform.value.getter;
}

uint64_t closure #1 in FocusStateBindingModifier.ListTransform.value.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  _BYTE v7[72];
  _BYTE v8[72];

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = result;
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    v5 = MEMORY[0x1E0DEC628];
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v8);
      outlined init with copy of AccessibilityScrollableContext?((uint64_t)v8, (uint64_t)v7, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))v5);
      specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v7);
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, (uint64_t (*)(_QWORD, uint64_t))v5);
      v4 += 72;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusStateBindingModifier<A>.ListTransform@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = FocusStateBindingModifier.ListTransform.value.getter();
  v4 = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  a1[1] = (uint64_t (*)())result;
  return result;
}

double static FocusStateBindingModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double result;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  double *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double v79;
  _OWORD v80[2];
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;

  v67 = a4;
  v68 = a5;
  v110 = *MEMORY[0x1E0C80C00];
  LODWORD(v59) = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v19 = *(_DWORD *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 68);
  v20 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 80);
  v66 = v7;
  *(_QWORD *)&v82 = v7;
  v23 = v8;
  DWORD2(v82) = v8;
  v24 = v9;
  *(_QWORD *)&v83 = v9;
  v25 = v10;
  *((_QWORD *)&v83 + 1) = __PAIR64__(v11, v10);
  v74 = v12;
  v75 = v11;
  v84 = __PAIR64__(v13, v12);
  v72 = v19;
  v73 = v13;
  v26 = v14;
  v85 = v14;
  v86 = v15;
  v87 = v17;
  v64 = v22;
  v65 = v16;
  v88 = v16;
  v89 = v19;
  v70 = v20;
  v71 = v18;
  v90 = v18;
  v91 = v20;
  v69 = v21;
  v92 = v21;
  v93 = v22;
  a3(&v78);
  v27 = v15;
  *(_QWORD *)&v82 = v15;
  v28 = v17;
  DWORD2(v82) = v17;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    v55 = a6;
    v29 = v66;
    *(_QWORD *)&v82 = v66;
    v61 = v28;
    v62 = v23;
    DWORD2(v82) = v23;
    v63 = v24;
    *(_QWORD *)&v83 = v24;
    v56 = v25;
    *((_QWORD *)&v83 + 1) = __PAIR64__(v75, v25);
    v84 = __PAIR64__(v73, v74);
    v30 = v26;
    v85 = v26;
    v86 = v27;
    v60 = v27;
    v87 = v28;
    v32 = v64;
    v31 = v65;
    v88 = v65;
    v89 = v72;
    v90 = v71;
    v91 = v70;
    v92 = v69;
    v93 = v64;
    v76 = v78;
    v77 = v79;
    type metadata accessor for FocusStateBindingResponder();
    v33 = swift_allocObject();
    swift_weakInit();
    *(_QWORD *)(v33 + 216) = MEMORY[0x1E0DEE9D8];
    v34 = v29;
    swift_retain_n();
    v35 = v63;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v36 = v60;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(_QWORD *)(v33 + 264) = 0;
    *(_QWORD *)(v33 + 272) = 0;
    *(_BYTE *)(v33 + 280) = 1;
    *(_QWORD *)(v33 + 288) = 0;
    swift_release();
    v94 = v34;
    v95 = v62;
    v96 = v35;
    v97 = v56;
    v98 = v75;
    v99 = v74;
    v100 = v73;
    v101 = v30;
    v102 = v36;
    v103 = v61;
    v104 = v31;
    v105 = v72;
    v106 = v71;
    v107 = v70;
    v108 = v69;
    v109 = v32;
    v37 = DefaultLayoutViewResponder.init(inputs:)();
    specialized FocusStateBindingResponderFilter.init(inputs:outputs:responder:)(v37, (uint64_t)v80);
    v82 = v80[0];
    v83 = v80[1];
    v84 = v81;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter();
    v58 = Attribute.init<A>(body:value:flags:update:)();
    outlined release of TouchEvent((uint64_t)v80);
    LODWORD(v82) = v59;
    type metadata accessor for FocusStateBindingModifier(255, v67, v68, v38);
    type metadata accessor for _GraphValue();
    LODWORD(v59) = _GraphValue.value.getter();
    lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    v57 = v30;
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    v54 = v82;
    *(_QWORD *)&v82 = v34;
    DWORD2(v82) = v62;
    *(_QWORD *)&v83 = v63;
    *((_QWORD *)&v83 + 1) = __PAIR64__(v75, v56);
    v84 = __PAIR64__(v73, v74);
    v85 = v30;
    v86 = v36;
    v87 = v61;
    v88 = v65;
    v89 = v72;
    v90 = v71;
    v91 = v70;
    v92 = v69;
    v93 = v64;
    swift_getKeyPath();
    v53 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *(_QWORD *)&v82 = v66;
    DWORD2(v82) = v62;
    *(_QWORD *)&v83 = v63;
    *((_QWORD *)&v83 + 1) = __PAIR64__(v75, v56);
    v84 = __PAIR64__(v73, v74);
    v85 = v30;
    v86 = v60;
    v87 = v61;
    v88 = v65;
    v39 = v71;
    LODWORD(v34) = v72;
    v89 = v72;
    v90 = v71;
    LODWORD(v30) = v69;
    LODWORD(v35) = v70;
    v91 = v70;
    v92 = v69;
    v40 = v64;
    v93 = v64;
    swift_getKeyPath();
    LODWORD(v33) = _ViewInputs.mapEnvironment<A>(_:)();
    v41 = swift_release();
    *(_QWORD *)&v82 = __PAIR64__(v58, v59);
    v59 = v58;
    *((_QWORD *)&v82 + 1) = __PAIR64__(v53, v54);
    LODWORD(v83) = v33;
    BYTE4(v83) = 0;
    MEMORY[0x1E0C80A78](v41, v42);
    v51 = type metadata accessor for FocusStateBindingModifier.ListItemFilter(0, v67, v68, v43);
    v52 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStateBindingModifier<A>.ListItemFilter, v51);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<FocusStoreList>, (uint64_t)&type metadata for FocusStoreList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v82, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_18, (uint64_t)v50, v51, MEMORY[0x1E0DEDCE8], v44, MEMORY[0x1E0DEDD18], v45);
    v54 = v94;
    v94 = v66;
    LODWORD(v36) = v61;
    v95 = v62;
    v96 = v63;
    v97 = v56;
    v98 = v75;
    v99 = v74;
    v100 = v73;
    v46 = v60;
    v101 = v57;
    v102 = v60;
    v103 = v61;
    v104 = v65;
    v105 = v34;
    v106 = v39;
    v107 = v35;
    v108 = v30;
    v109 = v40;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)(&v94, v58, (uint64_t)&v82);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v82);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v82) = 0;
    v47 = _ViewOutputs.subscript.setter();
    *(_QWORD *)&v82 = v46;
    DWORD2(v82) = v36;
    MEMORY[0x1E0C80A78](v47, v48);
    v50[0] = v67;
    v50[1] = v68;
    LODWORD(v51) = v54;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    a6 = v55;
  }
  *(_QWORD *)a6 = v78;
  result = v79;
  a6[1] = v79;
  return result;
}

uint64_t FocusStateBindingResponder.__allocating_init(inputs:)()
{
  swift_allocObject();
  return FocusStateBindingResponder.init(inputs:)();
}

uint64_t key path getter for EnvironmentValues.focusScopes : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.focusScopes.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.focusScopes : EnvironmentValues()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v10 = type metadata accessor for FocusStateBindingModifier.ListTransform(0, a2, a3, a4);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStateBindingModifier<A>.ListTransform, v10);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_18, (uint64_t)v9, v10, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance FocusStateBindingModifier<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static FocusStateBindingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance FocusStateBindingModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStateBindingModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t FocusStateBindingResponder.init(inputs:)()
{
  uint64_t v0;

  swift_weakInit();
  *(_QWORD *)(v0 + 216) = MEMORY[0x1E0DEE9D8];
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  *(_QWORD *)(v0 + 288) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t FocusStateBindingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  swift_allocObject();
  return FocusStateBindingResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusStateBindingResponder.init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  swift_weakInit();
  *(_QWORD *)(v0 + 216) = MEMORY[0x1E0DEE9D8];
  swift_retain();
  ViewTransform.init()();
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  *(_QWORD *)(v0 + 288) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void FocusStateBindingResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t FocusStateBindingResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:) dispatching to FocusStateBindingResponder.__allocating_init(inputs:)()
{
  type metadata accessor for FocusStateBindingResponder();
  swift_allocObject();
  return FocusStateBindingResponder.init(inputs:)();
}

uint64_t vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:) dispatching to FocusStateBindingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  type metadata accessor for FocusStateBindingResponder();
  swift_allocObject();
  return FocusStateBindingResponder.init(inputs:viewSubgraph:)();
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance FocusStateBindingResponder()
{
  specialized FocusStateBindingResponder.hostedItem.getter();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusStateBindingResponder()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 280);
}

uint64_t protocol witness for AnyUIKitHostedFocusItemResponder.hostedItem.getter in conformance FocusStateBindingResponder()
{
  specialized FocusStateBindingResponder.hostedItem.getter();
  return swift_unknownObjectRetain();
}

uint64_t FocusStateBindingResponderFilter.updateValue()()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t *Value;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  if ((v1 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for FocusBridge?, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  AGGraphGetValue();
  swift_weakAssign();
  v2 = *(_QWORD *)(v0 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Namespace.ID], MEMORY[0x1E0CE7DD0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  *(_QWORD *)(v2 + 216) = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  v4 = v3;
  Value = (uint64_t *)AGGraphGetValue();
  v7 = v6;
  v8 = *Value;
  v9 = Value[1];
  v10 = Value[2];
  v11 = Value[3];
  v12 = Value[4];
  AGGraphGetValue();
  v14 = v13;
  v16 = *(_BYTE *)AGGraphGetValue();
  if ((v4 & 1) != 0 || (v7 & 1) != 0 || (v14 & 1) != 0 || (v15 & 1) != 0 || !AGGraphGetOutputValue())
  {
    *(_QWORD *)&v26 = v9;
    *((_QWORD *)&v26 + 1) = v10;
    *(_QWORD *)&v27 = v11;
    *((_QWORD *)&v27 + 1) = v12;
    v17 = swift_retain_n();
    *(double *)&v18 = MEMORY[0x18D755E9C](v17);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v19, v18));
    *(_QWORD *)(v2 + 224) = v8;
    *(_OWORD *)(v2 + 232) = v26;
    *(_OWORD *)(v2 + 248) = v27;
    swift_retain();
    v20 = swift_release();
    v21 = MEMORY[0x18D75BE3C](v20);
    v23 = v22;
    swift_release();
    *(double *)(v2 + 264) = v21;
    *(_QWORD *)(v2 + 272) = v23;
    *(_BYTE *)(v2 + 280) = v16;
  }
  else
  {
    swift_retain();
  }
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v25 + 32) = v2;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FocusBridgeKey()
{
  swift_weakInit();
  return swift_weakAssign();
}

uint64_t specialized FocusStateBindingResponder.hostedItem.getter()
{
  uint64_t v0;
  uint64_t result;
  objc_class *v2;
  objc_class *v3;
  _BYTE *v4;
  _OWORD *v5;
  id v6;
  void *v7;
  objc_super v8;

  result = *(_QWORD *)(v0 + 288);
  if (!result)
  {
    type metadata accessor for UIKitContainerFocusResponderItem<FocusStateBindingResponder>(0);
    v3 = v2;
    v4 = objc_allocWithZone(v2);
    swift_weakInit();
    swift_unknownObjectWeakInit();
    v5 = &v4[direct field offset for UIKitContainerFocusResponderItem.frame];
    *v5 = 0u;
    v5[1] = 0u;
    v4[direct field offset for UIKitContainerFocusResponderItem.isEnabled] = 1;
    *(_QWORD *)&v4[direct field offset for UIKitContainerFocusResponderItem.cachedCoordinateSpace] = 0;
    swift_weakAssign();
    v8.receiver = v4;
    v8.super_class = v3;
    v6 = objc_msgSendSuper2(&v8, sel_init);
    v7 = *(void **)(v0 + 288);
    *(_QWORD *)(v0 + 288) = v6;

    return *(_QWORD *)(v0 + 288);
  }
  return result;
}

uint64_t specialized FocusStateBindingResponderFilter.init(inputs:outputs:responder:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v9 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_retain();
  v6 = _ViewInputs.transform.getter();
  v5 = _ViewInputs.animatedPosition()();
  v4 = _ViewInputs.animatedSize()();
  swift_getKeyPath();
  v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *(_DWORD *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(_DWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = a1;
  *(_DWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = v4;
  *(_DWORD *)(a2 + 36) = v2;
  return result;
}

uint64_t specialized EnvironmentValues.focusBridge.setter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[8];

  swift_weakInit();
  swift_weakAssign();
  outlined init with take of Binding<SearchFieldState>((uint64_t)&v2, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t)type metadata accessor for FocusBridge, (uint64_t)MEMORY[0x1E0CE77D8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  outlined init with copy of WeakBox<FocusBridge>((uint64_t)v3, (uint64_t)&v2);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<FocusBridge>((uint64_t)v3);
}

uint64_t specialized FocusState.Binding.wrappedValue.setter()
{
  type metadata accessor for Binding();
  return specialized Binding.wrappedValue.setter();
}

uint64_t specialized FocusState.Binding.location.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FocusStoreLocation(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  return swift_dynamicCastClassUnconditional();
}

uint64_t specialized static FocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = type metadata accessor for FocusState.Box(0, a4, a6, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusState<A>.Box, v9);
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

uint64_t type metadata accessor for FocusState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusState);
}

uint64_t type metadata accessor for FocusState.Binding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusState.Binding);
}

uint64_t type metadata accessor for FocusStateBindingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStateBindingModifier);
}

void sub_18741797C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  keypath_getTm_3(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for FocusState.Binding, (void (*)(uint64_t))FocusState.Binding.wrappedValue.getter);
}

uint64_t sub_187417990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FocusState.Binding(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized FocusState.Binding.wrappedValue.setter();
}

uint64_t sub_1874179CC()
{
  return 16;
}

__n128 sub_1874179D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1874179E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  keypath_getTm_3(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for FocusState, (void (*)(uint64_t))FocusState.wrappedValue.getter);
}

void keypath_getTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), void (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = a4(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8));
  a5(v6);
  JUMPOUT(0x187417A2CLL);
}

uint64_t sub_187417A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for FocusState(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return specialized SceneStorage.wrappedValue.setter(a1, v5);
}

uint64_t sub_187417A78()
{
  return 16;
}

__n128 sub_187417A84(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for FocusState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + v7 > 0x18)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = (_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v14 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v13 = *v14;
    v15 = ((unint64_t)v13 + v8 + 8) & ~v8;
    v16 = ((unint64_t)v14 + v8 + 8) & ~v8;
    swift_retain();
    v12((uint64_t *)v15, (uint64_t *)v16, v5);
  }
  return v4;
}

uint64_t destroy for FocusState(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v7)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v7 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v7(a1, v3);
  v5 = (a1 + *(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return v7((v5 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

uint64_t initializeWithCopy for FocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = ((unint64_t)v9 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v10 + v11 + 8) & ~v11;
  swift_retain();
  v7(v12, v13, v5);
  return a1;
}

unint64_t assignWithCopy for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_retain();
  swift_release();
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t initializeWithTake for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t assignWithTake for FocusState(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  v9 = (_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  swift_release();
  v7(((unint64_t)v9 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + v7;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0x7FFFFFFE)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187417FB4 + 4 * byte_187C2F4F0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for FocusState(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata completion function for FocusState.Binding()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FocusState.Binding(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
  }
  return a1;
}

uint64_t destroy for FocusState.Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for FocusState.Binding(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *assignWithCopy for FocusState.Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *initializeWithTake for FocusState.Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *assignWithTake for FocusState.Binding(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *v6 = *(_QWORD *)v5;
  swift_release();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + v5) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusState.Binding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874186C0 + 4 * byte_187C2F4FE[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for FocusState.Binding(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for FocusStateBindingResponder()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FocusStateBindingResponder;
  if (!type metadata singleton initialization cache for FocusStateBindingResponder)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for FocusStateBindingResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for FocusStateBindingResponder()
{
  return type metadata accessor for FocusStateBindingResponder();
}

uint64_t sub_1874189F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for FocusStateBindingModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for FocusStateBindingModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t sub_187418A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for FocusStateBindingModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t getEnumTagSinglePayload for FocusStateBindingModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 16) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187418BB0 + 4 * byte_187C2F50C[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for FocusStateBindingModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusStateBindingModifier<A>()
{
  return &protocol witness table for FocusStateBindingModifier<A>;
}

void type metadata accessor for UIKitContainerFocusResponderItem<FocusStateBindingResponder>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusStateBindingResponder>)
  {
    v2 = type metadata accessor for FocusStateBindingResponder();
    v4 = type metadata accessor for UIKitContainerFocusResponderItem(a1, v2, (uint64_t)&protocol witness table for FocusStateBindingResponder, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for UIKitContainerFocusResponderItem<FocusStateBindingResponder>);
  }
}

unint64_t lazy protocol witness table accessor for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter;
  if (!lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusStateBindingResponderFilter, &unk_1E1B00E10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStateBindingResponderFilter and conformance FocusStateBindingResponderFilter);
  }
  return result;
}

uint64_t sub_187418EDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.focusBridge.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187418F14()
{
  swift_retain();
  specialized EnvironmentValues.focusBridge.setter();
  return swift_release();
}

uint64_t sub_187418F44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.focusScopes.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187418F7C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FocusStateBindingModifier.ListItemFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStateBindingModifier.ListItemFilter);
}

uint64_t outlined destroy of UIKitHostedFocusItemLifecycle(uint64_t a1)
{
  destroy for UIKitHostedFocusItemLifecycle();
  return a1;
}

uint64_t partial apply for implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return implicit closure #1 in static FocusStateBindingModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for FocusStateBindingModifier.ListTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusStateBindingModifier.ListTransform);
}

uint64_t outlined init with copy of WeakBox<FocusBridge>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for FocusState.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusState.Box);
}

uint64_t type metadata accessor for FocusState.Binding.PrivateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FocusState.Binding.PrivateType);
}

uint64_t assignWithCopy for FocusState.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FocusState.Box(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusBridgeKey()
{
  return &type metadata for FocusBridgeKey;
}

__n128 __swift_memcpy21_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FocusStateBindingModifier.ListItemFilter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStateBindingModifier.ListItemFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

uint64_t initializeWithCopy for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for FocusStateBindingResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStateBindingResponderFilter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStateBindingResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for FocusStateBindingResponderFilter()
{
  return &unk_1E1B00E10;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in FocusState<A>.Box()
{
  return &protocol witness table for FocusState<A>;
}

void base witness table accessor for _AttributeBody in FocusStateBindingModifier<A>.ListTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in FocusStateBindingModifier<A>.ListItemFilter()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined destroy of FocusItem??(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for FocusItem??();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for FocusItem??()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for FocusItem??)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusItem??);
  }
}

uint64_t outlined init with take of FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  initializeWithTake for FocusStoreList.Item(a2, a1);
  return a2;
}

uint64_t sub_18741954C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187419570()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStateBindingModifier.ListTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in FocusStateBindingModifier.ListTransform.value.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t View.renderContainerBackgroundInHostingView<A>(_:)()
{
  static Alignment.center.getter();
  type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x1E0CE4BC0]);
  lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
  return View.backgroundPreferenceValue<A, B>(_:alignment:_:)();
}

uint64_t closure #1 in View.renderContainerBackground<A>(_:key:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  if (a1[1] < 0)
  {
    result = 0;
    v5 = 0uLL;
  }
  else
  {
    v3 = *a1;
    swift_retain();
    result = static Edge.Set.all.getter();
    *((_QWORD *)&v5 + 1) = -1;
    *(_QWORD *)&v5 = v3;
  }
  *(_OWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = result;
  return result;
}

uint64_t closure #1 in View.renderContainerBackgroundInHostingView<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  char v14;

  type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[1] < 0)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, &lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>.Storage, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x1E0CE4B90]);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v10 = *a1;
    swift_retain();
    v11 = static Edge.Set.all.getter();
    v13[1] = v10;
    v13[2] = -1;
    v14 = v11;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE65E8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    View.truePreference<A>(_:)();
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v9, v5);
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, &lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>.Storage, (uint64_t (*)(uint64_t, uint64_t, _QWORD))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

void type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0(255);
    v7 = a3(a1, v6, MEMORY[0x1E0CE7C38]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for ContainerBackgroundRendererModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackgroundRendererModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackgroundRendererModifier<A>()
{
  return &protocol witness table for ContainerBackgroundRendererModifier<A>;
}

uint64_t static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _QWORD v57[2];
  unint64_t v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 28);
  v27 = *(_DWORD *)(a1 + 24);
  v28 = *(_DWORD *)(a1 + 32);
  v26 = *(_DWORD *)(a1 + 36);
  v11 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v38 = *(_DWORD *)(a1 + 60);
  v39 = *(_DWORD *)(a1 + 56);
  v36 = *(_DWORD *)(a1 + 68);
  v37 = *(_DWORD *)(a1 + 64);
  v34 = *(_DWORD *)(a1 + 76);
  v35 = *(_DWORD *)(a1 + 72);
  v33 = *(_DWORD *)(a1 + 80);
  v47 = a4;
  v48 = a5;
  type metadata accessor for ContainerBackgroundRendererModifier(255, a4, a5, a3);
  type metadata accessor for _GraphValue();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E0CE3E78], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>();
  v25 = _GraphValue.value.getter();
  v58 = v6;
  v59 = v7;
  v60 = v8;
  *(_QWORD *)&v61 = __PAIR64__(v9, v27);
  *((_QWORD *)&v61 + 1) = __PAIR64__(v26, v28);
  v62 = v11;
  v63 = v10;
  *(_QWORD *)&v64 = __PAIR64__(v38, v39);
  *((_QWORD *)&v64 + 1) = __PAIR64__(v36, v37);
  v65 = __PAIR64__(v34, v35);
  v66 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)();
  v49 = v6;
  v50 = v7;
  v52 = v8;
  *(_QWORD *)&v53 = __PAIR64__(v9, v27);
  *((_QWORD *)&v53 + 1) = __PAIR64__(v26, v28);
  v54 = v11;
  v55 = v10;
  *(_QWORD *)&v56 = __PAIR64__(v38, v39);
  *((_QWORD *)&v56 + 1) = __PAIR64__(v36, v37);
  LODWORD(v57[0]) = v35;
  *(_QWORD *)((char *)v57 + 4) = __PAIR64__(v33, v34);
  v12 = _ViewInputs.environment.getter();
  v13 = *MEMORY[0x1E0CFED28];
  v49 = __PAIR64__(v25, v12);
  v50 = v13;
  v45 = type metadata accessor for ContainerBackgroundRendererModifier.ChildEnvironment(0, a4, a5, v14);
  v46 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundRendererModifier<A>.ChildEnvironment, v45);
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v49, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v44, v45, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  _ViewInputs.environment.setter();
  v49 = v58;
  v50 = v59;
  v52 = v60;
  v53 = v61;
  v54 = v62;
  v55 = v63;
  v56 = v64;
  v57[0] = v65;
  LODWORD(v57[1]) = v66;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v17 = swift_bridgeObjectRetain();
  a2(&v41, v17, &v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v19 = v42;
  v18 = v43;
  v40 = v41;
  v49 = v41;
  v50 = v42;
  v51 = v43;
  v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) == 0)
  {
    MEMORY[0x1E0C80A78](v20, v21);
    MEMORY[0x1E0C80A78](v22, v23);
    AGGraphMutateAttribute();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a6 = v40;
  *(_DWORD *)(a6 + 8) = v19;
  *(_DWORD *)(a6 + 12) = v18;
  return result;
}

uint64_t closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = type metadata accessor for ContainerBackgroundRendererModifier(0, a2, a3, a4);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E0CE3E78], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  v6 = v5;
  v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_11, (uint64_t)v10, v6, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v8);
  return v10[5];
}

void ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t Value;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*MEMORY[0x1E0CFED28] == a1)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 1;
    a2[4] = 0;
    a2[5] = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_QWORD *)Value;
    v4 = *(_QWORD *)(Value + 8);
    v6 = *(_BYTE *)(Value + 16);
    v7 = *(_QWORD *)(Value + 24);
    v8 = *(_QWORD *)(Value + 32);
    v9 = *(_QWORD *)(Value + 40);
    *a2 = *(_QWORD *)Value;
    a2[1] = v4;
    *((_BYTE *)a2 + 16) = v6;
    a2[3] = v7;
    a2[4] = v8;
    a2[5] = v9;
    outlined copy of ContainerBackgroundValue.Content(v5, v4);
    swift_retain();
    swift_retain();
    swift_retain();
  }
}

double ContainerBackgroundRendererModifier.ChildEnvironment.value.getter@<D0>(int a1@<W1>, _OWORD *a2@<X8>)
{
  uint64_t *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  Value = (uint64_t *)AGGraphGetValue();
  v6 = *Value;
  v5 = Value[1];
  *(_QWORD *)&v18 = v6;
  *((_QWORD *)&v18 + 1) = v5;
  swift_retain();
  swift_retain();
  ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(a1, &v14);
  v7 = v17;
  outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
  v8 = 0;
  if (v7 != 1)
  {
    ContainerBackgroundRendererModifier.ChildEnvironment.background.getter(a1, &v14);
    v9 = v17;
    if (v17 != 1)
    {
      v10 = v15;
      v11 = v16;
      if (!(v15 >> 62))
      {
        outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
        v8 = 1;
        goto LABEL_9;
      }
      if (v15 >> 62 == 1)
      {
        v12 = swift_retain();
        outlined consume of ContainerBackgroundValue?(v12, v10, v11, v9);
        swift_release();
        v8 = 1;
        goto LABEL_9;
      }
      outlined consume of ContainerBackgroundValue?(v14, v15, v16, v17);
    }
    v8 = 0;
  }
LABEL_9:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E0CE3E78], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  AGGraphGetValue();
  LOBYTE(v14) = v8;
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  result = *(double *)&v18;
  *a2 = v18;
  return result;
}

double protocol witness for Rule.value.getter in conformance ContainerBackgroundRendererModifier<A>.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return ContainerBackgroundRendererModifier.ChildEnvironment.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContainerBackgroundRendererModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContainerBackgroundRendererModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContainerBackgroundRendererModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t partial apply for closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

void type metadata accessor for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, MEMORY[0x1E0CE3E78], MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WritableKeyPath<EnvironmentValues, Bool>>);
  }
}

uint64_t type metadata accessor for ContainerBackgroundRendererModifier.ChildEnvironment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerBackgroundRendererModifier.ChildEnvironment);
}

uint64_t partial apply for closure #2 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 32);
  return result;
}

void base witness table accessor for _AttributeBody in ContainerBackgroundRendererModifier<A>.ChildEnvironment()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t outlined consume of ContainerBackgroundValue?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined consume of ContainerBackgroundValue.Content(result, a2);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of ContainerBackgroundValue.Content(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t outlined copy of ContainerBackgroundValue.Content(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t VisualEffect.offset(_:)()
{
  lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect;
  if (!lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2308], MEMORY[0x1E0CE2320]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect);
  }
  return result;
}

uint64_t VisualEffect.offset(x:y:)()
{
  lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.offset(x:y:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18741A328()
{
  lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18741A374(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void HoverEffectContent.offset(_:)()
{
  HoverEffectContent.offset(x:y:)();
}

void View.onModifierKeysChanged(mask:initial:_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View._onModifierKeysChanged(mask:initial:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = 0;
  v12 = 0;
  return MEMORY[0x18D75B4AC](&v7, a5, &type metadata for OnModifierKeysChangedModifier, a6);
}

uint64_t closure #1 in OnModifierKeysChangedModifier.body(content:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[34] = a1;
  v1[35] = type metadata accessor for MainActor();
  v1[36] = static MainActor.shared.getter();
  v1[37] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[38] = v2;
  return swift_task_switch();
}

uint64_t closure #1 in OnModifierKeysChangedModifier.body(content:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(uint64_t **)(v0 + 272);
  if ((v1[1] & 1) != 0)
  {
    if (one-time initialization token for _modifierKeySource != -1)
      swift_once();
    outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, v0 + 120);
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 120), v2);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
    v1 = *(uint64_t **)(v0 + 272);
    if (v4)
    {
      ((void (*)(_QWORD, uint64_t))v1[2])(0, v4);
      *(_OWORD *)(v0 + 192) = *((_OWORD *)v1 + 2);
      v5 = *(_QWORD *)(v0 + 200);
      *(_QWORD *)(v0 + 264) = v4;
      if (v5)
      {
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined release of AnyDynamicChild<A, B>(v0 + 192);
      }
      v1 = *(uint64_t **)(v0 + 272);
    }
  }
  v6 = *v1;
  if (one-time initialization token for _modifierKeySource != -1)
    swift_once();
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, v0 + 72);
  *(_QWORD *)(v0 + 112) = v6;
  EventModifiers.AsyncValues.makeAsyncIterator()(v0 + 16);
  outlined destroy of AccessibilityRelationshipScope.Key(v0 + 72);
  *(_QWORD *)(v0 + 312) = static MainActor.shared.getter();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v0[40] = swift_getAssociatedTypeWitness();
  v1 = type metadata accessor for Optional();
  v0[41] = v1;
  v0[42] = *(_QWORD *)(v1 - 8);
  v0[43] = swift_task_alloc();
  v2 = (_QWORD *)swift_task_alloc();
  v0[44] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = closure #1 in OnModifierKeysChangedModifier.body(content:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = v0[43];
  v2 = v0[40];
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v0[42] + 8))(v1, v0[41]);
    swift_task_dealloc();
  }
  else
  {
    v0[23] = v2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 20);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v1, v2);
    swift_task_dealloc();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = v0[32];
      v7 = v0[7];
      v6 = v0[8];
      v0[45] = v5;
      v0[46] = v6;
      v8 = v6 & v5;
      if (v7 == v8)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
        v0[40] = swift_getAssociatedTypeWitness();
        v9 = type metadata accessor for Optional();
        v0[41] = v9;
        v0[42] = *(_QWORD *)(v9 - 8);
        v0[43] = swift_task_alloc();
        v10 = (_QWORD *)swift_task_alloc();
        v0[44] = (uint64_t)v10;
        *v10 = v0;
        v10[1] = closure #1 in OnModifierKeysChangedModifier.body(content:);
        return dispatch thunk of AsyncIteratorProtocol.next()();
      }
      v12 = v0[39];
      v0[7] = v8;
      if (v12)
        goto LABEL_7;
      return swift_task_switch();
    }
  }
  if (v0[39])
  {
LABEL_7:
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  if (*(_QWORD *)(v0 + 312))
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of AccessibilityRelationshipScope.Key(v0 + 16);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 360) & *(_QWORD *)(v0 + 368);
  v3 = *(void (**)(_QWORD, uint64_t))(v1 + 16);
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v1 + 32);
  type metadata accessor for State<EventModifiers>();
  State.wrappedValue.getter();
  v3(*(_QWORD *)(v0 + 240), v2);
  *(_QWORD *)(v0 + 248) = v2;
  if (v4)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined release of AnyDynamicChild<A, B>(v0 + 208);
  }
  *(_QWORD *)(v0 + 312) = static MainActor.shared.getter();
  return swift_task_switch();
}

uint64_t static EventModifiers.current.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for _modifierKeySource != -1)
    swift_once();
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v4);
  v0 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v0, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static EventModifiers.values(mask:initial:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (one-time initialization token for _modifierKeySource != -1)
    swift_once();
  result = outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, a2);
  *(_QWORD *)(a2 + 40) = a1;
  return result;
}

uint64_t EventModifiers.AsyncValues.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  outlined init with copy of TableColumnList(v1, (uint64_t)v23);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = v24;
  v5 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 24))(v16, v4, v5);
  v6 = __swift_project_boxed_opaque_existential_1(v16, v17);
  v7 = MEMORY[0x1E0C80A78](v6, v6);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *((_QWORD *)&v20 + 1) = swift_getAssociatedTypeWitness();
  *(_QWORD *)&v21 = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (one-time initialization token for _modifierKeySource != -1)
    swift_once();
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v16);
  v10 = v17;
  v11 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  *((_QWORD *)&v21 + 1) = v12 & v3;
  v22 = v3;
  v13 = v20;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 32) = v21;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnModifierKeysChangedModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v3 = type metadata accessor for _TaskModifier(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v16 = *(_OWORD *)(v1 + 32);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
  *(_QWORD *)(v14 + 32) = v13;
  *(_QWORD *)(v14 + 40) = v12;
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v1 + 32);
  swift_retain();
  outlined retain of State<Bool>((uint64_t)&v16);
  static TaskPriority.userInitiated.getter();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&v6[*(int *)(v3 + 20)], v11, v7);
  *(_QWORD *)v6 = &async function pointer to partial apply for closure #1 in OnModifierKeysChangedModifier.body(content:);
  *((_QWORD *)v6 + 1) = v14;
  outlined init with copy of _TaskModifier((uint64_t)v6, a1);
  outlined destroy of _TaskModifier((uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void one-time initialization function for _modifierKeySource()
{
  qword_1EDDF8D30 = (uint64_t)&type metadata for DefaultModifierKeySource;
  unk_1EDDF8D38 = &protocol witness table for DefaultModifierKeySource;
}

uint64_t EventModifiers.AsyncValues.Iterator.init(_:mask:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 24))(v17, v6, v7);
  v8 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v9 = MEMORY[0x1E0C80A78](v8, v8);
  (*(void (**)(char *, double))(v11 + 16))((char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *((_QWORD *)&v21 + 1) = swift_getAssociatedTypeWitness();
  *(_QWORD *)&v22 = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (one-time initialization token for _modifierKeySource != -1)
    swift_once();
  outlined init with copy of TableColumnList((uint64_t)&static EventModifiers._modifierKeySource, (uint64_t)v17);
  v12 = v18;
  v13 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  *((_QWORD *)&v22 + 1) = v14 & a2;
  v23 = a2;
  v15 = v21;
  *(_OWORD *)a3 = v20;
  *(_OWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 48) = a2;
  *(_OWORD *)(a3 + 32) = v22;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t EventModifiers.AsyncValues.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  __swift_mutable_project_boxed_opaque_existential_1(v0[7], *(_QWORD *)(v0[7] + 24));
  v0[8] = swift_getAssociatedTypeWitness();
  v1 = type metadata accessor for Optional();
  v0[9] = v1;
  v0[10] = *(_QWORD *)(v1 - 8);
  v0[11] = swift_task_alloc();
  v2 = (_QWORD *)swift_task_alloc();
  v0[12] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = EventModifiers.AsyncValues.Iterator.next();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v1, *(_QWORD *)(v0 + 72));
    swift_task_dealloc();
LABEL_6:
    v6 = 0;
    v10 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v10);
  }
  *(_QWORD *)(v0 + 40) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v1, v2);
  swift_task_dealloc();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_6;
  v5 = *(uint64_t **)(v0 + 56);
  v6 = v5[6] & *(_QWORD *)(v0 + 48);
  if (v5[5] == v6)
  {
    __swift_mutable_project_boxed_opaque_existential_1(*(_QWORD *)(v0 + 56), v5[3]);
    *(_QWORD *)(v0 + 64) = swift_getAssociatedTypeWitness();
    v7 = type metadata accessor for Optional();
    *(_QWORD *)(v0 + 72) = v7;
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v7 - 8);
    *(_QWORD *)(v0 + 88) = swift_task_alloc();
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v8;
    *v8 = v0;
    v8[1] = EventModifiers.AsyncValues.Iterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
  v10 = 0;
  v5[5] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v10);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator;
  v3[7] = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance EventModifiers.AsyncValues.Iterator(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v4[5] = v5;
  *v5 = v4;
  v5[1] = _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  v5[7] = v3;
  return swift_task_switch();
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 24);
  swift_task_dealloc();
  if (v6)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  *(_BYTE *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 48) = a1;
  return swift_task_switch();
}

uint64_t _s7SwiftUI14EventModifiersV11AsyncValuesV8IteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTY1_()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)v2 = *(_QWORD *)(v0 + 48);
  *(_BYTE *)(v2 + 8) = v1 & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t lazy protocol witness table accessor for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator;
  if (!lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventModifiers.AsyncValues.Iterator, &type metadata for EventModifiers.AsyncValues.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventModifiers.AsyncValues.Iterator and conformance EventModifiers.AsyncValues.Iterator);
  }
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance EventModifiers.AsyncValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[5];

  outlined init with copy of TableColumnList(v1, (uint64_t)v4);
  EventModifiers.AsyncValues.Iterator.init(_:mask:)(v4, *(_QWORD *)(v1 + 40), a1);
  return outlined destroy of AccessibilityRelationshipScope.Key(v1);
}

ValueMetadata *type metadata accessor for EventModifiers.AsyncValues()
{
  return &type metadata for EventModifiers.AsyncValues;
}

uint64_t initializeWithCopy for EventModifiers.AsyncValues.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for EventModifiers.AsyncValues.Iterator(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for EventModifiers.AsyncValues.Iterator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for EventModifiers.AsyncValues.Iterator()
{
  return &type metadata for EventModifiers.AsyncValues.Iterator;
}

uint64_t sub_18741B730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier;
  if (!lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnModifierKeysChangedModifier, &type metadata for OnModifierKeysChangedModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier);
  }
  return result;
}

uint64_t destroy for OnModifierKeysChangedModifier()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OnModifierKeysChangedModifier()
{
  return &type metadata for OnModifierKeysChangedModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnModifierKeysChangedModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18741B924()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnModifierKeysChangedModifier.body(content:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in OnModifierKeysChangedModifier.body(content:)(v0 + 16);
}

uint64_t outlined init with copy of _TaskModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _TaskModifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for State<EventModifiers>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for State<EventModifiers>)
  {
    v0 = type metadata accessor for State();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<EventModifiers>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>();
    v3[1] = &protocol witness table for _TaskModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>)
  {
    type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>();
    type metadata accessor for _TaskModifier(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnModifierKeysChangedModifier>, _TaskModifier>);
  }
}

void type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnModifierKeysChangedModifier>)
  {
    lazy protocol witness table accessor for type OnModifierKeysChangedModifier and conformance OnModifierKeysChangedModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnModifierKeysChangedModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnModifierKeysChangedModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnModifierKeysChangedModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void _PositionLayout.position.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*_PositionLayout.position.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PositionLayout.placement(of:in:)()
{
  PlacementContext.size.getter();
  static UnitPoint.center.getter();
  return _Placement.init(proposedSize:anchoring:at:)();
}

uint64_t _PositionLayout.spacing(in:child:)()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    return Spacing.init()();
  else
    return LayoutProxy.spacing()();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _PositionLayout()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
    return Spacing.init()();
  else
    return LayoutProxy.spacing()();
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _PositionLayout()
{
  PlacementContext.size.getter();
  static UnitPoint.center.getter();
  return _Placement.init(proposedSize:anchoring:at:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _PositionLayout()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.position(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18D75B4AC](v5, a1, &type metadata for _PositionLayout, a2);
}

uint64_t View.position(x:y:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  _QWORD v5[2];

  *(double *)v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18D75B4AC](v5, a1, &type metadata for _PositionLayout, a2);
}

double specialized _PositionLayout.sizeThatFits(in:context:child:)()
{
  uint64_t v0;
  char v1;
  double v2;
  double v3;
  double v4;
  char v5;

  *(double *)&v0 = COERCE_DOUBLE(CGSize.init(_:)());
  if ((v1 & 1) == 0)
    return *(double *)&v0;
  LayoutProxy.size(in:)();
  v2 = v3;
  v4 = COERCE_DOUBLE(_ProposedSize.width.getter());
  if ((v5 & 1) == 0)
    v2 = v4;
  _ProposedSize.height.getter();
  return v2;
}

_UNKNOWN **base witness table accessor for ViewModifier in _PositionLayout()
{
  return &protocol witness table for _PositionLayout;
}

uint64_t sub_18741C080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _PositionLayout;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t AutomaticTextEditorStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for TextEditorStyleConfiguration);
}

uint64_t AutomaticTextEditorStyle.Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TextEditor();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - v13;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  *(_QWORD *)v10 = swift_getKeyPath();
  *((_WORD *)v10 + 4) = 0;
  v10[10] = 0;
  v15 = (uint64_t)&v10[*(int *)(v7 + 24)];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *((_QWORD *)v6 + 2);
  v18 = *((_QWORD *)v6 + 3);
  *((_OWORD *)v10 + 1) = *(_OWORD *)v6;
  *((_QWORD *)v10 + 4) = v17;
  *((_QWORD *)v10 + 5) = v18;
  outlined assign with take of Binding<TextSelection?>?((uint64_t)&v6[*(int *)(v3 + 20)], v15);
  outlined init with take of TextEditor((uint64_t)v10, (uint64_t)v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, a1, (uint64_t (*)(_QWORD))type metadata accessor for TextEditor);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextEditor);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AutomaticTextEditorStyle.Body()
{
  type metadata accessor for TextEditor();
  type metadata accessor for TextEditorStyleModifier<SystemTextEditorStyle>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextEditor and conformance TextEditor, (uint64_t (*)(uint64_t))type metadata accessor for TextEditor, (uint64_t)&protocol conformance descriptor for TextEditor);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance AutomaticTextEditorStyle.Body@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TextEditor();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - v13;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  *(_QWORD *)v10 = swift_getKeyPath();
  *((_WORD *)v10 + 4) = 0;
  v10[10] = 0;
  v15 = (uint64_t)&v10[*(int *)(v7 + 24)];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = *((_QWORD *)v6 + 2);
  v18 = *((_QWORD *)v6 + 3);
  *((_OWORD *)v10 + 1) = *(_OWORD *)v6;
  *((_QWORD *)v10 + 4) = v17;
  *((_QWORD *)v10 + 5) = v18;
  outlined assign with take of Binding<TextSelection?>?((uint64_t)&v6[*(int *)(v3 + 20)], v15);
  outlined init with take of TextEditor((uint64_t)v10, (uint64_t)v14);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, a1, (uint64_t (*)(_QWORD))type metadata accessor for TextEditor);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TextEditor);
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance AutomaticTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, a2, type metadata accessor for TextEditorStyleConfiguration);
}

uint64_t outlined init with take of TextEditor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in AutomaticTextEditorStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in AutomaticTextEditorStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AutomaticTextEditorStyle.Body and conformance AutomaticTextEditorStyle.Body, (uint64_t (*)(uint64_t))type metadata accessor for AutomaticTextEditorStyle.Body, (uint64_t)&protocol conformance descriptor for AutomaticTextEditorStyle.Body);
}

uint64_t type metadata accessor for AutomaticTextEditorStyle.Body()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AutomaticTextEditorStyle.Body;
  if (!type metadata singleton initialization cache for AutomaticTextEditorStyle.Body)
    return swift_getSingletonMetadata();
  return result;
}

ValueMetadata *type metadata accessor for AutomaticTextEditorStyle()
{
  return &type metadata for AutomaticTextEditorStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutomaticTextEditorStyle.Body(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *__dst;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    a1[3] = a2[3];
    v8 = *(int *)(v4 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for Binding<TextSelection?>(0);
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v14(v10, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v16 = v10[1];
      *v9 = *v10;
      v9[1] = v16;
      v17 = *(int *)(v12 + 32);
      __dst = (char *)v9 + v17;
      v18 = (char *)v10 + v17;
      v19 = type metadata accessor for TextSelection(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_retain();
      swift_retain();
      if (v21(v18, 1, v19))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(__dst, v18, v24);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        __dst[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for AutomaticTextEditorStyle.Body(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  type metadata accessor for Binding<TextSelection?>(0);
  v4 = v3;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v6 = v2 + *(int *)(v4 + 32);
    v7 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
      }
    }
  }
  return result;
}

_QWORD *initializeWithCopy for AutomaticTextEditorStyle.Body(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *__dst;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12(v8, 1, v10))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v8[1];
    *v7 = *v8;
    v7[1] = v14;
    v15 = *(int *)(v10 + 32);
    __dst = (char *)v7 + v15;
    v16 = (char *)v8 + v15;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_retain();
    swift_retain();
    if (v19(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(__dst, v16, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      __dst[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for AutomaticTextEditorStyle.Body(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *__dst;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  type metadata accessor for Binding<TextSelection?>(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v5, 1, v7);
  v12 = v10(v6, 1, v8);
  if (!v11)
  {
    if (v12)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v5 = *(_QWORD *)v6;
    swift_retain();
    swift_release();
    *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
    swift_retain();
    swift_release();
    v24 = *(int *)(v8 + 32);
    v25 = &v5[v24];
    v26 = &v6[v24];
    v27 = type metadata accessor for TextSelection(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
    v30 = v29(v25, 1, v27);
    v31 = v29(v26, 1, v27);
    if (v30)
    {
      if (!v31)
      {
        v32 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v25, v26, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        return a1;
      }
    }
    else
    {
      if (!v31)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for TextSelection.Indices);
          v40 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for RangeSet<String.Index>();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v25, v26, v41);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
        }
        v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v15 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
    v16 = v25;
    v17 = v26;
    goto LABEL_7;
  }
  if (v12)
  {
    v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v13);
    v15 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
    v16 = v5;
    v17 = v6;
LABEL_7:
    memcpy(v16, v17, v15);
    return a1;
  }
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
  v18 = *(int *)(v8 + 32);
  __dst = &v5[v18];
  v19 = &v6[v18];
  v20 = type metadata accessor for TextSelection(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_retain();
  swift_retain();
  if (v22(v19, 1, v20))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v34 = v21;
    v35 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      v37 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(__dst, v19, v36);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v37 = __dst;
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v37[*(int *)(v20 + 20)] = v19[*(int *)(v20 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v20);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  return a1;
}

_OWORD *initializeWithTake for AutomaticTextEditorStyle.Body(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = v7[1];
    *v6 = *v7;
    v6[1] = v12;
    v13 = *(int *)(v9 + 32);
    v14 = (char *)v6 + v13;
    v15 = (char *)v7 + v13;
    v16 = type metadata accessor for TextSelection(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for RangeSet<String.Index>();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v14, v15, v20);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      v14[*(int *)(v16 + 20)] = v15[*(int *)(v16 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for AutomaticTextEditorStyle.Body(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRelease();
  v5 = *(int *)(type metadata accessor for TextEditorStyleConfiguration(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  type metadata accessor for Binding<TextSelection?>(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v6, 1, v8);
  v13 = v11(v7, 1, v9);
  if (!v12)
  {
    if (v13)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_6;
    }
    *(_QWORD *)v6 = *(_QWORD *)v7;
    swift_release();
    *((_QWORD *)v6 + 1) = *((_QWORD *)v7 + 1);
    swift_release();
    v26 = *(int *)(v9 + 32);
    v27 = &v6[v26];
    v28 = &v7[v26];
    v29 = type metadata accessor for TextSelection(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v27, 1, v29);
    v33 = v31(v28, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        v34 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for RangeSet<String.Index>();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v27, v28, v35);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        return a1;
      }
    }
    else
    {
      if (!v33)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection.Indices);
          v40 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for RangeSet<String.Index>();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v27, v28, v41);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
        }
        v27[*(int *)(v29 + 20)] = v28[*(int *)(v29 + 20)];
        return a1;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v27, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v16 = *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64);
    v17 = v27;
    v18 = v28;
    goto LABEL_7;
  }
  if (v13)
  {
    v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    v17 = v6;
    v18 = v7;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  v19 = *((_QWORD *)v7 + 1);
  *(_QWORD *)v6 = *(_QWORD *)v7;
  *((_QWORD *)v6 + 1) = v19;
  v20 = *(int *)(v9 + 32);
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = type metadata accessor for TextSelection(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v36 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for RangeSet<String.Index>();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v21, v22, v37);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    v21[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomaticTextEditorStyle.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18741D4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AutomaticTextEditorStyle.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18741D4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextEditorStyleConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextEditor and conformance TextEditor, (uint64_t (*)(uint64_t))type metadata accessor for TextEditor, (uint64_t)&protocol conformance descriptor for TextEditor);
    v3[1] = &protocol witness table for TextEditorStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>)
  {
    type metadata accessor for TextEditor();
    type metadata accessor for TextEditorStyleModifier<SystemTextEditorStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TextEditor, TextEditorStyleModifier<SystemTextEditorStyle>>);
  }
}

void type metadata accessor for TextEditorStyleModifier<SystemTextEditorStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for TextEditorStyleModifier<SystemTextEditorStyle>)
  {
    v2 = lazy protocol witness table accessor for type SystemTextEditorStyle and conformance SystemTextEditorStyle();
    v4 = type metadata accessor for TextEditorStyleModifier(a1, (uint64_t)&type metadata for SystemTextEditorStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for TextEditorStyleModifier<SystemTextEditorStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type SystemTextEditorStyle and conformance SystemTextEditorStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle;
  if (!lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemTextEditorStyle, &type metadata for SystemTextEditorStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemTextEditorStyle and conformance SystemTextEditorStyle);
  }
  return result;
}

void Scene.windowFocusability(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowFocusability.never.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowFocusability()
{
  return &type metadata for WindowFocusability;
}

uint64_t storeEnumTagSinglePayload for WindowFocusability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18741D730 + 4 * byte_187C2FE85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18741D764 + 4 * asc_187C2FE80[v4]))();
}

uint64_t sub_18741D764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18741D76C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18741D774);
  return result;
}

uint64_t sub_18741D780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18741D788);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18741D78C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18741D794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowFocusability.Role()
{
  return &type metadata for WindowFocusability.Role;
}

unint64_t lazy protocol witness table accessor for type WindowFocusability.Role and conformance WindowFocusability.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role;
  if (!lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowFocusability.Role, &type metadata for WindowFocusability.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowFocusability.Role and conformance WindowFocusability.Role);
  }
  return result;
}

void static WindowFocusability.automatic.getter()
{
  static WindowFocusability.never.getter();
}

void static WindowFocusability.always.getter()
{
  static WindowFocusability.never.getter();
}

ValueMetadata *type metadata accessor for SidebarDisclosureGroupStyle()
{
  return &type metadata for SidebarDisclosureGroupStyle;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in SidebarDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarDisclosureGroupStyle.Container()
{
  type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?)();
  return static TupleView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance SidebarDisclosureGroupStyle.Container@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  double v8;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  v8 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance SidebarDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  *(_QWORD *)a2 = swift_getKeyPath();
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_BYTE *)(a2 + 32) = v5;
  swift_retain();
  return swift_retain();
}

void key path getter for EnvironmentValues.disclosureGroupIndicatorTrailingPadding : EnvironmentValues(double *a1@<X8>)
{
  *a1 = EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter();
}

void sub_18741D9C4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.disclosureGroupIndicatorTrailingPadding.getter();
}

uint64_t destroy for SidebarDisclosureGroupStyle.Container(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SidebarDisclosureGroupStyle.Container(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  swift_release();
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarDisclosureGroupStyle.Container(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarDisclosureGroupStyle.Container(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for SidebarDisclosureGroupStyle.Container()
{
  return &unk_1E1AF4430;
}

unint64_t lazy protocol witness table accessor for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container;
  if (!lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SidebarDisclosureGroupStyle.Container, &unk_1E1AF4430);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarDisclosureGroupStyle.Container and conformance SidebarDisclosureGroupStyle.Container);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarDisclosureGroupStyle.Container()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  }
}

void type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  }
}

void type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    lazy protocol witness table accessor for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
  }
}

void type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, (uint64_t (*)(uint64_t))type metadata accessor for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
}

void type metadata accessor for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>(255);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E0CE2BD0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator();
    v3[1] = MEMORY[0x1E0CE2BC0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RotatingDisclosureIndicator, &type metadata for RotatingDisclosureIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE71A8]);
    v2 = v1;
    v3 = lazy protocol witness table accessor for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>(255);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>?);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, IncrementListDisclosureGroupDepth>, type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>, ListDisclosureGroupIndentationModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>);
}

void type metadata accessor for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle, (uint64_t)&type metadata for SidebarDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisclosureGroupStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DisclosureGroupStyleConfiguration.Content, DisclosureGroupStyleModifier<SidebarDisclosureGroupStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarDisclosureGroupStyle and conformance SidebarDisclosureGroupStyle, (uint64_t)&type metadata for SidebarDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDisclosureGroupStyledContainer);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ListDisclosureGroupStyledContainer<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<SidebarDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>);
  }
  return result;
}

SwiftUI::AnimationTimelineSchedule __swiftcall AnimationTimelineSchedule.init(minimumInterval:paused:)(SwiftUI::AnimationTimelineSchedule minimumInterval, Swift::Bool paused)
{
  char v2;
  uint64_t v3;
  double v4;

  v4 = *(double *)&minimumInterval.paused;
  if (paused)
    v4 = 0.00833333333;
  *(double *)v3 = v4;
  *(_BYTE *)(v3 + 8) = v2;
  minimumInterval.minimumInterval = v4;
  return minimumInterval;
}

uint64_t AnimationTimelineSchedule.entries(from:mode:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *((_BYTE *)v3 + 8) | *a2;
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = *v3;
  v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a1, v8);
  result = type metadata accessor for AnimationTimelineSchedule.Entries();
  v10 = a3 + *(int *)(result + 20);
  *(_QWORD *)v10 = v7;
  *(_BYTE *)(v10 + 8) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for AnimationTimelineSchedule.Entries()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnimationTimelineSchedule.Entries;
  if (!type metadata singleton initialization cache for AnimationTimelineSchedule.Entries)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AnimationTimelineSchedule.Entries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for AnimationTimelineSchedule.Entries() + 20) + 8) & 1) != 0)
  {
    v3 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 1, 1, v3);
  }
  else
  {
    v5 = type metadata accessor for Date();
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v1, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    return static Date.+= infix(_:_:)();
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnimationTimelineSchedule.Entries()
{
  return lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule.Entries);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnimationTimelineSchedule.Entries@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with take of AnimationTimelineSchedule.Entries(v1, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationTimelineSchedule.Entries()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of AnimationTimelineSchedule.Entries(v0);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance AnimationTimelineSchedule.Entries@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(v2 + *(int *)(a1 + 20) + 8) & 1) != 0)
  {
    v4 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
  else
  {
    v6 = type metadata accessor for Date();
    v7 = *(_QWORD *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, v2, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
    return static Date.+= infix(_:_:)();
  }
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in AnimationTimelineSchedule()
{
  return lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(&lazy protocol witness table cache variable for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule.Entries);
}

uint64_t lazy protocol witness table accessor for type AnimationTimelineSchedule.Entries and conformance AnimationTimelineSchedule.Entries(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AnimationTimelineSchedule.Entries();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance AnimationTimelineSchedule@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *((_BYTE *)v3 + 8) | *a2;
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = *v3;
  v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, a1, v8);
  result = type metadata accessor for AnimationTimelineSchedule.Entries();
  v10 = a3 + *(int *)(result + 20);
  *(_QWORD *)v10 = v7;
  *(_BYTE *)(v10 + 8) = v6 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimelineSchedule()
{
  return &type metadata for AnimationTimelineSchedule;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationTimelineSchedule.Entries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t initializeWithCopy for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationTimelineSchedule.Entries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18741E9E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AnimationTimelineSchedule.Entries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18741EA30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for AnimationTimelineSchedule.Entries()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of AnimationTimelineSchedule.Entries(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnimationTimelineSchedule.Entries();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of AnimationTimelineSchedule.Entries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AnimationTimelineSchedule.Entries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PlainButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance PlainButtonStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a1 = KeyPath;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_18741EBF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isFocused.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isFocused : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1);
}

uint64_t sub_18741EC58(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1);
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in PlainButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PassthroughNavigationViewStyle()
{
  return &type metadata for PassthroughNavigationViewStyle;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in PassthroughNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in PassthroughNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void *type metadata accessor for PassthroughNavigationView()
{
  return &unk_1E1AEAC90;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();
    v3[1] = &protocol witness table for _NavigationViewStyleConfiguration.Content;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>)
  {
    v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<PassthroughNavigationView, _NavigationViewStyleConfiguration.Content>);
  }
}

unint64_t lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PassthroughNavigationView, &unk_1E1AEAC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PassthroughNavigationView, &unk_1E1AEAC90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationView and conformance PassthroughNavigationView);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PassthroughNavigationView()
{
  lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance PassthroughNavigationView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return outlined init with copy of _VariadicView_Children(a1, a2 + 24);
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PassthroughNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for PassthroughNavigationView(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PassthroughNavigationView and conformance PassthroughNavigationView();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<_VariadicView_Children> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>)
  {
    type metadata accessor for HStack<_VariadicView_Children>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<_VariadicView_Children> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<_VariadicView_Children>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<_VariadicView_Children>)
  {
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_VariadicView_Children>);
  }
}

void sub_18741F060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v17 - 224) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v9, v10, v18);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 - 192) = v10;
  *(_QWORD *)(v17 - 184) = v16;
  *(_QWORD *)(v17 - 176) = v12;
  *(_QWORD *)(v17 - 168) = v11;
  *(_QWORD *)(v17 - 160) = v14;
  *(_QWORD *)(v17 - 152) = v15;
  *(_QWORD *)(v17 - 248) = swift_getKeyPath();
  static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v17 - 232), v16, v12, v12, v12, v14, v13);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v12;
  *(_QWORD *)(v22 + 24) = v15;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v17 - 248), *(_QWORD *)(v17 - 208), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v22, v10, v12, v12, v12, v14, v13);
}

uint64_t sub_18741F16C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 224) + 8))(*(_QWORD *)(v1 - 240), v0);
}

void OutlineGroup<>.init<A>(_:children:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for TableRow(255, *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]), a5, a4);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

{
  type metadata accessor for TableRow(255, *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8]), a5, a4);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_18741F254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v16 - 216) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v9, v10, v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v16 - 192) = v15;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 176) = v10;
  *(_QWORD *)(v16 - 168) = v11;
  *(_QWORD *)(v16 - 160) = v12;
  *(_QWORD *)(v16 - 232) = swift_getKeyPath();
  v21 = swift_checkMetadataState();
  v22 = static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v16 - 200), v13, v21, v21, v21, v11, v14);
  *(_QWORD *)(v16 - 248) = v23;
  *(_QWORD *)(v16 - 240) = v22;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v15;
  v24[3] = v13;
  v24[4] = v10;
  v24[5] = v11;
  v24[6] = v12;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v15;
  v25[3] = v13;
  v25[4] = v10;
  v25[5] = v11;
  v25[6] = v12;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v21);
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 232), *(_QWORD *)(v16 - 208), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, v15, v21, v21, v21, v11, v14);
}

uint64_t sub_18741F3C0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 216) + 8))(*(_QWORD *)(v1 - 224), v0);
}

void sub_18741F4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v16 - 216) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v10, v9, v17);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v16 - 192) = v9;
  *(_QWORD *)(v16 - 184) = v13;
  *(_QWORD *)(v16 - 176) = v15;
  *(_QWORD *)(v16 - 168) = v11;
  *(_QWORD *)(v16 - 160) = v12;
  *(_QWORD *)(v16 - 232) = swift_getKeyPath();
  v21 = swift_checkMetadataState();
  v22 = static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v16 - 200), v13, v21, v21, v21, v11, v14);
  *(_QWORD *)(v16 - 248) = v23;
  *(_QWORD *)(v16 - 240) = v22;
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v9;
  v24[3] = v13;
  v24[4] = v15;
  v24[5] = v11;
  v24[6] = v12;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v9;
  v25[3] = v13;
  v25[4] = v15;
  v25[5] = v11;
  v25[6] = v12;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRow<A>, v21);
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 232), *(_QWORD *)(v16 - 208), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, v9, v21, v21, v21, v11, v14);
}

uint64_t sub_18741F610()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 216) + 8))(*(_QWORD *)(v1 - 224), v0);
}

uint64_t closure #1 in OutlineGroup<>.init<A>(_:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return TableRow.init(_:)((uint64_t)v7, a2, a3);
}

void sub_18741F78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *KeyPath;
  uint64_t v23;

  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v17 - 232) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v9, v11, v18);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 - 192) = v10;
  *(_QWORD *)(v17 - 184) = v16;
  *(_QWORD *)(v17 - 176) = v12;
  *(_QWORD *)(v17 - 168) = v11;
  *(_QWORD *)(v17 - 160) = v14;
  *(_QWORD *)(v17 - 152) = v15;
  KeyPath = (_QWORD *)swift_getKeyPath();
  static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v17 - 200), v16, v12, v12, v12, v14, v13);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v12;
  *(_QWORD *)(v23 + 24) = v15;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(KeyPath, *(_QWORD *)(v17 - 216), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v23, *(_QWORD *)(v17 - 248), v12, v12, v12, v14, v13);
}

uint64_t sub_18741F89C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 232) + 8))(*(_QWORD *)(v1 - 240), v0);
}

uint64_t key path getter for Identifiable.id : <A, B, C, D, E><A1>A1()
{
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_18741F938()
{
  return 48;
}

__n128 sub_18741F944(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_18741F958()
{
  return swift_deallocObject();
}

uint64_t sub_18741F96C()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_18741F99C()
{
  return 40;
}

__n128 sub_18741F9A8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_18741F9BC()
{
  return swift_deallocObject();
}

uint64_t sub_18741F9D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OutlineGroup<>.init<A>(_:children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in OutlineGroup<>.init<A>(_:children:)(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_18741FA00()
{
  return swift_deallocObject();
}

uint64_t sub_18741FA10()
{
  return swift_deallocObject();
}

uint64_t sub_18741FA20()
{
  return swift_deallocObject();
}

uint64_t sub_18741FA30()
{
  return swift_deallocObject();
}

uint64_t sub_18741FA40()
{
  return swift_deallocObject();
}

void sub_18741FB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v17 = MEMORY[0x1E0C80A78](a1, a2);
  v19 = (char *)&a9 - v18;
  v20 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v16 - 192) = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v15, v11, v17);
  swift_storeEnumTagMultiPayload();
  static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v16 - 184), v9, v12, v12, v12, v10, v13);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v12;
  *(_QWORD *)(v21 + 24) = v14;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v16 - 160), *(_QWORD *)(v16 - 152), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v21, *(_QWORD *)(v16 - 176), v12, v12, v12, v10, v13);
}

uint64_t sub_18741FC0C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 192) + 8))(*(_QWORD *)(v1 - 200), v0);
}

uint64_t sub_18741FC48()
{
  return swift_deallocObject();
}

void sub_18741FD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v17 - 176) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v16, v12, v18);
  swift_storeEnumTagMultiPayload();
  static OutlineGroup.ChildPath.state(_:)(v11, v9, v13, v13, v13, v10, v14);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v13;
  *(_QWORD *)(v22 + 24) = v15;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v17 - 160), *(_QWORD *)(v17 - 152), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v22, v12, v13, v13, v13, v10, v14);
}

uint64_t sub_18741FE04()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 176) + 8))(*(_QWORD *)(v1 - 184), v0);
}

uint64_t sub_18741FE40()
{
  return swift_deallocObject();
}

void OutlineGroup<>.init<A>(_:children:expandedElements:content:)()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_18741FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v17 - 248) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v9, v11, v18);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 - 192) = v11;
  *(_QWORD *)(v17 - 184) = v14;
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v10;
  *(_QWORD *)(v17 - 160) = v12;
  *(_QWORD *)(v17 - 152) = v13;
  *(_QWORD *)(v17 - 272) = swift_getKeyPath();
  v22 = static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v17 - 264), v14, v16, v16, v16, v12, v15);
  v24 = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v16;
  *(_QWORD *)(v25 + 24) = v13;
  v26 = *(_QWORD *)(v17 - 240);
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v20, *(_QWORD **)(v17 - 272), (uint64_t)v22, v24, *(_QWORD *)(v17 - 200), v26, *(_QWORD *)(v17 - 200), v26, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v25, *(_QWORD *)(v17 - 224), *(_QWORD *)(v17 - 216), *(_QWORD *)(v17 - 208), v11, v16, v16, v16, v12, v15);
}

uint64_t sub_187420048()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 248) + 8))(*(_QWORD *)(v1 - 256), v0);
}

uint64_t sub_187420084()
{
  return swift_deallocObject();
}

void sub_187420160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *KeyPath;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v18 = MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  v21 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v17 - 256) = v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v20, v9, v11, v18);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v17 - 192) = v10;
  *(_QWORD *)(v17 - 184) = v14;
  *(_QWORD *)(v17 - 176) = v16;
  *(_QWORD *)(v17 - 168) = v11;
  *(_QWORD *)(v17 - 160) = v12;
  *(_QWORD *)(v17 - 152) = v13;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v23 = static OutlineGroup.ChildPath.state(_:)(*(_QWORD *)(v17 - 200), v14, v16, v16, v16, v12, v15);
  v25 = v24;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v16;
  *(_QWORD *)(v26 + 24) = v13;
  v27 = *(_QWORD *)(v17 - 248);
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v20, KeyPath, (uint64_t)v23, v25, *(_QWORD *)(v17 - 208), v27, *(_QWORD *)(v17 - 208), v27, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v26, *(_QWORD *)(v17 - 232), *(_QWORD *)(v17 - 224), *(_QWORD *)(v17 - 216), *(_QWORD *)(v17 - 272), v16, v16, v16, v12, v15);
}

uint64_t sub_187420290()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 256) + 8))(*(_QWORD *)(v1 - 264), v0);
}

uint64_t sub_1874202D4()
{
  return swift_deallocObject();
}

void OutlineGroup<>.init<A>(_:id:childrenGetter:content:)()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_18742039C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v16 = MEMORY[0x1E0C80A78](a1, a2);
  v18 = (char *)&a9 - v17;
  v19 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v15 - 184) = v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v18, v12, v9, v16);
  swift_storeEnumTagMultiPayload();
  static OutlineGroup.ChildPath.closure(_:)(*(_QWORD *)(v15 - 176));
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v11;
  *(_QWORD *)(v20 + 24) = v14;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:)(*(_QWORD **)(v15 - 160), *(_QWORD *)(v15 - 152), (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v20, v9, v11, v11, v11, v13, v10);
}

uint64_t sub_187420490()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 184) + 8))(*(_QWORD *)(v1 - 192), v0);
}

uint64_t sub_1874204CC()
{
  return swift_deallocObject();
}

void OutlineGroup<>.init<A>(_:id:expandedElements:childrenGetter:content:)()
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlinePrimitive.Base();
}

void sub_187420598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v15 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (char *)&a9 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(v10 - 8) + 16))((char *)&a9 - v16, v11, v10, v15);
  swift_storeEnumTagMultiPayload();
  v18 = static OutlineGroup.ChildPath.closure(_:)(*(_QWORD *)(v14 - 216));
  v20 = v19;
  v21 = swift_allocObject();
  v22 = *(_QWORD *)(v14 - 208);
  v23 = *(_QWORD *)(v14 - 200);
  *(_QWORD *)(v21 + 16) = v12;
  *(_QWORD *)(v21 + 24) = v22;
  swift_retain();
  OutlineGroup.init(base:id:children:parentContent:leafContent:grouping:expandedElements:)((uint64_t)v17, *(_QWORD **)(v14 - 192), v18, v20, *(_QWORD *)(v14 - 152), v23, *(_QWORD *)(v14 - 152), v23, (uint64_t)partial apply for defaultGrouping<A>(isExpanded:parent:), v21, *(_QWORD *)(v14 - 176), *(_QWORD *)(v14 - 168), *(_QWORD *)(v14 - 160), v10, v12, v12, v12, v13, v9);
}

uint64_t sub_1874206A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 224), v0);
}

uint64_t sub_1874206DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for defaultGrouping<A>(isExpanded:parent:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

void OutlineGroup<>.baseItems.getter()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_18742075C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = OutlinePrimitive.Base.count.getter(a1);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 - 120) = 0;
    *(_QWORD *)(v1 - 112) = result;
    MEMORY[0x1E0C80A78](result, v3);
    type metadata accessor for Range<Int>();
    swift_getAssociatedTypeWitness();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return Sequence.compactMap<A>(_:)();
  }
  return result;
}

void closure #1 in OutlineGroup<>.baseItems.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_1874208E4()
{
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187420908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  return OutlinePrimitive.Base.itemAt(index:)(v1, a1, v3);
}

uint64_t OutlineGroup<>.IsExpandedProjection.get(base:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return Set.contains(_:)();
}

uint64_t OutlineGroup<>.IsExpandedProjection.set(base:newValue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  _QWORD v22[2];

  v22[1] = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v22 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v22 - v19;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v15, v3, v5, v18);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.insert(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, v5);
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for Set();
    Set.remove(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t OutlineGroup<>.IsExpandedProjection.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OutlineGroup<>.IsExpandedProjection.== infix(_:_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OutlineGroup<>.IsExpandedProjection.hashValue.getter()
{
  Hasher.init(_seed:)();
  OutlineGroup<>.IsExpandedProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter()
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  return v1;
}

uint64_t protocol witness for Projection.get(base:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = OutlineGroup<>.IsExpandedProjection.get(base:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection(uint64_t a1, char *a2, uint64_t a3)
{
  return OutlineGroup<>.IsExpandedProjection.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  Hasher.init(_seed:)();
  OutlineGroup<>.IsExpandedProjection.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  return static OutlineGroup<>.IsExpandedProjection.== infix(_:_:)();
}

void OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[56];
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = a3;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  v19 = *(_QWORD *)(a1 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](a1, a2);
  v18 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(_QWORD *)(v5 + 32);
  MEMORY[0x1E0C80A78](v5, v7);
  v22 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(v9 + 24);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = v12[5];
  v14 = v12[6];
  v16 = v12[2];
  v17 = v13;
  v23 = v16;
  v24 = v10;
  v25 = v6;
  v26 = v13;
  v27 = v14;
  type metadata accessor for OutlineGroup<>.IsExpandedProjection();
}

void sub_187421004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v17 - 256) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)&a9 - v19;
  *(_QWORD *)(v17 - 168) = OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter();
  *(_QWORD *)(v17 - 160) = v21;
  *(_QWORD *)(v17 - 152) = v22;
  *(_QWORD *)(v17 - 248) = v10 + *(int *)(v15 + 60);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v20, v14, v12);
  *(_QWORD *)(v17 - 240) = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v17 - 264) = swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  type metadata accessor for Binding();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGroup<A, B, C, D, E><>.IsExpandedProjection, a1);
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 256) + 8))(v20, a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v17 - 256) = *(_QWORD *)(v17 - 112);
  *(_QWORD *)(v17 - 272) = *(_QWORD *)(v17 - 104);
  *(_DWORD *)(v17 - 276) = *(unsigned __int8 *)(v17 - 96);
  (*(void (**)(_QWORD))(v16 + *(int *)(v15 + 68)))(*(_QWORD *)(v17 - 248));
  v24 = *(_QWORD *)(v17 - 216);
  v23 = *(_QWORD *)(v17 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v24, v16, v15);
  v25 = (*(unsigned __int8 *)(v23 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v26 = (char *)swift_allocObject();
  v27 = *(_QWORD *)(v17 - 232);
  v28 = *(_QWORD *)(v17 - 224);
  *((_QWORD *)v26 + 2) = v27;
  *((_QWORD *)v26 + 3) = v12;
  *((_QWORD *)v26 + 4) = v11;
  *((_QWORD *)v26 + 5) = v28;
  *((_QWORD *)v26 + 6) = *(_QWORD *)(v17 - 240);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v26[v25], v24, v15);
  *(_QWORD *)(v17 - 168) = v27;
  *(_QWORD *)(v17 - 160) = v12;
  *(_QWORD *)(v17 - 152) = v11;
  *(_QWORD *)(v17 - 144) = v11;
  *(_QWORD *)(v17 - 136) = v11;
  *(_QWORD *)(v17 - 128) = v28;
  *(_QWORD *)(v17 - 120) = *(_QWORD *)(v17 - 264);
  type metadata accessor for OutlineGroup();
}

void sub_187421220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = v1;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, v2 - 176);
  DisclosureTableRow.init(isExpanded:label:content:)(*(_QWORD *)(v2 - 256), *(_QWORD *)(v2 - 272));
}

void closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

void sub_187421308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v2 + *(int *)(a1 + 64), v3);
  swift_retain();
  OutlineGroup<>.OutlineGroupSubgroup.$expandedItems.getter();
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:id:expandedElements:childrenGetter:content:)();
}

void OutlineGroup<>.OutlineGroupSubgroup.init(expandedItems:element:data:parentContent:leafContent:children:id:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

uint64_t sub_187421460(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*v8 - 8) + 32))(v2 + a1[15], v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v2 + a1[16], v5, v7);
  v12 = (_QWORD *)(v2 + a1[17]);
  *v12 = v4;
  v12[1] = v16;
  v13 = (_QWORD *)(v2 + a1[18]);
  *v13 = v17;
  v13[1] = v9;
  v14 = (_QWORD *)(v2 + a1[19]);
  *v14 = v15;
  v14[1] = v1;
  *(_QWORD *)(v2 + a1[20]) = v3;
  return result;
}

void OutlineGroup<>.tableRowBody.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  OutlineGroup<>.baseItems.getter();
}

void sub_187421554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v6 - 88) = a1;
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v1 + *(int *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1, v3);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = (char *)swift_allocObject();
  v10 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  *((_QWORD *)v8 + 2) = v10;
  *((_QWORD *)v8 + 3) = v9;
  v11 = *(_QWORD *)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 56);
  *((_QWORD *)v8 + 4) = v11;
  *((_QWORD *)v8 + 5) = v12;
  *((_QWORD *)v8 + 6) = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&v8[v7], v4, v3);
  *(_QWORD *)(v6 - 160) = swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_retain();
  *(_QWORD *)(v6 - 128) = v10;
  *(_QWORD *)(v6 - 120) = v9;
  *(_QWORD *)(v6 - 112) = v11;
  *(_QWORD *)(v6 - 104) = v12;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

uint64_t sub_187421628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for _ConditionalContent();
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v4);
  *(_QWORD *)(v5 - 144) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup, a1);
  *(_QWORD *)(v5 - 136) = v1;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v7, v5 - 144);
  return ForEach<>.init<A>(_:id:content:)(v5 - 88, v3, (uint64_t)partial apply for closure #1 in OutlineGroup<>.tableRowBody.getter, v2, v4, v7, *(_QWORD *)(v5 - 160), v8);
}

void closure #1 in OutlineGroup<>.tableRowBody.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[32];

  v16[13] = a2;
  v16[14] = a1;
  v16[20] = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v14);
  v16[8] = (char *)v16 - v15;
  v16[24] = a3;
  v16[25] = a4;
  v16[26] = a5;
  v16[27] = a6;
  v16[28] = a7;
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

void sub_187421784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedConformanceWitness;

  *(_QWORD *)(v15 - 264) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 240) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  *(_QWORD *)(v15 - 248) = (char *)&a9 - v20;
  *(_QWORD *)(v15 - 288) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - v25;
  v26 = type metadata accessor for Optional();
  *(_QWORD *)(v15 - 312) = v26;
  *(_QWORD *)(v15 - 328) = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)(v15 - 304) = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  *(_QWORD *)(v15 - 320) = (char *)&a9 - v33;
  *(_QWORD *)(v15 - 216) = a1;
  v34 = type metadata accessor for _ConditionalContent();
  *(_QWORD *)(v15 - 200) = *(_QWORD *)(v34 - 8);
  *(_QWORD *)(v15 - 192) = v34;
  MEMORY[0x1E0C80A78](v34, v35);
  *(_QWORD *)(v15 - 208) = (char *)&a9 - v36;
  *(_QWORD *)(v15 - 184) = v12;
  swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v15 - 168) = v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v15 - 144) = v10;
  *(_QWORD *)(v15 - 136) = v9;
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 120) = v11;
  *(_QWORD *)(v15 - 112) = v11;
  *(_QWORD *)(v15 - 104) = v14;
  *(_QWORD *)(v15 - 256) = v14;
  *(_QWORD *)(v15 - 96) = AssociatedConformanceWitness;
  type metadata accessor for OutlineGroup();
}

uint64_t sub_18742197C(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(v6 - 232);
  v9 = v8 + a1[21];
  v10 = *(void (**)(void))v9;
  v11 = *(_QWORD *)(v6 - 224);
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(v9 + 8);
  v10();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    v18 = *(_QWORD *)(v6 - 320);
    v17(v18, v1, v2);
    *(_QWORD *)(v6 - 288) = OutlineGroup.$expandedElements.getter();
    *(_QWORD *)(v6 - 296) = v19;
    *(_QWORD *)(v6 - 312) = v20;
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v6 - 280) + 16))(*(_QWORD *)(v6 - 272), v11, *(_QWORD *)(v6 - 168));
    v17(*(_QWORD *)(v6 - 304), v18, v2);
    *(_QWORD *)(v6 - 280) = *(_QWORD *)(v8 + a1[23] + 8);
    *(_QWORD *)(v6 - 224) = *(_QWORD *)(v8 + a1[20]);
    OutlineGroup<>.OutlineGroupSubgroup.init(expandedItems:element:data:parentContent:leafContent:children:id:)(*(_QWORD *)(v6 - 288), *(_QWORD *)(v6 - 296), *(_QWORD *)(v6 - 312), *(_QWORD **)(v6 - 240));
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 328) + 8))(v1, *(_QWORD *)(v6 - 312));
  (*(void (**)(uint64_t))(v8 + a1[23]))(v11);
  v12 = *(_QWORD *)(v6 - 296);
  v13 = *(_QWORD *)(v6 - 184);
  static TableRowBuilder.buildExpression<A>(_:)(v5, *(_QWORD *)(v6 - 168), v4, v13);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 8);
  v14(v5, v4);
  static TableRowBuilder.buildBlock<A>(_:)(v12, v4, v5);
  v14(v12, v4);
  v15 = *(_QWORD *)(v6 - 216);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup, v15);
  v16 = *(_QWORD *)(v6 - 208);
  static TableRowBuilder.buildEither<A, B>(second:)(v5, v4, v16);
  v14(v5, v4);
  *(_QWORD *)(v6 - 160) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup, v15);
  *(_QWORD *)(v6 - 152) = v13;
  v21 = *(_QWORD *)(v6 - 192);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v21, v6 - 160);
  static TableRowBuilder.buildBlock<A>(_:)(v16, v21, *(_QWORD *)(v6 - 176));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v16, v21);
}

void sub_187421CE8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_187421D9C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v2 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  outlined consume of StateOrBinding<Set<B>><A, B, C, D, E><A1>(*(_QWORD *)(v1 + v2), *(_QWORD *)(v1 + v2 + 8), *(_QWORD *)(v1 + v2 + 16), *(_BYTE *)(v1 + v2 + 24));
  type metadata accessor for OutlinePrimitive.Base();
}

uint64_t sub_187421DF4()
{
  uint64_t v0;
  uint64_t v1;

  if (swift_getEnumCaseMultiPayload() != 1)
    v0 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(v1, v0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in OutlineGroup<>.tableRowBody.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_187421F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in OutlineGroup<>.tableRowBody.getter(v1, v2 + ((v9 + 56) & ~v9), v7, v3, v4, v5, v6, v8);
}

void type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t static OutlineGroup<>._containsOutlineSymbol(inputs:)()
{
  return 1;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> OutlineGroup<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> OutlineGroup<A, B, C, D, E>(uint64_t a1, uint64_t a2)
{
  OutlineGroup<>.tableRowBody.getter(a1, *(_QWORD *)(a2 - 8));
}

void sub_18742203C()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

uint64_t sub_1874220B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;

  v5 = type metadata accessor for _ConditionalContent();
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v3);
  swift_getAssociatedConformanceWitness();
  v12 = v3;
  v13 = v2;
  v14 = v5;
  v15 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for ForEach();
  v10 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup, a1);
  v11 = v1;
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, v5, &v10);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ForEach<A, B, C>, v7, &v9);
}

uint64_t type metadata completion function for OutlineGroup<>.OutlineGroupSubgroup()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for OutlineGroup<>.OutlineGroupSubgroup(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  v14 = *a2;
  *a1 = *a2;
  if ((v10 | v8) > 7
    || v13 != 0
    || ((((((((v12 + ((v11 + ((v8 + 24) & ~v8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v26 = (uint64_t *)(v14 + (((v10 | v8) & 0xF8 ^ 0x1F8) & ((v10 | v8) + 16)));
  }
  else
  {
    v17 = AssociatedTypeWitness;
    v18 = ~v8;
    v39 = ~v10;
    v40 = a1;
    v19 = a2[2];
    a1[1] = a2[1];
    a1[2] = v19;
    v20 = (char *)a1 + v8;
    v21 = (char *)a2 + v8;
    v22 = (unint64_t)(v20 + 24) & v18;
    v23 = (unint64_t)(v21 + 24) & v18;
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v38(v22, v23, v17);
    v24 = (v22 + v11) & v39;
    v25 = v23 + v11;
    v26 = v40;
    v27 = v25 & v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v24, v25 & v39, v5);
    v28 = (_QWORD *)((v12 + v24) & 0xFFFFFFFFFFFFFFF8);
    v29 = (_QWORD *)((v12 + v27) & 0xFFFFFFFFFFFFFFF8);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = (_QWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    v35 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    *(_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v26;
}

uint64_t destroy for OutlineGroup<>.OutlineGroupSubgroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = (a1 + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))((v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80), v4);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for OutlineGroup<>.OutlineGroupSubgroup(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 24) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 24) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v12(v10, v11, AssociatedTypeWitness);
  v13 = *(_QWORD *)(v6 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v8 + 64) + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16, v17, v6);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (_QWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  *(_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OutlineGroup<>.OutlineGroupSubgroup(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 24) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 24) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(v6 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v16, v17, v6);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (_QWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  v22 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_QWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain();
  swift_release();
  v25 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OutlineGroup<>.OutlineGroupSubgroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24 + a1) & ~v8;
  v10 = (v8 + 24 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v10, AssociatedTypeWitness);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = *(_QWORD *)(v5 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v11 + v13;
  v15 = (v14 + v9) & ~v13;
  v16 = (v14 + v10) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v16, v5);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = (_OWORD *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_OWORD *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_OWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
  v21 = (_OWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_OWORD *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  *(_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *assignWithTake for OutlineGroup<>.OutlineGroupSubgroup(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 24) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 24) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(v6 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v16, v17, v6);
  v18 = *(_QWORD *)(v13 + 64) + 7;
  v19 = (_OWORD *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  v20 = v18 + v17;
  v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 23;
  *v19 = *(_OWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  v22 = (_OWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  v21 &= 0xFFFFFFFFFFFFF8uLL;
  *v22 = *(_OWORD *)v21;
  swift_release();
  v23 = (_OWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_OWORD *)((v21 + 23) & 0xFFFFFFFFFFFFF8);
  *v23 = *v24;
  swift_release();
  *(_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlineGroup<>.OutlineGroupSubgroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = *(_DWORD *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = AssociatedTypeWitness;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = *(_QWORD *)(v7 + 64);
  v16 = *(unsigned __int8 *)(v9 + 80);
  if (v12 < a2)
  {
    if (((((((((((*(_QWORD *)(v9 + 64) + ((v15 + v16 + ((v14 + 24) & ~v14)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X4 }
  }
  if ((v11 & 0x80000000) != 0)
  {
    v22 = (a1 + v14 + 24) & ~v14;
    if (v8 == v12)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v22, *(unsigned int *)(v7 + 84), v13);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v22 + v15 + v16) & ~v16, v10, v5);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 8);
    if (v21 >= 0xFFFFFFFF)
      LODWORD(v21) = -1;
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for OutlineGroup<>.OutlineGroupSubgroup(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = *(unsigned __int8 *)(v9 + 80);
  if (v11 >= a3)
  {
    v16 = 0u;
    if (a2 <= v11)
      goto LABEL_20;
  }
  else
  {
    if (((((((((*(_DWORD *)(v9 + 64)
               + ((*(_DWORD *)(v8 + 64) + (_DWORD)v13 + (((_DWORD)v12 + 24) & ~(_DWORD)v12)) & ~(_DWORD)v13)
               + 7) & 0xFFFFFFF8)
             + 23) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v14 = a3 - v11 + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 >= 2)
      v16 = v15;
    else
      v16 = 0;
    if (a2 <= v11)
LABEL_20:
      __asm { BR              X4 }
  }
  if (((((((((*(_DWORD *)(v9 + 64)
             + ((*(_DWORD *)(v8 + 64) + (_DWORD)v13 + (((_DWORD)v12 + 24) & ~(_DWORD)v12)) & ~(_DWORD)v13)
             + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v17 = ~v11 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v8 + 64) + v13 + ((v12 + 24) & ~v12)) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v17;
  }
  __asm { BR              X10 }
}

void sub_187422EC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x187422F34);
}

void sub_187422ED0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x187422ED8);
  JUMPOUT(0x187422F34);
}

void sub_187422EEC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x187422F34);
}

void sub_187422EF4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x187422F34);
}

void sub_187422EFC()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  *(_WORD *)(v1 + v3) = 0;
  if (v2)
  {
    if (v0 < 0)
      JUMPOUT(0x187422F08);
    if (v2 < 0)
      JUMPOUT(0x187422F28);
    *(_QWORD *)(v1 + 8) = (v2 - 1);
  }
  JUMPOUT(0x187422F34);
}

ValueMetadata *type metadata accessor for EmptyTableRowGenerator()
{
  return &type metadata for EmptyTableRowGenerator;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance EmptyTableRowGenerator()
{
  uint64_t result;

  type metadata accessor for WrappedTableRowIDs<[TableRowID]>(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

void type metadata accessor for OutlineGroup<>.IsExpandedProjection()
{
  JUMPOUT(0x18D75FF28);
}

void sub_187423024()
{
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

uint64_t sub_187423068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = v1 + ((v3 + 56) & ~v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(a1 + 60);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4 + *(int *)(a1 + 64));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter()
{
  type metadata accessor for OutlineGroup<>.OutlineGroupSubgroup();
}

void sub_1874231BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  closure #1 in OutlineGroup<>.OutlineGroupSubgroup.tableRowBody.getter(v1 + ((v3 + 56) & ~v3), v2);
}

void partial apply for closure #1 in OutlineGroup<>.baseItems.getter()
{
  closure #1 in OutlineGroup<>.baseItems.getter();
}

uint64_t type metadata completion function for OutlineGroup<>.IsExpandedProjection()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OutlineGroup<>.IsExpandedProjection(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1874233A8 + 4 * byte_187C3025F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for OutlineGroup<>.IsExpandedProjection(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void sub_1874235A8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
}

void sub_187423658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> OutlineGroup<A, B, C, D, E>, a1, &a11);
  a12 = a9;
  a13 = a1;
  a14 = v15;
  a15 = v17;
  type metadata accessor for DisclosureTableRow();
}

uint64_t sub_187423690(uint64_t a1)
{
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisclosureTableRow<A, B>, a1);
}

void base witness table accessor for Equatable in OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Hashable in OutlineGroup<A, B, C, D, E><>.IsExpandedProjection()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _BYTE v14[40];
  _BYTE v15[40];
  _BYTE v16[40];

  v2 = 0;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v10 >= v7)
      return swift_release();
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release();
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release();
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
          {
            v2 = v10 + 4;
            if (v10 + 4 >= v7)
              return swift_release();
            v11 = *(_QWORD *)(v3 + 8 * v2);
            if (!v11)
              break;
          }
        }
      }
    }
LABEL_24:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(a1 + 48) + 40 * v9, (uint64_t)v16);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v14);
    specialized Set._Variant.insert(_:)((uint64_t)v15, (uint64_t)v14);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
  }
  v12 = v10 + 5;
  if (v12 < v7)
  {
    v11 = *(_QWORD *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        v2 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v2 >= v7)
          return swift_release();
        v11 = *(_QWORD *)(v3 + 8 * v2);
        ++v12;
        if (v11)
          goto LABEL_24;
      }
LABEL_27:
      __break(1u);
      JUMPOUT(0x187423ADCLL);
    }
    v2 = v12;
    goto LABEL_24;
  }
  return swift_release();
}

void PlatformBarUpdater.callAsFunction(configurations:context:)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  _BYTE v29[40];
  _BYTE v30[40];
  _BYTE v31[40];

  v4 = v3;
  v7 = (void *)v4[7];
  v8 = (void *)v4[8];
  v4[7] = a2;
  v4[8] = a3;
  v28 = v4 + 7;
  v9 = a2;
  v10 = a3;

  if (a1)
  {
    swift_beginAccess();
    v4[3] = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v11 = swift_bridgeObjectRetain();
    specialized Set.formUnion<A>(_:)(v11);
    swift_endAccess();
  }
  swift_beginAccess();
  v12 = v4[3];
  v13 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v12 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v17 = 0;
  v18 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_27;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18)
      goto LABEL_30;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_30;
      v22 = *(_QWORD *)(v13 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_30;
        v22 = *(_QWORD *)(v13 + 8 * v17);
        if (!v22)
        {
          v17 = v21 + 3;
          if (v21 + 3 >= v18)
            goto LABEL_30;
          v22 = *(_QWORD *)(v13 + 8 * v17);
          if (!v22)
          {
            v17 = v21 + 4;
            if (v21 + 4 >= v18)
              goto LABEL_30;
            v22 = *(_QWORD *)(v13 + 8 * v17);
            if (!v22)
              break;
          }
        }
      }
    }
LABEL_26:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_27:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v12 + 48) + 40 * v20, (uint64_t)v31);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)v30);
    v24 = v4[6];
    swift_bridgeObjectRetain();
    v25 = specialized Set.contains(_:)((uint64_t)v30, v24);
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0 && (PlatformBarUpdater.updateIfNeeded(role:)((uint64_t)v30) & 1) != 0)
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)((uint64_t)v30, (uint64_t)v29);
      swift_endAccess();
      outlined destroy of AccessibilityTableContext?((uint64_t)v29, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v30);
  }
  v23 = v21 + 5;
  if (v23 >= v18)
  {
LABEL_30:
    swift_release();
    v26 = (void *)v4[7];
    v27 = (void *)v4[8];
    *v28 = 0;
    v28[1] = 0;

    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_26;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v18)
      goto LABEL_30;
    v22 = *(_QWORD *)(v13 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_32:
  __break(1u);
}

uint64_t PlatformBarUpdater.updateIfNeeded(role:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  __int16 v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD v22[4];
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int16 v30;
  uint64_t v31;
  char v32;

  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v23);
  if (v25 >= 7)
  {
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = (0x78u >> v25) & 1;
  }
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v4 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(v4 + 56) + 80 * v5;
    v9 = *(_QWORD *)(v7 + 8);
    v8 = *(_QWORD *)(v7 + 16);
    v20 = *(_BYTE *)(v7 + 24);
    v21 = *(_BYTE *)v7;
    v19 = *(_QWORD *)(v7 + 32);
    v18 = *(_BYTE *)(v7 + 40);
    v17 = *(_QWORD *)(v7 + 48);
    v15 = *(_WORD *)(v7 + 57);
    v16 = *(_BYTE *)(v7 + 56);
    v10 = *(_QWORD *)(v7 + 64);
    v11 = *(_BYTE *)(v7 + 72);
    swift_endAccess();
    swift_retain();
    swift_retain();
    swift_retain();
    PlatformBarUpdater.scrollGeometry(edge:)(v3, &v23);
    swift_beginAccess();
    InferredToolbarState.update(edge:to:)(v3);
    swift_endAccess();
    LOBYTE(v23) = v21;
    *((_QWORD *)&v23 + 1) = v9;
    v24 = v8;
    LOBYTE(v25) = v20;
    v26 = v19;
    v27 = v18;
    v28 = v17;
    v29 = v16;
    v30 = v15;
    v31 = v10;
    v32 = v11;
    PlatformBarUpdater.updateBackgroundHost(role:configuration:)(a1, &v23);
    if (v10)
    {
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v23);
      swift_beginAccess();
      v13 = specialized Dictionary.subscript.modify(v22, (uint64_t)&v23);
      if (*(_QWORD *)(v12 + 8) == 1)
      {
        ((void (*)(_QWORD *, _QWORD))v13)(v22, 0);
        swift_endAccess();
      }
      else
      {
        *(_QWORD *)(v12 + 64) = 0;
        ((void (*)(_QWORD *, _QWORD))v13)(v22, 0);
        swift_endAccess();
        swift_release();
      }
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    return 1;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t PlatformBarUpdater.callAsFunction(context:)(void *a1, void *a2)
{
  uint64_t v2;
  void *v4;
  id *v5;
  void *v6;
  id v7;
  id v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  void *v31;
  void (*v32)(_QWORD *__return_ptr, uint64_t, uint64_t);
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  void *v38;
  void *v39;
  id *v41;
  uint64_t v42;
  int64_t v43;
  _QWORD v44[4];
  __int128 v45;
  unint64_t v46;
  _BYTE v47[40];
  _BYTE v48[40];
  _OWORD v49[3];
  _OWORD v50[2];
  char v51[8];
  uint64_t v52[3];

  v4 = *(void **)(v2 + 56);
  v6 = *(void **)(v2 + 64);
  v5 = (id *)(v2 + 56);
  *v5 = a1;
  v5[1] = a2;
  v7 = a1;
  v8 = a2;

  v9 = v5 - 4;
  swift_beginAccess();
  v10 = (uint64_t)*(v5 - 4);
  v11 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v10 + 64);
  v43 = (unint64_t)(v12 + 63) >> 6;
  v41 = v5;
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_26;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v19 >= v43)
      goto LABEL_50;
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v43)
        goto LABEL_50;
      v20 = *(_QWORD *)(v11 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v43)
          goto LABEL_50;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        if (!v20)
        {
          v16 = v19 + 3;
          if (v19 + 3 >= v43)
            goto LABEL_50;
          v20 = *(_QWORD *)(v11 + 8 * v16);
          if (!v20)
          {
            v16 = v19 + 4;
            if (v19 + 4 >= v43)
              goto LABEL_50;
            v20 = *(_QWORD *)(v11 + 8 * v16);
            if (!v20)
              break;
          }
        }
      }
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_26:
    outlined init with copy of ToolbarPlacement.Role(*(_QWORD *)(v10 + 48) + 40 * v18, (uint64_t)v48);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v48, (uint64_t)v47);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
    if (v46 >= 7)
    {
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
      LOBYTE(v22) = 0;
    }
    else
    {
      v22 = (0x78u >> v46) & 1;
    }
    swift_beginAccess();
    v23 = *v9;
    if (*((_QWORD *)*v9 + 2) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v25 & 1) != 0))
    {
      v26 = (_OWORD *)(v23[7] + 80 * v24);
      v49[0] = *v26;
      v28 = v26[2];
      v27 = v26[3];
      v29 = *(_OWORD *)((char *)v26 + 57);
      v49[1] = v26[1];
      v49[2] = v28;
      *(_OWORD *)((char *)v50 + 9) = v29;
      v50[0] = v27;
      swift_endAccess();
      outlined retain of ToolbarAppearanceConfiguration((uint64_t)v49);
      PlatformBarUpdater.scrollGeometry(edge:)(v22, &v45);
      swift_beginAccess();
      InferredToolbarState.update(edge:to:)(v22);
      swift_endAccess();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
      switch(v46)
      {
        case 0uLL:
          if (*v41)
          {
            v30 = *v41;
            v31 = v30;
            v32 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
            goto LABEL_41;
          }
          break;
        case 1uLL:
        case 2uLL:
        case 4uLL:
        case 6uLL:
          break;
        case 3uLL:
          if (*v41)
          {
            v33 = objc_msgSend(*v41, sel_toolbar);
            if (v33)
            {
              v31 = v33;
              type metadata accessor for UIKitToolbar();
              v30 = (id)swift_dynamicCastClass();
              if (!v30)
                goto LABEL_42;
              v32 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
              goto LABEL_41;
            }
          }
          break;
        case 5uLL:
          v34 = *(void **)(v42 + 64);
          if (v34)
          {
            v30 = v34;
            v31 = v30;
            v32 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
LABEL_41:
            specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)((uint64_t)v30, (uint64_t)v47, (uint64_t)v49, v32);
LABEL_42:

          }
          break;
        default:
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
          break;
      }
      v35 = MEMORY[0x1E0CE7BA8];
      outlined init with take of Image.Resolved?((uint64_t)&v50[1], (uint64_t)v51, &lazy cache variable for type metadata for Animation?, MEMORY[0x1E0CE7BA8]);
      outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)v52, &lazy cache variable for type metadata for Animation?, v35);
      if (v52[0])
      {
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
        swift_beginAccess();
        v37 = specialized Dictionary.subscript.modify(v44, (uint64_t)&v45);
        if (*(_QWORD *)(v36 + 8) == 1)
        {
          ((void (*)(_QWORD *, _QWORD))v37)(v44, 0);
          swift_endAccess();
        }
        else
        {
          *(_QWORD *)(v36 + 64) = 0;
          ((void (*)(_QWORD *, _QWORD))v37)(v44, 0);
          swift_endAccess();
          swift_release();
        }
        outlined release of ToolbarAppearanceConfiguration((uint64_t)v49);
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
      }
      else
      {
        outlined release of ToolbarAppearanceConfiguration((uint64_t)v49);
      }
      v15 = 1;
    }
    else
    {
      swift_endAccess();
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v47);
  }
  v21 = v19 + 5;
  if (v21 < v43)
  {
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        if (v16 >= v43)
          goto LABEL_50;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        ++v21;
        if (v20)
          goto LABEL_25;
      }
LABEL_52:
      __break(1u);
      JUMPOUT(0x1874245C0);
    }
    v16 = v21;
    goto LABEL_25;
  }
LABEL_50:
  swift_release();
  v38 = *(void **)(v42 + 56);
  v39 = *(void **)(v42 + 64);
  *v41 = 0;
  v41[1] = 0;

  return v15 & 1;
}

double PlatformBarUpdater.scrollGeometry(edge:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  char **v6;
  id v7;
  id v8;
  double v9;
  double v10;
  double result;
  void *v12;
  char **v13;
  id v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  static ScrollGeometry.zero.getter();
  v5 = *(void **)(v2 + 56);
  if (v5)
  {
    v6 = &selRef_topViewController;
  }
  else
  {
    v5 = *(void **)(v2 + 64);
    if (!v5)
    {
      v7 = 0;
      goto LABEL_6;
    }
    v6 = &selRef_selectedViewController;
  }
  v7 = objc_msgSend(v5, *v6);
LABEL_6:
  v8 = objc_msgSend(v7, sel_contentScrollView);

  if (v8)
    goto LABEL_7;
  v12 = *(void **)(v2 + 56);
  if (v12)
  {
    v13 = &selRef_topViewController;
  }
  else
  {
    v12 = *(void **)(v2 + 64);
    if (!v12)
      goto LABEL_11;
    v13 = &selRef_selectedViewController;
  }
  v14 = objc_msgSend(v12, *v13);
  if (v14)
  {
    v15 = v14;
    v16 = (a1 & 1) != 0 ? 4 : 1;
    v8 = objc_msgSend(v14, sel_contentScrollViewForEdge_, v16);

    if (v8)
    {
LABEL_7:
      objc_msgSend(v8, sel_safeAreaInsets);
      if (v10 == 0.0 && v9 == 0.0)
        objc_msgSend(v8, sel_contentInset);
      objc_msgSend(v8, sel_contentOffset);
      objc_msgSend(v8, sel_bounds);
      ScrollGeometry.contentOffset.setter();
      objc_msgSend(v8, sel_contentSize);
      ScrollGeometry.contentSize.setter();
      ScrollGeometry.containerSize.setter();

    }
  }
LABEL_11:
  *a2 = v17;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = v20;
  a2[4] = v21;
  a2[5] = v22;
  result = *(double *)&v23;
  a2[6] = v23;
  return result;
}

void PlatformBarUpdater.updateBackgroundHost(role:configuration:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  void *v6;
  id v7;
  void *v8;
  void (*v9)(_QWORD *__return_ptr, uint64_t, uint64_t);
  void *v10;
  id v11;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;
  _OWORD v15[3];
  _OWORD v16[2];

  v4 = a2[3];
  v15[2] = a2[2];
  v16[0] = v4;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 + 57);
  v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v13);
  switch(v14)
  {
    case 0:
      v6 = *(void **)(v2 + 56);
      if (v6)
      {
        v7 = v6;
        v8 = v7;
        v9 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
        goto LABEL_11;
      }
      break;
    case 1:
    case 2:
    case 4:
    case 6:
      return;
    case 3:
      v10 = *(void **)(v2 + 56);
      if (v10)
      {
        v11 = objc_msgSend(v10, sel_toolbar);
        if (v11)
        {
          v8 = v11;
          type metadata accessor for UIKitToolbar();
          v7 = (id)swift_dynamicCastClass();
          if (!v7)
            goto LABEL_12;
          v9 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
          goto LABEL_11;
        }
      }
      break;
    case 5:
      v12 = *(void **)(v2 + 64);
      if (v12)
      {
        v7 = v12;
        v8 = v7;
        v9 = (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
LABEL_11:
        specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)((uint64_t)v7, a1, (uint64_t)v15, v9);
LABEL_12:

      }
      break;
    default:
      outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
      break;
  }
}

uint64_t specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[5];

  v6 = v4;
  swift_beginAccess();
  v9 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain();
  a4(v17, a3, v9);
  swift_bridgeObjectRelease();
  v10 = LOBYTE(v17[0]);
  v11 = BYTE1(v17[0]);
  result = MEMORY[0x18D760234](v6 + 32);
  if (result)
  {
    v13 = result;
    LOBYTE(v17[0]) = v10;
    BYTE1(v17[0]) = v11;
    BarAppearanceBridge.didUpdate(bar:barUpdates:)(a2, (unsigned __int8 *)v17);
    outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v17);
    v14 = (uint64_t *)(v13 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v14;
    *v14 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10 | (v11 << 8), (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    *v14 = v16;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
    swift_endAccess();
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized PlatformBarBackgroundHost.update(configuration:barState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  void *v3;
  void *v4;
  int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v4 = v3;
  v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  Transaction.animation.setter();
  v9 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    v10 = 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_24;
  }
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v12 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * v11) >= 1.0)
    v10 = 1;
  else
    v10 = 2;
LABEL_8:
  swift_release();
  v13 = a1 + 57;
  v14 = MEMORY[0x1E0CE0F28];
  outlined init with take of Image.Resolved?(v13, (uint64_t)&v27, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28]);
  outlined init with take of Image.Resolved?((uint64_t)&v27, (uint64_t)&v28, &lazy cache variable for type metadata for ColorScheme?, v14);
  v15 = v28;
  if (v28 != 2)
  {
    if (v9 < 2)
      goto LABEL_14;
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(1);
      if ((v20 & 1) != 0)
      {
        if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) <= 0.5)
          goto LABEL_9;
LABEL_14:
        v21 = objc_msgSend(v3, sel_tabBar, 0);
        v22 = (void *)objc_opt_self();
        if ((v15 & 1) != 0)
        {
          v16 = objc_msgSend(v22, sel_whiteColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          v18 = 0;
          v17 = 1;
        }
        else
        {
          v16 = objc_msgSend(v22, sel_blackColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          v18 = 0;
          v17 = 0;
        }
        goto LABEL_17;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  v16 = objc_msgSend(v3, sel_tabBar, 0);
  objc_msgSend(v16, sel_setTintColor_, 0);
  v17 = 2;
  v18 = 1;
LABEL_17:

  v23 = objc_msgSend(v4, sel_tabBar);
  v24 = v23;
  v25 = 1;
  if ((v17 & 1) != 0)
    v25 = 2;
  if (v18)
    v26 = 0;
  else
    v26 = v25;
  objc_msgSend(v23, sel_setOverrideUserInterfaceStyle_, v26);

  *a3 = v10;
  a3[1] = v17;
}

{
  void *v3;
  void *v4;
  int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v4 = v3;
  v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  Transaction.animation.setter();
  v9 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    v10 = 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_24;
  }
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v12 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * v11) >= 1.0)
    v10 = 1;
  else
    v10 = 2;
LABEL_8:
  swift_release();
  v13 = a1 + 57;
  v14 = MEMORY[0x1E0CE0F28];
  outlined init with take of Image.Resolved?(v13, (uint64_t)&v27, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28]);
  outlined init with take of Image.Resolved?((uint64_t)&v27, (uint64_t)&v28, &lazy cache variable for type metadata for ColorScheme?, v14);
  v15 = v28;
  if (v28 != 2)
  {
    if (v9 < 2)
      goto LABEL_14;
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      if ((v20 & 1) != 0)
      {
        if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) <= 0.5)
          goto LABEL_9;
LABEL_14:
        v21 = objc_msgSend(v3, sel_navigationBar, 0);
        v22 = (void *)objc_opt_self();
        if ((v15 & 1) != 0)
        {
          v16 = objc_msgSend(v22, sel_whiteColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          v18 = 0;
          v17 = 1;
        }
        else
        {
          v16 = objc_msgSend(v22, sel_blackColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          v18 = 0;
          v17 = 0;
        }
        goto LABEL_17;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  v16 = objc_msgSend(v3, sel_navigationBar, 0);
  objc_msgSend(v16, sel_setTintColor_, 0);
  v17 = 2;
  v18 = 1;
LABEL_17:

  v23 = objc_msgSend(v4, sel_navigationBar);
  v24 = v23;
  v25 = 1;
  if ((v17 & 1) != 0)
    v25 = 2;
  if (v18)
    v26 = 0;
  else
    v26 = v25;
  objc_msgSend(v23, sel_setOverrideUserInterfaceStyle_, v26);

  *a3 = v10;
  a3[1] = v17;
}

uint64_t specialized PlatformBarBackgroundHost.update(configuration:barState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  void *v3;
  void *v4;
  int v8;
  uint64_t result;
  unsigned int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  char v23;
  char v24;

  v4 = v3;
  v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  result = Transaction.animation.setter();
  v10 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    v11 = 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_19;
  }
  result = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v12 & 1) == 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * result) >= 1.0)
    v11 = 1;
  else
    v11 = 2;
LABEL_8:
  swift_release();
  v13 = a1 + 57;
  v14 = MEMORY[0x1E0CE0F28];
  outlined init with take of Image.Resolved?(v13, (uint64_t)&v23, &lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E0CE0F28]);
  result = outlined init with take of Image.Resolved?((uint64_t)&v23, (uint64_t)&v24, &lazy cache variable for type metadata for ColorScheme?, v14);
  v15 = v24;
  if (v24 == 2)
  {
LABEL_9:
    objc_msgSend(v3, sel_setTintColor_, 0, 0);
    v16 = 0;
    v17 = 2;
LABEL_17:
    result = (uint64_t)objc_msgSend(v4, sel_setOverrideUserInterfaceStyle_, v16);
    *a3 = v11;
    a3[1] = v17;
    return result;
  }
  if (v10 < 2)
  {
LABEL_14:
    v19 = (void *)objc_opt_self();
    v20 = v3;
    if ((v15 & 1) != 0)
    {
      v22 = objc_msgSend(v19, sel_whiteColor, 0);
      objc_msgSend(v20, sel_setTintColor_, v22);

      v17 = 1;
      v16 = 2;
    }
    else
    {
      v21 = objc_msgSend(v19, sel_blackColor, 0);
      objc_msgSend(v20, sel_setTintColor_, v21);

      v17 = 0;
      v16 = 1;
    }
    goto LABEL_17;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_20;
  result = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v18 & 1) != 0)
  {
    if (*(double *)(*(_QWORD *)(a2 + 56) + 8 * result) <= 0.5)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t PlatformBarUpdater.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?(v0 + 32);
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PlatformBarUpdater()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for bar()
{
  uint64_t result;

  static Material.bar.getter();
  result = AnyShapeStyle.init<A>(_:)();
  static PlatformBarBackground.Backgrounds.bar = result;
  return result;
}

uint64_t closure #1 in PlatformBarBackground.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v6;
  double v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  double v16;
  float v17;

  v6 = a1;
  if ((a2 & 1) != 0)
  {
    v8 = a4;
    if (a1)
    {
      v9 = one-time initialization token for bar;
      swift_retain();
      if (v9 != -1)
        swift_once();
      if (static PlatformBarBackground.Backgrounds.bar == v6)
      {
        swift_release();
      }
      else
      {
        v10 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        if ((v10 & 1) == 0)
        {
          v11 = 1;
          v8 = 0.0;
          v12 = v6;
LABEL_22:
          result = swift_retain();
          v15 = 0;
          v16 = 0.0;
          v6 = v12;
          goto LABEL_25;
        }
      }
      v11 = 0;
      v12 = v6;
      v8 = a4;
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (!a1)
  {
    v8 = 0.0;
LABEL_15:
    if (one-time initialization token for bar != -1)
      swift_once();
    v12 = static PlatformBarBackground.Backgrounds.bar;
    result = swift_retain();
    if ((a2 & 1) != 0)
    {
      v11 = 0;
      goto LABEL_22;
    }
    v6 = v12;
    goto LABEL_24;
  }
  v13 = one-time initialization token for bar;
  swift_retain();
  if (v13 != -1)
    swift_once();
  result = static PlatformBarBackground.Backgrounds.bar;
  if (static PlatformBarBackground.Backgrounds.bar == v6)
  {
    v8 = 0.0;
    goto LABEL_24;
  }
  result = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  v8 = 0.0;
  if ((result & 1) != 0)
  {
LABEL_24:
    v11 = 0;
    v15 = 0;
    v16 = a4;
    goto LABEL_25;
  }
  v11 = 0;
  v15 = 1;
  v16 = 0.0;
LABEL_25:
  *(double *)a3 = v8;
  v17 = a4;
  *(_BYTE *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 9) = (a2 & 1) == 0;
  *(_QWORD *)(a3 + 16) = v6;
  *(float *)(a3 + 24) = v17;
  *(_WORD *)(a3 + 28) = 256;
  *(double *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = v15;
  *(_BYTE *)(a3 + 41) = a2 & 1;
  return result;
}

uint64_t BarEnvironmentViewModel.visibility.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformBarBackground()
{
  type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, MEMORY[0x1E0CE74B8]);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance PlatformBarBackground@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  double v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(double *)(v1 + 16);
  v6 = static HorizontalAlignment.center.getter();
  result = closure #1 in PlatformBarBackground.body.getter(v3, v4, (uint64_t)&v19, v5);
  v8 = v19;
  v9 = v20;
  v10 = v21;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  if (v4)
    v18 = 4;
  else
    v18 = 1;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 33) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_DWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 52) = v13;
  *(_BYTE *)(a1 + 53) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_BYTE *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 65) = v17;
  *(_QWORD *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 80) = v18;
  return result;
}

uint64_t BarEnvironmentViewModel.colorScheme.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t ObjC metadata update function for BarEnvironmentViewModel()
{
  return type metadata accessor for BarEnvironmentViewModel(0);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance BarEnvironmentViewModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for BarEnvironmentViewModel(0);
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t ObjC metadata update function for PrimaryBarViewModel()
{
  return type metadata accessor for PrimaryBarViewModel(0);
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PlatformBarBackground(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformBarBackground()
{
  return &type metadata for PlatformBarBackground;
}

_QWORD *initializeBufferWithCopyOfBuffer for PlatformBarUpdater.UpdateContext(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for PlatformBarUpdater.UpdateContext(id *a1)
{

}

uint64_t assignWithCopy for PlatformBarUpdater.UpdateContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  return a1;
}

uint64_t assignWithTake for PlatformBarUpdater.UpdateContext(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PlatformBarUpdater.UpdateContext()
{
  return &type metadata for PlatformBarUpdater.UpdateContext;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.Updates()
{
  return &type metadata for BarAppearanceBridge.Updates;
}

uint64_t storeEnumTagSinglePayload for PlatformBarUpdates(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18742581C + 4 * byte_187C30505[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_187425850 + 4 * byte_187C30500[v4]))();
}

uint64_t sub_187425850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_187425858(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x187425860);
  return result;
}

uint64_t sub_18742586C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x187425874);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187425878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_187425880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatformBarUpdates()
{
  return &type metadata for PlatformBarUpdates;
}

uint64_t assignWithCopy for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  v10 = (_OWORD *)(a1 + 16);
  v11 = (_OWORD *)(a2 + 16);
  v12 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) != 2)
  {
    if (v12 == 2)
    {
      outlined destroy of PushTarget(a1 + 16);
      v14 = *(_OWORD *)(a2 + 25);
      *v10 = *v11;
      *(_OWORD *)(a1 + 25) = v14;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v15 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_9;
  }
  if (v12 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  v13 = *v11;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *v10 = v13;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PushTarget(uint64_t a1)
{
  destroy for UIKitScenePresentationModeLocation();
  return a1;
}

uint64_t assignWithTake for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) == 2)
  {
    if (v6 != 2)
    {
      swift_unknownObjectWeakTakeInit();
LABEL_8:
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      goto LABEL_9;
    }
  }
  else
  {
    if (v6 != 2)
    {
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of PushTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
LABEL_9:
  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.UpdateContext()
{
  return &type metadata for BarAppearanceBridge.UpdateContext;
}

uint64_t initializeWithCopy for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

_BYTE *assignWithCopy for BarAppearanceBridge.PlatformStorage(_BYTE *a1, _BYTE *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectWeakCopyAssign();
  a1[16] = a2[16];
  return a1;
}

uint64_t initializeWithTake for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for BarAppearanceBridge.PlatformStorage()
{
  return &type metadata for BarAppearanceBridge.PlatformStorage;
}

unint64_t lazy protocol witness table accessor for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarAppearanceBridge.Updates, &type metadata for BarAppearanceBridge.Updates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarAppearanceBridge.Updates, &type metadata for BarAppearanceBridge.Updates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarAppearanceBridge.Updates, &type metadata for BarAppearanceBridge.Updates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates;
  if (!lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BarAppearanceBridge.Updates, &type metadata for BarAppearanceBridge.Updates);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarAppearanceBridge.Updates and conformance BarAppearanceBridge.Updates);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PlatformBarBackground()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>();
    v0 = type metadata accessor for VStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>);
  }
}

void type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>??, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??));
  }
}

void type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>?)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E0CE5148], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>?);
  }
}

void type metadata accessor for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE4650]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    if ((v6 & 1) != 0)
    {
      v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  v9 = NSObject._rawHashValue(seed:)(v8);
  v10 = -1 << *(_BYTE *)(v4 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_12;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    v14 = ~v10;
    do
    {
      v11 = (v11 + 1) & v14;
      if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_12;
      v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
      v16 = static NSObject.== infix(_:_:)();

    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v2;
  v20 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v18 = v20;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  result = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = result & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_9:
    *(_QWORD *)a2 = 0;
    v13 = 1;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a1)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_9;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v12 = v14;
  }
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v2 = v14;
  result = swift_bridgeObjectRelease();
  v13 = 0;
LABEL_10:
  *(_BYTE *)(a2 + 8) = v13;
  return result;
}

Swift::Int specialized Set._Variant.remove(_:)@<X0>(Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = result & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v12 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v10);
      if (v12[1] == a2 && *v12 == a1)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_8;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v15 = v19;
    }
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v10);
    v18 = *v16;
    v17 = v16[1];
    *a3 = v18;
    a3[1] = v17;
    specialized _NativeSet._delete(at:)(v10);
    *v3 = v19;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = __CocoaSet.count.getter();
  v3 = swift_unknownObjectRetain();
  v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  v16 = v4;
  v5 = *(_QWORD *)(v4 + 40);
  swift_retain();
  v6 = NSObject._rawHashValue(seed:)(v5);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v11 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v11;
        if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
        v13 = static NSObject.== infix(_:_:)();

        if ((v13 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v6 = a2(0);
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v30 = v4;
    v14 = ~v12;
    swift_retain();
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v32 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v36 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v31(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v34, v33, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
        v21 = v20 & v14;
        if (a1 >= (uint64_t)v32)
        {
          if (v21 >= v32 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v16 = v18;
            v24 = v18 * a1;
            if (v18 * a1 < v19
              || *(_QWORD *)(v10 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(v10 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v24 != v19)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v32 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v4 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*v4 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
}

uint64_t specialized static PlatformBarUpdates.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0)
      return 0;
  }
  return 1;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for EnvironmentObjectKey<PrimaryBarViewModel>, type metadata accessor for PrimaryBarViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE4D40]);
    lazy protocol witness table accessor for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>();
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined retain of ToolbarAppearanceConfiguration(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ToolbarAppearanceConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined init with take of BarAppearanceBridge.PlatformStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  return a2;
}

uint64_t sub_18742774C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)()
{
  uint64_t v0;

  return closure #2 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(*(void **)(v0 + 16), *(unsigned int *)(v0 + 24));
}

id partial apply for closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)()
{
  uint64_t v0;

  return closure #1 in BarAppearanceBridge.updateTabBarVisibility(_:tabBarController:)(*(void **)(v0 + 16), *(unsigned int *)(v0 + 24));
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v3[40];
  _BYTE v4[40];

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result + 32;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v2, (uint64_t)v3);
      specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)v3);
      result = outlined destroy of Toolbar.BarLocation((uint64_t)v4);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationTitleKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ToolbarRoleKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarRoleKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarRoleKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarRoleKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<NavigationBarBackButtonHiddenKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarBackButtonHiddenKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarBackButtonHiddenKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<NavigationBarBackButtonHiddenKey>, (uint64_t)&type metadata for NavigationBarBackButtonHiddenKey, (uint64_t)&protocol witness table for NavigationBarBackButtonHiddenKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<NavigationBarBackButtonHiddenKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<ToolbarKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<SearchKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

uint64_t *outlined release of (ToolbarAppearanceConfiguration?, ToolbarAppearanceConfiguration?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a1[11];
  v4 = a1[10];
  outlined consume of ToolbarAppearanceConfiguration?(*a1, a1[1]);
  outlined consume of ToolbarAppearanceConfiguration?(v4, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>> and conformance VStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, MEMORY[0x1E0CE74B8]);
    v3[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, OpacityRendererEffect>??, _ShapeView<Rectangle, _OpacityShapeStyle<AnyShapeStyle>>, ModifiedContent<Divider, OpacityRendererEffect>??)>>, _SafeAreaRegionsIgnoringLayout>);
  }
}

ValueMetadata *type metadata accessor for SystemTextEditorStyle()
{
  return &type metadata for SystemTextEditorStyle;
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in SystemTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in SystemTextEditorStyle.makeBody(configuration:)(uint64_t result)
{
  if (!*(_BYTE *)(result + 8))
    *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance SystemTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;

  v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for TextEditorStyleConfiguration);
  KeyPath = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, (uint64_t)v12, type metadata accessor for UIKitTextEditor);
  v14 = &v12[*(int *)(v9 + 36)];
  *(_QWORD *)v14 = KeyPath;
  v14[8] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for UIKitTextEditor);
  v15 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  v17 = (uint64_t *)(a2 + *(int *)(v16 + 36));
  *v17 = v15;
  v17[1] = (uint64_t)closure #1 in SystemTextEditorStyle.makeBody(configuration:);
  v17[2] = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

void type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>)
  {
    type metadata accessor for UIKitTextEditor(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>, (uint64_t)&type metadata for TextEditorBorderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>)
  {
    type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
    v2 = v1;
    v3[0] = &protocol witness table for UIKitTextEditor;
    v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextEditorBorderStyle>, (uint64_t)&type metadata for TextEditorBorderStyle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextEditorBorderStyle> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t EnvironmentValues.navigationEventHandlers.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.navigationEventHandlers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = EnvironmentValues.navigationEventHandlers.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationEventHandlers : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  outlined copy of AppIntentExecutor?(*a1);
  outlined copy of AppIntentExecutor?(v3);
  specialized EnvironmentValues._set<A>(_:for:)(v1, v2, v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
}

uint64_t EnvironmentValues.navigationRequiredCompactColumn.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

double key path getter for EnvironmentValues.navigationRequiredCompactColumn : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  char v5;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationRequiredCompactColumn : EnvironmentValues(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t View.onNavigationSplitViewExpand_v1(action:)(uint64_t a1, uint64_t a2)
{
  return View.onNavigationSplitViewExpand_v1(action:)(a1, a2);
}

{
  uint64_t v4;

  swift_getKeyPath();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain();
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187428464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = EnvironmentValues.navigationEventHandlers.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_1874284A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onNavigationSplitViewExpand_v1(action:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *a1;
  swift_retain();
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t View.onNavigation_v1(action:)(uint64_t a1, uint64_t a2)
{
  return View.onNavigationSplitViewExpand_v1(action:)(a1, a2);
}

uint64_t partial apply for closure #1 in View.onNavigation_v1(action:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  swift_retain();
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t View.navigationSplitViewCompactColumn_v1(_:)()
{
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t NavigationUpdateEvent.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NavigationUpdateEvent.Action(v1, a1);
}

uint64_t outlined init with copy of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for NavigationUpdateEvent.Action(a2, a1);
  return a2;
}

uint64_t NavigationUpdateEvent.action.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of NavigationUpdateEvent.Action(a1, v1);
}

uint64_t outlined assign with take of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  assignWithTake for NavigationUpdateEvent.Action(a2, a1);
  return a2;
}

uint64_t (*NavigationUpdateEvent.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void NavigationUpdateEvent.column.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 57);
}

_BYTE *NavigationUpdateEvent.column.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = *result;
  return result;
}

uint64_t (*NavigationUpdateEvent.column.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t destroy for NavigationUpdateEvent(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 56) - 1 <= 2)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(a2 + 56);
  switch(v4)
  {
    case 3:
      v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 56) = 3;
      break;
    case 2:
      v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(_BYTE *)(a1 + 56) = 2;
      break;
    case 1:
      v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_BYTE *)(a1 + 56) = 1;
      break;
    default:
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      break;
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithCopy for NavigationUpdateEvent(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if ((__int128 *)a1 != a2)
  {
    outlined destroy of NavigationUpdateEvent.Action(a1);
    v4 = *((unsigned __int8 *)a2 + 56);
    switch(v4)
    {
      case 3:
        v6 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v6;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
        *(_BYTE *)(a1 + 56) = 3;
        break;
      case 2:
        v7 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v7;
        v8 = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_QWORD *)(a1 + 48) = v8;
        (**(void (***)(uint64_t, __int128 *))(v7 - 8))(a1, a2);
        *(_BYTE *)(a1 + 56) = 2;
        break;
      case 1:
        v5 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v5;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v5 - 8))(a1, a2);
        *(_BYTE *)(a1 + 56) = 1;
        break;
      default:
        v9 = *a2;
        v10 = a2[1];
        v11 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = v11;
        *(_OWORD *)a1 = v9;
        break;
    }
  }
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  return a1;
}

uint64_t outlined destroy of NavigationUpdateEvent.Action(uint64_t a1)
{
  destroy for NavigationUpdateEvent.Action(a1);
  return a1;
}

uint64_t assignWithTake for NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of NavigationUpdateEvent.Action(a1);
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationUpdateEvent(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 57) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 57);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 57) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationUpdateEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationUpdateEvent()
{
  return &type metadata for NavigationUpdateEvent;
}

uint64_t destroy for NavigationUpdateEvent.Action(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 56);
  if (v1 >= 4)
    v1 = *(_DWORD *)result + 4;
  if (v1 - 1 <= 2)
    return __swift_destroy_boxed_opaque_existential_1(result);
  return result;
}

uint64_t initializeWithCopy for NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;

  v3 = *(unsigned __int8 *)(a2 + 56);
  if (v3 >= 4)
    v3 = *(_DWORD *)a2 + 4;
  switch(v3)
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 56) = 0;
      return a1;
    case 1u:
      v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t))(v5 - 8))(a1);
      v6 = 1;
      goto LABEL_9;
    case 2u:
      v7 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v7;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      (**(void (***)(uint64_t))(v7 - 8))(a1);
      v6 = 2;
      goto LABEL_9;
    case 3u:
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t))(v8 - 8))(a1);
      v6 = 3;
LABEL_9:
      *(_BYTE *)(a1 + 56) = v6;
      break;
    default:
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for NavigationUpdateEvent.Action(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4 - 1 <= 2)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *((unsigned __int8 *)a2 + 56);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 56) = 0;
        return a1;
      case 1u:
        v9 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v9 - 8))(a1, a2);
        v10 = 1;
        goto LABEL_14;
      case 2u:
        v11 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v11;
        v12 = *((_QWORD *)a2 + 6);
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_QWORD *)(a1 + 48) = v12;
        (**(void (***)(uint64_t, __int128 *))(v11 - 8))(a1, a2);
        v10 = 2;
        goto LABEL_14;
      case 3u:
        v13 = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 24) = v13;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        (**(void (***)(uint64_t, __int128 *))(v13 - 8))(a1, a2);
        v10 = 3;
LABEL_14:
        *(_BYTE *)(a1 + 56) = v10;
        break;
      default:
        v6 = *a2;
        v7 = a2[1];
        v8 = a2[2];
        *(_OWORD *)(a1 + 41) = *(__int128 *)((char *)a2 + 41);
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = v8;
        *(_OWORD *)a1 = v6;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 56);
    if (v4 >= 4)
      v4 = *(_DWORD *)a1 + 4;
    if (v4 - 1 <= 2)
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 56);
    if (v5 >= 4)
      v5 = *(_DWORD *)a2 + 4;
    switch(v5)
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_BYTE *)(a1 + 56) = 0;
        return a1;
      case 1u:
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v8 = 1;
        goto LABEL_14;
      case 2u:
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
        v8 = 2;
        goto LABEL_14;
      case 3u:
        v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v8 = 3;
LABEL_14:
        *(_BYTE *)(a1 + 56) = v8;
        break;
      default:
        v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationUpdateEvent.Action(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 >= 5)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NavigationUpdateEvent.Action(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for NavigationUpdateEvent.Action(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 56);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationUpdateEvent.Action(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_QWORD *)(result + 48) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NavigationUpdateEvent.Action()
{
  return &type metadata for NavigationUpdateEvent.Action;
}

uint64_t sub_187428F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<NavigationEventHandlers>, (uint64_t)&type metadata for NavigationEventHandlers, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<NavigationEventHandlers>, (uint64_t)&type metadata for NavigationEventHandlers, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE66D8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<NavigationEventHandlers> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_187429000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>)
  {
    type metadata accessor for Binding<NavigationSplitViewColumn>?();
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>);
  }
}

void type metadata accessor for Binding<NavigationSplitViewColumn>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>, (uint64_t)&type metadata for NavigationSplitViewColumn, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<NavigationSplitViewColumn>?);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<NavigationSplitViewColumn>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationEventHandlers()
{
  return &type metadata for NavigationEventHandlers;
}

Swift::Void __swiftcall UpdateNavigationEventHandlers.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7[8];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[64];
  uint64_t v14;
  _BYTE v15[24];

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of NavigationAuthority?(Value, (uint64_t)&v9);
  if (*((_QWORD *)&v9 + 1) == 1)
  {
    outlined destroy of NavigationAuthority?((uint64_t)&v9);
  }
  else
  {
    outlined init with take of NavigationAuthority((uint64_t)&v9, (uint64_t)v15);
    v2 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v2 != *(_DWORD *)(v0 + 28))
    {
      *(_DWORD *)(v0 + 28) = v2;
      *(_QWORD *)(v0 + 16) = 0xFFFFFFFFLL;
      *(_BYTE *)(v0 + 24) = 0;
    }
    if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) != 0)
    {
      v3 = (_QWORD *)AGGraphGetValue();
      v4 = v3[1];
      v5 = v3[2];
      v6 = v3[3];
      *(_QWORD *)&v9 = *v3;
      *((_QWORD *)&v9 + 1) = v4;
      *(_QWORD *)&v10 = v5;
      *((_QWORD *)&v10 + 1) = v6;
      v11 = 0u;
      v12 = 0u;
      v13[0] = 21;
      memset(&v13[8], 0, 32);
      *(_OWORD *)&v13[40] = xmmword_187BF9FB0;
      v13[56] = 0;
      v14 = 0;
      v7[6] = *(_OWORD *)&v13[32];
      v7[7] = *(_OWORD *)&v13[48];
      v8 = 0;
      v7[4] = *(_OWORD *)v13;
      v7[5] = *(_OWORD *)&v13[16];
      v7[0] = v9;
      v7[1] = v10;
      memset(&v7[2], 0, 32);
      outlined copy of AppIntentExecutor?(v9);
      outlined copy of AppIntentExecutor?(v5);
      NavigationAuthority.enqueueRequest(_:)(v7);
      outlined release of NavigationRequest((uint64_t)&v9);
    }
    outlined destroy of NavigationAuthority((uint64_t)v15);
  }
}

unint64_t implicit closure #2 in UpdateNavigationEventHandlers.updateValue()()
{
  return 0xD00000000000001ELL;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance NavigationCompactColumnKey(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

ValueMetadata *type metadata accessor for NavigationEventHandlersKey()
{
  return &type metadata for NavigationEventHandlersKey;
}

ValueMetadata *type metadata accessor for NavigationCompactColumnKey()
{
  return &type metadata for NavigationCompactColumnKey;
}

ValueMetadata *type metadata accessor for UpdateNavigationEventHandlers()
{
  return &type metadata for UpdateNavigationEventHandlers;
}

ValueMetadata *type metadata accessor for PlatformItemListTextFieldStyle()
{
  return &type metadata for PlatformItemListTextFieldStyle;
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in PlatformItemListTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PlatformItemListTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  outlined init with copy of TextField<_TextFieldStyleLabel>(a2, a3);
  v5 = a3 + *(int *)(type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter() + 20);
  return outlined init with copy of PlatformItem(a1, v5);
}

uint64_t static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<PlatformItemListTextFieldStyle.PlatformItemListWriter>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.getter();
  type metadata accessor for PropertyList.Tracker();
  PropertyList.Tracker.__allocating_init()();
  _ViewOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v2;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  outlined retain of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(a1);
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems();
  v2 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(a1);
  return v2;
}

id PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  uint64_t Value;
  objc_class *v8;
  _BYTE *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  __int128 v18;
  objc_super v19;
  _BYTE v20[224];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - v3;
  v5 = *(void **)(v0 + 24);
  if (v5)
  {
    v6 = *(id *)(v0 + 24);
  }
  else
  {
    Value = AGGraphGetValue();
    outlined init with copy of TextField<_TextFieldStyleLabel>(Value, (uint64_t)v4);
    v8 = (objc_class *)type metadata accessor for PlatformTextFieldCoordinator(0);
    v9 = objc_allocWithZone(v8);
    v18 = xmmword_187BFE310;
    *(_OWORD *)&v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_187BFE310;
    v10 = &v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v20);
    *((_OWORD *)v10 + 15) = 0u;
    *((_OWORD *)v10 + 16) = 0u;
    v11 = v18;
    *((_OWORD *)v10 + 17) = 0u;
    *((_OWORD *)v10 + 18) = v11;
    *(_QWORD *)v10 = &outlined read-only object #0 of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter;
    *((_QWORD *)v10 + 1) = 0;
    *((_DWORD *)v10 + 4) = 0;
    outlined init with take of Image.Resolved?((uint64_t)v20, (uint64_t)(v10 + 24), (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    *((_QWORD *)v10 + 38) = 0;
    v10[312] = 1;
    *((_QWORD *)v10 + 40) = 0;
    *((_QWORD *)v10 + 41) = 0;
    v12 = &v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[32] = 1;
    v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
    v13 = &v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
    *(_QWORD *)v13 = 0;
    v13[8] = -1;
    v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
    v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
    outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)v4, (uint64_t)&v9[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    v12[32] = 1;
    v19.receiver = v9;
    v19.super_class = v8;
    v14 = objc_msgSendSuper2(&v19, sel_init);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v4);
    v15 = *(void **)(v0 + 24);
    v6 = v14;

    v5 = 0;
    *(_QWORD *)(v0 + 24) = v14;
  }
  v16 = v5;
  return v6;
}

uint64_t PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(_QWORD **);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v53;
  uint64_t (*v54)(_QWORD **);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  _OWORD v63[21];
  uint64_t (*v64)(_QWORD **);
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[44];

  v68[42] = *MEMORY[0x1E0C80C00];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v1, v2);
  v53 = (uint64_t)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v53 - v6;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v53 - v10;
  v58 = (char *)PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.coordinator.getter();
  Value = AGGraphGetValue();
  outlined init with copy of PlatformItem(Value, (uint64_t)v68);
  v13 = AGGraphGetValue();
  v55 = v14;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v13, (uint64_t)v11);
  v15 = (uint64_t *)AGGraphGetValue();
  v17 = *v15;
  v16 = v15[1];
  if ((v18 & 1) != 0)
  {
    swift_retain();
    swift_retain_n();
    v62 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
    v62 = 0;
  }
  v19 = AGGraphGetValue();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v19, (uint64_t)v7);
  v21 = *((_QWORD *)v7 + 9);
  v20 = *((_QWORD *)v7 + 10);
  v22 = *((_QWORD *)v7 + 11);
  v23 = *((_QWORD *)v7 + 12);
  v25 = *((_QWORD *)v7 + 13);
  v24 = *((_QWORD *)v7 + 14);
  v27 = *((_QWORD *)v7 + 15);
  v26 = *((_QWORD *)v7 + 16);
  v29 = *((_QWORD *)v7 + 17);
  v28 = *((_QWORD *)v7 + 18);
  v31 = *((_QWORD *)v7 + 19);
  v30 = *((_QWORD *)v7 + 20);
  v32 = *((_QWORD *)v7 + 21);
  v33 = v7[179];
  v59 = v11;
  v60 = v0;
  v56 = v17;
  v57 = v16;
  if ((v33 & 1) != 0)
  {
    v34 = *((unsigned __int16 *)v7 + 88) | (v7[178] << 16);
    *(_QWORD *)&v63[0] = v21;
    *((_QWORD *)&v63[0] + 1) = v20;
    *(_QWORD *)&v63[1] = v22;
    *((_QWORD *)&v63[1] + 1) = v23;
    *(_QWORD *)&v63[2] = v25;
    *((_QWORD *)&v63[2] + 1) = v24;
    *(_QWORD *)&v63[3] = v27;
    *((_QWORD *)&v63[3] + 1) = v26;
    *(_QWORD *)&v63[4] = v29;
    *((_QWORD *)&v63[4] + 1) = v28;
    *(_QWORD *)&v63[5] = v31;
    *((_QWORD *)&v63[5] + 1) = v30;
    LOBYTE(v63[6]) = v32 & 1;
    DWORD1(v63[6]) = HIDWORD(v32);
    WORD4(v63[6]) = v34 & 0xFF01;
    BYTE10(v63[6]) = BYTE2(v34) & 1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v64);
  }
  else
  {
    *(_QWORD *)&v63[0] = v21;
    *((_QWORD *)&v63[0] + 1) = v20;
    *(_QWORD *)&v63[1] = v22;
    *((_QWORD *)&v63[1] + 1) = v23;
    *(_QWORD *)&v63[2] = v25;
    *((_QWORD *)&v63[2] + 1) = v24;
    *(_QWORD *)&v63[3] = v27;
    *((_QWORD *)&v63[3] + 1) = v26;
    *(_QWORD *)&v63[4] = v29;
    *((_QWORD *)&v63[4] + 1) = v28;
    LOBYTE(v63[5]) = v31 & 1;
    DWORD1(v63[5]) = HIDWORD(v31);
    WORD4(v63[5]) = v30 & 0xFF01;
    BYTE10(v63[5]) = BYTE2(v30) & 1;
    *(_QWORD *)&v63[6] = v32;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
  }
  v54 = v64;
  v35 = v66;
  v61 = v65;
  v36 = v67;
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v7);
  outlined consume of TextFieldState.FormatActions?(v35);
  outlined consume of TextFieldState.FormatActions?(v36);
  v37 = v60;
  v38 = *(_QWORD **)(v60 + 40);
  if (v38)
  {
    v39 = v55;
    v41 = v58;
    v40 = (uint64_t)v59;
    if (*(uint64_t (**)(_QWORD **))(v60 + 32) == v54 && v38 == v61)
    {
      v42 = v54;
      v43 = 1;
      if ((v55 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v42 = v54;
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((v39 & 1) != 0)
        goto LABEL_18;
    }
  }
  else
  {
    v42 = v54;
    v39 = v55;
    v43 = 0;
    v41 = v58;
    v40 = (uint64_t)v59;
    if ((v55 & 1) != 0)
      goto LABEL_18;
  }
  type metadata accessor for (_:)();
  if (AGGraphGetOutputValue())
  {
    if ((v62 & 1) != 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  v44 = v53;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v40, v53);
  v45 = (uint64_t)&v41[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>(v44, v45);
  swift_endAccess();
  outlined init with copy of PlatformItem((uint64_t)v68, (uint64_t)v63);
  v46 = (uint64_t)&v41[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v63, v46);
  swift_endAccess();
  if ((v62 & 1) != 0)
  {
LABEL_20:
    PropertyList.Tracker.reset()();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    v47 = *(_QWORD *)&v41[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
    *(_OWORD *)&v41[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = v63[0];
    outlined consume of EnvironmentValues?(v47);
    goto LABEL_21;
  }
LABEL_19:
  type metadata accessor for (_:)();
  if (!AGGraphGetOutputValue())
    goto LABEL_20;
LABEL_21:
  if (((v39 | v62) & 1) != 0 || (type metadata accessor for (_:)(), !AGGraphGetOutputValue()))
    PlatformTextFieldCoordinator.update()();
  type metadata accessor for (_:)();
  v48 = AGGraphGetOutputValue() != 0;
  v49 = v61;
  if ((v48 & v43 & 1) == 0)
  {
    outlined init with copy of PlatformItem((uint64_t)v68, (uint64_t)v63);
    v50 = (_QWORD *)swift_allocObject();
    v50[2] = v41;
    v50[3] = v42;
    v50[4] = v49;
    memcpy(v50 + 5, v63, 0x150uLL);
    v64 = partial apply for closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue();
    v65 = v50;
    swift_bridgeObjectRetain();
    v51 = v41;
    AGGraphSetOutputValue();
    swift_release();
  }
  *(_QWORD *)(v37 + 32) = v42;
  *(_QWORD *)(v37 + 40) = v49;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of TextField<_TextFieldStyleLabel>(v40);
  return outlined destroy of PlatformItem((uint64_t)v68);
}

uint64_t closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(_QWORD **a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  _QWORD **v31;
  uint64_t v32;
  int v33;
  id v34;
  id v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  _QWORD **v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  __int128 v50[4];
  char v51;
  id v52[27];
  __n128 v53;
  uint64_t v54;
  _BYTE v55[192];

  v40 = a5;
  v41 = a1;
  v46 = a3;
  v47 = a4;
  v6 = type metadata accessor for PlatformItemList.Item();
  v49 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v48 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v40 - v11;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v55);
  outlined init with take of Image.Resolved?((uint64_t)v55, (uint64_t)v52, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E0CE7280]);
  v50[0] = xmmword_187BF9840;
  memset(&v50[1], 0, 48);
  v51 = 0;
  v53 = 0uLL;
  v54 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v52, v50, &v53, 0, 0, (uint64_t)v12);
  v13 = (void *)*((_QWORD *)v12 + 37);
  v14 = *((_QWORD *)v12 + 38);
  v15 = *((_QWORD *)v12 + 39);
  v16 = *((_QWORD *)v12 + 40);
  v17 = *((_QWORD *)v12 + 42);
  v44 = *((_QWORD *)v12 + 41);
  v45 = v15;
  v19 = *((_QWORD *)v12 + 43);
  v18 = *((_QWORD *)v12 + 44);
  v20 = *(_OWORD *)(v12 + 360);
  v42 = *(_OWORD *)(v12 + 376);
  v43 = v20;
  v21 = *((_QWORD *)v12 + 49);
  v22 = a2;
  v23 = v16;
  v24 = v18;
  v26 = v46;
  v25 = v47;
  outlined consume of PlatformItemList.Item.SystemItem?(v13, v14, v45, v23, v44, v17, v19, v24, v43, *((uint64_t *)&v43 + 1), v42, SBYTE8(v42), v21);
  *((_QWORD *)v12 + 37) = a2;
  *((_QWORD *)v12 + 38) = 0;
  *((_QWORD *)v12 + 39) = 0;
  *((_QWORD *)v12 + 40) = 0;
  *((_QWORD *)v12 + 41) = 0x4000000000000000;
  v27 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v27 = v26 & 0xFFFFFFFFFFFFLL;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_OWORD *)v12 + 23) = 0u;
  *((_OWORD *)v12 + 24) = 0u;
  if (v27)
  {
    v28 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    swift_bridgeObjectRetain();
    v29 = (void *)MEMORY[0x18D75CC88](v26, v25);
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v28, sel_initWithString_, v29, v40);

    *(_QWORD *)v12 = v30;
    v31 = v41;
    v32 = (uint64_t)v48;
  }
  else
  {
    outlined init with take of Image.Resolved?(v40 + 24, (uint64_t)v50, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    outlined init with take of Image.Resolved?((uint64_t)v50, (uint64_t)v52, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    v33 = _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v52);
    v32 = (uint64_t)v48;
    if (v33 == 1)
    {
      v31 = v41;
    }
    else
    {
      v34 = v52[0];
      v31 = v41;
      if (v52[0])
      {
        v35 = v52[0];
        if (objc_msgSend(v35, sel_length))
        {

          *(_QWORD *)v12 = v34;
        }
        else
        {

        }
      }
    }
  }
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, v32);
  v36 = *v31;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
  v38 = v36[2];
  v37 = v36[3];
  if (v38 >= v37 >> 1)
    v36 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v36);
  v36[2] = v38 + 1;
  outlined init with take of PlatformItemList.Item(v32, (uint64_t)v36+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v38);
  *v31 = v36;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

void protocol witness for View.body.getter in conformance PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for TextFieldStyle._body(configuration:) in conformance PlatformItemListTextFieldStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - v7;
  outlined init with copy of TextField<_TextFieldStyleLabel>((uint64_t)a1, (uint64_t)&v22 - v7);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v8, v10 + v9);
  swift_retain();
  v11 = static Alignment.center.getter();
  v13 = v12;
  v14 = a1[5];
  v15 = a1[6];
  v16 = a1[7];
  v17 = a1[8];
  if (v17)
    v18 = v14;
  else
    v18 = 0;
  if (v17)
    v19 = v15;
  else
    v19 = 0;
  if (v17)
    v20 = v16 & 1;
  else
    v20 = 0;
  outlined copy of Text?(v14, v15, v16, v17);
  result = swift_release();
  *(_QWORD *)a2 = partial apply for closure #1 in PlatformItemListTextFieldStyle._body(configuration:);
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v17;
  *(_BYTE *)(a2 + 64) = v17 == 0;
  return result;
}

uint64_t sub_18742A3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v2 = v1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v4 = v0 + ((v3 + 16) & ~v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_BYTE *)(v4 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 152), *(_QWORD *)(v4 + 160), *(_QWORD *)(v4 + 168), *(unsigned __int16 *)(v4 + 176) | (*(unsigned __int8 *)(v4 + 178) << 16), *(_BYTE *)(v4 + 179));
  v5 = v4 + *(int *)(v2 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    v8 = v5 + *(int *)(v7 + 32);
    v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemListTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  return closure #1 in PlatformItemListTextFieldStyle._body(configuration:)(a1, v2 + ((v6 + 16) & ~v6), a2);
}

uint64_t type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PlatformItemListTextFieldStyle.PlatformItemListWriter;
  if (!type metadata singleton initialization cache for PlatformItemListTextFieldStyle.PlatformItemListWriter)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  _OWORD *v53;
  _OWORD *v54;
  unint64_t v55;
  id v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  char *v91;
  int v92;
  uint64_t v93;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v8 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8)
    {
      v9 = a2[5];
      v10 = a2[6];
      v11 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v12;
    }
    v13 = a2[9];
    v14 = a2[10];
    v15 = a2[11];
    v16 = a2[12];
    v17 = a2[13];
    v18 = a2[14];
    v19 = a2[15];
    v20 = a2[16];
    v84 = a2[17];
    v85 = a2[18];
    v86 = a2[19];
    v87 = a2[20];
    v88 = a2[21];
    v90 = *((unsigned __int8 *)a2 + 178);
    v92 = *((unsigned __int16 *)a2 + 88);
    v89 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v19, v20, v84, v85, v86, v87, v88, v92 | (v90 << 16), v89);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v17;
    *(_QWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 136) = v84;
    *(_QWORD *)(a1 + 144) = v85;
    *(_QWORD *)(a1 + 152) = v86;
    *(_QWORD *)(a1 + 160) = v87;
    *(_QWORD *)(a1 + 168) = v88;
    *(_BYTE *)(a1 + 178) = v90;
    *(_WORD *)(a1 + 176) = v92;
    *(_BYTE *)(a1 + 179) = v89;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v22 = *(int *)(v21 + 56);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = a3;
    }
    else
    {
      v93 = v27;
      v30 = v24[1];
      *v23 = *v24;
      v23[1] = v30;
      v31 = *(int *)(v26 + 32);
      v91 = (char *)v23 + v31;
      v32 = (char *)v24 + v31;
      v33 = type metadata accessor for TextSelection(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_retain();
      swift_retain();
      if (v35(v32, 1, v33))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v91, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v29 = a3;
      }
      else
      {
        v37 = type metadata accessor for TextSelection.Indices(0);
        v29 = a3;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v91, v32, v38);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v91, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        v91[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v91, 0, 1, v33);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v93 + 56))(v23, 0, 1, v26);
    }
    v39 = *(int *)(v29 + 20);
    v40 = a1 + v39;
    v41 = (uint64_t)a2 + v39;
    v42 = *(uint64_t *)((char *)a2 + v39);
    v43 = *(uint64_t *)((char *)a2 + v39 + 8);
    *(_QWORD *)v40 = v42;
    *(_QWORD *)(v40 + 8) = v43;
    *(_DWORD *)(v40 + 16) = *(_DWORD *)(v41 + 16);
    v44 = *(void **)(v41 + 24);
    swift_bridgeObjectRetain();
    if (v44 == (void *)1)
    {
      v45 = *(_OWORD *)(v41 + 200);
      *(_OWORD *)(v40 + 184) = *(_OWORD *)(v41 + 184);
      *(_OWORD *)(v40 + 200) = v45;
      *(_OWORD *)(v40 + 216) = *(_OWORD *)(v41 + 216);
      *(_QWORD *)(v40 + 232) = *(_QWORD *)(v41 + 232);
      v46 = *(_OWORD *)(v41 + 136);
      *(_OWORD *)(v40 + 120) = *(_OWORD *)(v41 + 120);
      *(_OWORD *)(v40 + 136) = v46;
      v47 = *(_OWORD *)(v41 + 168);
      *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
      *(_OWORD *)(v40 + 168) = v47;
      v48 = *(_OWORD *)(v41 + 72);
      *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
      *(_OWORD *)(v40 + 72) = v48;
      v49 = *(_OWORD *)(v41 + 104);
      *(_OWORD *)(v40 + 88) = *(_OWORD *)(v41 + 88);
      *(_OWORD *)(v40 + 104) = v49;
      v50 = *(_OWORD *)(v41 + 40);
      *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
      *(_OWORD *)(v40 + 40) = v50;
    }
    else
    {
      v51 = *(void **)(v41 + 32);
      v52 = *(void **)(v41 + 40);
      *(_QWORD *)(v40 + 24) = v44;
      *(_QWORD *)(v40 + 32) = v51;
      *(_QWORD *)(v40 + 40) = v52;
      v53 = (_OWORD *)(v40 + 48);
      v54 = (_OWORD *)(v41 + 48);
      v55 = *(_QWORD *)(v41 + 168);
      v56 = v44;
      v57 = v51;
      v58 = v52;
      if (v55 >> 1 == 4294967294)
      {
        v59 = *(_OWORD *)(v41 + 192);
        *(_OWORD *)(v40 + 176) = *(_OWORD *)(v41 + 176);
        *(_OWORD *)(v40 + 192) = v59;
        *(_OWORD *)(v40 + 208) = *(_OWORD *)(v41 + 208);
        *(_DWORD *)(v40 + 223) = *(_DWORD *)(v41 + 223);
        v60 = *(_OWORD *)(v41 + 128);
        *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
        *(_OWORD *)(v40 + 128) = v60;
        v61 = *(_OWORD *)(v41 + 160);
        *(_OWORD *)(v40 + 144) = *(_OWORD *)(v41 + 144);
        *(_OWORD *)(v40 + 160) = v61;
        v62 = *(_OWORD *)(v41 + 64);
        *v53 = *v54;
        *(_OWORD *)(v40 + 64) = v62;
        v63 = *(_OWORD *)(v41 + 96);
        *(_OWORD *)(v40 + 80) = *(_OWORD *)(v41 + 80);
        *(_OWORD *)(v40 + 96) = v63;
      }
      else
      {
        v64 = *(unsigned __int8 *)(v41 + 56);
        if (v64 == 255)
        {
          *(_QWORD *)v53 = *(_QWORD *)v54;
          *(_BYTE *)(v40 + 56) = *(_BYTE *)(v41 + 56);
        }
        else
        {
          v65 = *(void **)(v41 + 48);
          outlined copy of GraphicsImage.Contents(v65, *(_BYTE *)(v41 + 56));
          *(_QWORD *)(v40 + 48) = v65;
          *(_BYTE *)(v40 + 56) = v64;
          v55 = *(_QWORD *)(v41 + 168);
        }
        *(_QWORD *)(v40 + 64) = *(_QWORD *)(v41 + 64);
        *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
        *(_BYTE *)(v40 + 88) = *(_BYTE *)(v41 + 88);
        *(_OWORD *)(v40 + 92) = *(_OWORD *)(v41 + 92);
        *(_BYTE *)(v40 + 108) = *(_BYTE *)(v41 + 108);
        v66 = *(_OWORD *)(v41 + 128);
        *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
        *(_OWORD *)(v40 + 128) = v66;
        *(_WORD *)(v40 + 144) = *(_WORD *)(v41 + 144);
        *(_BYTE *)(v40 + 146) = *(_BYTE *)(v41 + 146);
        *(_BYTE *)(v40 + 147) = *(_BYTE *)(v41 + 147);
        if (v55 >> 1 == 0xFFFFFFFF)
        {
          v67 = *(_OWORD *)(v41 + 168);
          *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
          *(_OWORD *)(v40 + 168) = v67;
        }
        else
        {
          v68 = *(_QWORD *)(v41 + 152);
          v69 = *(_QWORD *)(v41 + 160);
          v70 = *(_QWORD *)(v41 + 176);
          outlined copy of AccessibilityImageLabel(v68, v69, v55);
          *(_QWORD *)(v40 + 152) = v68;
          *(_QWORD *)(v40 + 160) = v69;
          *(_QWORD *)(v40 + 168) = v55;
          *(_QWORD *)(v40 + 176) = v70;
        }
        v71 = *(_QWORD *)(v41 + 192);
        *(_QWORD *)(v40 + 184) = *(_QWORD *)(v41 + 184);
        *(_QWORD *)(v40 + 192) = v71;
        *(_WORD *)(v40 + 200) = *(_WORD *)(v41 + 200);
        *(_DWORD *)(v40 + 204) = *(_DWORD *)(v41 + 204);
        *(_BYTE *)(v40 + 208) = *(_BYTE *)(v41 + 208);
        v72 = *(void **)(v41 + 216);
        *(_QWORD *)(v40 + 216) = v72;
        *(_WORD *)(v40 + 224) = *(_WORD *)(v41 + 224);
        *(_BYTE *)(v40 + 226) = *(_BYTE *)(v41 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v73 = v72;
      }
      *(_BYTE *)(v40 + 227) = *(_BYTE *)(v41 + 227);
      *(_QWORD *)(v40 + 232) = *(_QWORD *)(v41 + 232);
      swift_retain();
    }
    v74 = *(_QWORD *)(v41 + 288);
    if (v74 == 1)
    {
      v75 = *(_OWORD *)(v41 + 256);
      *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
      *(_OWORD *)(v40 + 256) = v75;
      v76 = *(_OWORD *)(v41 + 288);
      *(_OWORD *)(v40 + 272) = *(_OWORD *)(v41 + 272);
      *(_OWORD *)(v40 + 288) = v76;
    }
    else
    {
      *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
      *(_QWORD *)(v40 + 256) = *(_QWORD *)(v41 + 256);
      v77 = (_OWORD *)(v40 + 264);
      v78 = (_OWORD *)(v41 + 264);
      if (v74)
      {
        v79 = *(_QWORD *)(v41 + 296);
        *(_QWORD *)(v40 + 288) = v74;
        *(_QWORD *)(v40 + 296) = v79;
        (**(void (***)(_OWORD *, _OWORD *))(v74 - 8))(v77, v78);
      }
      else
      {
        v80 = *(_OWORD *)(v41 + 280);
        *v77 = *v78;
        *(_OWORD *)(v40 + 280) = v80;
        *(_QWORD *)(v40 + 296) = *(_QWORD *)(v41 + 296);
      }
    }
    *(_QWORD *)(v40 + 304) = *(_QWORD *)(v41 + 304);
    *(_BYTE *)(v40 + 312) = *(_BYTE *)(v41 + 312);
    v81 = *(_QWORD *)(v41 + 328);
    *(_QWORD *)(v40 + 320) = *(_QWORD *)(v41 + 320);
    *(_QWORD *)(v40 + 328) = v81;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16), *(_BYTE *)(a1 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = a1 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    v8 = v5 + *(int *)(v7 + 32);
    v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v12 = *(void **)(v11 + 24);
  if (v12 != (void *)1)
  {

    v13 = *(_QWORD *)(v11 + 168);
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v15 = *(unsigned __int8 *)(v11 + 56);
      if (v15 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v11 + 48), v15);
        v13 = *(_QWORD *)(v11 + 168);
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v14 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v11 + 152), *(_QWORD *)(v11 + 160), v13);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(v11 + 288) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(v11 + 264);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51;
  void *v52;
  _OWORD *v53;
  _OWORD *v54;
  unint64_t v55;
  id v56;
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  char *v91;
  int v92;
  uint64_t v93;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v7 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v8, v9, v10);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v11;
  }
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a2 + 128);
  v84 = *(_QWORD *)(a2 + 136);
  v85 = *(_QWORD *)(a2 + 144);
  v86 = *(_QWORD *)(a2 + 152);
  v87 = *(_QWORD *)(a2 + 160);
  v88 = *(_QWORD *)(a2 + 168);
  v90 = *(unsigned __int8 *)(a2 + 178);
  v92 = *(unsigned __int16 *)(a2 + 176);
  v89 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v12, v13, v14, v15, v16, v17, v18, v19, v84, v85, v86, v87, v88, v92 | (v90 << 16), v89);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v84;
  *(_QWORD *)(a1 + 144) = v85;
  *(_QWORD *)(a1 + 152) = v86;
  *(_QWORD *)(a1 + 160) = v87;
  *(_QWORD *)(a1 + 168) = v88;
  *(_BYTE *)(a1 + 178) = v90;
  *(_WORD *)(a1 + 176) = v92;
  *(_BYTE *)(a1 + 179) = v89;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v21 = *(int *)(v20 + 56);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  type metadata accessor for Binding<TextSelection?>(0);
  v25 = v24;
  v26 = *(_QWORD *)(v24 - 8);
  v27 = a1;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    v29 = a3;
  }
  else
  {
    v93 = a1;
    v30 = v23[1];
    *v22 = *v23;
    v22[1] = v30;
    v31 = *(int *)(v25 + 32);
    v91 = (char *)v22 + v31;
    v32 = (char *)v23 + v31;
    v33 = type metadata accessor for TextSelection(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    if (v35(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v91, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v27 = v93;
      v29 = a3;
    }
    else
    {
      v37 = type metadata accessor for TextSelection.Indices(0);
      v29 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v91, v32, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v91, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      v91[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v91, 0, 1, v33);
      v27 = v93;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  }
  v39 = *(int *)(v29 + 20);
  v40 = v27 + v39;
  v41 = a2 + v39;
  v42 = *(_QWORD *)(a2 + v39);
  v43 = *(_QWORD *)(a2 + v39 + 8);
  *(_QWORD *)v40 = v42;
  *(_QWORD *)(v40 + 8) = v43;
  *(_DWORD *)(v40 + 16) = *(_DWORD *)(v41 + 16);
  v44 = *(void **)(v41 + 24);
  swift_bridgeObjectRetain();
  if (v44 == (void *)1)
  {
    v45 = *(_OWORD *)(v41 + 200);
    *(_OWORD *)(v40 + 184) = *(_OWORD *)(v41 + 184);
    *(_OWORD *)(v40 + 200) = v45;
    *(_OWORD *)(v40 + 216) = *(_OWORD *)(v41 + 216);
    *(_QWORD *)(v40 + 232) = *(_QWORD *)(v41 + 232);
    v46 = *(_OWORD *)(v41 + 136);
    *(_OWORD *)(v40 + 120) = *(_OWORD *)(v41 + 120);
    *(_OWORD *)(v40 + 136) = v46;
    v47 = *(_OWORD *)(v41 + 168);
    *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
    *(_OWORD *)(v40 + 168) = v47;
    v48 = *(_OWORD *)(v41 + 72);
    *(_OWORD *)(v40 + 56) = *(_OWORD *)(v41 + 56);
    *(_OWORD *)(v40 + 72) = v48;
    v49 = *(_OWORD *)(v41 + 104);
    *(_OWORD *)(v40 + 88) = *(_OWORD *)(v41 + 88);
    *(_OWORD *)(v40 + 104) = v49;
    v50 = *(_OWORD *)(v41 + 40);
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
    *(_OWORD *)(v40 + 40) = v50;
  }
  else
  {
    v51 = *(void **)(v41 + 32);
    v52 = *(void **)(v41 + 40);
    *(_QWORD *)(v40 + 24) = v44;
    *(_QWORD *)(v40 + 32) = v51;
    *(_QWORD *)(v40 + 40) = v52;
    v53 = (_OWORD *)(v40 + 48);
    v54 = (_OWORD *)(v41 + 48);
    v55 = *(_QWORD *)(v41 + 168);
    v56 = v44;
    v57 = v51;
    v58 = v52;
    if (v55 >> 1 == 4294967294)
    {
      v59 = *(_OWORD *)(v41 + 192);
      *(_OWORD *)(v40 + 176) = *(_OWORD *)(v41 + 176);
      *(_OWORD *)(v40 + 192) = v59;
      *(_OWORD *)(v40 + 208) = *(_OWORD *)(v41 + 208);
      *(_DWORD *)(v40 + 223) = *(_DWORD *)(v41 + 223);
      v60 = *(_OWORD *)(v41 + 128);
      *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
      *(_OWORD *)(v40 + 128) = v60;
      v61 = *(_OWORD *)(v41 + 160);
      *(_OWORD *)(v40 + 144) = *(_OWORD *)(v41 + 144);
      *(_OWORD *)(v40 + 160) = v61;
      v62 = *(_OWORD *)(v41 + 64);
      *v53 = *v54;
      *(_OWORD *)(v40 + 64) = v62;
      v63 = *(_OWORD *)(v41 + 96);
      *(_OWORD *)(v40 + 80) = *(_OWORD *)(v41 + 80);
      *(_OWORD *)(v40 + 96) = v63;
    }
    else
    {
      v64 = *(unsigned __int8 *)(v41 + 56);
      if (v64 == 255)
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *(_BYTE *)(v40 + 56) = *(_BYTE *)(v41 + 56);
      }
      else
      {
        v65 = *(void **)(v41 + 48);
        outlined copy of GraphicsImage.Contents(v65, *(_BYTE *)(v41 + 56));
        *(_QWORD *)(v40 + 48) = v65;
        *(_BYTE *)(v40 + 56) = v64;
        v55 = *(_QWORD *)(v41 + 168);
      }
      *(_QWORD *)(v40 + 64) = *(_QWORD *)(v41 + 64);
      *(_OWORD *)(v40 + 72) = *(_OWORD *)(v41 + 72);
      *(_BYTE *)(v40 + 88) = *(_BYTE *)(v41 + 88);
      *(_OWORD *)(v40 + 92) = *(_OWORD *)(v41 + 92);
      *(_BYTE *)(v40 + 108) = *(_BYTE *)(v41 + 108);
      v66 = *(_OWORD *)(v41 + 128);
      *(_OWORD *)(v40 + 112) = *(_OWORD *)(v41 + 112);
      *(_OWORD *)(v40 + 128) = v66;
      *(_WORD *)(v40 + 144) = *(_WORD *)(v41 + 144);
      *(_BYTE *)(v40 + 146) = *(_BYTE *)(v41 + 146);
      *(_BYTE *)(v40 + 147) = *(_BYTE *)(v41 + 147);
      if (v55 >> 1 == 0xFFFFFFFF)
      {
        v67 = *(_OWORD *)(v41 + 168);
        *(_OWORD *)(v40 + 152) = *(_OWORD *)(v41 + 152);
        *(_OWORD *)(v40 + 168) = v67;
      }
      else
      {
        v68 = *(_QWORD *)(v41 + 152);
        v69 = *(_QWORD *)(v41 + 160);
        v70 = *(_QWORD *)(v41 + 176);
        outlined copy of AccessibilityImageLabel(v68, v69, v55);
        *(_QWORD *)(v40 + 152) = v68;
        *(_QWORD *)(v40 + 160) = v69;
        *(_QWORD *)(v40 + 168) = v55;
        *(_QWORD *)(v40 + 176) = v70;
      }
      v71 = *(_QWORD *)(v41 + 192);
      *(_QWORD *)(v40 + 184) = *(_QWORD *)(v41 + 184);
      *(_QWORD *)(v40 + 192) = v71;
      *(_WORD *)(v40 + 200) = *(_WORD *)(v41 + 200);
      *(_DWORD *)(v40 + 204) = *(_DWORD *)(v41 + 204);
      *(_BYTE *)(v40 + 208) = *(_BYTE *)(v41 + 208);
      v72 = *(void **)(v41 + 216);
      *(_QWORD *)(v40 + 216) = v72;
      *(_WORD *)(v40 + 224) = *(_WORD *)(v41 + 224);
      *(_BYTE *)(v40 + 226) = *(_BYTE *)(v41 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      v73 = v72;
    }
    *(_BYTE *)(v40 + 227) = *(_BYTE *)(v41 + 227);
    *(_QWORD *)(v40 + 232) = *(_QWORD *)(v41 + 232);
    swift_retain();
  }
  v74 = *(_QWORD *)(v41 + 288);
  if (v74 == 1)
  {
    v75 = *(_OWORD *)(v41 + 256);
    *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
    *(_OWORD *)(v40 + 256) = v75;
    v76 = *(_OWORD *)(v41 + 288);
    *(_OWORD *)(v40 + 272) = *(_OWORD *)(v41 + 272);
    *(_OWORD *)(v40 + 288) = v76;
  }
  else
  {
    *(_OWORD *)(v40 + 240) = *(_OWORD *)(v41 + 240);
    *(_QWORD *)(v40 + 256) = *(_QWORD *)(v41 + 256);
    v77 = (_OWORD *)(v40 + 264);
    v78 = (_OWORD *)(v41 + 264);
    if (v74)
    {
      v79 = *(_QWORD *)(v41 + 296);
      *(_QWORD *)(v40 + 288) = v74;
      *(_QWORD *)(v40 + 296) = v79;
      (**(void (***)(_OWORD *, _OWORD *))(v74 - 8))(v77, v78);
    }
    else
    {
      v80 = *(_OWORD *)(v41 + 280);
      *v77 = *v78;
      *(_OWORD *)(v40 + 280) = v80;
      *(_QWORD *)(v40 + 296) = *(_QWORD *)(v41 + 296);
    }
  }
  *(_QWORD *)(v40 + 304) = *(_QWORD *)(v41 + 304);
  *(_BYTE *)(v40 + 312) = *(_BYTE *)(v41 + 312);
  v81 = *(_QWORD *)(v41 + 328);
  *(_QWORD *)(v40 + 320) = *(_QWORD *)(v41 + 320);
  *(_QWORD *)(v40 + 328) = v81;
  swift_bridgeObjectRetain();
  return v27;
}

_QWORD *assignWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  size_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _OWORD *v79;
  void *v80;
  void *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *v103;
  void *v104;
  _OWORD *v105;
  id *v106;
  unint64_t v107;
  id v108;
  id v109;
  id v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;
  _OWORD *v127;
  id *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  id v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  id v151;
  int v152;
  id v153;
  void *v154;
  char v155;
  id v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  void *v166;
  id v167;
  id v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void *v178;
  id v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  id v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _OWORD *v188;
  _OWORD *v189;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  void *v204;
  void *v205;
  id v206;
  __int128 *v207;
  __int128 *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _OWORD *v217;
  __int128 *v218;
  uint64_t v219;
  __int128 *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  int v235;
  _QWORD *v236;
  int v237;
  char *v238;

  v4 = a1;
  *a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4[1] = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4[2] = *(_QWORD *)(a2 + 16);
  v4[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v4 + 32) = *(_BYTE *)(a2 + 32);
  *((_BYTE *)v4 + 33) = *(_BYTE *)(a2 + 33);
  v5 = v4 + 5;
  v6 = (_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 64);
  if (v4[8])
  {
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 40);
      v9 = *(_QWORD *)(a2 + 48);
      v10 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v8, v9, v10);
      v11 = v4[5];
      v12 = v4[6];
      v13 = *((_BYTE *)v4 + 56);
      v4[5] = v8;
      v4[6] = v9;
      *((_BYTE *)v4 + 56) = v10;
      outlined consume of Text.Storage(v11, v12, v13);
      v4[8] = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v4 + 5));
      v17 = *(_OWORD *)(a2 + 56);
      *v5 = *v6;
      *(_OWORD *)(v4 + 7) = v17;
    }
  }
  else if (v7)
  {
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(_QWORD *)(a2 + 48);
    v16 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v14, v15, v16);
    v4[5] = v14;
    v4[6] = v15;
    *((_BYTE *)v4 + 56) = v16;
    v4[8] = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 56);
    *v5 = *v6;
    *(_OWORD *)(v4 + 7) = v18;
  }
  v19 = *(_QWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 96);
  v24 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v25 = *(_QWORD *)(a2 + 120);
  v26 = *(_QWORD *)(a2 + 128);
  v229 = *(_QWORD *)(a2 + 136);
  v230 = *(_QWORD *)(a2 + 144);
  v231 = *(_QWORD *)(a2 + 152);
  v232 = *(_QWORD *)(a2 + 160);
  v233 = *(_QWORD *)(a2 + 168);
  v237 = *(unsigned __int8 *)(a2 + 178);
  v235 = *(unsigned __int16 *)(a2 + 176);
  v234 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v19, v20, v21, v22, v24, v23, v25, v26, v229, v230, v231, v232, v233, v235 | (v237 << 16), v234);
  v27 = v4[9];
  v28 = v4[10];
  v29 = v4[11];
  v30 = v4[12];
  v31 = v4[13];
  v32 = v4[14];
  v33 = v4[15];
  v34 = v4[16];
  v35 = *(_OWORD *)(v4 + 17);
  v36 = *(_OWORD *)(v4 + 19);
  v37 = v4[21];
  v38 = *((unsigned __int16 *)v4 + 88) | (*((unsigned __int8 *)v4 + 178) << 16);
  v39 = *((_BYTE *)v4 + 179);
  v4[9] = v19;
  v4[10] = v20;
  v4[11] = v21;
  v4[12] = v22;
  v4[13] = v24;
  v4[14] = v23;
  v4[15] = v25;
  v4[16] = v26;
  v4[17] = v229;
  v4[18] = v230;
  v4[19] = v231;
  v4[20] = v232;
  v4[21] = v233;
  *((_WORD *)v4 + 88) = v235;
  *((_BYTE *)v4 + 178) = v237;
  *((_BYTE *)v4 + 179) = v234;
  outlined consume of StateOrBinding<TextFieldState>(v27, v28, v29, v30, v31, v32, v33, v34, v35, *((uint64_t *)&v35 + 1), v36, *((uint64_t *)&v36 + 1), v37, v38, v39);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v41 = *(int *)(v40 + 56);
  v42 = (char *)v4 + v41;
  v43 = (char *)(a2 + v41);
  type metadata accessor for Binding<TextSelection?>(0);
  v45 = v44;
  v46 = *(_QWORD *)(v44 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  LODWORD(v26) = v47(v42, 1, v44);
  v48 = v47(v43, 1, v45);
  if ((_DWORD)v26)
  {
    if (!v48)
    {
      v236 = v4;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
      v55 = *(int *)(v45 + 32);
      v238 = &v42[v55];
      v56 = &v43[v55];
      v57 = type metadata accessor for TextSelection(0);
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
      swift_retain();
      swift_retain();
      if (v59(v56, 1, v57))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v238, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        v54 = a3;
      }
      else
      {
        v71 = v58;
        v72 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          v74 = v238;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v238, v56, v73);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v74 = v238;
          memcpy(v238, v56, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        v4 = v236;
        v54 = a3;
        v74[*(int *)(v57 + 20)] = v56[*(int *)(v57 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v74, 0, 1, v57);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v42, 0, 1, v45);
      goto LABEL_29;
    }
    v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    goto LABEL_13;
  }
  if (v48)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_13:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v49);
    v51 = *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64);
    v52 = v42;
    v53 = v43;
LABEL_14:
    memcpy(v52, v53, v51);
    v54 = a3;
    goto LABEL_29;
  }
  *(_QWORD *)v42 = *(_QWORD *)v43;
  swift_retain();
  swift_release();
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_retain();
  swift_release();
  v61 = *(int *)(v45 + 32);
  v62 = &v42[v61];
  v63 = &v43[v61];
  v64 = type metadata accessor for TextSelection(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  v68 = v66(v63, 1, v64);
  if (v67)
  {
    if (!v68)
    {
      v69 = type metadata accessor for TextSelection.Indices(0);
      v54 = a3;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v62, v63, v70);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
      }
      v62[*(int *)(v64 + 20)] = v63[*(int *)(v64 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      goto LABEL_29;
    }
LABEL_25:
    type metadata accessor for TextSelection?(0);
    v51 = *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64);
    v52 = v62;
    v53 = v63;
    goto LABEL_14;
  }
  if (v68)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v62, type metadata accessor for TextSelection);
    goto LABEL_25;
  }
  v54 = a3;
  if (v4 != (_QWORD *)a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v62, type metadata accessor for TextSelection.Indices);
    v181 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v62, v63, v182);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
    }
  }
  v62[*(int *)(v64 + 20)] = v63[*(int *)(v64 + 20)];
LABEL_29:
  v76 = *(int *)(v54 + 20);
  v77 = (char *)v4 + v76;
  v78 = a2 + v76;
  *(_QWORD *)((char *)v4 + v76) = *(_QWORD *)(a2 + v76);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v77 + 1) = *(_QWORD *)(v78 + 8);
  *((_DWORD *)v77 + 4) = *(_DWORD *)(v78 + 16);
  v79 = v77 + 24;
  v80 = (void *)*((_QWORD *)v77 + 3);
  v82 = (_OWORD *)(v78 + 24);
  v81 = *(void **)(v78 + 24);
  if (v80 == (void *)1)
  {
    if (v81 == (void *)1)
    {
      v83 = *(_OWORD *)(v78 + 40);
      *v79 = *v82;
      *(_OWORD *)(v77 + 40) = v83;
      v84 = *(_OWORD *)(v78 + 56);
      v85 = *(_OWORD *)(v78 + 72);
      v86 = *(_OWORD *)(v78 + 104);
      *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
      *(_OWORD *)(v77 + 104) = v86;
      *(_OWORD *)(v77 + 56) = v84;
      *(_OWORD *)(v77 + 72) = v85;
      v87 = *(_OWORD *)(v78 + 120);
      v88 = *(_OWORD *)(v78 + 136);
      v89 = *(_OWORD *)(v78 + 168);
      *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
      *(_OWORD *)(v77 + 168) = v89;
      *(_OWORD *)(v77 + 120) = v87;
      *(_OWORD *)(v77 + 136) = v88;
      v90 = *(_OWORD *)(v78 + 184);
      v91 = *(_OWORD *)(v78 + 200);
      v92 = *(_OWORD *)(v78 + 216);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      *(_OWORD *)(v77 + 200) = v91;
      *(_OWORD *)(v77 + 216) = v92;
      *(_OWORD *)(v77 + 184) = v90;
    }
    else
    {
      *((_QWORD *)v77 + 3) = v81;
      v103 = *(void **)(v78 + 32);
      *((_QWORD *)v77 + 4) = v103;
      v104 = *(void **)(v78 + 40);
      *((_QWORD *)v77 + 5) = v104;
      v105 = v77 + 48;
      v106 = (id *)(v78 + 48);
      v107 = *(_QWORD *)(v78 + 168);
      v108 = v81;
      v109 = v103;
      v110 = v104;
      if (v107 >> 1 == 4294967294)
      {
        v111 = *(_OWORD *)v106;
        v112 = *(_OWORD *)(v78 + 64);
        v113 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v113;
        *v105 = v111;
        *((_OWORD *)v77 + 4) = v112;
        v114 = *(_OWORD *)(v78 + 112);
        v115 = *(_OWORD *)(v78 + 128);
        v116 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v116;
        *((_OWORD *)v77 + 7) = v114;
        *((_OWORD *)v77 + 8) = v115;
        v117 = *(_OWORD *)(v78 + 176);
        v118 = *(_OWORD *)(v78 + 192);
        v119 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v118;
        *((_OWORD *)v77 + 13) = v119;
        *((_OWORD *)v77 + 11) = v117;
      }
      else
      {
        v139 = *(unsigned __int8 *)(v78 + 56);
        if (v139 == 255)
        {
          v156 = *v106;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v105 = v156;
        }
        else
        {
          v140 = *v106;
          outlined copy of GraphicsImage.Contents(*v106, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v140;
          v77[56] = v139;
        }
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v157 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v157;
        v158 = *(_OWORD *)(v78 + 112);
        v159 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v158;
        *((_OWORD *)v77 + 8) = v159;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v160 = *(_QWORD *)(v78 + 168);
        if (v160 >> 1 == 0xFFFFFFFF)
        {
          v161 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v161;
        }
        else
        {
          v162 = *(_QWORD *)(v78 + 152);
          v163 = *(_QWORD *)(v78 + 160);
          v164 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v162, v163, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v162;
          *((_QWORD *)v77 + 20) = v163;
          *((_QWORD *)v77 + 21) = v160;
          *((_QWORD *)v77 + 22) = v164;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v165 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v165;
        v166 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v166;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v167 = v166;
      }
      v77[227] = *(_BYTE *)(v78 + 227);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      swift_retain();
    }
  }
  else if (v81 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v77 + 24));
    v93 = *(_OWORD *)(v78 + 40);
    *v79 = *v82;
    *(_OWORD *)(v77 + 40) = v93;
    v94 = *(_OWORD *)(v78 + 104);
    v96 = *(_OWORD *)(v78 + 56);
    v95 = *(_OWORD *)(v78 + 72);
    *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
    *(_OWORD *)(v77 + 104) = v94;
    *(_OWORD *)(v77 + 56) = v96;
    *(_OWORD *)(v77 + 72) = v95;
    v97 = *(_OWORD *)(v78 + 168);
    v99 = *(_OWORD *)(v78 + 120);
    v98 = *(_OWORD *)(v78 + 136);
    *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
    *(_OWORD *)(v77 + 168) = v97;
    *(_OWORD *)(v77 + 120) = v99;
    *(_OWORD *)(v77 + 136) = v98;
    v101 = *(_OWORD *)(v78 + 200);
    v100 = *(_OWORD *)(v78 + 216);
    v102 = *(_OWORD *)(v78 + 184);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    *(_OWORD *)(v77 + 200) = v101;
    *(_OWORD *)(v77 + 216) = v100;
    *(_OWORD *)(v77 + 184) = v102;
  }
  else
  {
    *((_QWORD *)v77 + 3) = v81;
    v120 = v81;

    v121 = (void *)*((_QWORD *)v77 + 4);
    v122 = *(void **)(v78 + 32);
    *((_QWORD *)v77 + 4) = v122;
    v123 = v122;

    v124 = (void *)*((_QWORD *)v77 + 5);
    v125 = *(void **)(v78 + 40);
    *((_QWORD *)v77 + 5) = v125;
    v126 = v125;

    v127 = v77 + 48;
    v128 = (id *)(v78 + 48);
    v129 = *(_QWORD *)(v78 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((_QWORD *)v77 + 21) >> 1 == 4294967294)
    {
      if (v129 == 0x1FFFFFFFCLL)
      {
        v130 = *(_OWORD *)v128;
        v131 = *(_OWORD *)(v78 + 64);
        v132 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v132;
        *v127 = v130;
        *((_OWORD *)v77 + 4) = v131;
        v133 = *(_OWORD *)(v78 + 112);
        v134 = *(_OWORD *)(v78 + 128);
        v135 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v135;
        *((_OWORD *)v77 + 7) = v133;
        *((_OWORD *)v77 + 8) = v134;
        v136 = *(_OWORD *)(v78 + 176);
        v137 = *(_OWORD *)(v78 + 192);
        v138 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v137;
        *((_OWORD *)v77 + 13) = v138;
        *((_OWORD *)v77 + 11) = v136;
      }
      else
      {
        v150 = *(unsigned __int8 *)(v78 + 56);
        if (v150 == 255)
        {
          v168 = *v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v168;
        }
        else
        {
          v151 = *v128;
          outlined copy of GraphicsImage.Contents(*v128, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v151;
          v77[56] = v150;
        }
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v169 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v169;
        v170 = *(_OWORD *)(v78 + 112);
        v171 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v170;
        *((_OWORD *)v77 + 8) = v171;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v172 = *(_QWORD *)(v78 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          v173 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v173;
        }
        else
        {
          v174 = *(_QWORD *)(v78 + 152);
          v175 = *(_QWORD *)(v78 + 160);
          v176 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v174;
          *((_QWORD *)v77 + 20) = v175;
          *((_QWORD *)v77 + 21) = v172;
          *((_QWORD *)v77 + 22) = v176;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v177 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v177;
        v178 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v178;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v179 = v178;
      }
    }
    else if (v129 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v77 + 48));
      v141 = *(_OWORD *)(v78 + 96);
      v143 = *(_OWORD *)v128;
      v142 = *(_OWORD *)(v78 + 64);
      *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
      *((_OWORD *)v77 + 6) = v141;
      *v127 = v143;
      *((_OWORD *)v77 + 4) = v142;
      v144 = *(_OWORD *)(v78 + 160);
      v146 = *(_OWORD *)(v78 + 112);
      v145 = *(_OWORD *)(v78 + 128);
      *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
      *((_OWORD *)v77 + 10) = v144;
      *((_OWORD *)v77 + 7) = v146;
      *((_OWORD *)v77 + 8) = v145;
      v148 = *(_OWORD *)(v78 + 192);
      v147 = *(_OWORD *)(v78 + 208);
      v149 = *(_OWORD *)(v78 + 176);
      *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
      *((_OWORD *)v77 + 12) = v148;
      *((_OWORD *)v77 + 13) = v147;
      *((_OWORD *)v77 + 11) = v149;
    }
    else
    {
      v152 = *(unsigned __int8 *)(v78 + 56);
      if (v77[56] == 255)
      {
        if (v152 == 255)
        {
          v184 = *v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v184;
        }
        else
        {
          v180 = *v128;
          outlined copy of GraphicsImage.Contents(*v128, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v180;
          v77[56] = v152;
        }
      }
      else if (v152 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v77 + 48));
        v183 = *(_BYTE *)(v78 + 56);
        *(_QWORD *)v127 = *v128;
        v77[56] = v183;
      }
      else
      {
        v153 = *v128;
        outlined copy of GraphicsImage.Contents(*v128, *(_BYTE *)(v78 + 56));
        v154 = (void *)*((_QWORD *)v77 + 6);
        *((_QWORD *)v77 + 6) = v153;
        v155 = v77[56];
        v77[56] = v152;
        outlined consume of GraphicsImage.Contents(v154, v155);
      }
      *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
      *((_QWORD *)v77 + 9) = *(_QWORD *)(v78 + 72);
      *((_QWORD *)v77 + 10) = *(_QWORD *)(v78 + 80);
      v77[88] = *(_BYTE *)(v78 + 88);
      v185 = *(_OWORD *)(v78 + 92);
      v77[108] = *(_BYTE *)(v78 + 108);
      *(_OWORD *)(v77 + 92) = v185;
      v186 = *(_OWORD *)(v78 + 112);
      v187 = *(_OWORD *)(v78 + 128);
      v77[144] = *(_BYTE *)(v78 + 144);
      *((_OWORD *)v77 + 7) = v186;
      *((_OWORD *)v77 + 8) = v187;
      v77[145] = *(_BYTE *)(v78 + 145);
      v77[146] = *(_BYTE *)(v78 + 146);
      v77[147] = *(_BYTE *)(v78 + 147);
      v188 = v77 + 152;
      v189 = (_OWORD *)(v78 + 152);
      v190 = *(_QWORD *)(v78 + 168);
      v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_QWORD *)v77 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v191 == 0x1FFFFFFFELL)
        {
          v192 = *(_OWORD *)(v78 + 168);
          *v188 = *v189;
          *(_OWORD *)(v77 + 168) = v192;
        }
        else
        {
          v194 = *(_QWORD *)(v78 + 152);
          v195 = *(_QWORD *)(v78 + 160);
          v196 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v194, v195, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v194;
          *((_QWORD *)v77 + 20) = v195;
          *((_QWORD *)v77 + 21) = v190;
          *((_QWORD *)v77 + 22) = v196;
        }
      }
      else if (v191 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v77 + 152));
        v193 = *(_OWORD *)(v78 + 168);
        *v188 = *v189;
        *(_OWORD *)(v77 + 168) = v193;
      }
      else
      {
        v197 = *(_QWORD *)(v78 + 152);
        v198 = *(_QWORD *)(v78 + 160);
        v199 = *(_QWORD *)(v78 + 176);
        outlined copy of AccessibilityImageLabel(v197, v198, *(_QWORD *)(v78 + 168));
        v200 = *((_QWORD *)v77 + 19);
        v201 = *((_QWORD *)v77 + 20);
        v202 = *((_QWORD *)v77 + 21);
        *((_QWORD *)v77 + 19) = v197;
        *((_QWORD *)v77 + 20) = v198;
        *((_QWORD *)v77 + 21) = v190;
        *((_QWORD *)v77 + 22) = v199;
        outlined consume of AccessibilityImageLabel(v200, v201, v202);
      }
      *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
      swift_retain();
      swift_release();
      v77[200] = *(_BYTE *)(v78 + 200);
      v77[201] = *(_BYTE *)(v78 + 201);
      v203 = *(_DWORD *)(v78 + 204);
      v77[208] = *(_BYTE *)(v78 + 208);
      *((_DWORD *)v77 + 51) = v203;
      v204 = (void *)*((_QWORD *)v77 + 27);
      v205 = *(void **)(v78 + 216);
      *((_QWORD *)v77 + 27) = v205;
      v206 = v205;

      *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
      v77[226] = *(_BYTE *)(v78 + 226);
    }
    v77[227] = *(_BYTE *)(v78 + 227);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    swift_retain();
    swift_release();
  }
  v207 = (__int128 *)(v77 + 240);
  v208 = (__int128 *)(v78 + 240);
  v209 = *((_QWORD *)v77 + 36);
  v210 = *(_QWORD *)(v78 + 288);
  if (v209 == 1)
  {
    if (v210 == 1)
    {
      v211 = *v208;
      v212 = *(_OWORD *)(v78 + 256);
      v213 = *(_OWORD *)(v78 + 288);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v213;
LABEL_80:
      *v207 = v211;
      v207[1] = v212;
      goto LABEL_92;
    }
    *((_QWORD *)v77 + 30) = *(_QWORD *)(v78 + 240);
    *((_QWORD *)v77 + 31) = *(_QWORD *)(v78 + 248);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v217 = v77 + 264;
    v218 = (__int128 *)(v78 + 264);
    v219 = *(_QWORD *)(v78 + 288);
    if (v219)
    {
      *((_QWORD *)v77 + 36) = v219;
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      (**(void (***)(_OWORD *, __int128 *))(v219 - 8))(v217, v218);
    }
    else
    {
      v222 = *v218;
      v223 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      *v217 = v222;
      *(_OWORD *)(v77 + 280) = v223;
    }
  }
  else
  {
    if (v210 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v77 + 240));
      v214 = *(_OWORD *)(v78 + 288);
      v216 = *v208;
      v215 = *(_OWORD *)(v78 + 256);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v214;
      *v207 = v216;
      *((_OWORD *)v77 + 16) = v215;
      goto LABEL_92;
    }
    *((_DWORD *)v77 + 60) = *(_DWORD *)(v78 + 240);
    *((_DWORD *)v77 + 61) = *(_DWORD *)(v78 + 244);
    *((_DWORD *)v77 + 62) = *(_DWORD *)(v78 + 248);
    *((_DWORD *)v77 + 63) = *(_DWORD *)(v78 + 252);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v207 = (__int128 *)(v77 + 264);
    v220 = (__int128 *)(v78 + 264);
    v221 = *(_QWORD *)(v78 + 288);
    if (!v209)
    {
      if (v221)
      {
        *((_QWORD *)v77 + 36) = v221;
        *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
        (**(void (***)(uint64_t, uint64_t))(v221 - 8))((uint64_t)(v77 + 264), v78 + 264);
        goto LABEL_92;
      }
      v211 = *v220;
      v212 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      goto LABEL_80;
    }
    if (v221)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v77 + 33, (uint64_t *)(v78 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v77 + 264));
      v224 = *(_QWORD *)(v78 + 296);
      v225 = *(_OWORD *)(v78 + 280);
      *v207 = *v220;
      *(_OWORD *)(v77 + 280) = v225;
      *((_QWORD *)v77 + 37) = v224;
    }
  }
LABEL_92:
  v226 = *(_QWORD *)(v78 + 304);
  v77[312] = *(_BYTE *)(v78 + 312);
  *((_QWORD *)v77 + 38) = v226;
  *((_QWORD *)v77 + 40) = *(_QWORD *)(v78 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v77 + 82) = *(_DWORD *)(v78 + 328);
  *((_DWORD *)v77 + 83) = *(_DWORD *)(v78 + 332);
  return v4;
}

uint64_t outlined destroy of PlatformItem.PrimaryContent(uint64_t a1)
{
  destroy for PlatformItem.PrimaryContent(a1);
  return a1;
}

uint64_t initializeWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v8 = *(int *)(v7 + 56);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *(int *)(v12 + 32);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    v19 = type metadata accessor for TextSelection(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v24 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x150uLL);
  return a1;
}

uint64_t assignWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v104;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
    {
      v7 = *(_BYTE *)(a2 + 56);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 168);
  v13 = *(_WORD *)(a2 + 176);
  v14 = *(_BYTE *)(a2 + 178);
  v15 = *(_BYTE *)(a2 + 179);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 136);
  v25 = *(_OWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 168);
  v27 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v28 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 178) = v14;
  *(_WORD *)(a1 + 176) = v13;
  *(_BYTE *)(a1 + 179) = v15;
  outlined consume of StateOrBinding<TextFieldState>(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27, v28);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v30 = *(int *)(v29 + 56);
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  type metadata accessor for Binding<TextSelection?>(0);
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v31, 1, v33);
  v38 = v36(v32, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
      goto LABEL_11;
    }
    *(_QWORD *)v31 = *(_QWORD *)v32;
    swift_release();
    *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
    swift_release();
    v51 = *(int *)(v34 + 32);
    v52 = &v31[v51];
    v53 = &v32[v51];
    v54 = type metadata accessor for TextSelection(0);
    v55 = *(_QWORD *)(v54 - 8);
    v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
    v57 = v56(v52, 1, v54);
    v58 = v56(v53, 1, v54);
    if (v57)
    {
      if (!v58)
      {
        v59 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v52, v53, v60);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        goto LABEL_27;
      }
    }
    else
    {
      if (!v58)
      {
        if (a1 != a2)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, type metadata accessor for TextSelection.Indices);
          v87 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v52, v53, v88);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
          }
        }
        v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
        goto LABEL_27;
      }
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, type metadata accessor for TextSelection);
    }
    type metadata accessor for TextSelection?(0);
    v41 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64);
    v42 = v52;
    v43 = v53;
    goto LABEL_12;
  }
  if (v38)
  {
    v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
LABEL_11:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, v39);
    v41 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
    v42 = v31;
    v43 = v32;
LABEL_12:
    memcpy(v42, v43, v41);
    goto LABEL_27;
  }
  v44 = *((_QWORD *)v32 + 1);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = v44;
  v45 = *(int *)(v34 + 32);
  v46 = &v31[v45];
  v47 = &v32[v45];
  v48 = type metadata accessor for TextSelection(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v104 = a3;
    v61 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v46, v47, v62);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    a3 = v104;
    v46[*(int *)(v48 + 20)] = v47[*(int *)(v48 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
LABEL_27:
  v64 = *(int *)(a3 + 20);
  v65 = a1 + v64;
  v66 = a2 + v64;
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  *(_DWORD *)(v65 + 16) = *(_DWORD *)(v66 + 16);
  v67 = *(void **)(v65 + 24);
  v68 = *(_QWORD *)(v66 + 24);
  if (v67 == (void *)1)
  {
LABEL_30:
    v69 = *(_OWORD *)(v66 + 200);
    *(_OWORD *)(v65 + 184) = *(_OWORD *)(v66 + 184);
    *(_OWORD *)(v65 + 200) = v69;
    *(_OWORD *)(v65 + 216) = *(_OWORD *)(v66 + 216);
    *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
    v70 = *(_OWORD *)(v66 + 136);
    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
    *(_OWORD *)(v65 + 136) = v70;
    v71 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v71;
    v72 = *(_OWORD *)(v66 + 72);
    *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    *(_OWORD *)(v65 + 72) = v72;
    v73 = *(_OWORD *)(v66 + 104);
    *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
    *(_OWORD *)(v65 + 104) = v73;
    v74 = *(_OWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 40) = v74;
    goto LABEL_52;
  }
  if (v68 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v65 + 24);
    goto LABEL_30;
  }
  *(_QWORD *)(v65 + 24) = v68;

  v75 = *(void **)(v65 + 32);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);

  v76 = *(void **)(v65 + 40);
  *(_QWORD *)(v65 + 40) = *(_QWORD *)(v66 + 40);

  v77 = (_QWORD *)(v65 + 48);
  v78 = (_QWORD *)(v66 + 48);
  if (*(_QWORD *)(v65 + 168) >> 1 == 4294967294)
    goto LABEL_34;
  if (*(_QWORD *)(v66 + 168) >> 1 != 4294967294)
  {
    v84 = *(unsigned __int8 *)(v65 + 56);
    if (v84 != 255)
    {
      v85 = *(unsigned __int8 *)(v66 + 56);
      if (v85 != 255)
      {
        v86 = *(void **)(v65 + 48);
        *(_QWORD *)(v65 + 48) = *v78;
        *(_BYTE *)(v65 + 56) = v85;
        outlined consume of GraphicsImage.Contents(v86, v84);
        goto LABEL_45;
      }
      outlined destroy of GraphicsImage.Contents(v65 + 48);
    }
    *v77 = *v78;
    *(_BYTE *)(v65 + 56) = *(_BYTE *)(v66 + 56);
LABEL_45:
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
    *(_BYTE *)(v65 + 88) = *(_BYTE *)(v66 + 88);
    *(_OWORD *)(v65 + 92) = *(_OWORD *)(v66 + 92);
    *(_BYTE *)(v65 + 108) = *(_BYTE *)(v66 + 108);
    v89 = *(_OWORD *)(v66 + 128);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_OWORD *)(v65 + 128) = v89;
    *(_BYTE *)(v65 + 144) = *(_BYTE *)(v66 + 144);
    *(_BYTE *)(v65 + 145) = *(_BYTE *)(v66 + 145);
    v90 = *(_QWORD *)(v65 + 168);
    *(_WORD *)(v65 + 146) = *(_WORD *)(v66 + 146);
    if (v90 >> 1 != 0xFFFFFFFF)
    {
      v91 = *(_QWORD *)(v66 + 168);
      if (v91 >> 1 != 0xFFFFFFFF)
      {
        v93 = *(_QWORD *)(v66 + 176);
        v94 = *(_QWORD *)(v65 + 152);
        v95 = *(_QWORD *)(v65 + 160);
        *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
        *(_QWORD *)(v65 + 168) = v91;
        *(_QWORD *)(v65 + 176) = v93;
        outlined consume of AccessibilityImageLabel(v94, v95, v90);
        goto LABEL_50;
      }
      outlined destroy of AccessibilityImageLabel(v65 + 152);
    }
    v92 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v92;
LABEL_50:
    *(_QWORD *)(v65 + 184) = *(_QWORD *)(v66 + 184);
    swift_unknownObjectRelease();
    *(_QWORD *)(v65 + 192) = *(_QWORD *)(v66 + 192);
    swift_release();
    *(_BYTE *)(v65 + 200) = *(_BYTE *)(v66 + 200);
    *(_BYTE *)(v65 + 201) = *(_BYTE *)(v66 + 201);
    *(_DWORD *)(v65 + 204) = *(_DWORD *)(v66 + 204);
    *(_BYTE *)(v65 + 208) = *(_BYTE *)(v66 + 208);
    v96 = *(void **)(v65 + 216);
    *(_QWORD *)(v65 + 216) = *(_QWORD *)(v66 + 216);

    *(_WORD *)(v65 + 224) = *(_WORD *)(v66 + 224);
    *(_BYTE *)(v65 + 226) = *(_BYTE *)(v66 + 226);
    goto LABEL_51;
  }
  outlined destroy of Image.Resolved(v65 + 48);
LABEL_34:
  v79 = *(_OWORD *)(v66 + 192);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(v66 + 176);
  *(_OWORD *)(v65 + 192) = v79;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(v66 + 208);
  *(_DWORD *)(v65 + 223) = *(_DWORD *)(v66 + 223);
  v80 = *(_OWORD *)(v66 + 128);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_OWORD *)(v65 + 128) = v80;
  v81 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  *(_OWORD *)(v65 + 160) = v81;
  v82 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *(_OWORD *)(v65 + 64) = v82;
  v83 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v83;
LABEL_51:
  *(_BYTE *)(v65 + 227) = *(_BYTE *)(v66 + 227);
  *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
  swift_release();
LABEL_52:
  v97 = *(_QWORD *)(v65 + 288);
  if (v97 == 1)
  {
LABEL_55:
    v99 = *(_OWORD *)(v66 + 256);
    *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
    *(_OWORD *)(v65 + 256) = v99;
    v100 = *(_OWORD *)(v66 + 288);
    *(_OWORD *)(v65 + 272) = *(_OWORD *)(v66 + 272);
    *(_OWORD *)(v65 + 288) = v100;
    goto LABEL_61;
  }
  v98 = *(_QWORD *)(v66 + 288);
  if (v98 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v65 + 240);
    goto LABEL_55;
  }
  *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
  *(_QWORD *)(v65 + 256) = *(_QWORD *)(v66 + 256);
  if (v97)
  {
    v101 = v65 + 264;
    if (v98)
      __swift_destroy_boxed_opaque_existential_1(v101);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v101);
  }
  v102 = *(_OWORD *)(v66 + 280);
  *(_OWORD *)(v65 + 264) = *(_OWORD *)(v66 + 264);
  *(_OWORD *)(v65 + 280) = v102;
  *(_QWORD *)(v65 + 296) = *(_QWORD *)(v66 + 296);
LABEL_61:
  *(_QWORD *)(v65 + 304) = *(_QWORD *)(v66 + 304);
  *(_BYTE *)(v65 + 312) = *(_BYTE *)(v66 + 312);
  *(_QWORD *)(v65 + 320) = *(_QWORD *)(v66 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 328) = *(_QWORD *)(v66 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18742CF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_18742CFD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void type metadata completion function for PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_UNKNOWN **sub_18742D100()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

_UNKNOWN **base witness table accessor for View in PlatformItemListTextFieldStyle.PlatformItemListWriter()
{
  return &protocol witness table for PlatformItemListTextFieldStyle.PlatformItemListWriter;
}

uint64_t partial apply for implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static PlatformItemListTextFieldStyle.PlatformItemListWriter._makeView(view:inputs:)(*(_QWORD *)(v0 + 16));
}

uint64_t outlined retain of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  v3 = v2;
  return a1;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems, &unk_1E1AFD530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems and conformance PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems);
  }
  return result;
}

uint64_t outlined release of PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  swift_release();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined assign with take of TextField<_TextFieldStyleLabel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PlatformItem(uint64_t a1, uint64_t a2)
{
  assignWithTake for PlatformItem(a2, a1);
  return a2;
}

uint64_t sub_18742D288()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(void **)(v0 + 64);
  if (v1 != (void *)1)
  {

    v2 = *(_QWORD *)(v0 + 208);
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v4 = *(unsigned __int8 *)(v0 + 96);
      if (v4 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v0 + 88), v4);
        v2 = *(_QWORD *)(v0 + 208);
        v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v3 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), v2);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(v0 + 328) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(v0 + 304);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(_QWORD **a1)
{
  uint64_t v1;

  return closure #1 in PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + 40);
}

uint64_t destroy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_release();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems()
{
  return &unk_1E1AFD530;
}

void static SubmitLabel.done.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SubmitLabel.go.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static SubmitLabel.send.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SubmitLabel.join.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static SubmitLabel.route.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static SubmitLabel.search.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static SubmitLabel.return.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static SubmitLabel.next.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

void static SubmitLabel.continue.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t View.submitLabel(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.submitLabel.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.submitLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_18742D7E0()
{
  return EnvironmentValues.submitLabel.setter();
}

uint64_t EnvironmentValues.submitLabel.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.returnKey(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

ValueMetadata *type metadata accessor for SubmitLabel()
{
  return &type metadata for SubmitLabel;
}

uint64_t sub_18742D990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<SubmitLabel>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SubmitLabel> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<SubmitLabel>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SubmitLabel>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SubmitLabel>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SubmitLabel>);
  }
}

uint64_t getEnumTagSinglePayload for SubmitLabel(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SubmitLabel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_18742DB40 + 4 * byte_187C30CE5[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_18742DB74 + 4 * byte_187C30CE0[v4]))();
}

uint64_t sub_18742DB74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18742DB7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18742DB84);
  return result;
}

uint64_t sub_18742DB90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18742DB98);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_18742DB9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18742DBA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SubmitLabel.Role()
{
  return &type metadata for SubmitLabel.Role;
}

unint64_t lazy protocol witness table accessor for type SubmitLabel.Role and conformance SubmitLabel.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role;
  if (!lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SubmitLabel.Role, &type metadata for SubmitLabel.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SubmitLabel.Role and conformance SubmitLabel.Role);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.SubmitLabelKey()
{
  return &type metadata for EnvironmentValues.SubmitLabelKey;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SubmitLabelKey(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

void static AnimatedValueKeyframeInterpolation.linear.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static AnimatedValueKeyframeInterpolation.cubic.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for AnimatedValueKeyframeInterpolation()
{
  return &type metadata for AnimatedValueKeyframeInterpolation;
}

uint64_t storeEnumTagSinglePayload for AnimatedValueKeyframeInterpolation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_18742DCF4 + 4 * byte_187C30DD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18742DD28 + 4 * byte_187C30DD0[v4]))();
}

uint64_t sub_18742DD28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18742DD30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18742DD38);
  return result;
}

uint64_t sub_18742DD44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18742DD4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_18742DD50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18742DD58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimatedValueKeyframeInterpolation.Storage()
{
  return &type metadata for AnimatedValueKeyframeInterpolation.Storage;
}

unint64_t lazy protocol witness table accessor for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage;
  if (!lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnimatedValueKeyframeInterpolation.Storage, &type metadata for AnimatedValueKeyframeInterpolation.Storage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatedValueKeyframeInterpolation.Storage and conformance AnimatedValueKeyframeInterpolation.Storage);
  }
  return result;
}

uint64_t View.navigationTransition<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[6];

  (*(void (**)(_QWORD *__return_ptr))(a5 + 8))(v6);
  View.preference<A>(key:value:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationTransitionKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of _NavigationTransitionOutputs?((uint64_t)&static NavigationTransitionKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance NavigationTransitionKey(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[6];

  outlined init with copy of _NavigationTransitionOutputs?(a1, (uint64_t)v7);
  v4 = v7[4];
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationTransitionOutputs?);
  if (v4 == 1)
  {
    v6 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for _NavigationTransitionOutputs?);
    return a2(v6);
  }
  return result;
}

double AutomaticNavigationTransition._outputs(for:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t ZoomNavigationTransition._outputs(for:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t static NavigationTransition<>.zoom<A>(sourceID:in:)@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = _convertToAnyHashable<A>(_:)();
  *a2 = a1;
  return result;
}

uint64_t dispatch thunk of NavigationTransition._outputs(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for _NavigationTransitionInputs()
{
  return &type metadata for _NavigationTransitionInputs;
}

ValueMetadata *type metadata accessor for _NavigationTransitionOutputs()
{
  return &type metadata for _NavigationTransitionOutputs;
}

ValueMetadata *type metadata accessor for AutomaticNavigationTransition()
{
  return &type metadata for AutomaticNavigationTransition;
}

ValueMetadata *type metadata accessor for ZoomNavigationTransition()
{
  return &type metadata for ZoomNavigationTransition;
}

uint64_t sub_18742DFD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _PreferenceWritingModifier<NavigationTransitionKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationTransitionKey> and conformance _PreferenceWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for _NavigationTransitionOutputs.Content()
{
  return &type metadata for _NavigationTransitionOutputs.Content;
}

ValueMetadata *type metadata accessor for NavigationTransitionKey()
{
  return &type metadata for NavigationTransitionKey;
}

uint64_t outlined init with copy of _NavigationTransitionOutputs?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _NavigationTransitionOutputs?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _ViewInputs.requestedDividerRepresentation.setter()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t _ViewInputs.requestedDividerRepresentation.getter()
{
  uint64_t v1;

  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t Divider.Child.value.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  char v4;
  int v5;

  if (result != 2)
  {
    v4 = result & 1;
    goto LABEL_7;
  }
  if (*MEMORY[0x1E0CFED28] != HIDWORD(result))
  {
    type metadata accessor for Axis?();
    result = AGGraphGetValue();
    v3 = 0;
    v5 = *(unsigned __int8 *)result;
    if (v5 == 2)
      goto LABEL_8;
    v4 = v5 & 1;
LABEL_7:
    v3 = v4 ^ 1;
    goto LABEL_8;
  }
  v3 = 0;
LABEL_8:
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance Divider.Child@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;

  return Divider.Child.value.getter(*v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), a1);
}

void protocol witness for View.body.getter in conformance Divider()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double key path getter for _ViewInputs.requestedDividerRepresentation : _ViewInputs@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t _GraphInputs.requestedDividerRepresentation.getter()
{
  uint64_t v1;

  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _GraphInputs.requestedDividerRepresentation.setter()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  return PropertyList.subscript.setter();
}

void (*_ViewInputs.requestedDividerRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDividerRepresentation.modify;
}

void _ViewInputs.requestedDividerRepresentation.modify(_OWORD **a1)
{
  _OWORD *v1;

  v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();
  free(v1);
}

double key path getter for _GraphInputs.requestedDividerRepresentation : _GraphInputs@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void (*_GraphInputs.requestedDividerRepresentation.modify(_QWORD *a1))(_OWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDividerRepresentation.modify;
}

_UNKNOWN **base witness table accessor for View in Divider()
{
  return &protocol witness table for Divider;
}

uint64_t sub_18742E654()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t sub_18742E6A0()
{
  lazy protocol witness table accessor for type _GraphInputs.DividerRepresentationKey and conformance _GraphInputs.DividerRepresentationKey();
  return PropertyList.subscript.setter();
}

uint64_t dispatch thunk of static PlatformDividerRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformDividerRepresentable.makeRepresentation(inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t getEnumTagSinglePayload for Divider.Child(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[8])
    return (*(_DWORD *)a1 + 254);
  if (*a1 <= 2u)
    v3 = 2;
  else
    v3 = *a1;
  v4 = v3 - 3;
  if (*a1 < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Divider.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

void *type metadata accessor for Divider.Child()
{
  return &unk_1E1B0B2B0;
}

ValueMetadata *type metadata accessor for _GraphInputs.DividerRepresentationKey()
{
  return &type metadata for _GraphInputs.DividerRepresentationKey;
}

void type metadata accessor for Axis?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Axis?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Axis?);
  }
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 80);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(v2 - 1);
    if (v5)
    {
      v6 = *v2;
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v5;
      *(_QWORD *)(v7 + 24) = v6;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
      v3[2] = v9 + 1;
      v4 = &v3[2 * v9];
      v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
      v4[5] = v7;
    }
    v2 += 14;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t DropInfoAdaptor.init(_:host:responder:)@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[48];
  uint64_t v17;
  uint64_t v18;

  swift_unknownObjectWeakInit();
  a4[1] = 0;
  swift_unknownObjectWeakAssign();
  objc_msgSend(a1, sel_locationInView_, a2);
  v9 = v8;
  v11 = v10;
  v17 = v8;
  v18 = v10;
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    hostingViewCoordinateSpace.getter();
    v16[40] = 1;
    v12 = *(void (**)(uint64_t *__return_ptr, uint64_t))(class metadata base offset for UIViewSnapshotResponder
                                                                + *a3
                                                                + 80);
    v13 = swift_retain();
    v12(&v15, v13);
    swift_release();
    type metadata accessor for CGPoint(0);
    protocol witness for ViewTransformable.convert(from:transform:) in conformance CGPoint();
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
    result = outlined destroy of CoordinateSpace((uint64_t)v16);
    v9 = v17;
    v11 = v18;
  }
  else
  {
    swift_unknownObjectRelease();

    result = swift_release();
  }
  a4[2] = v9;
  a4[3] = v11;
  return result;
}

uint64_t DragAndDropBridge.itemsInListForSession(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v11 = 0;
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x60), *(_QWORD *)((v2 & v1) + 0x68), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      MEMORY[0x1E0C80A78](v8, v9);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
    v10 = MEMORY[0x1E0DEE9D8];
    swift_release();
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DragAndDropBridge.outermostDropResponder()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x60), *(_QWORD *)((v2 & v1) + 0x68), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      MEMORY[0x1E0C80A78](v8, v9);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t UIDropSession.itemProviders(for:)(uint64_t a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v3 = objc_msgSend(v1, sel_items);
  type metadata accessor for UIDragItem();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_11;
LABEL_3:
  v13 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x18D75E3BC](v8, v5);
      else
        v9 = *(id *)(v5 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = objc_msgSend(v9, sel_itemProvider, v13);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v8);
    v12 = v13;
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void AnyDragAndDropBridge.outermostDropResponder()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyDragAndDropBridge.itemsInListForSession(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyDragAndDropBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyDragAndDropBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t DragAndDropBridge.hitTestedResponder(locationInWindow:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  MEMORY[0x18D75B908]();
  result = MEMORY[0x18D760234]((char *)v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v5 = (void *)result;
    v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x60), *(_QWORD *)((v2 & v1) + 0x68), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
    v7 = ViewRendererHost.responderNode.getter();

    if (v7)
    {
      type metadata accessor for ViewResponder();
      v8 = swift_dynamicCastClass();
      if (v8)
        v8 = ViewResponder.hitTest(globalPoint:radius:options:)();
      swift_release();
    }
    else
    {
      v8 = 0;
    }
    static Update.end()();
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)(void (*a1)(_QWORD *__return_ptr))
{
  void *v1;
  void *v2;
  id v3;
  _QWORD v5[5];
  void *v6;
  void *v7;

  a1(v5);
  outlined init with take of Image.Resolved?((uint64_t)v5, (uint64_t)&v6, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
  v1 = v6;
  if (!v6)
    return 0;
  v2 = v7;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3760]), sel_initWithView_parameters_, v6, v7);

  return v3;
}

id thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  void *v3;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = (void *)v1(v2);
  swift_release();
  return v3;
}

void *DragAndDropBridge.hitTestedResponder(session:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;

  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = (char *)v1 + direct field offset for DragAndDropBridge.host;
  result = (void *)MEMORY[0x18D760234]((char *)v1 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v8 = result;
    v9 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x60), *(_QWORD *)((v4 & v3) + 0x68), v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
    v10 = ViewRendererHost.responderNode.getter();

    if (!v10)
      return 0;
    type metadata accessor for ViewResponder();
    if (!swift_dynamicCastClass())
    {
LABEL_7:
      swift_release();
      return 0;
    }
    result = (void *)MEMORY[0x18D760234](v5);
    if (result)
    {
      v11 = result;
      v12 = objc_msgSend(result, sel_window);

      if (v12)
      {
        MEMORY[0x18D75B908](objc_msgSend(a1, sel_locationInView_, v12));
        v13 = ViewResponder.hitTest(globalPoint:radius:options:)();
        static Update.end()();
        swift_release();

        return (void *)v13;
      }
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in DragAndDropBridge.itemsInListForSession(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  char v7;
  _QWORD v8[6];

  v8[5] = a1;
  type metadata accessor for ResponderNode();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  swift_retain();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = a1;
    swift_retain();
    result = swift_release();
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  return result;
}

void closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = (void *)v4;
    specialized DragAndDropBridge.springLoadedInteraction(_:didActivate:)();

  }
}

Class @objc DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  Class isa;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  specialized DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(a4);

  swift_unknownObjectRelease();
  type metadata accessor for UIDragItem();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

Class @objc DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  Class isa;

  v10 = a5;
  swift_unknownObjectRetain();
  v11 = a1;
  specialized DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(a6, a2, a3);

  swift_unknownObjectRelease();
  type metadata accessor for UIDragItem();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

id @objc DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;

  v6 = a3;
  v7 = a4;
  swift_unknownObjectRetain();
  v8 = a1;
  v9 = (void *)specialized DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(v7);

  swift_unknownObjectRelease();
  return v9;
}

id @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, id))specialized DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:));
}

uint64_t @objc DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  char v8;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  v8 = specialized DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

uint64_t closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(char *);
  char v6;
  uint64_t v7;
  void (*v8)(char *);

  if (result)
    v2 = 2;
  else
    v2 = 1;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v4, (uint64_t)&v7);
      v5 = v8;
      outlined copy of AppIntentExecutor?((uint64_t)v8);
      outlined destroy of DragContext(&v7);
      if (v5)
      {
        v6 = v2;
        v5(&v6);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
      }
      v4 += 112;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void @objc DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;

  v8 = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9 = a1;
  specialized DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(a4, a5);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(uint64_t result, id a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  __int128 *v6;
  _OWORD v7[3];
  void (*v8)(uint64_t);
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (result)
    return result;
  v17 = v2;
  v18 = v3;
  if (objc_msgSend(a2, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, 32);
  }
  v4 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with take of Image.Resolved?((uint64_t)v7, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!*((_QWORD *)&v11 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    goto LABEL_9;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    goto LABEL_10;
  }
  swift_retain();
  swift_release();
  DragPayload.resolve()((uint64_t)&v10);
  swift_release();
LABEL_10:
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v10, (uint64_t)v7, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  if (v9)
  {
    v5 = v8;
    outlined copy of AppIntentExecutor?((uint64_t)v8);
    outlined destroy of DragContext(v7);
    if (v5)
    {
      v5(1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
    }
    v6 = &v10;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v10, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    v6 = v7;
  }
  return outlined destroy of AccessibilityTableContext?((uint64_t)v6, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
}

void @objc DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc DragAndDropBridge.dragInteraction(_:sessionWillBegin:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dragInteraction(_:sessionWillBegin:));
}

id @objc DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  v8 = specialized DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(a4);

  swift_unknownObjectRelease();
  return v8;
}

void @objc DragAndDropBridge.dragInteraction(_:session:didEndWith:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  swift_unknownObjectRetain();
  v5 = a1;
  specialized DragAndDropBridge.dragInteraction(_:session:didEndWith:)();

  swift_unknownObjectRelease();
}

void *DragAndDropBridge.dropResponder(from:)(void *a1)
{
  void *result;
  uint64_t v2;

  result = DragAndDropBridge.hitTestedResponder(session:)(a1);
  if (result)
  {
    type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider();
    ResponderNode.firstAncestor<A>(ofType:)();
    swift_release();
    return (void *)v2;
  }
  return result;
}

uint64_t closure #1 in DragAndDropBridge.outermostDropResponder()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;

  type metadata accessor for DragDropDefaultPreviewResponder();
  result = dynamic_cast_existential_1_superclass_conditional(a1);
  if (result)
  {
    *a2 = result;
    a2[1] = v7;
    swift_retain();
    result = swift_release();
    v8 = 2;
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return result;
}

id @objc DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(a4);
  v9 = v8;

  swift_unknownObjectRelease();
  return v9;
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidEnter:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dropInteraction(_:sessionDidEnter:));
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidExit:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dropInteraction(_:sessionDidExit:));
}

void @objc DragAndDropBridge.dropInteraction(_:sessionDidEnd:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dropInteraction(_:sessionDidEnd:));
}

void @objc DragAndDropBridge.dropInteraction(_:performDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dropInteraction(_:performDrop:));
}

uint64_t closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  BOOL v7;
  _QWORD *Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD);
  __int128 *v13;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void (*v18)(_QWORD);
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (result)
    return result;
  v27 = v3;
  v28 = v4;
  v6 = (_QWORD *)(a2 + direct field offset for DragAndDropBridge.activeDrop);
  swift_beginAccess();
  if (*v6)
    v7 = 0;
  else
    v7 = v6[1] == 1;
  if (!v7)
  {
    Strong = (_QWORD *)swift_weakLoadStrong();
    if (Strong)
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD))(v6[1] + 8))(v14, *Strong);
      if (v14[3])
      {
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (*((_QWORD *)&v16 + 1))
          {
            outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v20);
            v9 = *((_QWORD *)&v21 + 1);
            v10 = v22;
            __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
            (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
            goto LABEL_14;
          }
        }
        else
        {
          v17 = 0;
          v15 = 0u;
          v16 = 0u;
        }
      }
      else
      {
        outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        v15 = 0u;
        v16 = 0u;
        v17 = 0;
      }
      swift_release();
      outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    }
  }
LABEL_14:
  if (objc_msgSend(a3, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  v11 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with take of Image.Resolved?((uint64_t)&v15, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!*((_QWORD *)&v21 + 1))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v11);
    goto LABEL_21;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    goto LABEL_22;
  }
  swift_retain();
  swift_release();
  DragPayload.resolve()((uint64_t)&v20);
  swift_release();
LABEL_22:
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v20, (uint64_t)&v15, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  if (v19)
  {
    v12 = v18;
    outlined copy of AppIntentExecutor?((uint64_t)v18);
    outlined destroy of DragContext(&v15);
    if (v12)
    {
      v12(0);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v12);
    }
    v13 = &v20;
  }
  else
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v20, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
    v13 = &v15;
  }
  return outlined destroy of AccessibilityTableContext?((uint64_t)v13, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
}

void @objc DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(v9, a5);

  swift_unknownObjectRelease();
}

void @objc DragAndDropBridge.dropInteraction(_:concludeDrop:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  @objc CollectionViewListDragAndDropController.collectionView(_:dragSessionWillBegin:)(a1, a2, a3, a4, (void (*)(uint64_t))specialized DragAndDropBridge.dropInteraction(_:concludeDrop:));
}

id @objc DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, id))specialized DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:));
}

id @objc DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t (*a6)(id, id))
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a1;
  v14 = (void *)a6(v11, v12);

  return v14;
}

void *DragAndDropBridge.springLoadedResponder(from:)(void *a1)
{
  uint64_t v1;
  void *result;
  void *v4;
  id v5;
  _BYTE *v6;

  result = (void *)MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, sel_window);

    objc_msgSend(a1, sel_locationInView_, v5);
    result = (void *)DragAndDropBridge.hitTestedResponder(locationInWindow:)();
    if (result)
    {
      type metadata accessor for SpringLoadedViewResponder();
      ResponderNode.firstAncestor<A>(ofType:)();
      swift_release();
      result = v6;
      if (v6)
      {
        if ((v6[208] & 1) == 0)
        {
          swift_release();
          return 0;
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DragAndDropBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();

  swift_release();
  outlined destroy of AccessibilityTableContext?(v0 + direct field offset for DragAndDropBridge.activeDrop, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + direct field offset for DragAndDropBridge.onSessionBegan));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v0 + direct field offset for DragAndDropBridge.onSessionEnded));
}

uint64_t type metadata completion function for DragAndDropBridge.SpringLoadedEffect()
{
  return swift_initClassMetadata2();
}

void DragAndDropBridge.SpringLoadedEffect.bridge.getter()
{
  JUMPOUT(0x18D760234);
}

void DragAndDropBridge.SpringLoadedEffect.blinkTimer.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
  *(_QWORD *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = a1;

}

void DragAndDropBridge.SpringLoadedEffect.previousHighlightState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState);
}

_BYTE *DragAndDropBridge.SpringLoadedEffect.previousHighlightState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) = *result;
  return result;
}

void DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, id a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  _QWORD aBlock[6];

  v4 = *v2;
  v5 = *MEMORY[0x1E0DEEDD8];
  switch((unint64_t)objc_msgSend(a2, sel_state))
  {
    case 0uLL:
    case 3uLL:
      LOBYTE(aBlock[0]) = 0;
      specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
      v6 = *(void **)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v7, sel_invalidate);
        v18 = *(id *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
        *(uint64_t *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = 0;

      }
      break;
    case 1uLL:
      LOBYTE(aBlock[0]) = 1;
      specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
      break;
    case 2uLL:
      if (!*(uint64_t *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer))
      {
        v8 = v5 & v4;
        LOBYTE(aBlock[0]) = 1;
        specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)((unsigned __int8 *)aBlock);
        v9 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v10 = (_QWORD *)swift_allocObject();
        v10[2] = *(_QWORD *)(v8 + 80);
        v10[3] = *(_QWORD *)(v8 + 88);
        v10[4] = v9;
        v10[5] = a1;
        aBlock[4] = partial apply for closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:);
        aBlock[5] = v10;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
        aBlock[3] = &block_descriptor_27;
        v11 = _Block_copy(aBlock);
        v12 = (void *)objc_opt_self();
        swift_retain();
        v13 = a1;
        v14 = objc_msgSend(v12, sel_timerWithTimeInterval_repeats_block_, 1, v11, 0.1);
        _Block_release(v11);
        swift_release();
        swift_release();
        v15 = *(void **)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer);
        *(uint64_t *)((char *)v2 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = (uint64_t)v14;
        v16 = v14;

        v17 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
        objc_msgSend(v17, sel_addTimer_forMode_, v16, *MEMORY[0x1E0C99860]);

      }
      break;
    default:
      return;
  }
}

void closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = (void *)v4;
    if (*(_BYTE *)(v4 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) == 2)
      v6 = 1;
    else
      v6 = 2;
    v7 = v6;
    specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)(&v7);

  }
  else
  {
    objc_msgSend(a1, sel_invalidate);
  }
}

void @objc DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(v6, a4);

  swift_unknownObjectRelease();
}

uint64_t @objc DragAndDropBridge.SpringLoadedEffect.init()(_QWORD *a1, uint64_t a2)
{
  return @objc DragAndDropBridge.SpringLoadedEffect.init()(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized DragAndDropBridge.SpringLoadedEffect.init());
}

id DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit()
{
  return DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for DragAndDropBridge.SpringLoadedEffect);
}

void @objc DragAndDropBridge.SpringLoadedEffect.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

uint64_t type metadata accessor for DragAndDropBridge.SpringLoadedEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragAndDropBridge.SpringLoadedEffect);
}

uint64_t type metadata completion function for DragAndDropBridge.SpringLoadedBehavior()
{
  return swift_initClassMetadata2();
}

void DragAndDropBridge.SpringLoadedBehavior.bridge.getter()
{
  JUMPOUT(0x18D760234);
}

uint64_t DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  char v7;

  v5 = MEMORY[0x18D760234](v2 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.bridge);
  if (v5)
  {
    v6 = (void *)v5;
    if (objc_msgSend(*(id *)(v2 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.base), sel_shouldAllowInteraction_withContext_, a1, a2))v7 = specialized DragAndDropBridge.shouldAllow(_:with:)(a2);
    else
      v7 = 0;

  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  char v8;

  v6 = a3;
  swift_unknownObjectRetain();
  v7 = a1;
  v8 = DragAndDropBridge.SpringLoadedBehavior.shouldAllow(_:with:)((uint64_t)v6, a4);

  swift_unknownObjectRelease();
  return v8 & 1;
}

Swift::Void __swiftcall DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)(UISpringLoadedInteraction a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(v1 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.base);
  if ((objc_msgSend(v3, sel_respondsToSelector_, sel_interactionDidFinish_) & 1) != 0)
    objc_msgSend(v3, sel_interactionDidFinish_, a1.super.isa);
  v4 = MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.SpringLoadedBehavior.bridge);
  if (v4)
  {
    v5 = (id)v4;
    specialized DragAndDropBridge.interactionDidFinish(_:)();

  }
}

void @objc DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  DragAndDropBridge.SpringLoadedBehavior.interactionDidFinish(_:)((UISpringLoadedInteraction)v4);

}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.init()(_QWORD *a1, uint64_t a2)
{
  return @objc DragAndDropBridge.SpringLoadedEffect.init()(a1, a2, (uint64_t (*)(_QWORD, _QWORD))specialized DragAndDropBridge.SpringLoadedBehavior.init());
}

uint64_t @objc DragAndDropBridge.SpringLoadedEffect.init()(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58));
}

id DragAndDropBridge.SpringLoadedBehavior.__deallocating_deinit()
{
  return DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit((uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for DragAndDropBridge.SpringLoadedBehavior);
}

id DragAndDropBridge.SpringLoadedEffect.__deallocating_deinit(uint64_t (*a1)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;
  objc_class *v2;
  objc_super v4;

  v2 = (objc_class *)a1(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58));
  v4.receiver = v1;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t @objc DragAndDropBridge.SpringLoadedBehavior.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for DragAndDropBridge.SpringLoadedBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DragAndDropBridge.SpringLoadedBehavior);
}

uint64_t DragSourceContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD v3[7];

  v1 = *(_QWORD *)(v0 + 24);
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  swift_retain();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v3, v1 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Path?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return v0;
}

uint64_t DragSourceContext.__deallocating_deinit()
{
  DragSourceContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DragSourceContext()
{
  return objc_opt_self();
}

uint64_t DropInfoTargetStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropInfoTargetStore()
{
  return objc_opt_self();
}

uint64_t destroy for DropDestination(uint64_t a1)
{
  swift_weakDestroy();
  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return swift_release();
}

uint64_t initializeWithCopy for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = swift_weakCopyInit();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  v5 = v4 + 16;
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)v5 = *v6;
    *(_OWORD *)(v5 + 16) = v9;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 48);
  }
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropDestination(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = (_QWORD *)swift_weakCopyAssign();
  v4[1] = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  v6 = *(_QWORD *)(a2 + 40);
  if (!v4[5])
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 40) = v6;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(v4 + 2), a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    v7 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)(a2 + 32);
    v5[4] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v5 = v7;
    *((_OWORD *)v5 + 1) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v4 + 2));
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1(v4 + 2, (uint64_t *)(a2 + 16));
LABEL_8:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __n128 result;

  v3 = swift_weakTakeInit();
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = v4;
  result = *(__n128 *)(a2 + 48);
  *(__n128 *)(v3 + 48) = result;
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(v3 + 72) = *(_BYTE *)(a2 + 72);
  return result;
}

uint64_t assignWithTake for DropDestination(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = swift_weakTakeAssign();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  v5 = v4 + 16;
  if (*(_QWORD *)(v4 + 40))
    __swift_destroy_boxed_opaque_existential_1(v4 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DropDestination(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DropDestination()
{
  return &type metadata for DropDestination;
}

uint64_t DropInfoAdaptor.localDragContexts.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = (void *)MEMORY[0x18D760234](v0);
  v2 = MEMORY[0x1E0DEE9B8];
  if (!v1
    || (v3 = objc_msgSend(v1, sel_localDragSession),
        swift_unknownObjectRelease(),
        !v3))
  {
    v7 = 0u;
    v8 = 0u;
LABEL_10:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, v2 + 8);
    return MEMORY[0x1E0DEE9D8];
  }
  v4 = objc_msgSend(v3, sel_localContext);
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  outlined init with take of Image.Resolved?((uint64_t)v6, (uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, v2 + 8);
  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_10;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [Any], v2 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCast())
    return *(_QWORD *)&v6[0];
  return MEMORY[0x1E0DEE9D8];
}

void DropInfoAdaptor.originContentPath.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  _BYTE v19[24];
  uint64_t v20;

  v3 = (void *)MEMORY[0x18D760234](v1);
  if (!v3)
    goto LABEL_18;
  v4 = objc_msgSend(v3, sel_localDragSession);
  swift_unknownObjectRelease();
  if (!v4)
    goto LABEL_18;
  v5 = objc_msgSend(v4, sel_items);
  swift_unknownObjectRelease();
  type metadata accessor for UIDragItem();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v6 >> 62))
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v16 != 1)
    goto LABEL_17;
LABEL_5:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x18D75E3BC](0, v6);
LABEL_8:
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v8, sel_localObject);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v18, 0, sizeof(v18));
    }
    v10 = MEMORY[0x1E0DEE9B8] + 8;
    outlined init with take of Image.Resolved?((uint64_t)v18, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    if (v20)
    {
      type metadata accessor for DragSourceContext();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v11 = *(_QWORD *)(v17 + 32);
        v12 = *(_QWORD *)(v17 + 40);
        v13 = *(_QWORD *)(v17 + 48);
        v14 = *(_QWORD *)(v17 + 56);
        v15 = *(unsigned __int8 *)(v17 + 64);
        outlined copy of Path?(v11, v12, v13, v14, *(_BYTE *)(v17 + 64));
        swift_release();
        if (v15 != 255)
          goto LABEL_19;
      }
    }
    else
    {
      outlined destroy of AccessibilityTableContext?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v10);
    }
LABEL_18:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    LOBYTE(v15) = -1;
LABEL_19:
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 24) = v14;
    *(_BYTE *)(a1 + 32) = v15;
    return;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(id *)(v6 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

unint64_t type metadata accessor for UIDragItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIDragItem;
  if (!lazy cache variable for type metadata for UIDragItem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  }
  return result;
}

Swift::Void __swiftcall DropInfoAdaptor.setDropTargetLocation(_:at:)(CGPoint_optional _, Swift::Int at)
{
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  double v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  id v19;
  id v20;
  uint64_t v21;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v9 = *(double *)&_.is_nil;
  v10 = (void *)MEMORY[0x18D760234](v5, (__n128)_.value, *(__n128 *)&_.value.y);
  if (!v10)
    return;
  v11 = objc_msgSend(v10, sel_items);
  type metadata accessor for UIDragItem();
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v12 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) > v6)
    {
      v13 = *(id *)(v12 + 8 * v6 + 32);
      goto LABEL_6;
    }
    __break(1u);
    return;
  }
  v13 = (id)MEMORY[0x18D75E3BC](v6, v12);
LABEL_6:
  v20 = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v5 + 8);
  if (v14)
  {
    v15 = (uint64_t *)(v14 + 16);
    swift_beginAccess();
    if ((v7 & 1) != 0)
    {
      v19 = v20;
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v19);

    }
    else
    {
      v16 = v9;
      v17 = v20;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v21 = *v15;
      *v15 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, isUniquelyReferenced_nonNull_native, v16, *(double *)&at);
      *v15 = v21;

      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_unknownObjectRelease();

  }
  else
  {
    swift_unknownObjectRelease();

  }
}

Swift::Void __swiftcall DropInfoAdaptor.setDropTargetTransform(_:at:)(CGAffineTransform_optional *_, Swift::Int at)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  id v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[7];
  _BYTE v29[56];

  v3 = v2;
  outlined init with take of CGRect?((uint64_t)_, (uint64_t)v28, &lazy cache variable for type metadata for CGAffineTransform?, type metadata accessor for CGAffineTransform);
  v6 = v28[0];
  v7 = v28[1];
  v8 = v28[2];
  v9 = v28[3];
  v10 = v28[4];
  v11 = v28[5];
  v12 = (void *)MEMORY[0x18D760234](v3);
  if (!v12)
    return;
  v13 = objc_msgSend(v12, sel_items);
  type metadata accessor for UIDragItem();
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v14 & 0xC000000000000001) != 0)
  {
    v15 = (id)MEMORY[0x18D75E3BC](at, v14);
    goto LABEL_6;
  }
  if (at < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v15 = *(id *)(v14 + 8 * at + 32);
LABEL_6:
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v3 + 8);
  if (v17)
  {
    v18 = (uint64_t *)(v17 + 24);
    swift_beginAccess();
    outlined init with take of CGRect?((uint64_t)_, (uint64_t)v29, &lazy cache variable for type metadata for CGAffineTransform?, type metadata accessor for CGAffineTransform);
    if ((v29[48] & 1) != 0)
    {
      v19 = v16;
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v19, (uint64_t)&v23);

    }
    else
    {
      *(_QWORD *)&v23 = v6;
      *((_QWORD *)&v23 + 1) = v7;
      v24 = v8;
      v25 = v9;
      v26 = v10;
      v27 = v11;
      v20 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = *v18;
      *v18 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v23, v20, isUniquelyReferenced_nonNull_native);
      *v18 = v22;

      swift_bridgeObjectRelease();
    }
    swift_endAccess();
  }
  swift_unknownObjectRelease();

}

Swift::Bool __swiftcall UIDropSession.hasItemsConforming(to:)(Swift::OpaquePointer to)
{
  void *v1;
  Class isa;
  unsigned __int8 v3;

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay22UniformTypeIdentifiers6UTTypeVG_SSs5NeverOTg5055_s7SwiftUI11PasteHelperV09validatedC7HandleryycSgvgSS22de12Identifiers6G54Vcfu_33_464cb2da6335d584e794ab09e778cff4AHSSTf3nnnpk_nTf1cn_n((uint64_t)to._rawValue);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_hasItemsConformingToTypeIdentifiers_, isa);

  return v3;
}

uint64_t UIDropSession.registeredContentTypes()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = type metadata accessor for UTType();
  v46 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v35 - v8;
  v10 = objc_msgSend(v0, sel_items, v7);
  type metadata accessor for UIDragItem();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
    goto LABEL_24;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v12)
  {
    v13 = 0;
    v39 = v11 & 0xC000000000000001;
    v36 = v11 & 0xFFFFFFFFFFFFFF8;
    v47 = MEMORY[0x1E0DEE9E8];
    v35 = v11 + 32;
    v37 = v12;
    v38 = v11;
    while (1)
    {
      if (v39)
      {
        v14 = (id)MEMORY[0x18D75E3BC](v13, v11);
      }
      else
      {
        if (v13 >= *(_QWORD *)(v36 + 16))
          goto LABEL_23;
        v14 = *(id *)(v35 + 8 * v13);
      }
      v15 = v14;
      if (__OFADD__(v13++, 1))
        break;
      v17 = objc_msgSend(v14, sel_itemProvider);
      v18 = objc_msgSend(v17, sel_registeredContentTypes);

      v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      v44 = *(_QWORD *)(v19 + 16);
      if (v44)
      {
        v41 = v15;
        v42 = v13;
        v20 = 0;
        v21 = *(unsigned __int8 *)(v46 + 80);
        v40 = v19;
        v43 = v19 + ((v21 + 32) & ~v21);
        v22 = *(_QWORD *)(v46 + 72);
        v23 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
        do
        {
          v45 = v20;
          v23(v9, v43 + v22 * v20, v1);
          v26 = v47;
          lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0358]);
          swift_bridgeObjectRetain();
          v27 = v9;
          v28 = dispatch thunk of Hashable._rawHashValue(seed:)();
          v29 = -1 << *(_BYTE *)(v26 + 32);
          v30 = v28 & ~v29;
          v31 = v26 + 56;
          if (((*(_QWORD *)(v26 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
          {
            v32 = ~v29;
            while (1)
            {
              v23(v4, *(_QWORD *)(v26 + 48) + v30 * v22, v1);
              lazy protocol witness table accessor for type UTType and conformance UTType(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E0DF0360]);
              v33 = dispatch thunk of static Equatable.== infix(_:_:)();
              v25 = *(void (**)(char *, uint64_t))(v46 + 8);
              v25(v4, v1);
              if ((v33 & 1) != 0)
                break;
              v30 = (v30 + 1) & v32;
              v26 = v47;
              if (((*(_QWORD *)(v31 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
                goto LABEL_12;
            }
            swift_bridgeObjectRelease();
            v9 = v27;
          }
          else
          {
LABEL_12:
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v9 = v27;
            v23(v4, (uint64_t)v27, v1);
            v48 = v26;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v4, v30, isUniquelyReferenced_nonNull_native);
            v47 = v48;
            swift_bridgeObjectRelease();
            v25 = *(void (**)(char *, uint64_t))(v46 + 8);
          }
          v20 = v45 + 1;
          v25(v9, v1);
        }
        while (v20 != v44);

        swift_bridgeObjectRelease();
        v12 = v37;
        v11 = v38;
        v13 = v42;
        if (v42 == v37)
        {
LABEL_21:
          swift_bridgeObjectRelease();
          return v47;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        if (v13 == v12)
          goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9E8];
}

void thunk for @escaping @callee_guaranteed (@guaranteed UISpringLoadedInteraction, @guaranteed UISpringLoadedInteractionContext) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(id, uint64_t);
  id v6;

  v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();

}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI12DraggingItemVG_So06UIDragG0Cs5NeverOTg503_s7d77UI17DragAndDropBridgeC9dragItems33_1C4DED7BD95AC993CC69F2CB25BC2A40LLySaySo10hg54CGAA0cE23DefaultPreviewResponderC_AA0C7PayloadCtFAgA08F8S0VXEfU_AF0lN23DefaultPreviewResponderCAF0L13SourceContextCTf1cn_nTf4ngg_n(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  id *v9;
  char v10;
  id v11;
  id v12;
  double v13;
  double v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    v8 = specialized ContiguousArray.reserveCapacity(_:)();
    v9 = (id *)(a1 + 32);
    v10 = (*(uint64_t (**)(uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder + *a2 + 64))(v8);
    do
    {
      v11 = *v9;
      v12 = objc_msgSend(v11, sel_preferredPresentationSize);
      if (v14 == 0.0 && v13 == 0.0)
      {
        (*(void (**)(id))(class metadata base offset for DragDropDefaultPreviewResponder + *a2 + 32))(v12);
        objc_msgSend(v11, sel_setPreferredPresentationSize_);
      }
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3758]), sel_initWithItemProvider_, v11);
      objc_msgSend(v15, sel_setLocalObject_, a3);
      if ((v10 & 1) != 0)
      {
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:);
        *(_QWORD *)(v16 + 24) = a2;
        aBlock[4] = partial apply for closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:);
        aBlock[5] = v16;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
        aBlock[3] = &block_descriptor_12_0;
        v17 = _Block_copy(aBlock);
        swift_retain_n();
        swift_release();
        objc_msgSend(v15, sel_setPreviewProvider_, v17);

        _Block_release(v17);
        swift_release();
      }
      else
      {

      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      ++v9;
      --v4;
    }
    while (v4);
    return v19;
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = a1;
  v23 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v17 = v3;
      v5 = 0;
      v21 = v3 & 0xFFFFFFFFFFFFFF8;
      v22 = v3 & 0xC000000000000001;
      v19 = a2;
      v20 = v3 + 32;
      v18 = v4;
      while (v22)
      {
        v6 = (id)MEMORY[0x18D75E3BC](v5, v17);
LABEL_9:
        v7 = v6;
        if (__OFADD__(v5++, 1))
          goto LABEL_20;
        v9 = *(_QWORD *)(a2 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)(type metadata accessor for UTType() - 8);
          v3 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
          v11 = *(_QWORD *)(v10 + 72);
          swift_bridgeObjectRetain();
          while (1)
          {
            v12 = objc_msgSend(v7, sel_itemProvider);
            v13 = UTType.identifier.getter();
            v14 = (void *)MEMORY[0x18D75CC88](v13);
            swift_bridgeObjectRelease();
            v15 = objc_msgSend(v12, sel_hasItemConformingToTypeIdentifier_, v14);

            if ((v15 & 1) != 0)
              break;
            v3 += v11;
            if (!--v9)
            {

              a2 = v19;
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
          }
          a2 = v19;
          swift_bridgeObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v3 = (unint64_t)&v23;
          specialized ContiguousArray._endMutation()();
LABEL_16:
          v4 = v18;
        }
        else
        {

        }
        if (v5 == v4)
          return v23;
      }
      if (v5 < *(_QWORD *)(v21 + 16))
        break;
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x1E0DEE9D8];
    }
    v6 = *(id *)(v20 + 8 * v5);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
      v10 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (char *)MEMORY[0x18D75E3BC](v5, a1);
LABEL_9:
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        if (*(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id] == *(_QWORD *)(a2 + v6))
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v6 = v10;
        }
        ++v5;
        if (v8 == v4)
          return v11;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x1E0DEE9D8];
    }
    v7 = (char *)*(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a1;
  v26 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_26;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v19 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v24 = v3 + 32;
      v25 = v3 & 0xFFFFFFFFFFFFFF8;
      v23 = a2 + 56;
      v20 = v3 & 0xC000000000000001;
      v21 = v4;
      while (v6)
      {
        v7 = (id)MEMORY[0x18D75E3BC](v5, v19);
LABEL_10:
        v8 = v7;
        if (__OFADD__(v5++, 1))
          goto LABEL_25;
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
        if (swift_dynamicCastClass())
        {
          if ((a2 & 0xC000000000000001) != 0)
          {
            v10 = v8;
            v3 = __CocoaSet.contains(_:)();

            if ((v3 & 1) != 0)
            {

              goto LABEL_6;
            }
          }
          else if (*(_QWORD *)(a2 + 16))
          {
            v11 = *(_QWORD *)(a2 + 40);
            v22 = v8;
            v12 = NSObject._rawHashValue(seed:)(v11);
            v13 = -1 << *(_BYTE *)(a2 + 32);
            v14 = v12 & ~v13;
            if (((*(_QWORD *)(v23 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
            {
              v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
              v3 = static NSObject.== infix(_:_:)();

              if ((v3 & 1) != 0)
              {
LABEL_21:

                v6 = v20;
                v4 = v21;
                goto LABEL_6;
              }
              v16 = ~v13;
              while (1)
              {
                v14 = (v14 + 1) & v16;
                if (((*(_QWORD *)(v23 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
                  break;
                v17 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
                v3 = static NSObject.== infix(_:_:)();

                if ((v3 & 1) != 0)
                  goto LABEL_21;
              }
            }

            v6 = v20;
            v4 = v21;
          }
        }
        v3 = (uint64_t)&v26;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_6:
        if (v5 == v4)
          return v26;
      }
      if (v5 < *(_QWORD *)(v25 + 16))
        break;
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        return MEMORY[0x1E0DEE9D8];
    }
    v7 = *(id *)(v24 + 8 * v5);
    goto LABEL_10;
  }
  return MEMORY[0x1E0DEE9D8];
}

id specialized DragAndDropBridge.SpringLoadedBehavior.init(bridge:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  objc_class *v6;
  objc_super v8;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  swift_unknownObjectWeakInit();
  v2 = direct field offset for DragAndDropBridge.SpringLoadedBehavior.base;
  v3 = (void *)objc_opt_self();
  v4 = v0;
  *(_QWORD *)((char *)v0 + v2) = objc_msgSend(v3, sel__defaultInteractionBehavior);
  swift_unknownObjectWeakAssign();

  v6 = (objc_class *)type metadata accessor for DragAndDropBridge.SpringLoadedBehavior(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v5);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_init);
}

id specialized DragAndDropBridge.SpringLoadedEffect.init(bridge:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  objc_super v5;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v0 + direct field offset for DragAndDropBridge.SpringLoadedEffect.blinkTimer) = 0;
  *((_BYTE *)v0 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) = 0;
  swift_unknownObjectWeakAssign();
  v3 = (objc_class *)type metadata accessor for DragAndDropBridge.SpringLoadedEffect(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  v5.receiver = v0;
  v5.super_class = v3;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  id v6;

  v6 = objc_allocWithZone((Class)a2(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88)));
  return a3(a1);
}

id specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)(_QWORD *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  _OWORD *v10;
  BOOL v11;
  uint64_t Strong;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  id v37;
  ValueMetadata *v38;
  _UNKNOWN **v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  ValueMetadata *v42;
  _UNKNOWN **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  void *v49;
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[5];
  __int128 v60;
  ValueMetadata *v61;
  _UNKNOWN **v62;

  v10 = a1 + 2;
  if (*a1)
    v11 = 0;
  else
    v11 = a1[1] == 1;
  if (v11 || (Strong = swift_weakLoadStrong()) == 0)
  {
    if (!a3)
      goto LABEL_28;
    goto LABEL_11;
  }
  v13 = (uint64_t *)Strong;
  swift_unknownObjectRelease();
  if (a3)
  {
    if (v13 == a3)
    {
      v14 = *v13;
      v59[0] = v13;
      v15 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 8);
      swift_retain();
      v15(&v60, v14, a4);
      if (v61)
      {
        outlined init with take of OptionalBinaryInteger(&v60, (uint64_t)&v52);
        v61 = &type metadata for DropInfoAdaptor;
        v62 = &protocol witness table for DropInfoAdaptor;
        v16 = swift_allocObject();
        v17 = (_QWORD *)(v16 + 16);
        *(_QWORD *)&v60 = v16;
        swift_unknownObjectRetain();
        v18 = a5;
        swift_retain();
        DropInfoAdaptor.init(_:host:responder:)(a2, v18, v13, v17);
        v19 = v54;
        v20 = v55;
        __swift_project_boxed_opaque_existential_1(&v52, v54);
        (*(void (**)(_QWORD *__return_ptr, __int128 *, uint64_t, uint64_t))(v20 + 32))(v59, &v60, v19, v20);
        __asm { BR              X9 }
      }
      swift_release();
      v47 = &v60;
      goto LABEL_24;
    }
LABEL_11:
    v21 = 0;
    goto LABEL_12;
  }
  v21 = 1;
LABEL_12:
  if (*a1)
    v22 = 0;
  else
    v22 = a1[1] == 1;
  if (v22 || (v23 = (_QWORD *)swift_weakLoadStrong()) == 0)
  {
LABEL_19:
    if ((v21 & 1) == 0)
      goto LABEL_20;
LABEL_28:
    outlined destroy of AccessibilityTableContext?((uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    v44 = 0;
    *(_OWORD *)a1 = xmmword_187BF9840;
    *v10 = 0u;
    v10[1] = 0u;
    v10[2] = 0u;
    *(_OWORD *)((char *)v10 + 41) = 0u;
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, v44);
  }
  v24 = v23;
  v25 = a1[1];
  v26 = *v23;
  v59[0] = v24;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(v25 + 8))(&v60, v26);
  if (v61)
  {
    outlined init with take of OptionalBinaryInteger(&v60, (uint64_t)&v52);
    v61 = &type metadata for DropInfoAdaptor;
    v62 = &protocol witness table for DropInfoAdaptor;
    v27 = swift_allocObject();
    v28 = (_QWORD *)(v27 + 16);
    *(_QWORD *)&v60 = v27;
    swift_unknownObjectRetain();
    v49 = a5;
    v29 = a5;
    swift_retain();
    DropInfoAdaptor.init(_:host:responder:)(a2, v29, v24, v28);
    v30 = v54;
    v31 = v55;
    __swift_project_boxed_opaque_existential_1(&v52, v54);
    v32 = v30;
    a5 = v49;
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v31 + 40))(&v60, v32, v31);
    swift_release();
    outlined destroy of DropInfo((uint64_t)&v60);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    goto LABEL_19;
  }
  swift_release();
  outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v60, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
  if ((v21 & 1) != 0)
    goto LABEL_28;
LABEL_20:
  v33 = *a3;
  v59[0] = a3;
  v34 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 8);
  swift_retain();
  v34(&v52, v33, a4);
  if (!v54)
  {
    swift_release();
    v47 = &v52;
LABEL_24:
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
    goto LABEL_28;
  }
  outlined init with take of OptionalBinaryInteger(&v52, (uint64_t)&v60);
  v59[3] = &type metadata for DropInfoAdaptor;
  v59[4] = &protocol witness table for DropInfoAdaptor;
  v35 = swift_allocObject();
  v36 = (_QWORD *)(v35 + 16);
  v59[0] = v35;
  swift_unknownObjectRetain();
  v37 = a5;
  swift_retain();
  DropInfoAdaptor.init(_:host:responder:)(a2, v37, a3, v36);
  v38 = v61;
  v39 = v62;
  __swift_project_boxed_opaque_existential_1(&v60, (uint64_t)v61);
  if ((((uint64_t (*)(_QWORD *, ValueMetadata *, _UNKNOWN **))v39[1])(v59, v38, v39) & 1) != 0)
  {
    v40 = v61;
    v41 = v62;
    __swift_project_boxed_opaque_existential_1(&v60, (uint64_t)v61);
    ((void (*)(_QWORD *, ValueMetadata *, _UNKNOWN **))v41[3])(v59, v40, v41);
    v42 = v61;
    v43 = v62;
    __swift_project_boxed_opaque_existential_1(&v60, (uint64_t)v61);
    ((void (*)(__int128 *__return_ptr, _QWORD *, ValueMetadata *, _UNKNOWN **))v43[4])(&v52, v59, v42, v43);
    v44 = qword_187C313A8[(char)v52];
    v51 = 0;
    memset(v50, 0, sizeof(v50));
    *((_QWORD *)&v52 + 1) = a4;
    swift_weakInit();
    outlined init with take of DropDelegate?((uint64_t)v50, (uint64_t)&v53);
    v56 = v44;
    type metadata accessor for DropInfoTargetStore();
    v45 = swift_allocObject();
    v46 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v45 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v45 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v46);
    swift_release();
    v57 = v45;
    v58 = 0;
    outlined destroy of DropInfo((uint64_t)v59);
    outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v52, (uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  }
  else
  {
    outlined destroy of DropInfo((uint64_t)v59);
    swift_release();
    outlined destroy of AccessibilityTableContext?((uint64_t)a1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    *(_OWORD *)a1 = xmmword_187BF9840;
    *v10 = 0u;
    v10[1] = 0u;
    v10[2] = 0u;
    *(_OWORD *)((char *)v10 + 41) = 0u;
    v44 = 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, v44);
}

void sub_1874325CC()
{
  _QWORD *v0;
  uint64_t v1;

  if (*v0 || v0[1] != 1)
  {
    outlined destroy of DropInfo(v1 - 128);
    swift_release();
    JUMPOUT(0x187432588);
  }
  __break(1u);
  JUMPOUT(0x187432600);
}

void specialized DragAndDropBridge.springLoadedInteraction(_:didActivate:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(v1 + 216);
    v3 = swift_retain();
    v2(v3);
    swift_release();
  }
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:itemsForBeginning:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if (!DragAndDropBridge.hitTestedResponder(session:)(a1))
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    goto LABEL_6;
  }
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  ResponderNode.firstAncestor<A>(ofType:)();
  swift_release();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v7, &lazy cache variable for type metadata for DragPayloadProvider?, &lazy cache variable for type metadata for DragPayloadProvider);
    return MEMORY[0x1E0DEE9D8];
  }
  outlined init with take of OptionalBinaryInteger(&v7, (uint64_t)v10);
  outlined init with copy of TableColumnList((uint64_t)v10, (uint64_t)&v7);
  type metadata accessor for DragDropDefaultPreviewResponder();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    return MEMORY[0x1E0DEE9D8];
  }
  v1 = v11;
  v2 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  v4 = specialized DragAndDropBridge.dragItems(_:_:)(v6, v3);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v4;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:itemsForAddingTo:withTouchAt:)(void *a1, double a2, double a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v7 = (void *)MEMORY[0x18D760234](v3 + direct field offset for DragAndDropBridge.host);
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return v8;
  v9 = v7;
  v10 = objc_msgSend(v7, sel_window);
  if (!v10)
  {

    return v8;
  }
  v11 = v10;
  objc_msgSend(v10, sel_convertPoint_fromCoordinateSpace_, v9, a2, a3);
  if (!DragAndDropBridge.hitTestedResponder(locationInWindow:)()
    || (type metadata accessor for DragDropDefaultPreviewResponder(),
        ResponderNode.firstAncestor<A>(ofType:)(),
        swift_release(),
        (v12 = (_QWORD *)v40) == 0))
  {

    return v8;
  }
  *(_QWORD *)&v37[0] = v40;
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DragPayloadProvider);
  swift_retain();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v42 = 0;
    v40 = 0u;
    v41 = 0u;

    swift_release();
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v40, &lazy cache variable for type metadata for DragPayloadProvider?, &lazy cache variable for type metadata for DragPayloadProvider);
    return v8;
  }
  v13 = *((_QWORD *)&v41 + 1);
  v14 = v42;
  __swift_project_boxed_opaque_existential_1(&v40, *((uint64_t *)&v41 + 1));
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  if (*(_BYTE *)(v15 + 24) == 1)
  {

    swift_release();
    swift_release();
    return v8;
  }
  v35 = *(_QWORD *)(v15 + 16);
  v16 = objc_msgSend(a1, sel_items);
  type metadata accessor for UIDragItem();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v39 = v8;
  if (!(v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v34 = v15;
    if (v18)
      goto LABEL_13;
LABEL_33:
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
LABEL_34:
    swift_bridgeObjectRelease();
    if (v36 >> 62)
      goto LABEL_52;
    v24 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v24)
    {
LABEL_36:
      v25 = 4;
      do
      {
        v26 = v25 - 4;
        if ((v36 & 0xC000000000000001) != 0)
        {
          v27 = MEMORY[0x18D75E3BC](v25 - 4, v36);
          v28 = __OFADD__(v26, 1);
          v29 = v25 - 3;
          if (v28)
            goto LABEL_51;
        }
        else
        {
          v27 = *(_QWORD *)(v36 + 8 * v25);
          swift_retain();
          v28 = __OFADD__(v26, 1);
          v29 = v25 - 3;
          if (v28)
          {
LABEL_51:
            __break(1u);
LABEL_52:
            swift_retain();
            swift_bridgeObjectRetain();
            v24 = _CocoaArrayWrapper.endIndex.getter();
            if (!v24)
              break;
            goto LABEL_36;
          }
        }
        if (*(_QWORD **)(v27 + 16) == v12)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_49;
        }
        v30 = v12;
        v31 = *(_QWORD *)(v27 + 72);
        v32 = *(_BYTE *)(v27 + 80);
        swift_release();
        if ((v32 & 1) != 0 || v31 != v35)
        {
          swift_release();
          swift_bridgeObjectRelease();
LABEL_49:

          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          return MEMORY[0x1E0DEE9D8];
        }
        ++v25;
        v12 = v30;
      }
      while (v29 != v24);
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    v8 = specialized DragAndDropBridge.dragItems(_:_:)(v12, v34);

    swift_release();
    swift_release();
    return v8;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v18 = result;
  v34 = v15;
  if (!result)
    goto LABEL_33;
LABEL_13:
  v33 = v12;
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      if ((v17 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x18D75E3BC](v20, v17);
      else
        v22 = *(id *)(v17 + 8 * v20 + 32);
      v23 = v22;
      if (objc_msgSend(v22, sel_localObject, v33))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v37, 0, sizeof(v37));
      }
      outlined init with take of Image.Resolved?((uint64_t)v37, (uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, v21);
      if (*((_QWORD *)&v41 + 1))
      {
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
      }
      v38 = 0;
LABEL_28:

      if (v38)
      {
        MEMORY[0x18D75CF58]();
        if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v18 == ++v20)
      {
        swift_bridgeObjectRelease();
        v36 = v39;
        v12 = v33;
        goto LABEL_34;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:previewForLifting:session:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  UIView *v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  _OWORD v8[2];
  _BYTE v9[24];
  uint64_t v10;

  if (objc_msgSend(a1, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  v2 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with take of Image.Resolved?((uint64_t)v8, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!v10)
  {
LABEL_11:
    outlined destroy of AccessibilityTableContext?((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for Any?, v2);
    goto LABEL_12;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v2 = v7;
    v3 = MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
    if (v3)
    {
      v4 = (UIView *)v3;
      outlined init with take of Image.Resolved?(v7 + 32, (uint64_t)v9, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
      swift_retain();
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path?);
      v5 = DragDropDefaultPreviewResponder.liftPreview(host:contentPath:onlyExplicit:)(v4, (uint64_t)v9, 0);
      outlined retain of TableColumnCustomizationID.Base((uint64_t)v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);
      swift_release();

      if (v5)
      {
        swift_release();
        return (uint64_t)v5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

UIView *specialized DragAndDropBridge.dragInteraction(_:previewForCancelling:withDefault:)(void *a1, id a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  UIView *result;
  UIView *v8;
  id v9;
  id v10;
  UIView *v11;
  id v12;
  uint64_t v13;
  _OWORD v14[2];
  _BYTE v15[24];
  uint64_t v16;

  v3 = v2;
  if (objc_msgSend(a1, sel_localObject))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  v5 = MEMORY[0x1E0DEE9B8] + 8;
  outlined init with take of Image.Resolved?((uint64_t)v14, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  if (!v16)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?, v5);
    goto LABEL_11;
  }
  type metadata accessor for DragSourceContext();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v10 = a2;
    return (UIView *)a2;
  }
  if (((*(uint64_t (**)(void))(class metadata base offset for DragDropDefaultPreviewResponder
                             + **(_QWORD **)(v13 + 16)
                             + 40))() & 1) == 0)
  {
    swift_release();
    return 0;
  }
  v6 = v3 + direct field offset for DragAndDropBridge.host;
  result = (UIView *)MEMORY[0x18D760234](v6);
  if (result)
  {
    v8 = result;
    outlined init with take of Image.Resolved?(v13 + 32, (uint64_t)v15, &lazy cache variable for type metadata for Path?, MEMORY[0x1E0CE6B18]);
    swift_retain();
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Path?);
    v9 = DragDropDefaultPreviewResponder.liftPreview(host:contentPath:onlyExplicit:)(v8, (uint64_t)v15, 1);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of Path?);

    if (v9)
    {
      swift_release();
      swift_release();
      return (UIView *)v9;
    }
    result = (UIView *)MEMORY[0x18D760234](v6);
    if (result)
    {
      v11 = result;
      v12 = specialized UIViewSnapshotResponder.platformPreviewTarget<A>(host:preferredContainer:)(result, 0);

      a2 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v12);
      swift_release();
      swift_release();

      return (UIView *)a2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:prefersFullSizePreviewsFor:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  char v15;
  unint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for UIDragItem();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v4 = v2 & 0xC000000000000001;
      v5 = 4;
      v6 = &selRef_setSensitive_;
      v7 = MEMORY[0x1E0DEE9B8];
      v8 = MEMORY[0x1E0DEE9B8] + 8;
      v17 = v2;
      while (1)
      {
        if (v4)
          v9 = (id)MEMORY[0x18D75E3BC](v5 - 4, v2);
        else
          v9 = *(id *)(v2 + 8 * v5);
        v10 = v9;
        v11 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_22;
        }
        if (objc_msgSend(v9, v6[244]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v19, 0, sizeof(v19));
        }
        outlined init with take of Image.Resolved?((uint64_t)v19, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (!v21)
          break;
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_5;
        v12 = v7;
        v13 = v6;
        v14 = *(_QWORD *)(v18 + 16);
        swift_retain();
        swift_release();
        v15 = *(_BYTE *)(v14 + 288);

        swift_release();
        if ((v15 & 1) != 0)
        {
          v3 = 1;
          goto LABEL_20;
        }
        v6 = v13;
        v7 = v12;
        v2 = v17;
        if (v11 == v3)
        {
LABEL_18:
          v3 = 0;
          goto LABEL_20;
        }
LABEL_6:
        ++v5;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
LABEL_5:

      if (v11 == v3)
        goto LABEL_18;
      goto LABEL_6;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  return v3;
}

void specialized DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(void *a1, id a2)
{
  id v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  unsigned __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(__int128 *);
  uint64_t v29;
  void *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  unsigned __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  unsigned __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v2 = objc_msgSend(a2, sel_items);
  type metadata accessor for UIDragItem();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = v3 & 0xC000000000000001;
      v6 = (char *)MEMORY[0x1E0DEE9D8];
      v7 = 4;
      v43 = v3 & 0xC000000000000001;
      v44 = MEMORY[0x1E0DEE9B8] + 8;
      v32 = v4;
      v33 = v3;
      while (1)
      {
        if (v5)
          v8 = (id)MEMORY[0x18D75E3BC](v7 - 4, v3);
        else
          v8 = *(id *)(v3 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        if (objc_msgSend(v8, sel_localObject))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v53, 0, sizeof(v53));
        }
        outlined init with take of Image.Resolved?((uint64_t)v53, (uint64_t)&v45, (unint64_t *)&lazy cache variable for type metadata for Any?, v44);
        if (!*((_QWORD *)&v46 + 1))
          break;
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_18;
        v11 = *(_QWORD *)(v52 + 24);
        swift_retain();
        swift_release();
        swift_beginAccess();
        outlined init with copy of SwiftUIAnySortComparator?(v11 + 152, (uint64_t)&v45, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        if (*((_QWORD *)&v51 + 1))
        {
          v58 = v49;
          v59 = v50;
          v60 = v51;
          v54 = v45;
          v55 = v46;
          v56 = v47;
          v57 = v48;
          swift_release();
          v5 = v43;
        }
        else
        {
          v42 = v6;
          outlined destroy of AccessibilityTableContext?((uint64_t)&v45, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_beginAccess();
          v20 = outlined init with copy of SwiftUIAnySortComparator?(v11 + 32, (uint64_t)&v45, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
          if (!*((_QWORD *)&v51 + 1))
          {
            __break(1u);
            return;
          }
          MEMORY[0x1E0C80A78](v20, v21);
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          static Update.dispatchImmediately<A>(_:)();
          v41 = *(_QWORD *)&v53[0];
          v40 = v45;
          v22 = *((_QWORD *)&v46 + 1);
          v36 = v46;
          v37 = *((_QWORD *)&v45 + 1);
          v24 = *((_QWORD *)&v47 + 1);
          v23 = v47;
          v34 = *((_QWORD *)&v46 + 1);
          v35 = *((_QWORD *)&v47 + 1);
          v25 = *((_QWORD *)&v48 + 1);
          v38 = v48;
          v39 = v49;
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v49 + 8, (uint64_t)&v58 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
          LOBYTE(v54) = v40;
          *((_QWORD *)&v54 + 1) = v37;
          *(_QWORD *)&v55 = v36;
          *((_QWORD *)&v55 + 1) = v22;
          v56 = __PAIR128__(v24, v23);
          *(_QWORD *)&v57 = v38;
          *((_QWORD *)&v57 + 1) = v25;
          *(_QWORD *)&v58 = v39;
          *((_QWORD *)&v60 + 1) = v41;
          outlined copy of AppIntentExecutor?(v37);
          outlined copy of AppIntentExecutor?(v34);
          outlined copy of AppIntentExecutor?(v35);
          outlined copy of AppIntentExecutor?(v25);
          outlined destroy of _DraggingModifier(&v45);
          outlined init with copy of DragContext((uint64_t)&v54, (uint64_t)&v45);
          swift_beginAccess();
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v45, v11 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_endAccess();
          swift_release();
          v6 = v42;
          v5 = v43;
          v4 = v32;
          v3 = v33;
        }
LABEL_19:

        if (*((_QWORD *)&v60 + 1))
        {
          v49 = v58;
          v50 = v59;
          v51 = v60;
          v45 = v54;
          v46 = v55;
          v47 = v56;
          v48 = v57;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
          v13 = *((_QWORD *)v6 + 2);
          v12 = *((_QWORD *)v6 + 3);
          if (v13 >= v12 >> 1)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v6);
          *((_QWORD *)v6 + 2) = v13 + 1;
          v14 = &v6[112 * v13];
          v15 = v45;
          v16 = v47;
          *((_OWORD *)v14 + 3) = v46;
          *((_OWORD *)v14 + 4) = v16;
          *((_OWORD *)v14 + 2) = v15;
          v17 = v48;
          v18 = v49;
          v19 = v51;
          *((_OWORD *)v14 + 7) = v50;
          *((_OWORD *)v14 + 8) = v19;
          *((_OWORD *)v14 + 5) = v17;
          *((_OWORD *)v14 + 6) = v18;
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v54, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        }
        ++v7;
        if (v10 == v4)
          goto LABEL_30;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)&v45, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
LABEL_18:
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      goto LABEL_19;
    }
  }
  v6 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_30:
  swift_bridgeObjectRelease_n();
  v26 = *((_QWORD *)v6 + 2);
  if (v26)
  {
    v27 = (uint64_t)(v6 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v27, (uint64_t)&v45);
      v28 = (void (*)(__int128 *))*((_QWORD *)&v45 + 1);
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v45 + 1));
      outlined destroy of DragContext(&v45);
      if (v28)
      {
        LOBYTE(v54) = 0;
        v28(&v54);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v28);
      }
      v27 += 112;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v6;
  *(_QWORD *)&v47 = partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:);
  *((_QWORD *)&v47 + 1) = v29;
  *(_QWORD *)&v45 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v45 + 1) = 1107296256;
  *(_QWORD *)&v46 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  *((_QWORD *)&v46 + 1) = &block_descriptor_50;
  v30 = _Block_copy(&v45);
  swift_release();
  objc_msgSend(a1, sel_addCompletion_, v30);
  _Block_release(v30);
}

void specialized DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v7[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v7[4] = partial apply for closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:);
  v7[5] = v4;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v7[3] = &block_descriptor_44;
  v5 = _Block_copy(v7);
  v6 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v5);
  _Block_release(v5);
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:sessionWillBegin:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  unsigned __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  Class isa;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *);
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  unsigned __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  unsigned __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for UIDragItem();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v46 = v2;
  if (v2 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      v4 = (char *)MEMORY[0x1E0DEE9D8];
      v5 = 4;
      v44 = v3;
      v45 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        if ((v46 & 0xC000000000000001) != 0)
          v6 = (id)MEMORY[0x18D75E3BC](v5 - 4, v46);
        else
          v6 = *(id *)(v46 + 8 * v5);
        v7 = v6;
        v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_29;
        }
        if (objc_msgSend(v6, sel_localObject))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v55, 0, sizeof(v55));
        }
        outlined init with take of Image.Resolved?((uint64_t)v55, (uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for Any?, v45);
        if (!*((_QWORD *)&v48 + 1))
          break;
        type metadata accessor for DragSourceContext();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_18;
        v9 = *(_QWORD *)(v54 + 24);
        swift_retain();
        swift_release();
        swift_beginAccess();
        outlined init with copy of SwiftUIAnySortComparator?(v9 + 152, (uint64_t)&v47, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        if (*((_QWORD *)&v53 + 1))
        {
          v60 = v51;
          v61 = v52;
          v62 = v53;
          v56 = v47;
          v57 = v48;
          v58 = v49;
          v59 = v50;
          swift_release();
        }
        else
        {
          v43 = v4;
          outlined destroy of AccessibilityTableContext?((uint64_t)&v47, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_beginAccess();
          result = outlined init with copy of SwiftUIAnySortComparator?(v9 + 32, (uint64_t)&v47, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
          if (!*((_QWORD *)&v53 + 1))
          {
            __break(1u);
            return result;
          }
          MEMORY[0x1E0C80A78](result, v11);
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [DraggingItem], (uint64_t)&type metadata for DraggingItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          static Update.dispatchImmediately<A>(_:)();
          v42 = *(_QWORD *)&v55[0];
          v41 = v47;
          v12 = *((_QWORD *)&v48 + 1);
          v37 = v48;
          v38 = *((_QWORD *)&v47 + 1);
          v13 = *((_QWORD *)&v49 + 1);
          v14 = v49;
          v35 = *((_QWORD *)&v48 + 1);
          v36 = *((_QWORD *)&v49 + 1);
          v15 = *((_QWORD *)&v50 + 1);
          v39 = v50;
          v40 = v51;
          outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v51 + 8, (uint64_t)&v60 + 8, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
          LOBYTE(v56) = v41;
          *((_QWORD *)&v56 + 1) = v38;
          *(_QWORD *)&v57 = v37;
          *((_QWORD *)&v57 + 1) = v12;
          v58 = __PAIR128__(v13, v14);
          *(_QWORD *)&v59 = v39;
          *((_QWORD *)&v59 + 1) = v15;
          *(_QWORD *)&v60 = v40;
          *((_QWORD *)&v62 + 1) = v42;
          outlined copy of AppIntentExecutor?(v38);
          outlined copy of AppIntentExecutor?(v35);
          outlined copy of AppIntentExecutor?(v36);
          outlined copy of AppIntentExecutor?(v15);
          outlined destroy of _DraggingModifier(&v47);
          outlined init with copy of DragContext((uint64_t)&v56, (uint64_t)&v47);
          swift_beginAccess();
          outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v47, v9 + 152, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
          swift_endAccess();
          swift_release();
          v4 = v43;
        }
        v3 = v44;
LABEL_22:

        if (*((_QWORD *)&v62 + 1))
        {
          v51 = v60;
          v52 = v61;
          v53 = v62;
          v47 = v56;
          v48 = v57;
          v49 = v58;
          v50 = v59;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
          v17 = *((_QWORD *)v4 + 2);
          v16 = *((_QWORD *)v4 + 3);
          if (v17 >= v16 >> 1)
            v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v4);
          *((_QWORD *)v4 + 2) = v17 + 1;
          v18 = &v4[112 * v17];
          v19 = v47;
          v20 = v49;
          *((_OWORD *)v18 + 3) = v48;
          *((_OWORD *)v18 + 4) = v20;
          *((_OWORD *)v18 + 2) = v19;
          v21 = v50;
          v22 = v51;
          v23 = v53;
          *((_OWORD *)v18 + 7) = v52;
          *((_OWORD *)v18 + 8) = v23;
          *((_OWORD *)v18 + 5) = v21;
          *((_OWORD *)v18 + 6) = v22;
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v56, &lazy cache variable for type metadata for DragContext?, (uint64_t)&type metadata for DragContext);
        }
        ++v5;
        if (v8 == v3)
          goto LABEL_31;
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
LABEL_18:
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      goto LABEL_22;
    }
  }
  v4 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_31:
  swift_bridgeObjectRelease_n();
  specialized Sequence.compactMap<A>(_:)((uint64_t)v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setLocalContext_, isa);

  v25 = *((_QWORD *)v4 + 2);
  if (v25)
  {
    v26 = (uint64_t)(v4 + 32);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DragContext(v26, (uint64_t)&v47);
      v27 = (void (*)(_QWORD *))*((_QWORD *)&v48 + 1);
      outlined copy of AppIntentExecutor?(*((uint64_t *)&v48 + 1));
      v28 = outlined destroy of DragContext(&v47);
      if (v27)
      {
        v27(v28);
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v27);
      }
      v26 += 112;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  v29 = specialized Sequence.compactMap<A>(_:)((uint64_t)v4);
  swift_bridgeObjectRelease();
  if (!v29[2])
    return swift_bridgeObjectRelease();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  v31 = (uint64_t (**)())(v33 + direct field offset for DragAndDropBridge.onSessionEnded);
  v32 = *(_QWORD *)(v33 + direct field offset for DragAndDropBridge.onSessionEnded);
  *v31 = partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:);
  v31[1] = (uint64_t (*)())v30;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
}

id specialized DragAndDropBridge._dragInteraction(_:sessionPropertiesForSession:)(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  int v17;
  id v18;
  void *v20;
  uint64_t v21;
  _OWORD v22[2];
  _BYTE v23[24];
  uint64_t v24;

  v1 = objc_msgSend(a1, sel_items);
  type metadata accessor for UIDragItem();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
    {
LABEL_3:
      v4 = v2 & 0xC000000000000001;
      v5 = 4;
      v6 = &selRef_setSensitive_;
      v7 = MEMORY[0x1E0DEE9B8];
      v8 = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        v9 = v5 - 4;
        if (v4)
        {
          v10 = (id)MEMORY[0x18D75E3BC](v5 - 4, v2);
          v11 = v5 - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_20;
        }
        else
        {
          v10 = *(id *)(v2 + 8 * v5);
          v11 = v5 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        if (objc_msgSend(v10, v6[244], v10))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v22, 0, sizeof(v22));
        }
        outlined init with take of Image.Resolved?((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v8);
        if (v24)
        {
          type metadata accessor for DragSourceContext();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v12 = v2;
            v13 = v4;
            v14 = v3;
            v15 = v7;
            v16 = v6;
            v17 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 16) + 308);
            if (v17 != 2)
            {
              swift_bridgeObjectRelease();
              v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC4108]), sel_init);
              objc_msgSend(v18, sel_set_supportsSystemDrag_, v17 & 1);

              swift_release();
              return v18;
            }
            swift_release();

            v6 = v16;
            v7 = v15;
            v3 = v14;
            v4 = v13;
            v2 = v12;
          }
          else
          {

          }
        }
        else
        {

          outlined destroy of AccessibilityTableContext?((uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for Any?, v7 + 8);
        }
        ++v5;
      }
      while (v11 != v3);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DragAndDropBridge.dragInteraction(_:session:didEndWith:)()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(v0 + direct field offset for DragAndDropBridge.onSessionEnded);
  v2 = *(void (**)(uint64_t))(v0 + direct field offset for DragAndDropBridge.onSessionEnded);
  if (v2)
  {
    v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
    v4 = *v1;
  }
  else
  {
    v4 = 0;
  }
  *v1 = 0;
  v1[1] = 0;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

void specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 aBlock;
  __int128 v32;
  id (*v33)();
  uint64_t v34;
  _BYTE v35[80];
  _QWORD v36[5];
  uint64_t *v37;
  void *v38;
  __int128 v39;
  char v40;

  v2 = v1;
  v4 = (uint64_t *)DragAndDropBridge.dropResponder(from:)(a1);
  v6 = v5;
  v7 = v1 + direct field offset for DragAndDropBridge.activeDrop;
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v7, (uint64_t)&aBlock, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  if (aBlock == __PAIR128__(1, 0))
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&aBlock, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    goto LABEL_24;
  }
  outlined init with take of DropDestination((uint64_t)&aBlock, (uint64_t)v35);
  if ((v35[72] & 1) != 0)
    goto LABEL_23;
  v8 = objc_msgSend(a1, sel_items);
  type metadata accessor for UIDragItem();
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    outlined destroy of DropDestination((uint64_t)v35);
    goto LABEL_24;
  }
LABEL_6:
  if ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (uint64_t *)MEMORY[0x18D75E3BC](0, v9);
  }
  else
  {
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v10 = (uint64_t *)*(id *)(v9 + 32);
  }
  v11 = v10;
  swift_bridgeObjectRelease();
  if (!v4
    || (v37 = v4,
        v38 = (void *)v6,
        type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider(),
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for CustomDropPreviewProvider),
        swift_retain(),
        (swift_dynamicCast() & 1) == 0))
  {
    v33 = 0;
    aBlock = 0u;
    v32 = 0u;
    goto LABEL_15;
  }
  if (!*((_QWORD *)&v32 + 1))
  {
LABEL_15:

    outlined destroy of DropDestination((uint64_t)v35);
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for CustomDropPreviewProvider?, &lazy cache variable for type metadata for CustomDropPreviewProvider);
    goto LABEL_24;
  }
  outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v28);
  v12 = v29;
  v13 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  v14 = objc_msgSend(v11, sel_itemProvider);
  v15 = objc_msgSend(v14, sel_registeredContentTypes);

  type metadata accessor for UTType();
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&aBlock = 0;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v13 + 8))(v16, &aBlock, v12, v13);
  swift_bridgeObjectRelease();
  v17 = *(void (**)(_QWORD *__return_ptr, uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder
                                                             + *v4
                                                             + 72);
  v18 = swift_retain();
  v17(v36, v18);
  swift_release();
  outlined init with take of Image.Resolved?((uint64_t)v36, (uint64_t)&v37, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
  v19 = v37;
  if (v37)
  {
    v20 = v38;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v20;
    *(_OWORD *)(v21 + 32) = v39;
    *(_BYTE *)(v21 + 48) = v40;
    v33 = partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:sessionDidUpdate:);
    v34 = v21;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v32 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
    *((_QWORD *)&v32 + 1) = &block_descriptor_29;
    v22 = _Block_copy(&aBlock);
    v23 = v19;
    v24 = v20;
    swift_release();
    objc_msgSend(v11, sel_setPreviewProvider_, v22);

    _Block_release(v22);
    v11 = v23;
  }
  else
  {
    objc_msgSend(v11, sel_setPreviewProvider_, 0);
  }

  outlined destroy of DropDestination((uint64_t)v35);
  if (*(_QWORD *)v7 || *(_QWORD *)(v7 + 8) != 1)
    *(_BYTE *)(v7 + 72) = 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
LABEL_24:
  v26 = MEMORY[0x18D760234](v2 + direct field offset for DragAndDropBridge.host);
  if (v26)
  {
    v27 = (void *)v26;
    swift_beginAccess();
    specialized static UIDropProposal.fromActiveDrop(_:session:responder:host:)((_QWORD *)v7, a1, v4, v6, v27);
    swift_endAccess();

    swift_release();
    return;
  }
LABEL_28:
  __break(1u);
}

void specialized DragAndDropBridge.dropInteraction(_:sessionDidExit:)(void *a1)
{
  id v1;

  specialized DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)(a1);

}

uint64_t specialized DragAndDropBridge.dropInteraction(_:sessionDidEnd:)()
{
  uint64_t v0;
  _QWORD *v1;
  BOOL v2;
  _QWORD *Strong;
  _QWORD *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];

  v1 = (_QWORD *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  swift_beginAccess();
  if (*v1)
    v2 = 0;
  else
    v2 = v1[1] == 1;
  if (v2)
    goto LABEL_14;
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_14;
  v4 = Strong;
  (*(void (**)(__int128 *__return_ptr, _QWORD))(v1[1] + 8))(&v12, *Strong);
  if (!v13)
  {
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    goto LABEL_13;
  }
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    goto LABEL_13;
  }
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_13:
    swift_release();
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    goto LABEL_14;
  }
  outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)&v18);
  result = MEMORY[0x18D760234](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    v6 = (void *)result;
    v13 = &type metadata for DropInfoAdaptor;
    v14 = &protocol witness table for DropInfoAdaptor;
    v7 = swift_allocObject();
    v8 = (_QWORD *)(v7 + 16);
    *(_QWORD *)&v12 = v7;
    swift_retain();
    v9 = (void *)swift_unknownObjectRetain();
    DropInfoAdaptor.init(_:host:responder:)(v9, v6, v4, v8);
    outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)&v15);
    v10 = *((_QWORD *)&v19 + 1);
    v11 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 32))(&v15, v10, v11);
    swift_release();
    outlined destroy of DropInfo((uint64_t)&v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
LABEL_14:
    v18 = xmmword_187BF9840;
    v19 = 0u;
    v20 = 0u;
    memset(v21, 0, sizeof(v21));
    swift_beginAccess();
    outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v18, (uint64_t)v1, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t specialized DragAndDropBridge.dropInteraction(_:performDrop:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  _QWORD v16[4];

  v1 = (_QWORD *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  result = swift_beginAccess();
  if (*v1)
    v3 = 0;
  else
    v3 = v1[1] == 1;
  if (!v3)
  {
    result = swift_weakLoadStrong();
    if (result)
    {
      v4 = (_QWORD *)result;
      v5 = v1[1];
      result = MEMORY[0x18D760234](v0 + direct field offset for DragAndDropBridge.host);
      if (result)
      {
        v6 = (void *)result;
        swift_retain();
        v7 = (void *)swift_unknownObjectRetain();
        DropInfoAdaptor.init(_:host:responder:)(v7, v6, v4, v16);
        if (*v1)
          v8 = 0;
        else
          v8 = v1[1] == 1;
        if (v8)
        {
          v9 = 0;
        }
        else
        {
          v9 = v1[8];
          swift_retain();
        }
        swift_release();
        v16[1] = v9;
        v15[3] = &type metadata for DropInfoAdaptor;
        v15[4] = &protocol witness table for DropInfoAdaptor;
        v15[0] = swift_allocObject();
        outlined init with copy of DropInfoAdaptor((uint64_t)v16, v15[0] + 16);
        (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(v5 + 8))(v12, *v4, v5);
        v10 = v13;
        if (v13)
        {
          v11 = v14;
          __swift_project_boxed_opaque_existential_1(v12, v13);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 16))(v15, v10, v11);
          swift_release();
          outlined destroy of DropInfo((uint64_t)v15);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        }
        else
        {
          swift_release();
          outlined destroy of DropInfo((uint64_t)v15);
          outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        }
        return outlined destroy of DropInfoAdaptor((uint64_t)v16);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void specialized DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:);
  v9[5] = v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  v9[3] = &block_descriptor_21_0;
  v6 = _Block_copy(v9);
  v7 = v2;
  v8 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v6);
  _Block_release(v6);
}

_QWORD *specialized DragAndDropBridge.dropInteraction(_:concludeDrop:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *result;
  BOOL v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  ValueMetadata *v13;
  _UNKNOWN **v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = (_QWORD *)(v0 + direct field offset for DragAndDropBridge.activeDrop);
  result = (_QWORD *)swift_beginAccess();
  if (*v2)
    v4 = 0;
  else
    v4 = v2[1] == 1;
  if (!v4)
  {
    result = (_QWORD *)swift_weakLoadStrong();
    if (result)
    {
      v5 = result;
      (*(void (**)(__int128 *__return_ptr, _QWORD))(v2[1] + 8))(&v12, *result);
      if (v13)
      {
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for DropDelegate);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (*((_QWORD *)&v16 + 1))
          {
            outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)v18);
            result = (_QWORD *)MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.host);
            if (result)
            {
              v6 = result;
              v13 = &type metadata for DropInfoAdaptor;
              v14 = &protocol witness table for DropInfoAdaptor;
              v7 = swift_allocObject();
              v8 = (_QWORD *)(v7 + 16);
              *(_QWORD *)&v12 = v7;
              swift_retain();
              v9 = (void *)swift_unknownObjectRetain();
              DropInfoAdaptor.init(_:host:responder:)(v9, v6, v5, v8);
              outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)&v15);
              v10 = v19;
              v11 = v20;
              __swift_project_boxed_opaque_existential_1(v18, v19);
              (*(void (**)(__int128 *, uint64_t, uint64_t))(v11 + 24))(&v15, v10, v11);
              swift_release();
              outlined destroy of DropInfo((uint64_t)&v15);
              return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
            }
            else
            {
              __break(1u);
            }
            return result;
          }
        }
        else
        {
          v17 = 0;
          v15 = 0u;
          v16 = 0u;
        }
      }
      else
      {
        outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
        v15 = 0u;
        v16 = 0u;
        v17 = 0;
      }
      swift_release();
      return (_QWORD *)outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v15, &lazy cache variable for type metadata for DropDelegate_Private?, (unint64_t *)&lazy cache variable for type metadata for DropDelegate_Private);
    }
  }
  return result;
}

void specialized DragAndDropBridge.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  BOOL v6;
  uint64_t Strong;
  uint64_t v8;
  __int128 v9;
  id v10;
  id v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int128 *, _QWORD, _QWORD);
  id v14;
  void (*v15)(_QWORD *__return_ptr, uint64_t);
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  char v24;
  double *v25;
  double v26;
  double v27;
  int v28;
  uint64_t v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void (*v41)(__int128 *__return_ptr, uint64_t);
  uint64_t v42;
  id v43;
  void (*v44)(__int128 *__return_ptr, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  char v50;
  double *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  double v59;
  double v60;
  id v61;
  id v62;
  id v63;
  id v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  int v71;
  __int128 v72[2];
  uint64_t v73;
  double v74;
  double v75;
  char v76;
  _BYTE v77[8];
  uint64_t v78;
  _QWORD v79[5];
  _OWORD v80[2];
  char v81;
  __int128 v82;
  __int128 v83;
  char v84;
  _BYTE v85[40];

  v5 = v2 + direct field offset for DragAndDropBridge.activeDrop;
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v5, (uint64_t)&v65, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
  if ((_QWORD)v65)
    v6 = 0;
  else
    v6 = *((_QWORD *)&v65 + 1) == 1;
  if (v6)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)&v65, &lazy cache variable for type metadata for DropDestination?, (uint64_t)&type metadata for DropDestination);
LABEL_11:
    v18 = a2;
    return;
  }
  outlined init with take of DropDestination((uint64_t)&v65, (uint64_t)v77);
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    outlined destroy of DropDestination((uint64_t)v77);
    goto LABEL_11;
  }
  v8 = Strong;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 1;
  type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for CustomDropPreviewProvider);
  swift_retain();
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of OptionalBinaryInteger(v72, (uint64_t)&v65);
    v9 = v67;
    __swift_project_boxed_opaque_existential_1(&v65, v67);
    v10 = objc_msgSend(a1, sel_itemProvider);
    v11 = objc_msgSend(v10, sel_registeredContentTypes);

    type metadata accessor for UTType();
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v72[0] = a2;
    v13 = *(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*((_QWORD *)&v9 + 1) + 8);
    v14 = a2;
    v13(v12, v72, v9, *((_QWORD *)&v9 + 1));

    swift_bridgeObjectRelease();
    v15 = *(void (**)(_QWORD *__return_ptr, uint64_t))(class metadata base offset for DragDropDefaultPreviewResponder
                                                               + *(_QWORD *)v8
                                                               + 72);
    v16 = swift_retain();
    v15(v79, v16);
    swift_release();
    outlined init with take of Image.Resolved?((uint64_t)v79, (uint64_t)v80, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
    if (!*(_QWORD *)&v80[0])
    {
      outlined destroy of DropDestination((uint64_t)v77);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
      return;
    }
    v82 = v80[0];
    v83 = v80[1];
    v84 = v81;
    outlined init with take of CGRect?((uint64_t)&v83, (uint64_t)v85, (unint64_t *)&lazy cache variable for type metadata for CGPoint?, type metadata accessor for CGPoint);
    outlined init with take of CGRect?((uint64_t)v85, (uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for CGPoint?, type metadata accessor for CGPoint);
    v17 = (void *)v82;

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
  }
  else
  {
    v73 = 0;
    memset(v72, 0, sizeof(v72));
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for CustomDropPreviewProvider?, &lazy cache variable for type metadata for CustomDropPreviewProvider);
    v19 = v78;
    swift_beginAccess();
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v20 + 16);
    swift_retain();
    if (v21)
    {
      v22 = a1;
      v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22);
      if ((v24 & 1) != 0)
      {
        v25 = (double *)(*(_QWORD *)(v20 + 56) + 16 * v23);
        v26 = *v25;
        v27 = v25[1];
        swift_endAccess();
        swift_release();

        v17 = 0;
        goto LABEL_20;
      }

    }
    swift_endAccess();
    swift_release();
    v17 = 0;
  }
  if (v76 != 1)
    goto LABEL_21;
  swift_retain();
  AGGraphClearUpdate();
  v28 = *(_DWORD *)(v8 + 88);
  v29 = *(_QWORD *)(v8 + 96);
  v30 = *(_DWORD *)(v8 + 160);
  *(_QWORD *)&v65 = *(_QWORD *)(v8 + 80);
  DWORD2(v65) = v28;
  v66 = v29;
  v67 = *(_OWORD *)(v8 + 104);
  v68 = *(_OWORD *)(v8 + 120);
  v69 = *(_OWORD *)(v8 + 136);
  v70 = *(_QWORD *)(v8 + 152);
  v71 = v30;
  _ViewInputs.position.getter();
  v65 = *(_OWORD *)AGGraphGetValue();
  v31 = MEMORY[0x18D755E9C]();
  v33 = v32;
  AGGraphSetUpdate();
  v34 = *(double *)(v8 + 240);
  v35 = v31 - *(double *)(v8 + 232);
  swift_release();
  v26 = v35 + *(double *)(v8 + 216) * 0.5;
  v27 = v33 - v34 + *(double *)(v8 + 224) * 0.5;
LABEL_20:
  v74 = v26;
  v75 = v27;
  v76 = 0;
LABEL_21:
  type metadata accessor for HostingScrollViewResponder();
  swift_retain();
  ResponderNode.firstAncestor<A>(ofType:)();
  swift_release();
  if ((_QWORD)v65)
  {
    v36 = (void *)MEMORY[0x18D760234](v65 + 48);
    if (v36)
    {
      v37 = v36;
      v38 = objc_msgSend(v36, sel_superview);

      swift_release();
      if (v38)
      {
        v39 = objc_msgSend(v38, sel_window);
        if (v39)
        {

          v40 = v38;
          static CoordinateSpace.scrollViewContent.getter();
          v41 = *(void (**)(__int128 *__return_ptr, uint64_t))(class metadata base offset for UIViewSnapshotResponder
                                                                       + *(_QWORD *)v8
                                                                       + 80);
          v42 = swift_retain();
          v41(v72, v42);
          swift_release();
          type metadata accessor for CGPoint(0);
          protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint();

          goto LABEL_29;
        }

      }
    }
    else
    {
      swift_release();
    }
  }
  v43 = objc_msgSend(a2, sel_target);
  v40 = objc_msgSend(v43, sel_container);

  hostingViewCoordinateSpace.getter();
  LOBYTE(v68) = 1;
  v44 = *(void (**)(__int128 *__return_ptr, uint64_t))(class metadata base offset for UIViewSnapshotResponder
                                                               + *(_QWORD *)v8
                                                               + 80);
  v45 = swift_retain();
  v44(v72, v45);
  swift_release();
  type metadata accessor for CGPoint(0);
  protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint();
LABEL_29:
  swift_release();
  outlined destroy of CoordinateSpace((uint64_t)&v65);
  v46 = v78;
  swift_beginAccess();
  v47 = *(_QWORD *)(v46 + 24);
  if (*(_QWORD *)(v47 + 16))
  {
    v48 = a1;
    swift_retain();
    v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v48);
    if ((v50 & 1) != 0)
    {
      v51 = (double *)(*(_QWORD *)(v47 + 56) + 48 * v49);
      v52 = *v51;
      v53 = *((_QWORD *)v51 + 1);
      v55 = *((_QWORD *)v51 + 2);
      v54 = v51[3];
      v56 = *((_QWORD *)v51 + 4);
      v57 = *((_QWORD *)v51 + 5);

      v58 = 0;
      goto LABEL_35;
    }

  }
  else
  {
    swift_retain();
  }
  v58 = 1;
  v52 = 0.0;
  v53 = 0;
  v55 = 0;
  v54 = 0.0;
  v56 = 0;
  v57 = 0;
LABEL_35:
  swift_endAccess();
  swift_release();
  if ((v76 & 1) != 0)
  {

    __break(1u);
  }
  else
  {
    v60 = v74;
    v59 = v75;
    if ((v58 & 1) != 0)
    {
      v54 = 1.0;
      v57 = 0;
      v56 = 0;
      v55 = 0;
      v53 = 0;
      v52 = 1.0;
    }
    v61 = objc_allocWithZone(MEMORY[0x1E0DC3770]);
    *(double *)&v65 = v52;
    *((_QWORD *)&v65 + 1) = v53;
    v66 = v55;
    *(double *)&v67 = v54;
    *((_QWORD *)&v67 + 1) = v56;
    *(_QWORD *)&v68 = v57;
    v62 = objc_msgSend(v61, sel_initWithContainer_center_transform_, v40, &v65, v60, v59);
    if (v17)
    {
      v63 = v17;
      v64 = objc_msgSend(a2, sel_parameters);
      objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_target_, v63, v64, v62);

      swift_release();
    }
    else
    {
      objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v62);

      swift_release();
    }
    outlined destroy of DropDestination((uint64_t)v77);
  }
}

uint64_t specialized DragAndDropBridge.shouldAllow(_:with:)(void *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  void (*v10)(char *);
  id v11;
  BOOL v12;
  char v13;
  char v15;

  v3 = DragAndDropBridge.springLoadedResponder(from:)(a1);
  v4 = v3;
  v5 = direct field offset for DragAndDropBridge.activeSpringLoadedResponder;
  v6 = *(_QWORD **)(v1 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (!v3)
  {
    if (!v6)
      return 0;
LABEL_9:
    v8 = (void (*)(uint64_t))v6[31];
    swift_retain();
    v9 = swift_retain();
    v8(v9);
    swift_release();
    swift_release();
    if (!v4)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (v6)
    v7 = v3 == v6;
  else
    v7 = 0;
  if (v7)
    goto LABEL_18;
  if (v6)
    goto LABEL_9;
LABEL_10:
  v10 = (void (*)(char *))v4[29];
  swift_retain();
  swift_retain();
  v11 = objc_msgSend(a1, sel_state);
  if (v11)
    v12 = v11 == (id)3;
  else
    v12 = 1;
  v13 = !v12;
  v15 = v13;
  v10(&v15);
  swift_release();
  swift_release();
LABEL_17:
  *(_QWORD *)(v1 + v5) = v4;
  swift_retain();
  swift_release();
  if (v4)
  {
LABEL_18:
    swift_release();
    return 1;
  }
  return 0;
}

char *specialized DragAndDropBridge.springLoadedInteraction(_:highlightDidChange:)(char *result)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(char *);
  char v4;

  v2 = *(_QWORD *)(v1 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v2)
  {
    v3 = *(void (**)(char *))(v2 + 232);
    v4 = *result;
    swift_retain();
    v3(&v4);
    return (char *)swift_release();
  }
  return result;
}

void specialized DragAndDropBridge.interactionDidFinish(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  v1 = direct field offset for DragAndDropBridge.activeSpringLoadedResponder;
  v2 = *(_QWORD *)(v0 + direct field offset for DragAndDropBridge.activeSpringLoadedResponder);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(v2 + 248);
    swift_retain();
    v4 = swift_retain();
    v3(v4);
    swift_release();
    swift_release();
    *(_QWORD *)(v0 + v1) = 0;
    swift_release();
  }
}

void specialized DragAndDropBridge.SpringLoadedEffect.updateHighlightState(_:interaction:)(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *v4;
  char v5;

  v2 = *a1;
  if (*(unsigned __int8 *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) != v2)
  {
    *(_BYTE *)(v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.previousHighlightState) = v2;
    v3 = MEMORY[0x18D760234](v1 + direct field offset for DragAndDropBridge.SpringLoadedEffect.bridge);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = v2;
      specialized DragAndDropBridge.springLoadedInteraction(_:highlightDidChange:)(&v5);

    }
  }
}

void specialized DragAndDropBridge.SpringLoadedEffect.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void specialized DragAndDropBridge.SpringLoadedBehavior.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_187435900()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187435924()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(void *a1)
{
  uint64_t v1;

  closure #1 in DragAndDropBridge.SpringLoadedEffect.interaction(_:didChangeWith:)(a1, *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(class metadata base offset for DragDropDefaultPreviewResponder
                                               + *v1
                                               + 72))(v4);
  return outlined init with take of Image.Resolved?((uint64_t)v4, a1, &lazy cache variable for type metadata for UIKitDragDropPreviewAdaptor?, (uint64_t)&type metadata for UIKitDragDropPreviewAdaptor);
}

id partial apply for closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in DragAndDropBridge.dragItems(_:_:)(*(void (**)(_QWORD *__return_ptr))(v0 + 16));
}

uint64_t outlined init with take of DropDestination(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  swift_weakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a1 + 16);
  v5 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
  return a2;
}

uint64_t outlined destroy of DropDestination(uint64_t a1)
{
  destroy for DropDestination(a1);
  return a1;
}

unint64_t type metadata accessor for DragDropDefaultPreviewResponder & DropPayloadProvider()
{
  unint64_t result;

  result = lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider;
  if (!lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider)
  {
    type metadata accessor for DragDropDefaultPreviewResponder();
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DragDropDefaultPreviewResponder & DropPayloadProvider);
  }
  return result;
}

uint64_t sub_187435AA4()
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187435AD0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DragAndDropBridge.dropInteraction(_:item:willAnimateDropWith:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with copy of DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  swift_retain();
  return a2;
}

uint64_t outlined destroy of DropInfoAdaptor(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return a1;
}

uint64_t sub_187435B74()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in DragAndDropBridge.dropInteraction(_:sessionDidUpdate:)()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3760]), sel_initWithView_parameters_, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined init with take of DropDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, (unint64_t *)&lazy cache variable for type metadata for DropDelegate?, &lazy cache variable for type metadata for DropDelegate);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187435C34()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:sessionWillBegin:)()
{
  uint64_t v0;

  return specialized closure #1 in PlatformItemList.containerSelectionBehavior.getter(*(_QWORD *)(v0 + 16));
}

uint64_t sub_187435C60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187435C84()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DragAndDropBridge.dragInteraction(_:item:willAnimateCancelWith:)(a1, *(id *)(v1 + 16));
}

uint64_t partial apply for closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in DragAndDropBridge.dragInteraction(_:willAnimateLiftWith:session:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type UTType and conformance UTType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UTType();
    result = MEMORY[0x18D75FFDC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187435CF8()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:)(a1, a2, *(_QWORD *)(v2 + 32));
}

uint64_t destroy for DropInfoAdaptor()
{
  swift_unknownObjectWeakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DropInfoAdaptor(_QWORD *a1, _QWORD *a2)
{
  swift_unknownObjectWeakCopyAssign();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for DropInfoAdaptor(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  result = a2[1];
  v3[1] = result;
  return result;
}

uint64_t assignWithTake for DropInfoAdaptor(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for DropInfoAdaptor()
{
  return &type metadata for DropInfoAdaptor;
}

uint64_t ButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = 2;
  *(_QWORD *)(a2 + 40) = KeyPath;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v8;
  *(_BYTE *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 65) = 256;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance ButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ButtonMenuStyle.makeBody(configuration:)(a1, a2);
}

uint64_t ButtonMenuStyle.Automatic.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 2;
  *(_QWORD *)(a2 + 48) = KeyPath;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v9;
  *(_BYTE *)(a2 + 88) = 0;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ButtonMenuStyle()
{
  return &type metadata for ButtonMenuStyle;
}

uint64_t sub_187436018()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>;
  if (!lazy cache variable for type metadata for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>();
    type metadata accessor for Menu();
  }
  return result;
}

void type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    v2 = v1;
    v3[0] = &protocol witness table for MenuStyleConfiguration.Content;
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<_PlainButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle, (uint64_t)&type metadata for _PlainButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _PlainButtonMenuStyle, &type metadata for _PlainButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlainButtonMenuStyle and conformance _PlainButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStylePredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<PlainButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BorderlessButtonMenuStyle, &type metadata for BorderlessButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStylePredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderlessButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _BorderedButtonMenuStyle, &type metadata for _BorderedButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStylePredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>;
  if (!lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStylePredicate<BorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle, (uint64_t)&type metadata for BorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStylePredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStylePredicate<BorderedProminentButtonStyle> and conformance ButtonStylePredicate<A>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<CustomButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle, (uint64_t)&type metadata for CustomButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyle, &type metadata for CustomButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomButtonMenuStyle and conformance CustomButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonMenuStyle.Automatic()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187436C2C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, ModifiedContent<MenuStyleConfiguration.Content, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>>, StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderlessButtonStyle>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<ButtonStylePredicate<BorderedProminentButtonStyle>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<_SemanticFeature_v5, MenuStyleModifier<CustomButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ButtonMenuStyle.Automatic>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle, (uint64_t)&type metadata for ConditionallyBorderedMenuButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, MenuStyleModifier<ConditionallyBorderedMenuButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<_BorderedButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BorderedButtonMenuStyle and conformance _BorderedButtonMenuStyle, (uint64_t)&type metadata for _BorderedButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE5A68]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>)
  {
    v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle, (uint64_t)&type metadata for BorderlessButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE6398]);
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>)
  {
    v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>);
  }
}

unint64_t lazy protocol witness table accessor for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle;
  if (!lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ConditionallyBorderedMenuButtonStyle, &type metadata for ConditionallyBorderedMenuButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConditionallyBorderedMenuButtonStyle and conformance ConditionallyBorderedMenuButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, MenuStyleModifier<BorderlessButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>>(255);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, MenuStyleModifier<_BorderedButtonMenuStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<PlainButtonStyle>, MenuStyleModifier<_PlainButtonMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    v5[0] = &protocol witness table for MenuStyleModifier<A>;
    v5[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v4, v5);
    atomic_store(result, a1);
  }
  return result;
}

void @objc HostingScrollView.PlatformContainer.frame.setter(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7, SEL *a8)
{
  const char *v14;
  id v15;
  objc_super v16;

  v16.receiver = a1;
  v16.super_class = (Class)swift_getObjectType();
  v14 = *a7;
  v15 = v16.receiver;
  objc_msgSendSuper2(&v16, v14, a2, a3, a4, a5);
  HostingScrollView.PlatformContainer.frame.didset(a8);

}

id HostingScrollView.PlatformContainer._parentContainer.getter()
{
  void *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[3];
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType();
  if ((MEMORY[0x18D75A3D8]() & 1) == 0)
  {
    v22.receiver = v0;
    v22.super_class = ObjectType;
    return objc_msgSendSuper2(&v22, sel__parentGestureRecognizerContainer);
  }
  if (swift_weakLoadStrong())
    goto LABEL_3;
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v11 = Strong;
    v12 = Strong + 200;
    swift_beginAccess();
    v13 = MEMORY[0x18D760234](v12);
    v14 = *(_QWORD *)(v11 + 208);
    swift_release();
    if (v13)
    {
      v15 = swift_getObjectType();
      v16 = type metadata accessor for EventGraphHost();
      (*(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v16, v16, v15, v14);
      swift_unknownObjectRelease();
      if (v21[0])
      {
        v17 = v21[1];
        v18 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
        swift_unknownObjectRelease();
LABEL_3:
        swift_release();
      }
    }
  }
  v2 = swift_weakLoadStrong();
  if (!v2)
    return 0;
  v3 = v2;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      v4 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v4)
        break;
      type metadata accessor for UIViewResponder();
      v5 = swift_dynamicCastClass();
      if (v5)
      {
        v4 = MEMORY[0x18D760234](v5 + 48);
        if (v4)
          break;
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong())
        goto LABEL_13;
    }
    v6 = v4;
    swift_release();
  }
  else
  {
LABEL_13:
    swift_beginAccess();
    v6 = MEMORY[0x18D760234](v3 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(v3 + 24);
      v8 = swift_getObjectType();
      v9 = type metadata accessor for UIView();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v7 + 16))(&v20, v9, v9, v8, v7);
      swift_unknownObjectRelease();
      v6 = v20;
    }
  }
  swift_release();
  swift_release();
  return (id)v6;
}

uint64_t HostingScrollView.PlatformContainer.shouldEagerlyUpdateSafeArea.getter()
{
  uint64_t v0;
  char *v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);

  v1 = *(char **)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
  if ((objc_msgSend(v1, sel_isTracking) & 1) != 0
    || objc_msgSend(v1, sel_isDecelerating)
    || (objc_msgSend(v1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8];
  ObjectType = swift_getObjectType();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

double protocol witness for SafeAreaHelperDelegate._safeAreaInsets.getter in conformance HostingScrollView.PlatformContainer()
{
  uint64_t v0;

  return *(double *)(v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets);
}

void protocol witness for SafeAreaHelperDelegate._safeAreaInsets.setter in conformance HostingScrollView.PlatformContainer(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v5;

  v5 = (double *)(v4 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets);
  *v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
}

uint64_t protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance HostingScrollView.PlatformContainer()
{
  return swift_unknownObjectRetain();
}

id protocol witness for PlatformGroupFactory.platformGroupContainer(_:) in conformance HostingScrollView.PlatformContainer()
{
  _QWORD *v0;

  return objc_retain(*(id *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView)
                           + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host));
}

uint64_t protocol witness for PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:) in conformance HostingScrollView.PlatformContainer(uint64_t a1, uint64_t a2)
{
  return specialized HostingScrollView.PlatformContainer.renderPlatformGroup(_:in:size:renderer:)(a1, a2);
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance HostingScrollView.PlatformContainer()
{
  _QWORD *v0;

  return *(_QWORD *)(*(_QWORD *)(*v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView)
                   + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_viewType);
}

unint64_t lazy protocol witness table accessor for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer)
  {
    v1 = type metadata accessor for HostingScrollView.PlatformContainer();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingScrollView.PlatformContainer, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer)
  {
    v1 = type metadata accessor for HostingScrollView.PlatformContainer();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HostingScrollView.PlatformContainer, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer);
  }
  return result;
}

uint64_t specialized HostingScrollView.PlatformContainer.renderPlatformGroup(_:in:size:renderer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  objc_class *v4;
  objc_super v6;
  objc_super v7;
  uint64_t v8;
  _BYTE v9[40];

  v8 = a2;
  v3 = *(void **)(v2 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView);
  v4 = (objc_class *)type metadata accessor for HostingScrollView();
  v7.receiver = v3;
  v7.super_class = v4;
  swift_retain();
  objc_msgSendSuper2(&v7, sel_bounds);
  v6.receiver = v3;
  v6.super_class = v4;
  objc_msgSendSuper2(&v6, sel_bounds);
  GraphicsContext.translateBy(x:y:)();
  Path.init(_:)();
  GraphicsContext.clip(to:style:options:)();
  outlined release of Path((uint64_t)v9);
  DisplayList.GraphicsRenderer.render(list:in:)();
  return swift_release();
}

uint64_t closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

Swift::Void __swiftcall NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(Swift::Bool popReplacedRoots)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Bool v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = *v1;
  v6 = v1 + 1;
  v5 = v1[1];
  v8 = v1[2];
  v7 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v12 = v1[6];
  v11 = v1[7];
  if (v11 < 0)
  {
    if (popReplacedRoots)
    {
      outlined consume of NavigationColumnState.ColumnContent(v4, v5, v8, v7, v9, v10, v12, v11);
      v5 = 0;
      v8 = 0;
      v7 = 0;
      v9 = 0;
      v10 = 0;
      v12 = 0;
      v20 = 0;
      v19 = 0;
      v11 = 0x8000000000000000;
      v4 = 0xF000000000000007;
    }
    else
    {
      v20 = 0;
      v19 = 0;
      v11 = 0x8000000000000000;
    }
  }
  else
  {
    v22 = popReplacedRoots;
    v23 = v4;
    v24 = v5;
    *v2 = 0xF000000000000007;
    *v6 = 0u;
    v6[1] = 0u;
    v6[2] = 0u;
    v2[7] = 0x8000000000000000;
    v2[8] = 0;
    v2[9] = 0;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 88))();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v21 = v7;
      v14 = v8;
      v15 = v10;
      v16 = v9;
      v17 = v12;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 104))();
      swift_release();
      v11 = v18;
      v12 = v17;
      v9 = v16;
      v10 = v15;
      v8 = v14;
      v7 = v21;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 128))(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if (v22)
    {
      outlined consume of NavigationColumnState.ReplacedRoot?(v23, v24, v8, v7);
      v5 = 0;
      v8 = 0;
      v7 = 0;
      v9 = 0;
      v10 = 0;
      v12 = 0;
      v4 = 0xF000000000000007;
    }
    else
    {
      v4 = v23;
      v5 = v24;
    }
    v20 = MEMORY[0x1E0DEE9D8];
  }
  *v2 = v4;
  v2[1] = v5;
  v2[2] = v8;
  v2[3] = v7;
  v2[4] = v9;
  v2[5] = v10;
  v2[6] = v12;
  v2[7] = v11;
  v2[8] = v20;
  v2[9] = v19;
}

uint64_t NavigationColumnState.ColumnContent.presentView(_:from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2[7];
  if (v3 < 0)
    return 1;
  v4 = v2;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  v36 = *(_OWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 8);
  v8 = *v2;
  v33 = v2[2];
  v34 = v2[1];
  v31 = v2[4];
  v32 = v2[3];
  v30 = v2[5];
  v28 = *(_QWORD *)(a1 + 48);
  v29 = v2[6];
  v9 = v2[8];
  v10 = v2[9];
  *(_QWORD *)&v37 = v9;
  *((_QWORD *)&v37 + 1) = v10;
  *v2 = 0xF000000000000007;
  *(_OWORD *)(v2 + 1) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  v2[7] = 0x8000000000000000;
  v2[8] = 0;
  v2[9] = 0;
  v11 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 88);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v35 = v8;
  if (((uint64_t (*)(uint64_t))v11)(v12) > a2)
  {
    v13 = v11();
    result = swift_release();
    v15 = v13 - a2;
    if (!__OFSUB__(v13, a2))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 104))();
        swift_release();
        v3 = v16;
      }
      v25 = v15;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 128))(v15);
      specialized Collection<>.dismiss(from:)(0, v9, v10);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v9 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v37 = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)&v37 + 1) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_22;
  }
  v17 = *(_QWORD *)(v9 + 16);
  result = v11();
  if (__OFADD__(v17, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v17 + result <= a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    v25 = 1;
    goto LABEL_19;
  }
  v18 = v11();
  result = swift_release();
  v19 = __OFSUB__(a2, v18);
  v20 = a2 - v18;
  if (v19)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Collection<>.dismiss(from:)(v20, v9, v10);
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease_n();
  v21 = v17 - v20;
  if (__OFSUB__(v17, v20))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v21)
    goto LABEL_18;
  if (v21 < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v22 = *(_QWORD *)(v9 + 16);
  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v22, v20 - v17, 0, v9);
  if ((v23 & 1) != 0)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if (v22 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(result, v22);
  v25 = 1;
LABEL_19:
  v24 = *(_QWORD *)(v9 + 16);
  v38[0] = v6;
  v38[1] = v27;
  v38[2] = v7;
  v39 = v36;
  v40 = v26;
  v41 = v28;
  swift_retain();
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v7, v36);
  swift_retain();
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v24, v24, v38);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v7, v36);
  swift_release();
  *v4 = v35;
  v4[1] = v34;
  v4[2] = v33;
  v4[3] = v32;
  v4[4] = v31;
  v4[5] = v30;
  v4[6] = v29;
  v4[7] = v3;
  *((_OWORD *)v4 + 4) = v37;
  return v25;
}

unint64_t NavigationColumnState.ColumnContent.replaceViewDestinationView(_:identifier:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v3 = v2;
  v4 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v9 = *v2;
  v8 = v2[1];
  v10 = v2[2];
  v11 = v2[3];
  v12 = v2[4];
  v13 = v2[5];
  v15 = v3[6];
  v14 = v3[7];
  v16 = v3[8];
  v17 = v3[9];
  if (v14 < 0)
  {
    if ((~v9 & 0xF000000000000007) != 0)
    {
      if ((v9 & 0x8000000000000000) == 0)
        return 0;
      v61 = v8;
      v62 = v10;
      v63 = v11;
      v64 = v12;
      *(_QWORD *)&v58 = v4;
      *((_QWORD *)&v58 + 1) = v5;
      v59 = v7;
      v60 = v6;
      v30 = v8;
      v31 = v10;
      v32 = v11;
      v57 = v12;
      v33 = v14;
      outlined copy of NavigationColumnState.ColumnContent(v9, v8, v10, v11, v12, v13, v15, v14);
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v31, v32);
      swift_retain();
      if ((NavigationLinkSelectionIdentifier.matches(_:)(&v58) & 1) != 0)
      {
        outlined consume of NavigationColumnState.ColumnContent(v9, v30, v31, v32, v57, v13, v15, v33);
        swift_retain_n();
        swift_release();
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v31, v32);
        outlined consume of Text.LineStyle?(v31, v32);
        swift_release();
        swift_release_n();
        outlined consume of Text.LineStyle?(v31, v32);
        swift_release();
        *v3 = a1 | 0x8000000000000000;
        v3[1] = v30;
        v3[2] = v31;
        v3[3] = v32;
        v3[4] = v57;
        v3[5] = v13;
        v3[6] = v15;
        v3[7] = 0x8000000000000000;
        result = 1;
        v3[8] = 0;
        v3[9] = 0;
        return result;
      }
      swift_release();
      outlined consume of Text.LineStyle?(v31, v32);
      swift_release();
      v27 = v9;
      v8 = v30;
      v10 = v31;
      v11 = v32;
      v12 = v57;
      v28 = v13;
      v29 = v15;
      v14 = v33;
    }
    else
    {
      v27 = v9;
      v28 = v13;
      v29 = v3[6];
    }
LABEL_21:
    outlined consume of NavigationColumnState.ColumnContent(v27, v8, v10, v11, v12, v28, v29, v14);
    return 0;
  }
  v55 = v8;
  v56 = v12;
  v53 = v10;
  v54 = v11;
  v52 = v3[7];
  v49 = v6;
  if ((~v9 & 0xF000000000000007) == 0 || (v9 & 0x8000000000000000) == 0)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v9, v8, v10, v11);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_5;
LABEL_19:
    v27 = v9;
    v11 = v54;
    v8 = v55;
    v10 = v53;
    v12 = v56;
    v28 = v13;
    goto LABEL_20;
  }
  v61 = v8;
  v62 = v10;
  v63 = v11;
  v64 = v12;
  *(_QWORD *)&v58 = v4;
  *((_QWORD *)&v58 + 1) = v5;
  v43 = v5;
  v45 = v7;
  v59 = v7;
  v60 = v6;
  v41 = v17;
  v34 = v8;
  v35 = v10;
  v36 = v15;
  v37 = v11;
  v46 = v16;
  v38 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v9, v8, v10, v11, v12, v13, v36, v14);
  v39 = v37;
  v40 = v37;
  v15 = v36;
  outlined copy of NavigationColumnState.ReplacedRoot?(v9, v34, v35, v39);
  v17 = v41;
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v35, v40);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((NavigationLinkSelectionIdentifier.matches(_:)(&v58) & 1) != 0)
  {
    outlined consume of NavigationColumnState.ColumnContent(v9, v55, v35, v40, v56, v13, v36, v38);
    outlined consume of NavigationColumnState.ColumnContent(v9, v55, v35, v40, v56, v13, v36, v38);
    swift_retain_n();
    swift_release();
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v35, v40);
    outlined consume of Text.LineStyle?(v35, v40);
    swift_release();
    swift_release_n();
    outlined consume of Text.LineStyle?(v35, v40);
    swift_release();
    *v3 = a1 | 0x8000000000000000;
    v3[1] = v55;
    v3[2] = v35;
    v3[3] = v40;
    v3[4] = v56;
    v3[5] = v13;
    v3[6] = v36;
    v3[7] = v38;
    result = 1;
    v3[8] = v46;
    v3[9] = v41;
    return result;
  }
  swift_release();
  outlined consume of Text.LineStyle?(v35, v40);
  swift_release();
  swift_bridgeObjectRelease();
  v16 = v46;
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v9, v55, v35, v40);
  v5 = v43;
  v7 = v45;
  if (!*(_QWORD *)(v41 + 16))
    goto LABEL_19;
LABEL_5:
  v51 = v13;
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v5, v7);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5, v7, v49);
  if ((v19 & 1) == 0)
  {
    swift_release();
    outlined consume of Text.LineStyle?(v5, v7);
    v27 = v9;
    v11 = v54;
    v8 = v55;
    v10 = v53;
    v12 = v56;
    v28 = v13;
LABEL_20:
    v29 = v15;
    v14 = v52;
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * result);
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v21 = *(_QWORD *)(v16 + 16);
    swift_release();
    result = outlined consume of Text.LineStyle?(v5, v7);
    if (v20 < v21)
    {
      v50 = v15;
      *(_QWORD *)&v58 = v16;
      *((_QWORD *)&v58 + 1) = v17;
      if (v20 < *(_QWORD *)(v16 + 16))
      {
        v22 = (_QWORD *)(v16 + 56 * v20);
        v23 = v22[5];
        v24 = v22[6];
        v25 = v22[7];
        v26 = v22[10];
        v42 = v22[9];
        v44 = v22[8];
        swift_retain();
        swift_retain();
        swift_retain();
        outlined copy of _ViewList_ID.Canonical?(v24, v25);
        swift_retain();
        swift_release();
        v61 = a1;
        v62 = v23;
        v63 = v24;
        v64 = v25;
        v65 = v44;
        v66 = v42;
        v67 = v26;
        specialized IdentifiedArray.subscript.setter(&v61, v20);
        outlined consume of NavigationColumnState.ColumnContent(v9, v55, v53, v54, v56, v51, v50, v52);
        *v3 = v9;
        v3[1] = v55;
        v3[2] = v53;
        v3[3] = v54;
        v3[4] = v56;
        v3[5] = v51;
        v3[6] = v50;
        v3[7] = v52;
        *((_OWORD *)v3 + 4) = v58;
        return 1;
      }
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized IdentifiedArray.subscript.setter(_QWORD *a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = v3;
  v5 = a2;
  if (*(_QWORD *)(*v3 + 16) <= a2)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    v3 = (_QWORD *)result;
    goto LABEL_6;
  }
  v4 = (uint64_t)a1;
  v6 = (_QWORD *)(*v3 + 56 * a2);
  v7 = v6[5];
  v8 = v6[6];
  v10 = v6[7];
  v9 = v6[8];
  v33 = v7;
  v34 = v8;
  v35 = v10;
  v36 = v9;
  v12 = a1[1];
  v11 = a1[2];
  v14 = a1[3];
  v13 = a1[4];
  v29 = v12;
  v30 = v11;
  v31 = v14;
  v32 = v13;
  v27 = v13;
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v8, v10);
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v11, v14);
  if (!specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(&v29, &v33))
  {
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v8, v10);
    specialized Dictionary._Variant.removeValue(forKey:)(v7, v8, v10, v9);
    swift_release();
    outlined consume of Text.LineStyle?(v8, v10);
    swift_retain();
    outlined copy of _ViewList_ID.Canonical?(v11, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = v2[1];
    v2[1] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v12, v11, v14, v27, isUniquelyReferenced_nonNull_native);
    v2[1] = v28;
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.LineStyle?(v11, v14);
  }
  v3 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_10;
LABEL_6:
  if (v3[2] <= v5)
  {
    __break(1u);
  }
  else
  {
    v17 = &v3[7 * v5];
    v18 = v17[6];
    v19 = v17[7];
    outlined retain of NavigationViewDestinationView(v4);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v18, v19);
    swift_release();
    v20 = *(_OWORD *)v4;
    v21 = *(_OWORD *)(v4 + 16);
    v22 = *(_OWORD *)(v4 + 32);
    v17[10] = *(_QWORD *)(v4 + 48);
    *((_OWORD *)v17 + 3) = v21;
    *((_OWORD *)v17 + 4) = v22;
    *((_OWORD *)v17 + 2) = v20;
    outlined release of NavigationViewDestinationView(v4);
    *v2 = v3;
    v23 = v30;
    v24 = v31;
    swift_release();
    outlined consume of Text.LineStyle?(v23, v24);
    v25 = v34;
    v26 = v35;
    swift_release();
    return outlined consume of Text.LineStyle?(v25, v26);
  }
  return result;
}

uint64_t outlined retain of NavigationViewDestinationView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_retain();
  swift_retain();
  outlined copy of _ViewList_ID.Canonical?(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of NavigationViewDestinationView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v2, v3);
  swift_release();
  return a1;
}

uint64_t specialized NavigationColumnState.ColumnContent.mutatePath<A>(transform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a1[7];
  if (v6 < 0)
    return 0;
  v22 = *a1;
  v20 = a1[2];
  v21 = a1[1];
  v18 = a1[4];
  v19 = a1[3];
  v16 = a1[6];
  v17 = a1[5];
  v11 = a5 + 192;
  v12 = a1[8];
  v15 = a1[9];
  v13 = a1[7];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 104))();
    swift_release();
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 144))(a2, a3, a4, v11);
  *a1 = v22;
  a1[1] = v21;
  a1[2] = v20;
  a1[3] = v19;
  a1[4] = v18;
  a1[5] = v17;
  a1[6] = v16;
  a1[7] = v13;
  a1[8] = v12;
  a1[9] = v15;
  if (v5)
    return swift_willThrow();
  return result;
}

void View.onLongTouchGesture(minimumDuration:perform:onTouchingChanged:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_1874388B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, MEMORY[0x1E0CE41B8]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>, MEMORY[0x1E0CE3150]);
    lazy protocol witness table accessor for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, LongRemoteTouchGesture>);
  }
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<Bool>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)&protocol witness table for Bool, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    lazy protocol witness table accessor for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>();
    v0 = type metadata accessor for CallbacksGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<Bool>>);
  }
}

unint64_t lazy protocol witness table accessor for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>;
  if (!lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t)&protocol witness table for Bool, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PressableGestureCallbacks<Bool> and conformance PressableGestureCallbacks<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture;
  if (!lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LongRemoteTouchGesture, &unk_1E1ADC5A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongRemoteTouchGesture and conformance LongRemoteTouchGesture);
  }
  return result;
}

void *type metadata accessor for LongRemoteTouchGesture()
{
  return &unk_1E1ADC5A0;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in LongRemoteTouchGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187438C80()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(255);
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    v0 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>, MEMORY[0x1E0CE2E88]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>, v0);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  }
}

void type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    v3 = v2;
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    v4 = MEMORY[0x1E0CE2E88];
    v5 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>, MEMORY[0x1E0CE2E88]);
    v6 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>, v4);
    v9[2] = MEMORY[0x1E0DEAFA0];
    v9[3] = v5;
    v9[4] = v6;
    v9[0] = v3;
    v9[1] = swift_getOpaqueTypeConformance2();
    v7 = MEMORY[0x18D75FF88](a1, v9, MEMORY[0x1E0CE76D0], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0);
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>();
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<[EventID : TouchEvent]>, MultiEventListener<TouchEvent>>, MEMORY[0x1E0CE2E88]);
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE76D0], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0);
  }
}

void type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>();
    v3 = v2;
    type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>();
    v5 = v4;
    v6 = MEMORY[0x1E0CE2E88];
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>, MEMORY[0x1E0CE2E88]);
    v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>, v6);
    v11[0] = v3;
    v11[1] = v5;
    v11[2] = MEMORY[0x1E0DEAFA0];
    v11[3] = v7;
    v11[4] = v8;
    v9 = MEMORY[0x18D75FF88](a1, v11, MEMORY[0x1E0CE7728], 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    v3 = v2;
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    v5 = v4;
    v6 = MEMORY[0x1E0CE2E88];
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
    v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>, v6);
    v11[0] = v3;
    v11[1] = v5;
    v11[2] = MEMORY[0x1E0DEAFA0];
    v11[3] = v7;
    v11[4] = v8;
    v9 = MEMORY[0x18D75FF88](a1, v11, MEMORY[0x1E0CE7728], 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    v3 = v2;
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    v5 = v4;
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    v6 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>, v6);
    v7 = MEMORY[0x1E0CE7728];
    v10[0] = v3;
    v10[1] = v5;
    v10[2] = MEMORY[0x1E0DEAFA0];
    v10[3] = swift_getOpaqueTypeConformance2();
    v10[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, v6);
    v8 = MEMORY[0x18D75FF88](a1, v10, v7, 0);
    if (!v9)
      atomic_store(v8, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    v3 = v2;
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    v5 = v4;
    v6 = MEMORY[0x1E0CE2E88];
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
    v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, v6);
    v11[0] = v3;
    v11[1] = v5;
    v11[2] = MEMORY[0x1E0DEAFA0];
    v11[3] = v7;
    v11[4] = v8;
    v9 = MEMORY[0x18D75FF88](a1, v11, MEMORY[0x1E0CE7728], 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    v3 = v2;
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    v5 = v4;
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    v6 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, v6);
    v8 = MEMORY[0x1E0CE7728];
    v11[0] = v3;
    v11[1] = v5;
    v11[2] = MEMORY[0x1E0DEAFA0];
    v11[3] = swift_getOpaqueTypeConformance2();
    v11[4] = v7;
    v9 = MEMORY[0x18D75FF88](a1, v11, v8, 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0)
  {
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    v3 = v2;
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    v5 = v4;
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0(255);
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    v6 = MEMORY[0x1E0CE2E88];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>, MEMORY[0x1E0CE2E88]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, v6);
    v7 = MEMORY[0x1E0DEAFA0];
    v8 = MEMORY[0x1E0CE7728];
    swift_getOpaqueTypeConformance2();
    v11[0] = v3;
    v11[1] = v5;
    v11[2] = v7;
    v11[3] = swift_getOpaqueTypeConformance2();
    v11[4] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, v6);
    v9 = MEMORY[0x18D75FF88](a1, v11, v8, 0);
    if (!v10)
      atomic_store(v9, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0);
  }
}

void type metadata accessor for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<TouchEvent, Bool>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>, MEMORY[0x1E0CE1EC0]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TouchEvent, Bool>, EventListener<TouchEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<TouchEvent, Bool>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TouchEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TouchEvent>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E0CE2CC8]);
    type metadata accessor for EventListener<TouchEvent>();
    lazy protocol witness table accessor for type DurationGesture<TouchEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EventListener<TouchEvent> and conformance EventListener<A>, (uint64_t (*)(uint64_t))type metadata accessor for EventListener<TouchEvent>, MEMORY[0x1E0CE1EC0]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<TouchEvent>, EventListener<TouchEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<TouchEvent> and conformance DurationGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DurationGesture<TouchEvent>, (uint64_t)&type metadata for TouchEvent, MEMORY[0x1E0CE2CC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2CD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<TouchEvent> and conformance DurationGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>);
  }
  return result;
}

uint64_t EnvironmentValues.toolbarCustomizationBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarCustomizationBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static ToolbarCustomizationBehavior.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static CustomizationBehaviorModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  v13 = a2[8];
  v14 = *((_DWORD *)a2 + 18);
  v26 = *a2;
  v27 = v4;
  v28 = v5;
  *(_QWORD *)&v29 = __PAIR64__(v7, v6);
  *((_QWORD *)&v29 + 1) = __PAIR64__(v9, v8);
  v30 = v10;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<CustomizationBehaviorModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  v17 = v26;
  v18 = v27;
  v19 = v5;
  v20 = v29;
  v21 = v10;
  v22 = v11;
  v23 = v32;
  v24 = v33;
  v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for Rule.value.getter in conformance CustomizationBehaviorModifier.ChildEnvironment@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

void static ToolbarCustomizationBehavior.reorderable.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ToolbarCustomizationBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CustomizableToolbarContent.customizationBehavior(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a1;
  return ToolbarContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for CustomizationBehaviorModifier, a3);
}

ValueMetadata *type metadata accessor for ToolbarCustomizationBehavior()
{
  return &type metadata for ToolbarCustomizationBehavior;
}

uint64_t sub_187439718(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ToolbarModifiedContent(255, *a1, (uint64_t)&type metadata for CustomizationBehaviorModifier, a4);
  v7[0] = v4;
  v7[1] = &protocol witness table for CustomizationBehaviorModifier;
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ToolbarModifiedContent<A, B>, v5, v7);
}

ValueMetadata *type metadata accessor for ToolbarCustomizationBehavior.Role()
{
  return &type metadata for ToolbarCustomizationBehavior.Role;
}

uint64_t storeEnumTagSinglePayload for ToolbarCustomizationBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874397C8 + 4 * byte_187C315C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1874397FC + 4 * byte_187C315C0[v4]))();
}

uint64_t sub_1874397FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187439804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18743980CLL);
  return result;
}

uint64_t sub_187439818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187439820);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187439824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18743982C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarCustomizationBehavior.Role, &type metadata for ToolbarCustomizationBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationBehavior.Role and conformance ToolbarCustomizationBehavior.Role);
  }
  return result;
}

void type metadata accessor for _GraphValue<CustomizationBehaviorModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<CustomizationBehaviorModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CustomizationBehaviorModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomizationBehaviorModifier.ChildEnvironment, &unk_1E1AF9518);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationBehaviorModifier.ChildEnvironment and conformance CustomizationBehaviorModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationBehaviorKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationBehaviorKey;
}

void *type metadata accessor for CustomizationBehaviorModifier.ChildEnvironment()
{
  return &unk_1E1AF9518;
}

void PushWindowAction.callAsFunction<A>(value:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

Swift::Void __swiftcall PushWindowAction.callAsFunction(id:)(Swift::String id)
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PushWindowAction.callAsFunction<A>(id:value:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void EnvironmentValues.pushWindow.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t destroy for PushWindowAction(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 0xFD)
    return outlined consume of SceneID(*(_QWORD *)result, *(_QWORD *)(result + 8), v1 & 1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PushWindowAction(uint64_t a1, uint64_t *a2)
{
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 == 254 || v3 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = v3 & 1;
    v5 = *a2;
    v6 = a2[1];
    outlined copy of SceneID(*a2, v6, v3 & 1);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for PushWindowAction(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 254)
  {
    if (v5 == 254)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v5 == 254)
  {
    outlined destroy of SceneID?(a1);
LABEL_12:
    v10 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = v10;
    return a1;
  }
  if (v4 != 255)
  {
    if (v5 != 255)
    {
      v12 = v5 & 1;
      v14 = *a2;
      v13 = a2[1];
      outlined copy of SceneID(*a2, v13, v5 & 1);
      v15 = *(_QWORD *)a1;
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(_BYTE *)(a1 + 16);
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v13;
      *(_BYTE *)(a1 + 16) = v12;
      outlined consume of SceneID(v15, v16, v17);
      return a1;
    }
    outlined destroy of SceneID(a1);
    goto LABEL_12;
  }
LABEL_7:
  if (v5 != 255)
  {
    v7 = v5 & 1;
    v9 = *a2;
    v8 = a2[1];
    outlined copy of SceneID(*a2, v8, v5 & 1);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v7;
    return a1;
  }
LABEL_8:
  v6 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v6;
  return a1;
}

uint64_t outlined destroy of SceneID?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for SceneID?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for SceneID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SceneID?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SceneID?);
  }
}

uint64_t assignWithTake for PushWindowAction(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 254)
  {
    if (v5 == 254)
    {
      outlined destroy of SceneID?(a1);
    }
    else if (v4 != 255)
    {
      if (v5 != 255)
      {
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = v5 & 1;
        outlined consume of SceneID(v7, v8, v4 & 1);
        return a1;
      }
      outlined destroy of SceneID(a1);
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushWindowAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 ^ 0xFF;
  if ((int)(v3 ^ 0xFF) <= 1)
    v4 = 1;
  v5 = v4 - 2;
  if (v3 <= 1)
    v6 = -1;
  else
    v6 = v5;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for PushWindowAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -2 - a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushWindowAction()
{
  return &type metadata for PushWindowAction;
}

void Scene.defaultVisibility(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.defaultLaunchBehavior(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static SceneLaunchBehavior.suppressed.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for SceneLaunchBehavior()
{
  return &type metadata for SceneLaunchBehavior;
}

ValueMetadata *type metadata accessor for WindowPresentationBehavior()
{
  return &type metadata for WindowPresentationBehavior;
}

uint64_t storeEnumTagSinglePayload for SceneLaunchBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187439E34 + 4 * byte_187C317B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187439E68 + 4 * asc_187C317B0[v4]))();
}

uint64_t sub_187439E68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187439E70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187439E78);
  return result;
}

uint64_t sub_187439E84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187439E8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187439E90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187439E98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SceneLaunchBehavior.Role()
{
  return &type metadata for SceneLaunchBehavior.Role;
}

unint64_t lazy protocol witness table accessor for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role;
  if (!lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SceneLaunchBehavior.Role, &type metadata for SceneLaunchBehavior.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneLaunchBehavior.Role and conformance SceneLaunchBehavior.Role);
  }
  return result;
}

void Scene.defaultPresentationBehavior(_:)()
{
  Scene.defaultLaunchBehavior(_:)();
}

void static SceneLaunchBehavior.presented.getter()
{
  static SceneLaunchBehavior.suppressed.getter();
}

void static SceneLaunchBehavior.automatic.getter()
{
  static SceneLaunchBehavior.suppressed.getter();
}

void static WindowPresentationBehavior.automatic.getter()
{
  static SceneLaunchBehavior.suppressed.getter();
}

void static WindowPresentationBehavior.closed.getter()
{
  static SceneLaunchBehavior.suppressed.getter();
}

void static WindowPresentationBehavior.opened.getter()
{
  static SceneLaunchBehavior.suppressed.getter();
}

void TextFieldLink.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TextFieldLink.init(prompt:label:onSubmit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_release();
  outlined consume of Text?(a1, a2, a3, a4);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TextFieldLink<>.init(_:prompt:onSubmit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  swift_release();
  outlined consume of Text?(a5, a6, a7, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void TextFieldLink<>.init<A>(_:prompt:onSubmit:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  swift_release();
  outlined consume of Text?(a2, a3, a4, a5);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in TextFieldLink<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for TextFieldLink()
{
  unint64_t v0;
  unint64_t v1;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<Locale>.Content(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TextFieldLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  __int128 v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for Locale();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v9 + 64);
  v12 = v10 | *(_DWORD *)(v6 + 80);
  if ((v12 & 0x1000F8) != 0
    || (v13 = v10 & 0xF8,
        v14 = ~v13 & 0xFFFFFFFFFFFFFFF8,
        v15 = v13 + 16,
        v11
      + ((v13
        + 16
        + ((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)) & v14)
      + 1 > 0x18))
  {
    v21 = *a2;
    *a1 = *a2;
    v22 = (uint64_t *)(v21 + (((v12 & 0xF8 | 7u) + 16) & ~(unint64_t)(v12 & 0xF8 | 7u)));
LABEL_18:
    swift_retain();
    return v22;
  }
  v40 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
  v16 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = a1;
  if (*(_QWORD *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
    v23 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v23;
  }
  else
  {
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v17, v19, v20);
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = v19;
    *(_BYTE *)(v16 + 16) = v20;
    *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  v24 = (_QWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)((v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v27 = *(_BYTE *)v28;
  *(_QWORD *)(v27 + 8) = *(_QWORD *)(v28 + 8);
  v29 = (_QWORD *)((v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v29[1] = v30[1];
  v29[2] = v30[2];
  v31 = ((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(_QWORD *)v32;
  v34 = *(_BYTE *)(v32 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v33, v34);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v34;
  v35 = (_QWORD *)((v15 + v31) & v14);
  v36 = (_QWORD *)((v15 + v32) & v14);
  v37 = *((unsigned __int8 *)v36 + v11);
  if (v37 >= 2)
  {
    if (v11 <= 3)
      v38 = v11;
    else
      v38 = 4;
    __asm { BR              X12 }
  }
  v22 = v41;
  if (v37 != 1)
  {
    *v35 = *v36;
    *((_BYTE *)v35 + v11) = 0;
    goto LABEL_18;
  }
  (*(void (**)(unint64_t))(v40 + 16))((v15 + v31) & v14);
  *((_BYTE *)v35 + v11) = 1;
  return v22;
}

uint64_t destroy for TextFieldLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = (((((((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v5, *(_BYTE *)(v5 + 8));
  v6 = *(_QWORD *)(type metadata accessor for Locale() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  v8 = (v5 + v7 + 9) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= 8)
    v9 = 8;
  v10 = *(unsigned __int8 *)(v8 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  if (v10 == 1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  else
    return swift_release();
}

uint64_t initializeWithCopy for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    v12 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v12;
  }
  else
  {
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_BYTE *)(v8 + 16);
    outlined copy of Text.Storage(*(_QWORD *)v8, v10, v11);
    *(_QWORD *)v7 = v9;
    *(_QWORD *)(v7 + 8) = v10;
    *(_BYTE *)(v7 + 16) = v11;
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  v13 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  v18 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  v18[2] = v19[2];
  v20 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  v23 = *(_BYTE *)(v21 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v22, v23);
  *(_QWORD *)v20 = v22;
  *(_BYTE *)(v20 + 8) = v23;
  v24 = *(_QWORD *)(type metadata accessor for Locale() - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  v26 = v25 + 16;
  v27 = v25 + 16 + v20;
  v28 = ~v25 & 0xFFFFFFFFFFFFFFF8;
  v29 = (_QWORD *)(v27 & v28);
  v30 = (_QWORD *)((v26 + v21) & v28);
  if (*(_QWORD *)(v24 + 64) <= 8uLL)
    v31 = 8;
  else
    v31 = *(_QWORD *)(v24 + 64);
  v32 = *((unsigned __int8 *)v30 + v31);
  if (v32 >= 2)
  {
    if (v31 <= 3)
      v33 = v31;
    else
      v33 = 4;
    __asm { BR              X13 }
  }
  if (v32 == 1)
  {
    (*(void (**)(_QWORD *))(v24 + 16))(v29);
    v34 = 1;
  }
  else
  {
    *v29 = *v30;
    swift_retain();
    v34 = 0;
  }
  *((_BYTE *)v29 + v31) = v34;
  return a1;
}

uint64_t assignWithCopy for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 24);
  if (*(_QWORD *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v16 = *(_QWORD *)v8;
      v17 = *(_QWORD *)(v8 + 8);
      v18 = *(_BYTE *)(v8 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v8, v17, v18);
      *(_QWORD *)v7 = v16;
      *(_QWORD *)(v7 + 8) = v17;
      *(_BYTE *)(v7 + 16) = v18;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      v10 = *(_QWORD *)v8;
      v11 = *(_QWORD *)(v8 + 8);
      v12 = *(_BYTE *)(v8 + 16);
      outlined copy of Text.Storage(*(_QWORD *)v8, v11, v12);
      v13 = *(_QWORD *)v7;
      v14 = *(_QWORD *)(v7 + 8);
      v15 = *(_BYTE *)(v7 + 16);
      *(_QWORD *)v7 = v10;
      *(_QWORD *)(v7 + 8) = v11;
      *(_BYTE *)(v7 + 16) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v19 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v19;
LABEL_8:
  v20 = (_QWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  swift_retain();
  swift_release();
  v25 = (_QWORD *)((v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25[2] = v26[2];
  swift_retain();
  swift_release();
  v27 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  v28 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
  v29 = *(_QWORD *)v28;
  LOBYTE(v25) = *(_BYTE *)(v28 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v28, (char)v25);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v25;
  outlined consume of Environment<Bool>.Content(v30, v31);
  v32 = type metadata accessor for Locale();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8;
  v35 = v34 + 16;
  v36 = v34 + 16 + v27;
  v37 = ~v34 & 0xFFFFFFFFFFFFFFF8;
  v38 = (_QWORD *)(v36 & v37);
  v39 = v35 + v28;
  v40 = (_QWORD *)(v39 & v37);
  if ((v36 & v37) != (v39 & v37))
  {
    v41 = v32;
    if (*(_QWORD *)(v33 + 64) <= 8uLL)
      v42 = 8;
    else
      v42 = *(_QWORD *)(v33 + 64);
    v43 = *((unsigned __int8 *)v38 + v42);
    if (v43 >= 2)
    {
      if (v42 <= 3)
        v44 = v42;
      else
        v44 = 4;
      __asm { BR              X12 }
    }
    if (v43 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v38, v32);
    else
      swift_release();
    v45 = *((unsigned __int8 *)v40 + v42);
    if (v45 >= 2)
    {
      if (v42 <= 3)
        v46 = v42;
      else
        v46 = 4;
      __asm { BR              X12 }
    }
    if (v45 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v33 + 16))(v38, v40, v41);
      *((_BYTE *)v38 + v42) = 1;
    }
    else
    {
      *v38 = *v40;
      *((_BYTE *)v38 + v42) = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = (_OWORD *)(((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFF8);
  v11 = (_OWORD *)(((unint64_t)v8 + 39) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_OWORD *)v15;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  *(_OWORD *)v14 = v16;
  v17 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v15) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v15;
  v19 = *(_QWORD *)(type metadata accessor for Locale() - 8);
  v20 = *(_DWORD *)(v19 + 80) & 0xF8;
  v21 = v20 + 16;
  v22 = v20 + 16 + v17;
  v23 = ~v20 & 0xFFFFFFFFFFFFFFF8;
  v24 = (_QWORD *)(v22 & v23);
  v25 = (_QWORD *)((v21 + v18) & v23);
  if (*(_QWORD *)(v19 + 64) <= 8uLL)
    v26 = 8;
  else
    v26 = *(_QWORD *)(v19 + 64);
  v27 = *((unsigned __int8 *)v25 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X13 }
  }
  if (v27 == 1)
  {
    (*(void (**)(_QWORD *))(v19 + 32))(v24);
    v29 = 1;
  }
  else
  {
    v29 = 0;
    *v24 = *v25;
  }
  *((_BYTE *)v24 + v26) = v29;
  return a1;
}

uint64_t assignWithTake for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char v40;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(_QWORD *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      v9 = *(_BYTE *)(v8 + 16);
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      v12 = *(_BYTE *)(v7 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_BYTE *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_6:
  v14 = (_OWORD *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v8 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  swift_release();
  v16 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release();
  v18 = (_QWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  swift_release();
  v20 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_BYTE *)(v21 + 8);
  v23 = *(_QWORD *)v20;
  v24 = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  v25 = type metadata accessor for Locale();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  v28 = v27 + 16;
  v29 = v27 + 16 + v20;
  v30 = ~v27 & 0xFFFFFFFFFFFFFFF8;
  v31 = (_QWORD *)(v29 & v30);
  v32 = v28 + v21;
  v33 = (_QWORD *)(v32 & v30);
  if ((v29 & v30) != (v32 & v30))
  {
    v34 = v25;
    if (*(_QWORD *)(v26 + 64) <= 8uLL)
      v35 = 8;
    else
      v35 = *(_QWORD *)(v26 + 64);
    v36 = *((unsigned __int8 *)v31 + v35);
    if (v36 >= 2)
    {
      if (v35 <= 3)
        v37 = v35;
      else
        v37 = 4;
      __asm { BR              X12 }
    }
    if (v36 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v31, v25);
    else
      swift_release();
    v38 = *((unsigned __int8 *)v33 + v35);
    if (v38 >= 2)
    {
      if (v35 <= 3)
        v39 = v35;
      else
        v39 = 4;
      __asm { BR              X12 }
    }
    if (v38 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 32))(v31, v33, v34);
      v40 = 1;
    }
    else
    {
      v40 = 0;
      *v31 = *v33;
    }
    *((_BYTE *)v31 + v35) = v40;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldLink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  unint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Locale() - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  if (!a2)
    return 0;
  v11 = *(_QWORD *)(v6 + 64);
  if (a2 <= v8)
    goto LABEL_24;
  v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v13 = v10
      + ((v12
        + ((((((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 9) & ~v12)
      + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v7 >= 0x7FFFFFFF)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
      v19 = *(_QWORD *)((((a1 + v11 + 7) & 0xFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFF8);
      if (v19 >= 0xFFFFFFFF)
        LODWORD(v19) = -1;
      return (v19 + 1);
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_24;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return v8 + v18 + 1;
}

void storeEnumTagSinglePayload for TextFieldLink(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Locale() - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v12 = v10
      + ((v11
        + ((((((((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 9) & ~v11)
      + 1;
  if (a3 <= v8)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v8 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (v8 < a2)
  {
    v14 = ~v8 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TextFieldLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextFieldLink);
}

_UNKNOWN **sub_18743B430()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

void Scene.windowIdealSize(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static WindowIdealSize.fitToContent.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.idealWindowPlacement(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.contentDefinesIdealSize()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.contentDefinesIdealSize(horizontal:vertical:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WindowIdealSize()
{
  return &type metadata for WindowIdealSize;
}

uint64_t storeEnumTagSinglePayload for WindowIdealSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18743B4EC + 4 * byte_187C31945[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18743B520 + 4 * byte_187C31940[v4]))();
}

uint64_t sub_18743B520(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18743B528(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18743B530);
  return result;
}

uint64_t sub_18743B53C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18743B544);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18743B548(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18743B550(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WindowIdealSize.Guts()
{
  return &type metadata for WindowIdealSize.Guts;
}

unint64_t lazy protocol witness table accessor for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts;
  if (!lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WindowIdealSize.Guts, &type metadata for WindowIdealSize.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowIdealSize.Guts and conformance WindowIdealSize.Guts);
  }
  return result;
}

void static WindowIdealSize.automatic.getter()
{
  static WindowIdealSize.fitToContent.getter();
}

void static WindowIdealSize.maximum.getter()
{
  static WindowIdealSize.fitToContent.getter();
}

void Scene.defaultWindowPlacement(_:)()
{
  Scene.idealWindowPlacement(_:)();
}

{
  Scene.idealWindowPlacement(_:)();
}

void Scene.windowIdealPlacement(_:)()
{
  Scene.idealWindowPlacement(_:)();
}

uint64_t specialized SubmitTriggerSource.updateTriggersIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v1 == 1)
    return 0;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>, (uint64_t)&type metadata for EnvironmentValues.TriggerSubmissionKey, (uint64_t)&protocol witness table for EnvironmentValues.TriggerSubmissionKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  v2 = outlined consume of EnvironmentValues?(v1);
  if (!v7)
    return 0;
  MEMORY[0x1E0C80A78](v2, v3);
  MEMORY[0x1E0C80A78](v4, v5);
  static Update.dispatchImmediately<A>(_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  return 1;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.update()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _UNKNOWN **v23;
  _UNKNOWN **v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  void *v85;
  void *v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void (*v93)(void *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  void *v99;
  uint64_t v100;
  _UNKNOWN **v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[56];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  char v119;
  uint64_t v120;
  _BYTE v121[216];
  uint64_t v122[27];

  type metadata accessor for Binding<TextSelection?>(0);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v4);
  v6 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v87 - v18;
  v103 = v0;
  v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v20 == 1)
    return;
  v100 = v17;
  v102 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8);
  v21 = v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v21, (uint64_t)&v105);
  if (v106 == 255)
    return;
  v97 = v14;
  if ((v106 & 1) == 0)
  {
    outlined init with take of TableCellFormula((uint64_t)&v105, (uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    v22 = (void *)MEMORY[0x18D760234](v122);
    swift_retain();
    swift_retain();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    if (v22)
    {
      v94 = v3;
      v95 = v21;
      v91 = v6;
      v23 = &protocol witness table for UITextField;
      v24 = &protocol witness table for UITextField;
      goto LABEL_8;
    }
LABEL_10:
    outlined consume of EnvironmentValues?(v20);
    return;
  }
  outlined init with take of TableCellFormula((uint64_t)&v105, (uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
  v22 = (void *)MEMORY[0x18D760234](v122);
  swift_retain();
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
  if (!v22)
    goto LABEL_10;
  v94 = v3;
  v95 = v21;
  v91 = v6;
  v23 = &protocol witness table for UITextView;
  v24 = &protocol witness table for VerticalTextView;
LABEL_8:
  v96 = OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating;
  *(_BYTE *)(v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) = 1;
  ObjectType = swift_getObjectType();
  v26 = v102;
  v105 = v20;
  v106 = v102;
  v101 = v24;
  UIKitTextInput.update(in:)((uint64_t)&v105, ObjectType, (uint64_t)v24);
  v105 = v20;
  v106 = v26;
  UIKitTextInputTraits.updateTraits(in:)((uint64_t)&v105, ObjectType, (uint64_t)v23);
  v105 = v20;
  v106 = v26;
  UITextInputTraits_Private.updatePrivateTraits(in:)((uint64_t)&v105);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  outlined copy of EnvironmentValues?(v20);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.InputAccessoryKey>, (uint64_t)&type metadata for EnvironmentValues.InputAccessoryKey, (uint64_t)&protocol witness table for EnvironmentValues.InputAccessoryKey);
  swift_retain();
  if (v26)
  {
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v105, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<InputAccessoryGenerator>);
  outlined consume of EnvironmentValues?(v20);
  v98 = v10;
  v99 = v22;
  v28 = (uint64_t)v101;
  if (Strong)
  {
    v29 = *(void **)(Strong + 24);
    if (!v29)
    {
      v30 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InputAccessoryGenerator.RootUIView()), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
      objc_msgSend(v30, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      v31 = *(void **)(Strong + 24);
      *(_QWORD *)(Strong + 24) = v30;
      v32 = v30;

      InputAccessoryGenerator.updateHostIfNeeded()();
      v28 = (uint64_t)v101;
      v29 = *(void **)(Strong + 24);
      if (!v29)
      {
        __break(1u);
        return;
      }
    }
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 96);
    v34 = v29;
    v35 = (void *)v33(ObjectType, v28);
    if (!v35 || (v36 = v35, v35, v36 != v34))
    {
      v37 = v20;
      v38 = v2;
      v39 = (uint64_t)v101;
      v93 = (void (*)(void *, uint64_t, uint64_t))v101[13];
      v40 = v34;
      v41 = v39;
      v2 = v38;
      v20 = v37;
      v93(v29, ObjectType, v41);
    }
    swift_release();

    v10 = v98;
    v22 = v99;
  }
  v42 = *(_BYTE *)(v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing);
  v93 = (void (*)(void *, uint64_t, uint64_t))OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing;
  if ((v42 & 1) != 0)
  {
    v43 = 0;
  }
  else
  {
    v92 = v20;
    v44 = v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v44, (uint64_t)v19);
    v46 = *((_QWORD *)v19 + 9);
    v45 = *((_QWORD *)v19 + 10);
    v47 = *((_QWORD *)v19 + 11);
    v48 = (void *)*((_QWORD *)v19 + 12);
    v50 = *((_QWORD *)v19 + 13);
    v49 = *((_QWORD *)v19 + 14);
    v52 = *((_QWORD *)v19 + 15);
    v51 = *((_QWORD *)v19 + 16);
    v54 = *((_QWORD *)v19 + 17);
    v53 = *((_QWORD *)v19 + 18);
    v56 = *((_QWORD *)v19 + 19);
    v55 = *((_QWORD *)v19 + 20);
    v57 = *((_QWORD *)v19 + 21);
    v58 = v19[179];
    v89 = ObjectType;
    v90 = v2;
    if ((v58 & 1) != 0)
    {
      v59 = *((unsigned __int16 *)v19 + 88) | (v19[178] << 16);
      v105 = v46;
      v106 = v45;
      v107 = v47;
      v108 = v48;
      v109 = v50;
      v110 = v49;
      v111 = v52;
      v112 = v51;
      v113 = v54;
      v114 = v53;
      v115 = v56;
      v116 = v55;
      LOBYTE(v117) = v57 & 1;
      HIDWORD(v117) = HIDWORD(v57);
      v118 = v59 & 0xFF01;
      v119 = BYTE2(v59) & 1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](v122);
    }
    else
    {
      v105 = v46;
      v106 = v45;
      v107 = v47;
      v108 = v48;
      v109 = v50;
      v110 = v49;
      v111 = v52;
      v112 = v51;
      v113 = v54;
      v114 = v53;
      LOBYTE(v115) = v56 & 1;
      HIDWORD(v115) = HIDWORD(v56);
      LOWORD(v116) = v55 & 0xFF01;
      BYTE2(v116) = BYTE2(v55) & 1;
      v117 = v57;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
      State.wrappedValue.getter();
    }
    v60 = v122[1];
    v61 = v122[2];
    v62 = v122[6];
    v87[1] = v122[9];
    v88 = v122[0];
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v19);
    outlined consume of TextFieldState.FormatActions?(v61);
    outlined consume of TextFieldState.FormatActions?(v62);
    v105 = v92;
    v106 = v102;
    ObjectType = v89;
    v63 = v60;
    v20 = v92;
    v22 = v99;
    v43 = UIKitTextInput.setText(_:environment:)(v88, v63, &v105, v89, (uint64_t)v101);
    swift_bridgeObjectRelease();
    v10 = v98;
    v2 = v90;
  }
  v64 = v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label;
  swift_beginAccess();
  outlined init with copy of PlatformItem(v64, (uint64_t)&v105);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v108, (uint64_t)v121);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v121, (uint64_t)v122);
  v65 = _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v122);
  LODWORD(v92) = v43;
  if (v65 == 1)
  {
    outlined destroy of PlatformItem((uint64_t)&v105);
LABEL_28:
    v68 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v69 = (void *)MEMORY[0x18D75CC88](0, 0xE000000000000000);
    v67 = objc_msgSend(v68, sel_initWithString_, v69);

    v10 = v98;
    goto LABEL_29;
  }
  v66 = v108;
  v67 = v108;
  outlined destroy of PlatformItem((uint64_t)&v105);
  if (!v66)
    goto LABEL_28;
LABEL_29:
  UIKitTextInput.setPlaceholderText(_:)(v67, ObjectType, (uint64_t)v101);

  v70 = v103 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  v98 = (char *)v70;
  v71 = (uint64_t)v97;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v70, (uint64_t)v97);
  v72 = v71 + *(int *)(v100 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v72, 1, v2))
  {
    outlined destroy of TextField<_TextFieldStyleLabel>(v71);
    v73 = type metadata accessor for TextSelection(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v10, 1, 1, v73);
  }
  else
  {
    v74 = v72;
    v75 = (uint64_t)v91;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v74, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    outlined destroy of TextField<_TextFieldStyleLabel>(v71);
    MEMORY[0x18D75B9C8](v2);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v75, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
  }
  UIKitTextInput.setSelection(_:)((uint64_t)v10, ObjectType, (uint64_t)v101);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  v76 = v92;
  if (v102)
  {
    outlined copy of EnvironmentValues?(v20);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    outlined copy of EnvironmentValues?(v20);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSelectionAffinityKey>, (uint64_t)&type metadata for EnvironmentValues.TextSelectionAffinityKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSelectionAffinityKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  v77 = v95;
  swift_release();
  outlined consume of EnvironmentValues?(v20);
  v104[0] = v105;
  v78 = (uint64_t)v101;
  UIKitTextInput.setAffinity(_:)(v104, ObjectType, (uint64_t)v101);
  *((_BYTE *)v93 + v103) = 0;
  if ((v76 & 1) != 0 && ((*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(ObjectType, v78) & 1) != 0)
    objc_msgSend(v22, sel_invalidateIntrinsicContentSize);
  outlined init with copy of PlatformItem(v64, (uint64_t)&v105);
  v79 = (void *)PlatformItem.accessibilityResolvedAttributedLabel.getter();
  outlined destroy of PlatformItem((uint64_t)&v105);
  if (v79)
  {
    objc_msgSend(v22, sel_setAccessibilityAttributedLabel_, v79);

  }
  outlined init with copy of PlatformItem(v64, (uint64_t)&v105);
  if (v120)
  {
    swift_bridgeObjectRetain();
    outlined destroy of PlatformItem((uint64_t)&v105);
    v80 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v80, (uint64_t)&v105);
    swift_bridgeObjectRelease_n();
    v81 = v106;
    if (v106)
    {
      if (v107 >= 2u)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v82 = v105;
        v83 = v22;
        v84 = (void *)MEMORY[0x18D75CC88](v82, v81);
        swift_bridgeObjectRelease();
        objc_msgSend(v83, sel_setAccessibilityIdentifier_, v84);

      }
    }
  }
  else
  {
    outlined destroy of PlatformItem((uint64_t)&v105);
  }
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v77, (uint64_t)&v105);
  if (v106 == 255)
  {
    outlined consume of EnvironmentValues?(v20);

    outlined destroy of AccessibilityTableContext?((uint64_t)&v105, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage);
  }
  else if ((v106 & 1) != 0)
  {
    outlined consume of EnvironmentValues?(v20);

    outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)&v105);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)&v105, (uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    v85 = (void *)MEMORY[0x18D760234](v104);
    if (v85)
    {
      v86 = v85;
      objc_msgSend(v85, sel_setSecureTextEntry_, v98[32]);

      outlined consume of EnvironmentValues?(v20);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
      outlined consume of EnvironmentValues?(v20);

    }
  }
  *(_BYTE *)(v103 + v96) = 0;
}

uint64_t PlainTextFieldStyle.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;

  v2 = v1;
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SystemTextField(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v2, (uint64_t)v12);
  *(_QWORD *)&v12[*(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8, type metadata accessor for SystemTextField);
  *(_WORD *)&v8[*(int *)(v5 + 36)] = 769;
  LOBYTE(v2) = *(_BYTE *)(v2 + 33);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  v14 = (_BYTE *)(a1 + *(int *)(v13 + 36));
  *v14 = 0;
  v14[1] = (v2 & 1) == 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for SystemTextField);
}

uint64_t RoundedBorderTextFieldStyle.BodyContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;

  v3 = type metadata accessor for SystemTextField(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TextField<_TextFieldStyleLabel>(v1, (uint64_t)v6);
  *(_QWORD *)&v6[*(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)] = 3;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v11, type metadata accessor for SystemTextField);
  *(_WORD *)&v11[*(int *)(v8 + 36)] = 769;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for SystemTextField);
  v12 = *(_BYTE *)(v1 + 33);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
  v14 = (_BYTE *)(a1 + *(int *)(v13 + 36));
  *v14 = 0;
  v14[1] = (v12 & 1) == 0;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlainTextFieldStyle.BodyContent()
{
  type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(0);
  lazy protocol witness table accessor for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>();
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t static SystemTextField._makeView(view:inputs:)()
{
  int v0;
  int v2;
  int v3;
  int v4;
  int v5;

  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>, (uint64_t)&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v0 = *MEMORY[0x1E0CFED28];
  if (v2 == *MEMORY[0x1E0CFED28])
  {
    if (v3 != v0)
      goto LABEL_3;
  }
  else
  {
    AGCreateWeakAttribute();
    if (v3 != v0)
    {
LABEL_3:
      AGCreateWeakAttribute();
      if (v4 != v0)
        goto LABEL_4;
LABEL_8:
      if (v5 == v0)
        goto LABEL_9;
      goto LABEL_5;
    }
  }
  if (v4 == v0)
    goto LABEL_8;
LABEL_4:
  AGCreateWeakAttribute();
  if (v5 != v0)
LABEL_5:
    AGCreateWeakAttribute();
LABEL_9:
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<SystemTextField>, 255, type metadata accessor for SystemTextField, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  type metadata accessor for SystemTextFieldConfiguration(0);
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ResolvedSystemTextField(0);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ResolvedSystemTextField and conformance ResolvedSystemTextField, type metadata accessor for ResolvedSystemTextField, (uint64_t)&protocol conformance descriptor for ResolvedSystemTextField);
  return static View.makeView(view:inputs:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SystemTextField.MakeRepresentable@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for ResolvedSystemTextField(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

double protocol witness for Rule.value.getter in conformance SystemTextField.MakeRepresentable@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Value;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(Value, (uint64_t)v6, type metadata accessor for SystemTextFieldConfiguration);
  *(_QWORD *)a1 = swift_getKeyPath();
  *(_BYTE *)(a1 + 8) = 0;
  v8 = type metadata accessor for ResolvedSystemTextField(0);
  outlined init with take of TableCellFormula((uint64_t)v6, a1 + *(int *)(v8 + 20), type metadata accessor for SystemTextFieldConfiguration);
  v9 = a1 + *(int *)(v8 + 24);
  *(_QWORD *)v9 = *(_QWORD *)(v1 + 4);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(v1 + 12);
  result = *(double *)(v1 + 28);
  *(double *)(v9 + 24) = result;
  return result;
}

void protocol witness for View.body.getter in conformance SystemTextField()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ResolvedSystemTextField.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v2 = v1;
  v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (uint64_t *)((char *)&v30 - v10);
  v12 = type metadata accessor for ResolvedSystemTextField(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12, v15);
  v16 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v16, type metadata accessor for ResolvedSystemTextField);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v16, v18 + v17, type metadata accessor for ResolvedSystemTextField);
  swift_retain();
  v19 = static Alignment.center.getter();
  v31 = v20;
  v32 = v19;
  v21 = v2 + *(int *)(v12 + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21, (uint64_t)v11, type metadata accessor for SystemTextFieldConfiguration);
  v22 = v11[5];
  v23 = v11[6];
  v24 = v11[7];
  v25 = v11[8];
  outlined copy of Text?(v22, v23, v24, v25);
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v11);
  if (v25)
  {
    v30 = v24 & 1;
  }
  else
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v21, (uint64_t)v7, type metadata accessor for SystemTextFieldConfiguration);
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v7);
    v22 = 0;
    v23 = 0;
    v30 = 0;
  }
  KeyPath = swift_getKeyPath();
  v33 = objc_msgSend((id)objc_opt_self(), sel_placeholderTextColor);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (unint64_t *)&lazy cache variable for type metadata for UIColor, 0x1E0DC3658, (uint64_t)&protocol conformance descriptor for UIColor);
  v27 = Color.init<A>(provider:)();
  result = swift_release();
  *(_QWORD *)a1 = partial apply for closure #1 in ResolvedSystemTextField.body.getter;
  *(_QWORD *)(a1 + 8) = v18;
  v29 = v31;
  *(_QWORD *)(a1 + 16) = v32;
  *(_QWORD *)(a1 + 24) = v29;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 48) = v30;
  *(_QWORD *)(a1 + 56) = v25;
  *(_BYTE *)(a1 + 64) = v25 == 0;
  *(_QWORD *)(a1 + 72) = KeyPath;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = v27;
  return result;
}

uint64_t ResolvedSystemTextField.adaptorView(label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t (*v50)(_QWORD);
  double v51;
  double v52;
  double v53;
  double v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[43];

  *(_QWORD *)&v98 = a1;
  v100 = a2;
  v93 = (char *)type metadata accessor for PlatformTextFieldAdaptor(0);
  MEMORY[0x1E0C80A78](v93, v3);
  v97 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for TextViewAdaptor(0);
  MEMORY[0x1E0C80A78](v95, v5);
  v96 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>(0);
  v94 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v92 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(0);
  v11 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v99 = (uint64_t)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v86 - v21;
  v91 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v91, v23);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for ResolvedSystemTextField(0);
  v27 = v2 + *(int *)(v26 + 20);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for SystemTextFieldConfiguration);
  v28 = v25[33];
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v25);
  if (v28 == 1)
  {
    v89 = v11;
    v90 = v15;
    v93 = v18;
    v97 = v22;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v25, type metadata accessor for SystemTextFieldConfiguration);
    outlined init with copy of PlatformItem(v98, (uint64_t)v101);
    v29 = v2;
    v30 = (__int128 *)(v2 + *(int *)(v26 + 24));
    v98 = *v30;
    v88 = v30[1];
    KeyPath = swift_getKeyPath();
    v32 = v96;
    outlined init with take of TableCellFormula((uint64_t)v25, v96, type metadata accessor for SystemTextFieldConfiguration);
    v33 = v95;
    memcpy((void *)(v32 + *(int *)(v95 + 20)), v101, 0x150uLL);
    v34 = (_OWORD *)(v32 + *(int *)(v33 + 24));
    v35 = v88;
    *v34 = v98;
    v34[1] = v35;
    v36 = v32 + *(int *)(v33 + 28);
    *(_QWORD *)v36 = KeyPath;
    *(_BYTE *)(v36 + 8) = 0;
    v37 = (uint64_t)v92;
    *(_QWORD *)&v98 = *(int *)(v91 + 20);
    v38 = v27;
    v39 = v29;
    v40 = v94;
    if (*(_QWORD *)(v27 + v98) == 3)
    {
      v41 = 6.0;
      v42 = 4.0;
      v43 = 4.0;
      v44 = 6.0;
    }
    else
    {
      static EdgeInsets.zero.getter();
      v42 = v51;
      v41 = v52;
      v43 = v53;
      v44 = v54;
    }
    v55 = static Edge.Set.all.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v32, v37, type metadata accessor for TextViewAdaptor);
    v56 = v37 + *(int *)(v40 + 36);
    *(_BYTE *)v56 = v55;
    *(double *)(v56 + 8) = v42;
    *(double *)(v56 + 16) = v41;
    *(double *)(v56 + 24) = v43;
    *(double *)(v56 + 32) = v44;
    *(_BYTE *)(v56 + 40) = 0;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, type metadata accessor for TextViewAdaptor);
    v57 = *(_QWORD *)v39;
    v58 = *(_BYTE *)(v39 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v39, v58);
    specialized Environment.wrappedValue.getter(v57, v58);
    outlined consume of Environment<Bool>.Content(v57, v58);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    if (*(_QWORD *)(v38 + v98) == 3)
    {
      v60 = v101[3];
      v59 = v101[4];
      v61 = v101[1];
      v62 = v101[2];
      v63 = v101[0];
      v64 = static Alignment.center.getter();
      v66 = 0x4010000000000000;
      v67 = 256;
      v68 = 1;
    }
    else
    {
      outlined release of StrokeStyle((uint64_t)v101);
      v66 = 0;
      v68 = 0;
      v63 = 0;
      v61 = 0;
      v62 = 0;
      v60 = 0;
      v59 = 0;
      v67 = 0;
      v64 = 0;
      v65 = 0;
    }
    v87 = v67;
    v94 = v64;
    v95 = v65;
    v96 = v38;
    v69 = v66;
    *(_QWORD *)&v88 = static Alignment.center.getter();
    v91 = v70;
    v71 = v99;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v37, v99, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>);
    v72 = (uint64_t *)(v71 + *(int *)(v89 + 36));
    *v72 = v69;
    v72[1] = v69;
    v72[2] = v68;
    v72[3] = v63;
    v72[4] = v61;
    v72[5] = v62;
    v72[6] = v60;
    v72[7] = v59;
    v73 = v94;
    v72[8] = v87;
    v72[9] = v73;
    v74 = v88;
    v72[10] = v95;
    v72[11] = v74;
    v72[12] = v91;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v37, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>);
    if (*(_QWORD *)(v96 + v98) == 3)
    {
      v75 = static Color._background.getter();
      v76 = 256;
      v77 = 0x4010000000000000;
      v78 = 1;
    }
    else
    {
      v77 = 0;
      v78 = 0;
      v75 = 0;
      v76 = 0;
    }
    v79 = static Alignment.center.getter();
    v81 = v80;
    v82 = v99;
    v83 = (uint64_t)v93;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v99, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>);
    v84 = v83 + *(int *)(v90 + 36);
    *(_QWORD *)v84 = v77;
    *(_QWORD *)(v84 + 8) = v77;
    *(_QWORD *)(v84 + 16) = v78;
    *(_QWORD *)(v84 + 24) = v75;
    *(_WORD *)(v84 + 32) = v76;
    *(_QWORD *)(v84 + 40) = v79;
    *(_QWORD *)(v84 + 48) = v81;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v82, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>);
    v50 = (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>;
    v45 = (uint64_t)v97;
    outlined init with take of TableCellFormula(v83, (uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, v100, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, PlatformTextFieldAdaptor>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
  }
  else
  {
    v45 = (uint64_t)v97;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v27, (uint64_t)v97, type metadata accessor for SystemTextFieldConfiguration);
    v46 = (uint64_t)v93;
    outlined init with copy of PlatformItem(v98, v45 + *((int *)v93 + 5));
    v47 = (_OWORD *)(v2 + *(int *)(v26 + 24));
    v48 = v45 + *(int *)(v46 + 24);
    v49 = v47[1];
    *(_OWORD *)v48 = *v47;
    *(_OWORD *)(v48 + 16) = v49;
    *(_BYTE *)(v48 + 32) = 0;
    v50 = type metadata accessor for PlatformTextFieldAdaptor;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v45, v100, type metadata accessor for PlatformTextFieldAdaptor);
    type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, PlatformTextFieldAdaptor>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
  }
  swift_storeEnumTagMultiPayload();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, v50);
}

uint64_t PlatformTextFieldAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  char *v32;
  _QWORD **v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[344];
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(char **)(a2 + 40);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    v33 = &v31;
    v34 = a1;
    v35 = v3;
    MEMORY[0x1E0C80A78](v12, v13);
    v31 = &v31 - 4;
    *(&v31 - 2) = (_QWORD *)__ROR8__(v16, 32);
    swift_retain();
    v19 = v9;
    v20 = v10;
    v21 = v18;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    v22 = v21;
    v10 = v20;
    v9 = v19;
    v32 = v22;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    a1 = v34;
    swift_release();
    v3 = v35;
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);

  }
  else
  {
    v37 = *(_QWORD *)(a2 + 16);
    v38 = v17;
    v23 = v18;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 0);
  }
  objc_msgSend(a1, sel_setBorderStyle_, *(_QWORD *)(v3 + *(int *)(v10 + 20)));
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v15, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v15, (uint64_t)v9);
  v24 = (uint64_t)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>((uint64_t)v9, v24);
  swift_endAccess();
  v25 = v38;
  v26 = &v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  v27 = *(_QWORD *)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  *(_QWORD *)v26 = v37;
  *((_QWORD *)v26 + 1) = v25;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v27);
  v28 = type metadata accessor for PlatformTextFieldAdaptor(0);
  outlined init with copy of PlatformItem(v3 + *(int *)(v28 + 20), (uint64_t)v36);
  v29 = (uint64_t)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v36, v29);
  swift_endAccess();
  PlatformTextFieldCoordinator.update()();

  swift_release();
  return swift_release();
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance PlatformTextFieldAdaptor()
{
  uint64_t v0;
  id v1;
  void *v2;
  _BYTE v4[8];
  _BYTE v5[16];

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3DB8]), sel_init);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula((uint64_t)v4, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
  v5[8] = 0;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)v5);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)v5);
  objc_msgSend(v1, sel_setBorderStyle_, *(_QWORD *)(v0 + *(int *)(type metadata accessor for SystemTextFieldConfiguration(0) + 20)));
  v2 = (void *)MEMORY[0x18D75CC88](32, 0xE100000000000000);
  objc_msgSend(v1, sel_setText_, v2);

  return v1;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance PlatformTextFieldAdaptor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  id result;
  _BYTE v16[12];
  _BYTE v17[36];

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v16[-v7];
  v9 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v12, v13);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v12, (uint64_t)v8);
  outlined init with take of TableCellFormula(v2 + *(int *)(a1 + 24), (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for WeakSelectionBasedStorage<TextSelection>?);
  v14 = objc_allocWithZone((Class)type metadata accessor for PlatformTextFieldCoordinator(0));
  result = PlatformTextFieldCoordinator.init(configuration:selectionStorage:)((uint64_t)v8, (uint64_t)v17);
  *a2 = result;
  return result;
}

id TextViewAdaptor.makeUIView(context:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  NSAttributedString v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v29[6];
  void *v30;
  void *v31;

  v2 = type metadata accessor for Text.Resolved();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(a1 + 16);
  v6 = *(void **)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = *(void **)(a1 + 40);
  type metadata accessor for VerticalTextView();
  v10 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  swift_unknownObjectWeakInit();
  v11 = swift_unknownObjectWeakAssign();
  outlined init with take of TableCellFormula(v11, (uint64_t)&v30, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
  LOBYTE(v31) = 1;
  v29[0] = v9;
  PlatformTextFieldCoordinator.configure(field:)((uint64_t)&v30);
  outlined destroy of PlatformTextFieldCoordinator.FieldStorage((uint64_t)&v30);
  objc_msgSend(v10, sel_setBackgroundColor_, 0);
  objc_msgSend(v10, sel_setShowsVerticalScrollIndicator_, 0);
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0
    || (v12 = objc_msgSend(v10, sel_traitCollection),
        v13 = objc_msgSend(v12, sel_userInterfaceIdiom),
        v12,
        v13 != (id)6))
  {
    objc_msgSend(v10, sel_setTextContainerInset_, *MEMORY[0x1E0DC49E8], *(double *)(MEMORY[0x1E0DC49E8] + 8), *(double *)(MEMORY[0x1E0DC49E8] + 16), *(double *)(MEMORY[0x1E0DC49E8] + 24));
  }
  v14 = objc_msgSend(v10, sel_textContainer);
  objc_msgSend(v14, sel_setLineFragmentPadding_, 0.0);

  if (v8)
  {
    MEMORY[0x1E0C80A78](v15, v16);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage((uint64_t)v7, (uint64_t)v6, 1);
    v17 = v29[0];
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage((uint64_t)v7, (uint64_t)v6, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v7, (uint64_t)v6, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage((uint64_t)v7, (uint64_t)v6, 1);

    v7 = v30;
    v6 = v31;
  }
  else
  {
    v30 = v7;
    v31 = v6;
    swift_retain();
    swift_retain();
  }
  Text.Resolved.init()();
  v29[3] = v7;
  v29[4] = v6;
  v29[2] = 0;
  Text.resolve<A>(into:in:with:)();
  specialized UIKitTextInput.setDefaultAttributes(resolved:in:)((uint64_t)v5, (uint64_t)v7, (uint64_t)v6);
  v18 = Text.Resolved.attributedString.getter();
  if (v18)
  {
    v19 = (void *)v18;
    v20.super.isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;
    v21 = objc_msgSend(v10, sel_attributedText);
    if (!v21)
      goto LABEL_13;
    v22 = v21;
    v23 = objc_msgSend(v21, sel_string);

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    if (v24 == 32 && v26 == 0xE100000000000000)
    {

      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
LABEL_13:
      objc_msgSend(v10, sel_setAttributedText_, v20.super.isa);

  }
LABEL_15:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6BE8]);
  swift_release();
  swift_release();
  return v10;
}

uint64_t UIKitTextInput.setText(_:environment:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  objc_class *v19;
  Class isa;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(Class, uint64_t, uint64_t);
  objc_class *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v10 = type metadata accessor for Text.Resolved();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a3;
  v14 = a3[1];
  Text.Resolved.init()();
  v34 = v15;
  v35 = v14;
  v33 = 0;
  swift_bridgeObjectRetain();
  v32 = a1;
  Text.resolve<A>(into:in:with:)();
  swift_bridgeObjectRelease();
  v34 = v15;
  v35 = v14;
  v16 = UIKitTextInput.setDefaultAttributes(resolved:in:)((uint64_t)v13, &v34, a4, a5);
  v17 = (void *)Text.Resolved.attributedString.getter();
  if (v17)
  {
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 8);
    v19 = v17;
    isa = v19;
    if ((v18(a4, a5) & 1) != 0)
    {
      isa = NSAttributedString.replacingLineBreakModes(_:)(NSLineBreakByWordWrapping).super.isa;

    }
    v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    if (v21)
    {
      v22 = v21;
      HIDWORD(v31) = v16;
      v23 = objc_msgSend(v21, sel_string);

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      if (v24 == v32 && v26 == a2)
      {

        swift_bridgeObjectRelease();
        LOBYTE(v16) = BYTE4(v31);
        goto LABEL_11;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      LOBYTE(v16) = BYTE4(v31);
      if ((v27 & 1) != 0)
      {

        goto LABEL_11;
      }
    }
    v28 = *(void (**)(Class, uint64_t, uint64_t))(a5 + 32);
    v29 = isa;
    v28(isa, a4, a5);

    LOBYTE(v16) = 1;
  }
LABEL_11:
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE6BE8]);
  return v16 & 1;
}

uint64_t TextViewAdaptor.updateUIView(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[44];

  v3 = v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v31 - v8;
  v10 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  v18 = *(char **)(a2 + 40);
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    v33 = v31;
    v34 = a1;
    MEMORY[0x1E0C80A78](v12, v13);
    v31[1] = &v31[-4];
    v31[-2] = __ROR8__(v16, 32);
    swift_retain();
    v19 = v9;
    v20 = v3;
    v21 = v18;
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    v22 = v21;
    v3 = v20;
    v9 = v19;
    v32 = v22;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v16, v17, 1);

    v16 = v35[0];
    v17 = v35[1];
  }
  else
  {
    v23 = v18;
    outlined copy of RepresentableContextValues.EnvironmentStorage(v16, v17, 0);
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v15, type metadata accessor for SystemTextFieldConfiguration);
  v24 = v15[33];
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v15);
  specialized VerticalTextField.updateLimits(environment:axis:)(v16, v17, v24);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v15, type metadata accessor for SystemTextFieldConfiguration);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v15, (uint64_t)v9);
  v25 = (uint64_t)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration];
  swift_beginAccess();
  outlined assign with take of TextField<_TextFieldStyleLabel>((uint64_t)v9, v25);
  swift_endAccess();
  v26 = (uint64_t *)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  v27 = *(_QWORD *)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment];
  *v26 = v16;
  v26[1] = v17;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v27);
  v28 = type metadata accessor for TextViewAdaptor(0);
  outlined init with copy of PlatformItem(v3 + *(int *)(v28 + 20), (uint64_t)v35);
  v29 = (uint64_t)&v18[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  swift_beginAccess();
  outlined assign with take of PlatformItem((uint64_t)v35, v29);
  swift_endAccess();
  PlatformTextFieldCoordinator.update()();

  swift_release();
  return swift_release();
}

void specialized VerticalTextField.updateLimits(environment:axis:)(uint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  double v11;
  double v12;
  id v13;
  char *v14;
  double v15;
  double v16;
  double *v17;
  id v18;
  char *v19;
  double v20;
  double v21;
  double *v22;
  id v23;

  EnvironmentValues.lowerLineLimit.getter();
  v6 = v5;
  static Semantics.v4.getter();
  v7 = isLinkedOnOrAfter(_:)();
  EnvironmentValues.lineLimit.getter();
  v9 = v8;
  if ((v7 & 1) != 0)
    v6 &= a3;
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
    v10 = a3 & v9;
  else
    v10 = v9;
  if ((v6 & 1) == 0 || (v10 & 1) == 0)
  {
    EnvironmentValues.effectiveFont.getter();
    v23 = (id)Font.platformFont(in:)();
    swift_release();
    v11 = 0.0;
    v12 = 0.0;
    if ((v10 & 1) == 0)
    {
      type metadata accessor for CTFontRef(0);
      v13 = v23;
      v14 = v3;
      objc_msgSend(v13, sel_lineHeight);
      objc_msgSend(v13, sel_leading);
      static CTFontRef.limitedHeight(by:lineHeight:leading:)();
      v16 = v15;

      v12 = v16 + 0.0;
    }
    v17 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
    *v17 = v12;
    *((_BYTE *)v17 + 8) = v10 & 1;
    if ((v6 & 1) == 0)
    {
      type metadata accessor for CTFontRef(0);
      v18 = v23;
      v19 = v3;
      objc_msgSend(v18, sel_lineHeight);
      objc_msgSend(v18, sel_leading);
      static CTFontRef.limitedHeight(by:lineHeight:leading:)();
      v21 = v20;

      v11 = v21 + 0.0;
    }
    v22 = (double *)&v3[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
    *v22 = v11;
    *((_BYTE *)v22 + 8) = v6 & 1;

  }
}

uint64_t TextViewAdaptor._overrideSizeThatFits(_:in:uiView:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  _QWORD v64[7];

  v4 = v3;
  v8 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v41 - v14;
  v16 = *(_QWORD *)a2;
  v17 = *(unsigned __int8 *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(unsigned __int8 *)(a2 + 24);
  v49 = *(_QWORD *)a2;
  LOBYTE(v50) = v17;
  v51 = v18;
  LOBYTE(v52) = v19;
  result = _ProposedSize.width.getter();
  if ((v21 & 1) == 0)
  {
    v22 = result;
    static Semantics.v4.getter();
    result = isLinkedOnOrAfter(_:)();
    if ((result & 1) != 0)
    {
      *a1 = v22;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v4, (uint64_t)v15, type metadata accessor for SystemTextFieldConfiguration);
      v24 = *((_QWORD *)v15 + 9);
      v23 = *((_QWORD *)v15 + 10);
      v25 = *((_QWORD *)v15 + 11);
      v26 = *((_QWORD *)v15 + 12);
      v28 = *((_QWORD *)v15 + 13);
      v27 = *((_QWORD *)v15 + 14);
      v30 = *((_QWORD *)v15 + 15);
      v29 = *((_QWORD *)v15 + 16);
      v32 = *((_QWORD *)v15 + 17);
      v31 = *((_QWORD *)v15 + 18);
      v34 = *((_QWORD *)v15 + 19);
      v33 = *((_QWORD *)v15 + 20);
      v35 = *((_QWORD *)v15 + 21);
      v36 = v15[179];
      v48 = a3;
      v47 = a1;
      v46 = v4;
      v45 = v16;
      v44 = v17;
      v43 = v18;
      v42 = v19;
      if ((v36 & 1) != 0)
      {
        v37 = *((unsigned __int16 *)v15 + 88) | (v15[178] << 16);
        v49 = v24;
        v50 = v23;
        v51 = v25;
        v52 = v26;
        v53 = v28;
        v54 = v27;
        v55 = v30;
        v56 = v29;
        v57 = v32;
        v58 = v31;
        v59 = v34;
        v60 = v33;
        LOBYTE(v61) = v35 & 1;
        HIDWORD(v61) = HIDWORD(v35);
        v62 = v37 & 0xFF01;
        v63 = BYTE2(v37) & 1;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
        MEMORY[0x18D75B9C8](v64);
      }
      else
      {
        v49 = v24;
        v50 = v23;
        v51 = v25;
        v52 = v26;
        v53 = v28;
        v54 = v27;
        v55 = v30;
        v56 = v29;
        v57 = v32;
        v58 = v31;
        LOBYTE(v59) = v34 & 1;
        HIDWORD(v59) = HIDWORD(v34);
        LOWORD(v60) = v33 & 0xFF01;
        BYTE2(v60) = BYTE2(v33) & 1;
        v61 = v35;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
        State.wrappedValue.getter();
      }
      v38 = v64[2];
      v41[1] = v64[1];
      v39 = v64[6];
      outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v15);
      outlined consume of TextFieldState.FormatActions?(v38);
      outlined consume of TextFieldState.FormatActions?(v39);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, (uint64_t)v11, type metadata accessor for SystemTextFieldConfiguration);
      v40 = v11[33];
      outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v11);
      LOBYTE(v49) = v44;
      LOBYTE(v64[0]) = v42;
      specialized VerticalTextField.updateVerticalSize(_:in:text:measureText:)((uint64_t)v47, v45, v44, v43, v42, v40);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance TextViewAdaptor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  _OWORD *v14;
  __int128 v15;
  id v16;
  id result;
  _OWORD v18[2];
  char v19;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v18 - v7;
  v9 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v12, v13);
  outlined init with take of TextField<_TextFieldStyleLabel>((uint64_t)v12, (uint64_t)v8);
  v14 = (_OWORD *)(v2 + *(int *)(a1 + 24));
  v15 = v14[1];
  v18[0] = *v14;
  v18[1] = v15;
  v19 = 0;
  v16 = objc_allocWithZone((Class)type metadata accessor for PlatformTextFieldCoordinator(0));
  result = PlatformTextFieldCoordinator.init(configuration:selectionStorage:)((uint64_t)v8, (uint64_t)v18);
  *a2 = result;
  return result;
}

uint64_t PlatformTextFieldCoordinator.textInput.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[8];
  unsigned __int8 v6;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v1, (uint64_t)v5);
  v2 = 0;
  if (v6 != 255)
  {
    if ((v6 & 1) != 0)
    {
      outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
      v2 = MEMORY[0x18D760234](&v4);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
    }
    else
    {
      outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)&v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
      v2 = MEMORY[0x18D760234](&v4);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v4, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    }
  }
  return v2;
}

id PlatformTextFieldCoordinator.init(configuration:selectionStorage:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v10;
  _BYTE v11[216];

  *(_OWORD *)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment] = xmmword_187BFE310;
  v5 = &v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label];
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v11);
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = xmmword_187BFE310;
  *(_QWORD *)v5 = &outlined read-only object #0 of PlatformTextFieldCoordinator.init(configuration:selectionStorage:);
  *((_QWORD *)v5 + 1) = 0;
  *((_DWORD *)v5 + 4) = 0;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v11, (uint64_t)(v5 + 24));
  *((_QWORD *)v5 + 38) = 0;
  v5[312] = 1;
  *((_QWORD *)v5 + 40) = 0;
  *((_QWORD *)v5 + 41) = 0;
  v6 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage];
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_BYTE *)(v6 + 32) = 1;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating] = 0;
  v7 = &v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field];
  *(_QWORD *)v7 = 0;
  v7[8] = -1;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate] = 0;
  v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing] = 0;
  outlined init with copy of TextField<_TextFieldStyleLabel>(a1, (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration]);
  outlined init with take of TableCellFormula(a2, v6, (uint64_t (*)(_QWORD))type metadata accessor for WeakSelectionBasedStorage<TextSelection>?);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for PlatformTextFieldCoordinator(0);
  v8 = objc_msgSendSuper2(&v10, sel_init);
  outlined destroy of TextField<_TextFieldStyleLabel>(a1);
  return v8;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.updateText(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[4];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t countAndFlagsBits;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  __int16 v126;
  char v127;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v81 - v5;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    v7 = v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v7, (uint64_t)v6);
    v9 = *((_QWORD *)v6 + 9);
    v8 = *((_QWORD *)v6 + 10);
    v11 = *((_QWORD *)v6 + 11);
    v10 = *((_QWORD *)v6 + 12);
    v13 = *((_QWORD *)v6 + 13);
    v12 = *((_QWORD *)v6 + 14);
    v14 = *((_QWORD *)v6 + 15);
    v15 = *((_QWORD *)v6 + 16);
    v16 = *((_QWORD *)v6 + 17);
    v17 = *((_QWORD *)v6 + 18);
    v18 = *((_QWORD *)v6 + 19);
    v19 = *((_QWORD *)v6 + 20);
    v20 = *((_QWORD *)v6 + 21);
    v21 = *((unsigned __int16 *)v6 + 88) | (v6[178] << 16);
    LODWORD(v83) = v6[179];
    v99 = v14;
    v86 = v11;
    v91 = v13;
    v92 = v9;
    v98 = v16;
    v95 = v17;
    v88 = v18;
    v85 = v19;
    v87 = v21;
    v96 = v20;
    v97 = v12;
    v84 = (uint64_t)object;
    v90 = v8;
    v94 = v10;
    v89 = v15;
    v100 = v9;
    v101 = v8;
    v102 = v11;
    v103 = v10;
    v104 = v13;
    v105 = v12;
    v106 = v14;
    v107 = v15;
    v108 = v16;
    v109 = v17;
    if ((v83 & 1) != 0)
    {
      v110 = v18;
      v111 = v19;
      LOBYTE(v112) = v20 & 1;
      HIDWORD(v112) = HIDWORD(v20);
      v113 = v21 & 0xFF01;
      v114 = BYTE2(v21) & 1;
      v22 = v18;
      v23 = v10;
      v24 = v11;
      v25 = v8;
      swift_bridgeObjectRetain();
      v78 = v22;
      v26 = v89;
      outlined copy of StateOrBinding<TextFieldState>(v92, v25, v24, v23, v13, v97, v99, v89, v98, v17, v78, v19, v20, v21, 1);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v115);
    }
    else
    {
      LOBYTE(v110) = v18 & 1;
      HIDWORD(v110) = HIDWORD(v18);
      LOWORD(v111) = v19 & 0xFF01;
      BYTE2(v111) = BYTE2(v19) & 1;
      v112 = v20;
      v27 = v20;
      v28 = v18;
      v29 = v13;
      v30 = v10;
      v31 = v11;
      v32 = v8;
      swift_bridgeObjectRetain();
      v79 = v28;
      v26 = v89;
      outlined copy of StateOrBinding<TextFieldState>(v9, v32, v31, v30, v29, v97, v99, v89, v98, v17, v79, v19, v27, v87, 0);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
      State.wrappedValue.getter();
    }
    swift_bridgeObjectRelease();
    v33 = v116;
    v34 = v121;
    v36 = v122;
    v35 = v123;
    v82 = v120;
    v81[3] = v119;
    v81[2] = v118;
    v81[1] = v117;
    if ((v83 & 1) != 0)
    {
      v100 = countAndFlagsBits;
      v101 = v84;
      v102 = v116;
      v103 = v117;
      v104 = v118;
      v105 = v119;
      v106 = v120;
      v107 = v121;
      v108 = v122;
      v109 = v123;
      LOBYTE(v110) = v124;
      HIDWORD(v110) = v125;
      LOWORD(v111) = v126;
      BYTE2(v111) = v127;
      countAndFlagsBits = v122;
      v37 = v92;
      swift_retain();
      v83 = v35;
      v38 = v90;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of TextFieldState.FormatActions?(v91);
      v39 = v98;
      v40 = v95;
      v41 = v88;
      v42 = v85;
      outlined copy of TextFieldState.FormatActions?(v98);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v33);
      outlined consume of TextFieldState.FormatActions?(v82);
      v43 = v87;
      v44 = v96;
      v77 = v40;
      v80 = v41;
      v75 = v39;
      v45 = v37;
      v46 = v38;
      v47 = v86;
      v48 = v94;
      v49 = v91;
      v50 = v97;
      v51 = v99;
      v52 = v89;
      outlined consume of StateOrBinding<TextFieldState>(v45, v46, v86, v94, v91, v97, v99, v89, v75, v77, v80, v42, v96, v87, 1);
      outlined consume of StateOrBinding<TextFieldState>(v92, v90, v47, v48, v49, v50, v51, v52, v98, v95, v88, v42, v44, v43, 1);
    }
    else
    {
      v100 = countAndFlagsBits;
      v101 = v84;
      v102 = v116;
      v103 = v117;
      v104 = v118;
      v105 = v119;
      v106 = v120;
      v107 = v121;
      v108 = v122;
      v109 = v123;
      LOBYTE(v110) = v124;
      HIDWORD(v110) = v125;
      LOWORD(v111) = v126;
      BYTE2(v111) = v127;
      if (v96)
      {
        swift_bridgeObjectRetain();
        v81[0] = v34;
        v53 = v97;
        outlined copy of TextFieldState.FormatActions?(v86);
        v54 = v99;
        countAndFlagsBits = v36;
        v55 = v98;
        outlined copy of TextFieldState.FormatActions?(v99);
        swift_retain();
        v83 = v35;
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        v56 = v90;
        outlined consume of TextFieldState.FormatActions?(v33);
        outlined consume of TextFieldState.FormatActions?(v82);
        v57 = v87;
        v58 = v85;
        v59 = v88;
        v76 = v55;
        v60 = v92;
        v61 = v86;
        v62 = v91;
        v63 = v54;
        v64 = v89;
        outlined consume of StateOrBinding<TextFieldState>(v92, v56, v86, v94, v91, v53, v63, v89, v76, v95, v88, v85, v96, v87, 0);
        v65 = v94;
        v66 = v98;
        v67 = v99;
        v68 = v64;
        v69 = v56;
        v70 = v61;
        v71 = v53;
        v72 = v62;
        v73 = v95;
        v74 = v96;
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v33);
        outlined consume of TextFieldState.FormatActions?(v82);
        v74 = 0;
        v68 = v26;
        v67 = v99;
        v71 = v97;
        v72 = v91;
        v65 = v94;
        v70 = v86;
        v69 = v90;
        v60 = v92;
        v66 = v98;
        v73 = v95;
        v59 = v88;
        v58 = v85;
        v57 = v87;
      }
      outlined consume of StateOrBinding<TextFieldState>(v60, v69, v70, v65, v72, v71, v67, v68, v66, v73, v59, v58, v74, v57, 0);
    }
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v6);
  }
}

uint64_t closure #1 in PlatformTextFieldCoordinator.didBeginEditing()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  int v113;
  __int16 v114;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v67 - v4;
  v6 = a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v6, (uint64_t)v5);
  v7 = *((_QWORD *)v5 + 9);
  v8 = *((_QWORD *)v5 + 10);
  v9 = *((_QWORD *)v5 + 11);
  v85 = *((_QWORD *)v5 + 12);
  v84 = *((_QWORD *)v5 + 13);
  v83 = *((_QWORD *)v5 + 14);
  v10 = *((_QWORD *)v5 + 16);
  v86 = *((_QWORD *)v5 + 15);
  v11 = *((_QWORD *)v5 + 17);
  v12 = *((_QWORD *)v5 + 18);
  v13 = *((_QWORD *)v5 + 19);
  v14 = *((_QWORD *)v5 + 20);
  v15 = *((_QWORD *)v5 + 21);
  v16 = *((unsigned __int16 *)v5 + 88) | (v5[178] << 16);
  LODWORD(v72) = v5[179];
  v77 = v9;
  v82 = v10;
  v76 = v7;
  v80 = v11;
  v79 = v12;
  v75 = v13;
  v74 = v14;
  v73 = v16;
  v81 = v15;
  v78 = v8;
  if ((v72 & 1) != 0)
  {
    v87 = v7;
    v88 = v8;
    v89 = v9;
    v90 = v85;
    v17 = v84;
    v91 = v84;
    v92 = v83;
    v93 = v86;
    v94 = v10;
    v95 = v11;
    v96 = v12;
    v97 = v13;
    v98 = v14;
    LOBYTE(v99) = v15 & 1;
    HIDWORD(v99) = HIDWORD(v15);
    v100 = v16 & 0xFF01;
    v101 = BYTE2(v16) & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v17);
    outlined copy of TextFieldState.FormatActions?(v11);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v102);
    v18 = v108;
    if (v108)
    {
LABEL_3:
      v19 = v78;
      v20 = v85;
      v21 = v84;
      v22 = v83;
      v18(1);
      v23 = (uint64_t)v108;
      goto LABEL_6;
    }
  }
  else
  {
    v87 = v7;
    v88 = v8;
    v89 = v9;
    v90 = v85;
    v91 = v84;
    v92 = v83;
    v93 = v86;
    v94 = v10;
    v95 = v11;
    v96 = v12;
    LOBYTE(v97) = v13 & 1;
    HIDWORD(v97) = HIDWORD(v13);
    LOWORD(v98) = v14 & 0xFF01;
    BYTE2(v98) = BYTE2(v14) & 1;
    v99 = v15;
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v9);
    outlined copy of TextFieldState.FormatActions?(v86);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    swift_retain();
    State.wrappedValue.getter();
    v18 = v108;
    if (v108)
      goto LABEL_3;
  }
  v19 = v78;
  v20 = v85;
  v21 = v84;
  v22 = v83;
  v23 = 0;
LABEL_6:
  v24 = v72;
  v25 = v104;
  v72 = v110;
  v71 = v109;
  v70 = v107;
  v69 = v106;
  if ((v24 & 1) != 0)
  {
    v87 = v102;
    v88 = v103;
    v89 = v104;
    v90 = v105;
    v91 = v106;
    v92 = v107;
    v93 = v23;
    v94 = v109;
    v95 = v110;
    v96 = v111;
    LOBYTE(v97) = v112;
    HIDWORD(v97) = v113;
    LOWORD(v98) = v114;
    BYTE2(v98) = HIBYTE(v114) & 1;
    v68 = v111;
    v26 = v76;
    swift_retain();
    v67 = v23;
    v27 = v19;
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of TextFieldState.FormatActions?(v21);
    v28 = v80;
    v29 = v79;
    v30 = v75;
    v31 = v74;
    outlined copy of TextFieldState.FormatActions?(v80);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(v25);
    outlined consume of TextFieldState.FormatActions?(v67);
    v32 = v73;
    v33 = v81;
    v65 = v29;
    v66 = v30;
    v64 = v28;
    v34 = v26;
    v35 = v27;
    v36 = v77;
    v37 = v85;
    v38 = v84;
    v39 = v83;
    v40 = v86;
    v41 = v82;
    outlined consume of StateOrBinding<TextFieldState>(v34, v35, v77, v85, v84, v83, v86, v82, v64, v65, v66, v31, v81, v73, 1);
    outlined consume of StateOrBinding<TextFieldState>(v76, v78, v36, v37, v38, v39, v40, v41, v80, v79, v75, v31, v33, v32, 1);
  }
  else
  {
    v87 = v102;
    v88 = v103;
    v89 = v104;
    v68 = v105;
    v90 = v105;
    v91 = v106;
    v92 = v107;
    v93 = v23;
    v94 = v109;
    v95 = v110;
    v96 = v111;
    LOBYTE(v97) = v112;
    HIDWORD(v97) = v113;
    LOWORD(v98) = v114;
    BYTE2(v98) = HIBYTE(v114) & 1;
    if (v81)
    {
      swift_bridgeObjectRetain();
      outlined copy of TextFieldState.FormatActions?(v77);
      outlined copy of TextFieldState.FormatActions?(v86);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      v42 = v21;
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v25);
      outlined consume of TextFieldState.FormatActions?(v23);
      v43 = v73;
      v44 = v74;
      v45 = v75;
      v46 = v79;
      v47 = v76;
      v48 = v78;
      v49 = v20;
      v50 = v42;
      v51 = v83;
      v52 = v86;
      v53 = v82;
      outlined consume of StateOrBinding<TextFieldState>(v76, v78, v77, v49, v50, v83, v86, v82, v80, v79, v75, v74, v81, v73, 0);
      v54 = v77;
      v55 = v85;
      v56 = v48;
      v57 = v51;
      v58 = v84;
      v59 = v53;
      v60 = v52;
      v61 = v80;
      v62 = v81;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v25);
      outlined consume of TextFieldState.FormatActions?(v23);
      v62 = 0;
      v59 = v82;
      v60 = v86;
      v57 = v22;
      v58 = v21;
      v55 = v20;
      v54 = v77;
      v56 = v19;
      v47 = v76;
      v61 = v80;
      v46 = v79;
      v45 = v75;
      v44 = v74;
      v43 = v73;
    }
    outlined consume of StateOrBinding<TextFieldState>(v47, v56, v54, v55, v58, v57, v60, v59, v61, v46, v45, v44, v62, v43, 0);
  }
  return outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v5);
}

uint64_t closure #1 in PlatformTextFieldCoordinator.didEndEditing()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(_QWORD, _QWORD);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int16 v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  void (*v124)(_QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char v129;
  unsigned __int8 v130;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v83 - v4;
  v6 = a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  outlined init with copy of TextField<_TextFieldStyleLabel>(v6, (uint64_t)v5);
  v7 = *((_QWORD *)v5 + 9);
  v8 = *((_QWORD *)v5 + 10);
  v9 = *((_QWORD *)v5 + 11);
  v10 = *((_QWORD *)v5 + 12);
  v12 = *((_QWORD *)v5 + 13);
  v11 = *((_QWORD *)v5 + 14);
  v14 = *((_QWORD *)v5 + 15);
  v13 = *((_QWORD *)v5 + 16);
  v15 = *((_QWORD *)v5 + 17);
  v16 = *((_QWORD *)v5 + 18);
  v17 = *((_QWORD *)v5 + 19);
  v18 = *((_QWORD *)v5 + 20);
  v19 = *((_QWORD *)v5 + 21);
  v20 = *((unsigned __int16 *)v5 + 88) | (v5[178] << 16);
  LODWORD(v90) = v5[179];
  v95 = v12;
  v92 = v9;
  v101 = v8;
  v97 = v7;
  v96 = v15;
  v100 = v16;
  v94 = v17;
  v99 = v18;
  v91 = v20;
  v102 = v19;
  v93 = v10;
  v103 = v7;
  v104 = v8;
  v105 = v9;
  v106 = v10;
  v107 = (uint64_t (*)(_QWORD, _QWORD))v12;
  v108 = v11;
  v109 = v14;
  v110 = v13;
  v111 = v15;
  v112 = v16;
  if ((v90 & 1) != 0)
  {
    v113 = v17;
    v114 = v18;
    LOBYTE(v115) = v19 & 1;
    HIDWORD(v115) = HIDWORD(v19);
    v116 = v20 & 0xFF01;
    v117 = BYTE2(v20) & 1;
    v21 = v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v22 = v12;
    v23 = v11;
    v24 = v14;
    v25 = v13;
    outlined copy of TextFieldState.FormatActions?(v22);
    outlined copy of TextFieldState.FormatActions?(v21);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v118);
  }
  else
  {
    LOBYTE(v113) = v17 & 1;
    HIDWORD(v113) = HIDWORD(v17);
    LOWORD(v114) = v18 & 0xFF01;
    BYTE2(v114) = BYTE2(v18) & 1;
    v115 = v19;
    swift_bridgeObjectRetain();
    v23 = v11;
    outlined copy of TextFieldState.FormatActions?(v9);
    v24 = v14;
    v25 = v13;
    outlined copy of TextFieldState.FormatActions?(v14);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    swift_retain();
    State.wrappedValue.getter();
  }
  static Semantics.v3.getter();
  v26 = isLinkedOnOrAfter(_:)();
  if (v120)
  {
    v27 = v122(v118, v119);
    if (v28)
    {
      v29 = v27;
      v30 = v28;
      swift_bridgeObjectRelease();
      v118 = v29;
      v119 = v30;
    }
  }
  v98 = v23;
  v31 = v93;
  if (v124)
  {
    v124(0);
    v32 = (uint64_t)v124;
  }
  else
  {
    v32 = 0;
  }
  v33 = v90;
  v34 = v26 ^ 1;
  v35 = v120;
  v36 = v125;
  v37 = v127;
  v90 = v123;
  v89 = v122;
  v88 = v121;
  if ((v33 & 1) != 0)
  {
    v103 = v118;
    v104 = v119;
    v105 = v120;
    v106 = v121;
    v107 = v122;
    v108 = v123;
    v109 = v32;
    v110 = v125;
    v111 = v126;
    v112 = v127;
    LOBYTE(v113) = v34 & 1;
    HIDWORD(v113) = v128;
    LOBYTE(v114) = v129;
    *(_WORD *)((char *)&v114 + 1) = v130;
    v84 = v126;
    v38 = v97;
    swift_retain();
    v83 = v32;
    v39 = v101;
    swift_retain();
    swift_bridgeObjectRetain();
    v87 = v24;
    v85 = v25;
    outlined copy of TextFieldState.FormatActions?(v95);
    v86 = v37;
    v40 = v96;
    v41 = v100;
    v42 = v99;
    outlined copy of TextFieldState.FormatActions?(v96);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    outlined consume of TextFieldState.FormatActions?(v35);
    outlined consume of TextFieldState.FormatActions?(v83);
    v43 = v91;
    v44 = v102;
    v82 = v42;
    v45 = v94;
    v81 = v41;
    v79 = v40;
    v46 = v38;
    v47 = v39;
    v48 = v92;
    v49 = v93;
    v50 = v95;
    v51 = v98;
    v52 = v87;
    v53 = v85;
    outlined consume of StateOrBinding<TextFieldState>(v46, v47, v92, v93, v95, v98, v87, v85, v79, v81, v94, v82, v102, v91, 1);
    outlined consume of StateOrBinding<TextFieldState>(v97, v101, v48, v49, v50, v51, v52, v53, v96, v100, v45, v99, v44, v43, 1);
  }
  else
  {
    v103 = v118;
    v104 = v119;
    v105 = v120;
    v106 = v121;
    v107 = v122;
    v108 = v123;
    v109 = v32;
    v110 = v125;
    v111 = v126;
    v112 = v127;
    LOBYTE(v113) = v34 & 1;
    HIDWORD(v113) = v128;
    LOBYTE(v114) = v129;
    *(_WORD *)((char *)&v114 + 1) = v130;
    if (v102)
    {
      swift_bridgeObjectRetain();
      v86 = v37;
      v54 = v31;
      v84 = v36;
      v55 = v95;
      outlined copy of TextFieldState.FormatActions?(v92);
      v87 = v24;
      v56 = v25;
      v57 = v96;
      outlined copy of TextFieldState.FormatActions?(v24);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      v58 = v35;
      v59 = v55;
      outlined consume of TextFieldState.FormatActions?(v58);
      v60 = v56;
      outlined consume of TextFieldState.FormatActions?(v32);
      v61 = v91;
      v62 = v99;
      v63 = v94;
      v80 = v57;
      v64 = v92;
      v65 = v98;
      v66 = v87;
      outlined consume of StateOrBinding<TextFieldState>(v97, v101, v92, v54, v59, v98, v87, v60, v80, v100, v94, v99, v102, v91, 0);
      v67 = v97;
      v68 = v65;
      v69 = v66;
      v70 = v60;
      v71 = v54;
      v72 = v59;
      v73 = v100;
      v74 = v96;
      v75 = v64;
      v76 = v101;
      v77 = v102;
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v35);
      outlined consume of TextFieldState.FormatActions?(v32);
      v77 = 0;
      v70 = v25;
      v69 = v24;
      v68 = v98;
      v72 = v95;
      v71 = v31;
      v75 = v92;
      v76 = v101;
      v67 = v97;
      v74 = v96;
      v73 = v100;
      v63 = v94;
      v62 = v99;
      v61 = v91;
    }
    outlined consume of StateOrBinding<TextFieldState>(v67, v76, v75, v71, v72, v68, v69, v70, v74, v73, v63, v62, v77, v61, 0);
  }
  return outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v5);
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.didChangeSelection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _UNKNOWN **v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t (__cdecl *v47)();
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  unsigned int v59;
  id v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  id v77;
  _UNKNOWN **v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86[8];
  unsigned __int8 v87;
  char v88[8];

  v1 = type metadata accessor for TextSelection.Indices(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v81 = (uint64_t *)((char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for TextSelection(0);
  v84 = *(_QWORD *)(v4 - 8);
  v85 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v82 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v74 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v83 = (char *)&v74 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v74 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v74 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v74 - v28;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v74 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TextSelection?>(0);
  v35 = v34;
  v36 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v37);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    v79 = v14;
    v80 = (uint64_t)&v74 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
    v39 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
    swift_beginAccess();
    outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v39, (uint64_t)v86);
    if (v87 != 255)
    {
      if ((v87 & 1) != 0)
      {
        outlined init with take of TableCellFormula((uint64_t)v86, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
        v40 = (void *)MEMORY[0x18D760234](v88);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
        if (!v40)
          return;
        v41 = &protocol witness table for VerticalTextView;
      }
      else
      {
        outlined init with take of TableCellFormula((uint64_t)v86, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
        v40 = (void *)MEMORY[0x18D760234](v88);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
        if (!v40)
          return;
        v41 = &protocol witness table for UITextField;
      }
      v78 = v41;
      v42 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
      swift_beginAccess();
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v42 + *(int *)(v43 + 56), (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v33, 1, v35) == 1)
      {

        v44 = type metadata accessor for Binding<TextSelection?>?;
        v45 = (uint64_t)v33;
LABEL_28:
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))v44);
        return;
      }
      outlined init with take of TableCellFormula((uint64_t)v33, v80, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      ObjectType = swift_getObjectType();
      v47 = (uint64_t (__cdecl *)())v78[24];
      v76 = ObjectType;
      v77 = v40;
      v48 = v47();
      if ((v50 & 1) == 0)
      {
        v51 = v48;
        v52 = v49;
        MEMORY[0x18D75B9C8](v35);
        v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
        v54 = v53(v29, 1, v85);
        v75 = v53;
        if (v54)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
          v55 = v52;
LABEL_13:
          v56 = (uint64_t)v81;
          *v81 = v51;
          *(_QWORD *)(v56 + 8) = v55;
          swift_storeEnumTagMultiPayload();
          MEMORY[0x18D75B9C8](v35);
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
          v57 = v85;
          v58 = v75;
          v59 = v75(v21, 1, v85);
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
          if (v59 == 1)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v56, (uint64_t)v25, type metadata accessor for TextSelection.Indices);
            v25[*(int *)(v57 + 20)] = 0;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v25, 0, 1, v57);
          }
          else if (!v58(v25, 1, v57))
          {
            outlined assign with copy of TextSelection.Indices(v56, (uint64_t)v25);
          }
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v56, type metadata accessor for TextSelection.Indices);
          dispatch thunk of AnyLocation.set(_:transaction:)();
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
          goto LABEL_18;
        }
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v7, type metadata accessor for TextSelection);
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
        v70 = TextSelection.range.getter();
        v74 = v71;
        v73 = v72;
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for TextSelection);
        v55 = v52;
        if ((v73 & 1) != 0 || (v70 ^ (unint64_t)v51) >> 14 || (v74 ^ v52) >= 0x4000)
          goto LABEL_13;
      }
LABEL_18:
      v60 = v77;
      v61 = ((uint64_t (*)(uint64_t))v78[27])(v76);
      if (v61)
        v62 = 2 * (v61 == 1);
      else
        v62 = 1;
      v63 = (uint64_t)v83;
      MEMORY[0x18D75B9C8](v35);
      v64 = v85;
      v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
      if (v65(v63, 1, v85))
      {
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
      }
      else
      {
        v66 = *(unsigned __int8 *)(v63 + *(int *)(v64 + 20));
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v63, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
        if (v66 == v62)
        {
          outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v80, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);

          return;
        }
      }
      v67 = (uint64_t)v79;
      v68 = v80;
      MEMORY[0x18D75B9C8](v35);
      if (v65(v67, 1, v64))
      {
        v69 = v82;
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v67, v82, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v69, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);

        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v68, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
        v45 = v67;
        v44 = type metadata accessor for TextSelection?;
      }
      else
      {
        *(_BYTE *)(v67 + *(int *)(v64 + 20)) = v62;
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v67, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);

        v44 = type metadata accessor for Binding<TextSelection?>;
        v45 = v68;
      }
      goto LABEL_28;
    }
  }
}

void __swiftcall PlatformTextFieldCoordinator.presentEditMenu(with:)(UIMenu_optional *__return_ptr retstr, Swift::OpaquePointer with)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  UIMenu *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  UIMenu *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  Swift::String v37;
  Swift::String v38;
  UIMenu *v39;
  uint64_t *v40;
  Swift::OpaquePointer v41;
  uint64_t v42;
  UIMenu *rawValue;
  UIMenu *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  UIImage_optional v53;
  UIImage_optional v54;

  v3 = v2;
  v5 = type metadata accessor for TextSelection(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (uint64_t *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = PlatformTextFieldCoordinator.textInput.getter();
  if (!v9)
    goto LABEL_11;
  v11 = (void *)v9;
  v12 = v10;
  ObjectType = swift_getObjectType();
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 192))(ObjectType, v12);
  if ((v16 & 1) != 0)
  {

LABEL_11:
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    v54.value.super.isa = 0;
    v54.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v39, v38, (Swift::String_optional)0, v54, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)with._rawValue, v41);
    return;
  }
  v17 = v14;
  v18 = v15;
  rawValue = (UIMenu *)with._rawValue;
  MEMORY[0x1E0C80A78](v14, v15);
  v40 = v3;
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for ((_:))?, 255, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  v19 = v44;
  if (!v44)
  {

    with._rawValue = rawValue;
    goto LABEL_11;
  }
  v20 = v45;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = v21;
  *v8 = v17;
  v8[1] = v18;
  type metadata accessor for TextSelection.Indices(0);
  swift_storeEnumTagMultiPayload();
  v23 = *(int *)(v5 + 20);
  *((_BYTE *)v8 + v23) = 0;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 216))(ObjectType, v12);
  v26 = 2 * (v24 == 1);
  if (!v24)
    v26 = 1;
  *((_BYTE *)v8 + v23) = v26;
  MEMORY[0x1E0C80A78](v24, v25);
  *(&v42 - 4) = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList);
  *(&v42 - 3) = v22;
  v40 = v8;
  static Update.ensure<A>(_:)();
  v27 = v44;
  v42 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v28 = MEMORY[0x1E0DEE9D8];
  v52 = MEMORY[0x1E0DEE9D8];
  v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  LOBYTE(v44) = 0;
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, 255, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v30 = type metadata accessor for MenuVisitor.MenuStackGroup();
  v31 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_187BF9830;
  if (one-time initialization token for empty != -1)
    swift_once();
  v34 = __swift_project_value_buffer(v30, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v33 + v32, (uint64_t (*)(_QWORD))type metadata accessor for MenuVisitor.MenuStackGroup);
  v35 = (char)v44;
  v44 = 0;
  LOBYTE(v45) = 0;
  v46 = MEMORY[0x1E0DEE9E0];
  v47 = v29;
  v48 = v28;
  v49 = MEMORY[0x1E0DEE9E0];
  v50 = v35;
  v51 = v33;
  MenuVisitor.visit(_:uniqueNames:)((uint64_t)v27, &v52);
  swift_bridgeObjectRelease();
  v36 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = rawValue;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v36);
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v53.value.super.isa = 0;
  v53.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v44, v37, (Swift::String_optional)0, v53, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v44, v41);

  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for TextSelection);
}

uint64_t *closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *result;

  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_selectionStorage + 32) & 1) != 0)
  {
    v3 = 0;
    result = 0;
  }
  else
  {
    type metadata accessor for (_:)();
    result = (uint64_t *)AGGraphGetWeakValue();
    if (result)
    {
      v3 = *result;
      result = (uint64_t *)swift_retain();
    }
    else
    {
      v3 = 0;
    }
  }
  *a2 = v3;
  a2[1] = result;
  return result;
}

uint64_t closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = type metadata accessor for TextSelection(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v9, type metadata accessor for TextSelection);
  v10 = a1(v9);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for TextSelection);
  *a3 = v10;
  return result;
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.triggerPrimaryAction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(_QWORD, _QWORD);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void);
  uint64_t v122;
  BOOL v123;
  int v124;
  __int16 v125;
  char v126;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v76 - v3;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isViewUpdating) & 1) == 0)
  {
    v84 = v0;
    v5 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
    swift_beginAccess();
    outlined init with copy of TextField<_TextFieldStyleLabel>(v5, (uint64_t)v4);
    v6 = *((_QWORD *)v4 + 9);
    v7 = *((_QWORD *)v4 + 10);
    v8 = *((_QWORD *)v4 + 11);
    v9 = *((_QWORD *)v4 + 12);
    v10 = *((_QWORD *)v4 + 13);
    v11 = *((_QWORD *)v4 + 14);
    v13 = *((_QWORD *)v4 + 15);
    v12 = *((_QWORD *)v4 + 16);
    v15 = *((_QWORD *)v4 + 17);
    v14 = *((_QWORD *)v4 + 18);
    v17 = *((_QWORD *)v4 + 19);
    v16 = *((_QWORD *)v4 + 20);
    v18 = *((_QWORD *)v4 + 21);
    v19 = *((unsigned __int16 *)v4 + 88) | (v4[178] << 16);
    LODWORD(v82) = v4[179];
    v86 = v8;
    v93 = v7;
    v89 = v6;
    v96 = v15;
    v92 = v14;
    v88 = v17;
    v87 = v16;
    v83 = v19;
    v97 = v18;
    v95 = v9;
    v90 = v11;
    v85 = v10;
    v91 = v13;
    v98 = v6;
    v99 = v7;
    v100 = v8;
    v101 = v9;
    v102 = (uint64_t (*)(_QWORD, _QWORD))v10;
    v103 = v11;
    v104 = v13;
    v105 = v12;
    v106 = v15;
    v107 = v14;
    if ((v82 & 1) != 0)
    {
      v108 = v17;
      v109 = v16;
      LOBYTE(v110) = v18 & 1;
      HIDWORD(v110) = HIDWORD(v18);
      v111 = v19 & 0xFF01;
      v112 = BYTE2(v19) & 1;
      v20 = v15;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v21 = v12;
      outlined copy of TextFieldState.FormatActions?(v10);
      outlined copy of TextFieldState.FormatActions?(v20);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
      MEMORY[0x18D75B9C8](&v113);
    }
    else
    {
      LOBYTE(v108) = v17 & 1;
      HIDWORD(v108) = HIDWORD(v17);
      LOWORD(v109) = v16 & 0xFF01;
      BYTE2(v109) = BYTE2(v16) & 1;
      v110 = v18;
      swift_bridgeObjectRetain();
      outlined copy of TextFieldState.FormatActions?(v8);
      v21 = v12;
      outlined copy of TextFieldState.FormatActions?(v13);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
      swift_retain();
      State.wrappedValue.getter();
    }
    static Semantics.v3.getter();
    v123 = (isLinkedOnOrAfter(_:)() & 1) == 0;
    if (v115)
    {
      v22 = v117(v113, v114);
      if (v23)
      {
        v24 = v22;
        v25 = v23;
        swift_bridgeObjectRelease();
        v113 = v24;
        v114 = v25;
      }
    }
    v94 = v21;
    v26 = v95;
    v27 = v85;
    v28 = v90;
    if (v119)
    {
      v121();
      v29 = v119;
    }
    else
    {
      v29 = 0;
    }
    v30 = v82;
    v32 = v120;
    v31 = v121;
    v33 = v122;
    v82 = v118;
    v81 = v117;
    v80 = v116;
    v79 = v115;
    if ((v30 & 1) != 0)
    {
      v98 = v113;
      v99 = v114;
      v100 = v115;
      v101 = v116;
      v102 = v117;
      v103 = v118;
      v104 = v29;
      v105 = v120;
      v106 = (uint64_t)v121;
      v107 = v122;
      LOBYTE(v108) = v123;
      HIDWORD(v108) = v124;
      LOWORD(v109) = v125;
      BYTE2(v109) = v126;
      v78 = v120;
      v34 = v89;
      swift_retain();
      v77 = v31;
      v35 = v93;
      swift_retain();
      swift_bridgeObjectRetain();
      v36 = v27;
      outlined copy of TextFieldState.FormatActions?(v27);
      v37 = v96;
      v38 = v92;
      v76 = v33;
      v39 = v88;
      v40 = v87;
      outlined copy of TextFieldState.FormatActions?(v96);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of TextFieldState.FormatActions?(v79);
      outlined consume of TextFieldState.FormatActions?(v29);
      v41 = v83;
      v42 = v97;
      v73 = v38;
      v75 = v39;
      v72 = v37;
      v43 = v34;
      v44 = v35;
      v45 = v86;
      v46 = v95;
      v47 = v90;
      v48 = v91;
      v49 = v94;
      outlined consume of StateOrBinding<TextFieldState>(v43, v44, v86, v95, v36, v90, v91, v94, v72, v73, v75, v40, v97, v83, 1);
      outlined consume of StateOrBinding<TextFieldState>(v89, v93, v45, v46, v36, v47, v48, v49, v96, v92, v88, v40, v42, v41, 1);
    }
    else
    {
      v98 = v113;
      v99 = v114;
      v100 = v115;
      v101 = v116;
      v102 = v117;
      v103 = v118;
      v104 = v29;
      v105 = v120;
      v106 = (uint64_t)v121;
      v107 = v122;
      LOBYTE(v108) = v123;
      HIDWORD(v108) = v124;
      LOWORD(v109) = v125;
      BYTE2(v109) = v126;
      if (v97)
      {
        swift_bridgeObjectRetain();
        v77 = v31;
        v76 = v33;
        v78 = v32;
        v50 = v28;
        outlined copy of TextFieldState.FormatActions?(v86);
        v51 = v92;
        outlined copy of TextFieldState.FormatActions?(v91);
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v79);
        outlined consume of TextFieldState.FormatActions?(v29);
        v52 = v83;
        v53 = v87;
        v54 = v88;
        v74 = v51;
        v55 = v89;
        v56 = v93;
        v57 = v86;
        v27 = v85;
        v58 = v50;
        v59 = v91;
        v60 = v94;
        outlined consume of StateOrBinding<TextFieldState>(v89, v93, v86, v95, v85, v58, v91, v94, v96, v74, v88, v87, v97, v83, 0);
        v61 = v92;
        v62 = v95;
        v63 = v96;
        v64 = v90;
        v65 = v59;
        v66 = v60;
        v67 = v57;
        v68 = v56;
        v69 = v97;
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of TextFieldState.FormatActions?(v79);
        outlined consume of TextFieldState.FormatActions?(v29);
        v69 = 0;
        v66 = v94;
        v65 = v91;
        v64 = v28;
        v62 = v26;
        v67 = v86;
        v68 = v93;
        v55 = v89;
        v63 = v96;
        v61 = v92;
        v54 = v88;
        v53 = v87;
        v52 = v83;
      }
      outlined consume of StateOrBinding<TextFieldState>(v55, v68, v67, v62, v27, v64, v65, v66, v63, v61, v54, v53, v69, v52, 0);
    }
    outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v4);
    v70 = (void *)PlatformTextFieldCoordinator.textInput.getter();
    if (v70)
    {
      v71 = v70;
      objc_msgSend(v70, sel_endEditing_, 1);

    }
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
    specialized SubmitTriggerSource.updateTriggersIfNeeded()();
  }
}

Swift::Void __swiftcall PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v61 - v7;
  v9 = v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration;
  swift_beginAccess();
  ObjectType = v9;
  outlined init with copy of TextField<_TextFieldStyleLabel>(v9, (uint64_t)v8);
  v11 = *((_QWORD *)v8 + 9);
  v10 = *((_QWORD *)v8 + 10);
  v12 = *((_QWORD *)v8 + 11);
  v13 = *((_QWORD *)v8 + 12);
  v15 = *((_QWORD *)v8 + 13);
  v14 = *((_QWORD *)v8 + 14);
  v17 = *((_QWORD *)v8 + 15);
  v16 = *((_QWORD *)v8 + 16);
  v19 = *((_QWORD *)v8 + 17);
  v18 = *((_QWORD *)v8 + 18);
  v21 = *((_QWORD *)v8 + 19);
  v20 = *((_QWORD *)v8 + 20);
  v22 = *((_QWORD *)v8 + 21);
  v23 = v8[179];
  v65 = v4;
  v66 = v0;
  if ((v23 & 1) != 0)
  {
    v24 = *((unsigned __int16 *)v8 + 88) | (v8[178] << 16);
    v67 = v11;
    v68 = v10;
    v69 = v12;
    v70 = v13;
    v71 = v15;
    v72 = v14;
    v73 = v17;
    v74 = v16;
    v75 = v19;
    v76 = v18;
    v77 = v21;
    v78 = v20;
    LOBYTE(v79) = v22 & 1;
    HIDWORD(v79) = HIDWORD(v22);
    v80 = v24 & 0xFF01;
    v81 = BYTE2(v24) & 1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v82);
  }
  else
  {
    v67 = v11;
    v68 = v10;
    v69 = v12;
    v70 = v13;
    v71 = v15;
    v72 = v14;
    v73 = v17;
    v74 = v16;
    v75 = v19;
    v76 = v18;
    LOBYTE(v77) = v21 & 1;
    HIDWORD(v77) = HIDWORD(v21);
    LOWORD(v78) = v20 & 0xFF01;
    BYTE2(v78) = BYTE2(v20) & 1;
    v79 = v22;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.wrappedValue.getter();
  }
  v25 = v83;
  v64 = v82;
  v26 = v84;
  v27 = v85;
  outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v8);
  outlined consume of TextFieldState.FormatActions?(v26);
  outlined consume of TextFieldState.FormatActions?(v27);
  v28 = v66;
  v29 = PlatformTextFieldCoordinator.textInput.getter();
  if (!v29
    || (v31 = (void *)v29,
        v32 = v30,
        v33 = swift_getObjectType(),
        v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v33, v32),
        v31,
        !v34))
  {
    swift_bridgeObjectRelease();
LABEL_10:
    v39 = *(_QWORD *)(v28 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
    if (v39 != 1)
    {
      v40 = *(_QWORD *)(v28 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8);
      swift_retain();
      swift_retain();
      v41 = PlatformTextFieldCoordinator.textInput.getter();
      if (v41)
      {
        v43 = (void *)v41;
        v64 = v42;
        v66 = v40;
        v44 = (uint64_t)v65;
        outlined init with copy of TextField<_TextFieldStyleLabel>(ObjectType, (uint64_t)v65);
        v45 = *(_QWORD *)(v44 + 80);
        v46 = *(_QWORD *)(v44 + 88);
        v47 = *(_QWORD *)(v44 + 96);
        v49 = *(_QWORD *)(v44 + 104);
        v48 = *(_QWORD *)(v44 + 112);
        v51 = *(_QWORD *)(v44 + 120);
        v50 = *(_QWORD *)(v44 + 128);
        v53 = *(_QWORD *)(v44 + 136);
        v52 = *(_QWORD *)(v44 + 144);
        v55 = *(_QWORD *)(v44 + 152);
        v54 = *(_QWORD *)(v44 + 160);
        v56 = *(_QWORD *)(v44 + 168);
        if ((*(_BYTE *)(v44 + 179) & 1) != 0)
        {
          v57 = *(unsigned __int16 *)(v44 + 176) | (*(unsigned __int8 *)(v44 + 178) << 16);
          v67 = *(_QWORD *)(v44 + 72);
          v68 = v45;
          v69 = v46;
          v70 = v47;
          v71 = v49;
          v72 = v48;
          v73 = v51;
          v74 = v50;
          v75 = v53;
          v76 = v52;
          v77 = v55;
          v78 = v54;
          LOBYTE(v79) = v56 & 1;
          HIDWORD(v79) = HIDWORD(v56);
          v80 = v57 & 0xFF01;
          v81 = BYTE2(v57) & 1;
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
          MEMORY[0x18D75B9C8](&v82);
        }
        else
        {
          v67 = *(_QWORD *)(v44 + 72);
          v68 = v45;
          v69 = v46;
          v70 = v47;
          v71 = v49;
          v72 = v48;
          v73 = v51;
          v74 = v50;
          v75 = v53;
          v76 = v52;
          LOBYTE(v77) = v55 & 1;
          HIDWORD(v77) = HIDWORD(v55);
          LOWORD(v78) = v54 & 0xFF01;
          BYTE2(v78) = BYTE2(v54) & 1;
          v79 = v56;
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<TextFieldState>, (uint64_t)&type metadata for TextFieldState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
          State.wrappedValue.getter();
        }
        ObjectType = swift_getObjectType();
        v62 = v82;
        v59 = v84;
        v61 = v83;
        v60 = v85;
        outlined destroy of TextField<_TextFieldStyleLabel>((uint64_t)v65);
        outlined consume of TextFieldState.FormatActions?(v59);
        outlined consume of TextFieldState.FormatActions?(v60);
        v67 = v39;
        v68 = v66;
        UIKitTextInput.setText(_:environment:)(v62, v61, &v67, ObjectType, v64);

        swift_bridgeObjectRelease();
      }
      outlined consume of EnvironmentValues?(v39);
    }
    return;
  }
  v35 = objc_msgSend(v34, sel_string);

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = v37;

  if (v64 == v36 && v25 == v38)
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0)
    goto LABEL_10;
}

uint64_t PlatformTextFieldCoordinator.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of TextField<_TextFieldStyleLabel>(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_configuration);
  outlined consume of EnvironmentValues?(*(_QWORD *)(v0
                                                   + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment));
  outlined destroy of PlatformItem(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_label);
  return outlined destroy of AccessibilityTableContext?(v0 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage);
}

id PlatformTextFieldCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PlatformTextFieldCoordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PlatformTextFieldCoordinator()
{
  return type metadata accessor for PlatformTextFieldCoordinator(0);
}

uint64_t type metadata accessor for PlatformTextFieldCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformTextFieldCoordinator);
}

void type metadata completion function for PlatformTextFieldCoordinator()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

Swift::Bool __swiftcall PlatformTextFieldCoordinator.textField(_:shouldChangeCharactersIn:replacementString:)(UITextField *_, __C::_NSRange shouldChangeCharactersIn, Swift::String replacementString)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int length;
  Swift::Int location;
  uint64_t v9;
  char v10;
  void *v12;
  NSString *v13;
  NSString *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _BYTE v21[8];

  object = replacementString._object;
  countAndFlagsBits = replacementString._countAndFlagsBits;
  length = shouldChangeCharactersIn.length;
  location = shouldChangeCharactersIn.location;
  v9 = v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(v9, (uint64_t)v19);
  if (BYTE8(v19[0]) == 255)
    goto LABEL_2;
  if ((BYTE8(v19[0]) & 1) != 0)
  {
    outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
    v12 = (void *)MEMORY[0x18D760234](v21);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
    if (v12)
      goto LABEL_8;
LABEL_2:
    v10 = 1;
    return v10 & 1;
  }
  outlined init with take of TableCellFormula((uint64_t)v19, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
  v12 = (void *)MEMORY[0x18D760234](v21);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
  if (!v12)
    goto LABEL_2;
LABEL_8:
  v13 = -[UITextField text](_, sel_text);
  if (!v13)
  {

    goto LABEL_2;
  }
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v18 == 1)
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
  }
  else
  {
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      outlined copy of EnvironmentValues?(v18);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
      swift_retain();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
      outlined copy of EnvironmentValues?(v18);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
      swift_retain();
      PropertyList.subscript.getter();
    }
    swift_release();
    outlined consume of EnvironmentValues?(v18);
  }
  swift_getObjectType();
  v10 = specialized UIKitTextInput.shouldChangeText(in:text:replacement:validator:)(location, length, v15, v17, countAndFlagsBits, (unint64_t)object, (uint64_t)v19);

  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
  return v10 & 1;
}

Swift::Bool __swiftcall PlatformTextFieldCoordinator.textView(_:shouldChangeTextIn:replacementText:)(UITextView *_, __C::_NSRange shouldChangeTextIn, Swift::String replacementText)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t (**v9)(uint64_t);
  NSString *v10;
  NSString *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[5];

  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate) & 1) != 0)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v5 == 1)
  {
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v21, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
    v4 = 1;
    goto LABEL_15;
  }
  object = replacementText._object;
  countAndFlagsBits = replacementText._countAndFlagsBits;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>, (uint64_t)&type metadata for TextInputValidationKey, (uint64_t)&protocol witness table for TextInputValidationKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  outlined consume of EnvironmentValues?(v5);
  if (!*((_QWORD *)&v22 + 1))
    goto LABEL_12;
  outlined init with take of OptionalBinaryInteger(&v21, (uint64_t)v24);
  v9 = (uint64_t (**)(uint64_t))__swift_project_boxed_opaque_existential_1(v24, v24[3]);
  v10 = -[UITextView text](_, sel_text);
  if (!v10)
  {
    __break(1u);
    return (char)v10;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = *v9;
  v16 = Range<>.init(_:in:)();
  if ((v18 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v19 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v16, v17, countAndFlagsBits, (unint64_t)object, v12, v14);
    v4 = v15(v19);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
LABEL_15:
  LOBYTE(v10) = v4 & 1;
  return (char)v10;
}

uint64_t @objc PlatformTextFieldCoordinator.textField(_:shouldChangeCharactersIn:replacementString:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(id, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;
  v15 = a3;
  v16 = a1;
  LOBYTE(a7) = a7(v15, a4, a5, v12, v14);

  swift_bridgeObjectRelease();
  return a7 & 1;
}

uint64_t VerticalTextView.uiDefaultTextAttributes.didset()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  Class isa;
  uint64_t result;
  _QWORD v9[6];

  v1 = v0;
  v2 = objc_msgSend(v0, sel_textStorage);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in VerticalTextView.uiDefaultTextAttributes.didset;
  *(_QWORD *)(v4 + 24) = v3;
  v9[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ();
  v9[5] = v4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextStorage?) -> ();
  v9[3] = &block_descriptor_28;
  v5 = _Block_copy(v9);
  v6 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_coordinateEditing_, v5);
  _Block_release(v5);

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setTypingAttributes_, isa);
  swift_release();

  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in VerticalTextView.uiDefaultTextAttributes.didset(void *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;

  if (a1)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    v2 = a1;
    swift_bridgeObjectRetain();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v3 = v2;
    v4 = NSAttributedString.range.getter();
    v6 = v5;

    objc_msgSend(v3, sel_setAttributes_range_, isa, v4, v6);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSTextStorage?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  v4 = a2;
  v3(a2);

}

void VerticalTextView.pressesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  objc_class *ObjectType;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  Class isa;
  objc_super v12;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = v3;
  specialized Sequence.first(where:)(a1, (uint64_t)v7);
  v9 = v8;

  if (v9)
  {

    v10 = MEMORY[0x18D760234](&v7[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate]);
    if (v10)
    {
      *(_BYTE *)(v10 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate) = 1;
      swift_unknownObjectRelease();
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress, 0x1E0DC3B60, MEMORY[0x1E0DEFCF8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v12.receiver = v7;
  v12.super_class = ObjectType;
  objc_msgSendSuper2(&v12, sel_pressesBegan_withEvent_, isa, a2);

}

void VerticalTextView.pressesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  Class isa;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress, 0x1E0DC3B60, MEMORY[0x1E0DEFCF8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  v11.receiver = v2;
  v11.super_class = ObjectType;
  objc_msgSendSuper2(&v11, sel_pressesEnded_withEvent_, isa, a2);

  v7 = v2;
  specialized Sequence.first(where:)(a1, (uint64_t)v7);
  v9 = v8;

  if (v9)
  {

    v10 = MEMORY[0x18D760234](&v7[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate]);
    if (v10)
    {
      *(_BYTE *)(v10 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_ignoreNextUpdate) = 0;
      PlatformTextFieldCoordinator.triggerPrimaryAction()();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t @objc VerticalTextView.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIColor and conformance UIColor((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress, 0x1E0DC3B60, MEMORY[0x1E0DEFCF8]);
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in VerticalTextView.isSubmission(_:)(id *a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  result = (uint64_t)objc_msgSend(*a1, sel_key);
  if (result)
  {
    v4 = (void *)result;
    v5 = objc_msgSend((id)result, sel_characters);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v9 = v6 == 10 && v8 == 0xE100000000000000;
    if (v9
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v6 == 13 ? (v10 = v8 == 0xE100000000000000) : (v10 = 0), v10))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
LABEL_18:

        return 0;
      }
    }
    if ((objc_msgSend(v4, sel_modifierFlags) & 0x80000) != 0)
      goto LABEL_18;
    v12 = MEMORY[0x18D760234](a2 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate);
    if (!v12)
      goto LABEL_18;
    v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
    if (v13 == 1)
    {
      swift_unknownObjectRelease();

      return 1;
    }
    else
    {
      if (*(_QWORD *)(v12 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        outlined copy of EnvironmentValues?(v13);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey);
        swift_retain();
        swift_retain();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release();
      }
      else
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
        outlined copy of EnvironmentValues?(v13);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SubmitsOnReturnKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SubmitsOnReturnKey>, (uint64_t)&type metadata for SubmitsOnReturnKey, (uint64_t)&protocol witness table for SubmitsOnReturnKey);
        swift_retain();
        PropertyList.subscript.getter();
      }
      swift_release();
      outlined consume of EnvironmentValues?(v13);
      swift_unknownObjectRelease();

      return v14;
    }
  }
  return result;
}

id VerticalTextView.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = &v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = &v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6 = OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes;
  v7 = v1;
  *(_QWORD *)&v1[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  v10.receiver = v7;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t VerticalTextView.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of weak FallbackResponderProvider?(v0 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for VerticalTextView()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(a1, a2, a3, MEMORY[0x1E0DEEF30]);
}

uint64_t assignWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;

  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = v4 == 1;
    swift_unknownObjectWeakCopyInit();
    *(_BYTE *)(a1 + 8) = v5;
  }
  return a1;
}

uint64_t initializeWithTake for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(a1, a2, a3, MEMORY[0x1E0DEEF58]);
}

uint64_t initializeWithCopy for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unsigned int v4;
  BOOL v5;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 >= 2)
    v4 = *(_DWORD *)a2 + 2;
  v5 = v4 == 1;
  result = a4();
  *(_BYTE *)(result + 8) = v5;
  return result;
}

uint64_t assignWithTake for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;

  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2)
      v4 = *(_DWORD *)a2 + 2;
    v5 = v4 == 1;
    swift_unknownObjectWeakTakeInit();
    *(_BYTE *)(a1 + 8) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PlatformTextFieldCoordinator.FieldStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 8);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t destructiveInjectEnumTag for PlatformTextFieldCoordinator.FieldStorage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PlatformTextFieldCoordinator.FieldStorage()
{
  return &type metadata for PlatformTextFieldCoordinator.FieldStorage;
}

uint64_t getEnumTagSinglePayload for PlainTextFieldStyle.BodyContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PlainTextFieldStyle.BodyContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for PlainTextFieldStyle.BodyContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PlainTextFieldStyle.BodyContent);
}

uint64_t initializeBufferWithCopyOfBuffer for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned __int8 v45;
  int v46;
  uint64_t v47;
  char *v48;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = v4;
  v6 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    v47 = v5;
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v39 = a2[17];
    v40 = a2[18];
    v41 = a2[19];
    v42 = a2[20];
    v43 = a2[21];
    v45 = *((_BYTE *)a2 + 178);
    v46 = *((unsigned __int16 *)a2 + 88);
    v44 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v39, v40, v41, v42, v43, v46 | (v45 << 16), v44);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v39;
    *(_QWORD *)(a1 + 144) = v40;
    *(_QWORD *)(a1 + 152) = v41;
    *(_QWORD *)(a1 + 160) = v42;
    *(_QWORD *)(a1 + 168) = v43;
    *(_BYTE *)(a1 + 178) = v45;
    *(_WORD *)(a1 + 176) = v46;
    *(_BYTE *)(a1 + 179) = v44;
    v22 = *(int *)(v47 + 56);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v24[1];
      *v23 = *v24;
      v23[1] = v29;
      v30 = *(int *)(v26 + 32);
      v48 = (char *)v23 + v30;
      v31 = (char *)v24 + v30;
      v32 = type metadata accessor for TextSelection(0);
      v33 = *(_QWORD *)(v32 - 8);
      v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_retain();
      swift_retain();
      if (v34(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v36 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v48, v31, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v48, v31, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v48[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t initializeWithCopy for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  char *v45;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  v38 = *(_QWORD *)(a2 + 144);
  v39 = *(_QWORD *)(a2 + 152);
  v40 = *(_QWORD *)(a2 + 160);
  v41 = *(_QWORD *)(a2 + 168);
  v43 = *(unsigned __int8 *)(a2 + 178);
  v44 = *(unsigned __int16 *)(a2 + 176);
  v42 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v18, v17, v37, v38, v39, v40, v41, v44 | (v43 << 16), v42);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v37;
  *(_QWORD *)(a1 + 144) = v38;
  *(_QWORD *)(a1 + 152) = v39;
  *(_QWORD *)(a1 + 160) = v40;
  *(_QWORD *)(a1 + 168) = v41;
  *(_BYTE *)(a1 + 178) = v43;
  *(_WORD *)(a1 + 176) = v44;
  *(_BYTE *)(a1 + 179) = v42;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v20 = *(int *)(v19 + 56);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = v22[1];
    *v21 = *v22;
    v21[1] = v27;
    v28 = *(int *)(v24 + 32);
    v45 = (char *)v21 + v28;
    v29 = (char *)v22 + v28;
    v30 = type metadata accessor for TextSelection(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_retain();
    swift_retain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v45, v29, v35);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      v45[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v45, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v21, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithCopy for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  char *v84;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 128);
  v76 = *(_QWORD *)(a2 + 136);
  v77 = *(_QWORD *)(a2 + 144);
  v78 = *(_QWORD *)(a2 + 152);
  v79 = *(_QWORD *)(a2 + 160);
  v80 = *(_QWORD *)(a2 + 168);
  v82 = *(unsigned __int16 *)(a2 + 176);
  v83 = *(unsigned __int8 *)(a2 + 178);
  v81 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v76, v77, v78, v79, v80, v82 | (v83 << 16), v81);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_OWORD *)(a1 + 136);
  v35 = *(_OWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 168);
  v37 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v38 = *(_BYTE *)(a1 + 179);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v76;
  *(_QWORD *)(a1 + 144) = v77;
  *(_QWORD *)(a1 + 152) = v78;
  *(_QWORD *)(a1 + 160) = v79;
  *(_QWORD *)(a1 + 168) = v80;
  *(_WORD *)(a1 + 176) = v82;
  *(_BYTE *)(a1 + 178) = v83;
  *(_BYTE *)(a1 + 179) = v81;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v40 = *(int *)(v39 + 56);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v19) = v46(v41, 1, v43);
  v47 = v46(v42, 1, v44);
  if ((_DWORD)v19)
  {
    if (!v47)
    {
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      v48 = *(int *)(v44 + 32);
      v84 = &v41[v48];
      v49 = &v42[v48];
      v50 = type metadata accessor for TextSelection(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_retain();
      swift_retain();
      if (v52(v49, 1, v50))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v84, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        v68 = v51;
        v69 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          v71 = v84;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v84, v49, v70);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          v71 = v84;
          memcpy(v84, v49, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        v71[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v50);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      return a1;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    v55 = *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64);
    v56 = v41;
    v57 = v42;
LABEL_15:
    memcpy(v56, v57, v55);
    return a1;
  }
  *(_QWORD *)v41 = *(_QWORD *)v42;
  swift_retain();
  swift_release();
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_retain();
  swift_release();
  v58 = *(int *)(v44 + 32);
  v59 = &v41[v58];
  v60 = &v42[v58];
  v61 = type metadata accessor for TextSelection(0);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
  v64 = v63(v59, 1, v61);
  v65 = v63(v60, 1, v61);
  if (v64)
  {
    if (!v65)
    {
      v66 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v59, v60, v67);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      return a1;
    }
    goto LABEL_24;
  }
  if (v65)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    v55 = *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64);
    v56 = v59;
    v57 = v60;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, type metadata accessor for TextSelection.Indices);
    v74 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v59, v60, v75);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
  }
  v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
  return a1;
}

uint64_t initializeWithTake for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = *(int *)(v5 + 56);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *(int *)(v10 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for PlainTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
    {
      v6 = *(_BYTE *)(a2 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_WORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 178);
  v14 = *(_BYTE *)(a2 + 179);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 136);
  v24 = *(_OWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v27 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 178) = v13;
  *(_WORD *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 179) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v29 = *(int *)(v28 + 56);
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v30, 1, v32);
  v37 = v35(v31, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      v38 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v38;
      v39 = *(int *)(v33 + 32);
      v40 = &v30[v39];
      v41 = &v31[v39];
      v42 = type metadata accessor for TextSelection(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v59 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v40, v41, v60);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      return a1;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v46 = *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64);
    v47 = v30;
    v48 = v31;
LABEL_13:
    memcpy(v47, v48, v46);
    return a1;
  }
  *(_QWORD *)v30 = *(_QWORD *)v31;
  swift_release();
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_release();
  v49 = *(int *)(v33 + 32);
  v50 = &v30[v49];
  v51 = &v31[v49];
  v52 = type metadata accessor for TextSelection(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      v57 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v50, v51, v58);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      v50[*(int *)(v52 + 20)] = v51[*(int *)(v52 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      return a1;
    }
    goto LABEL_22;
  }
  if (v56)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    v46 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
    v47 = v50;
    v48 = v51;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, type metadata accessor for TextSelection.Indices);
    v63 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32))(v50, v51, v64);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
  }
  v50[*(int *)(v52 + 20)] = v51[*(int *)(v52 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for RoundedBorderTextFieldStyle.BodyContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RoundedBorderTextFieldStyle.BodyContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RoundedBorderTextFieldStyle.BodyContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for RoundedBorderTextFieldStyle.BodyContent);
}

uint64_t associated type witness table accessor for View.Body : View in PlainTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in RoundedBorderTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SystemTextField(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for SystemTextField);
}

void type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<SystemTextField, _AlignmentLayout>, (void (*)(uint64_t))type metadata accessor for SystemTextField);
}

uint64_t type metadata accessor for SystemTextFieldConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SystemTextFieldConfiguration);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>(255);
    v2[0] = &protocol witness table for SystemTextField;
    v2[1] = MEMORY[0x1E0CE3590];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t specialized UIKitTextInput.setDefaultAttributes(resolved:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  id v24[5];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = v3;
  Text.ResolvedProperties.init()();
  *(_QWORD *)&v25 = a2;
  *((_QWORD *)&v25 + 1) = a3;
  v24[0] = 0;
  v7 = Text.Resolved.nsAttributes(content:in:with:properties:)();
  if (!*(_QWORD *)(v7 + 16))
  {
    v25 = 0u;
    v26 = 0u;
    goto LABEL_8;
  }
  v8 = (void *)*MEMORY[0x1E0DC1178];
  swift_bridgeObjectRetain();
  v9 = v8;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v11 & 1) == 0)
  {
    v25 = 0u;
    v26 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v25);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v26 + 1))
  {
LABEL_8:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v25, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    goto LABEL_9;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = v24[0];
    objc_msgSend(v24[0], sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    v13 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
    swift_dynamicCast();
    v14 = v24[0];
    objc_msgSend(v24[0], sel_setLineBreakMode_, 0);
    objc_msgSend(v24[0], sel_setLineBreakStrategy_, 2);
    *((_QWORD *)&v26 + 1) = v13;
    *(id *)&v25 = v24[0];
    outlined init with take of Any(&v25, v24);
    v15 = v9;
    v16 = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v15, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
LABEL_9:
  v18 = OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes;
  v19 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized static Dictionary.Keys.== infix(_:_:)(v19, v7);
  v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = specialized Sequence.allSatisfy(_:)(v19, v19, v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if ((v22 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v31 = v40;
      v32 = v41;
      v33 = v42;
      v27 = v36;
      v28 = v37;
      v29 = v38;
      v30 = v39;
      v25 = v34;
      v26 = v35;
      outlined release of Text.ResolvedProperties(&v25);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v4 + v18) = v7;
  swift_bridgeObjectRelease();
  VerticalTextView.uiDefaultTextAttributes.didset();
  v31 = v40;
  v32 = v41;
  v33 = v42;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v25 = v34;
  v26 = v35;
  outlined release of Text.ResolvedProperties(&v25);
  return 1;
}

uint64_t UIKitTextInput.setDefaultAttributes(resolved:in:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  char v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  id v26[5];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v6 = *a2;
  v7 = a2[1];
  Text.ResolvedProperties.init()();
  *(_QWORD *)&v27 = v6;
  *((_QWORD *)&v27 + 1) = v7;
  v26[0] = 0;
  v8 = Text.Resolved.nsAttributes(content:in:with:properties:)();
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  swift_bridgeObjectRetain();
  if ((v9(a3, a4) & 1) == 0)
    goto LABEL_2;
  if (!*(_QWORD *)(v8 + 16))
  {
    v27 = 0u;
    v28 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v10 = (id)*MEMORY[0x1E0DC1178];
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) == 0)
  {
    v27 = 0u;
    v28 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v11, (uint64_t)&v27);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_11:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
    goto LABEL_12;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = v26[0];
    objc_msgSend(v26[0], sel_mutableCopy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    v14 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
    swift_dynamicCast();
    v15 = v26[0];
    objc_msgSend(v26[0], sel_setLineBreakMode_, 0);
    objc_msgSend(v26[0], sel_setLineBreakStrategy_, 2);
    *((_QWORD *)&v28 + 1) = v14;
    *(id *)&v27 = v26[0];
    outlined init with take of Any(&v27, v26);
    v16 = v10;
    v17 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v16, isUniquelyReferenced_nonNull_native);

LABEL_2:
    swift_bridgeObjectRelease();
  }
LABEL_12:
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  specialized static Dictionary.Keys.== infix(_:_:)(v20, v8);
  v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v23 = swift_bridgeObjectRetain();
    v24 = specialized Sequence.allSatisfy(_:)(v23, v19, v8);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if ((v24 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v33 = v42;
      v34 = v43;
      v35 = v44;
      v29 = v38;
      v30 = v39;
      v31 = v40;
      v32 = v41;
      v27 = v36;
      v28 = v37;
      outlined release of Text.ResolvedProperties(&v27);
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 80))(v8, a3, a4);
  v33 = v42;
  v34 = v43;
  v35 = v44;
  v29 = v38;
  v30 = v39;
  v31 = v40;
  v32 = v41;
  v27 = v36;
  v28 = v37;
  outlined release of Text.ResolvedProperties(&v27);
  return 1;
}

void UIKitTextInput.setPlaceholderText(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  void (*v8)(id, uint64_t, uint64_t);
  id v9;
  void *v10;
  __int128 v11;
  __int128 v12;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 1) == 0
    || (uint64_t)objc_msgSend(a1, sel_length) < 1)
  {
    goto LABEL_7;
  }
  if (objc_msgSend(a1, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E0DC1140], 0, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of AccessibilityTableContext?((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
LABEL_7:
    v6 = a1;
    goto LABEL_8;
  }
  v11 = 0u;
  v12 = 0u;
  outlined destroy of AccessibilityTableContext?((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  v6 = v10;
  v7 = objc_msgSend((id)objc_opt_self(), sel_placeholderTextColor);
  *((_QWORD *)&v12 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(_QWORD *)&v11 = v7;
  NSMutableAttributedString.addUniformAttribute(_:value:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
LABEL_8:
  v8 = *(void (**)(id, uint64_t, uint64_t))(a3 + 56);
  v9 = v6;
  v8(v6, a2, a3);

}

uint64_t UIKitTextInput.setSelection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;

  type metadata accessor for TextSelection?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TextSelection(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v14, type metadata accessor for TextSelection);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 192))(a2, a3);
    v19 = v18;
    v21 = v20;
    v22 = TextSelection.range.getter();
    if ((v21 & 1) != 0)
    {
      if ((v24 & 1) != 0)
      {
LABEL_10:
        v15 = type metadata accessor for TextSelection;
        v16 = (uint64_t)v14;
        return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v16, v15);
      }
    }
    else if ((v24 & 1) == 0 && !((v22 ^ (unint64_t)v17) >> 14) && (v23 ^ v19) < 0x4000)
    {
      goto LABEL_10;
    }
    v25 = TextSelection.range.getter();
    (*(void (**)(uint64_t))(a3 + 200))(v25);
    goto LABEL_10;
  }
  v15 = (uint64_t (*)(_QWORD))type metadata accessor for TextSelection?;
  v16 = (uint64_t)v9;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v16, v15);
}

_BYTE *UIKitTextInput.setAffinity(_:)(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;

  if (*result)
  {
    v3 = *result != 1;
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 216))(a2, a3);
    if ((_BYTE *)v3 != result)
      return (_BYTE *)(*(uint64_t (**)(_BOOL8, uint64_t, uint64_t))(a3 + 224))(v3, a2, a3);
  }
  return result;
}

void specialized static Dictionary.Keys.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    v15 = v9;
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_30;
      goto LABEL_7;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v16 >= v8)
      goto LABEL_30;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v15 + 2;
      if (v15 + 2 >= v8)
        goto LABEL_30;
      v17 = *(_QWORD *)(v4 + 8 * v9);
      if (!v17)
      {
        v9 = v15 + 3;
        if (v15 + 3 >= v8)
          goto LABEL_30;
        v17 = *(_QWORD *)(v4 + 8 * v9);
        if (!v17)
        {
          v9 = v15 + 4;
          if (v15 + 4 >= v8)
            goto LABEL_30;
          v17 = *(_QWORD *)(v4 + 8 * v9);
          if (!v17)
          {
            v9 = v15 + 5;
            if (v15 + 5 >= v8)
              goto LABEL_30;
            v17 = *(_QWORD *)(v4 + 8 * v9);
            if (!v17)
              break;
          }
        }
      }
    }
LABEL_26:
    v7 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v9 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_30:
      outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
      return;
    }
LABEL_7:
    v12 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    specialized __RawDictionaryStorage.find<A>(_:)(v12);
    v14 = v13;

    if ((v14 & 1) == 0)
      goto LABEL_30;
  }
  v18 = v15 + 6;
  if (v15 + 6 >= v8)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
    v9 = v15 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v8)
      goto LABEL_30;
    v17 = *(_QWORD *)(v4 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_32:
  __break(1u);
}

void PlatformTextFieldCoordinator.configure(field:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(_QWORD);
  _BYTE v9[24];
  _BYTE v10[16];

  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(a1, (uint64_t)v10);
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_field;
  swift_beginAccess();
  outlined assign with take of PlatformTextFieldCoordinator.FieldStorage?((uint64_t)v10, v3);
  swift_endAccess();
  outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(a1, (uint64_t)v9);
  if ((v9[8] & 1) != 0)
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
    v4 = (char *)MEMORY[0x18D760234](v10);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, sel_setDelegate_, v1);
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>);
      *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDelegate + 8] = &protocol witness table for PlatformTextFieldCoordinator;
      swift_unknownObjectWeakAssign();

      return;
    }
    v8 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<VerticalTextView>;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>);
    v6 = (void *)MEMORY[0x18D760234](v10);
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, sel_setDelegate_, v1);
      objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v1, sel_textChanged_, 0x20000);
      objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 0x2000);

    }
    v8 = (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<UITextField>;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, v8);
}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.getter in conformance VerticalTextView()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.setter in conformance VerticalTextView(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16VerticalTextView_uiDefaultTextAttributes) = a1;
  swift_bridgeObjectRelease();
  return VerticalTextView.uiDefaultTextAttributes.didset();
}

uint64_t sub_187446138()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in VerticalTextView.uiDefaultTextAttributes.didset(void *a1)
{
  closure #1 in VerticalTextView.uiDefaultTextAttributes.didset(a1);
}

uint64_t sub_187446164()
{
  return swift_deallocObject();
}

void type metadata accessor for TextInputValidation?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for TextInputValidation?, 255, (uint64_t (*)(uint64_t))type metadata accessor for TextInputValidation, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t type metadata accessor for TextInputValidation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TextInputValidation;
  if (!lazy cache variable for type metadata for TextInputValidation)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TextInputValidation);
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  char v19;
  id v20;
  id v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  int64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v26 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_26;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v13 >= v27)
      goto LABEL_38;
    v14 = *(_QWORD *)(v26 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v27)
        goto LABEL_38;
      v14 = *(_QWORD *)(v26 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v27)
          goto LABEL_38;
        v14 = *(_QWORD *)(v26 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v27)
            goto LABEL_38;
          v14 = *(_QWORD *)(v26 + 8 * v8);
          if (!v14)
          {
            v8 = v13 + 4;
            if (v13 + 4 >= v27)
              goto LABEL_38;
            v14 = *(_QWORD *)(v26 + 8 * v8);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_25:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_26:
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (*(_QWORD *)(a2 + 16))
    {
      v17 = v16;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
      if ((v19 & 1) != 0)
      {
        outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v18, (uint64_t)&v31);
      }
      else
      {
        v31 = 0u;
        v32 = 0u;
      }

      if (*(_QWORD *)(a3 + 16))
      {
LABEL_33:
        v21 = v16;
        v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
        if ((v23 & 1) != 0)
        {
          outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v22, (uint64_t)&v29);
        }
        else
        {
          v29 = 0u;
          v30 = 0u;
        }

        goto LABEL_5;
      }
    }
    else
    {
      v31 = 0u;
      v32 = 0u;
      v20 = v16;
      if (*(_QWORD *)(a3 + 16))
        goto LABEL_33;
    }
    v29 = 0u;
    v30 = 0u;
LABEL_5:
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v9, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = AGCompareValues();
    outlined destroy of AccessibilityTableContext?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);

    if ((v10 & 1) == 0)
    {
      v24 = 0;
      goto LABEL_39;
    }
  }
  v15 = v13 + 5;
  if (v15 < v27)
  {
    v14 = *(_QWORD *)(v26 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v8 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v8 >= v27)
          goto LABEL_38;
        v14 = *(_QWORD *)(v26 + 8 * v8);
        ++v15;
        if (v14)
          goto LABEL_25;
      }
LABEL_41:
      __break(1u);
    }
    v8 = v15;
    goto LABEL_25;
  }
LABEL_38:
  v24 = 1;
LABEL_39:
  swift_release();
  return v24;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);

  v3 = a3;
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = 0;
    v16 = v3;
    v17 = v4;
    while (v6)
    {
      v18 = v5;
      v9 = *(_QWORD *)(v4 + v7 + 48);
      v8 = *(_QWORD *)(v4 + v7 + 56);
      v10 = v3 + v7;
      v11 = *(_QWORD *)(v3 + v7 + 32);
      v12 = *(_QWORD *)(v10 + 48);
      v13 = *(_QWORD *)(v10 + 56);
      v19 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v4 + v7 + 32) + 104);
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v9, v8);
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of _ViewList_ID.Canonical?(v12, v13);
      swift_retain();
      LOBYTE(v19) = v19(v11);
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v9, v8);
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v12, v13);
      swift_release();
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = 0;
        goto LABEL_10;
      }
      v7 += 56;
      --v6;
      v4 = v17;
      --v5;
      v3 = v16;
      if (v18 == 1)
        break;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = 1;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized VerticalTextField.updateVerticalSize(_:in:text:measureText:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, char a6)
{
  char *v6;
  uint64_t result;
  char v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  double v17;
  double *v19;
  double v20;
  double *v21;
  double v22;
  uint64_t v24;
  uint64_t v26;

  LOBYTE(v24) = a3 & 1;
  LOBYTE(v26) = a5 & 1;
  *(double *)&result = COERCE_DOUBLE(_ProposedSize.width.getter());
  if ((v10 & 1) == 0)
  {
    if ((a6 & 1) != 0)
    {
      objc_msgSend(v6, sel_sizeThatFits_, *(double *)&result, 1.79769313e308, a2, v24, a4, v26);
      v12 = v11;
      objc_msgSend(v6, sel_contentSize);
      if (v13 <= 1.79769313e308)
        v14 = v13;
      else
        v14 = 1.79769313e308;
      if (v12 > v14)
        v15 = v12;
      else
        v15 = v14;
      *(double *)&result = COERCE_DOUBLE(_ProposedSize.height.getter());
      v17 = *(double *)&result;
      if (v15 <= *(double *)&result || (v16 & 1) != 0)
        v17 = v15;
      *(double *)(a1 + 8) = v17;
    }
    v19 = (double *)&v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit];
    if ((v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_upperLimit + 8] & 1) == 0)
    {
      v20 = *v19;
      if (*v19 >= *(double *)(a1 + 8))
        v20 = *(double *)(a1 + 8);
      *(double *)(a1 + 8) = v20;
    }
    v21 = (double *)&v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit];
    if ((v6[OBJC_IVAR____TtC7SwiftUI16VerticalTextView_lowerLimit + 8] & 1) == 0)
    {
      v22 = *v21;
      if (*(double *)(a1 + 8) > *v21)
        v22 = *(double *)(a1 + 8);
      *(double *)(a1 + 8) = v22;
    }
  }
  return result;
}

uint64_t specialized PlatformTextFieldCoordinator.textFieldDidBeginEditing(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v3 == 1)
    goto LABEL_7;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  result = outlined consume of EnvironmentValues?(v3);
  if (!Strong || (v5 = *(_BYTE *)(Strong + 177), result = swift_release(), (v5 & 1) == 0))
  {
LABEL_7:
    MEMORY[0x1E0C80A78](result, a2);
    MEMORY[0x1E0C80A78](v6, v7);
    return static Update.dispatchImmediately<A>(_:)();
  }
  return result;
}

void specialized PlatformTextFieldCoordinator.textFieldDidEndEditing(_:reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];

  v3 = v2;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v4 == 1)
    goto LABEL_7;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  a1 = outlined consume of EnvironmentValues?(v4);
  if (!Strong || (v6 = *(_BYTE *)(Strong + 177), a1 = swift_release(), (v6 & 1) == 0))
  {
LABEL_7:
    *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
    MEMORY[0x1E0C80A78](a1, a2);
    MEMORY[0x1E0C80A78](v7, v8);
    static Update.dispatchImmediately<A>(_:)();
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
  }
}

uint64_t specialized UIKitTextInput.shouldChangeText(in:text:replacement:validator:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t (*v11)(uint64_t);
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[5];

  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a7, (uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
  if (v19)
  {
    outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)v20);
    v11 = (uint64_t (*)(uint64_t))*__swift_project_boxed_opaque_existential_1(v20, v20[3]);
    v12 = Range<>.init(_:in:)();
    if ((v14 & 1) != 0)
    {
      v16 = 1;
    }
    else
    {
      v15 = specialized StringProtocol.replacingCharacters<A, B>(in:with:)(v12, v13, a5, a6, a3, a4);
      v16 = v11(v15);
      swift_bridgeObjectRelease();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v18, (uint64_t (*)(_QWORD))type metadata accessor for TextInputValidation?);
    v16 = 1;
  }
  return v16 & 1;
}

uint64_t specialized PlatformTextFieldCoordinator.textViewDidBeginEditing(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v3 == 1)
    goto LABEL_7;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v3);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  result = outlined consume of EnvironmentValues?(v3);
  if (!Strong || (v5 = *(_BYTE *)(Strong + 177), result = swift_release(), (v5 & 1) == 0))
  {
LABEL_7:
    MEMORY[0x1E0C80A78](result, a2);
    MEMORY[0x1E0C80A78](v6, v7);
    return static Update.dispatchImmediately<A>(_:)();
  }
  return result;
}

void specialized PlatformTextFieldCoordinator.textViewDidEndEditing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];

  v3 = v2;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment);
  if (v4 == 1)
    goto LABEL_7;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_environment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    outlined copy of EnvironmentValues?(v4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey);
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  Strong = swift_weakLoadStrong();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for WeakBox<FocusBridge>);
  a1 = outlined consume of EnvironmentValues?(v4);
  if (!Strong || (v6 = *(_BYTE *)(Strong + 177), a1 = swift_release(), (v6 & 1) == 0))
  {
LABEL_7:
    *(_BYTE *)(v3 + OBJC_IVAR____TtC7SwiftUI28PlatformTextFieldCoordinator_isUserEditing) = 0;
    MEMORY[0x1E0C80A78](a1, a2);
    MEMORY[0x1E0C80A78](v7, v8);
    static Update.dispatchImmediately<A>(_:)();
    PlatformTextFieldCoordinator.updateToDisplayTextIfNeeded()();
  }
}

uint64_t partial apply for closure #1 in PlatformTextFieldCoordinator.didEndEditing()()
{
  uint64_t v0;

  return closure #1 in PlatformTextFieldCoordinator.didEndEditing()(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in PlatformTextFieldCoordinator.didBeginEditing()()
{
  uint64_t v0;

  return closure #1 in PlatformTextFieldCoordinator.didBeginEditing()(*(_QWORD *)(v0 + 16));
}

uint64_t outlined init with copy of PlatformTextFieldCoordinator.FieldStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<VerticalTextView>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<VerticalTextView>, a3, (uint64_t (*)(uint64_t))type metadata accessor for VerticalTextView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
}

_QWORD *outlined release of Text.ResolvedProperties(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;

  v2 = (void *)a1[7];
  v3 = a1[8];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v9 = (void *)a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease();

  return a1;
}

void outlined consume of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{

  if ((a3 & 1) == 0)
    swift_release();
}

uint64_t *partial apply for closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PlatformTextFieldCoordinator.presentEditMenu(with:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1874474F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@out PlatformItemList)(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16));
}

uint64_t partial apply for closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #2 in PlatformTextFieldCoordinator.presentEditMenu(with:)(*(uint64_t (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 32), a1);
}

uint64_t outlined assign with copy of TextSelection.Indices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TextSelection.Indices(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2)
    v3 = *(_DWORD *)a1 + 2;
  v4 = v3 == 1;
  result = swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t outlined assign with take of PlatformTextFieldCoordinator.FieldStorage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PlatformTextFieldCoordinator.FieldStorage?, (uint64_t)&type metadata for PlatformTextFieldCoordinator.FieldStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemTextFieldConfiguration(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  char *v49;
  int v50;
  uint64_t v51;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v41 = a3;
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v42 = a2[17];
    v43 = a2[18];
    v44 = a2[19];
    v45 = a2[20];
    v46 = a2[21];
    v48 = *((unsigned __int8 *)a2 + 178);
    v50 = *((unsigned __int16 *)a2 + 88);
    v47 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v42, v43, v44, v45, v46, v50 | (v48 << 16), v47);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v42;
    *(_QWORD *)(a1 + 144) = v43;
    *(_QWORD *)(a1 + 152) = v44;
    *(_QWORD *)(a1 + 160) = v45;
    *(_QWORD *)(a1 + 168) = v46;
    *(_BYTE *)(a1 + 178) = v48;
    *(_WORD *)(a1 + 176) = v50;
    *(_BYTE *)(a1 + 179) = v47;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v23 = *(int *)(v22 + 56);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    v27 = v26;
    v28 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      v30 = v41;
    }
    else
    {
      v51 = v28;
      v31 = v25[1];
      *v24 = *v25;
      v24[1] = v31;
      v32 = *(int *)(v27 + 32);
      v49 = (char *)v24 + v32;
      v33 = (char *)v25 + v32;
      v34 = type metadata accessor for TextSelection(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_retain();
      swift_retain();
      if (v36(v33, 1, v34))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v49, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        v30 = v41;
      }
      else
      {
        v38 = type metadata accessor for TextSelection.Indices(0);
        v30 = v41;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v49, v33, v39);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v49, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
        }
        v49[*(int *)(v34 + 20)] = v33[*(int *)(v34 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v49, 0, 1, v34);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v24, 0, 1, v27);
    }
    *(_QWORD *)(a1 + *(int *)(v30 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v30 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char *v48;
  int v49;
  uint64_t v50;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v40 = a3;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v9, v10, v11);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v12;
  }
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v41 = *(_QWORD *)(a2 + 136);
  v42 = *(_QWORD *)(a2 + 144);
  v43 = *(_QWORD *)(a2 + 152);
  v44 = *(_QWORD *)(a2 + 160);
  v45 = *(_QWORD *)(a2 + 168);
  v47 = *(unsigned __int8 *)(a2 + 178);
  v49 = *(unsigned __int16 *)(a2 + 176);
  v46 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v19, v20, v41, v42, v43, v44, v45, v49 | (v47 << 16), v46);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v41;
  *(_QWORD *)(a1 + 144) = v42;
  *(_QWORD *)(a1 + 152) = v43;
  *(_QWORD *)(a1 + 160) = v44;
  *(_QWORD *)(a1 + 168) = v45;
  *(_BYTE *)(a1 + 178) = v47;
  *(_WORD *)(a1 + 176) = v49;
  *(_BYTE *)(a1 + 179) = v46;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v22 = *(int *)(v21 + 56);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  type metadata accessor for Binding<TextSelection?>(0);
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    v29 = v40;
  }
  else
  {
    v50 = v27;
    v30 = v24[1];
    *v23 = *v24;
    v23[1] = v30;
    v31 = *(int *)(v26 + 32);
    v48 = (char *)v23 + v31;
    v32 = (char *)v24 + v31;
    v33 = type metadata accessor for TextSelection(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_retain();
    swift_retain();
    if (v35(v32, 1, v33))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v48, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v29 = v40;
    }
    else
    {
      v37 = type metadata accessor for TextSelection.Indices(0);
      v29 = v40;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v48, v32, v38);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v48, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      v48[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v48, 0, 1, v33);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v23, 0, 1, v26);
  }
  *(_QWORD *)(a1 + *(int *)(v29 + 20)) = *(_QWORD *)(a2 + *(int *)(v29 + 20));
  return a1;
}

uint64_t assignWithCopy for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  char *v85;
  int v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = (_OWORD *)(a1 + 40);
  v7 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 64);
  v77 = a3;
  if (*(_QWORD *)(a1 + 64))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v18 = *(_OWORD *)(a2 + 56);
      *v6 = *v7;
      *(_OWORD *)(a1 + 56) = v18;
    }
  }
  else if (v8)
  {
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v16;
    *(_BYTE *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 56);
    *v6 = *v7;
    *(_OWORD *)(a1 + 56) = v19;
  }
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 96);
  v24 = *(_QWORD *)(a2 + 104);
  v25 = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a2 + 128);
  v78 = *(_QWORD *)(a2 + 136);
  v79 = *(_QWORD *)(a2 + 144);
  v80 = *(_QWORD *)(a2 + 152);
  v81 = *(_QWORD *)(a2 + 160);
  v82 = *(_QWORD *)(a2 + 168);
  v86 = *(unsigned __int8 *)(a2 + 178);
  v84 = *(unsigned __int16 *)(a2 + 176);
  v83 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v22, v23, v24, v25, v26, v27, v78, v79, v80, v81, v82, v84 | (v86 << 16), v83);
  v28 = *(_QWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 80);
  v30 = *(_QWORD *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = *(_QWORD *)(a1 + 104);
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(_QWORD *)(a1 + 120);
  v35 = *(_QWORD *)(a1 + 128);
  v36 = *(_OWORD *)(a1 + 136);
  v37 = *(_OWORD *)(a1 + 152);
  v38 = *(_QWORD *)(a1 + 168);
  v39 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v40 = *(_BYTE *)(a1 + 179);
  *(_QWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v22;
  *(_QWORD *)(a1 + 96) = v23;
  *(_QWORD *)(a1 + 104) = v24;
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v27;
  *(_QWORD *)(a1 + 136) = v78;
  *(_QWORD *)(a1 + 144) = v79;
  *(_QWORD *)(a1 + 152) = v80;
  *(_QWORD *)(a1 + 160) = v81;
  *(_QWORD *)(a1 + 168) = v82;
  *(_WORD *)(a1 + 176) = v84;
  *(_BYTE *)(a1 + 178) = v86;
  *(_BYTE *)(a1 + 179) = v83;
  outlined consume of StateOrBinding<TextFieldState>(v28, v29, v30, v31, v32, v33, v34, v35, v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, v39, v40);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v42 = *(int *)(v41 + 56);
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  type metadata accessor for Binding<TextSelection?>(0);
  v46 = v45;
  v47 = *(_QWORD *)(v45 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  LODWORD(v26) = v48(v43, 1, v45);
  v49 = v48(v44, 1, v46);
  if (!(_DWORD)v26)
  {
    if (!v49)
    {
      *(_QWORD *)v43 = *(_QWORD *)v44;
      swift_retain();
      swift_release();
      *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
      swift_retain();
      swift_release();
      v60 = *(int *)(v46 + 32);
      v61 = &v43[v60];
      v62 = &v44[v60];
      v63 = type metadata accessor for TextSelection(0);
      v64 = *(_QWORD *)(v63 - 8);
      v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
      v66 = v65(v61, 1, v63);
      v67 = v65(v62, 1, v63);
      if (v66)
      {
        if (!v67)
        {
          v68 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v61, v62, v69);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
          }
          v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
          goto LABEL_16;
        }
      }
      else
      {
        if (!v67)
        {
          if (a1 != a2)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v61, type metadata accessor for TextSelection.Indices);
            v75 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v61, v62, v76);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
            }
          }
          v61[*(int *)(v63 + 20)] = v62[*(int *)(v63 + 20)];
          goto LABEL_16;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v61, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      v56 = *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64);
      v57 = v61;
      v58 = v62;
LABEL_15:
      memcpy(v57, v58, v56);
LABEL_16:
      v59 = v77;
      goto LABEL_29;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    v56 = *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64);
    v57 = v43;
    v58 = v44;
    goto LABEL_15;
  }
  if (v49)
    goto LABEL_14;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = *((_QWORD *)v44 + 1);
  v50 = *(int *)(v46 + 32);
  v85 = &v43[v50];
  v51 = &v44[v50];
  v52 = type metadata accessor for TextSelection(0);
  v53 = *(_QWORD *)(v52 - 8);
  v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  swift_retain();
  swift_retain();
  if (v87(v51, 1, v52))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v85, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v70 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v72 = v85;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v85, v51, v71);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v72 = v85;
      memcpy(v85, v51, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    v72[*(int *)(v52 + 20)] = v51[*(int *)(v52 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 56))(v72, 0, 1);
  }
  v59 = v77;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v43, 0, 1, v46);
LABEL_29:
  *(_QWORD *)(a1 + *(int *)(v59 + 20)) = *(_QWORD *)(a2 + *(int *)(v59 + 20));
  return a1;
}

uint64_t initializeWithTake for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v8 = *(int *)(v7 + 56);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *(int *)(v12 + 32);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    v19 = type metadata accessor for TextSelection(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v24 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SystemTextFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = *(_QWORD *)(a2 + 64);
    if (v7)
    {
      v8 = *(_BYTE *)(a2 + 56);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v8;
      outlined consume of Text.Storage(v9, v10, v11);
      *(_QWORD *)(a1 + 64) = v7;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_6:
  v13 = *(_QWORD *)(a2 + 168);
  v14 = *(_WORD *)(a2 + 176);
  v15 = *(_BYTE *)(a2 + 178);
  v16 = *(_BYTE *)(a2 + 179);
  v17 = *(_QWORD *)(a1 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a1 + 104);
  v22 = *(_QWORD *)(a1 + 112);
  v23 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 136);
  v26 = *(_OWORD *)(a1 + 152);
  v27 = *(_QWORD *)(a1 + 168);
  v28 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v29 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v13;
  *(_BYTE *)(a1 + 178) = v15;
  *(_WORD *)(a1 + 176) = v14;
  *(_BYTE *)(a1 + 179) = v16;
  outlined consume of StateOrBinding<TextFieldState>(v17, v18, v19, v20, v21, v22, v23, v24, v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, v28, v29);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v31 = *(int *)(v30 + 56);
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  type metadata accessor for Binding<TextSelection?>(0);
  v35 = v34;
  v36 = *(_QWORD *)(v34 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v32, 1, v34);
  v39 = v37(v33, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      v40 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v40;
      v41 = *(int *)(v35 + 32);
      v42 = &v32[v41];
      v43 = &v33[v41];
      v44 = type metadata accessor for TextSelection(0);
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v67 = a3;
        v61 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v42, v43, v62);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        a3 = v67;
        v42[*(int *)(v44 + 20)] = v43[*(int *)(v44 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v35);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v48 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64);
    v49 = v32;
    v50 = v33;
LABEL_13:
    memcpy(v49, v50, v48);
    goto LABEL_26;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  swift_release();
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_release();
  v51 = *(int *)(v35 + 32);
  v52 = &v32[v51];
  v53 = &v33[v51];
  v54 = type metadata accessor for TextSelection(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (v57)
  {
    if (!v58)
    {
      v59 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v52, v53, v60);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v58)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    v48 = *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64);
    v49 = v52;
    v50 = v53;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v52, type metadata accessor for TextSelection.Indices);
    v65 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v52, v53, v66);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
  }
  v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
LABEL_26:
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemTextFieldConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for SystemTextFieldConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for SystemTextFieldConfiguration()
{
  unint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(319, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for SystemTextField(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  char *v48;
  int v49;
  uint64_t v50;

  v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v8 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v40 = v4;
    if (v8)
    {
      v9 = a2[5];
      v10 = a2[6];
      v11 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(_QWORD *)(a1 + 40) = v9;
      *(_QWORD *)(a1 + 48) = v10;
      *(_BYTE *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = v8;
      swift_bridgeObjectRetain();
    }
    else
    {
      v12 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v12;
    }
    v13 = a2[9];
    v14 = a2[10];
    v15 = a2[11];
    v16 = a2[12];
    v17 = a2[13];
    v18 = a2[14];
    v19 = a2[15];
    v20 = a2[16];
    v41 = a2[17];
    v42 = a2[18];
    v43 = a2[19];
    v44 = a2[20];
    v45 = a2[21];
    v47 = *((unsigned __int8 *)a2 + 178);
    v49 = *((unsigned __int16 *)a2 + 88);
    v46 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v19, v20, v41, v42, v43, v44, v45, v49 | (v47 << 16), v46);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v17;
    *(_QWORD *)(a1 + 112) = v18;
    *(_QWORD *)(a1 + 120) = v19;
    *(_QWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 136) = v41;
    *(_QWORD *)(a1 + 144) = v42;
    *(_QWORD *)(a1 + 152) = v43;
    *(_QWORD *)(a1 + 160) = v44;
    *(_QWORD *)(a1 + 168) = v45;
    *(_BYTE *)(a1 + 178) = v47;
    *(_WORD *)(a1 + 176) = v49;
    *(_BYTE *)(a1 + 179) = v46;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v22 = *(int *)(v21 + 56);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    v26 = v25;
    v27 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v29 = v40;
    }
    else
    {
      v50 = v27;
      v30 = v24[1];
      *v23 = *v24;
      v23[1] = v30;
      v31 = *(int *)(v26 + 32);
      v48 = (char *)v23 + v31;
      v32 = (char *)v24 + v31;
      v33 = type metadata accessor for TextSelection(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_retain();
      swift_retain();
      if (v35(v32, 1, v33))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v48, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v29 = v40;
      }
      else
      {
        v37 = type metadata accessor for TextSelection.Indices(0);
        v29 = v40;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v48, v32, v38);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v48, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
        }
        v48[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v48, 0, 1, v33);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v23, 0, 1, v26);
    }
    *(_QWORD *)(a1 + *(int *)(v29 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v29 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for SystemTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char __src;
  unsigned __int8 __dsta;
  char *__dst;
  int v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v9 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v7, v8, v9);
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v8;
    *(_BYTE *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  v38 = *(_QWORD *)(a2 + 136);
  v39 = *(_QWORD *)(a2 + 144);
  v40 = *(_QWORD *)(a2 + 152);
  v41 = *(_QWORD *)(a2 + 160);
  v42 = *(_QWORD *)(a2 + 168);
  __dsta = *(_BYTE *)(a2 + 178);
  v46 = *(unsigned __int16 *)(a2 + 176);
  __src = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v11, v12, v13, v14, v15, v16, v18, v17, v38, v39, v40, v41, v42, v46 | (__dsta << 16), __src);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  *(_BYTE *)(a1 + 178) = __dsta;
  *(_WORD *)(a1 + 176) = v46;
  *(_BYTE *)(a1 + 179) = __src;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v20 = *(int *)(v19 + 56);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  type metadata accessor for Binding<TextSelection?>(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v23))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v47 = v25;
    v27 = v22[1];
    *v21 = *v22;
    v21[1] = v27;
    v28 = *(int *)(v24 + 32);
    __dst = (char *)v21 + v28;
    v29 = (char *)v22 + v28;
    v30 = type metadata accessor for TextSelection(0);
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_retain();
    swift_retain();
    if (v32(v29, 1, v30))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(__dst, v29, v35);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      __dst[*(int *)(v30 + 20)] = v29[*(int *)(v30 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v21, 0, 1, v24);
  }
  v36 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v36 + 20)) = *(_QWORD *)(a2 + *(int *)(v36 + 20));
  return a1;
}

uint64_t assignWithCopy for SystemTextField(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int __dsta;
  char *__dst;
  int v82;
  unsigned int (*v83)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = (_OWORD *)(a1 + 40);
  v5 = (_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_QWORD *)(a2 + 48);
      v9 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(a1 + 48);
      v12 = *(_BYTE *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v8;
      *(_BYTE *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      v16 = *(_OWORD *)(a2 + 56);
      *v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 56) = v15;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 56);
    *v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = *(_QWORD *)(a2 + 112);
  v24 = *(_QWORD *)(a2 + 120);
  v25 = *(_QWORD *)(a2 + 128);
  v74 = *(_QWORD *)(a2 + 136);
  v75 = *(_QWORD *)(a2 + 144);
  v76 = *(_QWORD *)(a2 + 152);
  v77 = *(_QWORD *)(a2 + 160);
  v78 = *(_QWORD *)(a2 + 168);
  v82 = *(unsigned __int8 *)(a2 + 178);
  __dsta = *(unsigned __int16 *)(a2 + 176);
  v79 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v74, v75, v76, v77, v78, __dsta | (v82 << 16), v79);
  v26 = *(_QWORD *)(a1 + 72);
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(_QWORD *)(a1 + 104);
  v31 = *(_QWORD *)(a1 + 112);
  v32 = *(_QWORD *)(a1 + 120);
  v33 = *(_QWORD *)(a1 + 128);
  v34 = *(_OWORD *)(a1 + 136);
  v35 = *(_OWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 168);
  v37 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v38 = *(_BYTE *)(a1 + 179);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v23;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v25;
  *(_QWORD *)(a1 + 136) = v74;
  *(_QWORD *)(a1 + 144) = v75;
  *(_QWORD *)(a1 + 152) = v76;
  *(_QWORD *)(a1 + 160) = v77;
  *(_QWORD *)(a1 + 168) = v78;
  *(_WORD *)(a1 + 176) = __dsta;
  *(_BYTE *)(a1 + 178) = v82;
  *(_BYTE *)(a1 + 179) = v79;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v40 = *(int *)(v39 + 56);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  v44 = v43;
  v45 = *(_QWORD *)(v43 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v18) = v46(v41, 1, v43);
  v47 = v46(v42, 1, v44);
  if ((_DWORD)v18)
  {
    if (!v47)
    {
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      v48 = *(int *)(v44 + 32);
      __dst = &v41[v48];
      v49 = &v42[v48];
      v50 = type metadata accessor for TextSelection(0);
      v51 = *(_QWORD *)(v50 - 8);
      v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_retain();
      swift_retain();
      if (v83(v49, 1, v50))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(__dst, v49, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
        }
        __dst[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      goto LABEL_28;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    type metadata accessor for Binding<TextSelection?>?(0);
    v54 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
    v55 = v41;
    v56 = v42;
LABEL_15:
    memcpy(v55, v56, v54);
    goto LABEL_28;
  }
  *(_QWORD *)v41 = *(_QWORD *)v42;
  swift_retain();
  swift_release();
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_retain();
  swift_release();
  v57 = *(int *)(v44 + 32);
  v58 = &v41[v57];
  v59 = &v42[v57];
  v60 = type metadata accessor for TextSelection(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (!v64)
    {
      v65 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16))(v58, v59, v66);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v58, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    v54 = *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64);
    v55 = v58;
    v56 = v59;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v58, type metadata accessor for TextSelection.Indices);
    v72 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v58, v59, v73);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
  }
  v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
LABEL_28:
  v70 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v70 + 20)) = *(_QWORD *)(a2 + *(int *)(v70 + 20));
  return a1;
}

uint64_t initializeWithTake for SystemTextField(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = *(int *)(v5 + 56);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  type metadata accessor for Binding<TextSelection?>(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = v8[1];
    *v7 = *v8;
    v7[1] = v13;
    v14 = *(int *)(v10 + 32);
    v15 = (char *)v7 + v14;
    v16 = (char *)v8 + v14;
    v17 = type metadata accessor for TextSelection(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v15, v16, v21);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      v15[*(int *)(v17 + 20)] = v16[*(int *)(v17 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
  }
  v22 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v22 + 20)) = *(_QWORD *)(a2 + *(int *)(v22 + 20));
  return a1;
}

uint64_t assignWithTake for SystemTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = *(_QWORD *)(a2 + 64);
    if (v5)
    {
      v6 = *(_BYTE *)(a2 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(_QWORD *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  v11 = *(_QWORD *)(a2 + 168);
  v12 = *(_WORD *)(a2 + 176);
  v13 = *(_BYTE *)(a2 + 178);
  v14 = *(_BYTE *)(a2 + 179);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_OWORD *)(a1 + 136);
  v24 = *(_OWORD *)(a1 + 152);
  v25 = *(_QWORD *)(a1 + 168);
  v26 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v27 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v11;
  *(_BYTE *)(a1 + 178) = v13;
  *(_WORD *)(a1 + 176) = v12;
  *(_BYTE *)(a1 + 179) = v14;
  outlined consume of StateOrBinding<TextFieldState>(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, v26, v27);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v29 = *(int *)(v28 + 56);
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  type metadata accessor for Binding<TextSelection?>(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v30, 1, v32);
  v37 = v35(v31, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      v38 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *((_QWORD *)v30 + 1) = v38;
      v39 = *(int *)(v33 + 32);
      v40 = &v30[v39];
      v41 = &v31[v39];
      v42 = type metadata accessor for TextSelection(0);
      v43 = *(_QWORD *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        v59 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v40, v41, v60);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        }
        v40[*(int *)(v42 + 20)] = v41[*(int *)(v42 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v46 = *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64);
    v47 = v30;
    v48 = v31;
LABEL_13:
    memcpy(v47, v48, v46);
    goto LABEL_26;
  }
  *(_QWORD *)v30 = *(_QWORD *)v31;
  swift_release();
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_release();
  v49 = *(int *)(v33 + 32);
  v50 = &v30[v49];
  v51 = &v31[v49];
  v52 = type metadata accessor for TextSelection(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  v55 = v54(v50, 1, v52);
  v56 = v54(v51, 1, v52);
  if (v55)
  {
    if (!v56)
    {
      v57 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v50, v51, v58);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      v50[*(int *)(v52 + 20)] = v51[*(int *)(v52 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v56)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    v46 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
    v47 = v50;
    v48 = v51;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, type metadata accessor for TextSelection.Indices);
    v64 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v50, v51, v65);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
  }
  v50[*(int *)(v52 + 20)] = v51[*(int *)(v52 + 20)];
LABEL_26:
  v62 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v62 + 20)) = *(_QWORD *)(a2 + *(int *)(v62 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemTextField()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18744A164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemTextField()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18744A1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemTextFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemTextField()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout>, type metadata accessor for ModifiedContent<SystemTextField, _AlignmentLayout>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<SystemTextField, _AlignmentLayout> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE35C0];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SystemTextField, _AlignmentLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in SystemTextField()
{
  return &protocol witness table for SystemTextField;
}

void type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(uint64_t a1)
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(a1, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<TextSelection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
}

uint64_t type metadata accessor for ResolvedSystemTextField(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedSystemTextField);
}

unint64_t lazy protocol witness table accessor for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable;
  if (!lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SystemTextField.MakeRepresentable, &unk_1E1ABD470);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemTextField.MakeRepresentable and conformance SystemTextField.MakeRepresentable);
  }
  return result;
}

void type metadata accessor for WeakSelectionBasedStorage<TextSelection>?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for WeakSelectionBasedStorage<TextSelection>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for WeakSelectionBasedStorage<TextSelection>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for WeakSelectionBasedStorage<TextSelection>(uint64_t a1)
{
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(a1, (unint64_t *)&lazy cache variable for type metadata for WeakSelectionBasedStorage<TextSelection>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WeakSelectionBasedStorage);
}

void type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for TextSelection(255);
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextSelection and conformance TextSelection, type metadata accessor for TextSelection, (uint64_t)&protocol conformance descriptor for TextSelection);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void *type metadata accessor for SystemTextField.MakeRepresentable()
{
  return &unk_1E1ABD470;
}

unint64_t initializeBufferWithCopyOfBuffer for ResolvedSystemTextField(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  char *v67;
  int v68;
  uint64_t v69;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v19 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v56 = a3;
    v57 = a2;
    v9 = *(int *)(a3 + 20);
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v12;
    v13 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = v13;
    *(_BYTE *)(v10 + 32) = *(_BYTE *)(v11 + 32);
    *(_BYTE *)(v10 + 33) = *(_BYTE *)(v11 + 33);
    v14 = *(_QWORD *)(v11 + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v58 = a1;
    if (v14)
    {
      v15 = *(_QWORD *)(v11 + 40);
      v16 = *(_QWORD *)(v11 + 48);
      v17 = *(_BYTE *)(v11 + 56);
      outlined copy of Text.Storage(v15, v16, v17);
      *(_QWORD *)(v10 + 40) = v15;
      *(_QWORD *)(v10 + 48) = v16;
      *(_BYTE *)(v10 + 56) = v17;
      *(_QWORD *)(v10 + 64) = v14;
      swift_bridgeObjectRetain();
    }
    else
    {
      v20 = *(_OWORD *)(v11 + 56);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
      *(_OWORD *)(v10 + 56) = v20;
    }
    v21 = *(_QWORD *)(v11 + 72);
    v22 = *(_QWORD *)(v11 + 80);
    v23 = *(_QWORD *)(v11 + 88);
    v24 = *(_QWORD *)(v11 + 96);
    v25 = *(_QWORD *)(v11 + 104);
    v26 = *(_QWORD *)(v11 + 112);
    v27 = *(_QWORD *)(v11 + 120);
    v28 = *(_QWORD *)(v11 + 128);
    v59 = *(_QWORD *)(v11 + 136);
    v60 = *(_QWORD *)(v11 + 144);
    v61 = *(_QWORD *)(v11 + 152);
    v62 = *(_QWORD *)(v11 + 160);
    v63 = *(_QWORD *)(v11 + 168);
    v66 = *(unsigned __int8 *)(v11 + 178);
    v68 = *(unsigned __int16 *)(v11 + 176);
    v64 = *(_BYTE *)(v11 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v21, v22, v23, v24, v25, v26, v27, v28, v59, v60, v61, v62, v63, v68 | (v66 << 16), v64);
    *(_QWORD *)(v10 + 72) = v21;
    *(_QWORD *)(v10 + 80) = v22;
    *(_QWORD *)(v10 + 88) = v23;
    *(_QWORD *)(v10 + 96) = v24;
    *(_QWORD *)(v10 + 104) = v25;
    *(_QWORD *)(v10 + 112) = v26;
    *(_QWORD *)(v10 + 120) = v27;
    *(_QWORD *)(v10 + 128) = v28;
    *(_QWORD *)(v10 + 136) = v59;
    *(_QWORD *)(v10 + 144) = v60;
    *(_QWORD *)(v10 + 152) = v61;
    *(_QWORD *)(v10 + 160) = v62;
    *(_QWORD *)(v10 + 168) = v63;
    *(_BYTE *)(v10 + 178) = v66;
    *(_WORD *)(v10 + 176) = v68;
    *(_BYTE *)(v10 + 179) = v64;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v30 = *(int *)(v29 + 56);
    v31 = (_QWORD *)(v10 + v30);
    v32 = (_QWORD *)(v11 + v30);
    type metadata accessor for Binding<TextSelection?>(0);
    v34 = v33;
    v35 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v35 + 48))(v32, 1, v33))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = v57;
      v19 = v58;
      v38 = v56;
    }
    else
    {
      v69 = v35;
      v39 = v32[1];
      *v31 = *v32;
      v31[1] = v39;
      v40 = *(int *)(v34 + 32);
      v67 = (char *)v31 + v40;
      v41 = (char *)v32 + v40;
      v42 = type metadata accessor for TextSelection(0);
      v43 = *(_QWORD *)(v42 - 8);
      v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
      swift_retain();
      swift_retain();
      v45 = v41;
      if (v44(v41, 1, v42))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v67, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        v37 = v57;
        v19 = v58;
      }
      else
      {
        v65 = v43;
        v47 = type metadata accessor for TextSelection.Indices(0);
        v48 = v45;
        v37 = v57;
        v19 = v58;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v67, v48, v49);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v67, v48, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
        }
        v67[*(int *)(v42 + 20)] = *((_BYTE *)v48 + *(int *)(v42 + 20));
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v67, 0, 1, v42);
      }
      v38 = v56;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v31, 0, 1, v34);
    }
    v50 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(_QWORD *)(v10 + *(int *)(v50 + 20)) = *(_QWORD *)(v11 + *(int *)(v50 + 20));
    v51 = *(int *)(v38 + 24);
    v52 = (_OWORD *)(v19 + v51);
    v53 = (_OWORD *)(v37 + v51);
    v54 = v53[1];
    *v52 = *v53;
    v52[1] = v54;
  }
  return v19;
}

uint64_t destroy for ResolvedSystemTextField(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_BYTE *)(v4 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 152), *(_QWORD *)(v4 + 160), *(_QWORD *)(v4 + 168), *(unsigned __int16 *)(v4 + 176) | (*(unsigned __int8 *)(v4 + 178) << 16), *(_BYTE *)(v4 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = v4 + *(int *)(v5 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v8 = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v10 = v6 + *(int *)(v8 + 32);
    v11 = type metadata accessor for TextSelection(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
    if (!(_DWORD)result)
    {
      type metadata accessor for TextSelection.Indices(0);
      result = swift_getEnumCaseMultiPayload();
      if ((_DWORD)result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  __int128 v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  char *v65;
  int v66;
  uint64_t v67;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v54 = a3;
  v55 = a2;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = v12;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_BYTE *)(v9 + 33) = *(_BYTE *)(v10 + 33);
  v13 = *(_QWORD *)(v10 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v56 = a1;
  if (v13)
  {
    v14 = *(_QWORD *)(v10 + 40);
    v15 = *(_QWORD *)(v10 + 48);
    v16 = *(_BYTE *)(v10 + 56);
    outlined copy of Text.Storage(v14, v15, v16);
    *(_QWORD *)(v9 + 40) = v14;
    *(_QWORD *)(v9 + 48) = v15;
    *(_BYTE *)(v9 + 56) = v16;
    *(_QWORD *)(v9 + 64) = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *(_OWORD *)(v10 + 56);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v10 + 40);
    *(_OWORD *)(v9 + 56) = v17;
  }
  v18 = *(_QWORD *)(v10 + 72);
  v19 = *(_QWORD *)(v10 + 80);
  v20 = *(_QWORD *)(v10 + 88);
  v21 = *(_QWORD *)(v10 + 96);
  v22 = *(_QWORD *)(v10 + 104);
  v23 = *(_QWORD *)(v10 + 112);
  v24 = *(_QWORD *)(v10 + 120);
  v25 = *(_QWORD *)(v10 + 128);
  v57 = *(_QWORD *)(v10 + 136);
  v58 = *(_QWORD *)(v10 + 144);
  v59 = *(_QWORD *)(v10 + 152);
  v60 = *(_QWORD *)(v10 + 160);
  v61 = *(_QWORD *)(v10 + 168);
  v64 = *(unsigned __int8 *)(v10 + 178);
  v66 = *(unsigned __int16 *)(v10 + 176);
  v62 = *(_BYTE *)(v10 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v57, v58, v59, v60, v61, v66 | (v64 << 16), v62);
  *(_QWORD *)(v9 + 72) = v18;
  *(_QWORD *)(v9 + 80) = v19;
  *(_QWORD *)(v9 + 88) = v20;
  *(_QWORD *)(v9 + 96) = v21;
  *(_QWORD *)(v9 + 104) = v22;
  *(_QWORD *)(v9 + 112) = v23;
  *(_QWORD *)(v9 + 120) = v24;
  *(_QWORD *)(v9 + 128) = v25;
  *(_QWORD *)(v9 + 136) = v57;
  *(_QWORD *)(v9 + 144) = v58;
  *(_QWORD *)(v9 + 152) = v59;
  *(_QWORD *)(v9 + 160) = v60;
  *(_QWORD *)(v9 + 168) = v61;
  *(_BYTE *)(v9 + 178) = v64;
  *(_WORD *)(v9 + 176) = v66;
  *(_BYTE *)(v9 + 179) = v62;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v27 = *(int *)(v26 + 56);
  v28 = (_QWORD *)(v9 + v27);
  v29 = (_QWORD *)(v10 + v27);
  type metadata accessor for Binding<TextSelection?>(0);
  v31 = v30;
  v32 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    v35 = v55;
    v34 = v56;
    v36 = v54;
  }
  else
  {
    v67 = v32;
    v37 = v29[1];
    *v28 = *v29;
    v28[1] = v37;
    v38 = *(int *)(v31 + 32);
    v65 = (char *)v28 + v38;
    v39 = (char *)v29 + v38;
    v40 = type metadata accessor for TextSelection(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    swift_retain();
    swift_retain();
    v43 = v39;
    if (v42(v39, 1, v40))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v65, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      v35 = v55;
      v34 = v56;
    }
    else
    {
      v63 = v41;
      v45 = type metadata accessor for TextSelection.Indices(0);
      v46 = v43;
      v35 = v55;
      v34 = v56;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v65, v46, v47);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v65, v46, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      v65[*(int *)(v40 + 20)] = *((_BYTE *)v46 + *(int *)(v40 + 20));
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v65, 0, 1, v40);
    }
    v36 = v54;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v28, 0, 1, v31);
  }
  v48 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(v9 + *(int *)(v48 + 20)) = *(_QWORD *)(v10 + *(int *)(v48 + 20));
  v49 = *(int *)(v36 + 24);
  v50 = (_OWORD *)(v34 + v49);
  v51 = (_OWORD *)(v35 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  return v34;
}

uint64_t assignWithCopy for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(const void *, uint64_t, uint64_t);
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char *, uint64_t, uint64_t);
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  uint64_t v104;
  int v105;
  char *v106;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(int *)(a3 + 20);
  v94 = a1;
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)(a2 + v10);
  swift_retain();
  swift_release();
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_BYTE *)(v11 + 33) = *(_BYTE *)(v12 + 33);
  v13 = (_OWORD *)(v11 + 40);
  v14 = (_OWORD *)(v12 + 40);
  v15 = *(_QWORD *)(v12 + 64);
  v95 = a3;
  v96 = a2;
  if (*(_QWORD *)(v11 + 64))
  {
    if (v15)
    {
      v16 = *(_QWORD *)(v12 + 40);
      v17 = *(_QWORD *)(v12 + 48);
      v18 = *(_BYTE *)(v12 + 56);
      outlined copy of Text.Storage(v16, v17, v18);
      v19 = *(_QWORD *)(v11 + 40);
      v20 = *(_QWORD *)(v11 + 48);
      v21 = *(_BYTE *)(v11 + 56);
      *(_QWORD *)(v11 + 40) = v16;
      *(_QWORD *)(v11 + 48) = v17;
      *(_BYTE *)(v11 + 56) = v18;
      outlined consume of Text.Storage(v19, v20, v21);
      *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11 + 40);
      v25 = *(_OWORD *)(v12 + 56);
      *v13 = *v14;
      *(_OWORD *)(v11 + 56) = v25;
    }
  }
  else if (v15)
  {
    v22 = *(_QWORD *)(v12 + 40);
    v23 = *(_QWORD *)(v12 + 48);
    v24 = *(_BYTE *)(v12 + 56);
    outlined copy of Text.Storage(v22, v23, v24);
    *(_QWORD *)(v11 + 40) = v22;
    *(_QWORD *)(v11 + 48) = v23;
    *(_BYTE *)(v11 + 56) = v24;
    *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v26 = *(_OWORD *)(v12 + 56);
    *v13 = *v14;
    *(_OWORD *)(v11 + 56) = v26;
  }
  v27 = *(_QWORD *)(v12 + 72);
  v28 = *(_QWORD *)(v12 + 80);
  v29 = *(_QWORD *)(v12 + 88);
  v30 = *(_QWORD *)(v12 + 96);
  v31 = *(_QWORD *)(v12 + 104);
  v32 = *(_QWORD *)(v12 + 112);
  v33 = *(_QWORD *)(v12 + 120);
  v34 = *(_QWORD *)(v12 + 128);
  v97 = *(_QWORD *)(v12 + 136);
  v98 = *(_QWORD *)(v12 + 144);
  v99 = *(_QWORD *)(v12 + 152);
  v100 = *(_QWORD *)(v12 + 160);
  v101 = *(_QWORD *)(v12 + 168);
  v105 = *(unsigned __int8 *)(v12 + 178);
  v103 = *(unsigned __int16 *)(v12 + 176);
  v102 = *(_BYTE *)(v12 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v27, v28, v29, v30, v31, v32, v33, v34, v97, v98, v99, v100, v101, v103 | (v105 << 16), v102);
  v35 = *(_QWORD *)(v11 + 72);
  v36 = *(_QWORD *)(v11 + 80);
  v37 = *(_QWORD *)(v11 + 88);
  v38 = *(_QWORD *)(v11 + 96);
  v39 = *(_QWORD *)(v11 + 104);
  v40 = *(_QWORD *)(v11 + 112);
  v41 = *(_QWORD *)(v11 + 120);
  v42 = *(_QWORD *)(v11 + 128);
  v43 = *(_OWORD *)(v11 + 136);
  v44 = *(_OWORD *)(v11 + 152);
  v45 = *(_QWORD *)(v11 + 168);
  v46 = *(unsigned __int16 *)(v11 + 176) | (*(unsigned __int8 *)(v11 + 178) << 16);
  v47 = *(_BYTE *)(v11 + 179);
  *(_QWORD *)(v11 + 72) = v27;
  *(_QWORD *)(v11 + 80) = v28;
  *(_QWORD *)(v11 + 88) = v29;
  *(_QWORD *)(v11 + 96) = v30;
  *(_QWORD *)(v11 + 104) = v31;
  *(_QWORD *)(v11 + 112) = v32;
  *(_QWORD *)(v11 + 120) = v33;
  *(_QWORD *)(v11 + 128) = v34;
  *(_QWORD *)(v11 + 136) = v97;
  *(_QWORD *)(v11 + 144) = v98;
  *(_QWORD *)(v11 + 152) = v99;
  *(_QWORD *)(v11 + 160) = v100;
  *(_QWORD *)(v11 + 168) = v101;
  *(_WORD *)(v11 + 176) = v103;
  *(_BYTE *)(v11 + 178) = v105;
  *(_BYTE *)(v11 + 179) = v102;
  outlined consume of StateOrBinding<TextFieldState>(v35, v36, v37, v38, v39, v40, v41, v42, v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, v46, v47);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v49 = *(int *)(v48 + 56);
  v50 = (char *)(v11 + v49);
  v51 = (char *)(v12 + v49);
  type metadata accessor for Binding<TextSelection?>(0);
  v53 = v52;
  v54 = *(_QWORD *)(v52 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  LODWORD(v33) = v55(v50, 1, v52);
  v56 = v55(v51, 1, v53);
  if (!(_DWORD)v33)
  {
    v59 = v96;
    if (v56)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
      type metadata accessor for Binding<TextSelection?>?(0);
      v61 = *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64);
      v62 = v50;
      v63 = v51;
    }
    else
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      swift_retain();
      swift_release();
      *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
      swift_retain();
      swift_release();
      v72 = *(int *)(v53 + 32);
      v73 = &v50[v72];
      v74 = &v51[v72];
      v75 = type metadata accessor for TextSelection(0);
      v76 = *(_QWORD *)(v75 - 8);
      v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
      v78 = v77(v73, 1, v75);
      v79 = v77(v74, 1, v75);
      if (v78)
      {
        if (!v79)
        {
          v80 = type metadata accessor for TextSelection.Indices(0);
          v58 = v94;
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v73, v74, v81);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
          }
          v73[*(int *)(v75 + 20)] = v74[*(int *)(v75 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
          goto LABEL_25;
        }
      }
      else
      {
        if (!v79)
        {
          v58 = v94;
          if (v94 != v96)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v73, type metadata accessor for TextSelection.Indices);
            v92 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16))(v73, v74, v93);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
            }
          }
          v73[*(int *)(v75 + 20)] = v74[*(int *)(v75 + 20)];
          goto LABEL_25;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v73, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      v61 = *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64);
      v62 = v73;
      v63 = v74;
    }
    memcpy(v62, v63, v61);
    v58 = v94;
LABEL_25:
    v86 = v95;
    goto LABEL_29;
  }
  if (v56)
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    v58 = v94;
    v59 = v96;
    goto LABEL_25;
  }
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *((_QWORD *)v50 + 1) = *((_QWORD *)v51 + 1);
  v64 = *(int *)(v53 + 32);
  v106 = &v50[v64];
  v65 = &v51[v64];
  v66 = type metadata accessor for TextSelection(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48);
  v69 = v65;
  v70 = v66;
  swift_retain();
  swift_retain();
  if (v68(v69, 1, v70))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v106, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    v58 = v94;
  }
  else
  {
    v104 = v67;
    v82 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      v84 = v69;
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v106, v69, v83);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v84 = v69;
      memcpy(v106, v69, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    v58 = v94;
    v106[*(int *)(v70 + 20)] = v84[*(int *)(v70 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v106, 0, 1, v70);
  }
  v86 = v95;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v50, 0, 1, v53);
  v59 = v96;
LABEL_29:
  v87 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(v11 + *(int *)(v87 + 20)) = *(_QWORD *)(v12 + *(int *)(v87 + 20));
  v88 = *(int *)(v86 + 24);
  v89 = (_DWORD *)(v58 + v88);
  v90 = (_DWORD *)(v59 + v88);
  *v89 = *v90;
  v89[1] = v90[1];
  v89[2] = v90[2];
  v89[3] = v90[3];
  v89[4] = v90[4];
  v89[5] = v90[5];
  v89[6] = v90[6];
  v89[7] = v90[7];
  return v58;
}

uint64_t initializeWithTake for ResolvedSystemTextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_OWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 32) = *(_BYTE *)(a2 + v6 + 32);
  *(_BYTE *)(v7 + 33) = *(_BYTE *)(a2 + v6 + 33);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + v6 + 40);
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(a2 + v6 + 56);
  v10 = *(_OWORD *)(a2 + v6 + 72);
  v11 = *(_OWORD *)(a2 + v6 + 88);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + v6 + 104);
  *(_OWORD *)(v7 + 88) = v11;
  *(_OWORD *)(v7 + 72) = v10;
  v12 = *(_OWORD *)(a2 + v6 + 120);
  v13 = *(_OWORD *)(a2 + v6 + 136);
  v14 = *(_OWORD *)(a2 + v6 + 152);
  *(_OWORD *)(v7 + 164) = *(_OWORD *)(a2 + v6 + 164);
  *(_OWORD *)(v7 + 152) = v14;
  *(_OWORD *)(v7 + 136) = v13;
  *(_OWORD *)(v7 + 120) = v12;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v16 = *(int *)(v15 + 56);
  v17 = (_QWORD *)(v7 + v16);
  v18 = (_QWORD *)(v8 + v16);
  type metadata accessor for Binding<TextSelection?>(0);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v19))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v38 = v3;
    v23 = v18[1];
    *v17 = *v18;
    v17[1] = v23;
    v24 = *(int *)(v20 + 32);
    v37 = (char *)v17 + v24;
    v25 = (char *)v18 + v24;
    v26 = type metadata accessor for TextSelection(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v37, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v36 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v37, v25, v29);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v37, v25, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      v37[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v37, 0, 1, v26);
    }
    v3 = v38;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  v30 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(v7 + *(int *)(v30 + 20)) = *(_QWORD *)(v8 + *(int *)(v30 + 20));
  v31 = *(int *)(v3 + 24);
  v32 = (_OWORD *)(a1 + v31);
  v33 = (_OWORD *)(a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  return a1;
}

uint64_t assignWithTake for ResolvedSystemTextField(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v4 = a2;
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = (uint64_t)v4 + v10;
  *(_QWORD *)(a1 + v10) = *(uint64_t *)((char *)v4 + v10);
  swift_release();
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  swift_release();
  v13 = *(_QWORD *)(v12 + 24);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = v13;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
  *(_BYTE *)(v11 + 33) = *(_BYTE *)(v12 + 33);
  v81 = a3;
  if (*(_QWORD *)(v11 + 64))
  {
    if (*(_QWORD *)(v12 + 64))
    {
      v14 = *(_BYTE *)(v12 + 56);
      v15 = *(_QWORD *)(v11 + 40);
      v16 = *(_QWORD *)(v11 + 48);
      v17 = *(_BYTE *)(v11 + 56);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      *(_BYTE *)(v11 + 56) = v14;
      outlined consume of Text.Storage(v15, v16, v17);
      *(_QWORD *)(v11 + 64) = *(_QWORD *)(v12 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(v11 + 40);
  }
  v18 = *(_OWORD *)(v12 + 56);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
  *(_OWORD *)(v11 + 56) = v18;
LABEL_6:
  v19 = *(_QWORD *)(v12 + 168);
  v20 = *(_WORD *)(v12 + 176);
  v21 = *(_BYTE *)(v12 + 178);
  v22 = *(_BYTE *)(v12 + 179);
  v23 = *(_QWORD *)(v11 + 72);
  v24 = *(_QWORD *)(v11 + 80);
  v25 = *(_QWORD *)(v11 + 88);
  v26 = *(_QWORD *)(v11 + 96);
  v27 = *(_QWORD *)(v11 + 104);
  v28 = *(_QWORD *)(v11 + 112);
  v29 = *(_QWORD *)(v11 + 120);
  v30 = *(_QWORD *)(v11 + 128);
  v31 = *(_OWORD *)(v11 + 136);
  v32 = *(_OWORD *)(v11 + 152);
  v33 = *(_QWORD *)(v11 + 168);
  v34 = *(unsigned __int16 *)(v11 + 176) | (*(unsigned __int8 *)(v11 + 178) << 16);
  v35 = *(_BYTE *)(v11 + 179);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(v12 + 72);
  *(_OWORD *)(v11 + 88) = *(_OWORD *)(v12 + 88);
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(v12 + 104);
  *(_OWORD *)(v11 + 120) = *(_OWORD *)(v12 + 120);
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(v12 + 136);
  *(_OWORD *)(v11 + 152) = *(_OWORD *)(v12 + 152);
  *(_QWORD *)(v11 + 168) = v19;
  *(_BYTE *)(v11 + 178) = v21;
  *(_WORD *)(v11 + 176) = v20;
  *(_BYTE *)(v11 + 179) = v22;
  outlined consume of StateOrBinding<TextFieldState>(v23, v24, v25, v26, v27, v28, v29, v30, v31, *((uint64_t *)&v31 + 1), v32, *((uint64_t *)&v32 + 1), v33, v34, v35);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v37 = *(int *)(v36 + 56);
  v38 = (char *)(v11 + v37);
  v39 = (char *)(v12 + v37);
  type metadata accessor for Binding<TextSelection?>(0);
  v41 = v40;
  v42 = *(_QWORD *)(v40 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v38, 1, v40);
  v45 = v43(v39, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      *(_QWORD *)v38 = *(_QWORD *)v39;
      swift_release();
      *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
      swift_release();
      v58 = *(int *)(v41 + 32);
      v59 = &v38[v58];
      v60 = &v39[v58];
      v61 = type metadata accessor for TextSelection(0);
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
      v64 = v63(v59, 1, v61);
      v65 = v63(v60, 1, v61);
      if (v64)
      {
        if (!v65)
        {
          v66 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v59, v60, v67);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v65)
        {
          if ((uint64_t *)a1 != v4)
          {
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, type metadata accessor for TextSelection.Indices);
            v77 = type metadata accessor for TextSelection.Indices(0);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
              (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v59, v60, v78);
              swift_storeEnumTagMultiPayload();
            }
            else
            {
              memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
            }
          }
          v59[*(int *)(v61 + 20)] = v60[*(int *)(v61 + 20)];
          goto LABEL_14;
        }
        outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, type metadata accessor for TextSelection);
      }
      type metadata accessor for TextSelection?(0);
      v54 = *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64);
      v55 = v59;
      v56 = v60;
LABEL_13:
      memcpy(v55, v56, v54);
LABEL_14:
      v57 = v81;
      goto LABEL_27;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v54 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
    v55 = v38;
    v56 = v39;
    goto LABEL_13;
  }
  if (v45)
    goto LABEL_12;
  v80 = v4;
  v46 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *((_QWORD *)v38 + 1) = v46;
  v47 = *(int *)(v41 + 32);
  v48 = &v38[v47];
  v49 = &v39[v47];
  v50 = type metadata accessor for TextSelection(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    type metadata accessor for TextSelection?(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v79 = v51;
    v68 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v48, v49, v69);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    v48[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v48, 0, 1, v50);
  }
  v4 = v80;
  v57 = v81;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v41);
LABEL_27:
  v71 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(v11 + *(int *)(v71 + 20)) = *(_QWORD *)(v12 + *(int *)(v71 + 20));
  v72 = *(int *)(v57 + 24);
  v73 = (_OWORD *)(a1 + v72);
  v74 = (_OWORD *)((char *)v4 + v72);
  v75 = v74[1];
  *v73 = *v74;
  v73[1] = v75;
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedSystemTextField()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18744BD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for SystemTextFieldConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ResolvedSystemTextField()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18744BDBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for SystemTextFieldConfiguration(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ResolvedSystemTextField()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSystemTextField()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18744BEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for ResolvedSystemTextField(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v3, *(_BYTE *)(v3 + 8));
  v4 = v3 + *(int *)(v1 + 20);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_BYTE *)(v4 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 152), *(_QWORD *)(v4 + 160), *(_QWORD *)(v4 + 168), *(unsigned __int16 *)(v4 + 176) | (*(unsigned __int8 *)(v4 + 178) << 16), *(_BYTE *)(v4 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v6 = v4 + *(int *)(v5 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v8 = v7;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_release();
    swift_release();
    v9 = v6 + *(int *)(v8 + 32);
    v10 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
      }
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvedSystemTextField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ResolvedSystemTextField(0);
  return ResolvedSystemTextField.adaptorView(label:)(a1, a2);
}

uint64_t sub_18744C0E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, MEMORY[0x1E0CE3D60], a3);
}

uint64_t sub_18744C0EC()
{
  return EnvironmentValues.disableLinkColor.setter();
}

uint64_t type metadata accessor for PlatformTextFieldAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for PlatformTextFieldAdaptor);
}

uint64_t type metadata accessor for TextViewAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TextViewAdaptor);
}

void type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<TextViewAdaptor, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for TextViewAdaptor);
}

void type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TextViewAdaptor, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>(uint64_t a1)
{
  type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>(a1, &lazy cache variable for type metadata for _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?, &lazy protocol witness table cache variable for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>? and conformance <A> A?, lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>);
}

void type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?(a4, a3, a5);
    v9 = type metadata accessor for _BackgroundModifier();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    v0 = type metadata accessor for StrokeShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>);
  }
}

uint64_t lazy protocol witness table accessor for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView> and conformance StrokeShapeView<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>, MEMORY[0x1E0CE2F40]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TextViewAdaptor, _PaddingLayout>, _BackgroundModifier<StrokeShapeView<RoundedRectangle, PlainDividerShapeStyle, EmptyView>?>>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
}

void type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>(uint64_t a1)
{
  type metadata accessor for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>(a1, &lazy cache variable for type metadata for _BackgroundModifier<_ShapeView<RoundedRectangle, Color>?>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, Color>?, &lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle, Color>? and conformance <A> A?, lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>);
}

void type metadata accessor for _ShapeView<RoundedRectangle, Color>?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(a1, &lazy cache variable for type metadata for _ShapeView<RoundedRectangle, Color>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, Color>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void type metadata accessor for _ShapeView<RoundedRectangle, Color>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle, Color>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    v0 = type metadata accessor for _ShapeView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<RoundedRectangle, Color>);
  }
}

uint64_t lazy protocol witness table accessor for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle, Color> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<RoundedRectangle, Color>, MEMORY[0x1E0CE0E50]);
}

uint64_t sub_18744C3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE3D48], a3);
}

uint64_t sub_18744C3EC()
{
  return EnvironmentValues.isVisionEnabled.setter();
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformTextFieldAdaptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v59;
  id v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  int __dsta;
  char *__dst;
  uint64_t v100;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v100 = a3;
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v91 = a2[17];
    v92 = a2[18];
    v93 = a2[19];
    v94 = a2[20];
    v95 = a2[21];
    v97 = *((unsigned __int8 *)a2 + 178);
    __dsta = *((unsigned __int16 *)a2 + 88);
    v96 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v91, v92, v93, v94, v95, __dsta | (v97 << 16), v96);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v91;
    *(_QWORD *)(a1 + 144) = v92;
    *(_QWORD *)(a1 + 152) = v93;
    *(_QWORD *)(a1 + 160) = v94;
    *(_QWORD *)(a1 + 168) = v95;
    *(_BYTE *)(a1 + 178) = v97;
    *(_WORD *)(a1 + 176) = __dsta;
    *(_BYTE *)(a1 + 179) = v96;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v23 = *(int *)(v22 + 56);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    v27 = v26;
    v28 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      v30 = v100;
    }
    else
    {
      v31 = v25[1];
      *v24 = *v25;
      v24[1] = v31;
      v32 = *(int *)(v27 + 32);
      __dst = (char *)v24 + v32;
      v33 = (char *)v25 + v32;
      v34 = type metadata accessor for TextSelection(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      v37 = v33;
      v38 = v34;
      swift_retain();
      swift_retain();
      if (v36(v37, 1, v38))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v40 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(__dst, v37, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        __dst[*(int *)(v38 + 20)] = *((_BYTE *)v37 + *(int *)(v38 + 20));
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v38);
      }
      v30 = v100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
    }
    v42 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(_QWORD *)(a1 + *(int *)(v42 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 20));
    v43 = *(int *)(v30 + 20);
    v44 = a1 + v43;
    v45 = (uint64_t)a2 + v43;
    v46 = *(uint64_t *)((char *)a2 + v43);
    v47 = *(uint64_t *)((char *)a2 + v43 + 8);
    *(_QWORD *)v44 = v46;
    *(_QWORD *)(v44 + 8) = v47;
    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
    v48 = *(void **)(v45 + 24);
    swift_bridgeObjectRetain();
    if (v48 == (void *)1)
    {
      v49 = *(_OWORD *)(v45 + 200);
      *(_OWORD *)(v44 + 184) = *(_OWORD *)(v45 + 184);
      *(_OWORD *)(v44 + 200) = v49;
      *(_OWORD *)(v44 + 216) = *(_OWORD *)(v45 + 216);
      *(_QWORD *)(v44 + 232) = *(_QWORD *)(v45 + 232);
      v50 = *(_OWORD *)(v45 + 136);
      *(_OWORD *)(v44 + 120) = *(_OWORD *)(v45 + 120);
      *(_OWORD *)(v44 + 136) = v50;
      v51 = *(_OWORD *)(v45 + 168);
      *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
      *(_OWORD *)(v44 + 168) = v51;
      v52 = *(_OWORD *)(v45 + 72);
      *(_OWORD *)(v44 + 56) = *(_OWORD *)(v45 + 56);
      *(_OWORD *)(v44 + 72) = v52;
      v53 = *(_OWORD *)(v45 + 104);
      *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
      *(_OWORD *)(v44 + 104) = v53;
      v54 = *(_OWORD *)(v45 + 40);
      *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
      *(_OWORD *)(v44 + 40) = v54;
    }
    else
    {
      v55 = *(void **)(v45 + 32);
      v56 = *(void **)(v45 + 40);
      *(_QWORD *)(v44 + 24) = v48;
      *(_QWORD *)(v44 + 32) = v55;
      *(_QWORD *)(v44 + 40) = v56;
      v57 = (_OWORD *)(v44 + 48);
      v58 = (_OWORD *)(v45 + 48);
      v59 = *(_QWORD *)(v45 + 168);
      v60 = v48;
      v61 = v55;
      v62 = v56;
      if (v59 >> 1 == 4294967294)
      {
        v63 = *(_OWORD *)(v45 + 192);
        *(_OWORD *)(v44 + 176) = *(_OWORD *)(v45 + 176);
        *(_OWORD *)(v44 + 192) = v63;
        *(_OWORD *)(v44 + 208) = *(_OWORD *)(v45 + 208);
        *(_DWORD *)(v44 + 223) = *(_DWORD *)(v45 + 223);
        v64 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v64;
        v65 = *(_OWORD *)(v45 + 160);
        *(_OWORD *)(v44 + 144) = *(_OWORD *)(v45 + 144);
        *(_OWORD *)(v44 + 160) = v65;
        v66 = *(_OWORD *)(v45 + 64);
        *v57 = *v58;
        *(_OWORD *)(v44 + 64) = v66;
        v67 = *(_OWORD *)(v45 + 96);
        *(_OWORD *)(v44 + 80) = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v44 + 96) = v67;
        v30 = v100;
      }
      else
      {
        v68 = *(unsigned __int8 *)(v45 + 56);
        if (v68 == 255)
        {
          *(_QWORD *)v57 = *(_QWORD *)v58;
          *(_BYTE *)(v44 + 56) = *(_BYTE *)(v45 + 56);
        }
        else
        {
          v69 = *(void **)(v45 + 48);
          outlined copy of GraphicsImage.Contents(v69, *(_BYTE *)(v45 + 56));
          *(_QWORD *)(v44 + 48) = v69;
          *(_BYTE *)(v44 + 56) = v68;
          v59 = *(_QWORD *)(v45 + 168);
        }
        v30 = v100;
        *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
        *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 72);
        *(_BYTE *)(v44 + 88) = *(_BYTE *)(v45 + 88);
        *(_OWORD *)(v44 + 92) = *(_OWORD *)(v45 + 92);
        *(_BYTE *)(v44 + 108) = *(_BYTE *)(v45 + 108);
        v70 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v70;
        *(_WORD *)(v44 + 144) = *(_WORD *)(v45 + 144);
        *(_BYTE *)(v44 + 146) = *(_BYTE *)(v45 + 146);
        *(_BYTE *)(v44 + 147) = *(_BYTE *)(v45 + 147);
        if (v59 >> 1 == 0xFFFFFFFF)
        {
          v71 = *(_OWORD *)(v45 + 168);
          *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
          *(_OWORD *)(v44 + 168) = v71;
        }
        else
        {
          v72 = *(_QWORD *)(v45 + 152);
          v73 = *(_QWORD *)(v45 + 160);
          v74 = *(_QWORD *)(v45 + 176);
          outlined copy of AccessibilityImageLabel(v72, v73, v59);
          *(_QWORD *)(v44 + 152) = v72;
          *(_QWORD *)(v44 + 160) = v73;
          *(_QWORD *)(v44 + 168) = v59;
          *(_QWORD *)(v44 + 176) = v74;
        }
        v75 = *(_QWORD *)(v45 + 192);
        *(_QWORD *)(v44 + 184) = *(_QWORD *)(v45 + 184);
        *(_QWORD *)(v44 + 192) = v75;
        *(_WORD *)(v44 + 200) = *(_WORD *)(v45 + 200);
        *(_DWORD *)(v44 + 204) = *(_DWORD *)(v45 + 204);
        *(_BYTE *)(v44 + 208) = *(_BYTE *)(v45 + 208);
        v76 = *(void **)(v45 + 216);
        *(_QWORD *)(v44 + 216) = v76;
        *(_WORD *)(v44 + 224) = *(_WORD *)(v45 + 224);
        *(_BYTE *)(v44 + 226) = *(_BYTE *)(v45 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v77 = v76;
      }
      *(_BYTE *)(v44 + 227) = *(_BYTE *)(v45 + 227);
      *(_QWORD *)(v44 + 232) = *(_QWORD *)(v45 + 232);
      swift_retain();
    }
    v78 = *(_QWORD *)(v45 + 288);
    if (v78 == 1)
    {
      v79 = *(_OWORD *)(v45 + 256);
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(_OWORD *)(v44 + 256) = v79;
      v80 = *(_OWORD *)(v45 + 288);
      *(_OWORD *)(v44 + 272) = *(_OWORD *)(v45 + 272);
      *(_OWORD *)(v44 + 288) = v80;
    }
    else
    {
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(_QWORD *)(v44 + 256) = *(_QWORD *)(v45 + 256);
      v81 = (_OWORD *)(v44 + 264);
      v82 = (_OWORD *)(v45 + 264);
      if (v78)
      {
        v83 = *(_QWORD *)(v45 + 296);
        *(_QWORD *)(v44 + 288) = v78;
        *(_QWORD *)(v44 + 296) = v83;
        (**(void (***)(_OWORD *, _OWORD *))(v78 - 8))(v81, v82);
      }
      else
      {
        v84 = *(_OWORD *)(v45 + 280);
        *v81 = *v82;
        *(_OWORD *)(v44 + 280) = v84;
        *(_QWORD *)(v44 + 296) = *(_QWORD *)(v45 + 296);
      }
    }
    *(_QWORD *)(v44 + 304) = *(_QWORD *)(v45 + 304);
    *(_BYTE *)(v44 + 312) = *(_BYTE *)(v45 + 312);
    v85 = *(_QWORD *)(v45 + 328);
    *(_QWORD *)(v44 + 320) = *(_QWORD *)(v45 + 320);
    *(_QWORD *)(v44 + 328) = v85;
    v86 = *(int *)(v30 + 24);
    v87 = a1 + v86;
    v88 = (uint64_t)a2 + v86;
    *(_BYTE *)(v87 + 32) = *(_BYTE *)(v88 + 32);
    v89 = *(_OWORD *)(v88 + 16);
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *(_OWORD *)(v87 + 16) = v89;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  _OWORD *v56;
  _OWORD *v57;
  unint64_t v58;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  _OWORD *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  int __dsta;
  char *__dst;
  uint64_t v99;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v99 = a3;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v9, v10, v11);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v12;
  }
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v90 = *(_QWORD *)(a2 + 136);
  v91 = *(_QWORD *)(a2 + 144);
  v92 = *(_QWORD *)(a2 + 152);
  v93 = *(_QWORD *)(a2 + 160);
  v94 = *(_QWORD *)(a2 + 168);
  v96 = *(unsigned __int8 *)(a2 + 178);
  __dsta = *(unsigned __int16 *)(a2 + 176);
  v95 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v19, v20, v90, v91, v92, v93, v94, __dsta | (v96 << 16), v95);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v90;
  *(_QWORD *)(a1 + 144) = v91;
  *(_QWORD *)(a1 + 152) = v92;
  *(_QWORD *)(a1 + 160) = v93;
  *(_QWORD *)(a1 + 168) = v94;
  *(_BYTE *)(a1 + 178) = v96;
  *(_WORD *)(a1 + 176) = __dsta;
  *(_BYTE *)(a1 + 179) = v95;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v22 = *(int *)(v21 + 56);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  type metadata accessor for Binding<TextSelection?>(0);
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    v29 = v99;
  }
  else
  {
    v30 = v24[1];
    *v23 = *v24;
    v23[1] = v30;
    v31 = *(int *)(v26 + 32);
    __dst = (char *)v23 + v31;
    v32 = (char *)v24 + v31;
    v33 = type metadata accessor for TextSelection(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
    v36 = v32;
    v37 = v33;
    swift_retain();
    swift_retain();
    if (v35(v36, 1, v37))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(__dst, v36, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      __dst[*(int *)(v37 + 20)] = *((_BYTE *)v36 + *(int *)(v37 + 20));
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v37);
    }
    v29 = v99;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
  }
  v41 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v41 + 20)) = *(_QWORD *)(a2 + *(int *)(v41 + 20));
  v42 = *(int *)(v29 + 20);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)(a2 + v42);
  v46 = *(_QWORD *)(a2 + v42 + 8);
  *(_QWORD *)v43 = v45;
  *(_QWORD *)(v43 + 8) = v46;
  *(_DWORD *)(v43 + 16) = *(_DWORD *)(v44 + 16);
  v47 = *(void **)(v44 + 24);
  swift_bridgeObjectRetain();
  if (v47 == (void *)1)
  {
    v48 = *(_OWORD *)(v44 + 200);
    *(_OWORD *)(v43 + 184) = *(_OWORD *)(v44 + 184);
    *(_OWORD *)(v43 + 200) = v48;
    *(_OWORD *)(v43 + 216) = *(_OWORD *)(v44 + 216);
    *(_QWORD *)(v43 + 232) = *(_QWORD *)(v44 + 232);
    v49 = *(_OWORD *)(v44 + 136);
    *(_OWORD *)(v43 + 120) = *(_OWORD *)(v44 + 120);
    *(_OWORD *)(v43 + 136) = v49;
    v50 = *(_OWORD *)(v44 + 168);
    *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
    *(_OWORD *)(v43 + 168) = v50;
    v51 = *(_OWORD *)(v44 + 72);
    *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
    *(_OWORD *)(v43 + 72) = v51;
    v52 = *(_OWORD *)(v44 + 104);
    *(_OWORD *)(v43 + 88) = *(_OWORD *)(v44 + 88);
    *(_OWORD *)(v43 + 104) = v52;
    v53 = *(_OWORD *)(v44 + 40);
    *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
    *(_OWORD *)(v43 + 40) = v53;
  }
  else
  {
    v54 = *(void **)(v44 + 32);
    v55 = *(void **)(v44 + 40);
    *(_QWORD *)(v43 + 24) = v47;
    *(_QWORD *)(v43 + 32) = v54;
    *(_QWORD *)(v43 + 40) = v55;
    v56 = (_OWORD *)(v43 + 48);
    v57 = (_OWORD *)(v44 + 48);
    v58 = *(_QWORD *)(v44 + 168);
    v59 = v47;
    v60 = v54;
    v61 = v55;
    if (v58 >> 1 == 4294967294)
    {
      v62 = *(_OWORD *)(v44 + 192);
      *(_OWORD *)(v43 + 176) = *(_OWORD *)(v44 + 176);
      *(_OWORD *)(v43 + 192) = v62;
      *(_OWORD *)(v43 + 208) = *(_OWORD *)(v44 + 208);
      *(_DWORD *)(v43 + 223) = *(_DWORD *)(v44 + 223);
      v63 = *(_OWORD *)(v44 + 128);
      *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
      *(_OWORD *)(v43 + 128) = v63;
      v64 = *(_OWORD *)(v44 + 160);
      *(_OWORD *)(v43 + 144) = *(_OWORD *)(v44 + 144);
      *(_OWORD *)(v43 + 160) = v64;
      v65 = *(_OWORD *)(v44 + 64);
      *v56 = *v57;
      *(_OWORD *)(v43 + 64) = v65;
      v66 = *(_OWORD *)(v44 + 96);
      *(_OWORD *)(v43 + 80) = *(_OWORD *)(v44 + 80);
      *(_OWORD *)(v43 + 96) = v66;
      v29 = v99;
    }
    else
    {
      v67 = *(unsigned __int8 *)(v44 + 56);
      if (v67 == 255)
      {
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *(_BYTE *)(v43 + 56) = *(_BYTE *)(v44 + 56);
      }
      else
      {
        v68 = *(void **)(v44 + 48);
        outlined copy of GraphicsImage.Contents(v68, *(_BYTE *)(v44 + 56));
        *(_QWORD *)(v43 + 48) = v68;
        *(_BYTE *)(v43 + 56) = v67;
        v58 = *(_QWORD *)(v44 + 168);
      }
      v29 = v99;
      *(_QWORD *)(v43 + 64) = *(_QWORD *)(v44 + 64);
      *(_OWORD *)(v43 + 72) = *(_OWORD *)(v44 + 72);
      *(_BYTE *)(v43 + 88) = *(_BYTE *)(v44 + 88);
      *(_OWORD *)(v43 + 92) = *(_OWORD *)(v44 + 92);
      *(_BYTE *)(v43 + 108) = *(_BYTE *)(v44 + 108);
      v69 = *(_OWORD *)(v44 + 128);
      *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
      *(_OWORD *)(v43 + 128) = v69;
      *(_WORD *)(v43 + 144) = *(_WORD *)(v44 + 144);
      *(_BYTE *)(v43 + 146) = *(_BYTE *)(v44 + 146);
      *(_BYTE *)(v43 + 147) = *(_BYTE *)(v44 + 147);
      if (v58 >> 1 == 0xFFFFFFFF)
      {
        v70 = *(_OWORD *)(v44 + 168);
        *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
        *(_OWORD *)(v43 + 168) = v70;
      }
      else
      {
        v71 = *(_QWORD *)(v44 + 152);
        v72 = *(_QWORD *)(v44 + 160);
        v73 = *(_QWORD *)(v44 + 176);
        outlined copy of AccessibilityImageLabel(v71, v72, v58);
        *(_QWORD *)(v43 + 152) = v71;
        *(_QWORD *)(v43 + 160) = v72;
        *(_QWORD *)(v43 + 168) = v58;
        *(_QWORD *)(v43 + 176) = v73;
      }
      v74 = *(_QWORD *)(v44 + 192);
      *(_QWORD *)(v43 + 184) = *(_QWORD *)(v44 + 184);
      *(_QWORD *)(v43 + 192) = v74;
      *(_WORD *)(v43 + 200) = *(_WORD *)(v44 + 200);
      *(_DWORD *)(v43 + 204) = *(_DWORD *)(v44 + 204);
      *(_BYTE *)(v43 + 208) = *(_BYTE *)(v44 + 208);
      v75 = *(void **)(v44 + 216);
      *(_QWORD *)(v43 + 216) = v75;
      *(_WORD *)(v43 + 224) = *(_WORD *)(v44 + 224);
      *(_BYTE *)(v43 + 226) = *(_BYTE *)(v44 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      v76 = v75;
    }
    *(_BYTE *)(v43 + 227) = *(_BYTE *)(v44 + 227);
    *(_QWORD *)(v43 + 232) = *(_QWORD *)(v44 + 232);
    swift_retain();
  }
  v77 = *(_QWORD *)(v44 + 288);
  if (v77 == 1)
  {
    v78 = *(_OWORD *)(v44 + 256);
    *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
    *(_OWORD *)(v43 + 256) = v78;
    v79 = *(_OWORD *)(v44 + 288);
    *(_OWORD *)(v43 + 272) = *(_OWORD *)(v44 + 272);
    *(_OWORD *)(v43 + 288) = v79;
  }
  else
  {
    *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
    *(_QWORD *)(v43 + 256) = *(_QWORD *)(v44 + 256);
    v80 = (_OWORD *)(v43 + 264);
    v81 = (_OWORD *)(v44 + 264);
    if (v77)
    {
      v82 = *(_QWORD *)(v44 + 296);
      *(_QWORD *)(v43 + 288) = v77;
      *(_QWORD *)(v43 + 296) = v82;
      (**(void (***)(_OWORD *, _OWORD *))(v77 - 8))(v80, v81);
    }
    else
    {
      v83 = *(_OWORD *)(v44 + 280);
      *v80 = *v81;
      *(_OWORD *)(v43 + 280) = v83;
      *(_QWORD *)(v43 + 296) = *(_QWORD *)(v44 + 296);
    }
  }
  *(_QWORD *)(v43 + 304) = *(_QWORD *)(v44 + 304);
  *(_BYTE *)(v43 + 312) = *(_BYTE *)(v44 + 312);
  v84 = *(_QWORD *)(v44 + 328);
  *(_QWORD *)(v43 + 320) = *(_QWORD *)(v44 + 320);
  *(_QWORD *)(v43 + 328) = v84;
  v85 = *(int *)(v29 + 24);
  v86 = a1 + v85;
  v87 = a2 + v85;
  *(_BYTE *)(v86 + 32) = *(_BYTE *)(v87 + 32);
  v88 = *(_OWORD *)(v87 + 16);
  *(_OWORD *)v86 = *(_OWORD *)v87;
  *(_OWORD *)(v86 + 16) = v88;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PlatformTextFieldAdaptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _OWORD *v79;
  void *v80;
  void *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *v103;
  void *v104;
  _OWORD *v105;
  id *v106;
  unint64_t v107;
  id v108;
  id v109;
  id v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;
  _OWORD *v127;
  __int128 *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  id v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  void *v151;
  int v152;
  void *v153;
  void *v154;
  char v155;
  id v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  void *v166;
  id v167;
  void *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void *v178;
  id v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  void *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _OWORD *v188;
  _OWORD *v189;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  void *v204;
  void *v205;
  id v206;
  __int128 *v207;
  __int128 *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _OWORD *v217;
  __int128 *v218;
  uint64_t v219;
  __int128 *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  __int128 *v229;
  __int128 v230;
  __int128 v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  _QWORD *v241;
  _QWORD *v242;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v5[1] = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v5[2] = *(_QWORD *)(a2 + 16);
  v5[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 32) = *(_BYTE *)(a2 + 32);
  *((_BYTE *)v5 + 33) = *(_BYTE *)(a2 + 33);
  v6 = v5 + 5;
  v7 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 64);
  v233 = a3;
  if (v5[8])
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      v12 = v5[5];
      v13 = v5[6];
      v14 = *((_BYTE *)v5 + 56);
      v5[5] = v9;
      v5[6] = v10;
      *((_BYTE *)v5 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      v5[8] = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v5 + 5));
      v18 = *(_OWORD *)(a2 + 56);
      *v6 = *v7;
      *(_OWORD *)(v5 + 7) = v18;
    }
  }
  else if (v8)
  {
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    v5[5] = v15;
    v5[6] = v16;
    *((_BYTE *)v5 + 56) = v17;
    v5[8] = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 56);
    *v6 = *v7;
    *(_OWORD *)(v5 + 7) = v19;
  }
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 104);
  v24 = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a2 + 128);
  v234 = *(_QWORD *)(a2 + 136);
  v235 = *(_QWORD *)(a2 + 144);
  v236 = *(_QWORD *)(a2 + 152);
  v237 = *(_QWORD *)(a2 + 160);
  v238 = *(_QWORD *)(a2 + 168);
  v239 = *(unsigned __int16 *)(a2 + 176);
  v240 = *(unsigned __int8 *)(a2 + 178);
  v242 = (_QWORD *)a2;
  v28 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v22, v23, v25, v24, v26, v27, v234, v235, v236, v237, v238, v239 | (v240 << 16), v28);
  v29 = v5[9];
  v30 = v5[10];
  v31 = v5[11];
  v32 = v5[12];
  v33 = v5[13];
  v34 = v5[14];
  v35 = v5[15];
  v36 = v5[16];
  v37 = *(_OWORD *)(v5 + 17);
  v38 = *(_OWORD *)(v5 + 19);
  v39 = v5[21];
  v40 = *((unsigned __int16 *)v5 + 88) | (*((unsigned __int8 *)v5 + 178) << 16);
  v41 = *((_BYTE *)v5 + 179);
  v5[9] = v20;
  v5[10] = v21;
  v5[11] = v22;
  v5[12] = v23;
  v5[13] = v25;
  v5[14] = v24;
  v5[15] = v26;
  v5[16] = v27;
  v5[17] = v234;
  v5[18] = v235;
  v5[19] = v236;
  v5[20] = v237;
  v5[21] = v238;
  *((_WORD *)v5 + 88) = v239;
  *((_BYTE *)v5 + 178) = v240;
  *((_BYTE *)v5 + 179) = v28;
  v42 = v242;
  outlined consume of StateOrBinding<TextFieldState>(v29, v30, v31, v32, v33, v34, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v44 = *(int *)(v43 + 56);
  v45 = (_QWORD *)((char *)v5 + v44);
  v46 = (_QWORD *)((char *)v242 + v44);
  type metadata accessor for Binding<TextSelection?>(0);
  v48 = v47;
  v49 = *(_QWORD *)(v47 - 8);
  v50 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48);
  LODWORD(v24) = v50(v45, 1, v47);
  v51 = v50(v46, 1, v48);
  if ((_DWORD)v24)
  {
    if (v51)
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v241 = v5;
      *v45 = *v46;
      v45[1] = v46[1];
      v55 = *(int *)(v48 + 32);
      v56 = (char *)v45 + v55;
      v57 = (char *)v46 + v55;
      v58 = type metadata accessor for TextSelection(0);
      v59 = *(_QWORD *)(v58 - 8);
      v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      swift_retain();
      swift_retain();
      if (v60(v57, 1, v58))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        v42 = v242;
      }
      else
      {
        v72 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v56, v57, v73);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        v5 = v241;
        v42 = v242;
        v56[*(int *)(v58 + 20)] = v57[*(int *)(v58 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
    }
    v53 = v233;
    goto LABEL_28;
  }
  v53 = v233;
  if (v51)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_28;
  }
  *v45 = *v46;
  swift_retain();
  swift_release();
  v45[1] = v46[1];
  swift_retain();
  swift_release();
  v62 = *(int *)(v48 + 32);
  v63 = (char *)v45 + v62;
  v64 = (char *)v46 + v62;
  v65 = type metadata accessor for TextSelection(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (v68)
  {
    if (!v69)
    {
      v70 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v63, v64, v71);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      v63[*(int *)(v65 + 20)] = v64[*(int *)(v65 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
      goto LABEL_28;
    }
LABEL_23:
    type metadata accessor for TextSelection?(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_28;
  }
  if (v69)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v63, type metadata accessor for TextSelection);
    goto LABEL_23;
  }
  if (v5 != v242)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v63, type metadata accessor for TextSelection.Indices);
    v181 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v63, v64, v182);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
    }
  }
  v63[*(int *)(v65 + 20)] = v64[*(int *)(v65 + 20)];
LABEL_28:
  v75 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)((char *)v5 + *(int *)(v75 + 20)) = *(_QWORD *)((char *)v42 + *(int *)(v75 + 20));
  v76 = *(int *)(v53 + 20);
  v77 = (char *)v5 + v76;
  v78 = (uint64_t)v42 + v76;
  *(_QWORD *)((char *)v5 + v76) = *(_QWORD *)((char *)v42 + v76);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v77 + 1) = *(_QWORD *)(v78 + 8);
  *((_DWORD *)v77 + 4) = *(_DWORD *)(v78 + 16);
  v79 = v77 + 24;
  v80 = (void *)*((_QWORD *)v77 + 3);
  v82 = (_OWORD *)(v78 + 24);
  v81 = *(void **)(v78 + 24);
  if (v80 == (void *)1)
  {
    if (v81 == (void *)1)
    {
      v83 = *(_OWORD *)(v78 + 40);
      *v79 = *v82;
      *(_OWORD *)(v77 + 40) = v83;
      v84 = *(_OWORD *)(v78 + 56);
      v85 = *(_OWORD *)(v78 + 72);
      v86 = *(_OWORD *)(v78 + 104);
      *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
      *(_OWORD *)(v77 + 104) = v86;
      *(_OWORD *)(v77 + 56) = v84;
      *(_OWORD *)(v77 + 72) = v85;
      v87 = *(_OWORD *)(v78 + 120);
      v88 = *(_OWORD *)(v78 + 136);
      v89 = *(_OWORD *)(v78 + 168);
      *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
      *(_OWORD *)(v77 + 168) = v89;
      *(_OWORD *)(v77 + 120) = v87;
      *(_OWORD *)(v77 + 136) = v88;
      v90 = *(_OWORD *)(v78 + 184);
      v91 = *(_OWORD *)(v78 + 200);
      v92 = *(_OWORD *)(v78 + 216);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      *(_OWORD *)(v77 + 200) = v91;
      *(_OWORD *)(v77 + 216) = v92;
      *(_OWORD *)(v77 + 184) = v90;
    }
    else
    {
      *((_QWORD *)v77 + 3) = v81;
      v103 = *(void **)(v78 + 32);
      *((_QWORD *)v77 + 4) = v103;
      v104 = *(void **)(v78 + 40);
      *((_QWORD *)v77 + 5) = v104;
      v105 = v77 + 48;
      v106 = (id *)(v78 + 48);
      v107 = *(_QWORD *)(v78 + 168);
      v108 = v81;
      v109 = v103;
      v110 = v104;
      if (v107 >> 1 == 4294967294)
      {
        v111 = *(_OWORD *)v106;
        v112 = *(_OWORD *)(v78 + 64);
        v113 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v113;
        *v105 = v111;
        *((_OWORD *)v77 + 4) = v112;
        v114 = *(_OWORD *)(v78 + 112);
        v115 = *(_OWORD *)(v78 + 128);
        v116 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v116;
        *((_OWORD *)v77 + 7) = v114;
        *((_OWORD *)v77 + 8) = v115;
        v117 = *(_OWORD *)(v78 + 176);
        v118 = *(_OWORD *)(v78 + 192);
        v119 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v118;
        *((_OWORD *)v77 + 13) = v119;
        *((_OWORD *)v77 + 11) = v117;
        v42 = v242;
      }
      else
      {
        v139 = *(unsigned __int8 *)(v78 + 56);
        if (v139 == 255)
        {
          v156 = *v106;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v105 = v156;
        }
        else
        {
          v140 = *v106;
          outlined copy of GraphicsImage.Contents(*v106, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v140;
          v77[56] = v139;
        }
        v42 = v242;
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v157 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v157;
        v158 = *(_OWORD *)(v78 + 112);
        v159 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v158;
        *((_OWORD *)v77 + 8) = v159;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v160 = *(_QWORD *)(v78 + 168);
        if (v160 >> 1 == 0xFFFFFFFF)
        {
          v161 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v161;
        }
        else
        {
          v162 = *(_QWORD *)(v78 + 152);
          v163 = *(_QWORD *)(v78 + 160);
          v164 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v162, v163, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v162;
          *((_QWORD *)v77 + 20) = v163;
          *((_QWORD *)v77 + 21) = v160;
          *((_QWORD *)v77 + 22) = v164;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v165 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v165;
        v166 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v166;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v167 = v166;
      }
      v77[227] = *(_BYTE *)(v78 + 227);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      swift_retain();
    }
  }
  else if (v81 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v77 + 24));
    v93 = *(_OWORD *)(v78 + 40);
    *v79 = *v82;
    *(_OWORD *)(v77 + 40) = v93;
    v94 = *(_OWORD *)(v78 + 104);
    v96 = *(_OWORD *)(v78 + 56);
    v95 = *(_OWORD *)(v78 + 72);
    *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
    *(_OWORD *)(v77 + 104) = v94;
    *(_OWORD *)(v77 + 56) = v96;
    *(_OWORD *)(v77 + 72) = v95;
    v97 = *(_OWORD *)(v78 + 168);
    v99 = *(_OWORD *)(v78 + 120);
    v98 = *(_OWORD *)(v78 + 136);
    *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
    *(_OWORD *)(v77 + 168) = v97;
    *(_OWORD *)(v77 + 120) = v99;
    *(_OWORD *)(v77 + 136) = v98;
    v101 = *(_OWORD *)(v78 + 200);
    v100 = *(_OWORD *)(v78 + 216);
    v102 = *(_OWORD *)(v78 + 184);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    *(_OWORD *)(v77 + 200) = v101;
    *(_OWORD *)(v77 + 216) = v100;
    *(_OWORD *)(v77 + 184) = v102;
  }
  else
  {
    *((_QWORD *)v77 + 3) = v81;
    v120 = v81;

    v121 = (void *)*((_QWORD *)v77 + 4);
    v122 = *(void **)(v78 + 32);
    *((_QWORD *)v77 + 4) = v122;
    v123 = v122;

    v124 = (void *)*((_QWORD *)v77 + 5);
    v125 = *(void **)(v78 + 40);
    *((_QWORD *)v77 + 5) = v125;
    v126 = v125;

    v127 = v77 + 48;
    v128 = (__int128 *)(v78 + 48);
    v129 = *(_QWORD *)(v78 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((_QWORD *)v77 + 21) >> 1 == 4294967294)
    {
      if (v129 == 0x1FFFFFFFCLL)
      {
        v130 = *v128;
        v131 = *(_OWORD *)(v78 + 64);
        v132 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v132;
        *v127 = v130;
        *((_OWORD *)v77 + 4) = v131;
        v133 = *(_OWORD *)(v78 + 112);
        v134 = *(_OWORD *)(v78 + 128);
        v135 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v135;
        *((_OWORD *)v77 + 7) = v133;
        *((_OWORD *)v77 + 8) = v134;
        v136 = *(_OWORD *)(v78 + 176);
        v137 = *(_OWORD *)(v78 + 192);
        v138 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v137;
        *((_OWORD *)v77 + 13) = v138;
        *((_OWORD *)v77 + 11) = v136;
      }
      else
      {
        v150 = *(unsigned __int8 *)(v78 + 56);
        if (v150 == 255)
        {
          v168 = *(void **)v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v168;
        }
        else
        {
          v151 = *(void **)v128;
          outlined copy of GraphicsImage.Contents(v151, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v151;
          v77[56] = v150;
        }
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v169 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v169;
        v170 = *(_OWORD *)(v78 + 112);
        v171 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v170;
        *((_OWORD *)v77 + 8) = v171;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v172 = *(_QWORD *)(v78 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          v173 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v173;
        }
        else
        {
          v174 = *(_QWORD *)(v78 + 152);
          v175 = *(_QWORD *)(v78 + 160);
          v176 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v174;
          *((_QWORD *)v77 + 20) = v175;
          *((_QWORD *)v77 + 21) = v172;
          *((_QWORD *)v77 + 22) = v176;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v177 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v177;
        v178 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v178;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v179 = v178;
      }
    }
    else if (v129 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v77 + 48));
      v141 = *(_OWORD *)(v78 + 96);
      v143 = *v128;
      v142 = *(_OWORD *)(v78 + 64);
      *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
      *((_OWORD *)v77 + 6) = v141;
      *v127 = v143;
      *((_OWORD *)v77 + 4) = v142;
      v144 = *(_OWORD *)(v78 + 160);
      v146 = *(_OWORD *)(v78 + 112);
      v145 = *(_OWORD *)(v78 + 128);
      *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
      *((_OWORD *)v77 + 10) = v144;
      *((_OWORD *)v77 + 7) = v146;
      *((_OWORD *)v77 + 8) = v145;
      v148 = *(_OWORD *)(v78 + 192);
      v147 = *(_OWORD *)(v78 + 208);
      v149 = *(_OWORD *)(v78 + 176);
      *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
      *((_OWORD *)v77 + 12) = v148;
      *((_OWORD *)v77 + 13) = v147;
      *((_OWORD *)v77 + 11) = v149;
    }
    else
    {
      v152 = *(unsigned __int8 *)(v78 + 56);
      if (v77[56] == 255)
      {
        if (v152 == 255)
        {
          v184 = *(void **)v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v184;
        }
        else
        {
          v180 = *(void **)v128;
          outlined copy of GraphicsImage.Contents(v180, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v180;
          v77[56] = v152;
        }
      }
      else if (v152 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v77 + 48));
        v183 = *(_BYTE *)(v78 + 56);
        *(_QWORD *)v127 = *(_QWORD *)v128;
        v77[56] = v183;
      }
      else
      {
        v153 = *(void **)v128;
        outlined copy of GraphicsImage.Contents(v153, *(_BYTE *)(v78 + 56));
        v154 = (void *)*((_QWORD *)v77 + 6);
        *((_QWORD *)v77 + 6) = v153;
        v155 = v77[56];
        v77[56] = v152;
        outlined consume of GraphicsImage.Contents(v154, v155);
      }
      *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
      *((_QWORD *)v77 + 9) = *(_QWORD *)(v78 + 72);
      *((_QWORD *)v77 + 10) = *(_QWORD *)(v78 + 80);
      v77[88] = *(_BYTE *)(v78 + 88);
      v185 = *(_OWORD *)(v78 + 92);
      v77[108] = *(_BYTE *)(v78 + 108);
      *(_OWORD *)(v77 + 92) = v185;
      v186 = *(_OWORD *)(v78 + 112);
      v187 = *(_OWORD *)(v78 + 128);
      v77[144] = *(_BYTE *)(v78 + 144);
      *((_OWORD *)v77 + 7) = v186;
      *((_OWORD *)v77 + 8) = v187;
      v77[145] = *(_BYTE *)(v78 + 145);
      v77[146] = *(_BYTE *)(v78 + 146);
      v77[147] = *(_BYTE *)(v78 + 147);
      v188 = v77 + 152;
      v189 = (_OWORD *)(v78 + 152);
      v190 = *(_QWORD *)(v78 + 168);
      v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_QWORD *)v77 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v191 == 0x1FFFFFFFELL)
        {
          v192 = *(_OWORD *)(v78 + 168);
          *v188 = *v189;
          *(_OWORD *)(v77 + 168) = v192;
        }
        else
        {
          v194 = *(_QWORD *)(v78 + 152);
          v195 = *(_QWORD *)(v78 + 160);
          v196 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v194, v195, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v194;
          *((_QWORD *)v77 + 20) = v195;
          *((_QWORD *)v77 + 21) = v190;
          *((_QWORD *)v77 + 22) = v196;
        }
      }
      else if (v191 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v77 + 152));
        v193 = *(_OWORD *)(v78 + 168);
        *v188 = *v189;
        *(_OWORD *)(v77 + 168) = v193;
      }
      else
      {
        v197 = *(_QWORD *)(v78 + 152);
        v198 = *(_QWORD *)(v78 + 160);
        v199 = *(_QWORD *)(v78 + 176);
        outlined copy of AccessibilityImageLabel(v197, v198, *(_QWORD *)(v78 + 168));
        v200 = *((_QWORD *)v77 + 19);
        v201 = *((_QWORD *)v77 + 20);
        v202 = *((_QWORD *)v77 + 21);
        *((_QWORD *)v77 + 19) = v197;
        *((_QWORD *)v77 + 20) = v198;
        *((_QWORD *)v77 + 21) = v190;
        *((_QWORD *)v77 + 22) = v199;
        outlined consume of AccessibilityImageLabel(v200, v201, v202);
      }
      *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
      swift_retain();
      swift_release();
      v77[200] = *(_BYTE *)(v78 + 200);
      v77[201] = *(_BYTE *)(v78 + 201);
      v203 = *(_DWORD *)(v78 + 204);
      v77[208] = *(_BYTE *)(v78 + 208);
      *((_DWORD *)v77 + 51) = v203;
      v204 = (void *)*((_QWORD *)v77 + 27);
      v205 = *(void **)(v78 + 216);
      *((_QWORD *)v77 + 27) = v205;
      v206 = v205;

      *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
      v77[226] = *(_BYTE *)(v78 + 226);
    }
    v77[227] = *(_BYTE *)(v78 + 227);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    swift_retain();
    swift_release();
  }
  v207 = (__int128 *)(v77 + 240);
  v208 = (__int128 *)(v78 + 240);
  v209 = *((_QWORD *)v77 + 36);
  v210 = *(_QWORD *)(v78 + 288);
  if (v209 == 1)
  {
    if (v210 == 1)
    {
      v211 = *v208;
      v212 = *(_OWORD *)(v78 + 256);
      v213 = *(_OWORD *)(v78 + 288);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v213;
LABEL_79:
      *v207 = v211;
      v207[1] = v212;
      goto LABEL_91;
    }
    *((_QWORD *)v77 + 30) = *(_QWORD *)(v78 + 240);
    *((_QWORD *)v77 + 31) = *(_QWORD *)(v78 + 248);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v217 = v77 + 264;
    v218 = (__int128 *)(v78 + 264);
    v219 = *(_QWORD *)(v78 + 288);
    if (v219)
    {
      *((_QWORD *)v77 + 36) = v219;
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      (**(void (***)(_OWORD *, __int128 *))(v219 - 8))(v217, v218);
    }
    else
    {
      v222 = *v218;
      v223 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      *v217 = v222;
      *(_OWORD *)(v77 + 280) = v223;
    }
  }
  else
  {
    if (v210 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v77 + 240));
      v214 = *(_OWORD *)(v78 + 288);
      v216 = *v208;
      v215 = *(_OWORD *)(v78 + 256);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v214;
      *v207 = v216;
      *((_OWORD *)v77 + 16) = v215;
      goto LABEL_91;
    }
    *((_DWORD *)v77 + 60) = *(_DWORD *)(v78 + 240);
    *((_DWORD *)v77 + 61) = *(_DWORD *)(v78 + 244);
    *((_DWORD *)v77 + 62) = *(_DWORD *)(v78 + 248);
    *((_DWORD *)v77 + 63) = *(_DWORD *)(v78 + 252);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v207 = (__int128 *)(v77 + 264);
    v220 = (__int128 *)(v78 + 264);
    v221 = *(_QWORD *)(v78 + 288);
    if (!v209)
    {
      if (v221)
      {
        *((_QWORD *)v77 + 36) = v221;
        *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
        (**(void (***)(uint64_t, uint64_t))(v221 - 8))((uint64_t)(v77 + 264), v78 + 264);
        goto LABEL_91;
      }
      v211 = *v220;
      v212 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      goto LABEL_79;
    }
    if (v221)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v77 + 33, (uint64_t *)(v78 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v77 + 264));
      v224 = *(_QWORD *)(v78 + 296);
      v225 = *(_OWORD *)(v78 + 280);
      *v207 = *v220;
      *(_OWORD *)(v77 + 280) = v225;
      *((_QWORD *)v77 + 37) = v224;
    }
  }
LABEL_91:
  v226 = *(_QWORD *)(v78 + 304);
  v77[312] = *(_BYTE *)(v78 + 312);
  *((_QWORD *)v77 + 38) = v226;
  *((_QWORD *)v77 + 40) = *(_QWORD *)(v78 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v77 + 82) = *(_DWORD *)(v78 + 328);
  *((_DWORD *)v77 + 83) = *(_DWORD *)(v78 + 332);
  v227 = *(int *)(v53 + 24);
  v228 = (char *)v5 + v227;
  v229 = (__int128 *)((char *)v42 + v227);
  v230 = *v229;
  v231 = v229[1];
  v228[32] = *((_BYTE *)v229 + 32);
  *(_OWORD *)v228 = v230;
  *((_OWORD *)v228 + 1) = v231;
  return v5;
}

uint64_t initializeWithTake for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v29;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v8 = *(int *)(v7 + 56);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *(int *)(v12 + 32);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    v19 = type metadata accessor for TextSelection(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v29 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  v23 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v23 + 20)) = *(_QWORD *)(a2 + *(int *)(v23 + 20));
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x150uLL);
  v24 = *(int *)(a3 + 24);
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  *(_BYTE *)(v25 + 32) = *(_BYTE *)(v26 + 32);
  return a1;
}

uint64_t assignWithTake for PlatformTextFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v108;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
    {
      v7 = *(_BYTE *)(a2 + 56);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 168);
  v13 = *(_WORD *)(a2 + 176);
  v14 = *(_BYTE *)(a2 + 178);
  v15 = *(_BYTE *)(a2 + 179);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 136);
  v25 = *(_OWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 168);
  v27 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v28 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 178) = v14;
  *(_WORD *)(a1 + 176) = v13;
  *(_BYTE *)(a1 + 179) = v15;
  outlined consume of StateOrBinding<TextFieldState>(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27, v28);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v30 = *(int *)(v29 + 56);
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  type metadata accessor for Binding<TextSelection?>(0);
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v31, 1, v33);
  v38 = v36(v32, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v39;
      v40 = *(int *)(v34 + 32);
      v41 = &v31[v40];
      v42 = &v32[v40];
      v43 = type metadata accessor for TextSelection(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v108 = a3;
        v60 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v41, v42, v61);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        a3 = v108;
        v41[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v47 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
    v48 = v31;
    v49 = v32;
LABEL_13:
    memcpy(v48, v49, v47);
    goto LABEL_26;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  swift_release();
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_release();
  v50 = *(int *)(v34 + 32);
  v51 = &v31[v50];
  v52 = &v32[v50];
  v53 = type metadata accessor for TextSelection(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      v58 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v51, v52, v59);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    v47 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
    v48 = v51;
    v49 = v52;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection.Indices);
    v87 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v51, v52, v88);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
  }
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
LABEL_26:
  v63 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v63 + 20)) = *(_QWORD *)(a2 + *(int *)(v63 + 20));
  v64 = *(int *)(a3 + 20);
  v65 = a1 + v64;
  v66 = a2 + v64;
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  *(_DWORD *)(v65 + 16) = *(_DWORD *)(v66 + 16);
  v67 = *(void **)(v65 + 24);
  v68 = *(_QWORD *)(v66 + 24);
  if (v67 == (void *)1)
  {
LABEL_29:
    v69 = *(_OWORD *)(v66 + 200);
    *(_OWORD *)(v65 + 184) = *(_OWORD *)(v66 + 184);
    *(_OWORD *)(v65 + 200) = v69;
    *(_OWORD *)(v65 + 216) = *(_OWORD *)(v66 + 216);
    *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
    v70 = *(_OWORD *)(v66 + 136);
    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
    *(_OWORD *)(v65 + 136) = v70;
    v71 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v71;
    v72 = *(_OWORD *)(v66 + 72);
    *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    *(_OWORD *)(v65 + 72) = v72;
    v73 = *(_OWORD *)(v66 + 104);
    *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
    *(_OWORD *)(v65 + 104) = v73;
    v74 = *(_OWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 40) = v74;
    goto LABEL_51;
  }
  if (v68 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v65 + 24);
    goto LABEL_29;
  }
  *(_QWORD *)(v65 + 24) = v68;

  v75 = *(void **)(v65 + 32);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);

  v76 = *(void **)(v65 + 40);
  *(_QWORD *)(v65 + 40) = *(_QWORD *)(v66 + 40);

  v77 = (_QWORD *)(v65 + 48);
  v78 = (_QWORD *)(v66 + 48);
  if (*(_QWORD *)(v65 + 168) >> 1 == 4294967294)
    goto LABEL_33;
  if (*(_QWORD *)(v66 + 168) >> 1 != 4294967294)
  {
    v84 = *(unsigned __int8 *)(v65 + 56);
    if (v84 != 255)
    {
      v85 = *(unsigned __int8 *)(v66 + 56);
      if (v85 != 255)
      {
        v86 = *(void **)(v65 + 48);
        *(_QWORD *)(v65 + 48) = *v78;
        *(_BYTE *)(v65 + 56) = v85;
        outlined consume of GraphicsImage.Contents(v86, v84);
        goto LABEL_44;
      }
      outlined destroy of GraphicsImage.Contents(v65 + 48);
    }
    *v77 = *v78;
    *(_BYTE *)(v65 + 56) = *(_BYTE *)(v66 + 56);
LABEL_44:
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
    *(_BYTE *)(v65 + 88) = *(_BYTE *)(v66 + 88);
    *(_OWORD *)(v65 + 92) = *(_OWORD *)(v66 + 92);
    *(_BYTE *)(v65 + 108) = *(_BYTE *)(v66 + 108);
    v89 = *(_OWORD *)(v66 + 128);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_OWORD *)(v65 + 128) = v89;
    *(_BYTE *)(v65 + 144) = *(_BYTE *)(v66 + 144);
    *(_BYTE *)(v65 + 145) = *(_BYTE *)(v66 + 145);
    v90 = *(_QWORD *)(v65 + 168);
    *(_WORD *)(v65 + 146) = *(_WORD *)(v66 + 146);
    if (v90 >> 1 != 0xFFFFFFFF)
    {
      v91 = *(_QWORD *)(v66 + 168);
      if (v91 >> 1 != 0xFFFFFFFF)
      {
        v93 = *(_QWORD *)(v66 + 176);
        v94 = *(_QWORD *)(v65 + 152);
        v95 = *(_QWORD *)(v65 + 160);
        *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
        *(_QWORD *)(v65 + 168) = v91;
        *(_QWORD *)(v65 + 176) = v93;
        outlined consume of AccessibilityImageLabel(v94, v95, v90);
        goto LABEL_49;
      }
      outlined destroy of AccessibilityImageLabel(v65 + 152);
    }
    v92 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v92;
LABEL_49:
    *(_QWORD *)(v65 + 184) = *(_QWORD *)(v66 + 184);
    swift_unknownObjectRelease();
    *(_QWORD *)(v65 + 192) = *(_QWORD *)(v66 + 192);
    swift_release();
    *(_BYTE *)(v65 + 200) = *(_BYTE *)(v66 + 200);
    *(_BYTE *)(v65 + 201) = *(_BYTE *)(v66 + 201);
    *(_DWORD *)(v65 + 204) = *(_DWORD *)(v66 + 204);
    *(_BYTE *)(v65 + 208) = *(_BYTE *)(v66 + 208);
    v96 = *(void **)(v65 + 216);
    *(_QWORD *)(v65 + 216) = *(_QWORD *)(v66 + 216);

    *(_WORD *)(v65 + 224) = *(_WORD *)(v66 + 224);
    *(_BYTE *)(v65 + 226) = *(_BYTE *)(v66 + 226);
    goto LABEL_50;
  }
  outlined destroy of Image.Resolved(v65 + 48);
LABEL_33:
  v79 = *(_OWORD *)(v66 + 192);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(v66 + 176);
  *(_OWORD *)(v65 + 192) = v79;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(v66 + 208);
  *(_DWORD *)(v65 + 223) = *(_DWORD *)(v66 + 223);
  v80 = *(_OWORD *)(v66 + 128);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_OWORD *)(v65 + 128) = v80;
  v81 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  *(_OWORD *)(v65 + 160) = v81;
  v82 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *(_OWORD *)(v65 + 64) = v82;
  v83 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v83;
LABEL_50:
  *(_BYTE *)(v65 + 227) = *(_BYTE *)(v66 + 227);
  *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
  swift_release();
LABEL_51:
  v97 = *(_QWORD *)(v65 + 288);
  if (v97 == 1)
  {
LABEL_54:
    v99 = *(_OWORD *)(v66 + 256);
    *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
    *(_OWORD *)(v65 + 256) = v99;
    v100 = *(_OWORD *)(v66 + 288);
    *(_OWORD *)(v65 + 272) = *(_OWORD *)(v66 + 272);
    *(_OWORD *)(v65 + 288) = v100;
    goto LABEL_60;
  }
  v98 = *(_QWORD *)(v66 + 288);
  if (v98 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v65 + 240);
    goto LABEL_54;
  }
  *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
  *(_QWORD *)(v65 + 256) = *(_QWORD *)(v66 + 256);
  if (v97)
  {
    v101 = v65 + 264;
    if (v98)
      __swift_destroy_boxed_opaque_existential_1(v101);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v101);
  }
  v102 = *(_OWORD *)(v66 + 280);
  *(_OWORD *)(v65 + 264) = *(_OWORD *)(v66 + 264);
  *(_OWORD *)(v65 + 280) = v102;
  *(_QWORD *)(v65 + 296) = *(_QWORD *)(v66 + 296);
LABEL_60:
  *(_QWORD *)(v65 + 304) = *(_QWORD *)(v66 + 304);
  *(_BYTE *)(v65 + 312) = *(_BYTE *)(v66 + 312);
  *(_QWORD *)(v65 + 320) = *(_QWORD *)(v66 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 328) = *(_QWORD *)(v66 + 328);
  v103 = *(int *)(a3 + 24);
  v104 = a1 + v103;
  v105 = a2 + v103;
  *(_BYTE *)(v104 + 32) = *(_BYTE *)(v105 + 32);
  v106 = *(_OWORD *)(v105 + 16);
  *(_OWORD *)v104 = *(_OWORD *)v105;
  *(_OWORD *)(v104 + 16) = v106;
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformTextFieldAdaptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PlatformTextFieldAdaptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PlatformTextFieldAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextViewAdaptor(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v59;
  id v60;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  int v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  int v102;
  int __dsta;
  char *__dst;
  int *v105;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v8 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
    v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v105 = a3;
    if (v9)
    {
      v10 = a2[5];
      v11 = a2[6];
      v12 = *((_BYTE *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 56) = v12;
      *(_QWORD *)(a1 + 64) = a2[8];
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    v14 = a2[9];
    v15 = a2[10];
    v16 = a2[11];
    v17 = a2[12];
    v18 = a2[13];
    v19 = a2[14];
    v20 = a2[15];
    v21 = a2[16];
    v96 = a2[17];
    v97 = a2[18];
    v98 = a2[19];
    v99 = a2[20];
    v100 = a2[21];
    v102 = *((unsigned __int8 *)a2 + 178);
    __dsta = *((unsigned __int16 *)a2 + 88);
    v101 = *((_BYTE *)a2 + 179);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v96, v97, v98, v99, v100, __dsta | (v102 << 16), v101);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v19;
    *(_QWORD *)(a1 + 120) = v20;
    *(_QWORD *)(a1 + 128) = v21;
    *(_QWORD *)(a1 + 136) = v96;
    *(_QWORD *)(a1 + 144) = v97;
    *(_QWORD *)(a1 + 152) = v98;
    *(_QWORD *)(a1 + 160) = v99;
    *(_QWORD *)(a1 + 168) = v100;
    *(_BYTE *)(a1 + 178) = v102;
    *(_WORD *)(a1 + 176) = __dsta;
    *(_BYTE *)(a1 + 179) = v101;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
    v23 = *(int *)(v22 + 56);
    v24 = (_QWORD *)(a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    type metadata accessor for Binding<TextSelection?>(0);
    v27 = v26;
    v28 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      v30 = v105;
    }
    else
    {
      v31 = v25[1];
      *v24 = *v25;
      v24[1] = v31;
      v32 = *(int *)(v27 + 32);
      __dst = (char *)v24 + v32;
      v33 = (char *)v25 + v32;
      v34 = type metadata accessor for TextSelection(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
      v37 = v33;
      v38 = v34;
      swift_retain();
      swift_retain();
      if (v36(v37, 1, v38))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        v40 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(__dst, v37, v41);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        __dst[*(int *)(v38 + 20)] = *((_BYTE *)v37 + *(int *)(v38 + 20));
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v38);
      }
      v30 = v105;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
    }
    v42 = type metadata accessor for SystemTextFieldConfiguration(0);
    *(_QWORD *)(a1 + *(int *)(v42 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 20));
    v43 = v30[5];
    v44 = a1 + v43;
    v45 = (uint64_t)a2 + v43;
    v46 = *(uint64_t *)((char *)a2 + v43);
    v47 = *(uint64_t *)((char *)a2 + v43 + 8);
    *(_QWORD *)v44 = v46;
    *(_QWORD *)(v44 + 8) = v47;
    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
    v48 = *(void **)(v45 + 24);
    swift_bridgeObjectRetain();
    if (v48 == (void *)1)
    {
      v49 = *(_OWORD *)(v45 + 200);
      *(_OWORD *)(v44 + 184) = *(_OWORD *)(v45 + 184);
      *(_OWORD *)(v44 + 200) = v49;
      *(_OWORD *)(v44 + 216) = *(_OWORD *)(v45 + 216);
      *(_QWORD *)(v44 + 232) = *(_QWORD *)(v45 + 232);
      v50 = *(_OWORD *)(v45 + 136);
      *(_OWORD *)(v44 + 120) = *(_OWORD *)(v45 + 120);
      *(_OWORD *)(v44 + 136) = v50;
      v51 = *(_OWORD *)(v45 + 168);
      *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
      *(_OWORD *)(v44 + 168) = v51;
      v52 = *(_OWORD *)(v45 + 72);
      *(_OWORD *)(v44 + 56) = *(_OWORD *)(v45 + 56);
      *(_OWORD *)(v44 + 72) = v52;
      v53 = *(_OWORD *)(v45 + 104);
      *(_OWORD *)(v44 + 88) = *(_OWORD *)(v45 + 88);
      *(_OWORD *)(v44 + 104) = v53;
      v54 = *(_OWORD *)(v45 + 40);
      *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 24);
      *(_OWORD *)(v44 + 40) = v54;
    }
    else
    {
      v55 = *(void **)(v45 + 32);
      v56 = *(void **)(v45 + 40);
      *(_QWORD *)(v44 + 24) = v48;
      *(_QWORD *)(v44 + 32) = v55;
      *(_QWORD *)(v44 + 40) = v56;
      v57 = (_OWORD *)(v44 + 48);
      v58 = (_OWORD *)(v45 + 48);
      v59 = *(_QWORD *)(v45 + 168);
      v60 = v48;
      v61 = v55;
      v62 = v56;
      if (v59 >> 1 == 4294967294)
      {
        v63 = *(_OWORD *)(v45 + 192);
        *(_OWORD *)(v44 + 176) = *(_OWORD *)(v45 + 176);
        *(_OWORD *)(v44 + 192) = v63;
        *(_OWORD *)(v44 + 208) = *(_OWORD *)(v45 + 208);
        *(_DWORD *)(v44 + 223) = *(_DWORD *)(v45 + 223);
        v64 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v64;
        v65 = *(_OWORD *)(v45 + 160);
        *(_OWORD *)(v44 + 144) = *(_OWORD *)(v45 + 144);
        *(_OWORD *)(v44 + 160) = v65;
        v66 = *(_OWORD *)(v45 + 64);
        *v57 = *v58;
        *(_OWORD *)(v44 + 64) = v66;
        v67 = *(_OWORD *)(v45 + 96);
        *(_OWORD *)(v44 + 80) = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v44 + 96) = v67;
        v30 = v105;
      }
      else
      {
        v68 = *(unsigned __int8 *)(v45 + 56);
        if (v68 == 255)
        {
          *(_QWORD *)v57 = *(_QWORD *)v58;
          *(_BYTE *)(v44 + 56) = *(_BYTE *)(v45 + 56);
        }
        else
        {
          v69 = *(void **)(v45 + 48);
          outlined copy of GraphicsImage.Contents(v69, *(_BYTE *)(v45 + 56));
          *(_QWORD *)(v44 + 48) = v69;
          *(_BYTE *)(v44 + 56) = v68;
          v59 = *(_QWORD *)(v45 + 168);
        }
        v30 = v105;
        *(_QWORD *)(v44 + 64) = *(_QWORD *)(v45 + 64);
        *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 72);
        *(_BYTE *)(v44 + 88) = *(_BYTE *)(v45 + 88);
        *(_OWORD *)(v44 + 92) = *(_OWORD *)(v45 + 92);
        *(_BYTE *)(v44 + 108) = *(_BYTE *)(v45 + 108);
        v70 = *(_OWORD *)(v45 + 128);
        *(_OWORD *)(v44 + 112) = *(_OWORD *)(v45 + 112);
        *(_OWORD *)(v44 + 128) = v70;
        *(_WORD *)(v44 + 144) = *(_WORD *)(v45 + 144);
        *(_BYTE *)(v44 + 146) = *(_BYTE *)(v45 + 146);
        *(_BYTE *)(v44 + 147) = *(_BYTE *)(v45 + 147);
        if (v59 >> 1 == 0xFFFFFFFF)
        {
          v71 = *(_OWORD *)(v45 + 168);
          *(_OWORD *)(v44 + 152) = *(_OWORD *)(v45 + 152);
          *(_OWORD *)(v44 + 168) = v71;
        }
        else
        {
          v72 = *(_QWORD *)(v45 + 152);
          v73 = *(_QWORD *)(v45 + 160);
          v74 = *(_QWORD *)(v45 + 176);
          outlined copy of AccessibilityImageLabel(v72, v73, v59);
          *(_QWORD *)(v44 + 152) = v72;
          *(_QWORD *)(v44 + 160) = v73;
          *(_QWORD *)(v44 + 168) = v59;
          *(_QWORD *)(v44 + 176) = v74;
        }
        v75 = *(_QWORD *)(v45 + 192);
        *(_QWORD *)(v44 + 184) = *(_QWORD *)(v45 + 184);
        *(_QWORD *)(v44 + 192) = v75;
        *(_WORD *)(v44 + 200) = *(_WORD *)(v45 + 200);
        *(_DWORD *)(v44 + 204) = *(_DWORD *)(v45 + 204);
        *(_BYTE *)(v44 + 208) = *(_BYTE *)(v45 + 208);
        v76 = *(void **)(v45 + 216);
        *(_QWORD *)(v44 + 216) = v76;
        *(_WORD *)(v44 + 224) = *(_WORD *)(v45 + 224);
        *(_BYTE *)(v44 + 226) = *(_BYTE *)(v45 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v77 = v76;
      }
      *(_BYTE *)(v44 + 227) = *(_BYTE *)(v45 + 227);
      *(_QWORD *)(v44 + 232) = *(_QWORD *)(v45 + 232);
      swift_retain();
    }
    v78 = *(_QWORD *)(v45 + 288);
    if (v78 == 1)
    {
      v79 = *(_OWORD *)(v45 + 256);
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(_OWORD *)(v44 + 256) = v79;
      v80 = *(_OWORD *)(v45 + 288);
      *(_OWORD *)(v44 + 272) = *(_OWORD *)(v45 + 272);
      *(_OWORD *)(v44 + 288) = v80;
    }
    else
    {
      *(_OWORD *)(v44 + 240) = *(_OWORD *)(v45 + 240);
      *(_QWORD *)(v44 + 256) = *(_QWORD *)(v45 + 256);
      v81 = (_OWORD *)(v44 + 264);
      v82 = (_OWORD *)(v45 + 264);
      if (v78)
      {
        v83 = *(_QWORD *)(v45 + 296);
        *(_QWORD *)(v44 + 288) = v78;
        *(_QWORD *)(v44 + 296) = v83;
        (**(void (***)(_OWORD *, _OWORD *))(v78 - 8))(v81, v82);
      }
      else
      {
        v84 = *(_OWORD *)(v45 + 280);
        *v81 = *v82;
        *(_OWORD *)(v44 + 280) = v84;
        *(_QWORD *)(v44 + 296) = *(_QWORD *)(v45 + 296);
      }
    }
    *(_QWORD *)(v44 + 304) = *(_QWORD *)(v45 + 304);
    *(_BYTE *)(v44 + 312) = *(_BYTE *)(v45 + 312);
    v85 = *(_QWORD *)(v45 + 328);
    *(_QWORD *)(v44 + 320) = *(_QWORD *)(v45 + 320);
    *(_QWORD *)(v44 + 328) = v85;
    v86 = v30[6];
    v87 = v30[7];
    v88 = (_OWORD *)(a1 + v86);
    v89 = (_OWORD *)((char *)a2 + v86);
    v90 = v89[1];
    *v88 = *v89;
    v88[1] = v90;
    v91 = a1 + v87;
    v92 = (uint64_t)a2 + v87;
    v93 = *(uint64_t *)((char *)a2 + v87);
    v94 = *(_BYTE *)(v92 + 8);
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v93, v94);
    *(_QWORD *)v91 = v93;
    *(_BYTE *)(v91 + 8) = v94;
  }
  return a1;
}

uint64_t destroy for TextViewAdaptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  outlined consume of StateOrBinding<TextFieldState>(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16), *(_BYTE *)(a1 + 179));
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v5 = a1 + *(int *)(v4 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  v7 = v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    swift_release();
    swift_release();
    v8 = v5 + *(int *)(v7 + 32);
    v9 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
      }
    }
  }
  v11 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v12 = *(void **)(v11 + 24);
  if (v12 != (void *)1)
  {

    v13 = *(_QWORD *)(v11 + 168);
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v15 = *(unsigned __int8 *)(v11 + 56);
      if (v15 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v11 + 48), v15);
        v13 = *(_QWORD *)(v11 + 168);
        v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v14 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v11 + 152), *(_QWORD *)(v11 + 160), v13);
      swift_unknownObjectRelease();
      swift_release();

    }
    swift_release();
  }
  if (*(_QWORD *)(v11 + 288) >= 2uLL)
    __swift_destroy_boxed_opaque_existential_1(v11 + 264);
  swift_bridgeObjectRelease();
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_BYTE *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(const void *, uint64_t, uint64_t);
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  _OWORD *v56;
  _OWORD *v57;
  unint64_t v58;
  id v59;
  id v60;
  id v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;
  void *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  _OWORD *v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  int __dsta;
  char *__dst;
  int *v104;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v104 = a3;
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v11 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v9, v10, v11);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    *(_BYTE *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v12;
  }
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v95 = *(_QWORD *)(a2 + 136);
  v96 = *(_QWORD *)(a2 + 144);
  v97 = *(_QWORD *)(a2 + 152);
  v98 = *(_QWORD *)(a2 + 160);
  v99 = *(_QWORD *)(a2 + 168);
  v101 = *(unsigned __int8 *)(a2 + 178);
  __dsta = *(unsigned __int16 *)(a2 + 176);
  v100 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v13, v14, v15, v16, v17, v18, v19, v20, v95, v96, v97, v98, v99, __dsta | (v101 << 16), v100);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v95;
  *(_QWORD *)(a1 + 144) = v96;
  *(_QWORD *)(a1 + 152) = v97;
  *(_QWORD *)(a1 + 160) = v98;
  *(_QWORD *)(a1 + 168) = v99;
  *(_BYTE *)(a1 + 178) = v101;
  *(_WORD *)(a1 + 176) = __dsta;
  *(_BYTE *)(a1 + 179) = v100;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v22 = *(int *)(v21 + 56);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  type metadata accessor for Binding<TextSelection?>(0);
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    v29 = v104;
  }
  else
  {
    v30 = v24[1];
    *v23 = *v24;
    v23[1] = v30;
    v31 = *(int *)(v26 + 32);
    __dst = (char *)v23 + v31;
    v32 = (char *)v24 + v31;
    v33 = type metadata accessor for TextSelection(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
    v36 = v32;
    v37 = v33;
    swift_retain();
    swift_retain();
    if (v35(v36, 1, v37))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v39 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(__dst, v36, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      __dst[*(int *)(v37 + 20)] = *((_BYTE *)v36 + *(int *)(v37 + 20));
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v37);
    }
    v29 = v104;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
  }
  v41 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v41 + 20)) = *(_QWORD *)(a2 + *(int *)(v41 + 20));
  v42 = v29[5];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = *(_QWORD *)(a2 + v42);
  v46 = *(_QWORD *)(a2 + v42 + 8);
  *(_QWORD *)v43 = v45;
  *(_QWORD *)(v43 + 8) = v46;
  *(_DWORD *)(v43 + 16) = *(_DWORD *)(v44 + 16);
  v47 = *(void **)(v44 + 24);
  swift_bridgeObjectRetain();
  if (v47 == (void *)1)
  {
    v48 = *(_OWORD *)(v44 + 200);
    *(_OWORD *)(v43 + 184) = *(_OWORD *)(v44 + 184);
    *(_OWORD *)(v43 + 200) = v48;
    *(_OWORD *)(v43 + 216) = *(_OWORD *)(v44 + 216);
    *(_QWORD *)(v43 + 232) = *(_QWORD *)(v44 + 232);
    v49 = *(_OWORD *)(v44 + 136);
    *(_OWORD *)(v43 + 120) = *(_OWORD *)(v44 + 120);
    *(_OWORD *)(v43 + 136) = v49;
    v50 = *(_OWORD *)(v44 + 168);
    *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
    *(_OWORD *)(v43 + 168) = v50;
    v51 = *(_OWORD *)(v44 + 72);
    *(_OWORD *)(v43 + 56) = *(_OWORD *)(v44 + 56);
    *(_OWORD *)(v43 + 72) = v51;
    v52 = *(_OWORD *)(v44 + 104);
    *(_OWORD *)(v43 + 88) = *(_OWORD *)(v44 + 88);
    *(_OWORD *)(v43 + 104) = v52;
    v53 = *(_OWORD *)(v44 + 40);
    *(_OWORD *)(v43 + 24) = *(_OWORD *)(v44 + 24);
    *(_OWORD *)(v43 + 40) = v53;
  }
  else
  {
    v54 = *(void **)(v44 + 32);
    v55 = *(void **)(v44 + 40);
    *(_QWORD *)(v43 + 24) = v47;
    *(_QWORD *)(v43 + 32) = v54;
    *(_QWORD *)(v43 + 40) = v55;
    v56 = (_OWORD *)(v43 + 48);
    v57 = (_OWORD *)(v44 + 48);
    v58 = *(_QWORD *)(v44 + 168);
    v59 = v47;
    v60 = v54;
    v61 = v55;
    if (v58 >> 1 == 4294967294)
    {
      v62 = *(_OWORD *)(v44 + 192);
      *(_OWORD *)(v43 + 176) = *(_OWORD *)(v44 + 176);
      *(_OWORD *)(v43 + 192) = v62;
      *(_OWORD *)(v43 + 208) = *(_OWORD *)(v44 + 208);
      *(_DWORD *)(v43 + 223) = *(_DWORD *)(v44 + 223);
      v63 = *(_OWORD *)(v44 + 128);
      *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
      *(_OWORD *)(v43 + 128) = v63;
      v64 = *(_OWORD *)(v44 + 160);
      *(_OWORD *)(v43 + 144) = *(_OWORD *)(v44 + 144);
      *(_OWORD *)(v43 + 160) = v64;
      v65 = *(_OWORD *)(v44 + 64);
      *v56 = *v57;
      *(_OWORD *)(v43 + 64) = v65;
      v66 = *(_OWORD *)(v44 + 96);
      *(_OWORD *)(v43 + 80) = *(_OWORD *)(v44 + 80);
      *(_OWORD *)(v43 + 96) = v66;
      v29 = v104;
    }
    else
    {
      v67 = *(unsigned __int8 *)(v44 + 56);
      if (v67 == 255)
      {
        *(_QWORD *)v56 = *(_QWORD *)v57;
        *(_BYTE *)(v43 + 56) = *(_BYTE *)(v44 + 56);
      }
      else
      {
        v68 = *(void **)(v44 + 48);
        outlined copy of GraphicsImage.Contents(v68, *(_BYTE *)(v44 + 56));
        *(_QWORD *)(v43 + 48) = v68;
        *(_BYTE *)(v43 + 56) = v67;
        v58 = *(_QWORD *)(v44 + 168);
      }
      v29 = v104;
      *(_QWORD *)(v43 + 64) = *(_QWORD *)(v44 + 64);
      *(_OWORD *)(v43 + 72) = *(_OWORD *)(v44 + 72);
      *(_BYTE *)(v43 + 88) = *(_BYTE *)(v44 + 88);
      *(_OWORD *)(v43 + 92) = *(_OWORD *)(v44 + 92);
      *(_BYTE *)(v43 + 108) = *(_BYTE *)(v44 + 108);
      v69 = *(_OWORD *)(v44 + 128);
      *(_OWORD *)(v43 + 112) = *(_OWORD *)(v44 + 112);
      *(_OWORD *)(v43 + 128) = v69;
      *(_WORD *)(v43 + 144) = *(_WORD *)(v44 + 144);
      *(_BYTE *)(v43 + 146) = *(_BYTE *)(v44 + 146);
      *(_BYTE *)(v43 + 147) = *(_BYTE *)(v44 + 147);
      if (v58 >> 1 == 0xFFFFFFFF)
      {
        v70 = *(_OWORD *)(v44 + 168);
        *(_OWORD *)(v43 + 152) = *(_OWORD *)(v44 + 152);
        *(_OWORD *)(v43 + 168) = v70;
      }
      else
      {
        v71 = *(_QWORD *)(v44 + 152);
        v72 = *(_QWORD *)(v44 + 160);
        v73 = *(_QWORD *)(v44 + 176);
        outlined copy of AccessibilityImageLabel(v71, v72, v58);
        *(_QWORD *)(v43 + 152) = v71;
        *(_QWORD *)(v43 + 160) = v72;
        *(_QWORD *)(v43 + 168) = v58;
        *(_QWORD *)(v43 + 176) = v73;
      }
      v74 = *(_QWORD *)(v44 + 192);
      *(_QWORD *)(v43 + 184) = *(_QWORD *)(v44 + 184);
      *(_QWORD *)(v43 + 192) = v74;
      *(_WORD *)(v43 + 200) = *(_WORD *)(v44 + 200);
      *(_DWORD *)(v43 + 204) = *(_DWORD *)(v44 + 204);
      *(_BYTE *)(v43 + 208) = *(_BYTE *)(v44 + 208);
      v75 = *(void **)(v44 + 216);
      *(_QWORD *)(v43 + 216) = v75;
      *(_WORD *)(v43 + 224) = *(_WORD *)(v44 + 224);
      *(_BYTE *)(v43 + 226) = *(_BYTE *)(v44 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      v76 = v75;
    }
    *(_BYTE *)(v43 + 227) = *(_BYTE *)(v44 + 227);
    *(_QWORD *)(v43 + 232) = *(_QWORD *)(v44 + 232);
    swift_retain();
  }
  v77 = *(_QWORD *)(v44 + 288);
  if (v77 == 1)
  {
    v78 = *(_OWORD *)(v44 + 256);
    *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
    *(_OWORD *)(v43 + 256) = v78;
    v79 = *(_OWORD *)(v44 + 288);
    *(_OWORD *)(v43 + 272) = *(_OWORD *)(v44 + 272);
    *(_OWORD *)(v43 + 288) = v79;
  }
  else
  {
    *(_OWORD *)(v43 + 240) = *(_OWORD *)(v44 + 240);
    *(_QWORD *)(v43 + 256) = *(_QWORD *)(v44 + 256);
    v80 = (_OWORD *)(v43 + 264);
    v81 = (_OWORD *)(v44 + 264);
    if (v77)
    {
      v82 = *(_QWORD *)(v44 + 296);
      *(_QWORD *)(v43 + 288) = v77;
      *(_QWORD *)(v43 + 296) = v82;
      (**(void (***)(_OWORD *, _OWORD *))(v77 - 8))(v80, v81);
    }
    else
    {
      v83 = *(_OWORD *)(v44 + 280);
      *v80 = *v81;
      *(_OWORD *)(v43 + 280) = v83;
      *(_QWORD *)(v43 + 296) = *(_QWORD *)(v44 + 296);
    }
  }
  *(_QWORD *)(v43 + 304) = *(_QWORD *)(v44 + 304);
  *(_BYTE *)(v43 + 312) = *(_BYTE *)(v44 + 312);
  v84 = *(_QWORD *)(v44 + 328);
  *(_QWORD *)(v43 + 320) = *(_QWORD *)(v44 + 320);
  *(_QWORD *)(v43 + 328) = v84;
  v85 = v29[6];
  v86 = v29[7];
  v87 = (_OWORD *)(a1 + v85);
  v88 = (_OWORD *)(a2 + v85);
  v89 = v88[1];
  *v87 = *v88;
  v87[1] = v89;
  v90 = a1 + v86;
  v91 = a2 + v86;
  v92 = *(_QWORD *)(a2 + v86);
  v93 = *(_BYTE *)(v91 + 8);
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v92, v93);
  *(_QWORD *)v90 = v92;
  *(_BYTE *)(v90 + 8) = v93;
  return a1;
}

_QWORD *assignWithCopy for TextViewAdaptor(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t, uint64_t);
  int v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _OWORD *v79;
  void *v80;
  void *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  void *v103;
  void *v104;
  _OWORD *v105;
  id *v106;
  unint64_t v107;
  id v108;
  id v109;
  id v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  id v120;
  void *v121;
  void *v122;
  id v123;
  void *v124;
  void *v125;
  id v126;
  _OWORD *v127;
  __int128 *v128;
  unint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  id v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150;
  void *v151;
  int v152;
  void *v153;
  void *v154;
  char v155;
  id v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  unint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  void *v166;
  id v167;
  void *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  void *v178;
  id v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  void *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  _OWORD *v188;
  _OWORD *v189;
  uint64_t v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  void *v204;
  void *v205;
  id v206;
  __int128 *v207;
  __int128 *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _OWORD *v217;
  __int128 *v218;
  uint64_t v219;
  __int128 *v220;
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  _DWORD *v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  int *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  _QWORD *v246;
  _QWORD *v247;

  v5 = a1;
  *a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v5[1] = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v5[2] = *(_QWORD *)(a2 + 16);
  v5[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)v5 + 32) = *(_BYTE *)(a2 + 32);
  *((_BYTE *)v5 + 33) = *(_BYTE *)(a2 + 33);
  v6 = v5 + 5;
  v7 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 64);
  v238 = a3;
  if (v5[8])
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 48);
      v11 = *(_BYTE *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      v12 = v5[5];
      v13 = v5[6];
      v14 = *((_BYTE *)v5 + 56);
      v5[5] = v9;
      v5[6] = v10;
      *((_BYTE *)v5 + 56) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      v5[8] = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text((uint64_t)(v5 + 5));
      v18 = *(_OWORD *)(a2 + 56);
      *v6 = *v7;
      *(_OWORD *)(v5 + 7) = v18;
    }
  }
  else if (v8)
  {
    v15 = *(_QWORD *)(a2 + 40);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_BYTE *)(a2 + 56);
    outlined copy of Text.Storage(v15, v16, v17);
    v5[5] = v15;
    v5[6] = v16;
    *((_BYTE *)v5 + 56) = v17;
    v5[8] = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 56);
    *v6 = *v7;
    *(_OWORD *)(v5 + 7) = v19;
  }
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 104);
  v24 = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a2 + 128);
  v239 = *(_QWORD *)(a2 + 136);
  v240 = *(_QWORD *)(a2 + 144);
  v241 = *(_QWORD *)(a2 + 152);
  v242 = *(_QWORD *)(a2 + 160);
  v243 = *(_QWORD *)(a2 + 168);
  v244 = *(unsigned __int16 *)(a2 + 176);
  v245 = *(unsigned __int8 *)(a2 + 178);
  v247 = (_QWORD *)a2;
  v28 = *(_BYTE *)(a2 + 179);
  outlined copy of StateOrBinding<TextFieldState>(v20, v21, v22, v23, v25, v24, v26, v27, v239, v240, v241, v242, v243, v244 | (v245 << 16), v28);
  v29 = v5[9];
  v30 = v5[10];
  v31 = v5[11];
  v32 = v5[12];
  v33 = v5[13];
  v34 = v5[14];
  v35 = v5[15];
  v36 = v5[16];
  v37 = *(_OWORD *)(v5 + 17);
  v38 = *(_OWORD *)(v5 + 19);
  v39 = v5[21];
  v40 = *((unsigned __int16 *)v5 + 88) | (*((unsigned __int8 *)v5 + 178) << 16);
  v41 = *((_BYTE *)v5 + 179);
  v5[9] = v20;
  v5[10] = v21;
  v5[11] = v22;
  v5[12] = v23;
  v5[13] = v25;
  v5[14] = v24;
  v5[15] = v26;
  v5[16] = v27;
  v5[17] = v239;
  v5[18] = v240;
  v5[19] = v241;
  v5[20] = v242;
  v5[21] = v243;
  *((_WORD *)v5 + 88) = v244;
  *((_BYTE *)v5 + 178) = v245;
  *((_BYTE *)v5 + 179) = v28;
  v42 = v247;
  outlined consume of StateOrBinding<TextFieldState>(v29, v30, v31, v32, v33, v34, v35, v36, v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v40, v41);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v44 = *(int *)(v43 + 56);
  v45 = (_QWORD *)((char *)v5 + v44);
  v46 = (_QWORD *)((char *)v247 + v44);
  type metadata accessor for Binding<TextSelection?>(0);
  v48 = v47;
  v49 = *(_QWORD *)(v47 - 8);
  v50 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48);
  LODWORD(v24) = v50(v45, 1, v47);
  v51 = v50(v46, 1, v48);
  if ((_DWORD)v24)
  {
    if (v51)
    {
      type metadata accessor for Binding<TextSelection?>?(0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v246 = v5;
      *v45 = *v46;
      v45[1] = v46[1];
      v55 = *(int *)(v48 + 32);
      v56 = (char *)v45 + v55;
      v57 = (char *)v46 + v55;
      v58 = type metadata accessor for TextSelection(0);
      v59 = *(_QWORD *)(v58 - 8);
      v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      swift_retain();
      swift_retain();
      if (v60(v57, 1, v58))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        v42 = v247;
      }
      else
      {
        v72 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16))(v56, v57, v73);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        v5 = v246;
        v42 = v247;
        v56[*(int *)(v58 + 20)] = v57[*(int *)(v58 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
    }
    v53 = v238;
    goto LABEL_28;
  }
  v53 = v238;
  if (v51)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_28;
  }
  *v45 = *v46;
  swift_retain();
  swift_release();
  v45[1] = v46[1];
  swift_retain();
  swift_release();
  v62 = *(int *)(v48 + 32);
  v63 = (char *)v45 + v62;
  v64 = (char *)v46 + v62;
  v65 = type metadata accessor for TextSelection(0);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (v68)
  {
    if (!v69)
    {
      v70 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v63, v64, v71);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      v63[*(int *)(v65 + 20)] = v64[*(int *)(v65 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
      goto LABEL_28;
    }
LABEL_23:
    type metadata accessor for TextSelection?(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    goto LABEL_28;
  }
  if (v69)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v63, type metadata accessor for TextSelection);
    goto LABEL_23;
  }
  if (v5 != v247)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v63, type metadata accessor for TextSelection.Indices);
    v181 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v63, v64, v182);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
    }
  }
  v63[*(int *)(v65 + 20)] = v64[*(int *)(v65 + 20)];
LABEL_28:
  v75 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)((char *)v5 + *(int *)(v75 + 20)) = *(_QWORD *)((char *)v42 + *(int *)(v75 + 20));
  v76 = v53[5];
  v77 = (char *)v5 + v76;
  v78 = (uint64_t)v42 + v76;
  *(_QWORD *)((char *)v5 + v76) = *(_QWORD *)((char *)v42 + v76);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v77 + 1) = *(_QWORD *)(v78 + 8);
  *((_DWORD *)v77 + 4) = *(_DWORD *)(v78 + 16);
  v79 = v77 + 24;
  v80 = (void *)*((_QWORD *)v77 + 3);
  v82 = (_OWORD *)(v78 + 24);
  v81 = *(void **)(v78 + 24);
  if (v80 == (void *)1)
  {
    if (v81 == (void *)1)
    {
      v83 = *(_OWORD *)(v78 + 40);
      *v79 = *v82;
      *(_OWORD *)(v77 + 40) = v83;
      v84 = *(_OWORD *)(v78 + 56);
      v85 = *(_OWORD *)(v78 + 72);
      v86 = *(_OWORD *)(v78 + 104);
      *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
      *(_OWORD *)(v77 + 104) = v86;
      *(_OWORD *)(v77 + 56) = v84;
      *(_OWORD *)(v77 + 72) = v85;
      v87 = *(_OWORD *)(v78 + 120);
      v88 = *(_OWORD *)(v78 + 136);
      v89 = *(_OWORD *)(v78 + 168);
      *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
      *(_OWORD *)(v77 + 168) = v89;
      *(_OWORD *)(v77 + 120) = v87;
      *(_OWORD *)(v77 + 136) = v88;
      v90 = *(_OWORD *)(v78 + 184);
      v91 = *(_OWORD *)(v78 + 200);
      v92 = *(_OWORD *)(v78 + 216);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      *(_OWORD *)(v77 + 200) = v91;
      *(_OWORD *)(v77 + 216) = v92;
      *(_OWORD *)(v77 + 184) = v90;
    }
    else
    {
      *((_QWORD *)v77 + 3) = v81;
      v103 = *(void **)(v78 + 32);
      *((_QWORD *)v77 + 4) = v103;
      v104 = *(void **)(v78 + 40);
      *((_QWORD *)v77 + 5) = v104;
      v105 = v77 + 48;
      v106 = (id *)(v78 + 48);
      v107 = *(_QWORD *)(v78 + 168);
      v108 = v81;
      v109 = v103;
      v110 = v104;
      if (v107 >> 1 == 4294967294)
      {
        v111 = *(_OWORD *)v106;
        v112 = *(_OWORD *)(v78 + 64);
        v113 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v113;
        *v105 = v111;
        *((_OWORD *)v77 + 4) = v112;
        v114 = *(_OWORD *)(v78 + 112);
        v115 = *(_OWORD *)(v78 + 128);
        v116 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v116;
        *((_OWORD *)v77 + 7) = v114;
        *((_OWORD *)v77 + 8) = v115;
        v117 = *(_OWORD *)(v78 + 176);
        v118 = *(_OWORD *)(v78 + 192);
        v119 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v118;
        *((_OWORD *)v77 + 13) = v119;
        *((_OWORD *)v77 + 11) = v117;
        v42 = v247;
      }
      else
      {
        v139 = *(unsigned __int8 *)(v78 + 56);
        if (v139 == 255)
        {
          v156 = *v106;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v105 = v156;
        }
        else
        {
          v140 = *v106;
          outlined copy of GraphicsImage.Contents(*v106, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v140;
          v77[56] = v139;
        }
        v42 = v247;
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v157 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v157;
        v158 = *(_OWORD *)(v78 + 112);
        v159 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v158;
        *((_OWORD *)v77 + 8) = v159;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v160 = *(_QWORD *)(v78 + 168);
        if (v160 >> 1 == 0xFFFFFFFF)
        {
          v161 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v161;
        }
        else
        {
          v162 = *(_QWORD *)(v78 + 152);
          v163 = *(_QWORD *)(v78 + 160);
          v164 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v162, v163, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v162;
          *((_QWORD *)v77 + 20) = v163;
          *((_QWORD *)v77 + 21) = v160;
          *((_QWORD *)v77 + 22) = v164;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v165 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v165;
        v166 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v166;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v167 = v166;
      }
      v77[227] = *(_BYTE *)(v78 + 227);
      *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
      swift_retain();
    }
  }
  else if (v81 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent((uint64_t)(v77 + 24));
    v93 = *(_OWORD *)(v78 + 40);
    *v79 = *v82;
    *(_OWORD *)(v77 + 40) = v93;
    v94 = *(_OWORD *)(v78 + 104);
    v96 = *(_OWORD *)(v78 + 56);
    v95 = *(_OWORD *)(v78 + 72);
    *(_OWORD *)(v77 + 88) = *(_OWORD *)(v78 + 88);
    *(_OWORD *)(v77 + 104) = v94;
    *(_OWORD *)(v77 + 56) = v96;
    *(_OWORD *)(v77 + 72) = v95;
    v97 = *(_OWORD *)(v78 + 168);
    v99 = *(_OWORD *)(v78 + 120);
    v98 = *(_OWORD *)(v78 + 136);
    *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
    *(_OWORD *)(v77 + 168) = v97;
    *(_OWORD *)(v77 + 120) = v99;
    *(_OWORD *)(v77 + 136) = v98;
    v101 = *(_OWORD *)(v78 + 200);
    v100 = *(_OWORD *)(v78 + 216);
    v102 = *(_OWORD *)(v78 + 184);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    *(_OWORD *)(v77 + 200) = v101;
    *(_OWORD *)(v77 + 216) = v100;
    *(_OWORD *)(v77 + 184) = v102;
  }
  else
  {
    *((_QWORD *)v77 + 3) = v81;
    v120 = v81;

    v121 = (void *)*((_QWORD *)v77 + 4);
    v122 = *(void **)(v78 + 32);
    *((_QWORD *)v77 + 4) = v122;
    v123 = v122;

    v124 = (void *)*((_QWORD *)v77 + 5);
    v125 = *(void **)(v78 + 40);
    *((_QWORD *)v77 + 5) = v125;
    v126 = v125;

    v127 = v77 + 48;
    v128 = (__int128 *)(v78 + 48);
    v129 = *(_QWORD *)(v78 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*((_QWORD *)v77 + 21) >> 1 == 4294967294)
    {
      if (v129 == 0x1FFFFFFFCLL)
      {
        v130 = *v128;
        v131 = *(_OWORD *)(v78 + 64);
        v132 = *(_OWORD *)(v78 + 96);
        *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
        *((_OWORD *)v77 + 6) = v132;
        *v127 = v130;
        *((_OWORD *)v77 + 4) = v131;
        v133 = *(_OWORD *)(v78 + 112);
        v134 = *(_OWORD *)(v78 + 128);
        v135 = *(_OWORD *)(v78 + 160);
        *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
        *((_OWORD *)v77 + 10) = v135;
        *((_OWORD *)v77 + 7) = v133;
        *((_OWORD *)v77 + 8) = v134;
        v136 = *(_OWORD *)(v78 + 176);
        v137 = *(_OWORD *)(v78 + 192);
        v138 = *(_OWORD *)(v78 + 208);
        *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
        *((_OWORD *)v77 + 12) = v137;
        *((_OWORD *)v77 + 13) = v138;
        *((_OWORD *)v77 + 11) = v136;
      }
      else
      {
        v150 = *(unsigned __int8 *)(v78 + 56);
        if (v150 == 255)
        {
          v168 = *(void **)v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v168;
        }
        else
        {
          v151 = *(void **)v128;
          outlined copy of GraphicsImage.Contents(v151, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v151;
          v77[56] = v150;
        }
        *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
        *(_OWORD *)(v77 + 72) = *(_OWORD *)(v78 + 72);
        v77[88] = *(_BYTE *)(v78 + 88);
        v169 = *(_OWORD *)(v78 + 92);
        v77[108] = *(_BYTE *)(v78 + 108);
        *(_OWORD *)(v77 + 92) = v169;
        v170 = *(_OWORD *)(v78 + 112);
        v171 = *(_OWORD *)(v78 + 128);
        v77[144] = *(_BYTE *)(v78 + 144);
        *((_OWORD *)v77 + 7) = v170;
        *((_OWORD *)v77 + 8) = v171;
        v77[145] = *(_BYTE *)(v78 + 145);
        v77[146] = *(_BYTE *)(v78 + 146);
        v77[147] = *(_BYTE *)(v78 + 147);
        v172 = *(_QWORD *)(v78 + 168);
        if (v172 >> 1 == 0xFFFFFFFF)
        {
          v173 = *(_OWORD *)(v78 + 168);
          *(_OWORD *)(v77 + 152) = *(_OWORD *)(v78 + 152);
          *(_OWORD *)(v77 + 168) = v173;
        }
        else
        {
          v174 = *(_QWORD *)(v78 + 152);
          v175 = *(_QWORD *)(v78 + 160);
          v176 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v174, v175, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v174;
          *((_QWORD *)v77 + 20) = v175;
          *((_QWORD *)v77 + 21) = v172;
          *((_QWORD *)v77 + 22) = v176;
        }
        *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
        *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
        v77[200] = *(_BYTE *)(v78 + 200);
        v77[201] = *(_BYTE *)(v78 + 201);
        v177 = *(_DWORD *)(v78 + 204);
        v77[208] = *(_BYTE *)(v78 + 208);
        *((_DWORD *)v77 + 51) = v177;
        v178 = *(void **)(v78 + 216);
        *((_QWORD *)v77 + 27) = v178;
        *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
        v77[226] = *(_BYTE *)(v78 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        v179 = v178;
      }
    }
    else if (v129 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved((uint64_t)(v77 + 48));
      v141 = *(_OWORD *)(v78 + 96);
      v143 = *v128;
      v142 = *(_OWORD *)(v78 + 64);
      *((_OWORD *)v77 + 5) = *(_OWORD *)(v78 + 80);
      *((_OWORD *)v77 + 6) = v141;
      *v127 = v143;
      *((_OWORD *)v77 + 4) = v142;
      v144 = *(_OWORD *)(v78 + 160);
      v146 = *(_OWORD *)(v78 + 112);
      v145 = *(_OWORD *)(v78 + 128);
      *((_OWORD *)v77 + 9) = *(_OWORD *)(v78 + 144);
      *((_OWORD *)v77 + 10) = v144;
      *((_OWORD *)v77 + 7) = v146;
      *((_OWORD *)v77 + 8) = v145;
      v148 = *(_OWORD *)(v78 + 192);
      v147 = *(_OWORD *)(v78 + 208);
      v149 = *(_OWORD *)(v78 + 176);
      *(_DWORD *)(v77 + 223) = *(_DWORD *)(v78 + 223);
      *((_OWORD *)v77 + 12) = v148;
      *((_OWORD *)v77 + 13) = v147;
      *((_OWORD *)v77 + 11) = v149;
    }
    else
    {
      v152 = *(unsigned __int8 *)(v78 + 56);
      if (v77[56] == 255)
      {
        if (v152 == 255)
        {
          v184 = *(void **)v128;
          v77[56] = *(_BYTE *)(v78 + 56);
          *(_QWORD *)v127 = v184;
        }
        else
        {
          v180 = *(void **)v128;
          outlined copy of GraphicsImage.Contents(v180, *(_BYTE *)(v78 + 56));
          *((_QWORD *)v77 + 6) = v180;
          v77[56] = v152;
        }
      }
      else if (v152 == 255)
      {
        outlined destroy of GraphicsImage.Contents((uint64_t)(v77 + 48));
        v183 = *(_BYTE *)(v78 + 56);
        *(_QWORD *)v127 = *(_QWORD *)v128;
        v77[56] = v183;
      }
      else
      {
        v153 = *(void **)v128;
        outlined copy of GraphicsImage.Contents(v153, *(_BYTE *)(v78 + 56));
        v154 = (void *)*((_QWORD *)v77 + 6);
        *((_QWORD *)v77 + 6) = v153;
        v155 = v77[56];
        v77[56] = v152;
        outlined consume of GraphicsImage.Contents(v154, v155);
      }
      *((_QWORD *)v77 + 8) = *(_QWORD *)(v78 + 64);
      *((_QWORD *)v77 + 9) = *(_QWORD *)(v78 + 72);
      *((_QWORD *)v77 + 10) = *(_QWORD *)(v78 + 80);
      v77[88] = *(_BYTE *)(v78 + 88);
      v185 = *(_OWORD *)(v78 + 92);
      v77[108] = *(_BYTE *)(v78 + 108);
      *(_OWORD *)(v77 + 92) = v185;
      v186 = *(_OWORD *)(v78 + 112);
      v187 = *(_OWORD *)(v78 + 128);
      v77[144] = *(_BYTE *)(v78 + 144);
      *((_OWORD *)v77 + 7) = v186;
      *((_OWORD *)v77 + 8) = v187;
      v77[145] = *(_BYTE *)(v78 + 145);
      v77[146] = *(_BYTE *)(v78 + 146);
      v77[147] = *(_BYTE *)(v78 + 147);
      v188 = v77 + 152;
      v189 = (_OWORD *)(v78 + 152);
      v190 = *(_QWORD *)(v78 + 168);
      v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
      if (*((_QWORD *)v77 + 21) >> 1 == 0xFFFFFFFFLL)
      {
        if (v191 == 0x1FFFFFFFELL)
        {
          v192 = *(_OWORD *)(v78 + 168);
          *v188 = *v189;
          *(_OWORD *)(v77 + 168) = v192;
        }
        else
        {
          v194 = *(_QWORD *)(v78 + 152);
          v195 = *(_QWORD *)(v78 + 160);
          v196 = *(_QWORD *)(v78 + 176);
          outlined copy of AccessibilityImageLabel(v194, v195, *(_QWORD *)(v78 + 168));
          *((_QWORD *)v77 + 19) = v194;
          *((_QWORD *)v77 + 20) = v195;
          *((_QWORD *)v77 + 21) = v190;
          *((_QWORD *)v77 + 22) = v196;
        }
      }
      else if (v191 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel((uint64_t)(v77 + 152));
        v193 = *(_OWORD *)(v78 + 168);
        *v188 = *v189;
        *(_OWORD *)(v77 + 168) = v193;
      }
      else
      {
        v197 = *(_QWORD *)(v78 + 152);
        v198 = *(_QWORD *)(v78 + 160);
        v199 = *(_QWORD *)(v78 + 176);
        outlined copy of AccessibilityImageLabel(v197, v198, *(_QWORD *)(v78 + 168));
        v200 = *((_QWORD *)v77 + 19);
        v201 = *((_QWORD *)v77 + 20);
        v202 = *((_QWORD *)v77 + 21);
        *((_QWORD *)v77 + 19) = v197;
        *((_QWORD *)v77 + 20) = v198;
        *((_QWORD *)v77 + 21) = v190;
        *((_QWORD *)v77 + 22) = v199;
        outlined consume of AccessibilityImageLabel(v200, v201, v202);
      }
      *((_QWORD *)v77 + 23) = *(_QWORD *)(v78 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *((_QWORD *)v77 + 24) = *(_QWORD *)(v78 + 192);
      swift_retain();
      swift_release();
      v77[200] = *(_BYTE *)(v78 + 200);
      v77[201] = *(_BYTE *)(v78 + 201);
      v203 = *(_DWORD *)(v78 + 204);
      v77[208] = *(_BYTE *)(v78 + 208);
      *((_DWORD *)v77 + 51) = v203;
      v204 = (void *)*((_QWORD *)v77 + 27);
      v205 = *(void **)(v78 + 216);
      *((_QWORD *)v77 + 27) = v205;
      v206 = v205;

      *((_WORD *)v77 + 112) = *(_WORD *)(v78 + 224);
      v77[226] = *(_BYTE *)(v78 + 226);
    }
    v77[227] = *(_BYTE *)(v78 + 227);
    *((_QWORD *)v77 + 29) = *(_QWORD *)(v78 + 232);
    swift_retain();
    swift_release();
  }
  v207 = (__int128 *)(v77 + 240);
  v208 = (__int128 *)(v78 + 240);
  v209 = *((_QWORD *)v77 + 36);
  v210 = *(_QWORD *)(v78 + 288);
  if (v209 == 1)
  {
    if (v210 == 1)
    {
      v211 = *v208;
      v212 = *(_OWORD *)(v78 + 256);
      v213 = *(_OWORD *)(v78 + 288);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v213;
LABEL_79:
      *v207 = v211;
      v207[1] = v212;
      goto LABEL_91;
    }
    *((_QWORD *)v77 + 30) = *(_QWORD *)(v78 + 240);
    *((_QWORD *)v77 + 31) = *(_QWORD *)(v78 + 248);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v217 = v77 + 264;
    v218 = (__int128 *)(v78 + 264);
    v219 = *(_QWORD *)(v78 + 288);
    if (v219)
    {
      *((_QWORD *)v77 + 36) = v219;
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      (**(void (***)(_OWORD *, __int128 *))(v219 - 8))(v217, v218);
    }
    else
    {
      v222 = *v218;
      v223 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      *v217 = v222;
      *(_OWORD *)(v77 + 280) = v223;
    }
  }
  else
  {
    if (v210 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent((uint64_t)(v77 + 240));
      v214 = *(_OWORD *)(v78 + 288);
      v216 = *v208;
      v215 = *(_OWORD *)(v78 + 256);
      *((_OWORD *)v77 + 17) = *(_OWORD *)(v78 + 272);
      *((_OWORD *)v77 + 18) = v214;
      *v207 = v216;
      *((_OWORD *)v77 + 16) = v215;
      goto LABEL_91;
    }
    *((_DWORD *)v77 + 60) = *(_DWORD *)(v78 + 240);
    *((_DWORD *)v77 + 61) = *(_DWORD *)(v78 + 244);
    *((_DWORD *)v77 + 62) = *(_DWORD *)(v78 + 248);
    *((_DWORD *)v77 + 63) = *(_DWORD *)(v78 + 252);
    *((_QWORD *)v77 + 32) = *(_QWORD *)(v78 + 256);
    v207 = (__int128 *)(v77 + 264);
    v220 = (__int128 *)(v78 + 264);
    v221 = *(_QWORD *)(v78 + 288);
    if (!v209)
    {
      if (v221)
      {
        *((_QWORD *)v77 + 36) = v221;
        *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
        (**(void (***)(uint64_t, uint64_t))(v221 - 8))((uint64_t)(v77 + 264), v78 + 264);
        goto LABEL_91;
      }
      v211 = *v220;
      v212 = *(_OWORD *)(v78 + 280);
      *((_QWORD *)v77 + 37) = *(_QWORD *)(v78 + 296);
      goto LABEL_79;
    }
    if (v221)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)v77 + 33, (uint64_t *)(v78 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent((uint64_t)(v77 + 264));
      v224 = *(_QWORD *)(v78 + 296);
      v225 = *(_OWORD *)(v78 + 280);
      *v207 = *v220;
      *(_OWORD *)(v77 + 280) = v225;
      *((_QWORD *)v77 + 37) = v224;
    }
  }
LABEL_91:
  v226 = *(_QWORD *)(v78 + 304);
  v77[312] = *(_BYTE *)(v78 + 312);
  *((_QWORD *)v77 + 38) = v226;
  *((_QWORD *)v77 + 40) = *(_QWORD *)(v78 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_DWORD *)v77 + 82) = *(_DWORD *)(v78 + 328);
  *((_DWORD *)v77 + 83) = *(_DWORD *)(v78 + 332);
  v227 = v53[6];
  v228 = (_DWORD *)((char *)v5 + v227);
  v229 = (_DWORD *)((char *)v42 + v227);
  *v228 = *v229;
  v228[1] = v229[1];
  v228[2] = v229[2];
  v228[3] = v229[3];
  v228[4] = v229[4];
  v228[5] = v229[5];
  v228[6] = v229[6];
  v228[7] = v229[7];
  v230 = v53[7];
  v231 = (char *)v5 + v230;
  v232 = (uint64_t)v42 + v230;
  v233 = *(_QWORD *)v232;
  v234 = *(_BYTE *)(v232 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v232, v234);
  v235 = *(_QWORD *)v231;
  v236 = v231[8];
  *(_QWORD *)v231 = v233;
  v231[8] = v234;
  outlined consume of Environment<Bool>.Content(v235, v236);
  return v5;
}

uint64_t initializeWithTake for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v8 = *(int *)(v7 + 56);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  type metadata accessor for Binding<TextSelection?>(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for Binding<TextSelection?>?(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    v16 = *(int *)(v12 + 32);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    v19 = type metadata accessor for TextSelection(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for TextSelection?(0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v32 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      v17[*(int *)(v19 + 20)] = v18[*(int *)(v19 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  v23 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v23 + 20)) = *(_QWORD *)(a2 + *(int *)(v23 + 20));
  memcpy((void *)(a1 + a3[5]), (const void *)(a2 + a3[5]), 0x150uLL);
  v24 = a3[6];
  v25 = a3[7];
  v26 = (_OWORD *)(a1 + v24);
  v27 = (_OWORD *)(a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a1 + v25;
  v30 = a2 + v25;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

uint64_t assignWithTake for TextViewAdaptor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  _OWORD *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  int *v114;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (*(_QWORD *)(a1 + 64))
  {
    if (*(_QWORD *)(a2 + 64))
    {
      v7 = *(_BYTE *)(a2 + 56);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_BYTE *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 56) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v11;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 168);
  v13 = *(_WORD *)(a2 + 176);
  v14 = *(_BYTE *)(a2 + 178);
  v15 = *(_BYTE *)(a2 + 179);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a1 + 96);
  v20 = *(_QWORD *)(a1 + 104);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 136);
  v25 = *(_OWORD *)(a1 + 152);
  v26 = *(_QWORD *)(a1 + 168);
  v27 = *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16);
  v28 = *(_BYTE *)(a1 + 179);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = v12;
  *(_BYTE *)(a1 + 178) = v14;
  *(_WORD *)(a1 + 176) = v13;
  *(_BYTE *)(a1 + 179) = v15;
  outlined consume of StateOrBinding<TextFieldState>(v16, v17, v18, v19, v20, v21, v22, v23, v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26, v27, v28);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  v30 = *(int *)(v29 + 56);
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  type metadata accessor for Binding<TextSelection?>(0);
  v34 = v33;
  v35 = *(_QWORD *)(v33 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v31, 1, v33);
  v38 = v36(v32, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v39;
      v40 = *(int *)(v34 + 32);
      v41 = &v31[v40];
      v42 = &v32[v40];
      v43 = type metadata accessor for TextSelection(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v114 = a3;
        v60 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v41, v42, v61);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        a3 = v114;
        v41[*(int *)(v43 + 20)] = v42[*(int *)(v43 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    type metadata accessor for Binding<TextSelection?>?(0);
    v47 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
    v48 = v31;
    v49 = v32;
LABEL_13:
    memcpy(v48, v49, v47);
    goto LABEL_26;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  swift_release();
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_release();
  v50 = *(int *)(v34 + 32);
  v51 = &v31[v50];
  v52 = &v32[v50];
  v53 = type metadata accessor for TextSelection(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (v56)
  {
    if (!v57)
    {
      v58 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v51, v52, v59);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v57)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    v47 = *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64);
    v48 = v51;
    v49 = v52;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v51, type metadata accessor for TextSelection.Indices);
    v87 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEE838]);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v51, v52, v88);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
  }
  v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
LABEL_26:
  v63 = type metadata accessor for SystemTextFieldConfiguration(0);
  *(_QWORD *)(a1 + *(int *)(v63 + 20)) = *(_QWORD *)(a2 + *(int *)(v63 + 20));
  v64 = a3[5];
  v65 = a1 + v64;
  v66 = a2 + v64;
  *(_QWORD *)(a1 + v64) = *(_QWORD *)(a2 + v64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 8);
  *(_DWORD *)(v65 + 16) = *(_DWORD *)(v66 + 16);
  v67 = *(void **)(v65 + 24);
  v68 = *(_QWORD *)(v66 + 24);
  if (v67 == (void *)1)
  {
LABEL_29:
    v69 = *(_OWORD *)(v66 + 200);
    *(_OWORD *)(v65 + 184) = *(_OWORD *)(v66 + 184);
    *(_OWORD *)(v65 + 200) = v69;
    *(_OWORD *)(v65 + 216) = *(_OWORD *)(v66 + 216);
    *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
    v70 = *(_OWORD *)(v66 + 136);
    *(_OWORD *)(v65 + 120) = *(_OWORD *)(v66 + 120);
    *(_OWORD *)(v65 + 136) = v70;
    v71 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v71;
    v72 = *(_OWORD *)(v66 + 72);
    *(_OWORD *)(v65 + 56) = *(_OWORD *)(v66 + 56);
    *(_OWORD *)(v65 + 72) = v72;
    v73 = *(_OWORD *)(v66 + 104);
    *(_OWORD *)(v65 + 88) = *(_OWORD *)(v66 + 88);
    *(_OWORD *)(v65 + 104) = v73;
    v74 = *(_OWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(v66 + 24);
    *(_OWORD *)(v65 + 40) = v74;
    goto LABEL_51;
  }
  if (v68 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(v65 + 24);
    goto LABEL_29;
  }
  *(_QWORD *)(v65 + 24) = v68;

  v75 = *(void **)(v65 + 32);
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);

  v76 = *(void **)(v65 + 40);
  *(_QWORD *)(v65 + 40) = *(_QWORD *)(v66 + 40);

  v77 = (_QWORD *)(v65 + 48);
  v78 = (_QWORD *)(v66 + 48);
  if (*(_QWORD *)(v65 + 168) >> 1 == 4294967294)
    goto LABEL_33;
  if (*(_QWORD *)(v66 + 168) >> 1 != 4294967294)
  {
    v84 = *(unsigned __int8 *)(v65 + 56);
    if (v84 != 255)
    {
      v85 = *(unsigned __int8 *)(v66 + 56);
      if (v85 != 255)
      {
        v86 = *(void **)(v65 + 48);
        *(_QWORD *)(v65 + 48) = *v78;
        *(_BYTE *)(v65 + 56) = v85;
        outlined consume of GraphicsImage.Contents(v86, v84);
        goto LABEL_44;
      }
      outlined destroy of GraphicsImage.Contents(v65 + 48);
    }
    *v77 = *v78;
    *(_BYTE *)(v65 + 56) = *(_BYTE *)(v66 + 56);
LABEL_44:
    *(_OWORD *)(v65 + 64) = *(_OWORD *)(v66 + 64);
    *(_QWORD *)(v65 + 80) = *(_QWORD *)(v66 + 80);
    *(_BYTE *)(v65 + 88) = *(_BYTE *)(v66 + 88);
    *(_OWORD *)(v65 + 92) = *(_OWORD *)(v66 + 92);
    *(_BYTE *)(v65 + 108) = *(_BYTE *)(v66 + 108);
    v89 = *(_OWORD *)(v66 + 128);
    *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
    *(_OWORD *)(v65 + 128) = v89;
    *(_BYTE *)(v65 + 144) = *(_BYTE *)(v66 + 144);
    *(_BYTE *)(v65 + 145) = *(_BYTE *)(v66 + 145);
    v90 = *(_QWORD *)(v65 + 168);
    *(_WORD *)(v65 + 146) = *(_WORD *)(v66 + 146);
    if (v90 >> 1 != 0xFFFFFFFF)
    {
      v91 = *(_QWORD *)(v66 + 168);
      if (v91 >> 1 != 0xFFFFFFFF)
      {
        v93 = *(_QWORD *)(v66 + 176);
        v94 = *(_QWORD *)(v65 + 152);
        v95 = *(_QWORD *)(v65 + 160);
        *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
        *(_QWORD *)(v65 + 168) = v91;
        *(_QWORD *)(v65 + 176) = v93;
        outlined consume of AccessibilityImageLabel(v94, v95, v90);
        goto LABEL_49;
      }
      outlined destroy of AccessibilityImageLabel(v65 + 152);
    }
    v92 = *(_OWORD *)(v66 + 168);
    *(_OWORD *)(v65 + 152) = *(_OWORD *)(v66 + 152);
    *(_OWORD *)(v65 + 168) = v92;
LABEL_49:
    *(_QWORD *)(v65 + 184) = *(_QWORD *)(v66 + 184);
    swift_unknownObjectRelease();
    *(_QWORD *)(v65 + 192) = *(_QWORD *)(v66 + 192);
    swift_release();
    *(_BYTE *)(v65 + 200) = *(_BYTE *)(v66 + 200);
    *(_BYTE *)(v65 + 201) = *(_BYTE *)(v66 + 201);
    *(_DWORD *)(v65 + 204) = *(_DWORD *)(v66 + 204);
    *(_BYTE *)(v65 + 208) = *(_BYTE *)(v66 + 208);
    v96 = *(void **)(v65 + 216);
    *(_QWORD *)(v65 + 216) = *(_QWORD *)(v66 + 216);

    *(_WORD *)(v65 + 224) = *(_WORD *)(v66 + 224);
    *(_BYTE *)(v65 + 226) = *(_BYTE *)(v66 + 226);
    goto LABEL_50;
  }
  outlined destroy of Image.Resolved(v65 + 48);
LABEL_33:
  v79 = *(_OWORD *)(v66 + 192);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(v66 + 176);
  *(_OWORD *)(v65 + 192) = v79;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(v66 + 208);
  *(_DWORD *)(v65 + 223) = *(_DWORD *)(v66 + 223);
  v80 = *(_OWORD *)(v66 + 128);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(v66 + 112);
  *(_OWORD *)(v65 + 128) = v80;
  v81 = *(_OWORD *)(v66 + 160);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v66 + 144);
  *(_OWORD *)(v65 + 160) = v81;
  v82 = *(_OWORD *)(v66 + 64);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  *(_OWORD *)(v65 + 64) = v82;
  v83 = *(_OWORD *)(v66 + 96);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v66 + 80);
  *(_OWORD *)(v65 + 96) = v83;
LABEL_50:
  *(_BYTE *)(v65 + 227) = *(_BYTE *)(v66 + 227);
  *(_QWORD *)(v65 + 232) = *(_QWORD *)(v66 + 232);
  swift_release();
LABEL_51:
  v97 = *(_QWORD *)(v65 + 288);
  if (v97 == 1)
  {
LABEL_54:
    v99 = *(_OWORD *)(v66 + 256);
    *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
    *(_OWORD *)(v65 + 256) = v99;
    v100 = *(_OWORD *)(v66 + 288);
    *(_OWORD *)(v65 + 272) = *(_OWORD *)(v66 + 272);
    *(_OWORD *)(v65 + 288) = v100;
    goto LABEL_60;
  }
  v98 = *(_QWORD *)(v66 + 288);
  if (v98 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(v65 + 240);
    goto LABEL_54;
  }
  *(_OWORD *)(v65 + 240) = *(_OWORD *)(v66 + 240);
  *(_QWORD *)(v65 + 256) = *(_QWORD *)(v66 + 256);
  if (v97)
  {
    v101 = v65 + 264;
    if (v98)
      __swift_destroy_boxed_opaque_existential_1(v101);
    else
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v101);
  }
  v102 = *(_OWORD *)(v66 + 280);
  *(_OWORD *)(v65 + 264) = *(_OWORD *)(v66 + 264);
  *(_OWORD *)(v65 + 280) = v102;
  *(_QWORD *)(v65 + 296) = *(_QWORD *)(v66 + 296);
LABEL_60:
  *(_QWORD *)(v65 + 304) = *(_QWORD *)(v66 + 304);
  *(_BYTE *)(v65 + 312) = *(_BYTE *)(v66 + 312);
  *(_QWORD *)(v65 + 320) = *(_QWORD *)(v66 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v65 + 328) = *(_QWORD *)(v66 + 328);
  v103 = a3[6];
  v104 = a3[7];
  v105 = (_OWORD *)(a1 + v103);
  v106 = (_OWORD *)(a2 + v103);
  v107 = v106[1];
  *v105 = *v106;
  v105[1] = v107;
  v108 = a1 + v104;
  v109 = (uint64_t *)(a2 + v104);
  v110 = *v109;
  LOBYTE(v109) = *((_BYTE *)v109 + 8);
  v111 = *(_QWORD *)v108;
  v112 = *(_BYTE *)(v108 + 8);
  *(_QWORD *)v108 = v110;
  *(_BYTE *)(v108 + 8) = (_BYTE)v109;
  outlined consume of Environment<Bool>.Content(v111, v112);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextViewAdaptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_33Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SystemTextFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TextViewAdaptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_34Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SystemTextFieldConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TextViewAdaptor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SystemTextFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_187451708()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

double PencilHoverPose.location.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double PencilHoverPose.anchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double PencilHoverPose.zDistance.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double PencilHoverPose.altitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double PencilHoverPose.azimuth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

double PencilHoverPose.roll.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

void PencilHoverPose.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v1 = v0[1];
  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[7];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *v0;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  UnitPoint.hash(into:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v5;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
}

Swift::Int PencilHoverPose.hashValue.getter()
{
  Hasher.init(_seed:)();
  PencilHoverPose.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilHoverPose()
{
  Hasher.init(_seed:)();
  PencilHoverPose.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilHoverPose()
{
  Hasher.init(_seed:)();
  PencilHoverPose.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static PencilHoverPose.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  char v3;

  if (a1->f64[0] == a2->f64[0] && a1->f64[1] == a2->f64[1])
    v3 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(a1[2], a2[2]), (int32x4_t)vceqq_f64(a1[3], a2[3]))), 0xFuLL))) & static UnitPoint.== infix(_:_:)();
  else
    v3 = 0;
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type PencilHoverPose and conformance PencilHoverPose()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose;
  if (!lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PencilHoverPose, &type metadata for PencilHoverPose);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilHoverPose and conformance PencilHoverPose);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilHoverPose()
{
  return &type metadata for PencilHoverPose;
}

_QWORD *initializeBufferWithCopyOfBuffer for SearchToolbarItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  id v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  id v57;
  __int128 v58;
  __int128 v59;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v6 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v8 = *(int *)(v7 + 32);
    v9 = (char *)v6 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *((_BYTE *)a2 + v8);
    v9[1] = *((_BYTE *)a2 + v8 + 1);
    *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
    v9[8] = *((_BYTE *)a2 + v8 + 8);
    *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
    v11 = (int *)type metadata accessor for SearchFieldState();
    v12 = v11[9];
    v13 = &v9[v12];
    v14 = &v10[v12];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v13, v14, v15);
    v9[v11[10]] = v10[v11[10]];
    v17 = v11[11];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = (int *)type metadata accessor for SearchFieldConfiguration(0);
    v21 = v20[6];
    v22 = (char *)v6 + v21;
    v23 = (char *)a2 + v21;
    v24 = v23[8];
    if (v24 == 255)
    {
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
    }
    else
    {
      v25 = v24 & 1;
      v26 = *(_QWORD *)v23;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v23, v24 & 1);
      *(_QWORD *)v22 = v26;
      v22[8] = v25;
    }
    *((_BYTE *)v6 + v20[7]) = *((_BYTE *)a2 + v20[7]);
    v27 = v20[8];
    v28 = (char *)v6 + v27;
    v29 = (char *)a2 + v27;
    v30 = *(_QWORD *)((char *)a2 + v27);
    v31 = *(_QWORD *)((char *)a2 + v27 + 8);
    v32 = *((_BYTE *)a2 + v27 + 16);
    outlined copy of Text.Storage(v30, v31, v32);
    *(_QWORD *)v28 = v30;
    *((_QWORD *)v28 + 1) = v31;
    v28[16] = v32;
    v33 = a3[5];
    v34 = a3[6];
    v35 = *((_BYTE *)a2 + v33);
    *((_QWORD *)v28 + 3) = *((_QWORD *)v29 + 3);
    *((_BYTE *)v6 + v33) = v35;
    v36 = (char *)v6 + v34;
    v37 = (char *)a2 + v34;
    v38 = *(_QWORD *)((char *)a2 + v34);
    swift_bridgeObjectRetain();
    if (v38)
    {
      v39 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = v38;
      *((_QWORD *)v36 + 1) = v39;
      *((_DWORD *)v36 + 4) = *((_DWORD *)v37 + 4);
      v40 = (void *)*((_QWORD *)v37 + 4);
      *((_QWORD *)v36 + 3) = *((_QWORD *)v37 + 3);
      *((_QWORD *)v36 + 4) = v40;
      *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
      *((_DWORD *)v36 + 12) = *((_DWORD *)v37 + 12);
      *((_QWORD *)v36 + 7) = *((_QWORD *)v37 + 7);
      *((_OWORD *)v36 + 4) = *((_OWORD *)v37 + 4);
      *((_QWORD *)v36 + 10) = *((_QWORD *)v37 + 10);
      v41 = v40;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v42 = *((_OWORD *)v37 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)v37 + 2);
      *((_OWORD *)v36 + 3) = v42;
      *((_OWORD *)v36 + 4) = *((_OWORD *)v37 + 4);
      *((_QWORD *)v36 + 10) = *((_QWORD *)v37 + 10);
      v43 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v43;
    }
    v44 = a3[7];
    v45 = (char *)v6 + v44;
    v46 = (char *)a2 + v44;
    if (*(_QWORD *)v46)
    {
      v47 = *((_QWORD *)v46 + 1);
      *(_QWORD *)v45 = *(_QWORD *)v46;
      *((_QWORD *)v45 + 1) = v47;
      *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
      v48 = (void *)*((_QWORD *)v46 + 4);
      *((_QWORD *)v45 + 3) = *((_QWORD *)v46 + 3);
      *((_QWORD *)v45 + 4) = v48;
      *((_QWORD *)v45 + 5) = *((_QWORD *)v46 + 5);
      *((_DWORD *)v45 + 12) = *((_DWORD *)v46 + 12);
      *((_QWORD *)v45 + 7) = *((_QWORD *)v46 + 7);
      *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
      *((_QWORD *)v45 + 10) = *((_QWORD *)v46 + 10);
      v49 = v48;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v50 = *((_OWORD *)v46 + 3);
      *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
      *((_OWORD *)v45 + 3) = v50;
      *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
      *((_QWORD *)v45 + 10) = *((_QWORD *)v46 + 10);
      v51 = *((_OWORD *)v46 + 1);
      *(_OWORD *)v45 = *(_OWORD *)v46;
      *((_OWORD *)v45 + 1) = v51;
    }
    v52 = a3[9];
    *((_BYTE *)v6 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v53 = (char *)v6 + v52;
    v54 = (char *)a2 + v52;
    if (*(_QWORD *)v54)
    {
      v55 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      *((_DWORD *)v53 + 4) = *((_DWORD *)v54 + 4);
      v56 = (void *)*((_QWORD *)v54 + 4);
      *((_QWORD *)v53 + 3) = *((_QWORD *)v54 + 3);
      *((_QWORD *)v53 + 4) = v56;
      *((_QWORD *)v53 + 5) = *((_QWORD *)v54 + 5);
      *((_DWORD *)v53 + 12) = *((_DWORD *)v54 + 12);
      *((_QWORD *)v53 + 7) = *((_QWORD *)v54 + 7);
      *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
      *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
      v57 = v56;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v58 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v58;
      *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
      *((_QWORD *)v53 + 10) = *((_QWORD *)v54 + 10);
      v59 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v59;
    }
  }
  return v6;
}

uint64_t destroy for SearchToolbarItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = *(int *)(v4 + 32);
  v6 = a1 + *(int *)(type metadata accessor for SearchFieldState() + 36) + v5;
  v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for SearchFieldConfiguration(0);
  v9 = a1 + *(int *)(v8 + 24);
  v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v9, v10 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(a1 + *(int *)(v8 + 32)), *(_QWORD *)(a1 + *(int *)(v8 + 32) + 8), *(_BYTE *)(a1 + *(int *)(v8 + 32) + 16));
  result = swift_bridgeObjectRelease();
  v12 = a1 + a2[6];
  if (*(_QWORD *)v12)
  {

    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  v13 = a1 + a2[7];
  if (*(_QWORD *)v13)
  {

    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  v14 = a1 + a2[9];
  if (*(_QWORD *)v14)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SearchToolbarItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  id v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  id v55;
  __int128 v56;
  __int128 v57;
  uint64_t v60;

  v60 = a2[1];
  *a1 = *a2;
  a1[1] = v60;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((_BYTE *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  v9 = (int *)type metadata accessor for SearchFieldState();
  v10 = v9[9];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for AttributedString();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  v15 = v9[11];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = v21[8];
  if (v22 == 255)
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
  }
  else
  {
    v23 = v22 & 1;
    v24 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v21, v22 & 1);
    *(_QWORD *)v20 = v24;
    v20[8] = v23;
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  v29 = *(_QWORD *)((char *)a2 + v25 + 8);
  v30 = *((_BYTE *)a2 + v25 + 16);
  outlined copy of Text.Storage(v28, v29, v30);
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v26 + 1) = v29;
  v26[16] = v30;
  v31 = a3[5];
  v32 = a3[6];
  v33 = *((_BYTE *)a2 + v31);
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  *((_BYTE *)a1 + v31) = v33;
  v34 = (char *)a1 + v32;
  v35 = (char *)a2 + v32;
  v36 = *(_QWORD *)((char *)a2 + v32);
  swift_bridgeObjectRetain();
  if (v36)
  {
    v37 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = v36;
    *((_QWORD *)v34 + 1) = v37;
    *((_DWORD *)v34 + 4) = *((_DWORD *)v35 + 4);
    v38 = (void *)*((_QWORD *)v35 + 4);
    *((_QWORD *)v34 + 3) = *((_QWORD *)v35 + 3);
    *((_QWORD *)v34 + 4) = v38;
    *((_QWORD *)v34 + 5) = *((_QWORD *)v35 + 5);
    *((_DWORD *)v34 + 12) = *((_DWORD *)v35 + 12);
    *((_QWORD *)v34 + 7) = *((_QWORD *)v35 + 7);
    *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
    *((_QWORD *)v34 + 10) = *((_QWORD *)v35 + 10);
    v39 = v38;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v40 = *((_OWORD *)v35 + 3);
    *((_OWORD *)v34 + 2) = *((_OWORD *)v35 + 2);
    *((_OWORD *)v34 + 3) = v40;
    *((_OWORD *)v34 + 4) = *((_OWORD *)v35 + 4);
    *((_QWORD *)v34 + 10) = *((_QWORD *)v35 + 10);
    v41 = *((_OWORD *)v35 + 1);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *((_OWORD *)v34 + 1) = v41;
  }
  v42 = a3[7];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  if (*(_QWORD *)v44)
  {
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    *((_DWORD *)v43 + 4) = *((_DWORD *)v44 + 4);
    v46 = (void *)*((_QWORD *)v44 + 4);
    *((_QWORD *)v43 + 3) = *((_QWORD *)v44 + 3);
    *((_QWORD *)v43 + 4) = v46;
    *((_QWORD *)v43 + 5) = *((_QWORD *)v44 + 5);
    *((_DWORD *)v43 + 12) = *((_DWORD *)v44 + 12);
    *((_QWORD *)v43 + 7) = *((_QWORD *)v44 + 7);
    *((_OWORD *)v43 + 4) = *((_OWORD *)v44 + 4);
    *((_QWORD *)v43 + 10) = *((_QWORD *)v44 + 10);
    v47 = v46;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v48 = *((_OWORD *)v44 + 3);
    *((_OWORD *)v43 + 2) = *((_OWORD *)v44 + 2);
    *((_OWORD *)v43 + 3) = v48;
    *((_OWORD *)v43 + 4) = *((_OWORD *)v44 + 4);
    *((_QWORD *)v43 + 10) = *((_QWORD *)v44 + 10);
    v49 = *((_OWORD *)v44 + 1);
    *(_OWORD *)v43 = *(_OWORD *)v44;
    *((_OWORD *)v43 + 1) = v49;
  }
  v50 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  if (*(_QWORD *)v52)
  {
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    *((_DWORD *)v51 + 4) = *((_DWORD *)v52 + 4);
    v54 = (void *)*((_QWORD *)v52 + 4);
    *((_QWORD *)v51 + 3) = *((_QWORD *)v52 + 3);
    *((_QWORD *)v51 + 4) = v54;
    *((_QWORD *)v51 + 5) = *((_QWORD *)v52 + 5);
    *((_DWORD *)v51 + 12) = *((_DWORD *)v52 + 12);
    *((_QWORD *)v51 + 7) = *((_QWORD *)v52 + 7);
    *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
    *((_QWORD *)v51 + 10) = *((_QWORD *)v52 + 10);
    v55 = v54;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v56 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v56;
    *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
    *((_QWORD *)v51 + 10) = *((_QWORD *)v52 + 10);
    v57 = *((_OWORD *)v52 + 1);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v57;
  }
  return a1;
}

_QWORD *assignWithCopy for SearchToolbarItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  void *v71;
  id v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  id v89;
  uint64_t v90;
  void *v91;
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  v23 = *((unsigned __int8 *)a2 + v19 + 8);
  if (v22 == 255)
  {
    if (v23 == 255)
    {
      v25 = *(_QWORD *)v21;
      *(_BYTE *)(v20 + 8) = v21[8];
      *(_QWORD *)v20 = v25;
    }
    else
    {
      v30 = v23 & 1;
      v31 = *(_QWORD *)v21;
      outlined copy of PlatformItemCollection.Storage(v31, v23 & 1);
      *(_QWORD *)v20 = v31;
      *(_BYTE *)(v20 + 8) = v30;
    }
  }
  else if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
    v24 = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = v24;
  }
  else
  {
    v26 = v23 & 1;
    v27 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(v27, v23 & 1);
    v28 = *(_QWORD *)v20;
    v29 = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v20 = v27;
    *(_BYTE *)(v20 + 8) = v26;
    outlined consume of PlatformItemCollection.Storage(v28, v29);
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v32 = v18[8];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a2 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32 + 8);
  v37 = *((_BYTE *)a2 + v32 + 16);
  outlined copy of Text.Storage(v35, v36, v37);
  v38 = *(_QWORD *)v33;
  v39 = *((_QWORD *)v33 + 1);
  v40 = v33[16];
  *(_QWORD *)v33 = v35;
  *((_QWORD *)v33 + 1) = v36;
  v33[16] = v37;
  outlined consume of Text.Storage(v38, v39, v40);
  *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v41 = a3[6];
  v42 = (uint64_t)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = *(_QWORD *)((char *)a1 + v41);
  v45 = *(_QWORD *)((char *)a2 + v41);
  if (v44)
  {
    if (v45)
    {
      v46 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = v45;
      *(_QWORD *)(v42 + 8) = v46;
      *(_DWORD *)(v42 + 16) = *((_DWORD *)v43 + 4);
      *(_QWORD *)(v42 + 24) = *((_QWORD *)v43 + 3);
      v47 = (void *)*((_QWORD *)v43 + 4);
      v48 = *(void **)(v42 + 32);
      *(_QWORD *)(v42 + 32) = v47;
      v49 = v47;

      *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v42 + 48) = *((_DWORD *)v43 + 12);
      *(_QWORD *)(v42 + 56) = *((_QWORD *)v43 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v42 + 64) = *((_DWORD *)v43 + 16);
      *(_DWORD *)(v42 + 68) = *((_DWORD *)v43 + 17);
      *(_DWORD *)(v42 + 72) = *((_DWORD *)v43 + 18);
      *(_DWORD *)(v42 + 76) = *((_DWORD *)v43 + 19);
      *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v42);
      v53 = *((_OWORD *)v43 + 1);
      *(_OWORD *)v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v53;
      v55 = *((_OWORD *)v43 + 3);
      v54 = *((_OWORD *)v43 + 4);
      v56 = *((_OWORD *)v43 + 2);
      *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
      *(_OWORD *)(v42 + 48) = v55;
      *(_OWORD *)(v42 + 64) = v54;
      *(_OWORD *)(v42 + 32) = v56;
    }
  }
  else if (v45)
  {
    v50 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = v45;
    *(_QWORD *)(v42 + 8) = v50;
    *(_DWORD *)(v42 + 16) = *((_DWORD *)v43 + 4);
    *(_QWORD *)(v42 + 24) = *((_QWORD *)v43 + 3);
    v51 = (void *)*((_QWORD *)v43 + 4);
    *(_QWORD *)(v42 + 32) = v51;
    *(_QWORD *)(v42 + 40) = *((_QWORD *)v43 + 5);
    *(_DWORD *)(v42 + 48) = *((_DWORD *)v43 + 12);
    *(_QWORD *)(v42 + 56) = *((_QWORD *)v43 + 7);
    *(_DWORD *)(v42 + 64) = *((_DWORD *)v43 + 16);
    *(_DWORD *)(v42 + 68) = *((_DWORD *)v43 + 17);
    *(_DWORD *)(v42 + 72) = *((_DWORD *)v43 + 18);
    *(_DWORD *)(v42 + 76) = *((_DWORD *)v43 + 19);
    *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
    v52 = v51;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v57 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 16) = v57;
    v58 = *((_OWORD *)v43 + 2);
    v59 = *((_OWORD *)v43 + 3);
    v60 = *((_OWORD *)v43 + 4);
    *(_QWORD *)(v42 + 80) = *((_QWORD *)v43 + 10);
    *(_OWORD *)(v42 + 48) = v59;
    *(_OWORD *)(v42 + 64) = v60;
    *(_OWORD *)(v42 + 32) = v58;
  }
  v61 = a3[7];
  v62 = (uint64_t)a1 + v61;
  v63 = (char *)a2 + v61;
  v64 = *(_QWORD *)((char *)a1 + v61);
  v65 = *(_QWORD *)((char *)a2 + v61);
  if (v64)
  {
    if (v65)
    {
      v66 = *((_QWORD *)v63 + 1);
      *(_QWORD *)v62 = v65;
      *(_QWORD *)(v62 + 8) = v66;
      *(_DWORD *)(v62 + 16) = *((_DWORD *)v63 + 4);
      *(_QWORD *)(v62 + 24) = *((_QWORD *)v63 + 3);
      v67 = (void *)*((_QWORD *)v63 + 4);
      v68 = *(void **)(v62 + 32);
      *(_QWORD *)(v62 + 32) = v67;
      v69 = v67;

      *(_QWORD *)(v62 + 40) = *((_QWORD *)v63 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v62 + 48) = *((_DWORD *)v63 + 12);
      *(_QWORD *)(v62 + 56) = *((_QWORD *)v63 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v62 + 64) = *((_DWORD *)v63 + 16);
      *(_DWORD *)(v62 + 68) = *((_DWORD *)v63 + 17);
      *(_DWORD *)(v62 + 72) = *((_DWORD *)v63 + 18);
      *(_DWORD *)(v62 + 76) = *((_DWORD *)v63 + 19);
      *(_QWORD *)(v62 + 80) = *((_QWORD *)v63 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v62);
      v73 = *((_OWORD *)v63 + 1);
      *(_OWORD *)v62 = *(_OWORD *)v63;
      *(_OWORD *)(v62 + 16) = v73;
      v75 = *((_OWORD *)v63 + 3);
      v74 = *((_OWORD *)v63 + 4);
      v76 = *((_OWORD *)v63 + 2);
      *(_QWORD *)(v62 + 80) = *((_QWORD *)v63 + 10);
      *(_OWORD *)(v62 + 48) = v75;
      *(_OWORD *)(v62 + 64) = v74;
      *(_OWORD *)(v62 + 32) = v76;
    }
  }
  else if (v65)
  {
    v70 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = v65;
    *(_QWORD *)(v62 + 8) = v70;
    *(_DWORD *)(v62 + 16) = *((_DWORD *)v63 + 4);
    *(_QWORD *)(v62 + 24) = *((_QWORD *)v63 + 3);
    v71 = (void *)*((_QWORD *)v63 + 4);
    *(_QWORD *)(v62 + 32) = v71;
    *(_QWORD *)(v62 + 40) = *((_QWORD *)v63 + 5);
    *(_DWORD *)(v62 + 48) = *((_DWORD *)v63 + 12);
    *(_QWORD *)(v62 + 56) = *((_QWORD *)v63 + 7);
    *(_DWORD *)(v62 + 64) = *((_DWORD *)v63 + 16);
    *(_DWORD *)(v62 + 68) = *((_DWORD *)v63 + 17);
    *(_DWORD *)(v62 + 72) = *((_DWORD *)v63 + 18);
    *(_DWORD *)(v62 + 76) = *((_DWORD *)v63 + 19);
    *(_QWORD *)(v62 + 80) = *((_QWORD *)v63 + 10);
    v72 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v77 = *((_OWORD *)v63 + 1);
    *(_OWORD *)v62 = *(_OWORD *)v63;
    *(_OWORD *)(v62 + 16) = v77;
    v78 = *((_OWORD *)v63 + 2);
    v79 = *((_OWORD *)v63 + 3);
    v80 = *((_OWORD *)v63 + 4);
    *(_QWORD *)(v62 + 80) = *((_QWORD *)v63 + 10);
    *(_OWORD *)(v62 + 48) = v79;
    *(_OWORD *)(v62 + 64) = v80;
    *(_OWORD *)(v62 + 32) = v78;
  }
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v81 = a3[9];
  v82 = (uint64_t)a1 + v81;
  v83 = (char *)a2 + v81;
  v84 = *(_QWORD *)((char *)a1 + v81);
  v85 = *(_QWORD *)((char *)a2 + v81);
  if (v84)
  {
    if (v85)
    {
      v86 = *((_QWORD *)v83 + 1);
      *(_QWORD *)v82 = v85;
      *(_QWORD *)(v82 + 8) = v86;
      *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
      *(_QWORD *)(v82 + 24) = *((_QWORD *)v83 + 3);
      v87 = (void *)*((_QWORD *)v83 + 4);
      v88 = *(void **)(v82 + 32);
      *(_QWORD *)(v82 + 32) = v87;
      v89 = v87;

      *(_QWORD *)(v82 + 40) = *((_QWORD *)v83 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v82 + 48) = *((_DWORD *)v83 + 12);
      *(_QWORD *)(v82 + 56) = *((_QWORD *)v83 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v82 + 64) = *((_DWORD *)v83 + 16);
      *(_DWORD *)(v82 + 68) = *((_DWORD *)v83 + 17);
      *(_DWORD *)(v82 + 72) = *((_DWORD *)v83 + 18);
      *(_DWORD *)(v82 + 76) = *((_DWORD *)v83 + 19);
      *(_QWORD *)(v82 + 80) = *((_QWORD *)v83 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v82);
      v93 = *((_OWORD *)v83 + 1);
      *(_OWORD *)v82 = *(_OWORD *)v83;
      *(_OWORD *)(v82 + 16) = v93;
      v95 = *((_OWORD *)v83 + 3);
      v94 = *((_OWORD *)v83 + 4);
      v96 = *((_OWORD *)v83 + 2);
      *(_QWORD *)(v82 + 80) = *((_QWORD *)v83 + 10);
      *(_OWORD *)(v82 + 48) = v95;
      *(_OWORD *)(v82 + 64) = v94;
      *(_OWORD *)(v82 + 32) = v96;
    }
  }
  else if (v85)
  {
    v90 = *((_QWORD *)v83 + 1);
    *(_QWORD *)v82 = v85;
    *(_QWORD *)(v82 + 8) = v90;
    *(_DWORD *)(v82 + 16) = *((_DWORD *)v83 + 4);
    *(_QWORD *)(v82 + 24) = *((_QWORD *)v83 + 3);
    v91 = (void *)*((_QWORD *)v83 + 4);
    *(_QWORD *)(v82 + 32) = v91;
    *(_QWORD *)(v82 + 40) = *((_QWORD *)v83 + 5);
    *(_DWORD *)(v82 + 48) = *((_DWORD *)v83 + 12);
    *(_QWORD *)(v82 + 56) = *((_QWORD *)v83 + 7);
    *(_DWORD *)(v82 + 64) = *((_DWORD *)v83 + 16);
    *(_DWORD *)(v82 + 68) = *((_DWORD *)v83 + 17);
    *(_DWORD *)(v82 + 72) = *((_DWORD *)v83 + 18);
    *(_DWORD *)(v82 + 76) = *((_DWORD *)v83 + 19);
    *(_QWORD *)(v82 + 80) = *((_QWORD *)v83 + 10);
    v92 = v91;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v97 = *((_OWORD *)v83 + 1);
    *(_OWORD *)v82 = *(_OWORD *)v83;
    *(_OWORD *)(v82 + 16) = v97;
    v98 = *((_OWORD *)v83 + 2);
    v99 = *((_OWORD *)v83 + 3);
    v100 = *((_OWORD *)v83 + 4);
    *(_QWORD *)(v82 + 80) = *((_QWORD *)v83 + 10);
    *(_OWORD *)(v82 + 48) = v99;
    *(_OWORD *)(v82 + 64) = v100;
    *(_OWORD *)(v82 + 32) = v98;
  }
  return a1;
}

uint64_t outlined destroy of BoundInputsView(uint64_t a1)
{
  destroy for BoundInputsView(a1);
  return a1;
}

_QWORD *initializeWithTake for SearchToolbarItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v16 = v11[11];
  v17 = &v9[v16];
  v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v20 = v19[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *((_BYTE *)a1 + v19[7]) = *((_BYTE *)a2 + v19[7]);
  v23 = v19[8];
  v24 = (_OWORD *)((char *)a1 + v23);
  v25 = (_OWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 10) = *((_QWORD *)v29 + 10);
  v31 = *((_OWORD *)v29 + 4);
  v32 = *((_OWORD *)v29 + 2);
  *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
  *((_OWORD *)v28 + 4) = v31;
  *((_OWORD *)v28 + 2) = v32;
  v33 = a3[7];
  v34 = a3[8];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  v37 = *((_OWORD *)v36 + 1);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v37;
  *((_QWORD *)v35 + 10) = *((_QWORD *)v36 + 10);
  v38 = *((_OWORD *)v36 + 4);
  v39 = *((_OWORD *)v36 + 2);
  *((_OWORD *)v35 + 3) = *((_OWORD *)v36 + 3);
  *((_OWORD *)v35 + 4) = v38;
  *((_OWORD *)v35 + 2) = v39;
  *((_BYTE *)a1 + v34) = *((_BYTE *)a2 + v34);
  v40 = a3[9];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = *((_OWORD *)v42 + 3);
  *((_OWORD *)v41 + 2) = *((_OWORD *)v42 + 2);
  *((_OWORD *)v41 + 3) = v43;
  *((_OWORD *)v41 + 4) = *((_OWORD *)v42 + 4);
  *((_QWORD *)v41 + 10) = *((_QWORD *)v42 + 10);
  v44 = *((_OWORD *)v42 + 1);
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *((_OWORD *)v41 + 1) = v44;
  return a1;
}

_QWORD *assignWithTake for SearchToolbarItem(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((unsigned __int8 *)a1 + v19 + 8);
  if (v22 == 255)
    goto LABEL_4;
  v23 = v21[8];
  if (v23 == 255)
  {
    outlined destroy of PlatformItemCollection(v20);
LABEL_4:
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *(_BYTE *)(v20 + 8) = v21[8];
    goto LABEL_6;
  }
  v24 = *(_QWORD *)v20;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v23 & 1;
  outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
LABEL_6:
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  LOBYTE(v25) = *((_BYTE *)a2 + v25 + 16);
  v28 = *(_QWORD *)v26;
  v29 = *((_QWORD *)v26 + 1);
  v30 = v26[16];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v25;
  outlined consume of Text.Storage(v28, v29, v30);
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRelease();
  v31 = a3[6];
  *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  if (*(_QWORD *)((char *)a1 + v31))
  {
    if (*(_QWORD *)v33)
    {
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      *((_DWORD *)v32 + 4) = *((_DWORD *)v33 + 4);
      v35 = *((_QWORD *)v33 + 4);
      v36 = (void *)*((_QWORD *)v32 + 4);
      *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
      *((_QWORD *)v32 + 4) = v35;

      *((_QWORD *)v32 + 5) = *((_QWORD *)v33 + 5);
      swift_release();
      *((_DWORD *)v32 + 12) = *((_DWORD *)v33 + 12);
      *((_QWORD *)v32 + 7) = *((_QWORD *)v33 + 7);
      swift_release();
      *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
      *((_QWORD *)v32 + 10) = *((_QWORD *)v33 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined destroy of BoundInputsView((uint64_t)a1 + v31);
  }
  v37 = *((_OWORD *)v33 + 3);
  *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
  *((_OWORD *)v32 + 3) = v37;
  *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
  *((_QWORD *)v32 + 10) = *((_QWORD *)v33 + 10);
  v38 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v38;
LABEL_11:
  v39 = a3[7];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  if (*(_QWORD *)((char *)a1 + v39))
  {
    if (*(_QWORD *)v41)
    {
      v42 = *((_QWORD *)v41 + 1);
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *(_QWORD *)(v40 + 8) = v42;
      *(_DWORD *)(v40 + 16) = *((_DWORD *)v41 + 4);
      v43 = *((_QWORD *)v41 + 4);
      v44 = *(void **)(v40 + 32);
      *(_QWORD *)(v40 + 24) = *((_QWORD *)v41 + 3);
      *(_QWORD *)(v40 + 32) = v43;

      *(_QWORD *)(v40 + 40) = *((_QWORD *)v41 + 5);
      swift_release();
      *(_DWORD *)(v40 + 48) = *((_DWORD *)v41 + 12);
      *(_QWORD *)(v40 + 56) = *((_QWORD *)v41 + 7);
      swift_release();
      *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
      *(_QWORD *)(v40 + 80) = *((_QWORD *)v41 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of BoundInputsView(v40);
  }
  v45 = *((_OWORD *)v41 + 3);
  *(_OWORD *)(v40 + 32) = *((_OWORD *)v41 + 2);
  *(_OWORD *)(v40 + 48) = v45;
  *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
  *(_QWORD *)(v40 + 80) = *((_QWORD *)v41 + 10);
  v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_16:
  v47 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  if (!*(_QWORD *)((char *)a1 + v47))
  {
LABEL_20:
    v53 = *((_OWORD *)v49 + 3);
    *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
    *((_OWORD *)v48 + 3) = v53;
    *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
    *((_QWORD *)v48 + 10) = *((_QWORD *)v49 + 10);
    v54 = *((_OWORD *)v49 + 1);
    *(_OWORD *)v48 = *(_OWORD *)v49;
    *((_OWORD *)v48 + 1) = v54;
    return a1;
  }
  if (!*(_QWORD *)v49)
  {
    outlined destroy of BoundInputsView((uint64_t)a1 + v47);
    goto LABEL_20;
  }
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  *((_DWORD *)v48 + 4) = *((_DWORD *)v49 + 4);
  v51 = *((_QWORD *)v49 + 4);
  v52 = (void *)*((_QWORD *)v48 + 4);
  *((_QWORD *)v48 + 3) = *((_QWORD *)v49 + 3);
  *((_QWORD *)v48 + 4) = v51;

  *((_QWORD *)v48 + 5) = *((_QWORD *)v49 + 5);
  swift_release();
  *((_DWORD *)v48 + 12) = *((_DWORD *)v49 + 12);
  *((_QWORD *)v48 + 7) = *((_QWORD *)v49 + 7);
  swift_release();
  *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
  *((_QWORD *)v48 + 10) = *((_QWORD *)v49 + 10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchToolbarItem()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187452F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchToolbarItem()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187452FD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SearchFieldConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

uint64_t type metadata accessor for SearchToolbarItem()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SearchToolbarItem;
  if (!type metadata singleton initialization cache for SearchToolbarItem)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SearchToolbarItem()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for SearchScopeToolbarContent()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchScopeToolbarContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 1) & ~v5) + 55) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    v12 = v10 + v6;
    v13 = v11 + v6;
    v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)v15;
    LOBYTE(v11) = *(_BYTE *)(v15 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v11);
    *(_QWORD *)v14 = v16;
    *(_BYTE *)(v14 + 8) = v11;
    v17 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
    v19 = *(_QWORD *)v18;
    LOBYTE(v11) = *(_BYTE *)(v18 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v11);
    *(_QWORD *)v17 = v19;
    *(_BYTE *)(v17 + 8) = v11;
    v20 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    LOBYTE(v11) = *(_BYTE *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v11);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v11;
    v23 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v13 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for SearchScopeToolbarContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = (a1 + *(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v3);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  return swift_release();
}

_BYTE *initializeWithCopy for SearchScopeToolbarContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v7) = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v12, v7);
  *(_QWORD *)v11 = v13;
  *(_BYTE *)(v11 + 8) = v7;
  v14 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v7) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v7);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v7;
  v17 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)v18;
  LOBYTE(v7) = *(_BYTE *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, v7);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v7;
  v20 = (v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_retain();
  return a1;
}

_BYTE *assignWithCopy for SearchScopeToolbarContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v7) = *(_BYTE *)(v12 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v12, v7);
  v14 = *(_QWORD *)v11;
  v15 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v11 = v13;
  *(_BYTE *)(v11 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  LOBYTE(v7) = *(_BYTE *)(v17 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v7);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v19, v20);
  v21 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  LOBYTE(v7) = *(_BYTE *)(v22 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v22, v7);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = (v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_retain();
  swift_release();
  return a1;
}

_BYTE *initializeWithTake for SearchScopeToolbarContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = v13;
  v14 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v13) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v13;
  v16 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v13) = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v13;
  *(_OWORD *)((v9 + 55) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v10 + 55) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *assignWithTake for SearchScopeToolbarContent(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  LOBYTE(v12) = *(_BYTE *)(v12 + 8);
  v14 = *(_QWORD *)v11;
  v15 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v11 = v13;
  *(_BYTE *)(v11 + 8) = v12;
  outlined consume of Environment<Bool>.Content(v14, v15);
  v16 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_QWORD *)v17;
  LOBYTE(v17) = *(_BYTE *)(v17 + 8);
  v19 = *(_QWORD *)v16;
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = v17;
  outlined consume of Environment<Bool>.Content(v19, v20);
  v21 = (v9 + 39) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  LOBYTE(v22) = *(_BYTE *)(v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v22;
  outlined consume of Environment<Bool>.Content(v24, v25);
  v26 = (v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v26 = *(_BYTE *)v27;
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchScopeToolbarContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 55;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 1) & ~v7;
    if (v5 < 0x7FFFFFFE)
    {
      v14 = *(_QWORD *)(((v8 + v13) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      v15 = v14 - 1;
      if (v15 < 0)
        v15 = -1;
      return (v15 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187453890 + 4 * byte_187C31E70[v11]))();
  }
}

void storeEnumTagSinglePayload for SearchScopeToolbarContent(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 55 + (((_DWORD)v7 + 1) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 55 + (((_DWORD)v7 + 1) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 55 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_187453A34()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187453AB8);
}

void sub_187453A3C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187453A44);
  JUMPOUT(0x187453AB8);
}

void sub_187453A90()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187453AB8);
}

void sub_187453A98()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187453AB8);
}

uint64_t sub_187453AA0@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  v3 = (v8 + v7 + 1) & a3;
  if (a2 < 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x187453AACLL);
    *(_QWORD *)(((v6 + v3) & 0xFFFFFFFFFFFFFFF8) + 8) = a1;
LABEL_6:
    JUMPOUT(0x187453AB8);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v3);
}

uint64_t type metadata accessor for SearchScopeToolbarContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchScopeToolbarContent);
}

uint64_t associated type witness table accessor for ToolbarContent.Body : ToolbarContent in SearchScopeToolbarContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static SearchToolbarItem._makeToolbar(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 64);
  _GraphInputs.environment.getter();
  PreferencesOutputs.init()();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<SearchToolbarItem>, (uint64_t (*)(uint64_t))type metadata accessor for SearchToolbarItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v3 + 1;
  return result;
}

uint64_t implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

double SearchToolbarItem.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  double result;
  uint64_t v5;
  char v6;
  __int128 v7;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *(_QWORD *)&v7 = *Value;
  *((_QWORD *)&v7 + 1) = v3;
  v5 = *Value;
  swift_retain();
  swift_retain();
  EnvironmentValues.horizontalSizeClass.getter();
  if (v6 != 2 && (v6 & 1) != 0)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    swift_retain();
    if (v3)
    {
      swift_retain_n();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      swift_retain();
      swift_retain();
      PropertyList.subscript.getter();
      swift_release();
    }
    swift_release_n();
    if ((v5 & 0xFE) == 2)
    {
      EnvironmentValues.dynamicTypeSize.getter();
      EnvironmentValues.dynamicTypeSize.setter();
    }
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  result = *(double *)&v7;
  *a1 = v7;
  return result;
}

double protocol witness for Rule.value.getter in conformance SearchToolbarItem.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return SearchToolbarItem.ChildEnvironment.value.getter(a1);
}

void (*SearchToolbarItem.SearchTransform.value.getter(unint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char **WeakValue;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  _BYTE v52[88];
  _BYTE v53[88];
  _BYTE v54[96];

  v49 = HIDWORD(a1);
  v1 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (unsigned __int8 *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SearchFieldConfiguration(0);
  v46 = *(_QWORD *)(v5 - 8);
  v6 = *(char **)(v46 + 64);
  MEMORY[0x1E0C80A78](v5, v7);
  v8 = (char *)&v45 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v45 - v11;
  v13 = (int *)type metadata accessor for SearchToolbarItem();
  Value = AGGraphGetValue();
  outlined init with copy of SearchFieldConfiguration(Value, (uint64_t)v12);
  v15 = AGGraphGetValue();
  v16 = v13[6];
  v48 = *(unsigned __int8 *)(v15 + v13[5]);
  outlined init with take of TableCellFormula(v15 + v16, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  v17 = AGGraphGetValue();
  outlined init with take of TableCellFormula(v17 + v13[7], (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  v18 = AGGraphGetValue();
  v19 = v13[9];
  v47 = *(unsigned __int8 *)(v18 + v13[8]);
  outlined init with take of TableCellFormula(v18 + v19, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  outlined retain of BoundInputsView?((uint64_t)v54);
  outlined retain of BoundInputsView?((uint64_t)v53);
  outlined retain of BoundInputsView?((uint64_t)v52);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v21 = v20;
  MEMORY[0x18D75B9C8]();
  outlined destroy of SearchFieldState((uint64_t)v4);
  v22 = &v12[*(int *)(v5 + 24)];
  v23 = v22[8];
  if ((v23 & 1) == 0)
  {
    v24 = *(_QWORD *)v22;
    if (!AGGraphGetWeakValue())
      outlined consume of PlatformItemCollection?(v24, v23);
  }
  MEMORY[0x18D75B9C8](v21);
  v25 = *v4;
  outlined destroy of SearchFieldState((uint64_t)v4);
  if (v25 != 2)
  {
    if (*(_QWORD *)(AGGraphGetValue() + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      v45 = v6;
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      swift_retain_n();
      swift_retain_n();
      v6 = v45;
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      v45 = (char *)&v45 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      swift_retain_n();
      v8 = v45;
      PropertyList.subscript.getter();
    }
    swift_release();
    v26 = v50;
    v27 = v51;
    swift_release();
    swift_release();
    if (v27 != 255 && ((v27 & 1) != 0 || !AGGraphGetWeakValue()))
      outlined consume of PlatformItemCollection?(v26, v27);
  }
  v28 = (uint64_t *)AGGraphGetValue();
  v29 = *v28;
  v30 = v22[8];
  v49 = v28[1];
  if (v30 == 255)
  {
    swift_retain();
    swift_retain();
    v45 = 0;
    v35 = v46;
  }
  else
  {
    v31 = *(_QWORD *)v22;
    if ((v30 & 1) != 0)
    {
      swift_retain();
      v34 = v29;
      swift_retain();
      v33 = (char *)v31;
      outlined copy of PlatformItemCollection?(v31, v30);
    }
    else
    {
      WeakValue = (char **)AGGraphGetWeakValue();
      if (WeakValue)
      {
        v33 = *WeakValue;
        swift_retain();
        swift_bridgeObjectRetain();
        v34 = v29;
        swift_retain();
        outlined consume of PlatformItemCollection?(v31, v30);
      }
      else
      {
        swift_retain();
        v34 = v29;
        swift_retain();
        outlined consume of PlatformItemCollection?(v31, v30);
        v33 = (char *)MEMORY[0x1E0DEE9D8];
      }
    }
    v35 = v46;
    v45 = v33;
    v29 = v34;
  }
  outlined init with take of TableCellFormula((uint64_t)v12, (uint64_t)v8, type metadata accessor for SearchFieldConfiguration);
  v36 = (*(unsigned __int8 *)(v35 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v37 = (unint64_t)&v6[v36 + 7] & 0xFFFFFFFFFFFFFFF8;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 95) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject();
  *(_BYTE *)(v41 + 16) = v48;
  outlined init with take of TableCellFormula((uint64_t)v8, v41 + v36, type metadata accessor for SearchFieldConfiguration);
  *(_QWORD *)(v41 + v37) = v45;
  v42 = (_QWORD *)(v41 + v38);
  v43 = v49;
  *v42 = v29;
  v42[1] = v43;
  outlined init with take of TableCellFormula((uint64_t)v52, v41 + v39, (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  outlined init with take of TableCellFormula((uint64_t)v53, v41 + v40, (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  *(_BYTE *)(v41 + v40 + 88) = v47;
  outlined init with take of TableCellFormula((uint64_t)v54, v41 + ((v39 + 191) & 0xFFFFFFFFFFFFFFF8), (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
  return partial apply for closure #1 in SearchToolbarItem.SearchTransform.value.getter;
}

void closure #1 in SearchToolbarItem.SearchTransform.value.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;

  v54 = a7;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v43 - v19;
  v21 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    v52 = a8;
    v53 = a4;
    v49 = v23;
    v50 = a10;
    v48 = a9;
    outlined destroy of ToolbarStorage.SearchItem?(a1);
    v46 = v20;
    v47 = a3;
    outlined init with copy of Binding<SearchFieldState>(a3, (uint64_t)v20);
    v51 = a1;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
    swift_bridgeObjectRetain();
    v26 = a5;
    swift_retain_n();
    if (a6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
      swift_release();
      v44 = v55;
      v45 = v56;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchSuggestionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
      swift_release();
      v44 = v55;
      v45 = v56;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchSuggestionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v27 = a6;
    v28 = v55;
    v29 = v56;
    v30 = v47 + *(int *)(type metadata accessor for SearchFieldConfiguration(0) + 32);
    v32 = *(_QWORD *)(v30 + 8);
    v43 = *(_QWORD *)v30;
    v31 = v43;
    v33 = *(_BYTE *)(v30 + 16);
    v47 = *(_QWORD *)(v30 + 24);
    v34 = v47;
    outlined init with take of Binding<SearchFieldState>((uint64_t)v46, (uint64_t)v25);
    *(_QWORD *)&v25[v21[5]] = v53;
    v35 = &v25[v21[6]];
    *(_QWORD *)v35 = v44;
    v35[8] = v45;
    v36 = &v25[v21[7]];
    *(_QWORD *)v36 = v28;
    v36[8] = v29;
    v37 = &v25[v21[8]];
    *(_QWORD *)v37 = v31;
    *((_QWORD *)v37 + 1) = v32;
    v37[16] = v33;
    *((_QWORD *)v37 + 3) = v34;
    v38 = &v25[v21[9]];
    *(_QWORD *)v38 = v26;
    *((_QWORD *)v38 + 1) = v27;
    v39 = v54;
    outlined init with take of TableCellFormula(v54, (uint64_t)&v25[v21[10]], (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
    v40 = v52;
    outlined init with take of TableCellFormula(v52, (uint64_t)&v25[v21[11]], (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
    v25[v21[12]] = v48;
    v41 = v50;
    outlined init with take of TableCellFormula(v50, (uint64_t)&v25[v21[13]], (uint64_t (*)(_QWORD))type metadata accessor for BoundInputsView?);
    v42 = v51;
    outlined init with take of TableCellFormula((uint64_t)v25, v51, type metadata accessor for ToolbarStorage.SearchItem);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v49 + 56))(v42, 0, 1, v21);
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v43, v32, v33);
    swift_bridgeObjectRetain();
    outlined retain of BoundInputsView?(v39);
    outlined retain of BoundInputsView?(v40);
    outlined retain of BoundInputsView?(v41);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance SearchToolbarItem.SearchTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  unint64_t *v1;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = SearchToolbarItem.SearchTransform.value.getter(*v1);
  v5 = v4;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchToolbarItem.ChildEnvironment, &unk_1E1AC6860);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolbarItem.ChildEnvironment and conformance SearchToolbarItem.ChildEnvironment);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)()
{
  return implicit closure #1 in static SearchToolbarItem._makeToolbar(content:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform;
  if (!lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchToolbarItem.SearchTransform, &unk_1E1AC67E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchToolbarItem.SearchTransform and conformance SearchToolbarItem.SearchTransform);
  }
  return result;
}

uint64_t outlined init with copy of SearchFieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for BoundInputsView?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for BoundInputsView?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
  }
}

uint64_t outlined retain of BoundInputsView?(uint64_t a1)
{
  outlined copy of BoundInputsView?(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32));
  return a1;
}

uint64_t outlined destroy of SearchFieldState(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SearchFieldState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187454E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for SearchFieldConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = v5 + v7 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v5 + *(int *)(v1 + 24);
  v11 = *(unsigned __int8 *)(v10 + 8);
  if (v11 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v10, v11 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(v5 + *(int *)(v1 + 32)), *(_QWORD *)(v5 + *(int *)(v1 + 32) + 8), *(_BYTE *)(v5 + *(int *)(v1 + 32) + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + v4))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  v12 = (v4 + 191) & 0xFFFFFFFFFFFFFFF8;
  v13 = v0 + ((v4 + 95) & 0xFFFFFFFFFFFFFFF8);
  if (*(_QWORD *)v13)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + v12))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in SearchToolbarItem.SearchTransform.value.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for SearchFieldConfiguration(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in SearchToolbarItem.SearchTransform.value.getter(a1, *(_BYTE *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8), v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8) + 88), v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 191) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t outlined destroy of ToolbarStorage.SearchItem?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Binding<SearchFieldState>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFieldState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187455184()
{
  swift_release();
  return swift_deallocObject();
}

void *type metadata accessor for SearchToolbarItem.SearchTransform()
{
  return &unk_1E1AC67E0;
}

void *type metadata accessor for SearchToolbarItem.ChildEnvironment()
{
  return &unk_1E1AC6860;
}

_UNKNOWN **sub_1874551C8()
{
  return &protocol witness table for TupleToolbarContent<A>;
}

uint64_t *MainMenuItemHost.init(_:environment:focusedValues:focusStore:)(uint64_t a1, unint64_t *a2, unint64_t *a3, int *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;

  v5 = v4;
  v36 = a1;
  v43 = *v5;
  v35 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1E0C80A78](v35, v10);
  v41 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a2;
  v13 = a2[1];
  v14 = *a3;
  v15 = *((unsigned __int8 *)a3 + 8);
  v38 = *((_DWORD *)a3 + 3);
  v16 = v38;
  v39 = v15;
  v42 = *a4;
  LODWORD(a2) = v42;
  v17 = *((_QWORD *)a4 + 1);
  v44 = *((_QWORD *)a4 + 2);
  *((_WORD *)v5 + 12) = 0;
  *((_BYTE *)v5 + 26) = 0;
  v5[4] = 0;
  v5[5] = 0;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate + 8) = 0;
  swift_unknownObjectUnownedInit();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem, type metadata accessor for MainMenuItem);
  v18 = (unint64_t *)((char *)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_environment);
  *v18 = v12;
  v18[1] = v13;
  v19 = (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusedValues;
  v37 = v14;
  *(_QWORD *)v19 = v14;
  *(_BYTE *)(v19 + 8) = v15;
  *(_DWORD *)(v19 + 12) = v16;
  v20 = (uint64_t)v5 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusStore;
  *(_DWORD *)v20 = (_DWORD)a2;
  v40 = v17;
  *(_QWORD *)(v20 + 8) = v17;
  *(_QWORD *)(v20 + 16) = v44;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v12;
  swift_retain();
  v22 = v13;
  v23 = swift_retain();
  MEMORY[0x18D75B908](v23);
  LOBYTE(v45) = 34;
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItemHost.RootView and conformance MainMenuItemHost.RootView, type metadata accessor for MainMenuItemHost.RootView, (uint64_t)&protocol conformance descriptor for MainMenuItemHost.RootView);
  v5[2] = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  v24 = swift_retain();
  v25 = specialized FocusViewGraph.init(graph:)(v24);
  v27 = v26;
  v29 = v28;
  LODWORD(v14) = v30;
  swift_release();
  v45 = v25;
  v46 = v27;
  v47 = v29;
  v48 = v14 & 0x101;
  v49 = BYTE2(v14) & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  v45 = 0;
  LOWORD(v46) = 0;
  ViewGraph.append<A>(feature:)();
  v31 = v36;
  v32 = v41;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v36, v41, type metadata accessor for MainMenuItem);
  ViewGraph.setRootView<A>(_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v32, type metadata accessor for MainMenuItemHost.RootView);
  v45 = v21;
  v46 = v22;
  GraphHost.setEnvironment(_:)();
  swift_release();
  swift_release();
  v45 = v37;
  LOBYTE(v46) = v39;
  HIDWORD(v46) = v38;
  ViewGraph.setFocusedValues(_:)();
  swift_release();
  LODWORD(v45) = v42;
  v46 = v40;
  v47 = v44;
  ViewGraph.setFocusStore(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v31, type metadata accessor for MainMenuItem);
  return v5;
}

BOOL closure #1 in MainMenuItemHost.requestUpdate(after:)()
{
  uint64_t Strong;

  Strong = swift_unknownObjectUnownedLoadStrong();
  if (Strong)
  {
    *(_BYTE *)(Strong + 72) = 1;
    MainMenuItemCoordinator.updateIfNeeded()();
    swift_unknownObjectRelease();
  }
  return GraphHost.updatePreferences()();
}

Swift::Void __swiftcall MainMenuItemHost.updateFocusedValues()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    swift_retain();
    v2 = ViewGraph.subscript.getter();
    if (v2
      && *(_DWORD *)(v2 + 4) != *MEMORY[0x1E0CFED28]
      && (AGGraphSetValue() & 1) != 0
      && (swift_beginAccess(), MEMORY[0x18D760234](v1 + 200)))
    {
      v3 = *(_QWORD *)(v1 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(ObjectType);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
}

Swift::Void __swiftcall MainMenuItemHost.updateFocusStore()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 16);
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = ViewGraph.subscript.getter();
    if (v2
      && *(_DWORD *)(v2 + 8) != *MEMORY[0x1E0CFED28]
      && (AGGraphSetValue() & 1) != 0
      && (swift_beginAccess(), MEMORY[0x18D760234](v1 + 200)))
    {
      v3 = *(_QWORD *)(v1 + 208);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(ObjectType);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t MainMenuItemHost.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem, type metadata accessor for MainMenuItem);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of unowned MainMenuItemHostDelegate?(v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MainMenuItemHost()
{
  return type metadata accessor for MainMenuItemHost(0);
}

uint64_t type metadata accessor for MainMenuItemHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItemHost);
}

uint64_t type metadata completion function for MainMenuItemHost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MainMenuItem(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for ViewRendererHost.updateRootView() in conformance MainMenuItemHost()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)v4, type metadata accessor for MainMenuItem);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItemHost.RootView and conformance MainMenuItemHost.RootView, type metadata accessor for MainMenuItemHost.RootView, (uint64_t)&protocol conformance descriptor for MainMenuItemHost.RootView);
  ViewGraph.setRootView<A>(_:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for MainMenuItemHost.RootView);
}

uint64_t protocol witness for ViewRendererHost.updateEnvironment() in conformance MainMenuItemHost()
{
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for ViewGraphDelegate.modifyViewInputs(_:) in conformance MainMenuItemHost(uint64_t a1)
{
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  *(_DWORD *)(a1 + 36) |= 1u;
  return _GraphInputs.pushStyleContext<A>(_:)();
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for ViewGraphDelegate.requestUpdate(after:) in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance MainMenuItemHost()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
  ViewRendererHost.graphDidChange()();
}

uint64_t base witness table accessor for GraphDelegate in MainMenuItemHost()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
}

uint64_t base witness table accessor for ViewGraphDelegate in MainMenuItemHost()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost, type metadata accessor for MainMenuItemHost, (uint64_t)&protocol conformance descriptor for MainMenuItemHost);
}

uint64_t type metadata accessor for MainMenuItemHost.RootView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for MainMenuItemHost.RootView);
}

BOOL partial apply for closure #1 in MainMenuItemHost.requestUpdate(after:)()
{
  return closure #1 in MainMenuItemHost.requestUpdate(after:)();
}

uint64_t closure #1 in MainMenuItemHost.RootView.body.getter(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  _QWORD *v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char *v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  char *v47;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  char v54;
  unint64_t v55;
  char v56;
  char *v57;
  _QWORD *v58;
  char v59;
  char v60;
  char *v61;
  uint64_t (*v62)(uint64_t);
  _QWORD *v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  _QWORD **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;

  v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v95 = (uint64_t)&v74 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v92 = (uint64_t)&v74 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v87 = (uint64_t)&v74 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v84 = (uint64_t)&v74 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v83 = (uint64_t)&v74 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v79 = (uint64_t)&v74 - v25;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)&v74 - v25, v26);
  v27 = *(_QWORD **)a1;
  v76 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v76)
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, type metadata accessor for MainMenuItemHost.RootView);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_75:
    v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
  v28 = 0;
  v29 = type metadata accessor for MainMenuItemHost.RootView;
  v75 = (_QWORD **)a1;
  while (1)
  {
    *(_QWORD *)a1 = v27;
    if (v28 >= v27[2])
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v90 = v28;
    v31 = type metadata accessor for PlatformItemList.Item();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v97 = v31;
    v98 = v33;
    v34 = *(_QWORD *)(v32 + 72);
    v35 = (char *)v27 + v33 + v34 * v90;
    v30 = v90;
    v35[*(int *)(v31 + 116)] = 1;
    if (*((_QWORD *)v35 + 77))
      break;
LABEL_5:
    v28 = v30 + 1;
    a1 = (unint64_t)v75;
    v27 = *v75;
    if (v28 == v76)
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, type metadata accessor for MainMenuItemHost.RootView);
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v79, v83, v29);
  v81 = v35;
  v36 = (_QWORD *)*((_QWORD *)v35 + 77);
  v77 = v36[2];
  if (!v77)
  {
LABEL_4:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v83, v29);
    v30 = v90;
    goto LABEL_5;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v81[77] = v36;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v72 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
    v81[77] = v72;
  }
  v38 = 0;
  while (1)
  {
    v85 = v38;
    a1 = (unint64_t)v81;
    v27 = (_QWORD *)v81[77];
    v40 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 616) = v27;
    if ((v40 & 1) == 0)
    {
      v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      v81[77] = v27;
    }
    v39 = v85;
    if (v85 >= v27[2])
      goto LABEL_73;
    v41 = (char *)v27 + v98 + v85 * v34;
    v41[*(int *)(v97 + 116)] = 1;
    if (*((_QWORD *)v41 + 77))
      break;
LABEL_13:
    v38 = v39 + 1;
    if (v38 == v77)
      goto LABEL_4;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v83, v84, v29);
  v82 = v41;
  v42 = (_QWORD *)*((_QWORD *)v41 + 77);
  v78 = v42[2];
  if (!v78)
  {
LABEL_12:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v84, v29);
    v39 = v85;
    goto LABEL_13;
  }
  v43 = swift_isUniquelyReferenced_nonNull_native();
  v82[77] = v42;
  if ((v43 & 1) == 0)
  {
    v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
    v82[77] = v71;
  }
  v44 = 0;
  while (1)
  {
    v86 = v44;
    a1 = (unint64_t)v82;
    v27 = (_QWORD *)v82[77];
    v46 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 616) = v27;
    if ((v46 & 1) == 0)
    {
      v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      v82[77] = v27;
    }
    v45 = v86;
    if (v86 >= v27[2])
      goto LABEL_74;
    v47 = (char *)v27 + v98 + v86 * v34;
    v47[*(int *)(v97 + 116)] = 1;
    if (*((_QWORD *)v47 + 77))
      break;
LABEL_23:
    v44 = v45 + 1;
    if (v44 == v78)
      goto LABEL_12;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v84, v87, v29);
  v88 = v47;
  v48 = (_QWORD *)*((_QWORD *)v47 + 77);
  v80 = v48[2];
  if (!v80)
  {
LABEL_22:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v87, v29);
    v45 = v86;
    goto LABEL_23;
  }
  v49 = swift_isUniquelyReferenced_nonNull_native();
  v88[77] = v48;
  if ((v49 & 1) == 0)
  {
    v70 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
    v88[77] = v70;
  }
  v50 = 0;
  while (1)
  {
    v89 = v50;
    a1 = (unint64_t)v88;
    v27 = (_QWORD *)v88[77];
    v52 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 616) = v27;
    if ((v52 & 1) == 0)
    {
      v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      v88[77] = v27;
    }
    v51 = v89;
    if (v89 >= v27[2])
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    a1 = (unint64_t)v27 + v98 + v89 * v34;
    *(_BYTE *)(a1 + *(int *)(v97 + 116)) = 1;
    if (*(_QWORD *)(a1 + 616))
      break;
LABEL_33:
    v50 = v51 + 1;
    if (v50 == v80)
      goto LABEL_22;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v87, v92, v29);
  v53 = *(_QWORD **)(a1 + 616);
  v93 = v53[2];
  if (!v93)
  {
LABEL_32:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v92, v29);
    v51 = v89;
    goto LABEL_33;
  }
  v54 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 616) = v53;
  if ((v54 & 1) == 0)
    *(_QWORD *)(a1 + 616) = specialized _ArrayBuffer._consumeAndCreateNew()(v53);
  v55 = 0;
  v91 = (_QWORD *)a1;
  while (1)
  {
    v27 = *(_QWORD **)(a1 + 616);
    v56 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 616) = v27;
    if ((v56 & 1) == 0)
    {
      v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      *(_QWORD *)(a1 + 616) = v27;
    }
    if (v55 >= v27[2])
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    v94 = v55;
    v57 = (char *)v27 + v98 + v55 * v34;
    v57[*(int *)(v97 + 116)] = 1;
    if (*((_QWORD *)v57 + 77))
      break;
LABEL_43:
    v55 = v94 + 1;
    if (v94 + 1 == v93)
      goto LABEL_32;
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v92, v95, v29);
  v58 = (_QWORD *)*((_QWORD *)v57 + 77);
  v96 = (_QWORD *)v58[2];
  if (!v96)
  {
LABEL_42:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v95, v29);
    a1 = (unint64_t)v91;
    goto LABEL_43;
  }
  v59 = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v57 + 77) = v58;
  if ((v59 & 1) == 0)
    *((_QWORD *)v57 + 77) = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
  a1 = 0;
  while (1)
  {
    v27 = (_QWORD *)*((_QWORD *)v57 + 77);
    v60 = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v57 + 77) = v27;
    if ((v60 & 1) == 0)
    {
      v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v27);
      *((_QWORD *)v57 + 77) = v27;
    }
    if (a1 >= v27[2])
    {
      __break(1u);
      goto LABEL_70;
    }
    v61 = (char *)v27 + v98 + a1 * v34;
    v61[*(int *)(v97 + 116)] = 1;
    if (*((_QWORD *)v61 + 77))
      break;
LABEL_53:
    if ((_QWORD *)++a1 == v96)
      goto LABEL_42;
  }
  v62 = v29;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v95, (uint64_t)v7, v29);
  v63 = (_QWORD *)*((_QWORD *)v61 + 77);
  v64 = v63[2];
  if (!v64)
  {
LABEL_52:
    v29 = v62;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, v62);
    goto LABEL_53;
  }
  v65 = swift_isUniquelyReferenced_nonNull_native();
  *((_QWORD *)v61 + 77) = v63;
  if ((v65 & 1) == 0)
    *((_QWORD *)v61 + 77) = specialized _ArrayBuffer._consumeAndCreateNew()(v63);
  v66 = 0;
  v67 = v98;
  while (1)
  {
    v68 = (_QWORD *)*((_QWORD *)v61 + 77);
    v69 = swift_isUniquelyReferenced_nonNull_native();
    *((_QWORD *)v61 + 77) = v68;
    if ((v69 & 1) == 0)
    {
      v68 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v68);
      *((_QWORD *)v61 + 77) = v68;
    }
    if (v66 >= v68[2])
      break;
    ++v66;
    MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)((uint64_t)v68 + v67);
    v67 += v34;
    if (v64 == v66)
      goto LABEL_52;
  }
  __break(1u);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v79, type metadata accessor for MainMenuItemHost.RootView);
}

uint64_t MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = type metadata accessor for PlatformItemList.Item();
  *(_BYTE *)(a1 + *(int *)(result + 116)) = 1;
  if (*(_QWORD *)(a1 + 616))
  {
    v9 = result;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v7, type metadata accessor for MainMenuItemHost.RootView);
    v10 = *(_QWORD **)(a1 + 616);
    v11 = v10[2];
    if (v11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_11:
        v10 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      v12 = 0;
      do
      {
        if (v12 >= v10[2])
        {
          __break(1u);
          goto LABEL_11;
        }
        v13 = v12 + 1;
        MainMenuItemHost.RootView.applyScaleDownMenuItem(_:)((char *)v10+ ((*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v12);
        v12 = v13;
      }
      while (v11 != v13);
      *(_QWORD *)(a1 + 616) = v10;
    }
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for MainMenuItemHost.RootView);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MainMenuItemHost.RootView()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MainMenuItem.Content();
  type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>(0, v0, v1, v2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItem.Content and conformance MainMenuItem.Content, (uint64_t (*)(uint64_t))type metadata accessor for MainMenuItem.Content, (uint64_t)&protocol conformance descriptor for MainMenuItem.Content);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance MainMenuItemHost.RootView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = type metadata accessor for MainMenuItem.Content();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MainMenuItem.Content);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MainMenuItemHost.RootView);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  outlined init with take of MainMenuItemHost.RootView((uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, a3, (uint64_t (*)(_QWORD))type metadata accessor for MainMenuItem.Content);
  type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  v14 = (uint64_t (**)(unint64_t))(a3 + *(int *)(v13 + 36));
  *v14 = partial apply for closure #1 in MainMenuItemHost.RootView.body.getter;
  v14[1] = (uint64_t (*)(unint64_t))v12;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for MainMenuItem.Content);
}

uint64_t outlined destroy of unowned MainMenuItemHostDelegate?(uint64_t a1)
{
  swift_unknownObjectUnownedDestroy();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MainMenuItemHost.RootView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for MainMenuItem(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(v4 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 10, v11))
    {
      v14 = type metadata accessor for MainMenuItem.Identifier(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 10, v11);
    }
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MainMenuItemHost.RootView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 10, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MainMenuItemHost.RootView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = type metadata accessor for MainMenuItem(0);
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 10, v9))
  {
    v12 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(v5 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MainMenuItemHost.RootView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for MainMenuItem(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 10, v8);
  v12 = v10(v7, 10, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 10, v8);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for MainMenuItemHost.RootView(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = type metadata accessor for MainMenuItem(0);
  v5 = *(int *)(v4 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 10, v8))
  {
    v10 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 10, v8);
  }
  *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
  return a1;
}

_QWORD *assignWithTake for MainMenuItemHost.RootView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for MainMenuItem(0);
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 10, v9);
  v13 = v11(v8, 10, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
LABEL_7:
  *(_QWORD *)((char *)a1 + *(int *)(v5 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MainMenuItemHost.RootView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187456D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem.Content();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MainMenuItemHost.RootView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187456DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItem.Content();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for MainMenuItemHost.RootView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MainMenuItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MainMenuItemHost.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187456E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainMenuItemHost.RootView(0) - 8) + 80);
  swift_bridgeObjectRelease();
  v2 = v0 + ((v1 + 16) & ~v1) + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 10, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of MainMenuItemHost.RootView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MainMenuItemHost.RootView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MainMenuItemHost.RootView.body.getter(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MainMenuItemHost.RootView(0) - 8) + 80);
  return closure #1 in MainMenuItemHost.RootView.body.getter(a1, v1 + ((v3 + 16) & ~v3));
}

void type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for MainMenuItem.Content();
    type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>(255, v0, v1, v2);
    v3 = type metadata accessor for ModifiedContent();
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
  }
}

void type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>)
  {
    v4 = type metadata accessor for PlatformItemListTransformModifier(0, (uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)&protocol witness table for AllPlatformItemListFlags, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MainMenuItem.Content and conformance MainMenuItem.Content, (uint64_t (*)(uint64_t))type metadata accessor for MainMenuItem.Content, (uint64_t)&protocol conformance descriptor for MainMenuItem.Content);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MainMenuItem.Content, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ViewInputsBinding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187457180 + 4 * byte_187C32360[v10]))();
  }
}

void storeEnumTagSinglePayload for ViewInputsBinding(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1874572F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187457370);
}

void sub_187457300(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187457308);
  JUMPOUT(0x187457370);
}

void sub_187457348()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187457370);
}

void sub_187457350()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187457370);
}

uint64_t sub_187457358(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187457370);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x18745736CLL);
    JUMPOUT(0x187457364);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void type metadata accessor for ViewInputsBinding()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t destroy for BoundInputsView(uint64_t a1)
{

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BoundInputsView(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v4 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BoundInputsView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BoundInputsView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BoundInputsView()
{
  return &type metadata for BoundInputsView;
}

void View.bindInputs<A>(transform:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  _QWORD v17[4];

  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))(v16, v7, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7, v16, a3);
  v17[0] = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  type metadata accessor for ViewInputsBinding();
}

uint64_t sub_18745764C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)(v3 + *(int *)(a1 + 52));
  *v4 = v2;
  v4[1] = v1;
  return swift_retain();
}

void static ViewInputsBinding._makeView(view:inputs:)()
{
  type metadata accessor for ViewInputsBinding();
}

void sub_187457714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64))
    closure #1 in static ViewInputsBinding._makeView(view:inputs:)();
  AGGraphCreateOffsetAttribute2();
  v5 = (id)AGSubgraphGetCurrent();
  if (v5)
  {
    v6 = v5;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    UniqueID.init()();
    v6;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v4 - 152) = v3;
    *(_QWORD *)(v4 - 144) = v1;
    *(_QWORD *)(v4 - 136) = v2;
    *(_QWORD *)(v4 - 128) = v0;
    type metadata accessor for ViewInputsBinding.Child();
  }
  __break(1u);
}

void closure #1 in static ViewInputsBinding._makeView(view:inputs:)()
{
  type metadata accessor for ViewInputsBinding();
}

uint64_t sub_187457930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v6[2] = a1;
  v7 = v1;
  v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v6, v1, MEMORY[0x1E0DEDCE8], v3, MEMORY[0x1E0DEDD18], v4);
  return v8;
}

uint64_t ViewInputsBinding.Child.value.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewInputsBinding<A, B>.Child, a1);
  return Rule.withObservation<A>(do:)();
}

void closure #1 in ViewInputsBinding.Child.value.getter()
{
  type metadata accessor for ViewInputsBinding.Child();
}

void sub_187457AA0()
{
  type metadata accessor for ViewInputsBinding();
}

uint64_t sub_187457AC0()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

void closure #1 in closure #1 in ViewInputsBinding.Child.value.getter()
{
  type metadata accessor for ViewInputsBinding();
}

void sub_187457B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for ViewFactory(0, v5, v4, a4);
  type metadata accessor for ViewInputsBinding.Child();
}

void sub_187457B88()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v5 = *(void **)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v6 = *(_DWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v9 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v11[0] = v1;
  v11[1] = &protocol witness table for ViewFactory<A>;
  v12 = v3;
  v13 = v8;
  v14 = v5;
  v15 = v4;
  v16 = v6;
  v17 = v7;
  v18 = *(_OWORD *)(v0 + 40);
  v19 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v10 = v5;
  v2(v11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewInputsBinding<A, B>.Child(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewInputsBinding<A, B>.Child, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance ViewInputsBinding<A, B>()
{
  static ViewInputsBinding._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewInputsBinding<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewInputsBinding<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewInputsBinding<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewInputsBinding<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ViewInputsBinding<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ViewInputsBinding<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t static ViewFactory.makeView(view:inputs:)()
{
  _GraphValue.init(_:)();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t protocol witness for static ViewFactoryProtocol.makeView(view:inputs:) in conformance ViewFactory<A>()
{
  return static ViewFactory.makeView(view:inputs:)();
}

uint64_t static BoundInputsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  id v21;
  int v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  id v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v7 = *((_DWORD *)a2 + 6);
  v6 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v11 = a2[5];
  v10 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  v13 = *((_DWORD *)a2 + 15);
  v14 = *((_DWORD *)a2 + 16);
  v15 = *((_DWORD *)a2 + 17);
  v17 = *((_DWORD *)a2 + 18);
  v16 = *((_DWORD *)a2 + 19);
  v18 = *((_DWORD *)a2 + 20);
  v19 = *a2;
  v38 = *a2;
  v31 = v11;
  v32 = v5;
  v40 = v5;
  LODWORD(v39) = v4;
  v41 = __PAIR64__(v6, v7);
  v42 = v8;
  v44 = v11;
  v45 = v10;
  v33 = v10;
  v43 = v9;
  v28 = v13;
  v29 = v12;
  v46 = __PAIR64__(v13, v12);
  v26 = v15;
  v27 = v14;
  v47 = v14;
  v48 = v15;
  v24 = v16;
  v25 = v17;
  v49 = v17;
  v50 = v16;
  v30 = v18;
  v51 = v18;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v38) = v3;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<BoundInputsView>, (uint64_t)&type metadata for BoundInputsView, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v20 = _GraphValue.value.getter();
  v21 = (id)AGSubgraphGetCurrent();
  if (!v21)
    __break(1u);
  v22 = *MEMORY[0x1E0CFED28];
  v39 = v19;
  LODWORD(v38) = v20;
  LODWORD(v40) = v4;
  v41 = v32;
  v42 = v7;
  v43 = v6;
  v44 = __PAIR64__(v9, v8);
  v45 = v31;
  v46 = v33;
  v47 = v29;
  v48 = v28;
  v49 = v27;
  v50 = v26;
  v51 = v25;
  v52 = v24;
  v54 = v35;
  v53 = v30;
  v55 = v36;
  v56 = v37;
  v57 = v21;
  v58 = 0;
  v59 = 1;
  v60 = 0;
  v61 = v22;
  v62 = 0;
  v63 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of BoundInputsView.Info((uint64_t)&v38);
  result = _ViewOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a3 = v35;
  *(_DWORD *)(a3 + 8) = v36;
  *(_DWORD *)(a3 + 12) = v37;
  return result;
}

void BoundInputsView.Info.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  int CurrentAttribute;
  int v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v1 = v0;
  if ((*(_BYTE *)(v0 + 128) & 1) != 0 || *(_QWORD *)(v0 + 120) != *(_QWORD *)(AGGraphGetValue() + 24))
  {
    BoundInputsView.Info.eraseContent()();
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(AGGraphGetValue() + 24);
    *(_BYTE *)(v0 + 128) = 0;
    AGGraphGetValue();
    if (AGSubgraphIsValid())
    {
      v2 = *(void **)(v0 + 112);
      v3 = (id)AGSubgraphGetGraph();
      v4 = (void *)AGSubgraphCreate();

      AGSubgraphAddChild();
      v5 = *(void **)(AGGraphGetValue() + 32);
      if (v5 != v2)
      {
        v6 = v5;
        AGSubgraphRef.addSecondaryChild(_:)();

      }
      AGGraphClearUpdate();
      v7 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      closure #1 in BoundInputsView.Info.updateValue()(v1);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      v8 = *(void **)(v1 + 136);
      v20 = v4;

      *(_QWORD *)(v1 + 136) = v4;
      *(_DWORD *)(v1 + 144) = *(_DWORD *)(AGGraphGetValue() + 16);
      AGGraphGetValue();
      v9 = (id)AGSubgraphGetGraph();
      v10 = (id)AGSubgraphGetGraph();

      if (v9 == v10)
      {

      }
      else
      {
        CurrentAttribute = AGGraphGetCurrentAttribute();
        if (CurrentAttribute == *MEMORY[0x1E0CFED28])
        {
          __break(1u);
        }
        else
        {
          v12 = CurrentAttribute;
          v13 = *(void **)(AGGraphGetValue() + 32);
          v14 = swift_allocObject();
          *(_QWORD *)(v14 + 16) = v2;
          *(_DWORD *)(v14 + 24) = v12;
          v15 = v2;
          v16 = v13;
          v17 = AGSubgraphAddObserver();

          swift_release();
          v18 = *(void **)(AGGraphGetValue() + 32);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          v19 = v18;
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          *(_QWORD *)(v1 + 152) = v19;
          *(_QWORD *)(v1 + 160) = v17;
        }
      }
    }
  }
}

void BoundInputsView.Info.eraseContent()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  int v5;

  v1 = *(void **)(v0 + 136);
  if (v1)
  {
    v2 = v0;
    *(_QWORD *)(v0 + 136) = 0;
    _ViewOutputs.detachIndirectOutputs()();
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    AGSubgraphInvalidate();
    v4 = (_QWORD *)(v0 + 152);
    v3 = *(void **)(v0 + 152);
    if (v3)
    {
      AGSubgraphRemoveObserver();

      *v4 = 0;
      *(_QWORD *)(v2 + 160) = 0;
    }
    v5 = *MEMORY[0x1E0CFED28];

    *(_DWORD *)(v2 + 144) = v5;
  }
}

uint64_t closure #1 in BoundInputsView.Info.updateValue()(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Value;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(a1 + 88);
  v35 = *(_QWORD *)(a1 + 8);
  v36 = v2;
  v38 = *(_OWORD *)(a1 + 32);
  v39 = v23;
  v40 = v24;
  v41 = *(_OWORD *)(a1 + 64);
  v42 = *(_QWORD *)(a1 + 80);
  v43 = v4;
  swift_beginAccess();
  v5 = *(_DWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v21 = *(_OWORD *)(v3 + 48);
  v22 = *(_OWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(v3 + 72);
  v9 = *(_BYTE *)(v3 + 80);
  v10 = *(_BYTE *)(v3 + 81);
  v11 = *(_QWORD *)(v3 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = v5;
  *(_QWORD *)(v12 + 24) = v6;
  *(_OWORD *)(v12 + 32) = v22;
  *(_OWORD *)(v12 + 48) = v21;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v7;
  *(_BYTE *)(v12 + 80) = v9;
  *(_BYTE *)(v12 + 81) = v10;
  *(_QWORD *)(v12 + 88) = v11;
  swift_retain();
  v37 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Value = AGGraphGetValue();
  v14 = *(_DWORD *)(Value + 48);
  v15 = *(_QWORD *)(Value + 56);
  v16 = *(_QWORD *)(Value + 80);
  v25 = *(_QWORD *)(Value + 40);
  LODWORD(v26) = v14;
  v27 = v15;
  v28 = *(_OWORD *)(Value + 64);
  v29 = v16;
  _GraphInputs.merge(_:ignoringPhase:)();
  v17 = AGGraphGetValue();
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(unsigned int *)(v17 + 16);
  v25 = v35;
  LODWORD(v26) = v36;
  v27 = v12;
  v28 = v38;
  v29 = v39;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v18 + 8))(&v34, v19, &v25);
  v25 = *(_QWORD *)(a1 + 96);
  v26 = *(_QWORD *)(a1 + 104);
  _ViewOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void closure #2 in BoundInputsView.Info.updateValue()()
{
  uint64_t v0;
  void *v1;

  if (AGSubgraphIsValid())
  {
    AGGraphGetAttributeInfo();
    v1 = *(void **)(v0 + 152);
    *(_QWORD *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = 0;

    BoundInputsView.Info.eraseContent()();
  }
}

void protocol witness for ObservedAttribute.destroy() in conformance BoundInputsView.Info()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);
  if (v1)
  {
    AGSubgraphRemoveObserver();

    *(_QWORD *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = 0;
  }
  *(_DWORD *)(v0 + 144) = *MEMORY[0x1E0CFED28];
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance BoundInputsView.Info(uint64_t a1)
{
  void *v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 152);
  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    AGSubgraphRemoveObserver();

    *v3 = 0;
    v3[1] = 0;
  }
  *(_DWORD *)(a1 + 144) = *MEMORY[0x1E0CFED28];
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance BoundInputsView.Info()
{
  lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info();
  return static AsyncAttribute.flags.getter();
}

void protocol witness for View.body.getter in conformance BoundInputsView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_UNKNOWN **base witness table accessor for View in BoundInputsView()
{
  return &protocol witness table for BoundInputsView;
}

_UNKNOWN **base witness table accessor for View in ViewInputsBinding<A, B>()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

void type metadata accessor for ViewInputsBinding.Child()
{
  JUMPOUT(0x18D75FF28);
}

unint64_t lazy protocol witness table accessor for type BoundInputsView.Info and conformance BoundInputsView.Info()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info;
  if (!lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BoundInputsView.Info, &unk_1E1ABA930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info;
  if (!lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BoundInputsView.Info, &unk_1E1ABA930);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BoundInputsView.Info and conformance BoundInputsView.Info);
  }
  return result;
}

uint64_t outlined release of BoundInputsView.Info(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 136);
  v3 = *(void **)(a1 + 152);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return a1;
}

uint64_t sub_18745890C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in BoundInputsView.Info.updateValue()()
{
  closure #2 in BoundInputsView.Info.updateValue()();
}

void destroy for BoundInputsView.Info(id *a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v5 = *(void **)(a2 + 112);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = v4;
  v6 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v6;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v8 = *(void **)(a2 + 152);
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 160) = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v5;
  v10 = v6;
  v11 = v8;
  return a1;
}

uint64_t assignWithCopy for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  v4 = *(void **)(a2 + 112);
  v5 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v7;
  v8 = *(void **)(a1 + 136);
  v9 = *(void **)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v9;
  v10 = v9;

  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v11 = *(void **)(a2 + 152);
  v12 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v11;
  v13 = v11;

  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for BoundInputsView.Info(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v5 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v6 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);

  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return a1;
}

void *type metadata accessor for BoundInputsView.Info()
{
  return &unk_1E1ABA930;
}

uint64_t destroy for ViewInputsBinding.Child(uint64_t a1)
{

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ViewInputsBinding.Child(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewInputsBinding.Child(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewInputsBinding.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in ViewInputsBinding<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in ViewInputsBinding.Child.value.getter()
{
  closure #1 in ViewInputsBinding.Child.value.getter();
}

void partial apply for closure #1 in closure #1 in ViewInputsBinding.Child.value.getter()
{
  closure #1 in closure #1 in ViewInputsBinding.Child.value.getter();
}

uint64_t type metadata accessor for ViewFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewFactory);
}

uint64_t LimitedAvailabilityWidget.configuration.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityWidget.configuration.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void LimitedAvailabilityWidget.init()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityWidget.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return LimitedAvailabilityConfiguration.init<A>(_:)((uint64_t)v10, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
}

uint64_t LimitedAvailabilityConfiguration.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  type metadata accessor for LimitedAvailabilityConfigurationStorage(0, a2, a3, a4);
  v5 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 96) - 8) + 32))(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112), a1);
  return v5;
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityConfigurationStorage);
}

uint64_t LimitedAvailabilityWidget.body.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain();
}

void protocol witness for Widget.init() in conformance LimitedAvailabilityWidget()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for Widget.body.getter in conformance LimitedAvailabilityWidget@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t (*LimitedAvailabilityConfiguration.storage.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static LimitedAvailabilityConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(uint64_t a1@<X8>)
{
  id v1;
  void *v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  v1 = (id)AGSubgraphGetCurrent();
  if (!v1)
    __break(1u);
  v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  result = PreferencesOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = (id)AGSubgraphGetGraph();
    v2 = (void *)AGSubgraphCreate();

    *(_QWORD *)(v0 + 96) = v2;
    v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  v6 = *(_DWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v18 = *(_OWORD *)(v2 + 48);
  v19 = *(_OWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v11 = *(_BYTE *)(v2 + 81);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(_QWORD *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(_QWORD *)(v13 + 64) = v8;
  *(_QWORD *)(v13 + 72) = v9;
  *(_BYTE *)(v13 + 80) = v10;
  *(_BYTE *)(v13 + 81) = v11;
  *(_QWORD *)(v13 + 88) = v12;
  swift_retain();
  v14 = *(_QWORD *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  v26 = v20;
  v27 = v22;
  v28 = v13;
  v29 = v4;
  v30 = v5;
  v31 = v21;
  v32 = v3;
  v33 = v23;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v26 = v14;
  v27 = v8;
  v24 = v34;
  v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void LimitedAvailabilityConfigurationBase.makeWidgetConfiguration(widget:inputs:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LimitedAvailabilityConfigurationBase.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LimitedAvailabilityConfigurationBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityConfigurationStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityConfigurationStorage(0, a1, a2, v6);
  v7 = swift_dynamicCastClassUnconditional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)v7 + 112), a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityConfigurationStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityConfigurationStorage.Child.value.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t LimitedAvailabilityConfigurationStorage.makeWidgetConfiguration(widget:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  _BYTE v24[4];

  v4 = *v2;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = *(_QWORD *)(*v2 + 96);
  LODWORD(v17) = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityConfiguration, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v16 = *(_OWORD *)(a2 + 5);
  v10 = a2[3];
  v11 = a2[4];
  _GraphValue.value.getter();
  v12 = *(_QWORD *)(v4 + 104);
  v14 = type metadata accessor for LimitedAvailabilityConfigurationStorage.Child(0, v9, v12, v13);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityConfigurationStorage<A>.Child, v14);
  _GraphValue.init<A>(_:)();
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v10;
  v21 = v11;
  v22 = v16;
  v23 = v8;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v12 + 32))(v24, &v17, v9, v12);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LimitedAvailabilityConfiguration.IndirectOutputs, &unk_1E1B17868);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs);
  }
  return result;
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in LimitedAvailabilityWidget()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LimitedAvailabilityWidget()
{
  return &type metadata for LimitedAvailabilityWidget;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityConfiguration()
{
  return &type metadata for LimitedAvailabilityConfiguration;
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for LimitedAvailabilityConfigurationBase()
{
  return swift_lookUpClassMethod();
}

_UNKNOWN **sub_187459A68()
{
  return &protocol witness table for LimitedAvailabilityConfiguration;
}

void *type metadata accessor for LimitedAvailabilityConfiguration.IndirectOutputs()
{
  return &unk_1E1B17868;
}

uint64_t type metadata accessor for LimitedAvailabilityConfigurationStorage.Child(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LimitedAvailabilityConfigurationStorage.Child);
}

void base witness table accessor for _AttributeBody in LimitedAvailabilityConfigurationStorage<A>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t View.allowsGaugeResizing(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.allowsGaugeResizing.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.allowsGaugeResizing : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsGaugeResizing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187459C50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsGaugeResizing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.allowsGaugeResizing : EnvironmentValues()
{
  return EnvironmentValues.allowsGaugeResizing.setter();
}

uint64_t sub_187459CB0()
{
  return EnvironmentValues.allowsGaugeResizing.setter();
}

uint64_t sub_187459CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t EnvironmentValues.allowsGaugeResizing.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsGaugeResizingKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsGaugeResizingKey>);
  }
}

void *type metadata accessor for AllowsGaugeResizingKey()
{
  return &unk_1E1ADAD58;
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  _QWORD v6[4];

  v6[0] = a1;
  v6[1] = 0;
  if (a1)
    v4 = 0;
  else
    v4 = 0x1FFFFFFFELL;
  v6[2] = v4;
  v6[3] = 0;
  TabContent.modifier<A>(_:)((uint64_t)v6, a2, (uint64_t)&unk_1E1AB5208, a3);
  return outlined consume of BadgeLabel?(a1, 0, v4);
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];

  v6 = a3 & 1 | 0x8000000000000000;
  if (a4)
    v7 = a1;
  else
    v7 = 0;
  if (a4)
    v8 = a2;
  else
    v8 = 0;
  v10[0] = v7;
  v10[1] = v8;
  if (!a4)
    v6 = 0x1FFFFFFFELL;
  v10[2] = v6;
  v10[3] = a4;
  return TabContent.modifier<A>(_:)((uint64_t)v10, a5, (uint64_t)&unk_1E1AB5208, a6);
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = Text.init(_:tableName:bundle:comment:)();
  v7 = v4;
  v8 = v5;
  v10 = v9 & 1;
  v11 = v10 | 0x8000000000000000;
  if (v6)
    v12 = v4;
  else
    v12 = 0;
  if (v6)
    v13 = v5;
  else
    v13 = 0;
  v15[0] = v12;
  v15[1] = v13;
  if (!v6)
    v11 = 0x1FFFFFFFELL;
  v15[2] = v11;
  v15[3] = v6;
  TabContent.modifier<A>(_:)((uint64_t)v15, a1, (uint64_t)&unk_1E1AB5208, a2);
  outlined consume of Text.Storage(v7, v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.badge<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];

  v5 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v8 = Text.init<A>(_:)();
  v11 = v8;
  v12 = v9;
  v14 = v13 & 1;
  v15 = v14 | 0x8000000000000000;
  if (v10)
    v16 = v8;
  else
    v16 = 0;
  if (v10)
    v17 = v9;
  else
    v17 = 0;
  v19[0] = v16;
  v19[1] = v17;
  if (!v10)
    v15 = 0x1FFFFFFFELL;
  v19[2] = v15;
  v19[3] = v10;
  TabContent.modifier<A>(_:)((uint64_t)v19, a2, (uint64_t)&unk_1E1AB5208, a3);
  outlined consume of Text.Storage(v11, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18745A140(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&unk_1E1AB5208, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

unint64_t lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier;
  if (!lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BadgeModifier, &unk_1E1AB5208);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier);
  }
  return result;
}

uint64_t sub_18745A1D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&unk_1E1AB5208, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

void *type metadata accessor for BadgeModifier()
{
  return &unk_1E1AB5208;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in BadgeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance BadgeModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of BadgeLabel?(v2, v3, v4);
}

uint64_t sub_18745A264()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type BadgedView<_ViewModifier_Content<BadgeModifier>> and conformance BadgedView<A>, (uint64_t (*)(uint64_t))type metadata accessor for BadgedView<_ViewModifier_Content<BadgeModifier>>, (uint64_t)&protocol conformance descriptor for BadgedView<A>);
}

void type metadata accessor for BadgedView<_ViewModifier_Content<BadgeModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for BadgedView<_ViewModifier_Content<BadgeModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<BadgeModifier>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<BadgeModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<BadgeModifier>, MEMORY[0x1E0CE5318]);
    v6 = type metadata accessor for BadgedView(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for BadgedView<_ViewModifier_Content<BadgeModifier>>);
  }
}

void type metadata accessor for _ViewModifier_Content<BadgeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<BadgeModifier>)
  {
    lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<BadgeModifier>);
  }
}

void type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v5();
}

uint64_t View.refreshable(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18D75B4AC](v4, a3, &type metadata for RefreshableModifier);
}

uint64_t key path setter for RefreshableModifier.action : RefreshableModifier(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t RefreshableModifier.ChildEnvironment.value.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *Value;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Value = (_QWORD *)AGGraphGetValue();
  v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  type metadata accessor for @Sendable ()();
  v4 = (uint64_t *)AGGraphGetValue();
  v6 = *v4;
  v5 = v4[1];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<RefreshAction.Key>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  swift_retain_n();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RefreshableModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RefreshableModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance RefreshableModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance RefreshScopeModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *a1 = result;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t RefreshAction.callAsFunction()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(*(int *)*v0 + *v0);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return v4();
}

_QWORD *initializeBufferWithCopyOfBuffer for RefreshAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for RefreshAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RefreshAction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

void closure #1 in UIScrollView.updateRefreshControl(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10[3];

  v7 = a1 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x18D760234](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10[0] = a2;
    v10[1] = a3;
    v10[2] = a4;
    UIScrollView._updateRefreshControl(_:)(v10);

  }
}

void UIScrollView._updateRefreshControl(_:)(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  objc_class *refreshed;
  char *v10;
  uint64_t *v11;
  id v12;
  id v13;
  objc_super v14;
  _QWORD v15[3];

  v2 = v1;
  v4 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v6 = objc_msgSend(v2, sel_refreshControl);
  if (v6)
  {

  }
  else if (v4)
  {
    refreshed = (objc_class *)type metadata accessor for UIKitRefreshControl();
    v10 = (char *)objc_allocWithZone(refreshed);
    *(_QWORD *)&v10[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask] = 0;
    v11 = (uint64_t *)&v10[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration];
    *v11 = v4;
    v11[1] = v3;
    v11[2] = v5;
    v14.receiver = v10;
    v14.super_class = refreshed;
    swift_retain_n();
    v12 = objc_msgSendSuper2(&v14, sel_init);
    objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v12, sel__swiftui_handleRefreshControl, 4096);
    objc_msgSend(v2, sel_setRefreshControl_, v12);

    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    return;
  }
  v7 = objc_msgSend(v2, sel_refreshControl);
  if (v7)
  {
    v13 = v7;
    if (v4)
    {
      type metadata accessor for UIKitRefreshControl();
      if (swift_dynamicCastClass())
      {
        v15[0] = v4;
        v15[1] = v3;
        v15[2] = v5;
        outlined copy of AppIntentExecutor?(v4);
        v8 = v13;
        UIKitRefreshControl.configuration.setter((uint64_t)v15);

        return;
      }
    }
    else
    {
      objc_msgSend(v2, sel_setRefreshControl_, 0);
    }

  }
}

uint64_t UIKitRefreshControl.configuration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isCancelled;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration + 16);
  *(_OWORD *)v3 = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 16) = v2;
  if (v2 == v4)
  {
    v5 = OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask;
    if (*(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
    {
      swift_retain();
      isCancelled = swift_task_isCancelled();
      swift_release();
      if ((isCancelled & 1) == 0)
      {
        if (*(_QWORD *)(v1 + v5))
        {
          v7 = swift_retain();
          MEMORY[0x18D75D204](v7, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
          swift_release();
        }
      }
    }
  }
  return swift_release();
}

id UIKitRefreshControl.__deallocating_deinit()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask])
  {
    v2 = swift_retain();
    MEMORY[0x18D75D204](v2, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[16];
  char *v13;
  __int128 v14;

  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v0;
  type metadata accessor for @Sendable ()();
  static Update.ensure<A>(_:)();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v14;
  v6 = OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask])
  {
    v7 = swift_retain();
    MEMORY[0x18D75D204](v7, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  static TaskPriority.userInitiated.getter();
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  v9[5] = v5;
  v9[6] = v0;
  v10 = v0;
  v11 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl(), (uint64_t)v9);
  outlined destroy of TaskPriority?((uint64_t)v4);
  *(_QWORD *)&v0[v6] = v11;
  swift_release();
}

uint64_t closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  *(_QWORD *)(v6 + 16) = a6;
  v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = v6;
  v7[1] = closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl();
  return v9();
}

uint64_t closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 32) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  swift_release();
  objc_msgSend(v1, sel_endRefreshing);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for UIKitRefreshControl()
{
  return objc_opt_self();
}

uint64_t sub_18745B07C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for RefreshableModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for RefreshableModifier()
{
  return &type metadata for RefreshableModifier;
}

ValueMetadata *type metadata accessor for RefreshAction.Key()
{
  return &type metadata for RefreshAction.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in RefreshableModifier()
{
  return &protocol witness table for RefreshableModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RefreshScopeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static RefreshableModifier._makeInputs(modifier:inputs:)()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<RefreshableModifier>, (uint64_t)&type metadata for RefreshableModifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for @Sendable ()();
  type metadata accessor for Focus<RefreshableModifier, @Sendable ()>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Focus<RefreshableModifier, @Sendable ()> and conformance Focus<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Focus<RefreshableModifier, @Sendable ()>, MEMORY[0x1E0CFECE0]);
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphInputs.environment.getter();
  UniqueID.init()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  return _GraphInputs.environment.setter();
}

uint64_t sub_18745B2BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  a2[1] = v5;
  return swift_retain();
}

unint64_t type metadata accessor for @Sendable ()()
{
  unint64_t result;

  result = lazy cache variable for type metadata for @Sendable ();
  if (!lazy cache variable for type metadata for @Sendable ())
  {
    result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for @Sendable ());
  }
  return result;
}

void type metadata accessor for Focus<RefreshableModifier, @Sendable ()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Focus<RefreshableModifier, @Sendable ()>)
  {
    type metadata accessor for @Sendable ()();
    v0 = type metadata accessor for Focus();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<RefreshableModifier, @Sendable ()>);
  }
}

unint64_t lazy protocol witness table accessor for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RefreshableModifier.ChildEnvironment, &unk_1E1ACF9F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RefreshableModifier.ChildEnvironment and conformance RefreshableModifier.ChildEnvironment);
  }
  return result;
}

uint64_t sub_18745B3F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitRefreshControl._swiftui_handleRefreshControl()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration);
  v5 = *v3;
  v4 = v3[1];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a1 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  a1[1] = v6;
  return swift_retain();
}

uint64_t sub_18745B480()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = *(int **)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v4[2] = v3;
  v7 = (uint64_t (*)(void))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  v4[3] = v5;
  *v5 = v4;
  v5[1] = closure #2 in UIKitRefreshControl._swiftui_handleRefreshControl();
  return v7();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TaskPriority?(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *type metadata accessor for RefreshableModifier.ChildEnvironment()
{
  return &unk_1E1ACF9F0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<RefreshScopeModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<RefreshAction?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<RefreshAction?>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RefreshScopeModifier>, _EnvironmentKeyWritingModifier<RefreshAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<RefreshScopeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<RefreshScopeModifier>)
  {
    lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<RefreshScopeModifier>);
  }
}

ValueMetadata *type metadata accessor for FormTextFieldLabelDisplayMode()
{
  return &type metadata for FormTextFieldLabelDisplayMode;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextFieldLabelDisplayModeModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in TextFieldLabelDisplayModeModifier<A>()
{
  return &protocol witness table for TextFieldLabelDisplayModeModifier<A>;
}

uint64_t specialized static TextFieldLabelDisplayModeModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  lazy protocol witness table accessor for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.TextFieldLabelDisplayModeKey, &unk_1E1AB4EA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.TextFieldLabelDisplayModeKey and conformance _GraphInputs.TextFieldLabelDisplayModeKey);
  }
  return result;
}

void *type metadata accessor for _GraphInputs.TextFieldLabelDisplayModeKey()
{
  return &unk_1E1AB4EA8;
}

uint64_t storeEnumTagSinglePayload for ResolvedTextFieldLabelDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_18745B7DC + 4 * byte_187C32B65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18745B810 + 4 * byte_187C32B60[v4]))();
}

uint64_t sub_18745B810(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18745B818(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x18745B820);
  return result;
}

uint64_t sub_18745B82C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x18745B834);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18745B838(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18745B840(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode;
  if (!lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedTextFieldLabelDisplayMode, &type metadata for ResolvedTextFieldLabelDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTextFieldLabelDisplayMode and conformance ResolvedTextFieldLabelDisplayMode);
  }
  return result;
}

void static ImmersiveSpaceContentBuilder.buildBlock<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_UNKNOWN **associated type witness table accessor for ImmersiveSpaceContent.Body : ImmersiveSpaceContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ImmersiveSpaceContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ImmersiveSpaceContentBuilder()
{
  return &type metadata for ImmersiveSpaceContentBuilder;
}

uint64_t dispatch thunk of PrimitiveImmersiveSpaceContent._makeView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ProminentDetailNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 81) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t associated type witness table accessor for NavigationSplitViewStyle.Body : View in ProminentDetailNavigationSplitViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for NavigationSplitViewStyle.makeBody(configuration:) in conformance ProminentDetailNavigationSplitViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a2 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a2 + 40) = v3;
  *(_DWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 72) = v7;
  *(_BYTE *)(a2 + 80) = v8;
  *(_BYTE *)(a2 + 81) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  return swift_retain();
}

ValueMetadata *type metadata accessor for ProminentDetailNavigationSplitViewStyle()
{
  return &type metadata for ProminentDetailNavigationSplitViewStyle;
}

ValueMetadata *type metadata accessor for SectionPickerStyle()
{
  return &type metadata for SectionPickerStyle;
}

void static SectionPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  type metadata accessor for PickerStyleConfiguration.Content(255, a3, a4, a4);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for SectionPicker(255, a3, a4, v7);
  v9[0] = &protocol witness table for PickerStyleConfiguration<A>.Content;
  v9[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v9);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPicker<A>, v8);
  type metadata accessor for GroupElementsOfContent();
}

void sub_18745BB00()
{
  int v0;
  uint64_t v1;

  type metadata accessor for Group();
  *(_DWORD *)(v1 - 140) = v0;
  type metadata accessor for _PickerValue();
}

uint64_t sub_18745BB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  type metadata accessor for _GraphValue();
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v14 = *(_OWORD *)(v1 + 56);
  v15 = *(_OWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 72);
  _GraphValue.value.getter();
  v12 = type metadata accessor for SectionPickerStyle.Body(0, v3, v2, v11);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPickerStyle.Body<A>, v12);
  _GraphValue.init<A>(_:)();
  v18 = v6;
  v19 = v7;
  v20 = v0;
  v21 = v8;
  v22 = v9;
  v23 = v15;
  v24 = v14;
  v25 = v10;
  v26 = v16;
  v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v5);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71C0], v4, &v17);
  return static MultiView._makeView(view:inputs:)();
}

void static SectionPickerStyle._makeViewList<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

void sub_18745BCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_UNKNOWN **a25,unint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  type metadata accessor for _GraphValue();
  *(_DWORD *)(v28 - 108) = _GraphValue.value.getter();
  type metadata accessor for PickerStyleConfiguration.Content(255, v27, v26, v29);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
  v30 = type metadata accessor for ModifiedContent();
  v32 = type metadata accessor for SectionPicker(255, v27, v26, v31);
  v33 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  a25 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  a26 = v33;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v30, &a25);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPicker<A>, v32);
  type metadata accessor for GroupElementsOfContent();
}

uint64_t sub_18745BD74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for Group();
  v5 = type metadata accessor for SectionPickerStyle.Body(0, v2, v1, v4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPickerStyle.Body<A>, v5);
  _GraphValue.init<A>(_:)();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, a1);
  return static Group<A>._makeViewList(view:inputs:)();
}

void SectionPickerStyle.Body.base.getter()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_18745BE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void SectionPickerStyle.Body.value.getter()
{
  type metadata accessor for _PickerValue();
}

void sub_18745BF10(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  SectionPickerStyle.Body.base.getter();
}

void sub_18745BF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1);
  v4 = type metadata accessor for PickerStyleConfiguration(0, v1, v0, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  type metadata accessor for PickerStyleConfiguration.Content(0, v1, v0, v5);
  v6 = lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle();
  View.sectionStyle<A, B>(_:in:)(v6, v7);
}

void sub_18745BFC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v0;
  *(_DWORD *)(v5 + 32) = v2;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for SectionPicker(0, v1, v0, v7);
  v9 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v9;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v4 - 112);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPicker<A>, v8);
  Group.init<A, B>(subviews:transform:)();
}

void closure #1 in SectionPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for PickerStyleConfiguration(0, a3, a4, a4);
  MEMORY[0x1E0C80A78](v4, v5);
  type metadata accessor for _PickerValue();
}

void sub_18745C114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1E0C80A78](a1, a2);
  v5 = type metadata accessor for SectionPicker(0, v3, v2, v4);
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  SectionPickerStyle.Body.base.getter();
}

uint64_t sub_18745C1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  __n128 v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v0, v7);
  outlined init with copy of SubviewsCollection(*(_QWORD *)(v10 - 152), v10 - 136);
  KeyPath = swift_getKeyPath();
  v12 = SectionPicker.init(labelsVisibility:configuration:children:)(KeyPath, 0, v4, v10 - 136, v2, v1, v9);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SectionPicker<A>, v5, v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, v5, v13);
  v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(v9, v5);
  static ViewBuilder.buildBlock<A>(_:)(v8, v5, *(_QWORD *)(v10 - 144));
  return ((uint64_t (*)(uint64_t, uint64_t))v14)(v8, v5);
}

__n128 SectionPicker.init(labelsVisibility:configuration:children:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __n128 result;

  *(_QWORD *)a7 = a1;
  *(_BYTE *)(a7 + 8) = a2 & 1;
  v12 = type metadata accessor for SectionPicker(0, a5, a6, a4);
  v13 = a7 + *(int *)(v12 + 36);
  v15 = type metadata accessor for PickerStyleConfiguration(0, a5, a6, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, a3, v15);
  v16 = a7 + *(int *)(v12 + 40);
  v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v16 = *(_OWORD *)a4;
  *(_OWORD *)(v16 + 16) = v17;
  result = *(__n128 *)(a4 + 32);
  *(__n128 *)(v16 + 32) = result;
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(a4 + 48);
  return result;
}

uint64_t SectionPicker.labelsVisibility.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  return v3;
}

double protocol witness for static Rule.initialValue.getter in conformance SectionPickerStyle.Body<A>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void protocol witness for Rule.value.getter in conformance SectionPickerStyle.Body<A>()
{
  SectionPickerStyle.Body.value.getter();
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle;
  if (!lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuPickerOptionSectionStyle, &type metadata for MenuPickerOptionSectionStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle);
  }
  return result;
}

uint64_t type metadata accessor for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SectionPicker);
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for SectionStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuPickerOptionSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for SectionPickerStyle.Body(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SectionPickerStyle.Body);
}

uint64_t type metadata completion function for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for PickerStyleConfiguration(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(_QWORD *, _QWORD *, uint64_t);
  void *v30;
  id v31;
  uint64_t v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ~(v6 | 7);
  v8 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || (((v6 | 7) + 9) & ~(v6 | 7)) + v9 + 63 > 0x18)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v12 + ((v6 + 16) & v7);
    swift_retain();
  }
  else
  {
    v13 = ~v6;
    v14 = *(_QWORD *)a2;
    v15 = *(_BYTE *)(a2 + 8);
    v33 = *(_QWORD *)(a3 + 16);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v15);
    *(_QWORD *)a1 = v14;
    *(_BYTE *)(a1 + 8) = v15;
    v16 = (a1 + 16) & v7;
    v17 = (a2 + 16) & v7;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v18 = (_QWORD *)((v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    v19 = (_QWORD *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    v20 = v6 + 8;
    v21 = ((unint64_t)v18 + v6 + 8) & ~v6;
    v22 = ((unint64_t)v19 + v20) & v13;
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v23(v21, v22, v33);
    v24 = ((v16 | 7) + v8) & 0xFFFFFFFFFFFFFFF8;
    v25 = ((v17 | 7) + v8) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
    v26 = (_QWORD *)((v16 | 7) + v9);
    v27 = (_QWORD *)((v17 | 7) + v9);
    v28 = v27[3];
    v26[3] = v28;
    v26[4] = v27[4];
    v29 = **(void (***)(_QWORD *, _QWORD *, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    v30 = (void *)v27[5];
    v26[5] = v30;
    v26[6] = v27[6];
    v31 = v30;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SectionPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  outlined consume of Environment<Bool>.Content(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + (v6 | 7) + 9) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  v8 = *(_QWORD *)(v5 + 64) + ((v6 + 16) & ~v6) + 7;
  swift_bridgeObjectRelease();
  v9 = v7 + (v8 & 0xFFFFFFFFFFFFFFF8);
  __swift_destroy_boxed_opaque_existential_1(v9 + 16);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  void *v29;
  id v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 | 7) + 9;
  v13 = (_QWORD *)((v11 + a2) & ~(v10 | 7));
  v12 = (_QWORD *)((v11 + a1) & ~(v10 | 7));
  *v12 = *v13;
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v16 = ((unint64_t)v14 + v10 + 8) & ~v10;
  v17 = ((unint64_t)v15 + v10 + 8) & ~v10;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v18(v16, v17, v8);
  v19 = *(_QWORD *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  v20 = ((unint64_t)v12 + v19) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v13 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 9;
  v23 = (char *)v12 + v22;
  v24 = (uint64_t)v12 + v22 + 7;
  v25 = (char *)v13 + v22;
  v26 = (uint64_t)v13 + v22 + 7;
  v27 = *(_QWORD *)((char *)v13 + v22 + 31);
  *(_QWORD *)(v23 + 31) = v27;
  *(_QWORD *)(v23 + 39) = *(_QWORD *)((char *)v13 + v22 + 39);
  v28 = **(void (***)(uint64_t, uint64_t, uint64_t))(v27 - 8);
  swift_bridgeObjectRetain();
  v28(v24, v26, v27);
  v29 = *(void **)(v25 + 47);
  *(_QWORD *)(v23 + 47) = v29;
  *(_QWORD *)(v23 + 55) = *(_QWORD *)(v25 + 55);
  v30 = v29;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 9;
  v14 = (_QWORD *)((v13 + a1) & ~(v12 | 7));
  v15 = (_QWORD *)((v13 + a2) & ~(v12 | 7));
  *v14 = *v15;
  swift_retain();
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  v22 = (char *)v14 + v21;
  v23 = (char *)v15 + v21;
  __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)v14 + v21 + 7), (_QWORD *)((char *)v15 + v21 + 7));
  v24 = *(void **)(v23 + 47);
  v25 = *(void **)(v22 + 47);
  *(_QWORD *)(v22 + 47) = v24;
  v26 = v24;

  *(_QWORD *)(v22 + 55) = *(_QWORD *)(v23 + 55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SectionPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 | 7) + 9;
  v7 = (_QWORD *)((v6 + a1) & ~(v5 | 7));
  v8 = (_QWORD *)((v6 + a2) & ~(v5 | 7));
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  v11 = *(_QWORD *)(v4 + 64) + ((v5 + 16) & ~v5) + 7;
  v12 = ((unint64_t)v7 + v11) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v8 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 9;
  v15 = (char *)v7 + v14;
  v16 = (char *)v8 + v14;
  v17 = *(_QWORD *)(v16 + 55);
  v18 = *(_OWORD *)(v16 + 39);
  v19 = *(_OWORD *)(v16 + 23);
  *(_OWORD *)(v15 + 7) = *(_OWORD *)(v16 + 7);
  *(_OWORD *)(v15 + 23) = v19;
  *(_OWORD *)(v15 + 39) = v18;
  *(_QWORD *)(v15 + 55) = v17;
  return a1;
}

uint64_t assignWithTake for SectionPicker(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  void *v26;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 9;
  v14 = (_QWORD *)((v13 + a1) & ~(v12 | 7));
  v15 = (_QWORD *)(((unint64_t)a2 + v13) & ~(v12 | 7));
  *v14 = *v15;
  swift_release();
  v16 = (_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v16 + v12 + 8) & ~v12, ((unint64_t)v17 + v12 + 8) & ~v12, v10);
  v18 = *(_QWORD *)(v11 + 64) + ((v12 + 16) & ~v12) + 7;
  v19 = ((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v15 + v18) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 9;
  v22 = (char *)v14 + v21;
  v23 = (char *)v15 + v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14 + v21 + 7);
  v24 = *(_OWORD *)(v23 + 7);
  v25 = *(_OWORD *)(v23 + 23);
  *(_QWORD *)(v22 + 39) = *(_QWORD *)(v23 + 39);
  *(_OWORD *)(v22 + 23) = v25;
  *(_OWORD *)(v22 + 7) = v24;
  v26 = *(void **)(v22 + 47);
  *(_QWORD *)(v22 + 47) = *(_QWORD *)(v23 + 47);

  *(_QWORD *)(v22 + 55) = *(_QWORD *)(v23 + 55);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionPicker(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = v7 | 7;
  if (v6 >= a2)
  {
    v13 = (unint64_t *)((((a1 + v8 + 9) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v13 + v7 + 8) & ~v7);
    }
    else
    {
      v14 = *v13;
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    if (((((v8 + 9) & ~v8) + ((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 72) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_18745CDF4 + 4 * byte_187C32F10[v11]))();
  }
}

void storeEnumTagSinglePayload for SectionPicker(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((v7 | 7) + 9) & ~(v7 | 7))
       + ((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == -72)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X15 }
  }
  if ((((v7 | 7) + 9) & ~(v7 | 7))
     + ((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != -72)
  {
    v11 = ~v6 + a2;
    bzero(a1, (((v7 | 7) + 9) & ~(v7 | 7)) + ((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 72);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_18745CFA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18745D024);
}

void sub_18745CFB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x18745CFB8);
  JUMPOUT(0x18745D024);
}

void sub_18745CFDC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18745D024);
}

void sub_18745CFE4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18745D024);
}

void sub_18745CFEC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x18745D020);
      JUMPOUT(0x18745D01CLL);
    }
    JUMPOUT(0x18745CFF8);
  }
  JUMPOUT(0x18745D024);
}

ValueMetadata *type metadata accessor for AllowSectionPickerLabels()
{
  return &type metadata for AllowSectionPickerLabels;
}

void SectionPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  ValueMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46[88];

  v6 = v4 + *(int *)(a1 + 36);
  v7 = v4;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v6 + *(int *)(type metadata accessor for PickerStyleConfiguration(0, v8, v9, a4) + 36));
  outlined init with copy of SubviewsCollection(v7 + *(int *)(a1 + 40), (uint64_t)&v40);
  PickerContentView.init(selection:items:)(v10, (uint64_t)&v40, (uint64_t)v46);
  KeyPath = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  swift_bridgeObjectRetain();
  ScaledMetric.init(wrappedValue:)();
  v12 = v40;
  v13 = v41;
  v14 = v42;
  v15 = v43;
  v25 = (ValueMetadata *)KeyPath;
  LOBYTE(v26) = 0;
  v27 = v23;
  LOBYTE(v28) = 0;
  v29 = v11;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v40;
  v35 = v41;
  v36 = v42;
  v37 = v43;
  v38 = v44;
  v39 = v45;
  v17 = type metadata accessor for PickerContentView(0, v8, v9, v16);
  v24 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v17);
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  View.toggleStyle<A>(_:)((uint64_t)&v25, v17, (uint64_t)&type metadata for CheckmarkToggleStyle, v24);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v23, 0);
  outlined consume of Environment<EdgeInsets>.Content(v11, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined consume of Environment<Bool>.Content(v14, v15);
  type metadata accessor for PickerStyleConfiguration.Label(255, v8, v9, v18);
  v19 = type metadata accessor for Optional();
  v20 = type metadata accessor for Optional();
  v21 = lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  v25 = &type metadata for AllowSectionPickerLabels;
  v26 = v19;
  v27 = v20;
  v28 = v21;
  type metadata accessor for StaticIf();
}

void sub_18745D280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,_UNKNOWN **a37,uint64_t a38,uint64_t a39,uint64_t a40,_UNKNOWN **a41)
{
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v44 = type metadata accessor for ModifiedContent();
  v45 = MEMORY[0x1E0CE7C38];
  v46 = type metadata accessor for Section(0, a1, v44, MEMORY[0x1E0CE7C38]);
  v47 = type metadata accessor for Section(0, v42, v44, v45);
  a41 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v48 = MEMORY[0x1E0CE83F8];
  v49 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v42, &a41);
  a40 = v49;
  v50 = MEMORY[0x18D75FFDC](v48, v41, &a40);
  a38 = v49;
  a39 = v50;
  v51 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &a38);
  a36 = a15;
  a37 = &protocol witness table for ToggleStyleModifier<A>;
  v52 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v44, &a36);
  a33 = v51;
  a34 = v52;
  v53 = MEMORY[0x1E0CE7C28];
  a35 = MEMORY[0x1E0CE7C28];
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v46, &a33);
  a30 = v49;
  a31 = v52;
  a32 = v53;
  v54 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v47, &a30);
  StaticIf<>.init<A>(in:then:else:)(v54, (void (*)(void))partial apply for closure #1 in SectionPicker.body.getter, (uint64_t)&a23, (uint64_t)partial apply for closure #2 in SectionPicker.body.getter, (uint64_t)&a17, v46, v47, MEMORY[0x1E0CE3238]);
}

uint64_t sub_18745D400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v2 - 168, v1);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v0 - 8) + 8))(&v4, v0);
}

void closure #1 in SectionPicker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for SectionPicker(0, a3, a4, a4);
  SectionPicker.styledMenuHeader.getter(v4, v5, v6, v7);
}

void sub_18745D490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PickerStyleConfiguration.Label(255, v5, v4, a4);
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  type metadata accessor for StaticIf();
}

uint64_t sub_18745D500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t);
  _QWORD v19[3];
  _QWORD v20[2];
  _QWORD v21[2];
  uint64_t v22;
  _UNKNOWN **v23;
  _BYTE v24[6];
  _BYTE v25[232];
  _BYTE v26[312];

  v10 = type metadata accessor for PickerContentView(255, v6, v5, a4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v11 = type metadata accessor for ModifiedContent();
  v23 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v12 = MEMORY[0x1E0CE83F8];
  v22 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v8, &v23);
  v21[0] = v22;
  v21[1] = MEMORY[0x18D75FFDC](v12, v7, &v22);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v21);
  v20[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v10);
  v20[1] = &protocol witness table for ToggleStyleModifier<A>;
  v14 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v20);
  Section<>.init(header:content:)((uint64_t)v24, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in SectionPicker.body.getter, a1, v11, (uint64_t)v25);
  v15 = type metadata accessor for Section(0, a1, v11, MEMORY[0x1E0CE7C38]);
  v19[0] = v13;
  v19[1] = v14;
  v19[2] = MEMORY[0x1E0CE7C28];
  v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v15, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25, v15, v16);
  v17 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
  v17(v25, v15);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v26, v15, v4);
  return ((uint64_t (*)(_BYTE *, uint64_t))v17)(v26, v15);
}

void SectionPicker.styledMenuHeader.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;

  type metadata accessor for PickerStyleConfiguration.Label(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v4 = type metadata accessor for Optional();
  v5 = type metadata accessor for Optional();
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  v8 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v6 = MEMORY[0x1E0CE83F8];
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v4, &v8);
  MEMORY[0x18D75FFDC](v6, v5, &v7);
  StaticIf<>.init(_:then:else:)((uint64_t)&type metadata for AllowSectionPickerLabels, (void (*)(void))partial apply for closure #1 in SectionPicker.styledMenuHeader.getter);
}

void sub_18745D794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v5 = *(_BYTE *)(v4 - 66);
  v6 = *(_BYTE *)(v4 - 65);
  *(_BYTE *)(v4 - 91) = *(_BYTE *)(v4 - 67);
  *(_BYTE *)(v4 - 90) = v5;
  *(_BYTE *)(v4 - 89) = v6;
  *(_QWORD *)(v4 - 128) = v3;
  *(_QWORD *)(v4 - 120) = v0;
  *(_QWORD *)(v4 - 112) = v1;
  *(_QWORD *)(v4 - 104) = v2;
  type metadata accessor for StaticIf();
}

uint64_t sub_18745D7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t v11;

  v10 = v3;
  v11 = v2;
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, &v10);
  static ViewBuilder.buildExpression<A>(_:)(v4 - 91, a1, v6);
  v7 = *(_BYTE *)(v4 - 127);
  v8 = *(_BYTE *)(v4 - 126);
  *(_BYTE *)(v4 - 67) = *(_BYTE *)(v4 - 128);
  *(_BYTE *)(v4 - 66) = v7;
  *(_BYTE *)(v4 - 65) = v8;
  return static ViewBuilder.buildBlock<A>(_:)(v4 - 67, a1, v1);
}

uint64_t closure #2 in SectionPicker.body.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t);
  _QWORD v18[3];
  _QWORD v19[2];
  _UNKNOWN **v20;
  char v21;
  _BYTE v22[232];
  _BYTE v23[232];

  v6 = type metadata accessor for SectionPicker(0, a1, a2, a2);
  SectionPicker.styledHeader.getter(v6, (uint64_t)v23);
  v21 = v23[0];
  type metadata accessor for PickerStyleConfiguration.Label(255, a1, a2, v7);
  v8 = type metadata accessor for Optional();
  v10 = type metadata accessor for PickerContentView(255, a1, a2, v9);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v11 = type metadata accessor for ModifiedContent();
  v20 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v8, &v20);
  v19[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v10);
  v19[1] = &protocol witness table for ToggleStyleModifier<A>;
  v13 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v19);
  Section<>.init(header:content:)((uint64_t)&v21, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in SectionPicker.body.getter, v8, v11, (uint64_t)v22);
  v14 = type metadata accessor for Section(0, v8, v11, MEMORY[0x1E0CE7C38]);
  v18[0] = v12;
  v18[1] = v13;
  v18[2] = MEMORY[0x1E0CE7C28];
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v14, v18);
  static ViewBuilder.buildExpression<A>(_:)(v22, v14, v15);
  v16 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v16(v22, v14);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v23, v14, a3);
  return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v23, v14);
}

uint64_t SectionPicker.styledHeader.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;
  _UNKNOWN **v17;
  char v18;
  char v19;
  char v20;

  if (SectionPicker.labelsVisibility.getter() == 2)
  {
    v15 = 1;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    type metadata accessor for PickerStyleConfiguration.Label(0, v5, v6, v4);
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v15, (uint64_t)&v16);
    v8 = v16;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v5);
    v10 = type metadata accessor for PickerStyleConfiguration.Label(0, v5, v6, v9);
    v11 = static ViewBuilder.buildExpression<A>(_:)(v10, v10, &protocol witness table for PickerStyleConfiguration<A>.Label);
    static ViewBuilder.buildBlock<A>(_:)(v11, v10, v12);
    v19 = 0;
    static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v19, (uint64_t)&v20);
    v8 = v20;
  }
  v18 = v8;
  type metadata accessor for PickerStyleConfiguration.Label(255, v5, v6, v7);
  v13 = type metadata accessor for Optional();
  v17 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v13, &v17);
  return static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v18, v13, a2);
}

uint64_t closure #1 in closure #1 in SectionPicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _BYTE v12[200];

  v7 = type metadata accessor for PickerContentView(255, a2, a3, a4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v8 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  v11[1] = &protocol witness table for ToggleStyleModifier<A>;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v11);
  static ViewBuilder.buildExpression<A>(_:)(a1, v8, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v12, v8, a5);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v12, v8);
}

uint64_t closure #1 in SectionPicker.styledMenuHeader.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  _UNKNOWN **v13;
  char v14;
  _BYTE v15[2];

  v7 = type metadata accessor for SectionPicker(0, a1, a2, a3);
  SectionPicker.styledHeader.getter(v7, (uint64_t)v15);
  v14 = v15[0];
  type metadata accessor for PickerStyleConfiguration.Label(255, a1, a2, v8);
  v9 = type metadata accessor for Optional();
  v13 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v9, &v13);
  static ViewBuilder.buildExpression<A>(_:)(&v14, v9, v10);
  v12 = v15[1];
  return static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v12, v9, a4);
}

uint64_t closure #2 in SectionPicker.styledMenuHeader.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v17;
  _UNKNOWN **v18;
  char v19;
  uint64_t v20;
  _UNKNOWN **v21;
  _UNKNOWN **v22;
  __int16 v23;
  char v24;

  if (SectionPicker.labelsVisibility.getter() == 1)
  {
    v7 = type metadata accessor for SectionPicker(0, a1, a2, v6);
    SectionPicker.styledHeader.getter(v7, (uint64_t)&v24);
    LOBYTE(v23) = v24;
    type metadata accessor for PickerStyleConfiguration.Label(255, a1, a2, v8);
    v9 = type metadata accessor for Optional();
    v18 = &protocol witness table for PickerStyleConfiguration<A>.Label;
    v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v9, &v18);
    static ViewBuilder.buildExpression<A>(_:)(&v23, v9, v10);
    v24 = v19;
    static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v24, v9, (uint64_t)&v17);
    v23 = v17;
  }
  else
  {
    v23 = 256;
    type metadata accessor for PickerStyleConfiguration.Label(255, a1, a2, v6);
    v11 = type metadata accessor for Optional();
    v22 = &protocol witness table for PickerStyleConfiguration<A>.Label;
    MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v11, &v22);
  }
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)&v23, (uint64_t)&v24);
  type metadata accessor for PickerStyleConfiguration.Label(255, a1, a2, v12);
  v13 = type metadata accessor for Optional();
  v14 = type metadata accessor for Optional();
  v21 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v15 = MEMORY[0x1E0CE83F8];
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v13, &v21);
  MEMORY[0x18D75FFDC](v15, v14, &v20);
  return static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v24, v14, a3);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AllowSectionPickerLabels()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AllowSectionPickerLabels()
{
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowSectionPickerLabels, &type metadata for AllowSectionPickerLabels);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowSectionPickerLabels, &type metadata for AllowSectionPickerLabels);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowSectionPickerLabels, &type metadata for AllowSectionPickerLabels);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowSectionPickerLabels, &type metadata for AllowSectionPickerLabels);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels;
  if (!lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowSectionPickerLabels, &type metadata for AllowSectionPickerLabels);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AllowSectionPickerLabels()
{
  return &protocol witness table for AllowSectionPickerLabels;
}

void base witness table accessor for _AttributeBody in SectionPickerStyle.Body<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for View.Body : View in SectionPicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle;
  if (!lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CheckmarkToggleStyle, &type metadata for CheckmarkToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle);
  }
  return result;
}

void partial apply for closure #1 in SectionPicker.body.getter()
{
  uint64_t *v0;

  closure #1 in SectionPicker.body.getter(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t partial apply for closure #2 in SectionPicker.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in SectionPicker.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #2 in SectionPicker.body.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in SectionPicker.body.getter(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t partial apply for closure #1 in SectionPicker.styledMenuHeader.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in SectionPicker.styledMenuHeader.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t partial apply for closure #2 in SectionPicker.styledMenuHeader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in SectionPicker.styledMenuHeader.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_18745E208()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in SectionPickerStyle.Body.value.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SectionPickerStyle.Body.value.getter(a1, *(unsigned int *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_18745E22C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v2, v3);
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  lazy protocol witness table accessor for type AllowSectionPickerLabels and conformance AllowSectionPickerLabels();
  type metadata accessor for StaticIf();
}

void sub_18745E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for PickerContentView(255, v5, v6, a4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  v8 = type metadata accessor for ModifiedContent();
  v9 = MEMORY[0x1E0CE7C38];
  type metadata accessor for Section(255, a1, v8, MEMORY[0x1E0CE7C38]);
  type metadata accessor for Section(255, v4, v8, v9);
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  type metadata accessor for StaticIf();
}

uint64_t sub_18745E350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;
  _UNKNOWN **v21;

  v21 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  v9 = MEMORY[0x1E0CE83F8];
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE83F8], v2, &v21);
  v20 = v10;
  v19[0] = v10;
  v19[1] = MEMORY[0x18D75FFDC](v9, v1, &v20);
  v11 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v3, v19);
  v18[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v4);
  v18[1] = &protocol witness table for ToggleStyleModifier<A>;
  v15 = v11;
  v16 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v18);
  v17 = MEMORY[0x1E0CE7C28];
  v14[0] = v10;
  v14[1] = v16;
  v14[2] = MEMORY[0x1E0CE7C28];
  v13[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v6, &v15);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v5, v14);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v13);
}

uint64_t destroy for TableColumnCollection.Backing(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    return swift_bridgeObjectRelease();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  char v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_bridgeObjectRetain();
    v4 = 1;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    v4 = 0;
  }
  *(_BYTE *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithCopy for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for TableColumnCollection.Backing(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      swift_bridgeObjectRelease();
    else
      __swift_destroy_boxed_opaque_existential_1(a1);
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Backing(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCollection.Backing()
{
  return &type metadata for TableColumnCollection.Backing;
}

uint64_t TableColumnCollection.Backing.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  char v9;

  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    v2 = v6;
    v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v1;
}

uint64_t TableColumnCollection.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  char v27;

  v3 = v2;
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (_QWORD *)((char *)&v23[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v26);
  if ((v27 & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v15 = *(_QWORD *)&v26[0];
      if (*(_QWORD *)(*(_QWORD *)&v26[0] + 16) > a1)
      {
        v16 = type metadata accessor for TableColumnCollection.Entry(0);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v15+ ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a1, a2, type metadata accessor for TableColumnCollection.Entry);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  outlined init with take of OptionalBinaryInteger(v26, (uint64_t)v23);
  v17 = (uint64_t)v13 + *(int *)(v10 + 20);
  v18 = type metadata accessor for TableColumnCollection.Entry(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  *v13 = a1;
  v20 = v24;
  v21 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v13, a1, v20, v10, v21, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v17, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TableColumnCollection.Entry?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18);
  if ((_DWORD)result == 1)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for TableColumnCollection.Visitor);
  outlined init with take of TableColumnCollection.Entry((uint64_t)v9, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t protocol witness for Identifiable.id.getter in conformance TableColumnCollection.Entry@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void TableColumnCollection.Visitor.visit<A, B, C, D>(_:id:label:configuration:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v44 = a8;
  v41 = a6;
  v39 = a5;
  v35 = a3;
  v48 = a1;
  v40 = a12;
  v36 = a11;
  v38 = a10;
  v37 = a9;
  v47 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v46 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *a4;
  v26 = *((_QWORD *)a4 + 1);
  v49 = *((_QWORD *)a4 + 2);
  v50 = v26;
  v27 = *((_QWORD *)a4 + 3);
  v51 = *((_QWORD *)a4 + 4);
  v52 = v27;
  v28 = a4[40];
  LODWORD(v24) = a4[57];
  v42 = a4[56];
  v43 = v24;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16);
  v29(v25, a2, v20, v23);
  if (v28 == 255)
  {
    v30 = UUID.uuidString.getter();
    v51 = v31;
    v52 = v30;
    v32 = objc_msgSend(v35, sel_string);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v49 = v34;
    v50 = v33;

    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
    LODWORD(v35) = 1;
  }
  else
  {
    LODWORD(v35) = v28 & 1;
    outlined copy of TableColumnCustomizationID.Base(v50, v49, v52, v51, v28 & 1);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v19, a2, v20);
  v53 = v39;
  v54 = v41;
  v55 = v44;
  v56 = a7;
  v57 = v37;
  v58 = v38;
  v59 = v40;
  v60 = v36;
  type metadata accessor for TableColumn();
}

uint64_t sub_18745EC04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(int *)(a1 + 92);
  v6 = v2;
  v7 = *(_QWORD *)(v4 - 200);
  v8 = v7 + *(int *)(a1 + 88);
  *(_OWORD *)(v4 - 240) = *(_OWORD *)v8;
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = *(_BYTE *)(v8 + 32);
  v12 = v7 + v5;
  v13 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v12, v1 + v13[11], (uint64_t (*)(_QWORD))type metadata accessor for SwiftUIAnySortComparator?);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 208) + 16))(*(_QWORD *)(v4 - 216), v7, v6);
  v14 = AnyView.init<A>(_:)();
  v15 = v1 + v13[5];
  v16 = *(_QWORD *)(v4 - 192);
  *(_QWORD *)v15 = *(_QWORD *)(v4 - 184);
  *(_QWORD *)(v15 + 8) = v16;
  v17 = *(_QWORD *)(v4 - 176);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v4 - 168);
  *(_QWORD *)(v15 + 24) = v17;
  *(_BYTE *)(v15 + 32) = *(_DWORD *)(v4 - 304);
  *(_QWORD *)(v1 + v13[6]) = v3;
  v18 = v1 + v13[7];
  *(_OWORD *)v18 = *(_OWORD *)(v4 - 240);
  *(_QWORD *)(v18 + 16) = v9;
  *(_QWORD *)(v18 + 24) = v10;
  *(_BYTE *)(v18 + 32) = v11;
  *(_BYTE *)(v1 + v13[8]) = *(_DWORD *)(v4 - 248);
  *(_BYTE *)(v1 + v13[9]) = *(_DWORD *)(v4 - 244);
  *(_BYTE *)(v1 + v13[10]) = *(_DWORD *)(v4 - 220);
  *(_QWORD *)(v1 + v13[12]) = v14;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v13 - 1) + 56))(v1, 0, 1, v13);
  v19 = type metadata accessor for TableColumnCollection.Visitor(0);
  outlined assign with take of TableColumnCollection.Entry?(v1, *(_QWORD *)(v4 - 160) + *(int *)(v19 + 20));
  return 0;
}

void protocol witness for TableColumnVisitor.visit<A, B, C, D>(_:id:label:configuration:) in conformance TableColumnCollection.Visitor(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  TableColumnCollection.Visitor.visit<A, B, C, D>(_:id:label:configuration:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_18745ED68()
{
  return 0;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance TableColumnCollection(uint64_t *a1)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance TableColumnCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = TableColumnCollection.Backing.count.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance TableColumnCollection(_QWORD *a1, unint64_t *a2))(uint64_t *a1)
{
  uint64_t v4;
  void *v5;

  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  *a1 = v5;
  TableColumnCollection.subscript.getter(*a2, (uint64_t)v5);
  return protocol witness for Collection.subscript.read in conformance TableColumnCollection;
}

void protocol witness for Collection.subscript.read in conformance TableColumnCollection(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(*a1, type metadata accessor for TableColumnCollection.Entry);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance TableColumnCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;

  v6 = *a1;
  v7 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3);
  if (a2 < 1)
  {
    if (v7 <= 0 && v7 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, a2);
    v9 = 0;
    goto LABEL_11;
  }
  if (v7 < 0 || v7 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v9 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v9;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance TableColumnCollection@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance TableColumnCollection(uint64_t *a1)
{
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance TableColumnCollection@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 25);
  *(__n128 *)(a1 + 25) = result;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t type metadata accessor for TableColumnCollection.Entry(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnCollection.Entry);
}

uint64_t type metadata accessor for TableColumnCollection.Visitor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnCollection.Visitor);
}

uint64_t outlined init with take of TableColumnCollection.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TableColumnCollection.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance TableColumnCollection()
{
  uint64_t v0;
  size_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of TableColumnCollection(v0);
  return v1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnCollection.Visitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void (*v35)(char *, _QWORD, uint64_t, int *);
  uint64_t v37;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
    v9 = *((_QWORD *)v8 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for TableColumnCollection.Entry?(0);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v37 = v9;
      v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v6, v7, v12);
      v13 = v8[5];
      v14 = &v6[v13];
      v15 = &v7[v13];
      v16 = *(_QWORD *)v15;
      v17 = *((_QWORD *)v15 + 1);
      v18 = *((_QWORD *)v15 + 2);
      v19 = *((_QWORD *)v15 + 3);
      v20 = v15[32];
      outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v15, v17, v18, v19, v20);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      *((_QWORD *)v14 + 2) = v18;
      *((_QWORD *)v14 + 3) = v19;
      v14[32] = v20;
      *(_QWORD *)&v6[v8[6]] = *(_QWORD *)&v7[v8[6]];
      v21 = v8[7];
      v22 = &v6[v21];
      v23 = &v7[v21];
      v24 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v24;
      v22[32] = v23[32];
      v6[v8[8]] = v7[v8[8]];
      v6[v8[9]] = v7[v8[9]];
      v6[v8[10]] = v7[v8[10]];
      v25 = v8[11];
      v26 = &v6[v25];
      v27 = &v7[v25];
      v28 = *(_QWORD *)&v7[v25 + 24];
      if (v28)
      {
        *((_QWORD *)v26 + 3) = v28;
        (**(void (***)(char *, char *))(v28 - 8))(v26, v27);
        v29 = *(_OWORD *)(v27 + 56);
        *(_OWORD *)(v26 + 56) = v29;
        (**(void (***)(uint64_t, uint64_t))(v29 - 8))((uint64_t)(v26 + 32), (uint64_t)(v27 + 32));
        *((_QWORD *)v26 + 9) = *((_QWORD *)v27 + 9);
        v30 = *((_QWORD *)v27 + 14);
        v31 = *((_OWORD *)v27 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v27 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((_QWORD *)v26 + 14) = v30;
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v32 = *((_OWORD *)v27 + 5);
        *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
        *((_OWORD *)v26 + 5) = v32;
        *((_OWORD *)v26 + 6) = *((_OWORD *)v27 + 6);
        *((_QWORD *)v26 + 14) = *((_QWORD *)v27 + 14);
        v33 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)v26 + 1) = v33;
        v34 = *((_OWORD *)v27 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v27 + 2);
        *((_OWORD *)v26 + 3) = v34;
      }
      *(_QWORD *)&v6[v8[12]] = *(_QWORD *)&v7[v8[12]];
      v35 = *(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56);
      swift_retain();
      v35(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for TableColumnCollection.Visitor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for TableColumnCollection.Entry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
    v6 = v2 + *(int *)(v3 + 20);
    outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_BYTE *)(v6 + 32));
    v7 = v2 + *(int *)(v3 + 44);
    if (*(_QWORD *)(v7 + 24))
    {
      __swift_destroy_boxed_opaque_existential_1(v2 + *(int *)(v3 + 44));
      __swift_destroy_boxed_opaque_existential_1(v7 + 32);
      swift_release();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for TableColumnCollection.Visitor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v35 = v8;
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v5, v6, v10);
    v11 = v7[5];
    v12 = &v5[v11];
    v13 = &v6[v11];
    v14 = *(_QWORD *)v13;
    v15 = *((_QWORD *)v13 + 1);
    v16 = *((_QWORD *)v13 + 2);
    v17 = *((_QWORD *)v13 + 3);
    v18 = v13[32];
    outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v13, v15, v16, v17, v18);
    *(_QWORD *)v12 = v14;
    *((_QWORD *)v12 + 1) = v15;
    *((_QWORD *)v12 + 2) = v16;
    *((_QWORD *)v12 + 3) = v17;
    v12[32] = v18;
    *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
    v19 = v7[7];
    v20 = &v5[v19];
    v21 = &v6[v19];
    v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    v20[32] = v21[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    v23 = v7[11];
    v24 = &v5[v23];
    v25 = &v6[v23];
    v26 = *(_QWORD *)&v6[v23 + 24];
    if (v26)
    {
      *((_QWORD *)v24 + 3) = v26;
      (**(void (***)(char *, char *))(v26 - 8))(v24, v25);
      v27 = *(_OWORD *)(v25 + 56);
      *(_OWORD *)(v24 + 56) = v27;
      (**(void (***)(uint64_t, uint64_t))(v27 - 8))((uint64_t)(v24 + 32), (uint64_t)(v25 + 32));
      *((_QWORD *)v24 + 9) = *((_QWORD *)v25 + 9);
      v28 = *((_QWORD *)v25 + 14);
      v29 = *((_OWORD *)v25 + 6);
      *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 6) = v29;
      *((_QWORD *)v24 + 14) = v28;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v30 = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = v30;
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      *((_QWORD *)v24 + 14) = *((_QWORD *)v25 + 14);
      v31 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v31;
      v32 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v32;
    }
    *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56);
    swift_retain();
    v33(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithCopy for TableColumnCollection.Visitor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void (*v68)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v87;

  v3 = a1;
  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v87 = v3;
      v12 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v5, v6, v12);
      v13 = v7[5];
      v14 = &v5[v13];
      v15 = &v6[v13];
      v16 = *(_QWORD *)v15;
      v17 = *((_QWORD *)v15 + 1);
      v18 = *((_QWORD *)v15 + 2);
      v19 = *((_QWORD *)v15 + 3);
      v20 = v15[32];
      outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v15, v17, v18, v19, v20);
      *(_QWORD *)v14 = v16;
      *((_QWORD *)v14 + 1) = v17;
      *((_QWORD *)v14 + 2) = v18;
      *((_QWORD *)v14 + 3) = v19;
      v14[32] = v20;
      *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
      v21 = v7[7];
      v22 = &v5[v21];
      v23 = &v6[v21];
      v24 = *(_OWORD *)v23;
      v25 = *((_OWORD *)v23 + 1);
      v22[32] = v23[32];
      *(_OWORD *)v22 = v24;
      *((_OWORD *)v22 + 1) = v25;
      v5[v7[8]] = v6[v7[8]];
      v5[v7[9]] = v6[v7[9]];
      v5[v7[10]] = v6[v7[10]];
      v26 = v7[11];
      v27 = &v5[v26];
      v28 = &v6[v26];
      v29 = *(_QWORD *)&v6[v26 + 24];
      if (v29)
      {
        *((_QWORD *)v27 + 3) = v29;
        (**(void (***)(char *, char *))(v29 - 8))(v27, v28);
        v30 = *((_QWORD *)v28 + 7);
        *((_QWORD *)v27 + 7) = v30;
        *((_QWORD *)v27 + 8) = *((_QWORD *)v28 + 8);
        (**(void (***)(uint64_t, uint64_t))(v30 - 8))((uint64_t)(v27 + 32), (uint64_t)(v28 + 32));
        v31 = *((_QWORD *)v28 + 10);
        *((_QWORD *)v27 + 9) = *((_QWORD *)v28 + 9);
        *((_QWORD *)v27 + 10) = v31;
        v32 = *((_QWORD *)v28 + 12);
        *((_QWORD *)v27 + 11) = *((_QWORD *)v28 + 11);
        *((_QWORD *)v27 + 12) = v32;
        v33 = *((_QWORD *)v28 + 13);
        v34 = *((_QWORD *)v28 + 14);
        *((_QWORD *)v27 + 13) = v33;
        *((_QWORD *)v27 + 14) = v34;
        swift_retain();
        swift_retain();
        swift_retain();
      }
      else
      {
        v62 = *(_OWORD *)v28;
        v63 = *((_OWORD *)v28 + 1);
        v64 = *((_OWORD *)v28 + 3);
        *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
        *((_OWORD *)v27 + 3) = v64;
        *(_OWORD *)v27 = v62;
        *((_OWORD *)v27 + 1) = v63;
        v65 = *((_OWORD *)v28 + 4);
        v66 = *((_OWORD *)v28 + 5);
        v67 = *((_OWORD *)v28 + 6);
        *((_QWORD *)v27 + 14) = *((_QWORD *)v28 + 14);
        *((_OWORD *)v27 + 5) = v66;
        *((_OWORD *)v27 + 6) = v67;
        *((_OWORD *)v27 + 4) = v65;
      }
      *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
      v68 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_retain();
      v68(v5, 0, 1, v7);
      return v87;
    }
LABEL_7:
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return v3;
  }
  if (v11)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for TableColumnCollection.Entry);
    goto LABEL_7;
  }
  v36 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v5, v6, v36);
  v37 = v7[5];
  v38 = &v5[v37];
  v39 = &v6[v37];
  v40 = *(_QWORD *)v39;
  v41 = *((_QWORD *)v39 + 1);
  v42 = *((_QWORD *)v39 + 2);
  v43 = *((_QWORD *)v39 + 3);
  v44 = v39[32];
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v39, v41, v42, v43, v44);
  v45 = *(_QWORD *)v38;
  v46 = *((_QWORD *)v38 + 1);
  v47 = *((_QWORD *)v38 + 2);
  v48 = *((_QWORD *)v38 + 3);
  v49 = v38[32];
  *(_QWORD *)v38 = v40;
  *((_QWORD *)v38 + 1) = v41;
  *((_QWORD *)v38 + 2) = v42;
  *((_QWORD *)v38 + 3) = v43;
  v38[32] = v44;
  outlined consume of TableColumnCustomizationID.Base(v45, v46, v47, v48, v49);
  *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
  v50 = v7[7];
  v51 = &v5[v50];
  v52 = &v6[v50];
  v53 = v52[32];
  v54 = *((_OWORD *)v52 + 1);
  *(_OWORD *)v51 = *(_OWORD *)v52;
  *((_OWORD *)v51 + 1) = v54;
  v51[32] = v53;
  v5[v7[8]] = v6[v7[8]];
  v5[v7[9]] = v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  v55 = v7[11];
  v56 = (uint64_t)&v5[v55];
  v57 = (uint64_t *)&v6[v55];
  v58 = *(_QWORD *)&v6[v55 + 24];
  if (*(_QWORD *)&v5[v55 + 24])
  {
    if (v58)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v56, v57);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v56 + 32), v57 + 4);
      v59 = v57[10];
      *(_QWORD *)(v56 + 72) = v57[9];
      *(_QWORD *)(v56 + 80) = v59;
      swift_retain();
      swift_release();
      v60 = v57[12];
      *(_QWORD *)(v56 + 88) = v57[11];
      *(_QWORD *)(v56 + 96) = v60;
      swift_retain();
      swift_release();
      v61 = v57[14];
      *(_QWORD *)(v56 + 104) = v57[13];
      *(_QWORD *)(v56 + 112) = v61;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v56);
      v74 = *((_OWORD *)v57 + 3);
      v76 = *(_OWORD *)v57;
      v75 = *((_OWORD *)v57 + 1);
      *(_OWORD *)(v56 + 32) = *((_OWORD *)v57 + 2);
      *(_OWORD *)(v56 + 48) = v74;
      *(_OWORD *)v56 = v76;
      *(_OWORD *)(v56 + 16) = v75;
      v78 = *((_OWORD *)v57 + 5);
      v77 = *((_OWORD *)v57 + 6);
      v79 = *((_OWORD *)v57 + 4);
      *(_QWORD *)(v56 + 112) = v57[14];
      *(_OWORD *)(v56 + 80) = v78;
      *(_OWORD *)(v56 + 96) = v77;
      *(_OWORD *)(v56 + 64) = v79;
    }
  }
  else if (v58)
  {
    *(_QWORD *)(v56 + 24) = v58;
    (**(void (***)(uint64_t, char *))(v58 - 8))(v56, (char *)v57);
    v69 = v57[7];
    *(_QWORD *)(v56 + 56) = v69;
    *(_QWORD *)(v56 + 64) = v57[8];
    (**(void (***)(uint64_t, uint64_t))(v69 - 8))(v56 + 32, (uint64_t)(v57 + 4));
    v70 = v57[10];
    *(_QWORD *)(v56 + 72) = v57[9];
    *(_QWORD *)(v56 + 80) = v70;
    v71 = v57[12];
    *(_QWORD *)(v56 + 88) = v57[11];
    *(_QWORD *)(v56 + 96) = v71;
    v72 = v57[13];
    v73 = v57[14];
    *(_QWORD *)(v56 + 104) = v72;
    *(_QWORD *)(v56 + 112) = v73;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v80 = *(_OWORD *)v57;
    v81 = *((_OWORD *)v57 + 1);
    v82 = *((_OWORD *)v57 + 3);
    *(_OWORD *)(v56 + 32) = *((_OWORD *)v57 + 2);
    *(_OWORD *)(v56 + 48) = v82;
    *(_OWORD *)v56 = v80;
    *(_OWORD *)(v56 + 16) = v81;
    v83 = *((_OWORD *)v57 + 4);
    v84 = *((_OWORD *)v57 + 5);
    v85 = *((_OWORD *)v57 + 6);
    *(_QWORD *)(v56 + 112) = v57[14];
    *(_OWORD *)(v56 + 80) = v84;
    *(_OWORD *)(v56 + 96) = v85;
    *(_OWORD *)(v56 + 64) = v83;
  }
  *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
  swift_retain();
  swift_release();
  return v3;
}

_QWORD *initializeWithTake for TableColumnCollection.Visitor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    v11 = v7[5];
    v12 = &v5[v11];
    v13 = &v6[v11];
    v14 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v14;
    v12[32] = v13[32];
    *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
    v15 = v7[7];
    v16 = &v5[v15];
    v17 = &v6[v15];
    v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
    v16[32] = v17[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    v19 = v7[11];
    v20 = &v5[v19];
    v21 = &v6[v19];
    v22 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v22;
    v23 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v23;
    *((_QWORD *)v20 + 14) = *((_QWORD *)v21 + 14);
    v24 = *((_OWORD *)v21 + 6);
    v25 = *((_OWORD *)v21 + 4);
    *((_OWORD *)v20 + 5) = *((_OWORD *)v21 + 5);
    *((_OWORD *)v20 + 6) = v24;
    *((_OWORD *)v20 + 4) = v25;
    *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for TableColumnCollection.Visitor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = (int *)type metadata accessor for TableColumnCollection.Entry(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for TableColumnCollection.Entry);
      goto LABEL_6;
    }
    v30 = type metadata accessor for UUID();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v5, v6, v30);
    v31 = v7[5];
    v32 = &v5[v31];
    v33 = &v6[v31];
    v34 = v33[32];
    v35 = *(_QWORD *)v32;
    v36 = *((_QWORD *)v32 + 1);
    v37 = *((_QWORD *)v32 + 2);
    v38 = *((_QWORD *)v32 + 3);
    v39 = v32[32];
    v40 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v40;
    v32[32] = v34;
    outlined consume of TableColumnCustomizationID.Base(v35, v36, v37, v38, v39);
    *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
    v41 = v7[7];
    v42 = &v5[v41];
    v43 = &v6[v41];
    v44 = *((_OWORD *)v43 + 1);
    *(_OWORD *)v42 = *(_OWORD *)v43;
    *((_OWORD *)v42 + 1) = v44;
    v42[32] = v43[32];
    v5[v7[8]] = v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    v45 = v7[11];
    v46 = (uint64_t)&v5[v45];
    v47 = &v6[v45];
    if (*(_QWORD *)&v5[v45 + 24])
    {
      if (*((_QWORD *)v47 + 3))
      {
        __swift_destroy_boxed_opaque_existential_1(v46);
        v48 = *((_OWORD *)v47 + 1);
        *(_OWORD *)v46 = *(_OWORD *)v47;
        *(_OWORD *)(v46 + 16) = v48;
        __swift_destroy_boxed_opaque_existential_1(v46 + 32);
        v49 = *((_OWORD *)v47 + 3);
        *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
        *(_OWORD *)(v46 + 48) = v49;
        *(_QWORD *)(v46 + 64) = *((_QWORD *)v47 + 8);
        *(_OWORD *)(v46 + 72) = *(_OWORD *)(v47 + 72);
        swift_release();
        *(_OWORD *)(v46 + 88) = *(_OWORD *)(v47 + 88);
        swift_release();
        *(_OWORD *)(v46 + 104) = *(_OWORD *)(v47 + 104);
        swift_release();
LABEL_13:
        *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
        swift_release();
        return a1;
      }
      outlined destroy of SwiftUIAnySortComparator(v46);
    }
    v50 = *((_OWORD *)v47 + 5);
    *(_OWORD *)(v46 + 64) = *((_OWORD *)v47 + 4);
    *(_OWORD *)(v46 + 80) = v50;
    *(_OWORD *)(v46 + 96) = *((_OWORD *)v47 + 6);
    *(_QWORD *)(v46 + 112) = *((_QWORD *)v47 + 14);
    v51 = *((_OWORD *)v47 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v47;
    *(_OWORD *)(v46 + 16) = v51;
    v52 = *((_OWORD *)v47 + 3);
    *(_OWORD *)(v46 + 32) = *((_OWORD *)v47 + 2);
    *(_OWORD *)(v46 + 48) = v52;
    goto LABEL_13;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for TableColumnCollection.Entry?(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  v12 = type metadata accessor for UUID();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v5, v6, v12);
  v13 = v7[5];
  v14 = &v5[v13];
  v15 = &v6[v13];
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[32] = v15[32];
  *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
  v17 = v7[7];
  v18 = &v5[v17];
  v19 = &v6[v17];
  v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  v18[32] = v19[32];
  v5[v7[8]] = v6[v7[8]];
  v5[v7[9]] = v6[v7[9]];
  v5[v7[10]] = v6[v7[10]];
  v21 = v7[11];
  v22 = &v5[v21];
  v23 = &v6[v21];
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v25 = *((_OWORD *)v23 + 3);
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  *((_OWORD *)v22 + 3) = v25;
  *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
  v26 = *((_OWORD *)v23 + 6);
  v27 = *((_OWORD *)v23 + 4);
  *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
  *((_OWORD *)v22 + 6) = v26;
  *((_OWORD *)v22 + 4) = v27;
  *(_QWORD *)&v5[v7[12]] = *(_QWORD *)&v6[v7[12]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Visitor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18745FEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  type metadata accessor for TableColumnCollection.Entry?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Visitor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18745FEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  type metadata accessor for TableColumnCollection.Entry?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void type metadata completion function for TableColumnCollection.Visitor()
{
  unint64_t v0;

  type metadata accessor for TableColumnCollection.Entry?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for TableColumnCollection.Entry(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    v15 = v10[32];
    outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v10, v12, v13, v14, v15);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v14;
    v9[32] = v15;
    v16 = a3[7];
    *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = *((_OWORD *)v18 + 1);
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *((_OWORD *)v17 + 1) = v19;
    v17[32] = v18[32];
    v20 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 24);
    if (v24)
    {
      *((_QWORD *)v22 + 3) = v24;
      (**(void (***)(char *, char *))(v24 - 8))((char *)a1 + v21, (char *)a2 + v21);
      v25 = *(_OWORD *)(v23 + 56);
      *(_OWORD *)(v22 + 56) = v25;
      (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 32), (uint64_t)(v23 + 32));
      *((_QWORD *)v22 + 9) = *((_QWORD *)v23 + 9);
      v26 = *((_QWORD *)v23 + 14);
      v27 = *((_OWORD *)v23 + 6);
      *((_OWORD *)v22 + 5) = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 6) = v27;
      *((_QWORD *)v22 + 14) = v26;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v29 = *((_OWORD *)v23 + 5);
      *((_OWORD *)v22 + 4) = *((_OWORD *)v23 + 4);
      *((_OWORD *)v22 + 5) = v29;
      *((_OWORD *)v22 + 6) = *((_OWORD *)v23 + 6);
      *((_QWORD *)v22 + 14) = *((_QWORD *)v23 + 14);
      v30 = *((_OWORD *)v23 + 1);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v30;
      v31 = *((_OWORD *)v23 + 3);
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      *((_OWORD *)v22 + 3) = v31;
    }
    *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  outlined consume of TableColumnCustomizationID.Base(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
  v6 = a1 + *(int *)(a2 + 44);
  if (*(_QWORD *)(v6 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + *(int *)(a2 + 44));
    __swift_destroy_boxed_opaque_existential_1(v6 + 32);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v9, v11, v12, v13, v14);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  v15 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(_BYTE *)(v16 + 32) = *(_BYTE *)(v17 + 32);
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a2 + v20 + 24);
  if (v23)
  {
    *(_QWORD *)(v21 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1 + v20, a2 + v20);
    v24 = *(_OWORD *)(v22 + 56);
    *(_OWORD *)(v21 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(v21 + 32, v22 + 32);
    *(_QWORD *)(v21 + 72) = *(_QWORD *)(v22 + 72);
    v25 = *(_QWORD *)(v22 + 112);
    v26 = *(_OWORD *)(v22 + 96);
    *(_OWORD *)(v21 + 80) = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 96) = v26;
    *(_QWORD *)(v21 + 112) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v27 = *(_OWORD *)(v22 + 80);
    *(_OWORD *)(v21 + 64) = *(_OWORD *)(v22 + 64);
    *(_OWORD *)(v21 + 80) = v27;
    *(_OWORD *)(v21 + 96) = *(_OWORD *)(v22 + 96);
    *(_QWORD *)(v21 + 112) = *(_QWORD *)(v22 + 112);
    v28 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v28;
    v29 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)(v21 + 32) = *(_OWORD *)(v22 + 32);
    *(_OWORD *)(v21 + 48) = v29;
  }
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  outlined copy of TableColumnCustomizationID.Base(*(_QWORD *)v9, v11, v12, v13, v14);
  v15 = *(_QWORD *)v8;
  v16 = *(_QWORD *)(v8 + 8);
  v17 = *(_QWORD *)(v8 + 16);
  v18 = *(_QWORD *)(v8 + 24);
  v19 = *(_BYTE *)(v8 + 32);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  outlined consume of TableColumnCustomizationID.Base(v15, v16, v17, v18, v19);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_BYTE *)(v22 + 32);
  v24 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v24;
  *(_BYTE *)(v21 + 32) = v23;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a2 + v25 + 24);
  if (*(_QWORD *)(a1 + v25 + 24))
  {
    if (v28)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v26, v27);
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(v26 + 32), v27 + 4);
      v29 = v27[10];
      *(_QWORD *)(v26 + 72) = v27[9];
      *(_QWORD *)(v26 + 80) = v29;
      swift_retain();
      swift_release();
      v30 = v27[12];
      *(_QWORD *)(v26 + 88) = v27[11];
      *(_QWORD *)(v26 + 96) = v30;
      swift_retain();
      swift_release();
      v31 = v27[14];
      *(_QWORD *)(v26 + 104) = v27[13];
      *(_QWORD *)(v26 + 112) = v31;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of SwiftUIAnySortComparator(v26);
      v37 = *((_OWORD *)v27 + 3);
      v39 = *(_OWORD *)v27;
      v38 = *((_OWORD *)v27 + 1);
      *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
      *(_OWORD *)(v26 + 48) = v37;
      *(_OWORD *)v26 = v39;
      *(_OWORD *)(v26 + 16) = v38;
      v41 = *((_OWORD *)v27 + 5);
      v40 = *((_OWORD *)v27 + 6);
      v42 = *((_OWORD *)v27 + 4);
      *(_QWORD *)(v26 + 112) = v27[14];
      *(_OWORD *)(v26 + 80) = v41;
      *(_OWORD *)(v26 + 96) = v40;
      *(_OWORD *)(v26 + 64) = v42;
    }
  }
  else if (v28)
  {
    *(_QWORD *)(v26 + 24) = v28;
    (**(void (***)(uint64_t, __int128 *))(v28 - 8))(v26, (__int128 *)v27);
    v32 = v27[7];
    *(_QWORD *)(v26 + 56) = v32;
    *(_QWORD *)(v26 + 64) = v27[8];
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))(v26 + 32, (uint64_t)(v27 + 4));
    v33 = v27[10];
    *(_QWORD *)(v26 + 72) = v27[9];
    *(_QWORD *)(v26 + 80) = v33;
    v34 = v27[12];
    *(_QWORD *)(v26 + 88) = v27[11];
    *(_QWORD *)(v26 + 96) = v34;
    v35 = v27[13];
    v36 = v27[14];
    *(_QWORD *)(v26 + 104) = v35;
    *(_QWORD *)(v26 + 112) = v36;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v43 = *(_OWORD *)v27;
    v44 = *((_OWORD *)v27 + 1);
    v45 = *((_OWORD *)v27 + 3);
    *(_OWORD *)(v26 + 32) = *((_OWORD *)v27 + 2);
    *(_OWORD *)(v26 + 48) = v45;
    *(_OWORD *)v26 = v43;
    *(_OWORD *)(v26 + 16) = v44;
    v46 = *((_OWORD *)v27 + 4);
    v47 = *((_OWORD *)v27 + 5);
    v48 = *((_OWORD *)v27 + 6);
    *(_QWORD *)(v26 + 112) = v27[14];
    *(_OWORD *)(v26 + 80) = v47;
    *(_OWORD *)(v26 + 96) = v48;
    *(_OWORD *)(v26 + 64) = v46;
  }
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v12 = a3[7];
  v13 = a3[8];
  v14 = a1 + v12;
  v15 = a2 + v12;
  v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_BYTE *)(v14 + 32) = *(_BYTE *)(v15 + 32);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v17 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[11];
  v19 = a3[12];
  v20 = a1 + v18;
  v21 = a2 + v18;
  v22 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 16) = v22;
  v23 = *(_OWORD *)(v21 + 48);
  *(_OWORD *)(v20 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(v20 + 48) = v23;
  *(_QWORD *)(v20 + 112) = *(_QWORD *)(v21 + 112);
  v24 = *(_OWORD *)(v21 + 96);
  v25 = *(_OWORD *)(v21 + 64);
  *(_OWORD *)(v20 + 80) = *(_OWORD *)(v21 + 80);
  *(_OWORD *)(v20 + 96) = v24;
  *(_OWORD *)(v20 + 64) = v25;
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  return a1;
}

uint64_t assignWithTake for TableColumnCollection.Entry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 32);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v15 = *(_BYTE *)(v8 + 32);
  v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(_BYTE *)(v8 + 32) = v10;
  outlined consume of TableColumnCustomizationID.Base(v11, v12, v13, v14, v15);
  v17 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_BYTE *)(v18 + 32) = *(_BYTE *)(v19 + 32);
  v21 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  if (!*(_QWORD *)(a1 + v22 + 24))
    goto LABEL_5;
  if (!*(_QWORD *)(v24 + 24))
  {
    outlined destroy of SwiftUIAnySortComparator(a1 + v22);
LABEL_5:
    v27 = *(_OWORD *)(v24 + 80);
    *(_OWORD *)(v23 + 64) = *(_OWORD *)(v24 + 64);
    *(_OWORD *)(v23 + 80) = v27;
    *(_OWORD *)(v23 + 96) = *(_OWORD *)(v24 + 96);
    *(_QWORD *)(v23 + 112) = *(_QWORD *)(v24 + 112);
    v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    v29 = *(_OWORD *)(v24 + 48);
    *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
    *(_OWORD *)(v23 + 48) = v29;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + v22);
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  __swift_destroy_boxed_opaque_existential_1(v23 + 32);
  v26 = *(_OWORD *)(v24 + 48);
  *(_OWORD *)(v23 + 32) = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v23 + 48) = v26;
  *(_QWORD *)(v23 + 64) = *(_QWORD *)(v24 + 64);
  *(_OWORD *)(v23 + 72) = *(_OWORD *)(v24 + 72);
  swift_release();
  *(_OWORD *)(v23 + 88) = *(_OWORD *)(v24 + 88);
  swift_release();
  *(_OWORD *)(v23 + 104) = *(_OWORD *)(v24 + 104);
  swift_release();
LABEL_6:
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection.Entry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874608A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 48));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection.Entry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187460928(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 48)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for TableColumnCollection.Entry()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TableColumnCollection(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for TableColumnCollection(uint64_t a1, uint64_t a2)
{
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(a2 + 40);
  if ((v3 & 1) != 0)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
  }
  *(_BYTE *)(a1 + 40) = v3;
  return a1;
}

uint64_t assignWithCopy for TableColumnCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing(a1);
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

_OWORD *assignWithTake for TableColumnCollection(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  if (a1 != a2)
  {
    outlined destroy of TableColumnCollection.Backing((uint64_t)a1);
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnCollection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableColumnCollection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnCollection()
{
  return &type metadata for TableColumnCollection;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, MEMORY[0x1E0DEDE28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>((unint64_t *)&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, MEMORY[0x1E0DEDE40]);
}

uint64_t lazy protocol witness table accessor for type Slice<TableColumnCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<TableColumnCollection>(255, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in TableColumnCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<TableColumnCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<TableColumnCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEDE10], MEMORY[0x1E0DEDE48]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<TableColumnCollection>(255, a2, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TableColumnCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<TableColumnCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<TableColumnCollection>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DEC8F8], MEMORY[0x1E0DEC908]);
}

void type metadata accessor for Slice<TableColumnCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection();
    v7 = a3(a1, &type metadata for TableColumnCollection, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t outlined assign with take of TableColumnCollection.Entry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TableColumnCollection.Entry?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void static SearchFieldPlacement.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static SearchFieldPlacement.toolbar.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static SearchFieldPlacement.toolbarPrincipal.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t (*static SearchFieldPlacement.toolbarPrincipal.modify(_BYTE *a1))(_QWORD)
{
  *a1 = 4;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static SearchFieldPlacement.sidebar.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static SearchFieldPlacement.navigationBarDrawer.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SearchFieldPlacement.navigationColumn.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

_BYTE *static SearchFieldPlacement.navigationBarDrawer(displayMode:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchFieldPlacement.Role(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static SearchFieldPlacement.Role.== infix(_:_:)(*a1, *a2);
}

void static SearchFieldPlacement.NavigationBarDrawerDisplayMode.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static SearchFieldPlacement.NavigationBarDrawerDisplayMode.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t getEnumTagSinglePayload for SearchFieldPlacement(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  if (*a1 <= 7u)
    v6 = 7;
  else
    v6 = *a1;
  v7 = v6 - 8;
  if (*a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchFieldPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1874610B0 + 4 * byte_187C33585[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1874610E4 + 4 * byte_187C33580[v4]))();
}

uint64_t sub_1874610E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874610EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874610F4);
  return result;
}

uint64_t sub_187461100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187461108);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_18746110C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187461114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement()
{
  return &type metadata for SearchFieldPlacement;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.NavigationBarDrawerDisplayMode()
{
  return &type metadata for SearchFieldPlacement.NavigationBarDrawerDisplayMode;
}

uint64_t storeEnumTagSinglePayload for SearchFieldPlacement.NavigationBarDrawerDisplayMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187461190 + 4 * byte_187C3358F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1874611C4 + 4 * byte_187C3358A[v4]))();
}

uint64_t sub_1874611C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874611CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1874611D4);
  return result;
}

uint64_t sub_1874611E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1874611E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1874611EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1874611F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.DrawerDisplayMode()
{
  return &type metadata for SearchFieldPlacement.DrawerDisplayMode;
}

uint64_t getEnumTagSinglePayload for SearchFieldPlacement.Role(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
  {
    v6 = *a1;
    if (v6 >= 2)
      v7 = v6 - 1;
    else
      v7 = 0;
    if (v7 >= 7)
      return v7 - 6;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187461260 + 4 * byte_187C33594[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SearchFieldPlacement.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF9)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_18746130C + 4 * byte_187C3359E[v5]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_187461340 + 4 * byte_187C33599[v5]))();
}

uint64_t sub_187461340(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187461348(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187461350);
  return result;
}

uint64_t sub_18746135C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187461364);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_187461368(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187461370(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.Role()
{
  return &type metadata for SearchFieldPlacement.Role;
}

unint64_t lazy protocol witness table accessor for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode;
  if (!lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SearchFieldPlacement.DrawerDisplayMode, &type metadata for SearchFieldPlacement.DrawerDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldPlacement.DrawerDisplayMode and conformance SearchFieldPlacement.DrawerDisplayMode);
  }
  return result;
}

BOOL specialized static SearchFieldPlacement.Role.== infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  _BOOL8 result;

  switch(a1)
  {
    case 2u:
      if (a2 != 2)
        goto LABEL_15;
      result = 1;
      break;
    case 3u:
      if (a2 != 3)
        goto LABEL_15;
      result = 1;
      break;
    case 4u:
      if (a2 != 4)
        goto LABEL_15;
      result = 1;
      break;
    case 5u:
      if (a2 != 5)
        goto LABEL_15;
      result = 1;
      break;
    case 6u:
      if (a2 != 6)
        goto LABEL_15;
      result = 1;
      break;
    case 7u:
      if (a2 != 7)
        goto LABEL_15;
      result = 1;
      break;
    default:
      if (a2 - 2 >= 6)
        result = ((a2 ^ a1) & 1) == 0;
      else
LABEL_15:
        result = 0;
      break;
  }
  return result;
}

double _ProjectionEffect.transform.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;

  result = *(double *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

double _ProjectionEffect.transform.setter(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;

  result = *(double *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v4;
  *(double *)(v1 + 64) = result;
  return result;
}

uint64_t (*_ProjectionEffect.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ProjectionEffect.init(transform:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  result = *(double *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(double *)(a2 + 64) = result;
  return result;
}

double _ProjectionEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;

  result = *(double *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t static _ProjectionEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v2;
  v10 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v8 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return MEMORY[0x18D75988C](v9, v7) & 1;
}

double protocol witness for GeometryEffect.effectValue(size:) in conformance _ProjectionEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;

  result = *(double *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ProjectionEffect(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return MEMORY[0x18D75988C](v7, v9) & 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ProjectionEffect()
{
  lazy protocol witness table accessor for type _ProjectionEffect and conformance _ProjectionEffect();
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _ProjectionEffect()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.projectionEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v5;
  v8 = v3;
  return MEMORY[0x18D75B4AC](v7, a2, &type metadata for _ProjectionEffect, a3);
}

unint64_t instantiation function for generic protocol witness table for _ProjectionEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _ProjectionEffect and conformance _ProjectionEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ProjectionEffect and conformance _ProjectionEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect;
  if (!lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ProjectionEffect, &type metadata for _ProjectionEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect;
  if (!lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ProjectionEffect, &type metadata for _ProjectionEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ProjectionEffect and conformance _ProjectionEffect);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ProjectionEffect(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ProjectionEffect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ProjectionEffect()
{
  return &type metadata for _ProjectionEffect;
}

uint64_t sub_1874617A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _ProjectionEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void SettingsLink.init<>()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SettingsLink.init(label:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SettingsLink.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void DefaultSettingsLinkLabel.body.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for View.Body : View in SettingsLink<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultSettingsLinkLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultSettingsLinkLabel()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<Image, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t type metadata completion function for SettingsLink()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SettingsLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    v13 = *(_BYTE *)(v11 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v11, v13);
    *(_QWORD *)v10 = v12;
    *(_BYTE *)(v10 + 8) = v13;
  }
  return v4;
}

uint64_t assignWithTake for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)v8;
  LOBYTE(v8) = *(_BYTE *)(v8 + 8);
  v10 = *(_QWORD *)v7;
  v11 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)v7 = v9;
  *(_BYTE *)(v7 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SettingsLink(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187461B88 + 4 * byte_187C33740[v12]))();
  }
}

void storeEnumTagSinglePayload for SettingsLink(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187461D30()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187461DACLL);
}

void sub_187461D38(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187461D40);
  JUMPOUT(0x187461DACLL);
}

void sub_187461D84()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187461DACLL);
}

void sub_187461D8C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187461DACLL);
}

uint64_t sub_187461D94(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x187461DA0);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x187461DACLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SettingsLink);
}

ValueMetadata *type metadata accessor for DefaultSettingsLinkLabel()
{
  return &type metadata for DefaultSettingsLinkLabel;
}

void sub_187461DE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Button(255, *a1, a1[1], a4);
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187461E08()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Label<Text, Image>, (uint64_t)&protocol conformance descriptor for Label<A, B>);
}

__n128 _TransformEffect.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 _TransformEffect.transform.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 32) = result;
  return result;
}

uint64_t (*_TransformEffect.transform.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void __swiftcall _TransformEffect.init(transform:)(SwiftUI::_TransformEffect *__return_ptr retstr, CGAffineTransform *transform)
{
  __int128 v2;

  v2 = *(_OWORD *)&transform->c;
  *(_OWORD *)&retstr->transform.a = *(_OWORD *)&transform->a;
  *(_OWORD *)&retstr->transform.c = v2;
  *(_OWORD *)&retstr->transform.tx = *(_OWORD *)&transform->tx;
}

__n128 _TransformEffect.effectValue(size:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t static _TransformEffect.== infix(_:_:)()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _TransformEffect@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _TransformEffect()
{
  return static CGAffineTransform.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TransformEffect()
{
  lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect();
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _TransformEffect()
{
  specialized ViewModifier.bodyError()();
}

uint64_t View.transformEffect(_:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  return MEMORY[0x18D75B4AC](v5, a2, &type metadata for _TransformEffect, a3);
}

uint64_t VisualEffect.transformEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VisualEffect.transformEffect(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))VisualEffect.transformEffect(_:));
}

unint64_t lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect;
  if (!lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TransformEffect, &type metadata for _TransformEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect;
  if (!lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _TransformEffect, &type metadata for _TransformEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TransformEffect and conformance _TransformEffect);
  }
  return result;
}

uint64_t VisualEffect.transform(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VisualEffect.transformEffect(_:)(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))VisualEffect.transform(_:));
}

uint64_t VisualEffect.transformEffect(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v8;

  CGAffineTransform.init(_:)();
  return a4(&v8, a2, a3);
}

uint64_t VisualEffect.transformEffect(_:)()
{
  lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.transformEffect(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t instantiation function for generic protocol witness table for _TransformEffect(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _TransformEffect()
{
  return &type metadata for _TransformEffect;
}

uint64_t sub_187462200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _TransformEffect;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187462254()
{
  lazy protocol witness table accessor for type _TransformEffect and conformance _TransformEffect();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1874622A0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for ToolbarToggleStyle()
{
  return &type metadata for ToolbarToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in ToolbarToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #2 in ToolbarToggleStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[7];
  int v35;
  __int16 v36;
  _BYTE v37[7];
  _BYTE v38[7];
  int v39;
  __int16 v40;
  uint64_t v41;
  __int128 v42[3];
  __int128 v43;
  unsigned __int8 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v31 = a1[1];
  v32 = *a1;
  v4 = *((_BYTE *)a1 + 16);
  v29 = a1[4];
  v30 = a1[3];
  v28 = *((_BYTE *)a1 + 40);
  v5 = *((_BYTE *)a1 + 41);
  v26 = a1[7];
  v27 = a1[6];
  v24 = a1[9];
  v25 = a1[8];
  v22 = a1[11];
  v23 = a1[10];
  outlined init with take of ToggleStyleConfiguration.Effect((__int128 *)a1 + 3, v42);
  outlined init with take of ToggleStyleConfiguration.Effect(v42, &v43);
  v6 = v45;
  if (v45)
  {
    v8 = *((_QWORD *)&v43 + 1);
    v7 = v43;
    v9 = v44;
    v10 = v46;
    v11 = v47;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  v20 = v4 & 1;
  v21 = v5 & 1;
  v12 = a1[3];
  v13 = a1[4];
  v19 = *((_BYTE *)a1 + 40);
  swift_retain();
  swift_retain();
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v42);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  KeyPath = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v17 = swift_getKeyPath();
  v33 = *(_OWORD *)a1;
  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v41);
  v14 = v41;
  result = swift_getKeyPath();
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v37;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v37[3];
  *(_DWORD *)(a2 + 138) = v35;
  *(_WORD *)(a2 + 142) = v36;
  *(_DWORD *)(a2 + 201) = *(_DWORD *)v34;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)&v34[3];
  *(_WORD *)(a2 + 222) = v40;
  *(_DWORD *)(a2 + 218) = v39;
  *(_DWORD *)(a2 + 228) = *(_DWORD *)&v38[3];
  *(_DWORD *)(a2 + 225) = *(_DWORD *)v38;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v33 + 3);
  *(_DWORD *)(a2 + 17) = v33;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_BYTE *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)((char *)&v41 + 3);
  *(_DWORD *)(a2 + 81) = v41;
  *(_QWORD *)(a2 + 96) = v32;
  *(_QWORD *)(a2 + 104) = v31;
  *(_BYTE *)(a2 + 112) = v20;
  *(_QWORD *)(a2 + 120) = v30;
  *(_QWORD *)(a2 + 128) = v29;
  *(_BYTE *)(a2 + 136) = v28;
  *(_BYTE *)(a2 + 137) = v21;
  *(_QWORD *)(a2 + 144) = v27;
  *(_QWORD *)(a2 + 152) = v26;
  *(_QWORD *)(a2 + 160) = v25;
  *(_QWORD *)(a2 + 168) = v24;
  *(_QWORD *)(a2 + 176) = v23;
  *(_QWORD *)(a2 + 184) = v22;
  *(_QWORD *)(a2 + 192) = v18;
  *(_BYTE *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = v17;
  *(_BYTE *)(a2 + 217) = 0;
  *(_BYTE *)(a2 + 224) = v14;
  *(_QWORD *)(a2 + 232) = result;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 240) = 0;
  return result;
}

uint64_t ToolbarToggleStyle.ResolvedBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  char v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[3];

  v56 = a1;
  type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>(0);
  v3 = v2;
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (_WORD *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
  v52 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v55 = (uint64_t)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, v19, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  v53 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v51 - v22;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
  v54 = v24;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v1[5];
  v71 = v1[4];
  v72 = v28;
  v73[0] = v1[6];
  *(_OWORD *)((char *)v73 + 10) = *(__int128 *)((char *)v1 + 106);
  v29 = v1[1];
  v67 = *v1;
  v68 = v29;
  v30 = v1[3];
  v69 = v1[2];
  v70 = v30;
  v31 = (_OWORD *)swift_allocObject();
  v32 = v1[3];
  v31[3] = v1[2];
  v31[4] = v32;
  v33 = v1[1];
  v31[1] = *v1;
  v31[2] = v33;
  *(_OWORD *)((char *)v31 + 122) = *(__int128 *)((char *)v1 + 106);
  v34 = v1[6];
  v35 = v1[4];
  v31[6] = v1[5];
  v31[7] = v34;
  v31[5] = v35;
  *v6 = 256;
  v36 = (_QWORD *)((char *)v6 + *(int *)(v3 + 36));
  *v36 = partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter;
  v36[1] = v31;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v37 = (uint64_t)v6 + *(int *)(v3 + 40);
  v64 = v71;
  v65 = v72;
  v66[0] = v73[0];
  *(_OWORD *)((char *)v66 + 10) = *(_OWORD *)((char *)v73 + 10);
  v60 = v67;
  v61 = v68;
  v62 = v69;
  v63 = v70;
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v67);
  ToolbarToggleStyle.ResolvedBody.label.getter(v37);
  v60 = v67;
  LOBYTE(v61) = v68;
  v57 = v67;
  v58 = v68;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v39 = v38;
  MEMORY[0x18D75B9C8](&v59);
  if (v59)
    v40 = 0;
  else
    v40 = 8;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
  v41 = &v11[*(int *)(v8 + 36)];
  *(_DWORD *)v41 = 2;
  *((_QWORD *)v41 + 1) = v40;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
  v57 = v60;
  v58 = v61;
  MEMORY[0x18D75B9C8](&v59, v39);
  if (v59 == 1)
  {
    if (one-time initialization token for lift != -1)
      swift_once();
    v42 = &static HoverEffect.lift;
  }
  else
  {
    if (one-time initialization token for highlight != -1)
      swift_once();
    v42 = &static HoverEffect.highlight;
  }
  v43 = *v42;
  KeyPath = swift_getKeyPath();
  v45 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  v46 = &v15[*(int *)(v52 + 36)];
  *(_QWORD *)v46 = v43;
  v46[8] = 1;
  *((_QWORD *)v46 + 2) = KeyPath;
  v46[24] = 0;
  *((_QWORD *)v46 + 4) = v45;
  *((_WORD *)v46 + 20) = 0;
  *((_QWORD *)v46 + 6) = 0;
  v46[56] = 1;
  *((_QWORD *)v46 + 8) = 0;
  *((_WORD *)v46 + 36) = 513;
  *((_QWORD *)v46 + 10) = 0;
  swift_retain();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  v47 = v55;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v55, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v47, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>);
  *(_QWORD *)&v23[*(int *)(v53 + 36)] = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v47, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>);
  v48 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v23, (uint64_t)v27);
  v49 = &v27[*(int *)(v54 + 36)];
  *(_QWORD *)v49 = v48;
  v49[8] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v23);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo((uint64_t)v27, v56);
}

_QWORD *implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _OWORD v8[6];

  v1 = a1[1];
  v8[0] = *a1;
  v8[1] = v1;
  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[5];
  v8[4] = a1[4];
  v8[5] = v3;
  outlined retain of ToggleStyleConfiguration(v8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = v4;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v7, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(v8);
}

uint64_t ToolbarToggleStyle.ResolvedBody.label.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  __int128 v23;
  _BYTE v24[8];
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33[8];
  uint64_t KeyPath;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  _BYTE v42[104];
  _BYTE v43[104];
  _BYTE v44[104];
  uint64_t v45;
  _QWORD *(*v46)(_QWORD *);
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[2];

  v3 = v1[5];
  v52 = v1[4];
  v53 = v3;
  v54[0] = v1[6];
  *(_OWORD *)((char *)v54 + 10) = *(__int128 *)((char *)v1 + 106);
  v4 = v1[1];
  v48 = *v1;
  v49 = v4;
  v5 = v1[3];
  v50 = v1[2];
  v51 = v5;
  v33[0] = 0;
  KeyPath = swift_getKeyPath();
  v35 = 0;
  v36 = swift_getKeyPath();
  v37 = 0;
  v38 = swift_getKeyPath();
  v39 = 0;
  v40 = swift_getKeyPath();
  v41 = 0;
  outlined init with copy of ToolbarButtonLabelModifier(v33, (uint64_t)v42);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v33);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v42, (uint64_t)v43);
  outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v42);
  v6 = swift_getKeyPath();
  v7 = (_OWORD *)swift_allocObject();
  v8 = v53;
  v7[5] = v52;
  v7[6] = v8;
  v7[7] = v54[0];
  *(_OWORD *)((char *)v7 + 122) = *(_OWORD *)((char *)v54 + 10);
  v9 = v49;
  v7[1] = v48;
  v7[2] = v9;
  v10 = v51;
  v7[3] = v50;
  v7[4] = v10;
  outlined init with copy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>((uint64_t)v43, (uint64_t)v44);
  v45 = v6;
  v46 = partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter;
  v47 = v7;
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v48);
  outlined destroy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>((uint64_t)v43);
  v11 = static Alignment.center.getter();
  v13 = v12;
  ToolbarToggleStyle.ResolvedBody.backgroundContent.getter((uint64_t)v24);
  v14 = v24[0];
  v15 = v25;
  v16 = v26;
  v23 = v27;
  v17 = v28;
  v18 = v29;
  v19 = v30;
  v20 = v31;
  v21 = v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v44, a1, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
  *(_BYTE *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v15;
  *(_BYTE *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 168) = v17;
  *(_QWORD *)(a1 + 176) = v18;
  *(_DWORD *)(a1 + 184) = v19;
  *(_BYTE *)(a1 + 188) = v20;
  *(_BYTE *)(a1 + 189) = v21;
  *(_QWORD *)(a1 + 192) = v11;
  *(_QWORD *)(a1 + 200) = v13;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
}

_QWORD *implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8](&v3);
  if (v3 == 1)
  {
    swift_release();
    result = (_QWORD *)AnyShapeStyle.init<A>(_:)();
    *a1 = result;
  }
  return result;
}

_QWORD *ToolbarToggleStyle.ResolvedBody.backgroundContent.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *result;
  BOOL v24;
  float v25;
  __int128 v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[26];

  v3 = v1[6];
  v34 = v1[5];
  *(_OWORD *)v35 = v3;
  v4 = v1[4];
  *(_OWORD *)&v35[10] = *(__int128 *)((char *)v1 + 106);
  v5 = v1[1];
  v29 = *v1;
  v30 = v5;
  v6 = v1[3];
  v31 = v1[2];
  v32 = v6;
  v33 = v4;
  v7 = v3;
  v8 = BYTE8(v3);
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  outlined copy of Environment<ControlSize>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v28);
  outlined consume of Environment<ControlSize>.Content(v7, v8);
  outlined release of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  v9 = v28;
  v10 = *(_QWORD *)&v35[16];
  v11 = v35[24];
  v12 = v35[25];
  outlined retain of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  outlined copy of Environment<CGFloat?>.Content(v10, v11, v12);
  specialized Environment.wrappedValue.getter(v10, v11 | (v12 << 8), (uint64_t)&v26);
  outlined consume of Environment<CGFloat?>.Content(v10, v11, v12);
  outlined release of ToolbarToggleStyle.ResolvedBody((uint64_t)&v29);
  v13 = v26;
  v14 = BYTE8(v26);
  static EdgeInsets.zero.getter();
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v26 = v29;
  v27 = v30;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  result = MEMORY[0x18D75B9C8](&v28);
  v24 = v28 == 0;
  v25 = 0.0;
  *(_BYTE *)a1 = v9;
  if (!v24)
    v25 = 1.0;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v22;
  *(float *)(a1 + 56) = v25;
  *(_WORD *)(a1 + 60) = 256;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarToggleStyle.ResolvedBody()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void *protocol witness for ToggleStyle.makeBody(configuration:) in conformance ToolbarToggleStyle@<X0>(__int128 *a1@<X0>, void *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD __src[45];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17[3];
  __int128 v18[3];
  __int128 v19;
  unsigned __int8 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a1[3];
  v16 = a1[2];
  v17[0] = v3;
  v4 = a1[5];
  v17[1] = a1[4];
  v17[2] = v4;
  v5 = a1[1];
  v14 = *a1;
  v15 = v5;
  outlined init with take of ToggleStyleConfiguration.Effect(v17, v18);
  outlined init with take of ToggleStyleConfiguration.Effect(v18, &v19);
  v6 = v21;
  if (v21)
  {
    v8 = *((_QWORD *)&v19 + 1);
    v7 = v19;
    v9 = v20;
    v10 = v22;
    v11 = v23;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  swift_retain();
  swift_retain();
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v18);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v7, v8, v9, v6);
  __src[0] = *((_QWORD *)&v15 + 1);
  __src[1] = v16;
  LOBYTE(__src[2]) = BYTE8(v16);
  __src[3] = v7;
  __src[4] = v8;
  __src[5] = v9;
  __src[6] = v6;
  __src[7] = v10;
  __src[8] = v11;
  __src[9] = swift_getKeyPath();
  LOBYTE(__src[10]) = 0;
  memset(&__src[11], 0, 17);
  closure #2 in ToolbarToggleStyle.makeBody(configuration:)((uint64_t *)&v14, (uint64_t)&__src[14]);
  return memcpy(a2, __src, 0x161uLL);
}

uint64_t destroy for ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  void *v2;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));

    swift_release();
  }
  outlined consume of Environment<ControlSize>.Content(*(_QWORD *)(a1 + 96), *(unsigned __int8 *)(a1 + 104));
  return outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)(a1 + 112), *(unsigned __int8 *)(a1 + 120), *(_BYTE *)(a1 + 121));
}

uint64_t initializeWithCopy for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v8;
    *(_BYTE *)(a1 + 64) = v9;
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = v6;
    swift_retain();
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<ControlSize>.Content(v14, v15);
  *(_QWORD *)(a1 + 96) = v14;
  *(_BYTE *)(a1 + 104) = v15;
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_BYTE *)(a2 + 121);
  v18 = *(unsigned __int8 *)(a2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v16, v18, v17);
  *(_QWORD *)(a1 + 112) = v16;
  *(_BYTE *)(a1 + 120) = v18;
  *(_BYTE *)(a1 + 121) = v17;
  return a1;
}

uint64_t assignWithCopy for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = (_OWORD *)(a1 + 48);
  v5 = (_OWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a2 + 48);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(_BYTE *)(a2 + 64);
      outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_BYTE *)(a1 + 64);
      *(_QWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 56) = v8;
      *(_BYTE *)(a1 + 64) = v9;
      outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
      v13 = *(void **)(a2 + 72);
      v14 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v13;
      v15 = v13;

      v16 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v16;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 48);
      v24 = *(_OWORD *)(a2 + 64);
      v23 = *(_OWORD *)(a2 + 80);
      *v4 = *v5;
      *(_OWORD *)(a1 + 64) = v24;
      *(_OWORD *)(a1 + 80) = v23;
    }
  }
  else if (v6)
  {
    v17 = *(_QWORD *)(a2 + 48);
    v18 = *(_QWORD *)(a2 + 56);
    v19 = *(_BYTE *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v17, v18, v19);
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v18;
    *(_BYTE *)(a1 + 64) = v19;
    v20 = *(void **)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    v21 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v21;
    v22 = v20;
    swift_retain();
  }
  else
  {
    v25 = *v5;
    v26 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v26;
    *v4 = v25;
  }
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(_BYTE *)(a2 + 104);
  outlined copy of Environment<ControlSize>.Content(v27, v28);
  v29 = *(_QWORD *)(a1 + 96);
  v30 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v27;
  *(_BYTE *)(a1 + 104) = v28;
  outlined consume of Environment<ControlSize>.Content(v29, v30);
  v31 = *(_QWORD *)(a2 + 112);
  v32 = *(_BYTE *)(a2 + 121);
  v33 = *(unsigned __int8 *)(a2 + 120);
  outlined copy of Environment<CGFloat?>.Content(v31, v33, v32);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = *(_BYTE *)(a1 + 121);
  *(_QWORD *)(a1 + 112) = v31;
  v36 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v33;
  *(_BYTE *)(a1 + 121) = v32;
  outlined consume of Environment<CGFloat?>.Content(v34, v36, v35);
  return a1;
}

uint64_t assignWithTake for ToolbarToggleStyle.ResolvedBody(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v4 = *(void **)(a1 + 72);
  if (!v4)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 72);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 48);
LABEL_5:
    v10 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    goto LABEL_6;
  }
  v6 = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(_QWORD *)(a1 + 72) = v5;

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
LABEL_6:
  v11 = *(_BYTE *)(a2 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = v11;
  outlined consume of Environment<ControlSize>.Content(v12, v13);
  v14 = *(_BYTE *)(a2 + 120);
  v15 = *(_BYTE *)(a2 + 121);
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_BYTE *)(a1 + 121);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v14;
  *(_BYTE *)(a1 + 121) = v15;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarToggleStyle.ResolvedBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 122))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarToggleStyle.ResolvedBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 122) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 122) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for ToolbarToggleStyle.ResolvedBody()
{
  return &unk_1E1ACC270;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>, StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ToggleStyleModifier<ButtonToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle, (uint64_t)&type metadata for ButtonToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonToggleStyle and conformance ButtonToggleStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle;
  if (!lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonToggleStyle, &type metadata for ButtonToggleStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonToggleStyle and conformance ButtonToggleStyle);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E0CE4EC0], MEMORY[0x1E0CE4EB0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    v3[1] = &protocol witness table for ToggleStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<VisionInterfaceIdiom>, ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<ButtonToggleStyle>>, ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody;
  if (!lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarToggleStyle.ResolvedBody, &unk_1E1ACC270);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarToggleStyle.ResolvedBody and conformance ToolbarToggleStyle.ResolvedBody);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonContentModifier, &type metadata for ToolbarButtonContentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarToggleStyle.ResolvedBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for Button(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>);
  }
}

void type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, a3);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E0CE4A60], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<AnyShapeStyle?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E0CE1D58], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<AnyShapeStyle?>);
  }
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>);
    v0 = type metadata accessor for _BackgroundModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(a1, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>> and conformance _ShapeView<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, MEMORY[0x1E0CE0E50]);
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier;
  if (!lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonEdgeOutsetModifier, &type metadata for ToolbarButtonEdgeOutsetModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>> and conformance _BackgroundModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>, MEMORY[0x1E0CE4B88]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<AnyShapeStyle?> and conformance _EnvironmentKeyTransformModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<AnyShapeStyle?>, MEMORY[0x1E0CE66D8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    v2 = v1;
    v3[0] = &protocol witness table for ToggleStyleConfiguration.Label;
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<ToolbarButtonHoverShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape, (uint64_t)&type metadata for ToolbarButtonHoverShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>);
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonHoverShape, &type metadata for ToolbarButtonHoverShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonHoverShape, &type metadata for ToolbarButtonHoverShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape;
  if (!lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarButtonHoverShape, &type metadata for ToolbarButtonHoverShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
  }
}

unint64_t lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect;
  if (!lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEffect, &type metadata for HoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect;
  if (!lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEffect, &type metadata for HoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>);
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintMo)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintMo);
  }
}

_QWORD *partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter()
{
  uint64_t v0;

  return implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.body.getter((_OWORD *)(v0 + 16));
}

uint64_t outlined retain of ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(void **)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  v7 = *(unsigned __int8 *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_BYTE *)(a1 + 121);
  v9 = *(unsigned __int8 *)(a1 + 120);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  outlined copy of Environment<ControlSize>.Content(v8, v7);
  outlined copy of Environment<CGFloat?>.Content(v10, v9, v11);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ToolbarButtonLabelModifier(char *a1, uint64_t a2)
{
  initializeWithCopy for ToolbarButtonLabelModifier(a2, a1);
  return a2;
}

uint64_t outlined destroy of ToolbarButtonLabelModifier(uint64_t a1)
{
  destroy for ToolbarButtonLabelModifier(a1);
  return a1;
}

uint64_t outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *partial apply for implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(_QWORD *a1)
{
  return implicit closure #2 in implicit closure #1 in ToolbarToggleStyle.ResolvedBody.label.getter(a1);
}

uint64_t outlined init with copy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for ModifiedContent<ToolbarToggleStyle.ResolvedBody, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>(0, &lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of ToolbarToggleStyle.ResolvedBody(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(void **)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 96);
  v7 = *(unsigned __int8 *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_BYTE *)(a1 + 121);
  v9 = *(unsigned __int8 *)(a1 + 120);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  outlined consume of Environment<ControlSize>.Content(v8, v7);
  outlined consume of Environment<CGFloat?>.Content(v10, v9, v11);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>);
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonEdgeOutsetModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarButtonEdgeOutsetModifier and conformance ToolbarButtonEdgeOutsetModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>> and conformance Button<A>, (uint64_t (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, (uint64_t)&protocol conformance descriptor for Button<A>);
    v3[1] = &protocol witness table for _ContentShapeKindModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>;
  if (!lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>(255, a2);
    v8[0] = a4();
    v8[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PlatformItemTintModifier, &type metadata for PlatformItemTintModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTi()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyMo();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PlatformItemTintModifier, EmptyModifier>, (uint64_t)&type metadata for PlatformItemTintModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemTintModifier and conformance PlatformItemTintModifier);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<ModifiedContent<ToggleStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, _EnvironmentKeyTransformModifier<AnyShapeStyle?>>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonEdgeOutsetModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, Platform);
  }
  return result;
}

uint64_t View.onFocus(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v15[0] = partial apply for closure #1 in View.onFocus(_:);
  v15[1] = v8;
  type metadata accessor for ResponderViewModifier<OnFocusModifier>(0, v9, v10, v11);
  v13 = v12;
  swift_retain();
  MEMORY[0x18D75B4AC](v15, a3, v13, a4);
  return swift_release();
}

uint64_t sub_187464E44()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.onFocus(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 24);
  *a2 = *(_QWORD *)(v2 + 16);
  a2[1] = v4;
  a2[2] = a1;
  swift_retain();
  return swift_retain();
}

void type metadata accessor for ResponderViewModifier<OnFocusModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ResponderViewModifier<OnFocusModifier>)
  {
    v4 = type metadata accessor for ResponderViewModifier(0, (uint64_t)&unk_1E1ABC4D0, (uint64_t)&protocol witness table for OnFocusModifier, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<OnFocusModifier>);
  }
}

uint64_t sub_187464EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for ResponderViewModifier<OnFocusModifier>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for ResponderViewModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

_QWORD *initializeBufferWithCopyOfBuffer for OnFocusModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for OnFocusModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnFocusModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for OnFocusModifier()
{
  return &unk_1E1ABC4D0;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnFocusModifier()
{
  return &protocol witness table for OnFocusModifier;
}

uint64_t OnFocusModifier.Mutation.combine<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[16];

  v2 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(_BYTE *, double))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  result = swift_dynamicCast();
  if ((_DWORD)result)
    *(_BYTE *)(v1 + 8) = v6[12];
  return result;
}

uint64_t static OnFocusModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;
  unint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v0 = MEMORY[0x1E0DEAFA0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  v1 = AGCreateWeakAttribute();
  v2 = v1;
  v9 = HIDWORD(v1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<OnFocusModifier>, (uint64_t)&unk_1E1ABC4D0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.value.getter();
  _ViewInputs.viewPhase.getter();
  lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnFocusObserver and conformance OnFocusObserver();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  v3 = swift_allocObject();
  type metadata accessor for GraphHost();
  MEMORY[0x18D75C118]();
  swift_weakInit();
  swift_release();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_DWORD *)(v4 + 24) = v2;
  *(_DWORD *)(v4 + 28) = v9;
  *(_BYTE *)(v4 + 32) = 1;
  v5 = swift_allocObject();
  MEMORY[0x18D75C118]();
  swift_weakInit();
  swift_release();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_DWORD *)(v6 + 24) = v2;
  *(_DWORD *)(v6 + 28) = v9;
  *(_BYTE *)(v6 + 32) = 0;
  v7 = MEMORY[0x1E0CE5F08];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, MEMORY[0x1E0CE5F08], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFECF8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>(&lazy protocol witness table cache variable for type External<_AppearanceActionModifier> and conformance External<A>, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, v7);
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  static _AppearanceActionModifier._makeView(modifier:inputs:body:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    static Transaction.current.getter();
    lazy protocol witness table accessor for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnFocusModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void OnFocusObserver.updateValue()()
{
  uint64_t v0;
  char v1;
  _BYTE *WeakValue;
  char v3;
  BOOL v4;
  uint64_t Value;
  uint64_t v6;
  char v7;
  _QWORD v8[8];

  if ((*(_BYTE *)(v0 + 24) & 1) != 0 || (v1 = 0, *(_DWORD *)(v0 + 20) != *(_DWORD *)AGGraphGetValue() >> 1))
  {
    *(_DWORD *)(v0 + 20) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(_BYTE *)(v0 + 24) = 0;
    v1 = 1;
  }
  WeakValue = (_BYTE *)AGGraphGetWeakValue();
  if (WeakValue)
    v4 = (v3 & 1) == 0;
  else
    v4 = 1;
  if (!v4)
    v1 |= *WeakValue ^ 1;
  if (*(_DWORD *)(v0 + 8) == *MEMORY[0x1E0CFED28])
    goto LABEL_17;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = AGGraphGetValue();
  outlined init with copy of FocusItem?(Value, (uint64_t)v8);
  if (!v8[5] && v8[6] == 1)
  {
    outlined destroy of FocusItem?((uint64_t)v8);
LABEL_17:
    OnFocusObserver.lostFocus()();
    return;
  }
  AGGraphGetValue();
  v6 = swift_retain();
  v7 = FocusItem.inFocusedResponderChain(_:)(v6);
  swift_release();
  outlined destroy of FocusItem((uint64_t)v8);
  if ((v7 & 1) == 0)
    goto LABEL_17;
  if ((v1 & 1) != 0)
    OnFocusObserver.lostFocus()();
  OnFocusObserver.gainedFocus()();
}

void OnFocusObserver.lostFocus()()
{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (*(_BYTE *)(v0 + 25) == 1 && (*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    Value = (uint64_t *)AGGraphGetValue();
    v3 = *Value;
    v2 = Value[1];
    v4 = Value[2];
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = v3;
    v5[3] = v2;
    v5[4] = v4;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    *(_BYTE *)(v0 + 25) = 0;
  }
}

void OnFocusObserver.gainedFocus()()
{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if ((*(_BYTE *)(v0 + 25) & 1) == 0 && (*(_BYTE *)(v0 + 24) & 1) == 0)
  {
    Value = (uint64_t *)AGGraphGetValue();
    v3 = *Value;
    v2 = Value[1];
    v4 = Value[2];
    v5 = (_QWORD *)swift_allocObject();
    v5[2] = v3;
    v5[3] = v2;
    v5[4] = v4;
    swift_retain_n();
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    *(_BYTE *)(v0 + 25) = 1;
  }
}

unint64_t lazy protocol witness table accessor for type OnFocusObserver and conformance OnFocusObserver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver;
  if (!lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnFocusObserver, &unk_1E1ABC550);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnFocusObserver and conformance OnFocusObserver);
  }
  return result;
}

uint64_t sub_187465A38()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187465A60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)()
{
  return closure #1 in closure #1 in static OnFocusModifier.appearanceHandler(_:_:)();
}

unint64_t lazy protocol witness table accessor for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation;
  if (!lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for OnFocusModifier.Mutation, &unk_1E1ABC450);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnFocusModifier.Mutation and conformance OnFocusModifier.Mutation);
  }
  return result;
}

void *type metadata accessor for OnFocusModifier.Mutation()
{
  return &unk_1E1ABC450;
}

__n128 __swift_memcpy26_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OnFocusObserver(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnFocusObserver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for OnFocusObserver()
{
  return &unk_1E1ABC550;
}

uint64_t specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  id v15;

  if (!a1)
    return a2();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 24) = -1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  type metadata accessor for UIView();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v9;
  v11[3] = partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error);
  v11[4] = v10;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  *(_QWORD *)(v12 + 24) = a5;
  lazy protocol witness table accessor for type Bridge and conformance Bridge();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  static UIView.animate<A>(bridgedAnimation:animations:completion:)();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((a5 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = swift_beginAccess();
  v14 = *(unsigned __int8 *)(v9 + 24);
  if (v14 == 255)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  if ((v14 & 1) != 0)
  {
    v15 = *(id *)(v9 + 16);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  swift_release();
  return swift_release();
}

uint64_t static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isEscapingClosureAtFileLocation;
  uint64_t result;

  if (!a1)
    return a2();
  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  v13 = type metadata accessor for Result();
  type metadata accessor for Optional();
  v14 = swift_allocBox();
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v15, 1, 1, v13);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a6;
  v17[3] = a2;
  v17[4] = a3;
  swift_retain();
  closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)((uint64_t)partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error), (uint64_t)v17, a1, v14, a4, a5, a6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v16, a7);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @callee_guaranteed () -> (@error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;

  type metadata accessor for UIView();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a7;
  v13[3] = a4;
  v13[4] = a1;
  v13[5] = a2;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  *(_QWORD *)(v14 + 24) = a6;
  lazy protocol witness table accessor for type Bridge and conformance Bridge();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static UIView.animate<A>(bridgedAnimation:animations:completion:)();
  swift_release();
  swift_release();
  return swift_release();
}

void specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  _QWORD v6[4];

  a2(v6);
  v3 = v6[0];
  swift_beginAccess();
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v5 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  outlined consume of Result<(), Error>?(v4, v5);
}

uint64_t closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  v7 = type metadata accessor for Result();
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v15[-v11];
  v13 = swift_projectBox();
  v16 = a4;
  v17 = a2;
  v18 = a3;
  _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC((void (*)(_BYTE *, double))partial apply for closure #1 in closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:), (uint64_t)v15, (uint64_t)v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v12, 0, 1, v7);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v9 + 40))(v13, v12, v8);
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfC@<X0>(void (*a1)(_BYTE *, double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[16];

  MEMORY[0x1E0C80A78](a1, a2);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Result();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = &v14[-v11];
  a1(v6, v10);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))(a3, v12, v7);
}

uint64_t closure #2 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Error);
  v4 = type metadata accessor for Result();
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - v8;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v9, 1, v4);
  if ((_DWORD)result != 1)
    return _ss6ResultOsRi_zrlE3getxyq_YKF(v4, (uint64_t)&v12, a2);
  __break(1u);
  return result;
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3, *(_QWORD *)(a1 + 24));
  return swift_willThrowTypedImpl();
}

uint64_t protocol witness for static UIBridgedAnimationStateKey.defaultValue.getter in conformance BridgedStateKey<A>(uint64_t a1)
{
  return static BridgedStateKey.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t UIBridgedAnimationState.bridgedState.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for BridgedVector(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>, v4);
  v7 = type metadata accessor for BridgedStateKey(0, v4, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedStateKey<A>, v7);
  return UIBridgedAnimationState.subscript.getter();
}

uint64_t UIBridgedAnimationState.bridgedState.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for BridgedVector(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>, v4);
  v7 = type metadata accessor for BridgedStateKey(0, v4, v5, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedStateKey<A>, v7);
  return UIBridgedAnimationState.subscript.setter();
}

uint64_t Bridge.animate<A>(value:time:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v39 = a3;
  v40 = a5;
  v36[1] = a2;
  v41 = a1;
  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BridgedVector(0, v9, v10, v9);
  v37 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v36 - v13;
  v38 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v16);
  v18 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v36 - v21;
  v36[0] = type metadata accessor for UIBridgedAnimationState();
  UIBridgedAnimationState.bridgedState.getter(v36[0], v23, v24, v25);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>, v11);
  LOBYTE(v47) = 1;
  AnimationContext.init(state:environment:)();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v26(v8, v41, a4);
  v41 = v6;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v8, a4);
  Animation.animate<A>(value:time:context:)();
  v27 = v37;
  v28 = *(void (**)(char *, uint64_t))(v37 + 8);
  v28(v14, v11);
  v43 = v47;
  v44 = v48;
  v45 = v49;
  v46 = v50;
  type metadata accessor for AnimationContext();
  AnimationContext.state.getter();
  UIBridgedAnimationState.bridgedState.setter((uint64_t)v42, v36[0], v29, v30);
  v31 = v38;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v22, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v31);
    v32 = 1;
    v33 = v40;
  }
  else
  {
    v34 = v40;
    v26(v40, (uint64_t)v18, a4);
    v28(v18, v11);
    v32 = 0;
    v33 = v34;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v33, v32, 1, a4);
  return swift_bridgeObjectRelease();
}

uint64_t Bridge.shouldMerge<A>(previous:value:time:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  _QWORD v35[2];
  char v36;
  char v37;

  v29 = a2;
  v8 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BridgedVector(0, v12, v13, v11);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v28 - v17;
  outlined init with copy of TableColumnList(a1, (uint64_t)v35);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for UIBridgedAnimation);
  if (swift_dynamicCast())
  {
    v19 = type metadata accessor for UIBridgedAnimationState();
    v28[1] = a3;
    v20 = v19;
    UIBridgedAnimationState.bridgedState.getter(v19, v21, v22, v23);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>, v14);
    LOBYTE(v35[0]) = 1;
    AnimationContext.init(state:environment:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, a5);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v10, a5);
    swift_retain();
    v24 = Animation.shouldMerge<A>(previous:value:time:context:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v31 = v35[0];
    v32 = v35[1];
    v33 = v36;
    v34 = v37;
    type metadata accessor for AnimationContext();
    AnimationContext.state.getter();
    UIBridgedAnimationState.bridgedState.setter((uint64_t)v30, v20, v25, v26);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v24 = 0;
  }
  return v24 & 1;
}

uint64_t Bridge.velocity<A>(value:time:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;

  v49 = a3;
  v50 = a5;
  v51 = a1;
  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BridgedVector(0, v9, v10, v9);
  v48 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v42 - v13;
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  v46 = v15;
  v47 = v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v44 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v45 = (char *)&v42 - v21;
  v22 = type metadata accessor for UIBridgedAnimationState();
  UIBridgedAnimationState.bridgedState.getter(v22, v23, v24, v25);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>, v11);
  LOBYTE(v52) = 1;
  AnimationContext.init(state:environment:)();
  v26 = v52;
  v27 = v53;
  v28 = v54;
  v29 = v55;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v43(v8, v51, a4);
  v51 = v6;
  v30 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v31 = v46;
  v32 = v8;
  v33 = v44;
  v30(v14, v32, a4);
  v52 = v26;
  v53 = v27;
  v54 = v28;
  v55 = v29;
  v34 = v45;
  Animation.velocity<A>(value:time:context:)();
  v35 = v48;
  v36 = *(void (**)(char *, uint64_t))(v48 + 8);
  v36(v14, v11);
  v37 = v47;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v33, v34, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v11) == 1)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v31);
    v38 = 1;
    v39 = v50;
  }
  else
  {
    v40 = v50;
    v43(v50, (uint64_t)v33, a4);
    v36(v33, v11);
    v38 = 0;
    v39 = v40;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v39, v38, 1, a4);
}

uint64_t protocol witness for UIBridgedAnimation.animate<A>(value:time:state:) in conformance Bridge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t *v4;

  return Bridge.animate<A>(value:time:state:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for UIBridgedAnimation.shouldMerge<A>(previous:value:time:state:) in conformance Bridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return Bridge.shouldMerge<A>(previous:value:time:state:)(a1, a2, a3, *v4, a4);
}

uint64_t protocol witness for UIBridgedAnimation.velocity<A>(value:time:state:) in conformance Bridge@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t *v4;

  return Bridge.velocity<A>(value:time:state:)(a1, a2, *v4, a3, a4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Bridge()
{
  Hasher.init(_seed:)();
  swift_retain();
  Animation.hash(into:)();
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Bridge()
{
  swift_retain();
  Animation.hash(into:)();
  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Bridge()
{
  Hasher.init(_seed:)();
  swift_retain();
  Animation.hash(into:)();
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Bridge()
{
  return static Animation.== infix(_:_:)();
}

uint64_t static BridgedVector.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  uint64_t v12;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a4, v9, a3);
}

uint64_t BridgedVector.scale(by:)()
{
  return dispatch thunk of UIBridgedAnimationVector.scale(by:)();
}

uint64_t BridgedVector.magnitudeSquared.getter()
{
  return dispatch thunk of UIBridgedAnimationVector.magnitudeSquared.getter();
}

uint64_t static BridgedVector.zero.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of IteratorProtocol.next()();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a1);
}

uint64_t static BridgedVector.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static BridgedVector.zero.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static BridgedVector.+ infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance BridgedVector<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AdditiveArithmetic.+= infix(_:_:)(a1, a2, a3);
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance BridgedVector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static BridgedVector.+ infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance BridgedVector<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AdditiveArithmetic.+= infix(_:_:)(a1, a2, a3);
}

uint64_t static AdditiveArithmetic.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BridgedVector<A>()
{
  return static BridgedVector.== infix(_:_:)();
}

uint64_t static UIView.animate(_:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = a2;
  v10[3] = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  outlined copy of AppIntentExecutor?(a4);
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:changes:completion:), v8);
  return swift_release();
}

uint64_t _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t closure #1 in static UIView.animate(_:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result;

  if (a3)
    return a3();
  return result;
}

uint64_t static UIView.animate(with:changes:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = a2;
  v10[3] = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  outlined copy of AppIntentExecutor?(a4);
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, thunk for @callee_guaranteed () -> (@error @owned Error)partial apply, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:changes:completion:), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in static UIView.animate(_:changes:completion:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t static UIView.animate(_:animations:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[6];

  v10[2] = a2;
  v10[3] = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  swift_retain();
  specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(a1, thunk for @callee_guaranteed () -> (@error @owned Error)partial apply, (uint64_t)v10, (uint64_t)partial apply for closure #1 in static UIView.animate(_:animations:completion:), v8);
  return swift_release();
}

uint64_t partial apply for closure #1 in static UIView.animate(_:animations:completion:)(char a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 1) != 0)
    v3 = 2;
  else
    v3 = a2;
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(v3);
}

void UIView.AnimationResult.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static UIView.AnimationResult.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int UIView.AnimationResult.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type UIView.AnimationResult and conformance UIView.AnimationResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult;
  if (!lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIView.AnimationResult, &type metadata for UIView.AnimationResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIView.AnimationResult and conformance UIView.AnimationResult);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UIView.AnimationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1874674F0 + 4 * byte_187C33BD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187467524 + 4 * byte_187C33BD0[v4]))();
}

uint64_t sub_187467524(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18746752C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187467534);
  return result;
}

uint64_t sub_187467540(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187467548);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_18746754C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187467554(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UIView.AnimationResult()
{
  return &type metadata for UIView.AnimationResult;
}

uint64_t sub_187467570()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    outlined consume of Result<(), Error>(*(id *)(v0 + 16), v1 & 1);
  return swift_deallocObject();
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_1874675B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1874675E0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)()
{
  uint64_t v0;

  specialized closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *__return_ptr))(v0 + 24));
}

uint64_t sub_187467618()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Bridge and conformance Bridge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Bridge, &unk_1E1B0AFD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Bridge, &unk_1E1B0AFD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Bridge and conformance Bridge;
  if (!lazy protocol witness table cache variable for type Bridge and conformance Bridge)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Bridge, &unk_1E1B0AFD0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Bridge and conformance Bridge);
  }
  return result;
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<(), Error>(a1, a2 & 1);
}

uint64_t sub_187467698()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1874676C8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v0[3], v0[4], v0[5], v0[2]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  if (v2)
    *a1 = v2;
  return result;
}

void *type metadata accessor for Bridge()
{
  return &unk_1E1B0AFD0;
}

uint64_t type metadata accessor for BridgedVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BridgedVector);
}

uint64_t type metadata accessor for BridgedStateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BridgedStateKey);
}

uint64_t getEnumTagSinglePayload for BridgedVector(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187467898 + 4 * byte_187C33BDA[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for BridgedVector(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void base witness table accessor for Equatable in BridgedVector<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for BridgedVector<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for BridgedVector<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t thunk for @callee_guaranteed () -> (@error @owned Error)partial apply()
{
  return _ss5Error_pIgzo_ytsAA_pIegrzo_TRTA_0();
}

BOOL EnvironmentValues.isHoverEffectEnabled.getter()
{
  uint64_t v0;
  char v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return (v2 & 1) == 0;
}

BOOL key path getter for EnvironmentValues.isHoverEffectEnabled : EnvironmentValues@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.isHoverEffectEnabled : EnvironmentValues()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t EnvironmentValues.isHoverEffectEnabled.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.hoverEffect<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t KeyPath;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;

  v26 = a5;
  v10 = a2;
  v11 = a1;
  v25[1] = a7;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CustomHoverEffectModifier(0, v15, v16, v15);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v11, a4, v20);
  LOBYTE(v11) = a3 == MEMORY[0x1E0CE7298];
  KeyPath = swift_getKeyPath();
  default argument 3 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)((uint64_t)&v29);
  v27 = v29;
  v28 = v30;
  CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)((uint64_t)v14, v10, KeyPath, 0, &v27, v11, 0, 1, (uint64_t)v22, 0, 1, 2, a4, a6);
  MEMORY[0x18D75B4AC](v22, a3, v17, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
}

void View.hoverEffect<A>(_:in:isEnabled:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.defaultHoverEffect(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.defaultHoverEffect.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.defaultHoverEffect.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t View.defaultHoverEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  HoverEffect.init<A>(_:)((uint64_t)v10, a3, a5, v11, &v14);
  v13 = v14;
  View.environment<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t HoverEffect.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t result;

  type metadata accessor for _AnyHoverEffectBox(0, a2, a3, a4);
  v7 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 112) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 128), a1);
  *a5 = v7;
  return result;
}

uint64_t View.hoverEffectDisabled(_:)(char a1)
{
  swift_getKeyPath();
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

void View.hoverEffect<A>(in:isEnabled:body:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t one-time initialization function for automatic()
{
  uint64_t KeyPath;
  uint64_t result;

  KeyPath = swift_getKeyPath();
  type metadata accessor for VStack<TableHeaderViewCore>(0, (unint64_t *)&lazy cache variable for type metadata for _InternalHoverEffectBox<AutomaticHoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticHoverEffect and conformance AutomaticHoverEffect, (uint64_t)&type metadata for AutomaticHoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = KeyPath;
  *(_BYTE *)(result + 24) = 0;
  static HoverEffect.automatic = result;
  return result;
}

uint64_t one-time initialization function for highlight()
{
  uint64_t result;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _InternalHoverEffectBox<HighlightHoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HighlightHoverEffect and conformance HighlightHoverEffect, (uint64_t)&type metadata for HighlightHoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  static HoverEffect.highlight = result;
  return result;
}

uint64_t static HoverEffect.highlight.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for highlight, &static HoverEffect.highlight, a1);
}

uint64_t one-time initialization function for lift()
{
  uint64_t result;

  type metadata accessor for VStack<TableHeaderViewCore>(0, &lazy cache variable for type metadata for _InternalHoverEffectBox<LiftHoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t)&type metadata for LiftHoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _InternalHoverEffectBox);
  result = swift_allocObject();
  static HoverEffect.lift = result;
  return result;
}

uint64_t static HoverEffect.lift.getter@<X0>(_QWORD *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for lift, &static HoverEffect.lift, a1);
}

uint64_t static HoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  id v24;
  uint64_t result;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 7);
  v10 = *((_DWORD *)a2 + 8);
  v11 = *((_DWORD *)a2 + 9);
  v13 = a2[5];
  v12 = a2[6];
  v14 = *((_DWORD *)a2 + 14);
  v15 = *((_DWORD *)a2 + 15);
  v16 = *((_DWORD *)a2 + 16);
  v17 = *((_DWORD *)a2 + 17);
  v19 = *((_DWORD *)a2 + 18);
  v18 = *((_DWORD *)a2 + 19);
  v20 = a2[10];
  v21 = *a2;
  v42 = *a2;
  v33 = v7;
  v44 = v7;
  v22 = v6;
  LODWORD(v43) = v6;
  v45 = __PAIR64__(v9, v8);
  v46 = v10;
  v47 = v11;
  v35 = v13;
  v36 = v12;
  v48 = v13;
  v49 = v12;
  v31 = v15;
  v32 = v14;
  v50 = __PAIR64__(v15, v14);
  v29 = v17;
  v30 = v16;
  v51 = v16;
  v52 = v17;
  v27 = v18;
  v28 = v19;
  v53 = v19;
  v54 = v18;
  v26 = v20;
  v55 = v20;
  _ViewInputs.makeIndirectOutputs()();
  LODWORD(v42) = v5;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<HoverEffect>, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  v23 = _GraphValue.value.getter();
  v24 = (id)AGSubgraphGetCurrent();
  if (!v24)
    __break(1u);
  v43 = v21;
  LODWORD(v42) = v23;
  LODWORD(v44) = v22;
  v45 = v33;
  v46 = v8;
  v47 = v9;
  v48 = __PAIR64__(v11, v10);
  v49 = v35;
  v50 = v36;
  v51 = v32;
  v52 = v31;
  v53 = v30;
  v54 = v29;
  v55 = v28;
  v56 = v27;
  v57 = v26;
  v58 = v39;
  v59 = v40;
  v60 = v41;
  v61 = a3;
  v62 = a4;
  v64 = 0;
  v65 = 0;
  v63 = v24;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of AnyHoverEffectContainer((uint64_t)&v42);
  result = _ViewOutputs.setIndirectDependency(_:)();
  *(_QWORD *)a5 = v39;
  *(_DWORD *)(a5 + 8) = v40;
  *(_DWORD *)(a5 + 12) = v41;
  return result;
}

uint64_t HoverEffect.systemHoverEffect.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

void protocol witness for CustomHoverEffect.body(content:) in conformance HoverEffect()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance HoverEffect()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

void AnyHoverEffectBox.matches(_:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyHoverEffectBox.makeChild(container:inputs:body:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyHoverEffectBox.systemHoverEffect.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL _AnyHoverEffectBox.matches(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for _AnyHoverEffectBox(0, *(_QWORD *)(*(_QWORD *)v4 + 112), *(_QWORD *)(*(_QWORD *)v4 + 120), a4);
  return swift_dynamicCastClass() != 0;
}

uint64_t _AnyHoverEffectBox.makeChild(container:inputs:body:)(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v7 = *v4;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v34 = *a2;
  v35 = v8;
  v37 = *(_OWORD *)(a2 + 3);
  v36 = v9;
  v38 = v10;
  v39 = v11;
  v12 = *(_OWORD *)(a2 + 9);
  v40 = *(_OWORD *)(a2 + 7);
  v41 = v12;
  v13 = *(_QWORD *)(v7 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableType(_:)();
  v14 = *(_QWORD *)(v7 + 120);
  LODWORD(v26) = a1;
  v23 = v13;
  v24 = type metadata accessor for AnyHoverEffectChild(0, v13, v14, v15);
  v25 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyHoverEffectChild<A>, v24);
  v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v22, v24, MEMORY[0x1E0DEDCE8], v16, MEMORY[0x1E0DEDD18], v17);
  _GraphValue.init(_:)();
  v29 = v37;
  v32 = v40;
  v26 = v34;
  v27 = v35;
  v28 = v36;
  v30 = v38;
  v31 = v39;
  v33 = v41;
  v18 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(&v21, &v26, a3, a4, v13, v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _AnyHoverEffectBox.systemHoverEffect.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  char v14;
  __int128 v15[2];
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 112);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3 + *(_QWORD *)(v8 + 128), v5, v6);
  type metadata accessor for InternalCustomHoverEffect();
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(v15, (uint64_t)v17);
    v10 = v18;
    v11 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v11 + 16))(v15, v10, v11);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    v13 = v15[0];
    v14 = BYTE1(v15[0]);
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    result = outlined destroy of InternalCustomHoverEffect?((uint64_t)v15);
    v13 = 3;
    v14 = 1;
  }
  *a3 = v13;
  a3[1] = v14;
  return result;
}

uint64_t _InternalHoverEffectBox.systemHoverEffect.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 128), v4);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 176) + 16))(v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void AnyHoverEffectContainer.updateValue()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *Value;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  unsigned int CurrentAttribute;
  unsigned int v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v1 = (uint64_t)v0;
  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)v0[17];
  v3 = (void *)v0[18];
  if (v2)
  {
    Value = (_QWORD *)AGGraphGetValue();
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*Value) & 1) != 0)
    {
      v5 = *(_QWORD *)AGGraphGetValue();
      outlined copy of AnyHoverEffectContainer.ChildEffect?(v2, v3);
      swift_retain();
      swift_release();
      v6 = v3;
      goto LABEL_7;
    }
    v15 = v0[12];
    v16 = (void *)v0[13];
    swift_retain();
    v3;
    _ViewOutputs.detachIndirectOutputs()();
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    AGSubgraphInvalidate();
    outlined consume of AnyHoverEffectContainer.ChildEffect?((uint64_t)v2, v3);
  }
  v7 = *(_QWORD *)AGGraphGetValue();
  v9 = v0[14];
  v8 = v0[15];
  v10 = (id)AGSubgraphGetGraph();
  swift_retain();
  swift_retain();
  v11 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
    __break(1u);
  v13 = CurrentAttribute;
  AGGraphClearUpdate();
  v14 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in AnyHoverEffectContainer.makeChild(_:body:)(v1, v7, v13, v9, v8, v11, &v15);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  swift_release();
  swift_release();

  v5 = v15;
  v6 = v16;
LABEL_7:
  v15 = v5;
  AGGraphSetOutputValue();
  outlined consume of AnyHoverEffectContainer.ChildEffect?((uint64_t)v2, v3);
  *(_QWORD *)(v1 + 136) = v5;
  *(_QWORD *)(v1 + 144) = v6;
}

id closure #1 in AnyHoverEffectContainer.makeChild(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, _QWORD, uint64_t *, uint64_t, uint64_t);
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v29 = *(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 56);
  v26 = *(_QWORD *)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v28 = *(_OWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  swift_beginAccess();
  v14 = *(_DWORD *)(v8 + 16);
  v15 = *(_QWORD *)(v8 + 24);
  v24 = *(_OWORD *)(v8 + 48);
  v25 = *(_OWORD *)(v8 + 32);
  v17 = *(_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v8 + 72);
  v18 = *(_BYTE *)(v8 + 80);
  v19 = *(_BYTE *)(v8 + 81);
  v20 = *(_QWORD *)(v8 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(_QWORD *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v25;
  *(_OWORD *)(v21 + 48) = v24;
  *(_QWORD *)(v21 + 64) = v17;
  *(_QWORD *)(v21 + 72) = v16;
  *(_BYTE *)(v21 + 80) = v18;
  *(_BYTE *)(v21 + 81) = v19;
  *(_QWORD *)(v21 + 88) = v20;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v26;
  LODWORD(v37) = v29;
  v38 = v21;
  v39 = v10;
  v40 = v11;
  v41 = v27;
  v42 = v9;
  v43 = v28;
  v44 = v12;
  v45 = v13;
  v22 = *(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(&v46, a3, &v36, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v36 = *(_QWORD *)(a1 + 96);
  v37 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  _ViewOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a7 = a2;
  a7[1] = a6;
  swift_retain();
  return a6;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyHoverEffectContainer()
{
  lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer();
  return static AsyncAttribute.flags.getter();
}

uint64_t AnyHoverEffectChild.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 24);
  AGGraphGetValue();
  type metadata accessor for _AnyHoverEffectBox(0, v3, v7, v8);
  swift_retain();
  v9 = swift_dynamicCastClass();
  if (!v9)
    return swift_release();
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9 + *(_QWORD *)(*(_QWORD *)v9 + 128), v3);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v15[-2] = a1;
  v15[-1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyHoverEffectChild<A>, a1, v12);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v15[-4], v3, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHoverEffectChild<A>()
{
  return specialized AnyDynamicChild.description.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnyHoverEffectChild<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyHoverEffectChild<A>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t EnvironmentValues.hoverEffectState.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.hoverEffectState.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.isHoverEffectEnabled.modify(_QWORD *a1))()
{
  uint64_t v1;
  BOOL *v2;
  _BYTE *v3;

  v2 = (BOOL *)(a1 + 1);
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = (*v3 & 1) == 0;
  return EnvironmentValues.isHoverEffectEnabled.modify;
}

uint64_t EnvironmentValues.isHoverEffectEnabled.modify()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t (*EnvironmentValues.defaultHoverEffect.modify(uint64_t a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.defaultHoverEffect.modify;
}

uint64_t EnvironmentValues.defaultHoverEffect.modify(_QWORD *a1, char a2)
{
  uint64_t v3;

  v3 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

void HoverEffectContainerModifier.body(content:)(uint64_t a1@<X8>)
{
  int *v1;
  int v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *v1;
  if (*v1)
  {
    v4 = *((_BYTE *)v1 + 33);
    if (*((_BYTE *)v1 + 34) == 1)
    {
      v5 = *((_QWORD *)v1 + 1);
      v6 = *((_BYTE *)v1 + 16);
      v7 = *((_QWORD *)v1 + 3);
      v8 = *((unsigned __int8 *)v1 + 32);
      outlined copy of Environment<Bool>.Content(v5, v6);
      outlined copy of Environment<SceneBridge?>.Content(v7, v8);
      outlined copy of Environment<Bool>.Content(v5, v6);
      v9 = specialized Environment.wrappedValue.getter(v5, v6);
      outlined consume of Environment<Bool>.Content(v5, v6);
      outlined consume of Environment<Bool>.Content(v5, v6);
      outlined consume of Environment<Color?>.Content(v7, v8);
    }
    else
    {
      v9 = 0;
    }
    *(_QWORD *)a1 = 4;
    *(_DWORD *)(a1 + 8) = v2;
    *(_BYTE *)(a1 + 12) = v4;
    *(_DWORD *)(a1 + 16) = v2;
    *(_BYTE *)(a1 + 20) = v9 & 1;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t type metadata accessor for _AnyHoverEffectBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyHoverEffectBox);
}

BOOL sub_187469B9C@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = EnvironmentValues.isHoverEffectEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187469BD8()
{
  return EnvironmentValues.isHoverEffectEnabled.setter();
}

uint64_t sub_187469BFC()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.hoverEffectDisabled(_:)(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer;
  if (!lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyHoverEffectContainer, &unk_1E1AE03A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer;
  if (!lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AnyHoverEffectContainer, &unk_1E1AE03A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHoverEffectContainer and conformance AnyHoverEffectContainer);
  }
  return result;
}

uint64_t outlined release of AnyHoverEffectContainer(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(void **)(a1 + 144);

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of AnyHoverEffectContainer.ChildEffect?(v2, v3);
  return a1;
}

void outlined consume of AnyHoverEffectContainer.ChildEffect?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();

  }
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in HoverEffect()
{
  return MEMORY[0x1E0CE83D8];
}

uint64_t type metadata accessor for AnyHoverEffectBox()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for _InternalHoverEffectBox()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _InternalHoverEffectBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _InternalHoverEffectBox);
}

uint64_t sub_187469DEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for CustomHoverEffectModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomHoverEffectModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t sub_187469E64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_187469E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for CustomHoverEffectModifier<HoverEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomHoverEffectModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187469EE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HoverEffect?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for HoverEffect?, (uint64_t)&type metadata for HoverEffect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HoverEffect?>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187469FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<HoverEffect?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HoverEffect?> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_18746A058(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void destroy for AnyHoverEffectContainer(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  if (*(_QWORD *)(a1 + 136))
  {
    swift_release();

  }
}

uint64_t initializeWithCopy for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = (_OWORD *)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(void **)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = v9;
  if (v6)
  {
    v11 = *(void **)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v6;
    *(_QWORD *)(a1 + 144) = v11;
    swift_retain();
    v12 = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 136) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  v4 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v4;
  swift_retain();
  swift_release();
  v5 = *(void **)(a2 + 128);
  v6 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v5;
  v7 = v5;

  v8 = *(_QWORD *)(a2 + 136);
  if (!*(_QWORD *)(a1 + 136))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 136) = v8;
      v12 = *(void **)(a2 + 144);
      *(_QWORD *)(a1 + 144) = v12;
      swift_retain();
      v13 = v12;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    return a1;
  }
  if (!v8)
  {
    outlined destroy of AnyHoverEffectContainer.ChildEffect(a1 + 136);
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 136) = v8;
  swift_retain();
  swift_release();
  v9 = *(void **)(a2 + 144);
  v10 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v9;
  v11 = v9;

  return a1;
}

uint64_t outlined destroy of AnyHoverEffectContainer.ChildEffect(uint64_t a1)
{
  swift_release();

  return a1;
}

uint64_t assignWithTake for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  void *v5;
  uint64_t v6;
  void *v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  v5 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);

  v6 = *(_QWORD *)(a2 + 136);
  if (!*(_QWORD *)(a1 + 136))
    goto LABEL_5;
  if (!v6)
  {
    outlined destroy of AnyHoverEffectContainer.ChildEffect(a1 + 136);
LABEL_5:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    return a1;
  }
  *(_QWORD *)(a1 + 136) = v6;
  swift_release();
  v7 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);

  return a1;
}

uint64_t getEnumTagSinglePayload for AnyHoverEffectContainer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyHoverEffectContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for AnyHoverEffectContainer()
{
  return &unk_1E1AE03A0;
}

_QWORD *initializeBufferWithCopyOfBuffer for AnyHoverEffectContainer.ChildEffect(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  v4 = v3;
  return a1;
}

void destroy for AnyHoverEffectContainer.ChildEffect(uint64_t a1)
{
  swift_release();

}

_QWORD *assignWithCopy for AnyHoverEffectContainer.ChildEffect(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyHoverEffectContainer.ChildEffect(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

void *type metadata accessor for AnyHoverEffectContainer.ChildEffect()
{
  return &unk_1E1AE0320;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultHoverEffectKey()
{
  return &type metadata for EnvironmentValues.DefaultHoverEffectKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.HoverEffectStateKey()
{
  return &type metadata for EnvironmentValues.HoverEffectStateKey;
}

id outlined copy of AnyHoverEffectContainer.ChildEffect?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

unint64_t type metadata accessor for InternalCustomHoverEffect()
{
  unint64_t result;

  result = lazy cache variable for type metadata for InternalCustomHoverEffect;
  if (!lazy cache variable for type metadata for InternalCustomHoverEffect)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect);
  }
  return result;
}

uint64_t outlined destroy of InternalCustomHoverEffect?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for InternalCustomHoverEffect?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for InternalCustomHoverEffect?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for InternalCustomHoverEffect?)
  {
    type metadata accessor for InternalCustomHoverEffect();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect?);
  }
}

uint64_t type metadata accessor for AnyHoverEffectChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyHoverEffectChild);
}

unint64_t lazy protocol witness table accessor for type LiftHoverEffect and conformance LiftHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect;
  if (!lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftHoverEffect, &type metadata for LiftHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect;
  if (!lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LiftHoverEffect, &type metadata for LiftHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HighlightHoverEffect and conformance HighlightHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect;
  if (!lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HighlightHoverEffect, &type metadata for HighlightHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect;
  if (!lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HighlightHoverEffect, &type metadata for HighlightHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticHoverEffect and conformance AutomaticHoverEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect;
  if (!lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticHoverEffect, &type metadata for AutomaticHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect;
  if (!lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AutomaticHoverEffect, &type metadata for AutomaticHoverEffect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticHoverEffect and conformance AutomaticHoverEffect);
  }
  return result;
}

uint64_t destroy for HoverEffectContainerModifier(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return outlined consume of Environment<Color?>.Content(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t initializeWithCopy for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned __int8 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<SceneBridge?>.Content(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  outlined copy of Environment<SceneBridge?>.Content(v8, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  outlined consume of Environment<Color?>.Content(v10, v11);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 __swift_memcpy35_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HoverEffectContainerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v8;
  outlined consume of Environment<Color?>.Content(v9, v10);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectContainerModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 35))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectContainerModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 35) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContainerModifier()
{
  return &type metadata for HoverEffectContainerModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HoverEffectContainerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier;
  if (!lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HoverEffectContainerModifier, &type metadata for HoverEffectContainerModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier);
  }
  return result;
}

void base witness table accessor for _AttributeBody in AnyHoverEffectChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_18746AC08()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, PointerHoverEffectModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, PointerHoverEffectModifier>, lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect> and conformance <> ModifiedContent<A, B>, (uint64_t)&protocol witness table for PointerHoverEffectModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, PointerHoverEffectModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, PointerHoverEffectModifier>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, PointerHoverEffectModifier>);
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HoverEffectContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier, (uint64_t)&type metadata for HoverEffectContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FrameLayout>, DisableAccessibilityNodesModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<HoverEffectContainerModifier>, LiftPreviewLabelMarkingEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>, (uint64_t)&protocol witness table for LiftPreviewLabelMarkingEffect);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HoverEffectContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier, (uint64_t)&type metadata for HoverEffectContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE5308]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HoverEffectContainerModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t View.repeatingRotationEffect(anchor:duration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = static Animation.linear(duration:)();
  View.repeatingRotationEffect(from:to:anchor:animation:)(v4, a1, a2);
  return swift_release();
}

uint64_t View.repeatingRotationEffect(from:to:anchor:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];

  Animation.repeatForever(autoreverses:)();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = a3;
  v6[1] = MEMORY[0x1E0CE3010];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
  View.appearanceAnimation<A>(animation:modifier:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in View.repeatingRotationEffect(from:to:anchor:animation:)()
{
  return View.rotationEffect(_:anchor:)();
}

unint64_t lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect;
  if (!lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE3008], MEMORY[0x1E0CE3020]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _RotationEffect and conformance _RotationEffect);
  }
  return result;
}

uint64_t VisualEffect.rotationEffect(_:anchor:)()
{
  lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.rotationEffect(_:anchor:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18746B000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x1E0CE3010];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for AppearanceAnimationView();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5940], v3);
}

uint64_t sub_18746B088()
{
  lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect();
  return swift_getOpaqueTypeConformance2();
}

void static PrimitiveButtonStyle<>.accessoryBar.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall AccessoryBarButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AccessoryBarButtonStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void __swiftcall AccessoryBarActionButtonStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AccessoryBarButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AccessoryBarActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryBarButtonStyle()
{
  return &type metadata for AccessoryBarButtonStyle;
}

ValueMetadata *type metadata accessor for AccessoryBarActionButtonStyle()
{
  return &type metadata for AccessoryBarActionButtonStyle;
}

void static PrimitiveButtonStyle<>.accessoryBarAction.getter()
{
  static PrimitiveButtonStyle<>.accessoryBar.getter();
}

void AccessoryBarActionButtonStyle.makeBody(configuration:)()
{
  AccessoryBarButtonStyle.makeBody(configuration:)();
}

uint64_t View.repeatingScaleEffect(from:to:anchor:animation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.repeatingScaleEffect(from:to:anchor:animation:)(a1, a2, a3);
}

{
  uint64_t v4;
  _QWORD v6[2];

  Animation.repeatForever(autoreverses:)();
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = a3;
  v6[1] = MEMORY[0x1E0CE1BD0];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
  View.appearanceAnimation<A>(animation:modifier:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in View.repeatingScaleEffect(from:to:anchor:animation:)()
{
  return View.scaleEffect(_:anchor:)();
}

uint64_t VisualEffect.scaleEffect(_:anchor:)()
{
  lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

{
  lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect();
  return VisualEffect.geometryEffect<A>(_:)();
}

void HoverEffectContent.scaleEffect(_:anchor:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  HoverEffectContent.scaleEffect(x:y:anchor:)();
}

void HoverEffectContent.scaleEffect(x:y:anchor:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_18746B3C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = MEMORY[0x1E0CE1BD0];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v5);
  v3 = type metadata accessor for AppearanceAnimationView();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5940], v3);
}

uint64_t sub_18746B450()
{
  lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect();
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v22[120];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[8];

  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * i);
    outlined init with copy of InspectorStorage(*(_QWORD *)(a1 + 56) + 120 * i, (uint64_t)v31 + 8);
    LODWORD(v31[0]) = v15;
    v27 = v31[4];
    v28 = v31[5];
    v29 = v31[6];
    v30 = v31[7];
    v23 = v31[0];
    v24 = v31[1];
    v25 = v31[2];
    v26 = v31[3];
    outlined init with copy of InspectorStorage((uint64_t)&v23 + 8, (uint64_t)v22);
    v16 = v22[17];
    outlined destroy of InspectorStorage((uint64_t)v22);
    if (v16 == 1)
    {
      result = swift_release();
      v17 = v28;
      *(_OWORD *)(a2 + 64) = v27;
      *(_OWORD *)(a2 + 80) = v17;
      v18 = v30;
      *(_OWORD *)(a2 + 96) = v29;
      *(_OWORD *)(a2 + 112) = v18;
      v19 = v24;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v19;
      v20 = v26;
      *(_OWORD *)(a2 + 32) = v25;
      *(_OWORD *)(a2 + 48) = v20;
      return result;
    }
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v23, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    if (v6)
      goto LABEL_4;
LABEL_5:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v7)
      goto LABEL_25;
    v13 = *(_QWORD *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v7)
        goto LABEL_25;
      v13 = *(_QWORD *)(v3 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v7)
          goto LABEL_25;
        v13 = *(_QWORD *)(v3 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v7)
            goto LABEL_25;
          v13 = *(_QWORD *)(v3 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_20:
    v6 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v7)
  {
LABEL_25:
    result = swift_release();
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 1;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_QWORD *)(a2 + 120) = 0;
    return result;
  }
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v7)
      goto LABEL_25;
    v13 = *(_QWORD *)(v3 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  _BYTE v17[176];
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int64_t v22;

  v16 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v8 | (v7 << 6); ; i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * i);
    outlined init with copy of ConfirmationDialog(*(_QWORD *)(a1 + 56) + 176 * i, (uint64_t)&v21);
    v20 = v13;
    outlined init with take of AlertStorage?((uint64_t)&v20, (uint64_t)&v18, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    outlined init with copy of ConfirmationDialog((uint64_t)&v19, (uint64_t)v17);
    v14 = v17[0];
    outlined destroy of ConfirmationDialog((uint64_t)v17);
    if (v14 == 1)
    {
      swift_release();
      return outlined init with take of AlertStorage?((uint64_t)&v18, a2, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    }
    result = outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v18, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(_QWORD, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    if (v5)
      goto LABEL_4;
LABEL_5:
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v10 >= v22)
      goto LABEL_25;
    v11 = *(_QWORD *)(v16 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v22)
        goto LABEL_25;
      v11 = *(_QWORD *)(v16 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v22)
          goto LABEL_25;
        v11 = *(_QWORD *)(v16 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v22)
            goto LABEL_25;
          v11 = *(_QWORD *)(v16 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_25:
    result = swift_release();
    *(_BYTE *)(a2 + 176) = 0;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v11 = *(_QWORD *)(v16 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v22)
      goto LABEL_25;
    v11 = *(_QWORD *)(v16 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(uint64_t a1)
{
  _QWORD v3[19];

  specialized UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(a1);
  v3[0] = a1;
  PreferenceList.subscript.getter();
  PreferenceList.subscript.getter();
  PreferenceList.subscript.getter();
  specialized UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(v3[18]);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v3, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
  return swift_bridgeObjectRelease();
}

void specialized UIKitInspectorV3Bridge.updateTransform()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[48];

  v1 = v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v1, (uint64_t)v2);
  __asm { BR              X10 }
}

void sub_18746B860()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;

  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v11);
  v1 = (_QWORD *)(v0 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
  swift_beginAccess();
  if (*v1)
  {
    v2 = *(void **)(v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v2)
    {
      v3 = v1[2];
      swift_retain();
      v4 = v2;
      v5 = objc_msgSend(v4, sel_presentationController);
      if (v5)
      {
        v6 = v5;
        v7 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v8 = (_QWORD *)swift_allocObject();
        v8[2] = v7;
        v8[3] = v6;
        v8[4] = v4;
        v8[5] = v3;
        swift_retain();
        v9 = v4;
        swift_retain();
        v10 = v6;
        onNextMainRunLoop(do:)();
        swift_release();

        swift_release();
        swift_release();
      }
      else
      {
        swift_release();

      }
    }
  }
}

id UIKitNavigationController.init(rootViewController:)(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t ObjCClassFromMetadata;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  objc_super v19;

  v1[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven] = 0;
  v3 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update;
  type metadata accessor for PlatformBarUpdater();
  v4 = (_QWORD *)swift_allocObject();
  v5 = v1;
  v4[2] = specialized InferredToolbarState.init()();
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4[5] = 0;
  swift_unknownObjectWeakInit();
  v6 = MEMORY[0x1E0DEE9E8];
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = v6;
  *(_QWORD *)&v1[v3] = v4;
  v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;
  v7 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  *(_OWORD *)v7 = xmmword_187BF9840;
  *((_QWORD *)v7 + 2) = 0;
  v8 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  *(_OWORD *)v8 = xmmword_187C34330;
  *((_QWORD *)v8 + 2) = 0;
  v9 = &v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_backgroundHost] = 0;

  type metadata accessor for UIKitNavigationBar();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for UIKitToolbar();
  v11 = swift_getObjCClassFromMetadata();
  v19.receiver = v5;
  v19.super_class = (Class)type metadata accessor for UIKitNavigationController();
  v12 = objc_msgSendSuper2(&v19, sel_initWithNavigationBarClass_toolbarClass_, ObjCClassFromMetadata, v11);
  if (a1)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v13 + 32) = a1;
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v14 = v12;
  v15 = a1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setViewControllers_, isa);

  v17 = objc_msgSend(v14, sel_navigationBar);
  objc_msgSend(v17, sel_setPrefersLargeTitles_, 1);

  return v14;
}

Swift::Void __swiftcall UIKitNavigationController.pushViewController(_:animated:)(UIViewController *_, Swift::Bool animated)
{
  char *v2;
  char *v3;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt *v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  uint64_t Strong;
  uint64_t v14;
  objc_class *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  UIViewController *v22;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  UIViewController *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  objc_super v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int16 v49;
  _BYTE __dst[392];
  _BYTE v51[392];
  _QWORD __src[49];
  _BYTE v53[9];
  _OWORD v54[9];
  __int16 v55;
  objc_super v56;
  _BYTE v57[24];
  __int128 v58;
  uint64_t v59;

  v3 = v2;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for NavigationStackHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for NavigationStackHostingController);
  if ((-[UIViewController isKindOfClass:](_, sel_isKindOfClass_, swift_getObjCClassFromMetadata()) & 1) != 0)
  {
    v37.receiver = v2;
    v37.super_class = (Class)type metadata accessor for UIKitNavigationController();
    -[UIViewController pushViewController:animated:](&v37, sel_pushViewController_animated_, _, animated);
    return;
  }
  v6 = (__int128 *)&v2[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  swift_beginAccess();
  outlined init with copy of _PresentationTransitionOutputs.Content(v6, (uint64_t)&v58);
  if (v59 != 1)
  {
    if (v59)
    {
      outlined init with take of OptionalBinaryInteger(&v58, (uint64_t)__src);
      v8 = __src[4];
      __swift_project_boxed_opaque_existential_1(__src, __src[3]);
      (*(void (**)(UIViewController *, Swift::Bool))(v8 + 8))(_, animated);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
    }
    else
    {
      v38.receiver = v3;
      v38.super_class = (Class)type metadata accessor for UIKitNavigationController();
      -[UIViewController pushViewController:animated:](&v38, sel_pushViewController_animated_, _, animated);
    }
    return;
  }
  v7 = (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  swift_beginAccess();
  outlined init with copy of SwiftUIAnySortComparator?(v7, (uint64_t)__src, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (__src[1] == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)__src, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_13:
    v15 = (objc_class *)type metadata accessor for UIKitNavigationController();
    v56.receiver = v3;
    v56.super_class = v15;
    -[UIViewController pushViewController:animated:](&v56, sel_pushViewController_animated_, _, animated);
    return;
  }
  outlined init with take of NavigationAuthority((uint64_t)__src, (uint64_t)v57);
  v9 = (Swift::UInt *)&v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  v10 = v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context + 8];
  if (v10 == 6)
    goto LABEL_12;
  v11 = *v9;
  v12 = v9[2];
  Strong = swift_weakLoadStrong();
  if (!Strong
    || (v14 = Strong + 16,
        swift_beginAccess(),
        outlined init with take of Image.Resolved?(v14, (uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v53, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of Image.Resolved?((uint64_t)v53, (uint64_t)v54, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v54) == 1))
  {
LABEL_12:
    outlined destroy of NavigationAuthority((uint64_t)v57);
    goto LABEL_13;
  }
  v46 = v54[6];
  v47 = v54[7];
  v48 = v54[8];
  v49 = v55;
  v42 = v54[2];
  v43 = v54[3];
  v44 = v54[4];
  v45 = v54[5];
  v40 = v54[0];
  v41 = v54[1];
  NavigationState.stackContent(for:)(v11, v10, v12, (uint64_t)__dst);
  outlined init with take of Image.Resolved?((uint64_t)__dst, (uint64_t)v51, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with take of Image.Resolved?((uint64_t)v51, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)__src) == 1)
  {
    outlined destroy of NavigationAuthority((uint64_t)v57);
    outlined retain of NavigationState?((uint64_t)v53, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
    goto LABEL_13;
  }
  v16 = objc_msgSend(v3, sel_topViewController);
  if (v16)
  {
    v17 = v16;
    v18 = swift_dynamicCastClass();
    if (!v18)
    {
      v21 = MEMORY[0x1E0DEE9D8];
      goto LABEL_22;
    }
    v19 = *(void **)(v18 + direct field offset for UIHostingController.toolbarBridge);
    v20 = v19;

    if (v19)
    {
      v21 = *(_QWORD *)&v20[direct field offset for ToolbarBridge.navigationAdaptor];
      swift_bridgeObjectRetain();
      v17 = v20;
LABEL_22:

      goto LABEL_23;
    }
  }
  v21 = MEMORY[0x1E0DEE9D8];
LABEL_23:
  v22 = _;
  v23 = static Edge.Set.all.getter();
  v39 = 0;
  Transaction.disablesAnimations.setter();
  v36 = AGMakeUniqueID();
  memcpy(__dst, __src, sizeof(__dst));
  v24 = NavigationState.StackContent.topKey.getter();
  v26 = v25;
  v35 = v27;
  swift_retain();
  v28 = objc_msgSend(v3, sel_viewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v31 = v26;
  type metadata accessor for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>(0);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v22;
  *(_QWORD *)(v32 + 24) = v21;
  *(_QWORD *)(v32 + 32) = -1;
  *(_BYTE *)(v32 + 40) = v23;
  v33 = v22;
  swift_bridgeObjectRetain();
  v34 = Transaction.disablesAnimations.getter();
  swift_release();
  *(_QWORD *)__dst = v32;
  *(_QWORD *)&__dst[8] = v30;
  *(_QWORD *)&__dst[16] = 0;
  *(_QWORD *)&__dst[24] = 0;
  *(_QWORD *)&__dst[32] = 1;
  *(_QWORD *)&__dst[40] = v36;
  *(_QWORD *)&__dst[48] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(_QWORD *)&__dst[56] = 0;
  __dst[64] = 18;
  *(_QWORD *)&__dst[72] = v24;
  *(_QWORD *)&__dst[80] = v31;
  *(_QWORD *)&__dst[88] = v35;
  memset(&__dst[96], 0, 24);
  __dst[120] = v34 & 1;
  *(_QWORD *)&__dst[128] = 0;
  v46 = 0u;
  v47 = *(_OWORD *)&__dst[112];
  *(_QWORD *)&v48 = 0;
  v42 = *(_OWORD *)&__dst[32];
  v43 = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v44 = *(_OWORD *)&__dst[64];
  v45 = *(_OWORD *)&__dst[80];
  v40 = *(_OWORD *)__dst;
  v41 = 0u;
  NavigationAuthority.enqueueRequest(_:)(&v40);
  outlined retain of NavigationState?((uint64_t)v53, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of NavigationState?);
  swift_bridgeObjectRelease();

  outlined release of NavigationState.StackContent?((uint64_t)v51);
  swift_release();
  outlined destroy of NavigationAuthority((uint64_t)v57);
  outlined release of NavigationRequest((uint64_t)__dst);
}

Swift::Void __swiftcall UIKitNavigationController.viewWillLayoutSubviews()()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  objc_super v5;

  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for UIKitNavigationController();
  objc_msgSendSuper2(&v5, sel_viewWillLayoutSubviews);
  v1 = objc_msgSend(v0, sel_tabBarController);
  if (v1)
  {
    v2 = v1;
    type metadata accessor for UIKitTabBarController();
    v3 = (void *)swift_dynamicCastClass();
    if (!v3)

  }
  else
  {
    v3 = 0;
  }
  v4 = v0;
  PlatformBarUpdater.callAsFunction(configurations:context:)(0, v0, v3);

}

void UIKitNavigationController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  void *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  objc_super v17;

  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for UIKitNavigationController();
  objc_msgSendSuper2(&v17, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  *((_BYTE *)v3 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize) = 1;
  v15 = (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v16 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v11 = MEMORY[0x1E0C809B0];
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v14 = &block_descriptor_38_0;
  v8 = _Block_copy(&v11);
  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15 = partial apply for closure #2 in UIKitNavigationController.viewWillTransition(to:with:);
  v16 = v9;
  v11 = v7;
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v14 = &block_descriptor_44_0;
  v10 = _Block_copy(&v11);
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v8, v10);
  _Block_release(v10);
  _Block_release(v8);
}

void closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_BYTE *)MEMORY[0x18D760234](v2);
  if (v3)
  {
    v3[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;

  }
}

Swift::Void __swiftcall UIKitNavigationController._observeScrollViewDidScroll(_:)(UIScrollView *a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  void *v6;
  id v7;
  objc_super v8;

  v2 = v1;
  if ((*((_BYTE *)v1 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize) & 1) == 0)
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for UIKitNavigationController();
    -[UIScrollView _observeScrollViewDidScroll:](&v8, sel__observeScrollViewDidScroll_, a1);
    v4 = objc_msgSend(v2, sel_tabBarController);
    if (v4)
    {
      v5 = v4;
      type metadata accessor for UIKitTabBarController();
      v6 = (void *)swift_dynamicCastClass();
      if (!v6)

    }
    else
    {
      v6 = 0;
    }
    v7 = v2;
    PlatformBarUpdater.callAsFunction(context:)(v2, v6);

  }
}

Swift::Void __swiftcall UIKitNavigationController._observeScrollViewGeometryAffectingContentBottomDidChange(_:)(UIScrollView *a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  void *v6;
  id v7;
  objc_super v8;

  v2 = v1;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for UIKitNavigationController();
  -[UIScrollView _observeScrollViewGeometryAffectingContentBottomDidChange:](&v8, sel__observeScrollViewGeometryAffectingContentBottomDidChange_, a1);
  v4 = objc_msgSend(v2, sel_tabBarController);
  if (v4)
  {
    v5 = v4;
    type metadata accessor for UIKitTabBarController();
    v6 = (void *)swift_dynamicCastClass();
    if (!v6)

  }
  else
  {
    v6 = 0;
  }
  v7 = v2;
  PlatformBarUpdater.callAsFunction(context:)(v2, v6);

}

id UIKitNavigationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitNavigationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id UIKitTabBarController.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  Class v4;
  id v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  objc_super v12;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  v5 = objc_allocWithZone(v4);
  v6 = v0;
  *(_QWORD *)&v1[v3] = objc_msgSend(v5, sel_init);
  v7 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_update;
  type metadata accessor for PlatformBarUpdater();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = specialized InferredToolbarState.init()();
  v8[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v8[5] = 0;
  swift_unknownObjectWeakInit();
  v9 = MEMORY[0x1E0DEE9E8];
  v8[7] = 0;
  v8[8] = 0;
  v8[6] = v9;
  *(_QWORD *)&v6[v7] = v8;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_backgroundHost] = 0;

  v12.receiver = v6;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, sel_initWithNibName_bundle_, 0, 0);
  swift_unknownObjectWeakAssign();
  return v10;
}

Swift::Void __swiftcall UIKitTabBarController.viewDidMove(to:shouldAppearOrDisappear:)(UIWindow_optional *to, Swift::Bool shouldAppearOrDisappear)
{
  char *v2;
  char *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;

  v3 = v2;
  v13.receiver = v3;
  v13.super_class = (Class)swift_getObjectType();
  -[UIWindow_optional viewDidMoveToWindow:shouldAppearOrDisappear:](&v13, sel_viewDidMoveToWindow_shouldAppearOrDisappear_, to, shouldAppearOrDisappear);
  v6 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  v7 = *(char **)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge];
  v8 = *(_QWORD *)&v7[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences];
  if (v8 != 1 && to != 0)
  {
    outlined copy of Transaction?(*(_QWORD *)&v7[direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences]);
    v10 = v7;
    specialized UIKitInspectorV3Bridge.preferencesDidChange(_:)(v8);

    outlined consume of Transaction?(v8);
    v11 = *(_QWORD *)&v3[v6];
    v12 = *(_QWORD *)(v11 + direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences);
    *(_QWORD *)(v11 + direct field offset for UIKitInspectorV3Bridge.delayedPopoverPreferences) = 1;
    outlined consume of Transaction?(v12);
  }
}

void @objc UIKitTabBarController._observeScrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3, const char **a4)
{
  const char *v6;
  id v7;
  id v8;
  id v9;
  objc_super v10;

  v10.receiver = a1;
  v10.super_class = (Class)swift_getObjectType();
  v6 = *a4;
  v7 = a3;
  v8 = v10.receiver;
  objc_msgSendSuper2(&v10, v6, v7);
  v9 = v8;
  PlatformBarUpdater.callAsFunction(context:)(0, v8);

}

void @objc UIKitNavigationController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for UIKitTabBarController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitSplitViewController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitNavigationBar()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for UIKitToolbar()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitNavigationController.PlatformNavigationRequestStrategy()
{
  return &type metadata for UIKitNavigationController.PlatformNavigationRequestStrategy;
}

id specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(void *a1, char a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD v25[5];
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[3];

  v3 = v2;
  v6 = *(void **)&v2[direct field offset for UIHostingController.host];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v7 = v6;
  ViewRendererHost.preferenceValue<A>(_:)();

  if (*(_QWORD *)&v30[2] == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?, (uint64_t)&type metadata for _NavigationTransitionOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    memset(v30, 0, sizeof(v30));
    return objc_msgSend(v2, sel__setPreferredTransition_, 0);
  }
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)v30, (uint64_t)v28);
  outlined destroy of _NavigationTransitionOutputs((uint64_t)v30);
  outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)v28, (uint64_t)v30);
  if (!*(_QWORD *)&v30[2])
    return objc_msgSend(v2, sel__setPreferredTransition_, 0);
  v8 = *(_QWORD *)&v30[0];
  v28[0] = *(_OWORD *)((char *)v30 + 8);
  v28[1] = *(_OWORD *)((char *)&v30[1] + 8);
  v29 = *((_QWORD *)&v30[2] + 1);
  result = objc_msgSend(a1, sel_view);
  if (result)
  {
    v11 = result;
    MEMORY[0x1E0C80A78](result, v10);
    v25[2] = v8;
    v25[3] = v28;
    v13 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v12, partial apply for specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:), (uint64_t)v25);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    v14 = (void *)swift_dynamicCastClass();

    if (!v14)
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3FD0]), sel_init);
    objc_msgSend(v15, sel_set_popPreemptsPushInSwiftUIEnabled_, a2 & 1);
    v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    outlined init with copy of AnyHashable((uint64_t)v28, (uint64_t)v26);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    v18 = v26[1];
    *(_OWORD *)(v17 + 24) = v26[0];
    *(_OWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 56) = v27;
    *(_QWORD *)(v17 + 64) = v8;
    swift_retain();
    UIZoomTransitionOptions.alignmentRectProvider.setter();
    swift_release();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerTransition);
    v19 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = v19;
    v21[3] = v20;
    v21[4] = v14;
    v22 = v14;
    v23 = v15;
    swift_retain();
    swift_retain();
    v24 = (void *)static UIViewControllerTransition.zoom(options:sourceViewProvider:)();

    swift_release();
    swift_release();
    swift_release();
    objc_msgSend(v3, sel_setPreferredTransition_, v24);

    objc_msgSend(v3, sel_setModalPresentationStyle_, 5);
    return (id)outlined destroy of AnyHashable((uint64_t)v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  _BYTE v11[40];

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x18D760234](v3);
  if (!result)
    goto LABEL_3;
  v5 = (void *)result;
  specialized UIHostingController.matchedTransitionAlignmentRect<A>(id:namespace:)((uint64_t)v10);
  v8 = v10[1];
  v9 = v10[0];

  result = outlined init with take of CGRect?((uint64_t)v10, (uint64_t)v11);
  v7 = v8;
  v6 = v9;
  if (v11[32] == 1)
  {
LABEL_3:
    v6 = *MEMORY[0x1E0C9D628];
    v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  }
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 32) = 0;
  return result;
}

id specialized closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  _QWORD v20[6];

  v6 = a2 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x18D760234](v6);
  if (!v7)
  {
LABEL_7:
    if (!a4)
      return 0;
LABEL_8:
    v17 = *(id *)&a4[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
    v18 = v17;
    return v17;
  }
  v8 = (void *)v7;
  swift_beginAccess();
  v9 = (void *)MEMORY[0x18D760234](a3 + 16);
  if (!v9)
  {

    goto LABEL_7;
  }
  v10 = v9;
  v11 = specialized UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(v9, a4);
  if (!v11)
  {

    if (!a4)
      return 0;
    goto LABEL_8;
  }
  v12 = v11;
  v13 = objc_msgSend(v8, sel_transitionCoordinator);
  if (v13)
  {
    v14 = v13;
    v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v12, sel_setNeedsLayout);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v12;
    v20[4] = partial apply for closure #1 in closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:);
    v20[5] = v15;
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 1107296256;
    v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v20[3] = &block_descriptor_30_0;
    v16 = _Block_copy(v20);
    v12 = v12;
    swift_release();
    objc_msgSend(v14, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v16);
    swift_unknownObjectRelease();

    _Block_release(v16);
  }
  else
  {

  }
  v17 = *(id *)&v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v17;
}

id specialized UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(void *a1, void *a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  id result;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(void **)(v2 + direct field offset for UIHostingController.host);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v6 = v5;
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v20 == 1)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?, (uint64_t)&type metadata for _NavigationTransitionOutputs, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    goto LABEL_8;
  }
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)&v17, (uint64_t)&v16);
  outlined destroy of _NavigationTransitionOutputs((uint64_t)&v17);
  outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)&v16, (uint64_t)&v17);
  if (!v20)
    goto LABEL_8;
  v7 = v17;
  result = objc_msgSend(a1, sel_view, v18, v19, v20, v21);
  if (result)
  {
    v10 = result;
    MEMORY[0x1E0C80A78](result, v9);
    v15[2] = v7;
    v15[3] = &v16;
    v12 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v11, (uint64_t (*)(uint64_t *))closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)specialized partial apply, (uint64_t)v15);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    v13 = swift_dynamicCastClass();

    if (v13)
    {
      outlined destroy of AnyHashable((uint64_t)&v16);
      return (id)v13;
    }

    outlined destroy of AnyHashable((uint64_t)&v16);
LABEL_8:
    v14 = a2;
    return a2;
  }
  __break(1u);
  return result;
}

id specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  id v5;
  uint64_t v6;
  char *v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  objc_super v13;

  v1 = direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate;
  v2 = *(void **)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  if (v2)
  {
    v3 = *(id *)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for PopoverPresentationDelegate();
    v5 = objc_allocWithZone(v4);
    v6 = OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_clientAllowsAutomaticPopoverDismissal;
    v7 = v0;
    v8 = (char *)v5;
    *((_BYTE *)v5 + v6) = closure #1 in variable initialization expression of PopoverPresentationDelegate.clientAllowsAutomaticPopoverDismissal() & 1;
    *(_QWORD *)&v8[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate + 8] = &protocol witness table for UIKitInspectorV3Bridge<A>;
    swift_unknownObjectWeakInit();

    v13.receiver = v8;
    v13.super_class = v4;
    v9 = objc_msgSendSuper2(&v13, sel_init);

    v10 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v9;
    v3 = v9;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

uint64_t specialized UIKitInspectorV3Bridge.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v1 = v0;
  *(_QWORD *)(v0 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = 0;
  swift_release();
  v2 = direct field offset for UIKitInspectorV3Bridge.presentedVC;
  v3 = *(char **)(v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  if (v3)
  {
    v4 = *(void **)&v3[direct field offset for UIHostingController.host];
    *(_QWORD *)&v12 = 0;
    BYTE8(v12) = 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    v5 = v4;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

    v3 = *(char **)(v0 + v2);
  }
  *(_QWORD *)(v0 + v2) = 0;

  v6 = (_QWORD *)(v0 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  v7 = MEMORY[0x1E0DEE9E0];
  *v6 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
  swift_beginAccess();
  *v8 = v7;
  swift_bridgeObjectRelease();
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v9 = v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v12, v9, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  swift_endAccess();
  *(_QWORD *)&v14 = 0;
  v12 = 0u;
  v13 = 0u;
  BYTE8(v14) = 3;
  v10 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v12, v10);
  result = swift_endAccess();
  *(_BYTE *)(v1 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
  return result;
}

uint64_t specialized UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v2 = v1;
  v30 = a1;
  PreferenceList.subscript.getter();
  v4 = v21;
  v5 = direct field offset for UIKitInspectorV3Bridge.anchorSeed;
  v6 = *(_DWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.anchorSeed);
  v8 = v6 != -1 && (_DWORD)v21 != -1 && v6 == (_DWORD)v21;
  v9 = v8;
  if (!v8)
  {
    v10 = (uint64_t *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
    swift_beginAccess();
    *v10 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v2 + v5) = v4;
  }
  v30 = a1;
  PreferenceList.subscript.getter();
  v11 = v20;
  v12 = v21;
  v13 = direct field offset for UIKitInspectorV3Bridge.inspectorSeed;
  v14 = *(_DWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.inspectorSeed);
  if (v14 != -1 && (_DWORD)v21 != -1 && v14 == (_DWORD)v21)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      return result;
LABEL_22:
    v19 = v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
    swift_beginAccess();
    outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v19, (uint64_t)&v20);
    outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v20, (uint64_t)&v30);
    __asm { BR              X10 }
  }
  v17 = (uint64_t *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
  swift_beginAccess();
  *v17 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v2 + v13) = v12;
  if (*(_QWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.presentedVC))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  specialized Sequence.first(where:)(v11, (uint64_t)&v20);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v21 + 1) != 1)
  {
    LODWORD(v30) = v20;
    v35 = v25;
    v36 = v26;
    v37 = v27;
    v38 = v28;
    v31 = v21;
    v32 = v22;
    v33 = v23;
    v34 = v24;
    v29 = a1;
    PreferenceList.subscript.getter();
    PreferenceList.subscript.getter();
    specialized UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)();
    swift_bridgeObjectRelease();
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v20, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v30, (uint64_t (*)(_QWORD))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    if ((v9 & 1) != 0)
      return result;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  result = outlined destroy of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)&v20);
  if ((v9 & 1) == 0)
    goto LABEL_22;
  return result;
}

void specialized UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  _OWORD v8[6];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    outlined init with copy of PopoverPresentation(a1 + 104 * v2 - 72, (uint64_t)v8);
    if (v2 != 1)
    {
      v4 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
      swift_beginAccess();
      outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v4, (uint64_t)&v7);
      outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v7, (uint64_t)&v5);
      __asm { BR              X10 }
    }
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
  }
  v3 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v3, (uint64_t)&v7);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v7, (uint64_t)&v5);
  __asm { BR              X10 }
}

void sub_18746E518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;

  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&a22);
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&a35);
  if (!*(_QWORD *)(v36 - 208))
  {
    v37 = *(void **)(v35 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v37)
    {
      v38 = v37;
      specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v38);

    }
  }
  JUMPOUT(0x18746E760);
}

uint64_t outlined init with copy of PopoverPresentation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PopoverPresentation(a2, a1);
  return a2;
}

uint64_t outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized closure #2 in UIKitInspectorV3Bridge.updateTransform()(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x18D760234](v3);
  if (v4)
  {
    v5 = (char *)v4;
    MEMORY[0x18D75B908]();
    if (*(_QWORD *)&v5[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor])
    {
      swift_retain();
      v6 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);
      swift_release();

    }
    static Update.end()();

  }
}

void specialized closure #1 in UIKitInspectorV3Bridge.updateTransform()(uint64_t a1, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  Swift::Bool v10;
  Swift::Bool v11;
  id v12;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v7 = (void *)v6;
    MEMORY[0x18D75B908]();
    v8 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    v9 = &a3[direct field offset for PresentationHostingController.lastPresentationOptions];
    swift_beginAccess();
    if (*(_QWORD *)v9)
      v10 = v9[89] & 1;
    else
      v10 = 0;
    v11 = PopoverPresentationDelegate.shouldDismiss(presentationController:featureEnabled:)((UIPresentationController)a2, v10);

    if (v11)
      objc_msgSend(a3, sel_dismissViewControllerAnimated_completion_, 1, 0);
    v12 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);

    static Update.end()();
  }
}

void specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];

  if ((objc_msgSend(a1, sel_isBeingDismissed) & 1) == 0)
  {
    v2 = objc_msgSend(a1, sel_presentingViewController);
    if (!v2)
      v2 = a1;
    v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v5[4] = partial apply for specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:);
    v5[5] = v3;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed () -> ();
    v5[3] = &block_descriptor_35;
    v4 = _Block_copy(v5);
    swift_release();
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, v4);
    _Block_release(v4);

  }
}

uint64_t outlined assign with copy of PopoverPresentation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _OWORD v32[2];
  uint64_t v33;
  _WORD v34[20];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[48];
  __int128 v45;
  uint64_t v46;

  v8 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
  if (*(_BYTE *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) != 2)
    return;
  outlined init with copy of AnyHashable(a1, (uint64_t)&v35);
  v15 = MEMORY[0x1E0DEC198];
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v35, (uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  outlined init with copy of SwiftUIAnySortComparator?(a2, (uint64_t)&v44[8], (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v15);
  if (!*((_QWORD *)&v43 + 1))
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (!*(_QWORD *)&v44[32])
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      goto LABEL_8;
    }
LABEL_11:
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v42, (uint64_t (*)(_QWORD))type metadata accessor for (AnyHashable?, AnyHashable?));
LABEL_12:
    outlined init with copy of SwiftUIAnySortComparator?(a5, (uint64_t)&v35, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
    if ((_QWORD)v35)
    {
      *(_OWORD *)&v44[32] = v39;
      v45 = v40;
      v46 = v41;
      v42 = v35;
      v43 = v36;
      *(_OWORD *)v44 = v37;
      *(_OWORD *)&v44[16] = v38;
      specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(a3, (uint64_t)&v42, a6, a7, a8 & 1);
      goto LABEL_14;
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v35, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    *(_BYTE *)(a4 + v8) = 1;
    specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a3);
    return;
  }
  outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v42, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (!*(_QWORD *)&v44[32])
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    outlined destroy of AnyHashable((uint64_t)v34);
    goto LABEL_11;
  }
  v32[0] = *(_OWORD *)&v44[8];
  v32[1] = *(_OWORD *)&v44[24];
  v33 = *(_QWORD *)&v44[40];
  v16 = MEMORY[0x18D75E284](v34, v32);
  outlined destroy of AnyHashable((uint64_t)v32);
  v17 = MEMORY[0x1E0DEC198];
  v18 = MEMORY[0x1E0DEB940];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  outlined destroy of AnyHashable((uint64_t)v34);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v17, (uint64_t (*)(_QWORD, uint64_t))v18);
  if ((v16 & 1) == 0)
    goto LABEL_12;
LABEL_8:
  outlined init with copy of SwiftUIAnySortComparator?(a5, (uint64_t)&v35, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  if ((_QWORD)v35)
  {
    *(_OWORD *)&v44[32] = v39;
    v45 = v40;
    v46 = v41;
    v42 = v35;
    v43 = v36;
    *(_OWORD *)v44 = v37;
    *(_OWORD *)&v44[16] = v38;
    v19 = v35;
    v20 = direct field offset for UIHostingController.host;
    v21 = *(_QWORD **)&a3[direct field offset for UIHostingController.host];
    v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v23 = (_QWORD *)((char *)v21 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v21) + 0x60));
    swift_beginAccess();
    *v23 = v19;
    swift_retain_n();
    v24 = v21;
    swift_release();
    v34[0] = 1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    specialized UIKitInspectorV3Bridge.updateTransform()();
    v25 = *(_QWORD **)&a3[v20];
    v26 = *((_QWORD *)&v45 + 1);
    v27 = v46;
    v28 = (_QWORD *)((char *)v25 + *(_QWORD *)((*v22 & *v25) + 0x120));
    swift_beginAccess();
    v29 = *v28;
    *v28 = v26;
    v28[1] = v27;
    swift_retain();
    v30 = v25;
    swift_retain();
    outlined consume of EnvironmentValues?(v29);
    LOWORD(v32[0]) = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

LABEL_14:
    outlined destroy of PopoverPresentation((uint64_t)&v42);
    return;
  }
  __break(1u);
}

void specialized compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(int a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v8 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
  if (*(_BYTE *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    if ((a2 & 0x100000000) != 0 || (_DWORD)a2 != a1)
    {
      outlined init with copy of SwiftUIAnySortComparator?(a5, (uint64_t)&v26, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(_QWORD)v26)
      {
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v26, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        *(_BYTE *)(a4 + v8) = 1;
        specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a3);
        return;
      }
      v37 = v30;
      v38 = v31;
      v39 = v32;
      v33 = v26;
      v34 = v27;
      v35 = v28;
      v36 = v29;
      specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(a3, (uint64_t)&v33, a6, a7, a8 & 1);
    }
    else
    {
      outlined init with copy of SwiftUIAnySortComparator?(a5, (uint64_t)&v26, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
      if (!(_QWORD)v26)
      {
        __break(1u);
        return;
      }
      v37 = v30;
      v38 = v31;
      v39 = v32;
      v33 = v26;
      v34 = v27;
      v35 = v28;
      v36 = v29;
      v14 = v26;
      v15 = direct field offset for UIHostingController.host;
      v16 = *(_QWORD **)&a3[direct field offset for UIHostingController.host];
      v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v18 = (_QWORD *)((char *)v16 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v16) + 0x60));
      swift_beginAccess();
      *v18 = v14;
      swift_retain_n();
      v19 = v16;
      swift_release();
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_release_n();
      specialized UIKitInspectorV3Bridge.updateTransform()();
      v20 = *(_QWORD **)&a3[v15];
      v21 = *((_QWORD *)&v38 + 1);
      v22 = v39;
      v23 = (_QWORD *)((char *)v20 + *(_QWORD *)((*v17 & *v20) + 0x120));
      swift_beginAccess();
      v24 = *v23;
      *v23 = v21;
      v23[1] = v22;
      swift_retain();
      v25 = v20;
      swift_retain();
      outlined consume of EnvironmentValues?(v24);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    }
    outlined destroy of PopoverPresentation((uint64_t)&v33);
  }
}

void specialized UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  id v26;
  id v27;
  _QWORD aBlock[6];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  _OWORD v37[6];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  int v41;
  _BYTE v42[32];
  uint64_t v43;
  unsigned __int8 v44;
  _DWORD v45[10];
  char v46;

  v6 = v5;
  outlined init with copy of SwiftUIAnySortComparator?(a2 + 48, (uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
  if (*((_QWORD *)&v30 + 1))
  {
    v39[0] = v29;
    v39[1] = v30;
    v40 = v31;
    outlined init with copy of AnyHashable((uint64_t)v39, (uint64_t)v42);
    v44 = 0;
    outlined destroy of AnyHashable((uint64_t)v39);
  }
  else
  {
    v43 = 0;
    memset(v42, 0, sizeof(v42));
    v44 = -1;
  }
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v39);
  if (v44 == 255)
  {
    v12 = v41;
    outlined destroy of PopoverPresentation((uint64_t)v39);
    v45[0] = v12;
    v46 = 1;
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)v42, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?, (uint64_t)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t)type metadata accessor for UIKitInspectorV3Bridge.PresentationKind, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind);
  }
  else
  {
    outlined destroy of PopoverPresentation((uint64_t)v39);
    outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v42, (uint64_t)v45);
  }
  v13 = v6 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v45, v13);
  swift_endAccess();
  *(_BYTE *)(v6 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 0;
  v14 = objc_msgSend(a1, sel_presentingViewController);
  if (!v14)
    v14 = a1;
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of PopoverPresentation(a2, (uint64_t)v37);
  outlined init with copy of PresentationOptionsPreference(a4, (uint64_t)&v29);
  v16 = swift_allocObject();
  v17 = v37[5];
  *(_OWORD *)(v16 + 96) = v37[4];
  *(_OWORD *)(v16 + 112) = v17;
  v18 = v37[1];
  *(_OWORD *)(v16 + 32) = v37[0];
  *(_OWORD *)(v16 + 48) = v18;
  v19 = v37[3];
  *(_OWORD *)(v16 + 64) = v37[2];
  *(_OWORD *)(v16 + 80) = v19;
  v20 = *(_OWORD *)((char *)v36 + 9);
  v21 = v33;
  *(_OWORD *)(v16 + 216) = v34;
  v22 = v36[0];
  *(_OWORD *)(v16 + 232) = v35;
  *(_OWORD *)(v16 + 248) = v22;
  *(_OWORD *)(v16 + 257) = v20;
  v23 = v29;
  *(_OWORD *)(v16 + 152) = v30;
  v24 = v32;
  *(_OWORD *)(v16 + 168) = v31;
  *(_OWORD *)(v16 + 184) = v24;
  *(_OWORD *)(v16 + 200) = v21;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = a1;
  *(_QWORD *)(v16 + 128) = v38;
  *(_OWORD *)(v16 + 136) = v23;
  *(_BYTE *)(v16 + 273) = a5 & 1;
  *(_QWORD *)(v16 + 280) = a3;
  aBlock[4] = partial apply for specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_29;
  v25 = _Block_copy(aBlock);
  v26 = a1;
  v27 = a3;
  swift_release();
  objc_msgSend(v14, sel_dismissViewControllerAnimated_completion_, 1, v25);
  _Block_release(v25);

}

void specialized UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(uint64_t a1, void *a2, uint64_t *a3, char a4)
{
  void *v4;
  uint64_t v9;
  id v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  Class v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _OWORD v28[2];
  uint64_t v29;
  unsigned __int8 v30;
  _OWORD v31[2];
  uint64_t v32;
  unsigned __int8 v33;

  v9 = (uint64_t)v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v9, (uint64_t)&v24);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v24, (uint64_t)v31);
  if (v33 - 2 >= 2)
  {
    if (!v33)
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v31);
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v24);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v24);
    v10 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    if (one-time initialization token for willPresent != -1)
      swift_once();
    objc_msgSend(v10, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0);

    static Transaction.current.getter();
    v11 = Transaction.isAnimated.getter();
    swift_release();
    v12 = objc_msgSend(a2, sel_presentedViewController);
    if (v12)
    {
      v13 = v12;
      if ((objc_msgSend(v12, sel_isBeingDismissed) & 1) == 0)
      {
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
          objc_msgSend(a2, sel_dismissViewControllerAnimated_completion_, v11 & 1, 0);
      }

    }
    v14 = *(_QWORD *)a1;
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
    v16 = objc_allocWithZone(v15);
    swift_retain();
    v17 = v4;
    v18 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(v14, (uint64_t)v17, 1, v16);
    swift_release();

    *(_QWORD *)(*(_QWORD *)&v18[direct field offset for UIHostingController.host]
              + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v18[direct field offset for UIHostingController.host])
                          + 0x240)
              + 8) = &protocol witness table for UIKitInspectorV3Bridge<A>;
    swift_unknownObjectWeakAssign();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
    swift_release();
    v19 = *(void **)&v17[direct field offset for UIKitInspectorV3Bridge.presentedVC];
    *(_QWORD *)&v17[direct field offset for UIKitInspectorV3Bridge.presentedVC] = v18;
    v20 = v18;

    v21 = *(_QWORD *)(a1 + 88);
    v22 = *(_QWORD *)(a1 + 96);
    LOBYTE(v19) = *(_BYTE *)(a1 + 8);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(v20, v21, v22, a3, (char)v19, a4 & 1);
    swift_release();
    swift_release();
    specialized PresentationHostingController.setupSheet<A>(for:presenter:style:)(a2, 7);
    outlined init with copy of SwiftUIAnySortComparator?(a1 + 48, (uint64_t)&v24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
    if (*((_QWORD *)&v25 + 1))
    {
      v31[0] = v24;
      v31[1] = v25;
      v32 = v26;
      outlined init with copy of AnyHashable((uint64_t)v31, (uint64_t)v28);
      v30 = 0;
      outlined destroy of AnyHashable((uint64_t)v31);
    }
    else
    {
      v29 = 0;
      memset(v28, 0, sizeof(v28));
      v30 = -1;
    }
    outlined init with copy of PopoverPresentation(a1, (uint64_t)&v24);
    if (v30 == 255)
    {
      v23 = v27;
      outlined destroy of PopoverPresentation((uint64_t)&v24);
      LODWORD(v31[0]) = v23;
      v33 = 1;
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?, (uint64_t)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t)type metadata accessor for UIKitInspectorV3Bridge.PresentationKind, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind);
    }
    else
    {
      outlined destroy of PopoverPresentation((uint64_t)&v24);
      outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v28, (uint64_t)v31);
    }
    swift_beginAccess();
    outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v31, v9);
    swift_endAccess();
    objc_msgSend(a2, sel_presentViewController_animated_completion_, v20, 1, 0);

  }
}

uint64_t outlined destroy of PopoverPresentation(uint64_t a1)
{
  destroy for PopoverPresentation(a1);
  return a1;
}

void type metadata accessor for (AnyHashable?, AnyHashable?)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyHashable?, AnyHashable?))
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable?, AnyHashable?));
  }
}

uint64_t sub_18746FAF0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_18746FB14()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in UIKitInspectorV3Bridge.updateTransform()()
{
  uint64_t v0;

  specialized closure #2 in UIKitInspectorV3Bridge.updateTransform()(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_18746FB48()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UIKitInspectorV3Bridge.updateTransform()()
{
  uint64_t v0;

  specialized closure #1 in UIKitInspectorV3Bridge.updateTransform()(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32));
}

void specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, char a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v11 = a1 + 16;
  swift_beginAccess();
  v12 = MEMORY[0x18D760234](v11);
  if (v12)
  {
    v13 = (void *)v12;
    *(_BYTE *)(v12 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
    v14 = *a3;
    v15 = *(_QWORD **)&a2[direct field offset for UIHostingController.host];
    v16 = (_QWORD *)((char *)v15 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v15) + 0x60));
    swift_beginAccess();
    *v16 = v14;
    swift_retain_n();
    v17 = v15;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    v18 = a3[11];
    v19 = a3[12];
    LOBYTE(v17) = *((_BYTE *)a3 + 8);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(a2, v18, v19, a4, (char)v17, a5 & 1);
    swift_release();
    swift_release();
    objc_msgSend(a6, sel_presentViewController_animated_completion_, a2, 1, 0);

  }
}

void specialized UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  _BYTE v9[96];
  uint64_t v10;

  if (MEMORY[0x18D760234](v0 + direct field offset for UIKitInspectorV3Bridge.presenterOverride))
  {
LABEL_6:
    v8 = v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
    swift_beginAccess();
    outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v8, (uint64_t)v9);
    outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v9, (uint64_t)&v10);
    __asm { BR              X10 }
  }
  v1 = v0 + direct field offset for UIKitInspectorV3Bridge.host;
  v2 = (_QWORD *)MEMORY[0x18D760234](v0 + direct field offset for UIKitInspectorV3Bridge.host);
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = v2;
  v4 = MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x130));

  if (v4)
    goto LABEL_6;
  v5 = (void *)MEMORY[0x18D760234](v1);
  if (!v5)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x1874705DCLL);
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel__viewControllerForAncestor);

  if (v7)
    goto LABEL_6;
}

void sub_1874705E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&a26);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  JUMPOUT(0x187470634);
}

void specialized UIKitInspectorV3Bridge.updateExistingInspector(_:values:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[120];
  _BYTE v3[128];

  v1 = v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v1, (uint64_t)v2);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X10 }
}

uint64_t sub_1874706CC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt32 v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int16 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(v3 + 144);
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v31);
  if (*(_QWORD *)(v1 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v7 & 1) != 0))
  {
    outlined init with copy of InspectorStorage(*(_QWORD *)(v1 + 56) + 120 * v6, v4 - 192);
  }
  else
  {
    *(_OWORD *)(v3 + 144) = xmmword_187BF9840;
    *(_OWORD *)(v3 + 160) = 0u;
    *(_OWORD *)(v3 + 176) = 0u;
    *(_OWORD *)(v3 + 192) = 0u;
    *(_OWORD *)(v3 + 208) = 0u;
    *(_OWORD *)(v3 + 224) = 0u;
    *(_OWORD *)(v3 + 240) = 0u;
    *(_QWORD *)(v3 + 256) = 0;
  }
  outlined init with copy of SwiftUIAnySortComparator?(v4 - 192, (uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  v8 = *((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1) != 1)
  {
    v9 = v31;
    v10 = v32;
    outlined copy of Binding<NavigationSplitViewColumn>?(v31, *((uint64_t *)&v31 + 1));
    outlined destroy of InspectorStorage((uint64_t)&v31);
    if (!v8)
      goto LABEL_11;
    *(_QWORD *)&v28 = v9;
    *((_QWORD *)&v28 + 1) = v8;
    LOBYTE(v29) = v10 & 1;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v27);
    swift_release();
    swift_release();
    if ((v27 & 1) == 0)
      goto LABEL_11;
    outlined init with copy of SwiftUIAnySortComparator?(v4 - 192, (uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    if (*((_QWORD *)&v31 + 1) == 1)
    {
      outlined destroy of AccessibilityScrollableContext?((uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      v28 = 0u;
      v29 = 0u;
      v30 = 0;
    }
    else
    {
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v34, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198]);
      outlined destroy of InspectorStorage((uint64_t)&v31);
      if (*((_QWORD *)&v29 + 1))
      {
        v31 = v28;
        v32 = v29;
        v33 = v30;
        v15 = (uint64_t *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
        swift_beginAccess();
        v16 = *v15;
        if (*(_QWORD *)(v16 + 16)
          && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v31), (v18 & 1) != 0))
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          swift_retain();
        }
        else
        {
          v19 = 0;
        }
        swift_endAccess();
        outlined destroy of AnyHashable((uint64_t)&v31);
        *(_QWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v19;
        swift_release();
LABEL_27:
        v20 = objc_msgSend(v0, sel_presentationController);
        if (v20)
        {
          v21 = v20;
          if (*(_QWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor))
          {
            swift_retain();
            v22 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
            specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v21);

            swift_release();
            v21 = v22;
          }

        }
        outlined init with copy of SwiftUIAnySortComparator?(v4 - 192, (uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
        if (*((_QWORD *)&v31 + 1) == 1)
        {
          __break(1u);
        }
        else
        {
          v23 = *(_QWORD *)(v3 + 88);
          swift_retain();
          outlined destroy of InspectorStorage((uint64_t)&v31);
          if (v23)
          {
            v24 = *(_QWORD **)&v0[direct field offset for UIHostingController.host];
            v25 = (_QWORD *)((char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x60));
            v11 = 1;
            swift_beginAccess();
            *v25 = v23;
            swift_retain_n();
            v26 = v24;
            swift_release();
            v27 = 1;
            type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
            lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
            ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

            swift_release_n();
            goto LABEL_14;
          }
        }
        __break(1u);
        JUMPOUT(0x187470B8CLL);
      }
    }
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E0DEC198], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    goto LABEL_27;
  }
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
LABEL_11:
  if (*(_BYTE *)(v2 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    *(_BYTE *)(v2 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 1;
    specialized UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v0);
  }
  v11 = 0;
LABEL_14:
  outlined init with copy of SwiftUIAnySortComparator?(v4 - 192, (uint64_t)&v31, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  v12 = *((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1) == 1)
  {
    outlined destroy of AccessibilityScrollableContext?(v4 - 192, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v13 = &v31;
  }
  else
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v31, *((uint64_t *)&v31 + 1));
    outlined destroy of InspectorStorage((uint64_t)&v31);
    if (v12)
    {
      LOBYTE(v27) = v11;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    v13 = (__int128 *)(v4 - 192);
  }
  return outlined destroy of AccessibilityScrollableContext?((uint64_t)v13, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
}

void specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    specialized UIKitInspectorV3Bridge.reset()();

  }
}

uint64_t specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  _BYTE v4[144];

  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  v3 = v4[0];
  PreferenceList.subscript.getter();
  outlined init with copy of PresentationOptionsPreference((uint64_t)v4, a1);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v4, &lazy cache variable for type metadata for PreferenceList.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE28C0]);
  PreferenceList.subscript.getter();
  result = swift_release();
  *(_BYTE *)(a1 + 137) = v3;
  return result;
}

uint64_t outlined assign with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PresentationOptionsPreference(a2, a1);
  return a2;
}

uint64_t sub_187470D7C()
{
  uint64_t v0;
  void *v1;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 104))
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 152))
  {
    swift_release();
    swift_release();
  }
  v1 = *(void **)(v0 + 184);
  if ((unint64_t)v1 >= 3)

  if (*(_QWORD *)(v0 + 256))
    __swift_destroy_boxed_opaque_existential_1(v0 + 232);

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)()
{
  uint64_t v0;

  specialized closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), (uint64_t *)(v0 + 32), (uint64_t *)(v0 + 136), *(_BYTE *)(v0 + 273), *(void **)(v0 + 280));
}

uint64_t outlined init with take of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, &lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge.PresentationKind);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2, char a3, _BYTE *a4)
{
  _OWORD *v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD v24[9];

  swift_getObjectType();
  *(_QWORD *)&a4[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  a4[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  a4[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(_QWORD *)&a4[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  a4[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  a4[direct field offset for PresentationHostingController.wasPreempted] = 0;
  v6 = &a4[direct field offset for PresentationHostingController.lastPresentationOptions];
  *(_OWORD *)((char *)v6 + 121) = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  v7 = &a4[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  *(_OWORD *)((char *)v7 + 121) = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  v8 = &a4[direct field offset for PresentationHostingController.observedSize];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  a4[direct field offset for PresentationHostingController.presentationWantsTransparentBackground] = a3 ^ 1;
  v9 = one-time initialization token for clientNeedsOscillationSuppression;
  v10 = a4;
  if (v9 != -1)
    swift_once();
  if (clientNeedsOscillationSuppression)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for OscillationDetector<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for OscillationDetector);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v11 + 64) = 0x8000000000000000;
    *(_BYTE *)(v11 + 72) = 0;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    memset(v24, 0, 137);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v12 + 16) = 3;
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v24, v12 + 32, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v24, v12 + 176, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    outlined init with take of Image.Resolved?((uint64_t)v24, v12 + 320, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 32) = closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:);
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 10;
    *(_QWORD *)&v10[direct field offset for PresentationHostingController.oscillationDetector] = v11;
  }
  else
  {
    *(_QWORD *)&v10[direct field offset for PresentationHostingController.oscillationDetector] = 0;
  }

  swift_retain();
  v13 = (char *)specialized UIHostingController.init(rootView:)();
  swift_release();
  *(_QWORD *)&v13[direct field offset for PresentationHostingController.delegate + 8] = &protocol witness table for UIKitInspectorV3Bridge<A>;
  swift_unknownObjectWeakAssign();
  v14 = v13;
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(0);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>, (uint64_t (*)(uint64_t))type metadata accessor for UITraitDefinition.Type, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_187C05380;
  v16 = type metadata accessor for UITraitHorizontalSizeClass();
  v17 = MEMORY[0x1E0DC23D0];
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v17;
  v18 = type metadata accessor for UITraitVerticalSizeClass();
  v19 = MEMORY[0x1E0DC2048];
  *(_QWORD *)(v15 + 48) = v18;
  *(_QWORD *)(v15 + 56) = v19;
  v20 = type metadata accessor for UITraitPresentationSemanticContext();
  v21 = MEMORY[0x1E0DC27F8];
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = v21;
  v22 = v14;
  UIViewController.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  *(_QWORD *)&v24[0] = 0;
  lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();

  return v22;
}

_QWORD *specialized PresentationHostingController.setupSheet<A>(for:presenter:style:)(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unsigned __int8 v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[25];
  unsigned __int8 v43;
  __int128 v44;
  _BYTE v45[32];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];

  v3 = v2;
  v2[direct field offset for PresentationHostingController.presentingBridgeKind] = 1;
  type metadata accessor for (PresentationOptionsPreference, Bool)();
  static Update.ensure<A>(_:)();
  v6 = v43;
  v49 = v41;
  v50[0] = *(_OWORD *)v42;
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)&v42[9];
  *(_OWORD *)&v45[16] = v37;
  v46 = v38;
  v47 = v39;
  v48 = v40;
  v44 = v35;
  *(_OWORD *)v45 = v36;
  specialized UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, 1);
  v7 = objc_msgSend(v2, sel__preferredTransition);

  if (!v7)
    specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(a2, (uint64_t)&v44);
  v8 = objc_msgSend(v3, sel_presentationController);
  if (v8)
  {
    v9 = v8;
    objc_opt_self();
    v10 = (id)swift_dynamicCastObjCClass();
    if (v10)
      goto LABEL_8;

  }
  v11 = objc_msgSend(v3, sel_popoverPresentationController);
  if (!v11)
    return outlined destroy of PresentationOptionsPreference(&v44);
  v12 = v11;
  v10 = objc_msgSend(v11, sel_adaptiveSheetPresentationController);

  if (!v10)
    return outlined destroy of PresentationOptionsPreference(&v44);
LABEL_8:
  v13 = v10;
  specialized PresentationHostingController.configureSizingOptions(for:sheetController:)((uint64_t)&v44, v10);

  if ((static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v49, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v35);
    }
    else
    {
      *((_QWORD *)&v36 + 1) = &type metadata for AutomaticPresentationSizing;
      *(_QWORD *)&v37 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    }
  }
  else
  {
    *(_QWORD *)&v37 = 0;
    v35 = 0u;
    v36 = 0u;
  }
  specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(a1, (uint64_t)&v35);
  outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?((uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  v14 = objc_msgSend(v3, sel_traitCollection);
  v15 = objc_msgSend(v14, sel_horizontalSizeClass);

  if (v15 == (id)2)
  {
    v16 = objc_msgSend(v3, sel_traitCollection);
    v17 = objc_msgSend(v16, sel_verticalSizeClass);

    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v35);
    if (v17 == (id)2)
    {
      outlined destroy of PresentationOptionsPreference(&v35);
      outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
      goto LABEL_20;
    }
  }
  else
  {
    outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v35);
  }
  v18 = *(_QWORD *)(v35 + 16);
  outlined destroy of PresentationOptionsPreference(&v35);
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v32);
  if (v18)
  {
    v19 = v34;
    outlined destroy of PresentationOptionsPreference(&v32);
    if ((v19 | 2) != 2)
      specialized PresentationHostingController.configureDetents(of:using:)(v13, (uint64_t)&v44);
    goto LABEL_21;
  }
LABEL_20:
  outlined destroy of PresentationOptionsPreference(&v32);
LABEL_21:
  if (*(_QWORD *)v45)
  {
    v29 = *((_QWORD *)&v44 + 1);
    v30 = *(_QWORD *)v45;
    v31 = *(_OWORD *)&v45[8];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v27);
    v20 = v27;
    v21 = v28;
    if ((specialized Set.contains(_:)(v27, v28, v44) & 1) != 0)
    {
      v29 = v20;
      v30 = v21;
      PresentationDetent.uiSheetDetentId.getter();
      v23 = v22;
      objc_msgSend(v13, sel_setSelectedDetentIdentifier_, v22);

    }
    else
    {
      MEMORY[0x18D75AC90](0xD000000000000052, 0x8000000187BE0E20);
    }
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)&v44, (uint64_t)&v29);
  v24 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)&v29, v24, &lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  if (MEMORY[0x18D760234](&v3[direct field offset for PresentationHostingController.delegate]))
  {
    v25 = swift_dynamicCastObjCProtocolConditional();
    if (!v25)
      swift_unknownObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(v13, sel_setDelegate_, v25);
  swift_unknownObjectRelease();
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(v6);

  return outlined destroy of PresentationOptionsPreference(&v44);
}

void specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdge:wantsTransparentBackground:)(char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5, char a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v32;
  char v33;

  v10 = direct field offset for UIHostingController.host;
  v11 = *(_QWORD **)&a1[direct field offset for UIHostingController.host];
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (_QWORD *)((char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x120));
  swift_beginAccess();
  v14 = *v13;
  *v13 = a2;
  v13[1] = a3;
  swift_retain();
  v15 = v11;
  swift_retain();
  outlined consume of EnvironmentValues?(v14);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  if (*(_BYTE *)(*(_QWORD *)&a1[v10] + *(_QWORD *)((*v12 & **(_QWORD **)&a1[v10]) + 0x180)) == 2)
  {
    EnvironmentValues.explicitPreferredColorScheme.getter();
    if (v33 != 2)
    {
      v16 = *(_QWORD **)&a1[v10];
      v17 = *(_QWORD *)((*v12 & *v16) + 0x180);
      v18 = *((unsigned __int8 *)v16 + v17);
      *((_BYTE *)v16 + v17) = v33;
      v19 = a1;
      v20 = v16;
      specialized _UIHostingView.didChangeColorScheme(from:)(v18);

    }
  }
  specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(7, (uint64_t)a4);
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(a6 & 1);
  specialized PresentationHostingController.updateSheet(with:)(a4);
  v21 = objc_msgSend(a1, sel_presentationController);
  if (v21)
  {
    v22 = v21;
    objc_opt_self();
    v23 = swift_dynamicCastObjCClass();
    if (v23)
    {
      v24 = (void *)v23;
      v25 = v22;
      v26 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      objc_msgSend(v24, sel_setDelegate_, v26);

    }
    v27 = specialized UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v22);

  }
  v28 = objc_msgSend(a1, sel_popoverPresentationController);
  if (v28)
  {
    v29 = v28;
    if (*(_BYTE *)(v32 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8) == 1)
    {
      EnvironmentValues.layoutDirection.getter();
      __asm { BR              X11 }
    }
    objc_msgSend(v28, sel_setPermittedArrowDirections_, *(_QWORD *)(v32 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections));

  }
}

void sub_187471A1C()
{
  JUMPOUT(0x1874719E8);
}

void sub_187471A30()
{
  JUMPOUT(0x1874719E8);
}

void sub_187471A38()
{
  JUMPOUT(0x1874719E8);
}

uint64_t partial apply for specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in PresentationHostingController.setupSheet<A>(for:presenter:style:)(a1);
}

void type metadata accessor for (PresentationOptionsPreference, Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (PresentationOptionsPreference, Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PresentationOptionsPreference, Bool));
  }
}

uint64_t outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = type metadata accessor for Optional();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t outlined init with copy of PresentationSizing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (uint64_t)&lazy cache variable for type metadata for PresentationSizing, (uint64_t)&protocol descriptor for PresentationSizing, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_187471BD8()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_187471C14()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for specialized closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t outlined init with copy of _NavigationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for _NavigationTransitionStyleOutputs.Content(a2, a1);
  return a2;
}

uint64_t outlined destroy of _NavigationTransitionOutputs(uint64_t a1)
{
  destroy for _NavigationTransitionStyleOutputs(a1);
  return a1;
}

uint64_t outlined init with take of _NavigationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  __swift_memcpy48_8(a2, a1);
  return a2;
}

uint64_t sub_187471D00()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(_QWORD *)(v1 + 16));
}

void specialized UIKitNavigationController.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;

  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isDataDriven] = 0;
  v1 = OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update;
  type metadata accessor for PlatformBarUpdater();
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = specialized InferredToolbarState.init()();
  v2[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v2[5] = 0;
  swift_unknownObjectWeakInit();
  v3 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[v1] = v2;
  v2[7] = 0;
  v2[8] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize] = 0;
  v2[6] = v3;
  v4 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_navigationAuthority];
  *(_OWORD *)v4 = xmmword_187BF9840;
  *((_QWORD *)v4 + 2) = 0;
  v5 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_context];
  *(_OWORD *)v5 = xmmword_187C34330;
  *((_QWORD *)v5 + 2) = 0;
  v6 = &v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_platformNavigationPresentationStrategy];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isSecure] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_backgroundHost] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIKitTabBarController.init(coder:)()
{
  char *v0;
  uint64_t v1;
  Class v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_popoverBridge;
  type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(0, (unint64_t *)&lazy cache variable for type metadata for UIKitInspectorV3Bridge<TabItem.RootView>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for UIKitInspectorV3Bridge);
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v3 = OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_update;
  type metadata accessor for PlatformBarUpdater();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = specialized InferredToolbarState.init()();
  v4[3] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4[5] = 0;
  swift_unknownObjectWeakInit();
  v5 = MEMORY[0x1E0DEE9E8];
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = v5;
  *(_QWORD *)&v0[v3] = v4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_sidebarBottomBarHost] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI21UIKitTabBarController_backgroundHost] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIHostingController.matchedTransitionAlignmentRect<A>(id:namespace:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v3 = direct field offset for UIHostingController.host;
  v4 = *(void **)(v1 + direct field offset for UIHostingController.host);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v5 = v4;
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v9)
  {
    v6 = *(id *)(v1 + v3);
    ViewGraph.transform.getter();
    type metadata accessor for CGRect(0);
    Anchor.convert(to:)();

    swift_release();
    swift_release();
    v7 = v10;
    v8 = v11;
  }
  else
  {
    v7 = 0uLL;
    v8 = 0uLL;
  }
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v9 == 0;
}

{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = (void *)specialized UIHostingController.host.getter();
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  v7 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.preferenceValue<A>(_:)();

  if ((_QWORD)v12)
  {
    v8 = (void *)specialized UIHostingController.host.getter();
    type metadata accessor for CGRect(0);
    v9 = v8;
    _UIHostingView.convertAnchor<A>(_:)();

    swift_release();
    v10 = v12;
    v11 = v13;
  }
  else
  {
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = (_QWORD)v12 == 0;
}

unint64_t type metadata accessor for UITraitDefinition.Type()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UITraitDefinition.Type;
  if (!lazy cache variable for type metadata for UITraitDefinition.Type)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for UITraitDefinition);
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITraitDefinition.Type);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature;
  if (!lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RemoteSheetContainerViewGraphFeature, &type metadata for RemoteSheetContainerViewGraphFeature);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteSheetContainerViewGraphFeature and conformance RemoteSheetContainerViewGraphFeature);
  }
  return result;
}

void partial apply for specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)()
{
  uint64_t v0;

  specialized closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v0);
}

uint64_t outlined destroy of (key: ViewIdentity, value: InspectorStorage)?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
  }
}

uint64_t outlined destroy of InspectorStorage(uint64_t a1)
{
  destroy for InspectorStorage(a1);
  return a1;
}

void type metadata accessor for UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView();
    v7 = a3(a1, &type metadata for TabItem.RootView, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void partial apply for closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in UIKitNavigationController.viewWillTransition(to:with:)(a1, v1);
}

void type metadata accessor for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>();
    v3 = v2;
    v4 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    v6 = type metadata accessor for AnyNavigationLinkPresentedViewStorage(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for AnyNavigationLinkPresentedViewStorage<ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&type metadata for NavigationItemAdaptorModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>();
    v3[1] = MEMORY[0x1E0CE65D8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&type metadata for NavigationItemAdaptorModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2[0] = &protocol witness table for GenericViewControllerRepresentable;
    v2[1] = &protocol witness table for NavigationItemAdaptorModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GenericViewControllerRepresentable, NavigationItemAdaptorModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of NavigationState.StackContent?(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v7 = *(_OWORD *)(a1 + 288);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  outlined consume of NavigationState.StackContent?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304));
  return a1;
}

uint64_t outlined consume of NavigationState.StackContent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  uint64_t result;

  result = a21;
  if ((~a22 & 0x7000000000000007) != 0
    || (a32 & 0xF000000000000007) != 0xF000000000000007
    || (a34 & 0xFFFFFFFFFFFFFFF8) != 0x3FFFF8
    || (a38 & 0xFFFFFFFFFF0000FCLL) != 0)
  {
    return outlined consume of NavigationState.Base(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39);
  }
  return result;
}

uint64_t outlined destroy of UIKitNavigationController.PlatformNavigationRequestStrategy(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

BOOL static ButtonRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ButtonRole.destructive.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ButtonRole.cancel.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t VisualEffect.blur(radius:opaque:)()
{
  lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect();
  return VisualEffect.rendererEffect<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect;
  if (!lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1428], MEMORY[0x1E0CE1438]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect);
  }
  return result;
}

uint64_t sub_187472838()
{
  lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect();
  return swift_getOpaqueTypeConformance2();
}

uint64_t VisualEffect.brightness(_:)()
{
  return VisualEffect.rendererEffect<A>(_:)();
}

uint64_t sub_1874728C0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ToolbarMenuStyle()
{
  return &type metadata for ToolbarMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ToolbarMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToolbarMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v5);
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0xE000000000000000;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = KeyPath;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v8;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(_QWORD *)(a2 + 88) = result;
  return result;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance ToolbarMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolbarMenuStyle.makeBody(configuration:)(a1, a2);
}

uint64_t sub_187472A48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_187472A6C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<ButtonMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle, (uint64_t)&type metadata for ButtonMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E0CE3EE0], MEMORY[0x1E0CE3ED0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle, (uint64_t)&type metadata for BorderedButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonMenuStyle and conformance ButtonMenuStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonMenuStyle, &type metadata for ButtonMenuStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonMenuStyle and conformance ButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, MenuStyleModifier<ButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>>, (uint64_t (*)(void))lazy protocol witness table accessor for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier>();
    v2[0] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderedButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t static _AppearanceActionModifier._makeScene(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = a2[2];
  v6 = *((_DWORD *)a2 + 6);
  v7 = *((_DWORD *)a2 + 7);
  v8 = *((_DWORD *)a2 + 8);
  v9 = *((_DWORD *)a2 + 9);
  v14 = *(_OWORD *)(a2 + 5);
  v12 = *((_DWORD *)a2 + 14);
  type metadata accessor for _GraphValue<_AppearanceActionModifier>();
  _GraphValue.value.getter();
  LODWORD(v16) = v4;
  DWORD1(v22) = DWORD1(v14);
  _GraphInputs.phase.getter();
  AppearanceEffect.init(modifier:phase:)();
  v24 = v3;
  v25 = v16;
  v26 = v5;
  v27 = __PAIR64__(v7, v6);
  v28 = __PAIR64__(v9, v8);
  v29 = v14;
  v30 = *(_QWORD *)((char *)&v22 + 4);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
  Attribute.init<A>(body:value:flags:update:)();
  outlined consume of NavigationEventHandlers?(v16, v5, __SPAIR64__(v7, v6));
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  v10 = AGGraphSetFlags();
  v15 = v3;
  LODWORD(v16) = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = v14;
  v23 = v12;
  return a3(v10, &v15);
}

void type metadata accessor for _GraphValue<_AppearanceActionModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<_AppearanceActionModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AppearanceActionModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect;
  if (!lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE30B0], MEMORY[0x1E0CE30C0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppearanceEffect and conformance AppearanceEffect);
  }
  return result;
}

uint64_t static Animation.timingCurve(_:duration:)(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32) != 1)
    return static Animation.timingCurve(_:_:_:_:duration:)();
  if (!(*(_QWORD *)(a1 + 16) | *(_QWORD *)(a1 + 8) | *(_QWORD *)a1 | *(_QWORD *)(a1 + 24)))
    return static Animation.linear(duration:)();
  lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation();
  return Animation.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type UnitCurveAnimation and conformance UnitCurveAnimation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation;
  if (!lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4570], MEMORY[0x1E0CE4578]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnitCurveAnimation and conformance UnitCurveAnimation);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.accessibilityEnabled : EnvironmentValues()
{
  return EnvironmentValues.accessibilityEnabled.setter();
}

uint64_t _ArchivedViewStates.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v2, v3);
  *a1 = 0;
  v4 = (int *)type metadata accessor for _ArchivedViewStates(0);
  *(_QWORD *)((char *)a1 + v4[6]) = 0;
  v5 = v4[7];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)a1 + v5) = v6;
  *(_QWORD *)((char *)a1 + v4[8]) = 0;
  default argument 1 of ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
  UUID.init()();
  return ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)();
}

uint64_t type metadata accessor for _ArchivedViewStates(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedViewStates);
}

void _ArchivedViewStates.init(reader:delegate:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  v6 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for _ArchivedViewStates(0);
  v32 = v10[6];
  *(_QWORD *)((char *)a3 + v32) = 0;
  v11 = v10[7];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
  v31[2] = v11;
  *(_QWORD *)((char *)a3 + v11) = v12;
  v13 = v10[8];
  static ViewDecoders.registerStandard()();
  *a3 = a1;
  v31[1] = v13;
  *(_QWORD *)((char *)a3 + v13) = a2;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  JSONDecoder.init()();
  swift_retain();
  v14 = ArchiveReader.endIndex.getter();
  if (ArchiveReader.endIndex.getter() < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v15 = ArchiveReader.endIndex.getter();
  swift_release();
  if (v14 < 0 || v15 < v14)
    goto LABEL_19;
  v31[0] = v10;
  v16 = ArchiveReader.subscript.getter();
  v18 = v17;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata and conformance ArchivedViewCore.Metadata, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE3120], MEMORY[0x1E0CE3138]);
  v19 = v33;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v19)
  {
    swift_release();
    swift_release();
    outlined consume of Data._Representation(v16, v18);
    swift_release();
    swift_release();
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  outlined consume of Data._Representation(v16, v18);
  swift_release();
  v20 = v31[0];
  v21 = (uint64_t)a3 + *(int *)(v31[0] + 20);
  outlined init with take of TableCellFormula((uint64_t)v9, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
  if (*(_QWORD *)v21 != 13)
  {
    type metadata accessor for _ArchivedViewStates.Error(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates.Error and conformance _ArchivedViewStates.Error, type metadata accessor for _ArchivedViewStates.Error, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates.Error);
    swift_allocError();
    v23 = v22;
    v24 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 2, v24);
    goto LABEL_10;
  }
  if (*(_BYTE *)(v21 + 24) == 1)
  {
    swift_release();
LABEL_12:
    swift_release();
    return;
  }
  v25 = *(_QWORD *)(v21 + 16);
  swift_retain();
  v26 = ArchiveReader.endIndex.getter();
  swift_release();
  if ((v26 & 0x8000000000000000) == 0)
  {
    if ((v25 & 0x8000000000000000) == 0 && v25 < v26)
    {
      ArchiveReader.subscript.getter();
      ProtobufDecoder.init(_:)();
      _DisplayList_StableIdentityMap.init(from:)();
      swift_release();
      swift_release();
      v30 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(_QWORD *)((char *)a3 + v32) = v35;
      return;
    }
    type metadata accessor for _ArchivedViewStates.Error(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates.Error and conformance _ArchivedViewStates.Error, type metadata accessor for _ArchivedViewStates.Error, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates.Error);
    swift_allocError();
    v28 = v27;
    v29 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 2, 2, v29);
LABEL_10:
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a3 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
    goto LABEL_11;
  }
LABEL_20:
  __break(1u);
}

uint64_t static ViewDecoders.registerStandard()()
{
  type metadata accessor for ArchivableFactory<ArchivableLinkModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
  static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
  type metadata accessor for ArchivableFactory<InvalidatableContentModifier>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (uint64_t (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>, (uint64_t)&protocol conformance descriptor for ArchivableFactory<A>);
  return static ViewDecoders.registerDecodableFactoryType<A>(_:forID:)();
}

uint64_t _ArchivedViewStates.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  type metadata accessor for DataArchiveReader();
  outlined copy of Data._Representation(a1, a2);
  v7 = DataArchiveReader.__allocating_init(data:)();
  if (!v3)
    _ArchivedViewStates.init(reader:delegate:)(v7, 0, a3);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t _ArchivedViewStates.init(contentsOf:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, double);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v15((char *)&v19 - v13, a1, v5, v12);
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v14, v5);
    type metadata accessor for FileArchiveReader();
    ((void (*)(char *, uint64_t, uint64_t))v15)(v9, a1, v5);
    v17 = FileArchiveReader.__allocating_init(url:)();
    if (!v2)
      _ArchivedViewStates.init(reader:delegate:)(v17, 0, a2);
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1, v5);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void _ArchivedViewStates.init(contentsOf:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  uint64_t v6;

  type metadata accessor for FileArchiveReader();
  v5 = a1;
  v6 = FileArchiveReader.__allocating_init(file:)();
  if (!v2)
    _ArchivedViewStates.init(reader:delegate:)(v6, 0, a2);

}

uint64_t _ArchivedViewStates.init<A>(data:delegate:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  _QWORD *v21;

  v21 = a6;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataArchiveReader();
  outlined copy of Data._Representation(a1, a2);
  v15 = DataArchiveReader.__allocating_init(data:)();
  if (!v6)
  {
    v17 = v15;
    type metadata accessor for _AnyArchivedViewDelegate(0, a4, a5, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, a4);
    v18 = (char *)swift_allocObject();
    (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18
                                                                   + class metadata base offset for _AnyArchivedViewDelegate)
                                                       - 8)
                                           + 32))(&v18[*(_QWORD *)(*(_QWORD *)v18 + class metadata base offset for _AnyArchivedViewDelegate + 16)], v14);
    _ArchivedViewStates.init(reader:delegate:)(v17, (uint64_t)v18, v21);
  }
  outlined consume of Data._Representation(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a3, a4);
}

uint64_t type metadata accessor for _AnyArchivedViewDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _AnyArchivedViewDelegate);
}

char *_AnyArchivedViewDelegate.__allocating_init(_:)(uint64_t a1)
{
  char *v2;

  v2 = (char *)swift_allocObject();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2
                                                                  + class metadata base offset for _AnyArchivedViewDelegate)
                                                      - 8)
                                          + 32))(&v2[*(_QWORD *)(*(_QWORD *)v2 + class metadata base offset for _AnyArchivedViewDelegate + 16)], a1);
  return v2;
}

uint64_t _ArchivedViewStates.init<A>(contentsOf:delegate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a5;
  v29 = a4;
  v32 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v28 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v20((char *)&v28 - v18, a1, v10, v17);
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    v21(v19, v10);
    type metadata accessor for FileArchiveReader();
    ((void (*)(char *, uint64_t, uint64_t))v20)(v14, a1, v10);
    v22 = v31;
    v23 = FileArchiveReader.__allocating_init(url:)();
    if (!v22)
    {
      v25 = v23;
      type metadata accessor for _AnyArchivedViewDelegate(0, a3, v29, v24);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v32, a3);
      v26 = (char *)swift_allocObject();
      (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26
                                                                     + class metadata base offset for _AnyArchivedViewDelegate)
                                                         - 8)
                                             + 32))(&v26[*(_QWORD *)(*(_QWORD *)v26 + class metadata base offset for _AnyArchivedViewDelegate + 16)], v9);
      _ArchivedViewStates.init(reader:delegate:)(v25, (uint64_t)v26, v30);
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, a3);
    return ((uint64_t (*)(uint64_t, uint64_t))v21)(a1, v10);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _ArchivedViewStates.init<A>(contentsOf:delegate:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  _QWORD *v20;

  v20 = a5;
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileArchiveReader();
  v13 = a1;
  v14 = FileArchiveReader.__allocating_init(file:)();
  if (!v5)
  {
    v16 = v14;
    type metadata accessor for _AnyArchivedViewDelegate(0, a3, a4, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, a3);
    v17 = (char *)swift_allocObject();
    (*(void (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v17
                                                                   + class metadata base offset for _AnyArchivedViewDelegate)
                                                       - 8)
                                           + 32))(&v17[*(_QWORD *)(*(_QWORD *)v17 + class metadata base offset for _AnyArchivedViewDelegate + 16)], v12);
    _ArchivedViewStates.init(reader:delegate:)(v16, (uint64_t)v17, v20);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
}

uint64_t _ArchivedViewStates.startIndex.getter()
{
  return 0;
}

uint64_t _ArchivedViewStates.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for _ArchivedViewStates(0) + 20) + 8) + 16);
}

uint64_t _ArchivedViewStates.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v10 - v6;
  _ArchivedViewStates.state(at:)(a1, (uint64_t)&v10 - v6);
  v8 = type metadata accessor for _ArchivedView(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  return outlined init with take of TableCellFormula((uint64_t)v7, a2, type metadata accessor for _ArchivedView);
}

uint64_t type metadata accessor for _ArchivedView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedView);
}

uint64_t _ArchivedViewStates.state(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[12];
  uint64_t v24;
  unsigned __int16 v25;
  char v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v4 = *v2;
  if (!*v2)
    goto LABEL_26;
  v7 = type metadata accessor for _ArchivedViewStates(0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (*(_QWORD *)(*(uint64_t *)((char *)v2 + *(int *)(v7 + 20) + 8) + 16) <= a1)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21 = v7;
  swift_retain();
  v8 = ArchiveReader.subscript.getter();
  v10 = v9;
  outlined copy of Data._Representation(v8, v9);
  ProtobufDecoder.init(_:)();
  makeUserInfo #1 (_:) in _ArchivedViewStates.state(at:)((uint64_t)&v32, v4, (uint64_t)v2);
  *(_DWORD *)&v23[8] = 0;
  DisplayList.init()();
  v11 = 0;
  v12 = v24;
  *(_QWORD *)v23 = v25;
  v13 = v26;
  while (2)
  {
    v22 = v13;
    while (1)
    {
      if (v28 >= v29)
      {
        v20 = a1;
        v15 = v12;
        v16 = type metadata accessor for _ArchivedView(0);
        ArchivedViewCore.Metadata.archiveID.getter();
        swift_release();
        outlined consume of Data._Representation(v8, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v17 = *(uint64_t *)((char *)v2 + *(int *)(v21 + 24));
        v18 = *(int *)(v16 + 28);
        *(_DWORD *)(a2 + *(int *)(v16 + 32)) = 0x40000000;
        *(_QWORD *)a2 = v11;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = v15;
        *(_WORD *)(a2 + 24) = *(_WORD *)v23;
        *(_BYTE *)(a2 + 26) = v22;
        *(_QWORD *)(a2 + 32) = v20;
        *(_QWORD *)(a2 + v18) = v17;
        return swift_bridgeObjectRetain();
      }
      v14 = v30;
      if (v30)
      {
        if (v28 < v31)
          goto LABEL_13;
        if (v31 < v28)
          goto LABEL_22;
        v30 = 0;
      }
      v14 = ProtobufDecoder.decodeVarint()();
      if (v3)
        goto LABEL_23;
      if (v14 <= 7)
      {
LABEL_22:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        goto LABEL_23;
      }
LABEL_13:
      if (v14 >> 3 == 2)
        break;
      if (v14 >> 3 == 1)
      {
        v33 = v14;
        type metadata accessor for CGSize(0);
        ProtobufDecoder.messageField<A>(_:)();
        if (v3)
          goto LABEL_23;
        v11 = *(_QWORD *)&v23[4];
      }
      else
      {
        *(_QWORD *)&v23[4] = v14;
        ProtobufDecoder.skipField(_:)();
        if (v3)
          goto LABEL_23;
      }
    }
    v33 = v14;
    ProtobufDecoder.messageField<A>(_:)();
    if (!v3)
    {
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)&v23[4];
      *(_WORD *)v23 = 0;
      v13 = 0;
      continue;
    }
    break;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of Data._Representation(v8, v10);
  return swift_release();
}

uint64_t _ArchivedView.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  char v7;

  DisplayList.init()();
  v2 = type metadata accessor for _ArchivedView(0);
  result = UUID.init()();
  v4 = *(int *)(v2 + 28);
  *(_DWORD *)(a1 + *(int *)(v2 + 32)) = 0x40000000;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 26) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + v4) = 0;
  return result;
}

uint64_t outlined destroy of _ArchivedView?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t makeUserInfo #1 (_:) in _ArchivedViewStates.state(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;

  v5 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for ArchiveReader();
  static ArchiveReader.readerKey.getter();
  *((_QWORD *)&v25 + 1) = v13;
  *(_QWORD *)&v24 = a2;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v12);
  static ArchiveReader.cacheKey.getter();
  v14 = type metadata accessor for _ArchivedViewStates(0);
  v15 = *(_QWORD *)(a3 + *(int *)(v14 + 28));
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MutableBox<[Int : Any]>, (uint64_t (*)(uint64_t))type metadata accessor for [Int : Any], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0C18]);
  *((_QWORD *)&v25 + 1) = v16;
  *(_QWORD *)&v24 = v15;
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v12);
  static ArchiveReader.namedImagesKey.getter();
  *((_QWORD *)&v25 + 1) = MEMORY[0x1E0CE0C40];
  swift_retain();
  NamedImage.Cache.init(archiveDelegate:)();
  specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v12);
  static ArchivedViewCore.preferredBundleLanguageKey.getter();
  v17 = a3 + *(int *)(v14 + 20);
  v18 = (uint64_t *)(v17 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  v19 = v18[1];
  if (v19)
  {
    v20 = *v18;
    *((_QWORD *)&v25 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v24 = v20;
    *((_QWORD *)&v24 + 1) = v19;
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v8);
  static ArchivedViewCore.preferredCompositionLanguage.getter();
  v21 = ArchivedViewCore.Metadata.preferredCompositionLanguage.getter();
  type metadata accessor for CTCompositionLanguage(0);
  *((_QWORD *)&v25 + 1) = v22;
  LOBYTE(v24) = v21;
  return specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v12);
}

uint64_t _ArchivedViewStates.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  __int16 v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  char v16;

  v13 = 0uLL;
  result = DisplayList.init()();
  v12 = 0uLL;
  v6 = v14;
  v7 = v15;
  v8 = v16;
  v9 = a1[1];
  if (v9 >= a1[2])
  {
LABEL_17:
    a1[3] = 0;
    *(_OWORD *)a2 = v12;
    *(_QWORD *)(a2 + 16) = v6;
    *(_WORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 26) = v8;
    return result;
  }
  while (1)
  {
    v10 = a1[3];
    if (v10)
    {
      v11 = a1[4];
      if (v9 < v11)
        goto LABEL_8;
      if (v11 < v9)
        break;
      a1[3] = 0;
    }
    v10 = ProtobufDecoder.decodeVarint()();
    if (v2)
      return swift_bridgeObjectRelease();
    if (v10 <= 7)
      break;
LABEL_8:
    if (v10 >> 3 == 2)
    {
      ProtobufDecoder.messageField<A>(_:)();
      if (v2)
        return swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v6 = v13;
      v7 = 0;
      v8 = 0;
    }
    else if (v10 >> 3 == 1)
    {
      type metadata accessor for CGSize(0);
      result = ProtobufDecoder.messageField<A>(_:)();
      if (v2)
        return swift_bridgeObjectRelease();
      v12 = v13;
    }
    else
    {
      *(_QWORD *)&v13 = v10;
      result = ProtobufDecoder.skipField(_:)();
      if (v2)
        return swift_bridgeObjectRelease();
    }
    v9 = a1[1];
    if (v9 >= a1[2])
      goto LABEL_17;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t _ArchivedViewStates.auxiliaryData.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (*v0)
  {
    if ((*((_BYTE *)v0 + *(int *)(type metadata accessor for _ArchivedViewStates(0) + 20) + 40) & 1) != 0)
      return 0;
    swift_retain();
    v1 = ArchiveReader.subscript.getter();
    swift_release();
    return v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _ArchivedViewStates.attachment(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  void (*v4)(_BYTE *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[32];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  if (*v1)
  {
    v10 = a1;
    v9 = v2;
    if (a1 < 0)
      return 0;
    swift_retain_n();
    if (ArchiveReader.endIndex.getter() <= a1)
    {
      v6 = 0;
    }
    else
    {
      type metadata accessor for ArchiveReader();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchiveReader and conformance ArchiveReader, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE1DD8], MEMORY[0x1E0CE1DE8]);
      v4 = (void (*)(_BYTE *, _QWORD))protocol witness for Collection.subscript.read in conformance ArchiveReader();
      v6 = *(_QWORD *)v5;
      outlined copy of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      v4(v8, 0);
    }
    swift_release_n();
    return v6;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance _ArchivedViewStates@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v4 < *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(a2 + 20) + 8) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ArchivedViewStates(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(a2 + 20) + 8) + 16))
  {
    *result = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _ArchivedViewStates@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(result + 20) + 8) + 16);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _ArchivedViewStates(_QWORD *a1, unint64_t *a2))(uint64_t a1)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _ArchivedView?, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  *a1 = v5;
  v6 = type metadata accessor for _ArchivedView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[1] = v8;
  _ArchivedViewStates.state(at:)(*a2, (uint64_t)v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  outlined init with take of TableCellFormula((uint64_t)v5, (uint64_t)v8, type metadata accessor for _ArchivedView);
  return protocol witness for Collection.subscript.read in conformance _ArchivedViewStates;
}

void protocol witness for Collection.subscript.read in conformance _ArchivedViewStates(uint64_t a1)
{
  void *v1;
  void *v2;

  v2 = *(void **)a1;
  v1 = *(void **)(a1 + 8);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v1, type metadata accessor for _ArchivedView);
  free(v1);
  free(v2);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _ArchivedViewStates@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *result;
  if (*result < 0 || (v6 = result[1], *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(a2 + 20) + 8) + 16) < v6))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Slice<_ArchivedViewStates>(0);
    result = (uint64_t *)outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)a3 + *(int *)(v7 + 40), type metadata accessor for _ArchivedViewStates);
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _ArchivedViewStates@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(result + 20) + 8) + 16);
  *a2 = 0;
  a2[1] = v3;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ArchivedViewStates(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) + 16) == 0;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ArchivedViewStates@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v5 <= *(_QWORD *)(*(_QWORD *)(v4 + *(int *)(a3 + 20) + 8) + 16))
  {
    *a4 = v5;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ArchivedViewStates@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ArchivedViewStates(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(a3 + 20) + 8) + 16);
  if (*result <= v5 && v4 <= v5)
    return (unint64_t *)(v4 - *result);
  __break(1u);
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance _ArchivedViewStates@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(a2 + 20) + 8) + 16))
    __break(1u);
  else
    *a3 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _ArchivedViewStates(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (*result >= *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(a2 + 20) + 8) + 16))
    __break(1u);
  else
    ++*result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance _ArchivedViewStates(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  outlined init with take of TableCellFormula(v1, a1, type metadata accessor for _ArchivedViewStates);
  type metadata accessor for IndexingIterator<_ArchivedViewStates>();
  *(_QWORD *)(a1 + *(int *)(v3 + 36)) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ArchivedViewStates(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) + 16);
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance _ArchivedViewStates()
{
  uint64_t v0;
  size_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0, type metadata accessor for _ArchivedViewStates);
  return v1;
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance _ArchivedViewStates.State@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return _ArchivedViewStates.State.init(from:)(a1, a2);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _ArchivedViewStates.State()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for CGSize(0);
  result = ProtobufEncoder.messageField<A>(_:_:)();
  if (!v0)
    return ProtobufEncoder.messageField<A>(_:_:)();
  return result;
}

void static _ArchivedViewStates.DeploymentVersion.v5.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static _ArchivedViewStates.DeploymentVersion.v6.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

BOOL static _ArchivedViewStates.DeploymentVersion.< infix(_:_:)(char *a1, char *a2)
{
  return *a1 < *a2;
}

void _ArchivedViewStates.DeploymentVersion.hash(into:)()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static _ArchivedViewStates.DeploymentVersion.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int _ArchivedViewStates.DeploymentVersion.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _ArchivedViewStates.DeploymentVersion(char *a1, char *a2)
{
  return *a2 < *a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance _ArchivedViewStates.DeploymentVersion@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _ArchivedViewStates.DeploymentVersion.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  char v5;
  _QWORD v7[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ArchivedViewStates.DeploymentVersion(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t _ArchivedViewStates.DeploymentVersion.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t static _ArchivedView._makeView(view:inputs:)@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  uint64_t (*v4)(void);
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  id v13;
  id v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  int v30;
  int v31;
  int v32;
  _QWORD v34[2];
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = a1[3];
  v54 = a1[2];
  v55 = v2;
  v56 = a1[4];
  v57 = *((_DWORD *)a1 + 20);
  v3 = a1[1];
  v52 = *a1;
  v53 = v3;
  _ViewOutputs.init()();
  type metadata accessor for DisplayList.UnaryInterpolatorGroup();
  swift_allocObject();
  DisplayList.UnaryInterpolatorGroup.init()();
  v35 = v55;
  v36 = DWORD2(v55);
  v48 = v54;
  v49 = v55;
  v50 = v56;
  v51 = v57;
  v46 = v52;
  v47 = v53;
  v31 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v32 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v31 & 1) != 0)
  {
    v4 = MEMORY[0x1E0CE4070];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for _AnyPreferenceKey<ArchivedViewStatesKey>, (uint64_t)&type metadata for ArchivedViewStatesKey, (uint64_t)&protocol witness table for ArchivedViewStatesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    lazy protocol witness table accessor for type _AnyPreferenceKey<ArchivedViewStatesKey> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type _AnyPreferenceKey<ArchivedViewStatesKey> and conformance _AnyPreferenceKey<A>, &lazy cache variable for type metadata for _AnyPreferenceKey<ArchivedViewStatesKey>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v4, MEMORY[0x1E0CE4078]);
    outlined retain of _ViewInputs((uint64_t)&v52);
    PreferenceKeys.add(_:)();
  }
  else
  {
    outlined retain of _ViewInputs((uint64_t)&v52);
  }
  LODWORD(v40) = v52;
  _ViewInputs.animatedPosition()();
  _ViewInputs.containerPosition.setter();
  _DisplayList_Identity.init()();
  LODWORD(v37) = v40;
  _ViewInputs.pushIdentity(_:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for _GraphValue<_ArchivedView>, type metadata accessor for _ArchivedView, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  v5 = _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  HIDWORD(v40) = v5;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ArchivedDisplayList and conformance ArchivedDisplayList();
  v30 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  DWORD1(v48) |= 0x10u;
  *(_QWORD *)((char *)&v40 + 4) = *(_QWORD *)((char *)&v46 + 4);
  v41 = v47;
  v42 = v48;
  v43 = v49;
  v44 = v50;
  v45 = v51;
  LODWORD(v40) = _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  v6 = v46;
  v7 = DWORD2(v46);
  v8 = v47;
  v9 = v48;
  v10 = v49;
  v11 = v50;
  v12 = v51;
  v13 = (id)AGSubgraphGetCurrent();
  if (!v13)
    __break(1u);
  v14 = v13;
  v15 = *MEMORY[0x1E0CFED28];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for MutableBox<DisplayList.HostedViewState>, (uint64_t)&type metadata for DisplayList.HostedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v15;
  *(_DWORD *)(v16 + 20) = v30;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v6;
  *(_DWORD *)(v16 + 40) = v7;
  *(_OWORD *)(v16 + 48) = v8;
  *(_OWORD *)(v16 + 64) = v9;
  *(_OWORD *)(v16 + 80) = v10;
  *(_OWORD *)(v16 + 96) = v11;
  *(_DWORD *)(v16 + 112) = v12;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v16 + 120) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v16 + 128) = v17;
  *(_DWORD *)(v16 + 136) = 0;
  *(_QWORD *)&v40 = v16;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  v19 = 0;
  if (((v31 | v32) & 1) != 0)
  {
    LODWORD(v40) = v18;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList();
    v19 = Attribute.init<A>(body:value:flags:update:)();
    if ((v31 & 1) != 0)
    {
      _ViewOutputs.subscript.setter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>, (uint64_t)&type metadata for ArchivedViewStatesKey, (uint64_t)&protocol witness table for ArchivedViewStatesKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DisplayList.HostedViews.Preference);
      lazy protocol witness table accessor for type _AnyPreferenceKey<ArchivedViewStatesKey> and conformance _AnyPreferenceKey<A>(&lazy protocol witness table cache variable for type DisplayList.HostedViews.Preference<ArchivedViewStatesKey> and conformance DisplayList.HostedViews.Preference<A>, &lazy cache variable for type metadata for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DisplayList.HostedViews.Preference, (uint64_t)&protocol conformance descriptor for DisplayList.HostedViews.Preference<A>);
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.value.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for InterpolatableArchiveContent(0);
      lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init();
      Attribute.init<A>(body:value:flags:update:)();
      v43 = v55;
      v44 = v56;
      v45 = v57;
      v40 = v52;
      v41 = v53;
      v42 = v54;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type InterpolatableArchiveContent and conformance InterpolatableArchiveContent, type metadata accessor for InterpolatableArchiveContent, (uint64_t)&protocol conformance descriptor for InterpolatableArchiveContent);
      _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)();
    }
  }
  *(_QWORD *)&v40 = v35;
  DWORD2(v40) = v36;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    if ((BYTE4(v54) & 2) == 0)
      goto LABEL_10;
LABEL_14:
    LODWORD(v40) = _GraphValue.value.getter();
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)&v41 = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v40) = 0;
    _ViewOutputs.layoutComputer.setter();
    if ((v32 & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v26 = _ViewInputs.animatedSize()();
  v27 = _ViewInputs.animatedPosition()();
  v28 = _ViewInputs.transform.getter();
  type metadata accessor for DisplayList.HostedViewResponder(0);
  v29 = (_QWORD *)swift_allocObject();
  v29[27] = 0;
  v29[28] = 0;
  v29[26] = 0;
  outlined retain of _ViewInputs((uint64_t)&v52);
  ViewTransform.init()();
  v43 = v55;
  v44 = v56;
  v45 = v57;
  *((_QWORD *)&v41 + 1) = *((_QWORD *)&v53 + 1);
  v42 = v54;
  *(_QWORD *)&v40 = __PAIR64__(v26, v18);
  *((_QWORD *)&v40 + 1) = __PAIR64__(v28, v27);
  *(_QWORD *)&v41 = DefaultLayoutViewResponder.init(inputs:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))MEMORY[0x1E0CE2140], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  LOBYTE(v40) = 0;
  _ViewOutputs.subscript.setter();
  if ((BYTE4(v54) & 2) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v32 & 1) != 0)
  {
LABEL_11:
    swift_getKeyPath();
    v20 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v21 = _ViewInputs.viewPhase.getter();
    v22 = _ViewInputs.animatedPosition()();
    v23 = _ViewInputs.animatedSize()();
    v43 = v55;
    v44 = v56;
    v45 = v57;
    v40 = v52;
    v41 = v53;
    v42 = v54;
    v24 = _ViewInputs.transform.getter();
    specialized ArchivedAccessibilityAttachment.init(list:accessibilityEnabled:phase:position:size:transform:resetSeed:)(v19, v20, v21, v22, v23, v24, 0, (uint64_t)&v40);
    v37 = v40;
    v38 = v41;
    v39 = v42;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of ContextMenuResponderFilter((uint64_t)&v40);
    LOBYTE(v37) = 0;
    _ViewOutputs.subscript.setter();
  }
LABEL_12:
  closure #1 in static _ArchivedView._makeView(view:inputs:)((uint64_t)v34, v18, (uint64_t)&v52);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *a2 = v34[0];
  a2[1] = v34[1];
  return result;
}

uint64_t closure #1 in static _ArchivedView._makeView(view:inputs:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(int *, void *, unint64_t, uint64_t, uint64_t);
  unint64_t Preference;
  uint64_t v13[4];
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v16 = a2;
  v3 = *(_QWORD *)(a3 + 48);
  v17 = a1;
  v18 = v3;
  v19 = *(_DWORD *)(a3 + 56);
  v14 = v3;
  v15 = 0;
  outlined retain of [Text.Modifier]((uint64_t)&v18);
  if (!PreferenceKeys.endIndex.getter())
    return swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
  while (1)
  {
    v4 = (void (*)(uint64_t *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
    v6 = *v5;
    v7 = v5[1];
    v4(v13, 0);
    v8 = v15;
    v13[0] = v14;
    swift_bridgeObjectRetain();
    result = PreferenceKeys.endIndex.getter();
    if (v8 < 0 || v8 >= result)
      break;
    v10 = v8 + 1;
    v15 = v10;
    swift_bridgeObjectRelease();
    v11 = *(void (**)(int *, void *, unint64_t, uint64_t, uint64_t))(v7 + 16);
    Preference = lazy protocol witness table accessor for type _ArchivedView.MakePreference and conformance _ArchivedView.MakePreference();
    v11(&v16, &unk_1E1AB74D8, Preference, v6, v7);
    if (v10 == PreferenceKeys.endIndex.getter())
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void _ArchivedView.MakePreference.visit<A>(key:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2 != &type metadata for AccessibilityNodesKey
    && a2 != (ValueMetadata *)MEMORY[0x1E0CE1000]
    && a2 != (ValueMetadata *)MEMORY[0x1E0CE4068]
    && a2 != &type metadata for ArchivedViewStatesKey)
  {
    v9 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*v3);
    v18 = v9;
    MEMORY[0x1E0C80A78](v9, v10);
    v14[2] = swift_getAssociatedTypeWitness();
    v15 = type metadata accessor for DisplayList.HostedViews.Preference(0, (uint64_t)a2, a3, v11);
    v16 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DisplayList.HostedViews.Preference<A>, v15);
    v12 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v14, v15, MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
    MEMORY[0x18D756EA4](a2, v17, a2, a3);
  }
}

void protocol witness for View.body.getter in conformance _ArchivedView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static _ArchivedView.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v4 = type metadata accessor for _ArchivedView(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v16 - v10;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a2 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&v16 - v10, type metadata accessor for _ArchivedView);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v7, type metadata accessor for _ArchivedView);
  if (v12 == v13)
    v14 = static UUID.== infix(_:_:)();
  else
    v14 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, type metadata accessor for _ArchivedView);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v11, type metadata accessor for _ArchivedView);
  return v14 & 1;
}

uint64_t _ArchivedView.containsForegroundLayers.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 26) & 1;
}

BOOL _ArchivedView.containsForegroundLayers(level:)(_BYTE *a1)
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + 26) & *a1) != 0;
}

uint64_t _ArchivedView.containsPrivacySensitive.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 26) >> 2) & 1;
}

uint64_t _ArchivedView.containsInteractiveControls.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + 26) >> 3) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ArchivedView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v15 - v7;
  v10 = *(_QWORD *)(v9 + 32);
  v12 = *(_QWORD *)(v11 + 32);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v9, (uint64_t)&v15 - v7, type metadata accessor for _ArchivedView);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v4, type metadata accessor for _ArchivedView);
  if (v10 == v12)
    v13 = static UUID.== infix(_:_:)();
  else
    v13 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for _ArchivedView);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for _ArchivedView);
  return v13 & 1;
}

double _ArchivedView.maxAnimationDuration.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for _ArchivedView(0) + 32));
}

uint64_t _ArchivedView.maxAnimationDuration.setter(double a1)
{
  uint64_t v1;
  float v2;
  uint64_t result;

  v2 = a1;
  result = type metadata accessor for _ArchivedView(0);
  *(float *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

float (*_ArchivedView.maxAnimationDuration.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for _ArchivedView(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  *(double *)a1 = *(float *)(v1 + v3);
  return _ArchivedView.maxAnimationDuration.modify;
}

float _ArchivedView.maxAnimationDuration.modify(uint64_t a1)
{
  float result;

  result = *(double *)a1;
  *(float *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 16)) = result;
  return result;
}

uint64_t _AnyArchivedViewDelegate.resolveImage(uuid:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + class metadata base offset for _AnyArchivedViewDelegate + 8)
                                          + 8))(a1, *(_QWORD *)(v3 + class metadata base offset for _AnyArchivedViewDelegate));
  return swift_endAccess();
}

void _AnyArchivedViewDelegate.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _AnyArchivedViewDelegate.__ivar_destroyer()
{
  char *v0;

  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0
                                                                   + class metadata base offset for _AnyArchivedViewDelegate)
                                                       - 8)
                                           + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0
                                                                 + class metadata base offset for _AnyArchivedViewDelegate
                                                                 + 16)]);
}

uint64_t _AnyArchivedViewDelegate.__deallocating_deinit()
{
  char *v0;

  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0
                                                         + class metadata base offset for _AnyArchivedViewDelegate)
                                             - 8)
                                 + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0
                                                       + class metadata base offset for _AnyArchivedViewDelegate
                                                       + 16)]);
  return swift_deallocClassInstance();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ArchivedViewState.ID()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ArchivedViewState.ID()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ArchivedViewState.ID()
{
  uint64_t v0;
  Swift::UInt32 v1;

  v1 = *(_DWORD *)(v0 + 20);
  Hasher.init(_seed:)();
  Hasher.combine(bytes:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ArchivedViewStatesKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v3;

  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t InterpolatableArchiveContent.Init.value.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v2 = type metadata accessor for _ArchivedView(0);
  Value = AGGraphGetValue();
  v4 = *(_QWORD *)(Value + 32);
  v5 = Value + *(int *)(v2 + 24);
  v6 = (int *)type metadata accessor for InterpolatableArchiveContent(0);
  v7 = (char *)a1 + v6[5];
  v8 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, v5, v8);
  v9 = *(_QWORD *)(AGGraphGetValue() + *(int *)(v2 + 28)) != 0;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v10 = *(_QWORD *)AGGraphGetValue();
  *a1 = v4;
  *((_BYTE *)a1 + v6[6]) = v9;
  *(_QWORD *)((char *)a1 + v6[7]) = v10;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InterpolatableArchiveContent.Init@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for InterpolatableArchiveContent(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance InterpolatableArchiveContent.Init@<X0>(_QWORD *a1@<X8>)
{
  return InterpolatableArchiveContent.Init.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance InterpolatableArchiveContent.Init()
{
  lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init();
  return static AsyncAttribute.flags.getter();
}

uint64_t InterpolatableArchiveContent.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t result;
  int v20;
  char v21;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for InterpolatableArchiveContent(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v22 - v16;
  v18 = static UUID.== infix(_:_:)();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v17, type metadata accessor for InterpolatableArchiveContent);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v13, type metadata accessor for InterpolatableArchiveContent);
  if ((v18 & 1) != 0)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, type metadata accessor for InterpolatableArchiveContent);
    return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for InterpolatableArchiveContent);
  }
  v20 = v17[*(int *)(v6 + 24)];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, type metadata accessor for InterpolatableArchiveContent);
  outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v9, type metadata accessor for InterpolatableArchiveContent);
  if (v20 != 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for InterpolatableArchiveContent);
    goto LABEL_7;
  }
  v21 = v9[*(int *)(v6 + 24)];
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, type metadata accessor for InterpolatableArchiveContent);
  if ((v21 & 1) == 0)
  {
LABEL_7:
    result = outlined consume of ContentTransition.Storage(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(_BYTE *)(a1 + 13));
    *(_QWORD *)a1 = 0x8000000002;
    *(_DWORD *)(a1 + 8) = 0x2000000;
    *(_WORD *)(a1 + 12) = 3;
  }
  return result;
}

uint64_t InterpolatableArchiveContent.defaultAnimation(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int32x4_t *v6;
  uint64_t v7;
  __int32 v8;
  Swift::UInt32 v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t v17;
  uint64_t v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v18[0] = 0;
  v2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for InterpolatableArchiveContent(0) + 28));
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v6 = (int32x4_t *)(v4 + 32 * i);
      v7 = v6[1].i64[1];
      if (v7)
      {
        v17 = *v6;
        v8 = v6[1].i32[0];
        v9 = v6[1].u32[1];
        swift_retain_n();
        v10 = specialized getter of oldIDs #1 in InterpolatableArchiveContent.defaultAnimation(to:)(v18, v1);
        if (!*(_QWORD *)(v10 + 16)
          || (Hasher.init(_seed:)(),
              Hasher.combine(bytes:)(),
              Hasher._combine(_:)(v9),
              v11 = Hasher._finalize()(),
              v12 = -1 << *(_BYTE *)(v10 + 32),
              v13 = v11 & ~v12,
              ((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0))
        {
LABEL_13:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        v14 = ~v12;
        while (1)
        {
          v15 = (int32x4_t *)(*(_QWORD *)(v10 + 48) + 24 * v13);
          if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*v15, v17)), 0xFuLL))) & 1) != 0
            && v15[1].i32[0] == v8
            && v15[1].i32[1] == v9)
          {
            break;
          }
          v13 = (v13 + 1) & v14;
          if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
            goto LABEL_13;
        }
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v7 = 0;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized getter of oldIDs #1 in InterpolatableArchiveContent.defaultAnimation(to:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v12[6];
  uint64_t v13;

  v2 = *a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for InterpolatableArchiveContent(0) + 28));
    lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID();
    swift_bridgeObjectRetain();
    v5 = Set.init(minimumCapacity:)();
    v13 = v5;
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = (unint64_t *)(v4 + 48);
      do
      {
        v8 = *(v7 - 2);
        v9 = *(v7 - 1);
        v10 = *v7;
        v7 += 4;
        specialized Set._Variant.insert(_:)(v12, v8, v9, v10);
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v2 = v13;
    }
    else
    {
      v2 = v5;
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    *a1 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v2;
}

void protocol witness for static InterpolatableContent.defaultTransition.getter in conformance InterpolatableArchiveContent(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x8000000004;
  *(_BYTE *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t specialized InterpolatableContent<>.requiresTransition(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  char v4;

  if (*v1 == *a1
    && (v3 = type metadata accessor for InterpolatableArchiveContent(0), (static UUID.== infix(_:_:)() & 1) != 0)
    && *((unsigned __int8 *)v1 + *(int *)(v3 + 24)) == *((unsigned __int8 *)a1 + *(int *)(v3 + 24)))
  {
    v4 = specialized static Array<A>.== infix(_:_:)(*(_QWORD *)((char *)v1 + *(int *)(v3 + 28)), *(_QWORD *)((char *)a1 + *(int *)(v3 + 28))) ^ 1;
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

uint64_t ArchivedDisplayList.updateValue()()
{
  uint64_t *v0;
  uint64_t *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  __int128 *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  int v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  int v59;
  uint64_t v60;

  v1 = v0;
  v60 = *MEMORY[0x1E0C80C00];
  v2 = (int *)type metadata accessor for _ArchivedView(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DisplayList.ArchiveIDs();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  DisplayList.Version.init(forUpdate:)();
  v37 = v51;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, Value + v2[6], v6);
  v17 = *(_QWORD *)(AGGraphGetValue() + v2[7]);
  if (v17)
  {
    v18 = v17;
  }
  else
  {
    _DisplayList_StableIdentityMap.init()();
    v18 = v51;
  }
  *(_QWORD *)&v42 = v18;
  swift_bridgeObjectRetain();
  DisplayList.ArchiveIDs.init(uuid:stableIDs:)();
  v19 = *v1;
  v20 = AGGraphGetValue();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v20, (uint64_t)v5, type metadata accessor for _ArchivedView);
  v21 = *(float *)&v5[v2[8]];
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, type metadata accessor for _ArchivedView);
  swift_beginAccess();
  *(double *)(v19 + 16) = v21;
  v22 = MEMORY[0x1E0CE0F78];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CE0F78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v23 = swift_allocBox();
  v25 = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, v24, (uint64_t (*)(_QWORD))v22);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
  v26 = AGGraphGetValue();
  v27 = *(_QWORD *)(v26 + 16);
  v28 = *(_WORD *)(v26 + 24);
  v29 = *(_BYTE *)(v26 + 26);
  *(_QWORD *)&v42 = v23;
  *((_QWORD *)&v42 + 1) = 0x4000000100000000;
  *(_QWORD *)&v43 = v27;
  BYTE10(v43) = v29;
  WORD4(v43) = v28;
  v30 = (__int128 *)AGGraphGetValue();
  v31 = v30[1];
  v51 = *v30;
  v52 = v31;
  v32 = swift_bridgeObjectRetain();
  MEMORY[0x18D75BE3C](v32);
  v41 = *((_DWORD *)v1 + 2);
  v38 = v37;
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v42) = 0;
  DisplayList.Item.canonicalize(options:)();
  DisplayList.UnaryInterpolatorGroup.apply(to:)();
  v33 = v54;
  v34 = v55;
  v42 = v51;
  v43 = v52;
  v44 = v53;
  v45 = v54;
  v46 = v55;
  v47 = v56;
  v49 = v58;
  v48 = v57;
  v50 = v59;
  outlined copy of DisplayList.Item.Value(v54, v55);
  DisplayList.init(_:)();
  *(_QWORD *)&v42 = v38;
  WORD4(v42) = v39;
  BYTE10(v42) = v40;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v33, v34);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))v22);
}

uint64_t ArchivedAccessibilityAttachment.updateValue()()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t Value;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v1 = v0;
  v37 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v2 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v2 != *(_DWORD *)(v0 + 24))
    {
      *(_DWORD *)(v0 + 24) = v2;
      v3 = *(_QWORD *)(v0 + 32);
      DisplayList.AccessibilityUpdater.createRoot()();
      v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_beginAccess();
      *(_QWORD *)(v3 + 48) = v4;
      swift_bridgeObjectRelease();
    }
    Value = AGGraphGetValue();
    v34 = *(_QWORD *)Value;
    v6 = *(_OWORD *)(Value + 24);
    v35 = *(_OWORD *)(Value + 8);
    v36 = v6;
    *(_OWORD *)v32 = *(_OWORD *)AGGraphGetValue();
    v7 = swift_retain();
    *(double *)&v8 = MEMORY[0x18D755E9C](v7);
    ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(v9, v8));
    AGGraphGetValue();
    if ((v10 & 1) != 0 || (AGGraphGetValue(), (v11 & 1) != 0))
    {
      v13 = 1;
    }
    else
    {
      AGGraphGetValue();
      v13 = v12 & 1;
    }
    v18 = *(_QWORD *)(v1 + 32);
    v19 = AGGraphGetValue();
    v20 = *(_WORD *)(v19 + 8);
    v21 = *(_BYTE *)(v19 + 10);
    v29 = *(_QWORD *)v19;
    v30 = v20;
    v31 = v21;
    AGGraphGetValue();
    v22 = swift_bridgeObjectRetain();
    MEMORY[0x18D75BE3C](v22);
    *(_QWORD *)v32 = v34;
    *(_OWORD *)&v32[8] = v35;
    v33 = v36;
    swift_retain();
    v23 = specialized DisplayList.AccessibilityUpdater.update(list:size:transform:geometryChanged:)(&v29, (uint64_t *)v32, v13);
    swift_bridgeObjectRelease();
    swift_release();
    if ((v23 & 1) == 0 && AGGraphGetOutputValue())
      return swift_release();
    v24 = *(void **)(v18 + 40);
    if (v24)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_187BFF9C0;
      *(_QWORD *)(v25 + 32) = v24;
      *(_QWORD *)v32 = v25;
      specialized Array._endMutation()();
      v26 = *(_QWORD *)v32;
    }
    else
    {
      v26 = MEMORY[0x1E0DEE9D8];
    }
    v27 = *(_QWORD *)(v18 + 56);
    *(_QWORD *)v32 = v26;
    *(_QWORD *)&v32[8] = v27;
    v28 = v24;
    AGGraphSetOutputValue();
    swift_release();
  }
  else
  {
    v34 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v35 = 0;
    AGGraphSetOutputValue();
    result = AGGraphGetValue();
    if ((v15 & 1) == 0)
      return result;
    v16 = *(_QWORD *)(v0 + 32);
    DisplayList.AccessibilityUpdater.createRoot()();
    v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_beginAccess();
    *(_QWORD *)(v16 + 48) = v17;
  }
  return swift_bridgeObjectRelease();
}

uint64_t ArchivedLayoutComputer.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  double v2;
  double v3;
  BOOL v4;
  uint64_t result;

  type metadata accessor for _ArchivedView(0);
  Value = AGGraphGetValue();
  v2 = *(double *)Value;
  v3 = *(double *)(Value + 8);
  v4 = *(double *)Value == *(double *)(v0 + 8) && v3 == *(double *)(v0 + 16);
  if (!v4 || (result = AGGraphGetOutputValue()) == 0)
  {
    lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer();
    lazy protocol witness table accessor for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine();
    result = StatefulRule<>.update<A>(to:)();
    *(double *)(v0 + 8) = v2;
    *(double *)(v0 + 16) = v3;
  }
  return result;
}

uint64_t ProtobufDecoder.decodeVarint()()
{
  uint64_t v0;
  unint64_t v1;
  char *v2;
  _BYTE *v3;
  uint64_t result;
  char v5;
  _BYTE *v6;
  unint64_t v7;
  char v8;
  unint64_t v9;

  v2 = *(char **)(v0 + 8);
  v1 = *(_QWORD *)(v0 + 16);
  v3 = v2 + 1;
  if (v1 < (unint64_t)(v2 + 1))
  {
LABEL_2:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  v5 = *v2;
  result = v5 & 0x7F;
  if (v5 < 0)
  {
    v7 = 7;
    while (1)
    {
      v6 = v3 + 1;
      if (v1 < (unint64_t)(v3 + 1))
        break;
      v8 = *v3;
      v9 = (unint64_t)(*v3 & 0x7F) << v7;
      if (v7 > 0x3F)
        v9 = 0;
      result |= v9;
      v7 += 7;
      v3 = v6;
      if ((v8 & 0x80) == 0)
        goto LABEL_10;
    }
    *(_QWORD *)(v0 + 8) = v3;
    goto LABEL_2;
  }
  v6 = v3;
LABEL_10:
  *(_QWORD *)(v0 + 8) = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError;
  if (!lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError)
  {
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2EC0], MEMORY[0x1E0CE2EB8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedDisplayList and conformance ArchivedDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList;
  if (!lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedDisplayList, &unk_1E1B18698);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedDisplayList and conformance ArchivedDisplayList);
  }
  return result;
}

uint64_t sub_187477D64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187477DA0()
{
  return EnvironmentValues.accessibilityEnabled.setter();
}

BOOL specialized static ArchivedViewState.ID.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    return a1[1].i32[1] == a2[1].i32[1];
  }
  return result;
}

uint64_t specialized static ArchivedViewState.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0]
    && a1[1].i32[1] == a2[1].i32[1])
  {
    v4 = a2[1].i64[1];
    if (a1[1].i64[1])
    {
      if (v4)
      {
        swift_retain();
        swift_retain();
        v5 = static Animation.== infix(_:_:)();
        swift_release();
        swift_release();
        if ((v5 & 1) != 0)
          return 1;
      }
    }
    else if (!v4)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static InterpolatableArchiveContent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (*a1 == *a2
    && (v4 = type metadata accessor for InterpolatableArchiveContent(0), (static UUID.== infix(_:_:)() & 1) != 0)
    && *((unsigned __int8 *)a1 + *(int *)(v4 + 24)) == *((unsigned __int8 *)a2 + *(int *)(v4 + 24)))
  {
    return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)((char *)a1 + *(int *)(v4 + 28)), *(_QWORD *)((char *)a2 + *(int *)(v4 + 28)));
  }
  else
  {
    return 0;
  }
}

uint64_t specialized ArchivedAccessibilityAttachment.init(list:accessibilityEnabled:phase:position:size:transform:resetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for ViewGraph();
  v14 = MEMORY[0x18D75C5F8]() + 200;
  swift_beginAccess();
  v15 = MEMORY[0x18D760234](v14);
  result = swift_release();
  if (v15)
  {
    swift_getObjectType();
    v17 = swift_conformsToProtocol2();
    if (v17)
      v18 = v17;
    else
      v18 = 0;
    if (v17)
      v19 = v15;
    else
      v19 = 0;
    if (v19)
    {
      type metadata accessor for DisplayList.AccessibilityUpdater();
      v20 = swift_allocObject();
      *(_WORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 32) = 0;
      swift_unknownObjectWeakInit();
      *(_QWORD *)(v20 + 48) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v20 + 56) = 0;
      *(_QWORD *)(v20 + 32) = v18;
      *(_QWORD *)(v20 + 40) = 0;
      swift_unknownObjectWeakAssign();
      DisplayList.AccessibilityUpdater.createRoot()();
      result = swift_unknownObjectRelease();
      *(_DWORD *)a8 = a1;
      *(_DWORD *)(a8 + 4) = a2;
      *(_DWORD *)(a8 + 8) = a3;
      *(_DWORD *)(a8 + 12) = a4;
      *(_DWORD *)(a8 + 16) = a5;
      *(_DWORD *)(a8 + 20) = a6;
      *(_DWORD *)(a8 + 24) = a7;
      *(_QWORD *)(a8 + 32) = v20;
      return result;
    }
    result = swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment;
  if (!lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedAccessibilityAttachment, &unk_1E1AFEDB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAccessibilityAttachment and conformance ArchivedAccessibilityAttachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedLayoutComputer, &unk_1E1ADB1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedLayoutComputer, &unk_1E1ADB1E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer and conformance ArchivedLayoutComputer);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<ArchivedViewStatesKey> and conformance _AnyPreferenceKey<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a2, (uint64_t)&type metadata for ArchivedViewStatesKey, (uint64_t)&protocol witness table for ArchivedViewStatesKey, a3);
    result = MEMORY[0x18D75FFDC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for InterpolatableArchiveContent(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for InterpolatableArchiveContent);
}

unint64_t lazy protocol witness table accessor for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init;
  if (!lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InterpolatableArchiveContent.Init, &unk_1E1AF6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init;
  if (!lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for InterpolatableArchiveContent.Init, &unk_1E1AF6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterpolatableArchiveContent.Init and conformance InterpolatableArchiveContent.Init);
  }
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, type metadata accessor for _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates, MEMORY[0x1E0DEDE40]);
}

void type metadata accessor for Slice<_ArchivedViewStates>(uint64_t a1)
{
  type metadata accessor for Slice<_ArchivedViewStates>(a1, &lazy cache variable for type metadata for Slice<_ArchivedViewStates>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
}

uint64_t base witness table accessor for Collection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, type metadata accessor for _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates, MEMORY[0x1E0DEDE28]);
}

uint64_t lazy protocol witness table accessor for type Slice<_ArchivedViewStates> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ArchivedViewStates>(255);
    v10 = v9;
    v11 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, type metadata accessor for _ArchivedViewStates, a3);
    result = MEMORY[0x18D75FFDC](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Sequence in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, type metadata accessor for _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Slice<_ArchivedViewStates> and conformance Slice<A>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<_ArchivedViewStates>, MEMORY[0x1E0DEDE48]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ArchivedViewStates()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexingIterator<_ArchivedViewStates> and conformance IndexingIterator<A>, (uint64_t (*)(uint64_t))type metadata accessor for IndexingIterator<_ArchivedViewStates>, MEMORY[0x1E0DEC908]);
}

void type metadata accessor for Slice<_ArchivedViewStates>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for _ArchivedViewStates(255);
    v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ArchivedViewStates and conformance _ArchivedViewStates, type metadata accessor for _ArchivedViewStates, (uint64_t)&protocol conformance descriptor for _ArchivedViewStates);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t lazy protocol witness table accessor for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedViewStates.DeploymentVersion, &type metadata for _ArchivedViewStates.DeploymentVersion);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ArchivedViewStates.DeploymentVersion and conformance _ArchivedViewStates.DeploymentVersion);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in _ArchivedView()
{
  return &protocol witness table for _ArchivedView;
}

double sub_187478478@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(float *)(a1 + *(int *)(type metadata accessor for _ArchivedView(0) + 32));
  *a2 = result;
  return result;
}

uint64_t sub_1874784B0(double *a1, uint64_t a2)
{
  float v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for _ArchivedView(0);
  *(float *)(a2 + *(int *)(result + 32)) = v3;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ArchivedViewStates(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = *(_QWORD *)((char *)a2 + v8);
    *((_QWORD *)v9 + 1) = v11;
    *((_QWORD *)v9 + 2) = *(_QWORD *)((char *)a2 + v8 + 16);
    v9[24] = *((_BYTE *)a2 + v8 + 24);
    *((_QWORD *)v9 + 4) = *(_QWORD *)((char *)a2 + v8 + 32);
    v9[40] = *((_BYTE *)a2 + v8 + 40);
    v12 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
    v13 = v12[8];
    v22 = &v10[v13];
    v23 = &v9[v13];
    v14 = type metadata accessor for UUID();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v15(v23, v22, v14);
    v9[v12[9]] = v10[v12[9]];
    v16 = v12[10];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v9[v12[11]] = v10[v12[11]];
    v20 = a3[7];
    *(_QWORD *)((char *)v7 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *(_QWORD *)((char *)v7 + v20) = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)v7 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for _ArchivedViewStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for _ArchivedViewStates(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = v9;
  v7[24] = *((_BYTE *)a2 + v6 + 24);
  *((_QWORD *)v7 + 2) = *(_QWORD *)((char *)a2 + v6 + 16);
  v7[40] = *((_BYTE *)a2 + v6 + 40);
  *((_QWORD *)v7 + 4) = *(_QWORD *)((char *)a2 + v6 + 32);
  v10 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  v11 = v10[8];
  v20 = &v8[v11];
  v21 = &v7[v11];
  v12 = type metadata accessor for UUID();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v13(v21, v20, v12);
  v7[v10[9]] = v8[v10[9]];
  v14 = v10[10];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v7[v10[11]] = v8[v10[11]];
  v18 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _ArchivedViewStates(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)v8 + 2);
  v7[24] = v8[24];
  *((_QWORD *)v7 + 2) = v9;
  v10 = *((_QWORD *)v8 + 4);
  v7[40] = v8[40];
  *((_QWORD *)v7 + 4) = v10;
  v11 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  v12 = v11[8];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v7[v11[9]] = v8[v11[9]];
  v16 = v11[10];
  v17 = &v7[v16];
  v18 = &v8[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[v11[11]] = v8[v11[11]];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for _ArchivedViewStates(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  v7[24] = *((_BYTE *)a2 + v6 + 24);
  *((_QWORD *)v7 + 2) = *(_QWORD *)((char *)a2 + v6 + 16);
  v7[40] = *((_BYTE *)a2 + v6 + 40);
  *((_QWORD *)v7 + 4) = *(_QWORD *)((char *)a2 + v6 + 32);
  v9 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  v10 = v9[8];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[9]] = v8[v9[9]];
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v14 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *assignWithTake for _ArchivedViewStates(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  swift_release();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a2 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  v7[24] = v8[24];
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  v7[40] = v8[40];
  v10 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  v11 = v10[8];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v7[v10[9]] = v8[v10[9]];
  v15 = v10[10];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v19 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  v7[v10[11]] = v8[v10[11]];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187478BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187478BF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE3120]);
}

uint64_t type metadata completion function for _ArchivedViewStates()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ArchivedViewCore.Metadata();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.EncodingStyle()
{
  return &type metadata for _ArchivedViewStates.EncodingStyle;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.DeploymentVersion()
{
  return &type metadata for _ArchivedViewStates.DeploymentVersion;
}

_QWORD *initializeBufferWithCopyOfBuffer for _ArchivedView(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_QWORD *)(a1 + 32) = a2[4];
    v10 = type metadata accessor for UUID();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    v12 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(_DWORD *)((char *)v4 + v12) = *(_DWORD *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _ArchivedView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v11) = *(_DWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v10) = *(_DWORD *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for _ArchivedView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874790BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for _ArchivedView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187479144(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for _ArchivedView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _AnyArchivedViewDelegate()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t initializeWithCopy for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _ArchivedViewStates.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 27))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 27) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 27) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ArchivedViewStates.State()
{
  return &type metadata for _ArchivedViewStates.State;
}

void *type metadata accessor for InterpolatableArchiveContent.Init()
{
  return &unk_1E1AF6E20;
}

_QWORD *initializeBufferWithCopyOfBuffer for InterpolatableArchiveContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(_QWORD *)((char *)v4 + v11) = *(_QWORD *)((char *)a2 + v11);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for InterpolatableArchiveContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for InterpolatableArchiveContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for InterpolatableArchiveContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for InterpolatableArchiveContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for InterpolatableArchiveContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatableArchiveContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1874797B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_3(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1 + *(int *)(a3 + 20), a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for InterpolatableArchiveContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18747984C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_3(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for InterpolatableArchiveContent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewStatesKey()
{
  return &type metadata for ArchivedViewStatesKey;
}

uint64_t assignWithCopy for ArchivedViewState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ArchivedViewState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ArchivedViewState()
{
  return &type metadata for ArchivedViewState;
}

void *type metadata accessor for ArchivedLayoutComputer()
{
  return &unk_1E1ADB1E0;
}

void *type metadata accessor for ArchivedAccessibilityAttachment()
{
  return &unk_1E1AFEDB8;
}

uint64_t initializeBufferWithCopyOfBuffer for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ArchivedDisplayList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

void *type metadata accessor for ArchivedDisplayList()
{
  return &unk_1E1B18698;
}

unint64_t lazy protocol witness table accessor for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivedLayoutComputer.Engine, &unk_1E1ADB160);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedLayoutComputer.Engine and conformance ArchivedLayoutComputer.Engine);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ArchivedView.MakePreference and conformance _ArchivedView.MakePreference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ArchivedView.MakePreference and conformance _ArchivedView.MakePreference;
  if (!lazy protocol witness table cache variable for type _ArchivedView.MakePreference and conformance _ArchivedView.MakePreference)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ArchivedView.MakePreference, &unk_1E1AB74D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ArchivedView.MakePreference and conformance _ArchivedView.MakePreference);
  }
  return result;
}

uint64_t type metadata accessor for _ArchivedViewStates.Error(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _ArchivedViewStates.Error);
}

uint64_t type metadata accessor for ArchivableFactory<ArchivableLinkModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivableLinkModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableLinkModifier>)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, type metadata accessor for ArchivableLinkModifier, (uint64_t)&protocol conformance descriptor for ArchivableLinkModifier);
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    v6 = type metadata accessor for ArchivableFactory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView>);
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base;
  if (!lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinearProgressView.Base, &type metadata for ArchivableLinearProgressView.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base;
  if (!lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableLinearProgressView.Base, &type metadata for ArchivableLinearProgressView.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineProgressView<A>.ArchivableTimelineProgressView, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    v6 = type metadata accessor for ArchivableFactory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<CircularPercentageGaugeRing>.ArchivableTimelineProgressView>);
  }
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGaugeRing, &type metadata for CircularPercentageGaugeRing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CircularPercentageGaugeRing, &type metadata for CircularPercentageGaugeRing);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing);
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>;
  if (!lazy cache variable for type metadata for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>)
  {
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter and conformance HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

void type metadata accessor for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>)
  {
    type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView(&lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView and conformance TimelineProgressView<A>.ArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base);
    v6 = type metadata accessor for ArchivableFactory(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ArchivableTimelineProgressView>);
  }
}

void type metadata accessor for TimelineProgressView<ArchivableLinearProgressView.Base>.ArchivableTimelineProgressView(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for TimelineProgressView.ArchivableTimelineProgressView(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base;
  if (!lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedCircularPlaybackProgressView.Base, &type metadata for ResolvedCircularPlaybackProgressView.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base;
  if (!lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ResolvedCircularPlaybackProgressView.Base, &type metadata for ResolvedCircularPlaybackProgressView.Base);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base);
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivableButtonAppIntentModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableButtonAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier, &type metadata for ArchivableButtonAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier, &type metadata for ArchivableButtonAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableButtonAppIntentModifier, &type metadata for ArchivableButtonAppIntentModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier);
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivableToggleAppIntentModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableToggleAppIntentModifier>)
  {
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    lazy protocol witness table accessor for type ArchivableToggleAppIntentModifier and conformance ArchivableToggleAppIntentModifier();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivablePlaybackButtonViewModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivablePlaybackButtonViewModifier>)
  {
    type metadata accessor for ArchivablePlaybackButtonViewModifier(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ArchivablePlaybackButtonViewModifier and conformance ArchivablePlaybackButtonViewModifier, type metadata accessor for ArchivablePlaybackButtonViewModifier, (uint64_t)&protocol conformance descriptor for ArchivablePlaybackButtonViewModifier);
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityActionModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityActionModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier, &type metadata for ArchivableAccessibilityActionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier, &type metadata for ArchivableAccessibilityActionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityActionModifier, &type metadata for ArchivableAccessibilityActionModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityActionModifier and conformance ArchivableAccessibilityActionModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory, &type metadata for ArchivableAccessibilityViewModifier.Factory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory, &type metadata for ArchivableAccessibilityViewModifier.Factory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory, &type metadata for ArchivableAccessibilityViewModifier.Factory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory;
  if (!lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ArchivableAccessibilityViewModifier.Factory, &type metadata for ArchivableAccessibilityViewModifier.Factory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory);
  }
  return result;
}

uint64_t type metadata accessor for ArchivableFactory<InvalidatableContentModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for ArchivableFactory<InvalidatableContentModifier>;
  if (!lazy cache variable for type metadata for ArchivableFactory<InvalidatableContentModifier>)
  {
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    lazy protocol witness table accessor for type InvalidatableContentModifier and conformance InvalidatableContentModifier();
    type metadata accessor for ArchivableFactory();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ArchivedViewStates.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for _ArchivedViewStates.Error(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for _ArchivedViewStates.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for _ArchivedViewStates.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for _ArchivedViewStates.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for _ArchivedViewStates.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ArchivedViewStates.Error()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18747AA70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for UUID();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _ArchivedViewStates.Error()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18747AAC8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t getEnumTag for _ArchivedViewStates.Error(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for _ArchivedViewStates.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata completion function for _ArchivedViewStates.Error()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ArchivedView.MakePreference(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for _ArchivedView.MakePreference(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void *type metadata accessor for _ArchivedView.MakePreference()
{
  return &unk_1E1AB74D8;
}

void *type metadata accessor for ArchivedLayoutComputer.Engine()
{
  return &unk_1E1ADB160;
}

ValueMetadata *type metadata accessor for ArchivedViewState.ID()
{
  return &type metadata for ArchivedViewState.ID;
}

Swift::Void __swiftcall DialogActionDelegate.performDialogAction(_:)(UIAlertAction a1)
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

_QWORD *initializeBufferWithCopyOfBuffer for DialogActionContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(void **, uint64_t, uint64_t);
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _OWORD *v19;
  _OWORD *v20;
  unint64_t v21;
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  unsigned int (**v34)(void **, uint64_t, uint64_t);
  uint64_t v35;
  int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;
  id v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  id v59;
  __int128 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  int v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  id v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  void (*v105)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  id v117;
  void *v118;
  void *v119;
  id v120;
  void *v121;
  __int128 v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  _BYTE *v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  void (*v165)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  unsigned int (*v170)(void **, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  void *v173;
  id v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  unsigned int (*v187)(_BYTE *, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  unsigned int (**__dst)(void **, uint64_t, uint64_t);
  void *__dstb;
  _BYTE *__dsta;
  void *v195;
  int *v196;
  void *v197;
  _BYTE *v198;
  _QWORD *v199;
  int *v200;
  uint64_t v201;
  unsigned int (*v202)(_BYTE *, uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  int *v209;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    v5 = a3;
    v6 = a2;
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (void **)((char *)a1 + v8);
    v10 = (void **)((char *)a2 + v8);
    v11 = type metadata accessor for DialogActionContext.CancelType(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_100:
      v171 = v5[8];
      *(_QWORD *)((char *)v7 + v5[7]) = *(_QWORD *)((char *)v6 + v5[7]);
      *(_QWORD *)((char *)v7 + v171) = *(_QWORD *)((char *)v6 + v171);
      v172 = v5[9];
      v173 = *(void **)((char *)v6 + v172);
      *(_QWORD *)((char *)v7 + v172) = v173;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v174 = v173;
      return v7;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v33 = type metadata accessor for PlatformItemList.Item();
      v34 = *(unsigned int (***)(void **, uint64_t, uint64_t))(v33 - 8);
      if (v34[6](v10, 1, v33))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        __dst = v34;
        v200 = (int *)v33;
        v205 = v12;
        v207 = v11;
        v209 = v5;
        v38 = *v10;
        v39 = v10[1];
        *v9 = *v10;
        v9[1] = v39;
        v40 = v10[3];
        v9[2] = v10[2];
        v9[3] = v40;
        *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
        v41 = v10[6];
        v9[5] = v10[5];
        v9[6] = v41;
        *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
        v42 = v9 + 8;
        v43 = v10 + 8;
        v44 = (unint64_t)v10[23];
        v45 = v38;
        v46 = v39;
        swift_bridgeObjectRetain();
        swift_retain();
        if (v44 >> 1 == 4294967294)
        {
          v47 = *((_OWORD *)v10 + 13);
          *((_OWORD *)v9 + 12) = *((_OWORD *)v10 + 12);
          *((_OWORD *)v9 + 13) = v47;
          *((_OWORD *)v9 + 14) = *((_OWORD *)v10 + 14);
          *(_DWORD *)((char *)v9 + 239) = *(_DWORD *)((char *)v10 + 239);
          v48 = *((_OWORD *)v10 + 9);
          *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
          *((_OWORD *)v9 + 9) = v48;
          v49 = *((_OWORD *)v10 + 11);
          *((_OWORD *)v9 + 10) = *((_OWORD *)v10 + 10);
          *((_OWORD *)v9 + 11) = v49;
          v50 = *((_OWORD *)v10 + 5);
          *v42 = *v43;
          *((_OWORD *)v9 + 5) = v50;
          v51 = *((_OWORD *)v10 + 7);
          *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
          *((_OWORD *)v9 + 7) = v51;
        }
        else
        {
          v78 = *((unsigned __int8 *)v10 + 72);
          if (v78 == 255)
          {
            *(_QWORD *)v42 = *(_QWORD *)v43;
            *((_BYTE *)v9 + 72) = *((_BYTE *)v10 + 72);
          }
          else
          {
            v79 = v10[8];
            outlined copy of GraphicsImage.Contents(v79, *((_BYTE *)v10 + 72));
            v9[8] = v79;
            *((_BYTE *)v9 + 72) = v78;
            v44 = (unint64_t)v10[23];
          }
          v9[10] = v10[10];
          *(_OWORD *)(v9 + 11) = *(_OWORD *)(v10 + 11);
          *((_BYTE *)v9 + 104) = *((_BYTE *)v10 + 104);
          *(_OWORD *)((char *)v9 + 108) = *(_OWORD *)((char *)v10 + 108);
          *((_BYTE *)v9 + 124) = *((_BYTE *)v10 + 124);
          v110 = *((_OWORD *)v10 + 9);
          *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
          *((_OWORD *)v9 + 9) = v110;
          *((_WORD *)v9 + 80) = *((_WORD *)v10 + 80);
          *((_BYTE *)v9 + 162) = *((_BYTE *)v10 + 162);
          *((_BYTE *)v9 + 163) = *((_BYTE *)v10 + 163);
          if (v44 >> 1 == 0xFFFFFFFF)
          {
            v111 = *(_OWORD *)(v10 + 23);
            *(_OWORD *)(v9 + 21) = *(_OWORD *)(v10 + 21);
            *(_OWORD *)(v9 + 23) = v111;
          }
          else
          {
            v112 = (uint64_t)v10[21];
            v113 = (uint64_t)v10[22];
            v114 = v10[24];
            outlined copy of AccessibilityImageLabel(v112, v113, v44);
            v9[21] = (void *)v112;
            v9[22] = (void *)v113;
            v9[23] = (void *)v44;
            v9[24] = v114;
          }
          v115 = v10[26];
          v9[25] = v10[25];
          v9[26] = v115;
          *((_WORD *)v9 + 108) = *((_WORD *)v10 + 108);
          *((_DWORD *)v9 + 55) = *((_DWORD *)v10 + 55);
          *((_BYTE *)v9 + 224) = *((_BYTE *)v10 + 224);
          v116 = v10[29];
          v9[29] = v116;
          *((_WORD *)v9 + 120) = *((_WORD *)v10 + 120);
          *((_BYTE *)v9 + 242) = *((_BYTE *)v10 + 242);
          swift_unknownObjectRetain();
          swift_retain();
          v117 = v116;
        }
        v118 = v10[32];
        if (v118)
        {
          v9[31] = v10[31];
          v9[32] = v118;
          v119 = v10[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v119 >= 2)
            v120 = v119;
          v9[33] = v119;
          *((_DWORD *)v9 + 68) = *((_DWORD *)v10 + 68);
          *((_BYTE *)v9 + 276) = *((_BYTE *)v10 + 276);
          *(_WORD *)((char *)v9 + 277) = *(_WORD *)((char *)v10 + 277);
          v121 = v10[36];
          v9[35] = v10[35];
          v9[36] = v121;
          swift_retain();
          swift_retain();
        }
        else
        {
          v122 = *(_OWORD *)(v10 + 33);
          *(_OWORD *)(v9 + 31) = *(_OWORD *)(v10 + 31);
          *(_OWORD *)(v9 + 33) = v122;
          *(_OWORD *)(v9 + 35) = *(_OWORD *)(v10 + 35);
        }
        v123 = (unint64_t)v10[41];
        if (v123 >> 2 == 0xFFFFFFFF)
        {
          v124 = *(_OWORD *)(v10 + 47);
          *(_OWORD *)(v9 + 45) = *(_OWORD *)(v10 + 45);
          *(_OWORD *)(v9 + 47) = v124;
          v9[49] = v10[49];
          v125 = *(_OWORD *)(v10 + 39);
          *(_OWORD *)(v9 + 37) = *(_OWORD *)(v10 + 37);
          *(_OWORD *)(v9 + 39) = v125;
          v126 = *(_OWORD *)(v10 + 43);
          *(_OWORD *)(v9 + 41) = *(_OWORD *)(v10 + 41);
          *(_OWORD *)(v9 + 43) = v126;
        }
        else
        {
          v127 = v10[37];
          v128 = (uint64_t)v10[39];
          v176 = (uint64_t)v10[40];
          v177 = (uint64_t)v10[38];
          v129 = (uint64_t)v10[42];
          v130 = (uint64_t)v10[43];
          v131 = v10[44];
          v179 = (uint64_t)v10[45];
          v182 = (uint64_t)v10[46];
          v186 = (uint64_t)v10[47];
          v190 = v10[48];
          v197 = v10[49];
          outlined copy of PlatformItemList.Item.SystemItem(v127, v177, v128, v176, v123, v129, v130, (char)v131, v179, v182, v186, (char)v190, (uint64_t)v197);
          v9[37] = v127;
          v9[38] = (void *)v177;
          v9[39] = (void *)v128;
          v9[40] = (void *)v176;
          v9[41] = (void *)v123;
          v9[42] = (void *)v129;
          v9[43] = (void *)v130;
          v9[44] = v131;
          v9[45] = (void *)v179;
          v9[46] = (void *)v182;
          v9[47] = (void *)v186;
          v9[48] = v190;
          v9[49] = v197;
        }
        v132 = v10[51];
        if (v132 == (void *)1)
        {
          v133 = *((_OWORD *)v10 + 28);
          *((_OWORD *)v9 + 27) = *((_OWORD *)v10 + 27);
          *((_OWORD *)v9 + 28) = v133;
          *((_BYTE *)v9 + 464) = *((_BYTE *)v10 + 464);
          v134 = *((_OWORD *)v10 + 26);
          *((_OWORD *)v9 + 25) = *((_OWORD *)v10 + 25);
          *((_OWORD *)v9 + 26) = v134;
        }
        else
        {
          *((_DWORD *)v9 + 100) = *((_DWORD *)v10 + 100);
          *((_BYTE *)v9 + 404) = *((_BYTE *)v10 + 404);
          if (v132)
          {
            v135 = v10[52];
            v9[51] = v132;
            v9[52] = v135;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v9 + 51) = *(_OWORD *)(v10 + 51);
          }
          v136 = v10[53];
          if (v136)
          {
            v137 = v10[54];
            v9[53] = v136;
            v9[54] = v137;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v9 + 53) = *(_OWORD *)(v10 + 53);
          }
          v138 = v10[55];
          if (v138)
          {
            v139 = v10[56];
            v9[55] = v138;
            v9[56] = v139;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v9 + 55) = *(_OWORD *)(v10 + 55);
          }
          v9[57] = v10[57];
          *((_BYTE *)v9 + 464) = *((_BYTE *)v10 + 464);
        }
        v140 = v10[60];
        v9[59] = v10[59];
        v9[60] = v140;
        v9[61] = v10[61];
        *((_BYTE *)v9 + 496) = *((_BYTE *)v10 + 496);
        v141 = v10[63];
        swift_bridgeObjectRetain();
        if (v141)
        {
          v142 = v10[64];
          v9[63] = v141;
          v9[64] = v142;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v9 + 63) = *(_OWORD *)(v10 + 63);
        }
        *((_WORD *)v9 + 260) = *((_WORD *)v10 + 260);
        v143 = v10[66];
        if (v143)
        {
          v9[66] = v143;
          v9[67] = v10[67];
          v9[68] = v10[68];
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
        }
        else
        {
          *((_OWORD *)v9 + 33) = *((_OWORD *)v10 + 33);
          v9[68] = v10[68];
        }
        v144 = v10[69];
        if (v144 == (void *)1)
        {
          *(_OWORD *)(v9 + 69) = *(_OWORD *)(v10 + 69);
          v9[71] = v10[71];
        }
        else
        {
          v9[69] = v144;
          v145 = v10[70];
          swift_retain();
          if (v145)
          {
            v146 = v10[71];
            v9[70] = v145;
            v9[71] = v146;
            swift_retain();
          }
          else
          {
            *((_OWORD *)v9 + 35) = *((_OWORD *)v10 + 35);
          }
        }
        v147 = v10[72];
        v9[72] = v147;
        v9[73] = v10[73];
        v9[74] = v10[74];
        v9[75] = v10[75];
        v9[76] = v10[76];
        v9[77] = v10[77];
        v9[78] = v10[78];
        *((_WORD *)v9 + 316) = *((_WORD *)v10 + 316);
        *((_BYTE *)v9 + 634) = *((_BYTE *)v10 + 634);
        v148 = v200[28];
        v198 = (char *)v9 + v148;
        v149 = (char *)v10 + v148;
        v150 = type metadata accessor for CommandOperation();
        v183 = *(_QWORD *)(v150 - 8);
        v187 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v183 + 48);
        v151 = v147;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v187(v149, 1, v150))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v198, v149, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
          v11 = v207;
          v5 = v209;
          v12 = v205;
          v153 = v200;
        }
        else
        {
          *v198 = *v149;
          v154 = *(int *)(v150 + 20);
          v155 = v149;
          v180 = v149;
          v156 = &v198[v154];
          v157 = &v155[v154];
          v191 = v150;
          v158 = *(_QWORD *)&v155[v154];
          v159 = *(_QWORD *)&v155[v154 + 8];
          v160 = v155[v154 + 16];
          outlined copy of Text.Storage(v158, v159, v160);
          *(_QWORD *)v156 = v158;
          *((_QWORD *)v156 + 1) = v159;
          v156[16] = v160;
          *((_QWORD *)v156 + 3) = *((_QWORD *)v157 + 3);
          v161 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v162 = &v156[v161];
          v163 = &v157[v161];
          v164 = type metadata accessor for UUID();
          v165 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v164 - 8) + 16);
          swift_bridgeObjectRetain();
          v165(v162, v163, v164);
          v166 = *(int *)(v191 + 24);
          v167 = &v198[v166];
          v168 = &v180[v166];
          if (*v168)
          {
            v169 = v168[1];
            *v167 = *v168;
            v167[1] = v169;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v167 = *(_OWORD *)v168;
          }
          v11 = v207;
          v5 = v209;
          v12 = v205;
          v153 = v200;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v198, 0, 1, v191);
        }
        *((_BYTE *)v9 + v153[29]) = *((_BYTE *)v10 + v153[29]);
        *((_BYTE *)v9 + v153[30]) = *((_BYTE *)v10 + v153[30]);
        *((_BYTE *)v9 + v153[31]) = *((_BYTE *)v10 + v153[31]);
        *((_BYTE *)v9 + v153[32]) = *((_BYTE *)v10 + v153[32]);
        *(void **)((char *)v9 + v153[33]) = *(void **)((char *)v10 + v153[33]);
        v170 = __dst[7];
        swift_retain();
        ((void (*)(void **, _QWORD, uint64_t, int *))v170)(v9, 0, 1, v153);
      }
      goto LABEL_99;
    }
    v204 = v12;
    v206 = v11;
    v208 = v5;
    v15 = *v10;
    v16 = v10[1];
    *v9 = *v10;
    v9[1] = v16;
    v17 = v10[3];
    v9[2] = v10[2];
    v9[3] = v17;
    *((_BYTE *)v9 + 32) = *((_BYTE *)v10 + 32);
    v18 = v10[6];
    v9[5] = v10[5];
    v9[6] = v18;
    *((_BYTE *)v9 + 56) = *((_BYTE *)v10 + 56);
    v19 = v9 + 8;
    v20 = v10 + 8;
    v21 = (unint64_t)v10[23];
    v22 = v15;
    v23 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v21 >> 1 == 4294967294)
    {
      v24 = *((_OWORD *)v10 + 13);
      *((_OWORD *)v9 + 12) = *((_OWORD *)v10 + 12);
      *((_OWORD *)v9 + 13) = v24;
      *((_OWORD *)v9 + 14) = *((_OWORD *)v10 + 14);
      *(_DWORD *)((char *)v9 + 239) = *(_DWORD *)((char *)v10 + 239);
      v25 = *((_OWORD *)v10 + 9);
      *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
      *((_OWORD *)v9 + 9) = v25;
      v26 = *((_OWORD *)v10 + 11);
      *((_OWORD *)v9 + 10) = *((_OWORD *)v10 + 10);
      *((_OWORD *)v9 + 11) = v26;
      v27 = *((_OWORD *)v10 + 5);
      *v19 = *v20;
      *((_OWORD *)v9 + 5) = v27;
      v28 = *((_OWORD *)v10 + 7);
      *((_OWORD *)v9 + 6) = *((_OWORD *)v10 + 6);
      *((_OWORD *)v9 + 7) = v28;
      v29 = v10[32];
      if (v29)
      {
LABEL_8:
        v9[31] = v10[31];
        v9[32] = v29;
        v30 = v10[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v30 >= 2)
          v31 = v30;
        v9[33] = v30;
        *((_DWORD *)v9 + 68) = *((_DWORD *)v10 + 68);
        *((_BYTE *)v9 + 276) = *((_BYTE *)v10 + 276);
        *(_WORD *)((char *)v9 + 277) = *(_WORD *)((char *)v10 + 277);
        v32 = v10[36];
        v9[35] = v10[35];
        v9[36] = v32;
        swift_retain();
        swift_retain();
LABEL_23:
        v61 = (unint64_t)v10[41];
        if (v61 >> 2 == 0xFFFFFFFF)
        {
          v62 = *(_OWORD *)(v10 + 47);
          *(_OWORD *)(v9 + 45) = *(_OWORD *)(v10 + 45);
          *(_OWORD *)(v9 + 47) = v62;
          v9[49] = v10[49];
          v63 = *(_OWORD *)(v10 + 39);
          *(_OWORD *)(v9 + 37) = *(_OWORD *)(v10 + 37);
          *(_OWORD *)(v9 + 39) = v63;
          v64 = *(_OWORD *)(v10 + 43);
          *(_OWORD *)(v9 + 41) = *(_OWORD *)(v10 + 41);
          *(_OWORD *)(v9 + 43) = v64;
        }
        else
        {
          v65 = v10[37];
          v66 = (uint64_t)v10[38];
          v178 = (uint64_t)v10[40];
          v181 = (uint64_t)v10[39];
          v67 = (uint64_t)v10[42];
          v68 = (uint64_t)v10[43];
          v69 = v10[44];
          v184 = (uint64_t)v10[45];
          v188 = (uint64_t)v10[46];
          __dstb = v10[47];
          v195 = v10[48];
          v201 = (uint64_t)v10[49];
          outlined copy of PlatformItemList.Item.SystemItem(v65, v66, v181, v178, v61, v67, v68, (char)v69, v184, v188, (uint64_t)__dstb, (char)v195, v201);
          v9[37] = v65;
          v9[38] = (void *)v66;
          v9[39] = (void *)v181;
          v9[40] = (void *)v178;
          v9[41] = (void *)v61;
          v9[42] = (void *)v67;
          v9[43] = (void *)v68;
          v9[44] = v69;
          v9[45] = (void *)v184;
          v9[46] = (void *)v188;
          v9[47] = __dstb;
          v9[48] = v195;
          v9[49] = (void *)v201;
        }
        v70 = v10[51];
        if (v70 == (void *)1)
        {
          v71 = *((_OWORD *)v10 + 28);
          *((_OWORD *)v9 + 27) = *((_OWORD *)v10 + 27);
          *((_OWORD *)v9 + 28) = v71;
          *((_BYTE *)v9 + 464) = *((_BYTE *)v10 + 464);
          v72 = *((_OWORD *)v10 + 26);
          *((_OWORD *)v9 + 25) = *((_OWORD *)v10 + 25);
          *((_OWORD *)v9 + 26) = v72;
LABEL_38:
          v80 = v10[60];
          v9[59] = v10[59];
          v9[60] = v80;
          v9[61] = v10[61];
          *((_BYTE *)v9 + 496) = *((_BYTE *)v10 + 496);
          v81 = v10[63];
          swift_bridgeObjectRetain();
          if (v81)
          {
            v82 = v10[64];
            v9[63] = v81;
            v9[64] = v82;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v9 + 63) = *(_OWORD *)(v10 + 63);
          }
          *((_WORD *)v9 + 260) = *((_WORD *)v10 + 260);
          v83 = v10[66];
          if (v83)
          {
            v9[66] = v83;
            v9[67] = v10[67];
            v9[68] = v10[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v9 + 33) = *((_OWORD *)v10 + 33);
            v9[68] = v10[68];
          }
          v84 = v10[69];
          v199 = v6;
          if (v84 == (void *)1)
          {
            *(_OWORD *)(v9 + 69) = *(_OWORD *)(v10 + 69);
            v9[71] = v10[71];
          }
          else
          {
            v9[69] = v84;
            v85 = v10[70];
            swift_retain();
            if (v85)
            {
              v86 = v10[71];
              v9[70] = v85;
              v9[71] = v86;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v9 + 35) = *((_OWORD *)v10 + 35);
            }
          }
          v87 = v10[72];
          v9[72] = v87;
          v9[73] = v10[73];
          v9[74] = v10[74];
          v9[75] = v10[75];
          v9[76] = v10[76];
          v9[77] = v10[77];
          v9[78] = v10[78];
          *((_WORD *)v9 + 316) = *((_WORD *)v10 + 316);
          *((_BYTE *)v9 + 634) = *((_BYTE *)v10 + 634);
          v88 = type metadata accessor for PlatformItemList.Item();
          v89 = *(int *)(v88 + 112);
          __dsta = (char *)v9 + v89;
          v196 = (int *)v88;
          v90 = (char *)v10 + v89;
          v91 = type metadata accessor for CommandOperation();
          v189 = *(_QWORD *)(v91 - 8);
          v202 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v189 + 48);
          v92 = v87;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v93 = v90;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v202(v90, 1, v91))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dsta, v90, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
            v6 = v199;
            v11 = v206;
            v5 = v208;
            v12 = v204;
          }
          else
          {
            *__dsta = *v90;
            v95 = *(int *)(v91 + 20);
            v96 = &__dsta[v95];
            v97 = &v93[v95];
            v185 = v93;
            v98 = *(_QWORD *)&v93[v95];
            v99 = *((_QWORD *)v97 + 1);
            v203 = v91;
            v100 = v97[16];
            outlined copy of Text.Storage(v98, v99, v100);
            *(_QWORD *)v96 = v98;
            *((_QWORD *)v96 + 1) = v99;
            v96[16] = v100;
            *((_QWORD *)v96 + 3) = *((_QWORD *)v97 + 3);
            v101 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v102 = &v96[v101];
            v103 = &v97[v101];
            v104 = type metadata accessor for UUID();
            v105 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v104 - 8) + 16);
            swift_bridgeObjectRetain();
            v105(v102, v103, v104);
            v106 = *(int *)(v203 + 24);
            v107 = &__dsta[v106];
            v108 = &v185[v106];
            if (*v108)
            {
              v109 = v108[1];
              *v107 = *v108;
              v107[1] = v109;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v107 = *(_OWORD *)v108;
            }
            v6 = v199;
            v11 = v206;
            v5 = v208;
            v12 = v204;
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v189 + 56))(__dsta, 0, 1, v203);
          }
          *((_BYTE *)v9 + v196[29]) = *((_BYTE *)v10 + v196[29]);
          *((_BYTE *)v9 + v196[30]) = *((_BYTE *)v10 + v196[30]);
          *((_BYTE *)v9 + v196[31]) = *((_BYTE *)v10 + v196[31]);
          *((_BYTE *)v9 + v196[32]) = *((_BYTE *)v10 + v196[32]);
          *(void **)((char *)v9 + v196[33]) = *(void **)((char *)v10 + v196[33]);
          swift_retain();
LABEL_99:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
          goto LABEL_100;
        }
        *((_DWORD *)v9 + 100) = *((_DWORD *)v10 + 100);
        *((_BYTE *)v9 + 404) = *((_BYTE *)v10 + 404);
        if (v70)
        {
          v73 = v10[52];
          v9[51] = v70;
          v9[52] = v73;
          swift_retain();
          v74 = v10[53];
          if (v74)
            goto LABEL_30;
        }
        else
        {
          *(_OWORD *)(v9 + 51) = *(_OWORD *)(v10 + 51);
          v74 = v10[53];
          if (v74)
          {
LABEL_30:
            v75 = v10[54];
            v9[53] = v74;
            v9[54] = v75;
            swift_retain();
            v76 = v10[55];
            if (v76)
            {
LABEL_31:
              v77 = v10[56];
              v9[55] = v76;
              v9[56] = v77;
              swift_retain();
LABEL_37:
              v9[57] = v10[57];
              *((_BYTE *)v9 + 464) = *((_BYTE *)v10 + 464);
              goto LABEL_38;
            }
LABEL_36:
            *(_OWORD *)(v9 + 55) = *(_OWORD *)(v10 + 55);
            goto LABEL_37;
          }
        }
        *(_OWORD *)(v9 + 53) = *(_OWORD *)(v10 + 53);
        v76 = v10[55];
        if (v76)
          goto LABEL_31;
        goto LABEL_36;
      }
    }
    else
    {
      v36 = *((unsigned __int8 *)v10 + 72);
      if (v36 == 255)
      {
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_BYTE *)v9 + 72) = *((_BYTE *)v10 + 72);
      }
      else
      {
        v37 = v10[8];
        outlined copy of GraphicsImage.Contents(v37, *((_BYTE *)v10 + 72));
        v9[8] = v37;
        *((_BYTE *)v9 + 72) = v36;
        v21 = (unint64_t)v10[23];
      }
      v9[10] = v10[10];
      *(_OWORD *)(v9 + 11) = *(_OWORD *)(v10 + 11);
      *((_BYTE *)v9 + 104) = *((_BYTE *)v10 + 104);
      *(_OWORD *)((char *)v9 + 108) = *(_OWORD *)((char *)v10 + 108);
      *((_BYTE *)v9 + 124) = *((_BYTE *)v10 + 124);
      v52 = *((_OWORD *)v10 + 9);
      *((_OWORD *)v9 + 8) = *((_OWORD *)v10 + 8);
      *((_OWORD *)v9 + 9) = v52;
      *((_WORD *)v9 + 80) = *((_WORD *)v10 + 80);
      *((_BYTE *)v9 + 162) = *((_BYTE *)v10 + 162);
      *((_BYTE *)v9 + 163) = *((_BYTE *)v10 + 163);
      if (v21 >> 1 == 0xFFFFFFFF)
      {
        v53 = *(_OWORD *)(v10 + 23);
        *(_OWORD *)(v9 + 21) = *(_OWORD *)(v10 + 21);
        *(_OWORD *)(v9 + 23) = v53;
      }
      else
      {
        v54 = (uint64_t)v10[21];
        v55 = (uint64_t)v10[22];
        v56 = v10[24];
        outlined copy of AccessibilityImageLabel(v54, v55, v21);
        v9[21] = (void *)v54;
        v9[22] = (void *)v55;
        v9[23] = (void *)v21;
        v9[24] = v56;
      }
      v57 = v10[26];
      v9[25] = v10[25];
      v9[26] = v57;
      *((_WORD *)v9 + 108) = *((_WORD *)v10 + 108);
      *((_DWORD *)v9 + 55) = *((_DWORD *)v10 + 55);
      *((_BYTE *)v9 + 224) = *((_BYTE *)v10 + 224);
      v58 = v10[29];
      v9[29] = v58;
      *((_WORD *)v9 + 120) = *((_WORD *)v10 + 120);
      *((_BYTE *)v9 + 242) = *((_BYTE *)v10 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v59 = v58;
      v29 = v10[32];
      if (v29)
        goto LABEL_8;
    }
    v60 = *(_OWORD *)(v10 + 33);
    *(_OWORD *)(v9 + 31) = *(_OWORD *)(v10 + 31);
    *(_OWORD *)(v9 + 33) = v60;
    *(_OWORD *)(v9 + 35) = *(_OWORD *)(v10 + 35);
    goto LABEL_23;
  }
  v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  swift_retain();
  return v7;
}

void destroy for DialogActionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for DialogActionContext.CancelType(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
    goto LABEL_62;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v13 = type metadata accessor for PlatformItemList.Item();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v4, 1, v13))
      goto LABEL_62;

    swift_bridgeObjectRelease();
    swift_release();
    v14 = *(_QWORD *)(v4 + 184);
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if ((v14 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v16 = *(unsigned __int8 *)(v4 + 72);
      if (v16 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v16);
        v14 = *(_QWORD *)(v4 + 184);
        v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v15 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v14);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      v17 = *(void **)(v4 + 264);
      if ((unint64_t)v17 >= 2)

      swift_release();
      swift_release();
    }
    v18 = *(_QWORD *)(v4 + 328);
    if (v18 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 312), *(_QWORD *)(v4 + 320), v18, *(_QWORD *)(v4 + 336), *(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), *(_QWORD *)(v4 + 360), *(_QWORD *)(v4 + 368), *(_QWORD *)(v4 + 376), *(_QWORD *)(v4 + 384), *(_QWORD *)(v4 + 392));
    v19 = *(_QWORD *)(v4 + 408);
    if (v19)
    {
      if (v19 == 1)
      {
LABEL_50:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 504))
          swift_release();
        if (*(_QWORD *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(v4 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = *(int *)(v13 + 112);
        goto LABEL_58;
      }
      swift_release();
    }
    if (*(_QWORD *)(v4 + 424))
      swift_release();
    if (*(_QWORD *)(v4 + 440))
      swift_release();
    goto LABEL_50;
  }

  swift_bridgeObjectRelease();
  swift_release();
  v6 = *(_QWORD *)(v4 + 184);
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v8 = *(unsigned __int8 *)(v4 + 72);
    if (v8 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
      v6 = *(_QWORD *)(v4 + 184);
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v7 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v4 + 168), *(_QWORD *)(v4 + 176), v6);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v4 + 256))
  {
    swift_bridgeObjectRelease();
    v9 = *(void **)(v4 + 264);
    if ((unint64_t)v9 >= 2)

    swift_release();
    swift_release();
  }
  v10 = *(_QWORD *)(v4 + 328);
  if (v10 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 312), *(_QWORD *)(v4 + 320), v10, *(_QWORD *)(v4 + 336), *(_QWORD *)(v4 + 344), *(_QWORD *)(v4 + 352), *(_QWORD *)(v4 + 360), *(_QWORD *)(v4 + 368), *(_QWORD *)(v4 + 376), *(_QWORD *)(v4 + 384), *(_QWORD *)(v4 + 392));
  v11 = *(_QWORD *)(v4 + 408);
  if (!v11)
    goto LABEL_18;
  if (v11 != 1)
  {
    swift_release();
LABEL_18:
    if (*(_QWORD *)(v4 + 424))
      swift_release();
    if (*(_QWORD *)(v4 + 440))
      swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 504))
    swift_release();
  if (*(_QWORD *)(v4 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v4 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v4 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
LABEL_58:
  v20 = v4 + v12;
  v21 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    v22 = v20 + *(int *)(v21 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v22, *(_QWORD *)(v22 + 8), *(_BYTE *)(v22 + 16));
    swift_bridgeObjectRelease();
    v23 = v22 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v24 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
    if (*(_QWORD *)(v20 + *(int *)(v21 + 24)))
      swift_release();
  }
  swift_release();
LABEL_62:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for DialogActionContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (**v33)(_QWORD, uint64_t, uint64_t);
  uint64_t v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;
  id v44;
  id v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  __int128 v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  __int128 v125;
  unint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, _QWORD, uint64_t, int *);
  uint64_t v176;
  uint64_t v177;
  void *v178;
  id v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  void *v191;
  int *v192;
  void *v193;
  char *v194;
  _QWORD *__dst;
  void *__dstb;
  char *__dsta;
  int *v198;
  uint64_t v199;
  unsigned int (*v200)(char *, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  int *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for DialogActionContext.CancelType(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v12(v9, 1, v10))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v204 = v10;
      v206 = v3;
      v210 = v5;
      v14 = *(void **)v9;
      v15 = (void *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v15;
      v16 = *((_QWORD *)v9 + 3);
      *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
      *((_QWORD *)v8 + 3) = v16;
      v8[32] = v9[32];
      v17 = *((_QWORD *)v9 + 6);
      *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
      *((_QWORD *)v8 + 6) = v17;
      v8[56] = v9[56];
      v18 = v8 + 64;
      v19 = v9 + 64;
      v20 = *((_QWORD *)v9 + 23);
      v21 = v14;
      v22 = v15;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v20 >> 1 == 4294967294)
      {
        v23 = *((_OWORD *)v9 + 13);
        *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
        *((_OWORD *)v8 + 13) = v23;
        *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
        *(_DWORD *)(v8 + 239) = *(_DWORD *)(v9 + 239);
        v24 = *((_OWORD *)v9 + 9);
        *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
        *((_OWORD *)v8 + 9) = v24;
        v25 = *((_OWORD *)v9 + 11);
        *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
        *((_OWORD *)v8 + 11) = v25;
        v26 = *((_OWORD *)v9 + 5);
        *v18 = *v19;
        *((_OWORD *)v8 + 5) = v26;
        v27 = *((_OWORD *)v9 + 7);
        *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
        *((_OWORD *)v8 + 7) = v27;
        v28 = *((_QWORD *)v9 + 32);
        if (v28)
        {
LABEL_6:
          *((_QWORD *)v8 + 31) = *((_QWORD *)v9 + 31);
          *((_QWORD *)v8 + 32) = v28;
          v29 = (void *)*((_QWORD *)v9 + 33);
          swift_bridgeObjectRetain();
          if ((unint64_t)v29 >= 2)
            v30 = v29;
          *((_QWORD *)v8 + 33) = v29;
          *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
          v8[276] = v9[276];
          *(_WORD *)(v8 + 277) = *(_WORD *)(v9 + 277);
          v31 = *((_QWORD *)v9 + 36);
          *((_QWORD *)v8 + 35) = *((_QWORD *)v9 + 35);
          *((_QWORD *)v8 + 36) = v31;
          swift_retain();
          swift_retain();
LABEL_24:
          v65 = *((_QWORD *)v9 + 41);
          v203 = v11;
          if (v65 >> 2 == 0xFFFFFFFF)
          {
            v66 = *(_OWORD *)(v9 + 376);
            *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
            *(_OWORD *)(v8 + 376) = v66;
            *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
            v67 = *(_OWORD *)(v9 + 312);
            *(_OWORD *)(v8 + 296) = *(_OWORD *)(v9 + 296);
            *(_OWORD *)(v8 + 312) = v67;
            v68 = *(_OWORD *)(v9 + 344);
            *(_OWORD *)(v8 + 328) = *(_OWORD *)(v9 + 328);
            *(_OWORD *)(v8 + 344) = v68;
          }
          else
          {
            v69 = (void *)*((_QWORD *)v9 + 37);
            v70 = *((_QWORD *)v9 + 38);
            v71 = *((_QWORD *)v9 + 40);
            v73 = *((_QWORD *)v9 + 42);
            v72 = *((_QWORD *)v9 + 43);
            v74 = *((_QWORD *)v9 + 44);
            v182 = *((_QWORD *)v9 + 39);
            v184 = *((_QWORD *)v9 + 45);
            v187 = *((_QWORD *)v9 + 46);
            v191 = (void *)*((_QWORD *)v9 + 47);
            __dstb = (void *)*((_QWORD *)v9 + 48);
            v199 = *((_QWORD *)v9 + 49);
            outlined copy of PlatformItemList.Item.SystemItem(v69, v70, v182, v71, v65, v73, v72, v74, v184, v187, (uint64_t)v191, (char)__dstb, v199);
            *((_QWORD *)v8 + 37) = v69;
            *((_QWORD *)v8 + 38) = v70;
            *((_QWORD *)v8 + 39) = v182;
            *((_QWORD *)v8 + 40) = v71;
            *((_QWORD *)v8 + 41) = v65;
            *((_QWORD *)v8 + 42) = v73;
            *((_QWORD *)v8 + 43) = v72;
            *((_QWORD *)v8 + 44) = v74;
            *((_QWORD *)v8 + 45) = v184;
            *((_QWORD *)v8 + 46) = v187;
            *((_QWORD *)v8 + 47) = v191;
            *((_QWORD *)v8 + 48) = __dstb;
            *((_QWORD *)v8 + 49) = v199;
          }
          v75 = *((_QWORD *)v9 + 51);
          if (v75 == 1)
          {
            v76 = *((_OWORD *)v9 + 28);
            *((_OWORD *)v8 + 27) = *((_OWORD *)v9 + 27);
            *((_OWORD *)v8 + 28) = v76;
            v8[464] = v9[464];
            v77 = *((_OWORD *)v9 + 26);
            *((_OWORD *)v8 + 25) = *((_OWORD *)v9 + 25);
            *((_OWORD *)v8 + 26) = v77;
LABEL_39:
            v85 = *((_QWORD *)v9 + 60);
            *((_QWORD *)v8 + 59) = *((_QWORD *)v9 + 59);
            *((_QWORD *)v8 + 60) = v85;
            *((_QWORD *)v8 + 61) = *((_QWORD *)v9 + 61);
            v8[496] = v9[496];
            v86 = *((_QWORD *)v9 + 63);
            swift_bridgeObjectRetain();
            if (v86)
            {
              v87 = *((_QWORD *)v9 + 64);
              *((_QWORD *)v8 + 63) = v86;
              *((_QWORD *)v8 + 64) = v87;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v8 + 504) = *(_OWORD *)(v9 + 504);
            }
            *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
            v88 = *((_QWORD *)v9 + 66);
            if (v88)
            {
              *((_QWORD *)v8 + 66) = v88;
              *((_QWORD *)v8 + 67) = *((_QWORD *)v9 + 67);
              *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *((_OWORD *)v8 + 33) = *((_OWORD *)v9 + 33);
              *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
            }
            v89 = *((_QWORD *)v9 + 69);
            v209 = v4;
            if (v89 == 1)
            {
              *(_OWORD *)(v8 + 552) = *(_OWORD *)(v9 + 552);
              *((_QWORD *)v8 + 71) = *((_QWORD *)v9 + 71);
            }
            else
            {
              *((_QWORD *)v8 + 69) = v89;
              v90 = *((_QWORD *)v9 + 70);
              swift_retain();
              if (v90)
              {
                v91 = *((_QWORD *)v9 + 71);
                *((_QWORD *)v8 + 70) = v90;
                *((_QWORD *)v8 + 71) = v91;
                swift_retain();
              }
              else
              {
                *((_OWORD *)v8 + 35) = *((_OWORD *)v9 + 35);
              }
            }
            v92 = (void *)*((_QWORD *)v9 + 72);
            *((_QWORD *)v8 + 72) = v92;
            *((_QWORD *)v8 + 73) = *((_QWORD *)v9 + 73);
            *((_QWORD *)v8 + 74) = *((_QWORD *)v9 + 74);
            *((_QWORD *)v8 + 75) = *((_QWORD *)v9 + 75);
            *((_QWORD *)v8 + 76) = *((_QWORD *)v9 + 76);
            *((_QWORD *)v8 + 77) = *((_QWORD *)v9 + 77);
            *((_QWORD *)v8 + 78) = *((_QWORD *)v9 + 78);
            *((_WORD *)v8 + 316) = *((_WORD *)v9 + 316);
            v8[634] = v9[634];
            v93 = type metadata accessor for PlatformItemList.Item();
            v94 = *(int *)(v93 + 112);
            v192 = (int *)v93;
            __dsta = &v8[v94];
            v95 = &v9[v94];
            v96 = type metadata accessor for CommandOperation();
            v97 = *(_QWORD *)(v96 - 8);
            v200 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48);
            v98 = v92;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v200(v95, 1, v96))
            {
              type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
              memcpy(__dsta, v95, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
              v4 = v209;
              v5 = v210;
              v3 = v206;
              v11 = v203;
              v10 = v204;
            }
            else
            {
              v201 = v97;
              *__dsta = *v95;
              v100 = *(int *)(v96 + 20);
              v101 = v95;
              v102 = &__dsta[v100];
              v103 = v96;
              v104 = &v101[v100];
              v105 = *(_QWORD *)&v101[v100];
              v106 = *(_QWORD *)&v101[v100 + 8];
              v107 = v101[v100 + 16];
              outlined copy of Text.Storage(v105, v106, v107);
              *(_QWORD *)v102 = v105;
              *((_QWORD *)v102 + 1) = v106;
              v102[16] = v107;
              *((_QWORD *)v102 + 3) = *((_QWORD *)v104 + 3);
              v108 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v109 = &v102[v108];
              v110 = &v104[v108];
              v111 = type metadata accessor for UUID();
              v112 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16);
              swift_bridgeObjectRetain();
              v112(v109, v110, v111);
              v113 = *(int *)(v103 + 24);
              v114 = &__dsta[v113];
              v115 = &v101[v113];
              if (*(_QWORD *)v115)
              {
                v116 = *((_QWORD *)v115 + 1);
                *(_QWORD *)v114 = *(_QWORD *)v115;
                *((_QWORD *)v114 + 1) = v116;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v114 = *(_OWORD *)v115;
              }
              v4 = v209;
              v5 = v210;
              v3 = v206;
              v11 = v203;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56))(__dsta, 0, 1, v103);
              v10 = v204;
            }
            v8[v192[29]] = v9[v192[29]];
            v8[v192[30]] = v9[v192[30]];
            v8[v192[31]] = v9[v192[31]];
            v8[v192[32]] = v9[v192[32]];
            *(_QWORD *)&v8[v192[33]] = *(_QWORD *)&v9[v192[33]];
            swift_retain();
            goto LABEL_96;
          }
          *((_DWORD *)v8 + 100) = *((_DWORD *)v9 + 100);
          v8[404] = v9[404];
          if (v75)
          {
            v78 = *((_QWORD *)v9 + 52);
            *((_QWORD *)v8 + 51) = v75;
            *((_QWORD *)v8 + 52) = v78;
            swift_retain();
            v79 = *((_QWORD *)v9 + 53);
            if (v79)
              goto LABEL_31;
          }
          else
          {
            *(_OWORD *)(v8 + 408) = *(_OWORD *)(v9 + 408);
            v79 = *((_QWORD *)v9 + 53);
            if (v79)
            {
LABEL_31:
              v80 = *((_QWORD *)v9 + 54);
              *((_QWORD *)v8 + 53) = v79;
              *((_QWORD *)v8 + 54) = v80;
              swift_retain();
              v81 = *((_QWORD *)v9 + 55);
              if (v81)
              {
LABEL_32:
                v82 = *((_QWORD *)v9 + 56);
                *((_QWORD *)v8 + 55) = v81;
                *((_QWORD *)v8 + 56) = v82;
                swift_retain();
LABEL_38:
                *((_QWORD *)v8 + 57) = *((_QWORD *)v9 + 57);
                v8[464] = v9[464];
                goto LABEL_39;
              }
LABEL_37:
              *(_OWORD *)(v8 + 440) = *(_OWORD *)(v9 + 440);
              goto LABEL_38;
            }
          }
          *(_OWORD *)(v8 + 424) = *(_OWORD *)(v9 + 424);
          v81 = *((_QWORD *)v9 + 55);
          if (v81)
            goto LABEL_32;
          goto LABEL_37;
        }
      }
      else
      {
        v35 = v9[72];
        if (v35 == 255)
        {
          *(_QWORD *)v18 = *(_QWORD *)v19;
          v8[72] = v9[72];
        }
        else
        {
          v36 = (void *)*((_QWORD *)v9 + 8);
          outlined copy of GraphicsImage.Contents(v36, v9[72]);
          *((_QWORD *)v8 + 8) = v36;
          v8[72] = v35;
          v20 = *((_QWORD *)v9 + 23);
        }
        *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
        *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
        v8[104] = v9[104];
        *(_OWORD *)(v8 + 108) = *(_OWORD *)(v9 + 108);
        v8[124] = v9[124];
        v55 = *((_OWORD *)v9 + 9);
        *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
        *((_OWORD *)v8 + 9) = v55;
        *((_WORD *)v8 + 80) = *((_WORD *)v9 + 80);
        v8[162] = v9[162];
        v8[163] = v9[163];
        if (v20 >> 1 == 0xFFFFFFFF)
        {
          v56 = *(_OWORD *)(v9 + 184);
          *(_OWORD *)(v8 + 168) = *(_OWORD *)(v9 + 168);
          *(_OWORD *)(v8 + 184) = v56;
        }
        else
        {
          v57 = *((_QWORD *)v9 + 21);
          v58 = *((_QWORD *)v9 + 22);
          v59 = v11;
          v60 = *((_QWORD *)v9 + 24);
          outlined copy of AccessibilityImageLabel(v57, v58, v20);
          *((_QWORD *)v8 + 21) = v57;
          *((_QWORD *)v8 + 22) = v58;
          *((_QWORD *)v8 + 23) = v20;
          *((_QWORD *)v8 + 24) = v60;
          v11 = v59;
        }
        v61 = *((_QWORD *)v9 + 26);
        *((_QWORD *)v8 + 25) = *((_QWORD *)v9 + 25);
        *((_QWORD *)v8 + 26) = v61;
        *((_WORD *)v8 + 108) = *((_WORD *)v9 + 108);
        *((_DWORD *)v8 + 55) = *((_DWORD *)v9 + 55);
        v8[224] = v9[224];
        v62 = (void *)*((_QWORD *)v9 + 29);
        *((_QWORD *)v8 + 29) = v62;
        *((_WORD *)v8 + 120) = *((_WORD *)v9 + 120);
        v8[242] = v9[242];
        swift_unknownObjectRetain();
        swift_retain();
        v63 = v62;
        v28 = *((_QWORD *)v9 + 32);
        if (v28)
          goto LABEL_6;
      }
      v64 = *(_OWORD *)(v9 + 264);
      *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
      *(_OWORD *)(v8 + 264) = v64;
      *(_OWORD *)(v8 + 280) = *(_OWORD *)(v9 + 280);
      goto LABEL_24;
    }
    v32 = type metadata accessor for PlatformItemList.Item();
    v33 = *(unsigned int (***)(_QWORD, uint64_t, uint64_t))(v32 - 8);
    if (((unsigned int (**)(char *, uint64_t, uint64_t))v33)[6](v9, 1, v32))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
LABEL_96:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_97;
    }
    __dst = v33;
    v198 = (int *)v32;
    v202 = v11;
    v205 = v10;
    v207 = v3;
    v208 = v4;
    v211 = v5;
    v37 = *(void **)v9;
    v38 = (void *)*((_QWORD *)v9 + 1);
    *(_QWORD *)v8 = *(_QWORD *)v9;
    *((_QWORD *)v8 + 1) = v38;
    v39 = *((_QWORD *)v9 + 3);
    *((_QWORD *)v8 + 2) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v8 + 3) = v39;
    v8[32] = v9[32];
    v40 = *((_QWORD *)v9 + 6);
    *((_QWORD *)v8 + 5) = *((_QWORD *)v9 + 5);
    *((_QWORD *)v8 + 6) = v40;
    v8[56] = v9[56];
    v41 = v8 + 64;
    v42 = v9 + 64;
    v43 = *((_QWORD *)v9 + 23);
    v44 = v37;
    v45 = v38;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v43 >> 1 == 4294967294)
    {
      v46 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
      *((_OWORD *)v8 + 13) = v46;
      *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
      *(_DWORD *)(v8 + 239) = *(_DWORD *)(v9 + 239);
      v47 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v47;
      v48 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
      *((_OWORD *)v8 + 11) = v48;
      v49 = *((_OWORD *)v9 + 5);
      *v41 = *v42;
      *((_OWORD *)v8 + 5) = v49;
      v50 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v50;
      v51 = *((_QWORD *)v9 + 32);
      if (v51)
      {
LABEL_15:
        *((_QWORD *)v8 + 31) = *((_QWORD *)v9 + 31);
        *((_QWORD *)v8 + 32) = v51;
        v52 = (void *)*((_QWORD *)v9 + 33);
        swift_bridgeObjectRetain();
        if ((unint64_t)v52 >= 2)
          v53 = v52;
        *((_QWORD *)v8 + 33) = v52;
        *((_DWORD *)v8 + 68) = *((_DWORD *)v9 + 68);
        v8[276] = v9[276];
        *(_WORD *)(v8 + 277) = *(_WORD *)(v9 + 277);
        v54 = *((_QWORD *)v9 + 36);
        *((_QWORD *)v8 + 35) = *((_QWORD *)v9 + 35);
        *((_QWORD *)v8 + 36) = v54;
        swift_retain();
        swift_retain();
        goto LABEL_63;
      }
    }
    else
    {
      v83 = v9[72];
      if (v83 == 255)
      {
        *(_QWORD *)v41 = *(_QWORD *)v42;
        v8[72] = v9[72];
      }
      else
      {
        v84 = (void *)*((_QWORD *)v9 + 8);
        outlined copy of GraphicsImage.Contents(v84, v9[72]);
        *((_QWORD *)v8 + 8) = v84;
        v8[72] = v83;
        v43 = *((_QWORD *)v9 + 23);
      }
      *((_QWORD *)v8 + 10) = *((_QWORD *)v9 + 10);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v9 + 88);
      v8[104] = v9[104];
      *(_OWORD *)(v8 + 108) = *(_OWORD *)(v9 + 108);
      v8[124] = v9[124];
      v117 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v117;
      *((_WORD *)v8 + 80) = *((_WORD *)v9 + 80);
      v8[162] = v9[162];
      v8[163] = v9[163];
      if (v43 >> 1 == 0xFFFFFFFF)
      {
        v118 = *(_OWORD *)(v9 + 184);
        *(_OWORD *)(v8 + 168) = *(_OWORD *)(v9 + 168);
        *(_OWORD *)(v8 + 184) = v118;
      }
      else
      {
        v119 = *((_QWORD *)v9 + 21);
        v120 = *((_QWORD *)v9 + 22);
        v121 = *((_QWORD *)v9 + 24);
        outlined copy of AccessibilityImageLabel(v119, v120, v43);
        *((_QWORD *)v8 + 21) = v119;
        *((_QWORD *)v8 + 22) = v120;
        *((_QWORD *)v8 + 23) = v43;
        *((_QWORD *)v8 + 24) = v121;
      }
      v122 = *((_QWORD *)v9 + 26);
      *((_QWORD *)v8 + 25) = *((_QWORD *)v9 + 25);
      *((_QWORD *)v8 + 26) = v122;
      *((_WORD *)v8 + 108) = *((_WORD *)v9 + 108);
      *((_DWORD *)v8 + 55) = *((_DWORD *)v9 + 55);
      v8[224] = v9[224];
      v123 = (void *)*((_QWORD *)v9 + 29);
      *((_QWORD *)v8 + 29) = v123;
      *((_WORD *)v8 + 120) = *((_WORD *)v9 + 120);
      v8[242] = v9[242];
      swift_unknownObjectRetain();
      swift_retain();
      v124 = v123;
      v51 = *((_QWORD *)v9 + 32);
      if (v51)
        goto LABEL_15;
    }
    v125 = *(_OWORD *)(v9 + 264);
    *(_OWORD *)(v8 + 248) = *(_OWORD *)(v9 + 248);
    *(_OWORD *)(v8 + 264) = v125;
    *(_OWORD *)(v8 + 280) = *(_OWORD *)(v9 + 280);
LABEL_63:
    v126 = *((_QWORD *)v9 + 41);
    if (v126 >> 2 == 0xFFFFFFFF)
    {
      v127 = *(_OWORD *)(v9 + 376);
      *(_OWORD *)(v8 + 360) = *(_OWORD *)(v9 + 360);
      *(_OWORD *)(v8 + 376) = v127;
      *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
      v128 = *(_OWORD *)(v9 + 312);
      *(_OWORD *)(v8 + 296) = *(_OWORD *)(v9 + 296);
      *(_OWORD *)(v8 + 312) = v128;
      v129 = *(_OWORD *)(v9 + 344);
      *(_OWORD *)(v8 + 328) = *(_OWORD *)(v9 + 328);
      *(_OWORD *)(v8 + 344) = v129;
    }
    else
    {
      v130 = (void *)*((_QWORD *)v9 + 37);
      v131 = *((_QWORD *)v9 + 38);
      v133 = *((_QWORD *)v9 + 39);
      v132 = *((_QWORD *)v9 + 40);
      v134 = *((_QWORD *)v9 + 42);
      v135 = *((_QWORD *)v9 + 43);
      v136 = *((_QWORD *)v9 + 44);
      v181 = *((_QWORD *)v9 + 45);
      v183 = *((_QWORD *)v9 + 46);
      v185 = *((_QWORD *)v9 + 47);
      v188 = *((_QWORD *)v9 + 48);
      v193 = (void *)*((_QWORD *)v9 + 49);
      outlined copy of PlatformItemList.Item.SystemItem(v130, v131, v133, v132, v126, v134, v135, v136, v181, v183, v185, v188, (uint64_t)v193);
      *((_QWORD *)v8 + 37) = v130;
      *((_QWORD *)v8 + 38) = v131;
      *((_QWORD *)v8 + 39) = v133;
      *((_QWORD *)v8 + 40) = v132;
      *((_QWORD *)v8 + 41) = v126;
      *((_QWORD *)v8 + 42) = v134;
      *((_QWORD *)v8 + 43) = v135;
      *((_QWORD *)v8 + 44) = v136;
      *((_QWORD *)v8 + 45) = v181;
      *((_QWORD *)v8 + 46) = v183;
      *((_QWORD *)v8 + 47) = v185;
      *((_QWORD *)v8 + 48) = v188;
      *((_QWORD *)v8 + 49) = v193;
    }
    v137 = *((_QWORD *)v9 + 51);
    if (v137 == 1)
    {
      v138 = *((_OWORD *)v9 + 28);
      *((_OWORD *)v8 + 27) = *((_OWORD *)v9 + 27);
      *((_OWORD *)v8 + 28) = v138;
      v8[464] = v9[464];
      v139 = *((_OWORD *)v9 + 26);
      *((_OWORD *)v8 + 25) = *((_OWORD *)v9 + 25);
      *((_OWORD *)v8 + 26) = v139;
    }
    else
    {
      *((_DWORD *)v8 + 100) = *((_DWORD *)v9 + 100);
      v8[404] = v9[404];
      if (v137)
      {
        v140 = *((_QWORD *)v9 + 52);
        *((_QWORD *)v8 + 51) = v137;
        *((_QWORD *)v8 + 52) = v140;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v8 + 408) = *(_OWORD *)(v9 + 408);
      }
      v141 = *((_QWORD *)v9 + 53);
      if (v141)
      {
        v142 = *((_QWORD *)v9 + 54);
        *((_QWORD *)v8 + 53) = v141;
        *((_QWORD *)v8 + 54) = v142;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v8 + 424) = *(_OWORD *)(v9 + 424);
      }
      v143 = *((_QWORD *)v9 + 55);
      if (v143)
      {
        v144 = *((_QWORD *)v9 + 56);
        *((_QWORD *)v8 + 55) = v143;
        *((_QWORD *)v8 + 56) = v144;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v8 + 440) = *(_OWORD *)(v9 + 440);
      }
      *((_QWORD *)v8 + 57) = *((_QWORD *)v9 + 57);
      v8[464] = v9[464];
    }
    v145 = *((_QWORD *)v9 + 60);
    *((_QWORD *)v8 + 59) = *((_QWORD *)v9 + 59);
    *((_QWORD *)v8 + 60) = v145;
    *((_QWORD *)v8 + 61) = *((_QWORD *)v9 + 61);
    v8[496] = v9[496];
    v146 = *((_QWORD *)v9 + 63);
    swift_bridgeObjectRetain();
    if (v146)
    {
      v147 = *((_QWORD *)v9 + 64);
      *((_QWORD *)v8 + 63) = v146;
      *((_QWORD *)v8 + 64) = v147;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v8 + 504) = *(_OWORD *)(v9 + 504);
    }
    *((_WORD *)v8 + 260) = *((_WORD *)v9 + 260);
    v148 = *((_QWORD *)v9 + 66);
    if (v148)
    {
      *((_QWORD *)v8 + 66) = v148;
      *((_QWORD *)v8 + 67) = *((_QWORD *)v9 + 67);
      *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v8 + 33) = *((_OWORD *)v9 + 33);
      *((_QWORD *)v8 + 68) = *((_QWORD *)v9 + 68);
    }
    v149 = *((_QWORD *)v9 + 69);
    if (v149 == 1)
    {
      *(_OWORD *)(v8 + 552) = *(_OWORD *)(v9 + 552);
      *((_QWORD *)v8 + 71) = *((_QWORD *)v9 + 71);
    }
    else
    {
      *((_QWORD *)v8 + 69) = v149;
      v150 = *((_QWORD *)v9 + 70);
      swift_retain();
      if (v150)
      {
        v151 = *((_QWORD *)v9 + 71);
        *((_QWORD *)v8 + 70) = v150;
        *((_QWORD *)v8 + 71) = v151;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v8 + 35) = *((_OWORD *)v9 + 35);
      }
    }
    v152 = (void *)*((_QWORD *)v9 + 72);
    *((_QWORD *)v8 + 72) = v152;
    *((_QWORD *)v8 + 73) = *((_QWORD *)v9 + 73);
    *((_QWORD *)v8 + 74) = *((_QWORD *)v9 + 74);
    *((_QWORD *)v8 + 75) = *((_QWORD *)v9 + 75);
    *((_QWORD *)v8 + 76) = *((_QWORD *)v9 + 76);
    *((_QWORD *)v8 + 77) = *((_QWORD *)v9 + 77);
    *((_QWORD *)v8 + 78) = *((_QWORD *)v9 + 78);
    *((_WORD *)v8 + 316) = *((_WORD *)v9 + 316);
    v8[634] = v9[634];
    v153 = v198[28];
    v194 = &v8[v153];
    v154 = &v9[v153];
    v155 = type metadata accessor for CommandOperation();
    v156 = *(_QWORD *)(v155 - 8);
    v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48);
    v157 = v152;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v189(v154, 1, v155))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
      memcpy(v194, v154, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
      v3 = v207;
      v11 = v202;
      v10 = v205;
      v159 = v198;
    }
    else
    {
      v186 = v156;
      v190 = v155;
      *v194 = *v154;
      v160 = *(int *)(v155 + 20);
      v161 = &v194[v160];
      v162 = &v154[v160];
      v163 = *(_QWORD *)&v154[v160];
      v164 = *(_QWORD *)&v154[v160 + 8];
      v165 = v154[v160 + 16];
      outlined copy of Text.Storage(v163, v164, v165);
      *(_QWORD *)v161 = v163;
      *((_QWORD *)v161 + 1) = v164;
      v161[16] = v165;
      *((_QWORD *)v161 + 3) = *((_QWORD *)v162 + 3);
      v166 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v167 = &v161[v166];
      v168 = &v162[v166];
      v169 = type metadata accessor for UUID();
      v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v169 - 8) + 16);
      swift_bridgeObjectRetain();
      v170(v167, v168, v169);
      v171 = *(int *)(v190 + 24);
      v172 = &v194[v171];
      v173 = &v154[v171];
      if (*(_QWORD *)v173)
      {
        v174 = *((_QWORD *)v173 + 1);
        *(_QWORD *)v172 = *(_QWORD *)v173;
        *((_QWORD *)v172 + 1) = v174;
        swift_retain();
      }
      else
      {
        *(_OWORD *)v172 = *(_OWORD *)v173;
      }
      v3 = v207;
      v11 = v202;
      v10 = v205;
      v159 = v198;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v194, 0, 1, v190);
    }
    v8[v159[29]] = v9[v159[29]];
    v8[v159[30]] = v9[v159[30]];
    v8[v159[31]] = v9[v159[31]];
    v8[v159[32]] = v9[v159[32]];
    *(_QWORD *)&v8[v159[33]] = *(_QWORD *)&v9[v159[33]];
    v175 = (void (*)(char *, _QWORD, uint64_t, int *))__dst[7];
    swift_retain();
    v175(v8, 0, 1, v159);
    v4 = v208;
    v5 = v211;
    goto LABEL_96;
  }
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_97:
  v176 = v3[8];
  *(_QWORD *)((char *)v5 + v3[7]) = *(_QWORD *)((char *)v4 + v3[7]);
  *(_QWORD *)((char *)v5 + v176) = *(_QWORD *)((char *)v4 + v176);
  v177 = v3[9];
  v178 = *(void **)((char *)v4 + v177);
  *(_QWORD *)((char *)v5 + v177) = v178;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v179 = v178;
  return v5;
}

_QWORD *assignWithCopy for DialogActionContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _OWORD *v17;
  id *v18;
  unint64_t v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  id v32;
  int v33;
  void *v34;
  void *v35;
  _OWORD *v36;
  id *v37;
  unint64_t v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  id v54;
  uint64_t v55;
  unsigned int (**v56)(_QWORD, uint64_t, uint64_t);
  uint64_t v57;
  void *v58;
  void *v59;
  _OWORD *v60;
  id *v61;
  unint64_t v62;
  id v63;
  id v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  _OWORD *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  id v127;
  uint64_t v128;
  int *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void *v145;
  void *v146;
  _OWORD *v147;
  id *v148;
  unint64_t v149;
  id v150;
  id v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  id v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  void *v171;
  id v172;
  void *v173;
  id v174;
  int v175;
  __int128 v176;
  __int128 v177;
  unint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  unint64_t v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  void *v205;
  id v206;
  void *v207;
  id v208;
  int v209;
  __int128 v210;
  __int128 v211;
  unint64_t v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  id v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  _OWORD *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  _OWORD *v253;
  __int128 v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  id v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  void (*v273)(char *, char *, uint64_t);
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  void *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  id v282;
  uint64_t v283;
  int *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  void (*v297)(char *, char *, uint64_t);
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  void (*v302)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v303;
  void *v304;
  void *v305;
  id v306;
  id v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  void *v318;
  id v319;
  void *v320;
  id v321;
  int v322;
  __int128 v323;
  __int128 v324;
  unint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __int128 v349;
  uint64_t v350;
  _OWORD *v351;
  __int128 v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  id v359;
  uint64_t v360;
  int *v361;
  uint64_t v362;
  char *v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  void (*v372)(char *, char *, uint64_t);
  uint64_t v373;
  char *v374;
  char *v375;
  uint64_t v376;
  void (*v377)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  int *v397;
  void *v398;
  void *v399;
  char *v400;
  unsigned int (*v401)(char *, uint64_t, uint64_t);
  void *v402;
  unsigned int (*v403)(char *, uint64_t, uint64_t);
  int *v404;
  _QWORD *v405;
  void *__dstd;
  char *__dst;
  _QWORD *__dsta;
  void *__dste;
  void *__dstf;
  int *__dstb;
  char *__dstc;
  int *v413;
  void *v414;
  unsigned int (*v415)(char *, uint64_t, uint64_t);
  void (**v416)(char *, _QWORD, uint64_t, uint64_t);
  void *v417;
  unsigned int (*v418)(char *, uint64_t, uint64_t);
  int *v419;
  void *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  int *v424;
  uint64_t v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  int *v429;
  int *v430;
  int *v431;
  int *v432;
  _QWORD *v433;
  _QWORD *v434;
  _QWORD *v435;
  _QWORD *v436;

  v4 = a2;
  v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[1] = v4[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (uint64_t)v5 + v6;
  v8 = (char *)v4 + v6;
  v9 = type metadata accessor for DialogActionContext.CancelType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (v13)
      goto LABEL_6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v422 = v10;
      v427 = v9;
      v429 = a3;
      v433 = v4;
      v15 = *(void **)v8;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      v16 = (void *)*((_QWORD *)v8 + 1);
      *(_QWORD *)(v7 + 8) = v16;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
      *(_BYTE *)(v7 + 32) = v8[32];
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
      *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
      *(_BYTE *)(v7 + 56) = v8[56];
      v17 = (_OWORD *)(v7 + 64);
      v18 = (id *)(v8 + 64);
      v19 = *((_QWORD *)v8 + 23);
      v20 = v15;
      v21 = v16;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v19 >> 1 == 4294967294)
      {
        v22 = *(_OWORD *)v18;
        v23 = *((_OWORD *)v8 + 5);
        v24 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v24;
        *v17 = v22;
        *(_OWORD *)(v7 + 80) = v23;
        v25 = *((_OWORD *)v8 + 8);
        v26 = *((_OWORD *)v8 + 9);
        v27 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v27;
        *(_OWORD *)(v7 + 128) = v25;
        *(_OWORD *)(v7 + 144) = v26;
        v28 = *((_OWORD *)v8 + 12);
        v29 = *((_OWORD *)v8 + 13);
        v30 = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        *(_OWORD *)(v7 + 208) = v29;
        *(_OWORD *)(v7 + 224) = v30;
        *(_OWORD *)(v7 + 192) = v28;
        if (*((_QWORD *)v8 + 32))
        {
LABEL_10:
          *(_QWORD *)(v7 + 248) = *((_QWORD *)v8 + 31);
          *(_QWORD *)(v7 + 256) = *((_QWORD *)v8 + 32);
          v31 = (void *)*((_QWORD *)v8 + 33);
          swift_bridgeObjectRetain();
          if ((unint64_t)v31 >= 2)
            v32 = v31;
          *(_QWORD *)(v7 + 264) = v31;
          v33 = *((_DWORD *)v8 + 68);
          *(_BYTE *)(v7 + 276) = v8[276];
          *(_DWORD *)(v7 + 272) = v33;
          *(_BYTE *)(v7 + 277) = v8[277];
          *(_BYTE *)(v7 + 278) = v8[278];
          *(_QWORD *)(v7 + 280) = *((_QWORD *)v8 + 35);
          *(_QWORD *)(v7 + 288) = *((_QWORD *)v8 + 36);
          swift_retain();
          swift_retain();
LABEL_33:
          v90 = *((_QWORD *)v8 + 41);
          if (v90 >> 2 == 0xFFFFFFFF)
          {
            v91 = *(_OWORD *)(v8 + 296);
            v92 = *(_OWORD *)(v8 + 328);
            *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
            *(_OWORD *)(v7 + 328) = v92;
            *(_OWORD *)(v7 + 296) = v91;
            v93 = *(_OWORD *)(v8 + 344);
            v94 = *(_OWORD *)(v8 + 360);
            v95 = *(_OWORD *)(v8 + 376);
            *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
            *(_OWORD *)(v7 + 360) = v94;
            *(_OWORD *)(v7 + 376) = v95;
            *(_OWORD *)(v7 + 344) = v93;
          }
          else
          {
            v96 = (void *)*((_QWORD *)v8 + 37);
            v97 = *((_QWORD *)v8 + 38);
            v98 = *((_QWORD *)v8 + 39);
            v99 = *((_QWORD *)v8 + 42);
            v100 = *((_QWORD *)v8 + 43);
            v101 = *((_QWORD *)v8 + 44);
            v381 = *((_QWORD *)v8 + 40);
            v385 = *((_QWORD *)v8 + 45);
            v391 = *((_QWORD *)v8 + 46);
            v396 = (void *)*((_QWORD *)v8 + 47);
            __dstd = (void *)*((_QWORD *)v8 + 48);
            v414 = (void *)*((_QWORD *)v8 + 49);
            outlined copy of PlatformItemList.Item.SystemItem(v96, v97, v98, v381, v90, v99, v100, v101, v385, v391, (uint64_t)v396, (char)__dstd, (uint64_t)v414);
            *(_QWORD *)(v7 + 296) = v96;
            *(_QWORD *)(v7 + 304) = v97;
            *(_QWORD *)(v7 + 312) = v98;
            *(_QWORD *)(v7 + 320) = v381;
            *(_QWORD *)(v7 + 328) = v90;
            *(_QWORD *)(v7 + 336) = v99;
            *(_QWORD *)(v7 + 344) = v100;
            *(_QWORD *)(v7 + 352) = v101;
            *(_QWORD *)(v7 + 360) = v385;
            *(_QWORD *)(v7 + 368) = v391;
            *(_QWORD *)(v7 + 376) = v396;
            *(_QWORD *)(v7 + 384) = __dstd;
            *(_QWORD *)(v7 + 392) = v414;
          }
          if (*((_QWORD *)v8 + 51) == 1)
          {
            *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
            v102 = *((_OWORD *)v8 + 26);
            v103 = *((_OWORD *)v8 + 27);
            v104 = *((_OWORD *)v8 + 28);
            *(_BYTE *)(v7 + 464) = v8[464];
            *(_OWORD *)(v7 + 432) = v103;
            *(_OWORD *)(v7 + 448) = v104;
            *(_OWORD *)(v7 + 416) = v102;
            goto LABEL_48;
          }
          *(_BYTE *)(v7 + 400) = v8[400];
          *(_BYTE *)(v7 + 401) = v8[401];
          *(_BYTE *)(v7 + 402) = v8[402];
          *(_BYTE *)(v7 + 403) = v8[403];
          *(_BYTE *)(v7 + 404) = v8[404];
          v105 = *((_QWORD *)v8 + 51);
          if (v105)
          {
            v106 = *((_QWORD *)v8 + 52);
            *(_QWORD *)(v7 + 408) = v105;
            *(_QWORD *)(v7 + 416) = v106;
            swift_retain();
            v107 = *((_QWORD *)v8 + 53);
            if (v107)
              goto LABEL_40;
          }
          else
          {
            *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
            v107 = *((_QWORD *)v8 + 53);
            if (v107)
            {
LABEL_40:
              v108 = *((_QWORD *)v8 + 54);
              *(_QWORD *)(v7 + 424) = v107;
              *(_QWORD *)(v7 + 432) = v108;
              swift_retain();
              v109 = *((_QWORD *)v8 + 55);
              if (v109)
              {
LABEL_41:
                v110 = *((_QWORD *)v8 + 56);
                *(_QWORD *)(v7 + 440) = v109;
                *(_QWORD *)(v7 + 448) = v110;
                swift_retain();
LABEL_47:
                *(_QWORD *)(v7 + 456) = *((_QWORD *)v8 + 57);
                *(_BYTE *)(v7 + 464) = v8[464];
LABEL_48:
                *(_QWORD *)(v7 + 472) = *((_QWORD *)v8 + 59);
                *(_QWORD *)(v7 + 480) = *((_QWORD *)v8 + 60);
                *(_QWORD *)(v7 + 488) = *((_QWORD *)v8 + 61);
                *(_BYTE *)(v7 + 496) = v8[496];
                v113 = *((_QWORD *)v8 + 63);
                swift_bridgeObjectRetain();
                if (v113)
                {
                  v114 = *((_QWORD *)v8 + 64);
                  *(_QWORD *)(v7 + 504) = v113;
                  *(_QWORD *)(v7 + 512) = v114;
                  swift_retain();
                }
                else
                {
                  *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
                }
                *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
                v115 = *((_QWORD *)v8 + 66);
                if (v115)
                {
                  *(_QWORD *)(v7 + 528) = v115;
                  *(_QWORD *)(v7 + 536) = *((_QWORD *)v8 + 67);
                  *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  v116 = *((_OWORD *)v8 + 33);
                  *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
                  *(_OWORD *)(v7 + 528) = v116;
                }
                v117 = *((_QWORD *)v8 + 69);
                v405 = v5;
                if (v117 == 1)
                {
                  v118 = (_OWORD *)(v7 + 552);
                  v119 = *(_OWORD *)(v8 + 552);
                  *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
                }
                else
                {
                  *(_QWORD *)(v7 + 552) = v117;
                  v120 = *((_QWORD *)v8 + 70);
                  swift_retain();
                  if (v120)
                  {
                    v121 = *((_QWORD *)v8 + 71);
                    *(_QWORD *)(v7 + 560) = v120;
                    *(_QWORD *)(v7 + 568) = v121;
                    swift_retain();
LABEL_60:
                    v122 = (void *)*((_QWORD *)v8 + 72);
                    *(_QWORD *)(v7 + 576) = v122;
                    *(_QWORD *)(v7 + 584) = *((_QWORD *)v8 + 73);
                    *(_QWORD *)(v7 + 592) = *((_QWORD *)v8 + 74);
                    *(_QWORD *)(v7 + 600) = *((_QWORD *)v8 + 75);
                    *(_QWORD *)(v7 + 608) = *((_QWORD *)v8 + 76);
                    *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
                    *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
                    *(_BYTE *)(v7 + 632) = v8[632];
                    *(_BYTE *)(v7 + 633) = v8[633];
                    *(_BYTE *)(v7 + 634) = v8[634];
                    v397 = (int *)type metadata accessor for PlatformItemList.Item();
                    v123 = v397[28];
                    __dst = (char *)(v7 + v123);
                    v124 = &v8[v123];
                    v125 = type metadata accessor for CommandOperation();
                    v126 = *(_QWORD **)(v125 - 8);
                    v415 = (unsigned int (*)(char *, uint64_t, uint64_t))v126[6];
                    v127 = v122;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v415(v124, 1, v125))
                    {
                      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                      memcpy(__dst, v124, *(_QWORD *)(*(_QWORD *)(v128 - 8) + 64));
                      a3 = v429;
                      v4 = v433;
                      v9 = v427;
                      v10 = v422;
                      v129 = v397;
                      v5 = v405;
                    }
                    else
                    {
                      v416 = (void (**)(char *, _QWORD, uint64_t, uint64_t))v126;
                      *__dst = *v124;
                      v130 = *(int *)(v125 + 20);
                      v131 = &__dst[v130];
                      v132 = &v124[v130];
                      v133 = *(_QWORD *)&v124[v130];
                      v134 = *(_QWORD *)&v124[v130 + 8];
                      v135 = v124[v130 + 16];
                      outlined copy of Text.Storage(*(_QWORD *)v132, *((_QWORD *)v132 + 1), v132[16]);
                      *(_QWORD *)v131 = v133;
                      *((_QWORD *)v131 + 1) = v134;
                      v131[16] = v135;
                      *((_QWORD *)v131 + 3) = *((_QWORD *)v132 + 3);
                      v136 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                      v137 = &v131[v136];
                      v138 = &v132[v136];
                      v139 = type metadata accessor for UUID();
                      v140 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v139 - 8) + 16);
                      swift_bridgeObjectRetain();
                      v140(v137, v138, v139);
                      v141 = *(int *)(v125 + 24);
                      v142 = &__dst[v141];
                      v143 = &v124[v141];
                      if (*(_QWORD *)v143)
                      {
                        v144 = *((_QWORD *)v143 + 1);
                        *(_QWORD *)v142 = *(_QWORD *)v143;
                        *((_QWORD *)v142 + 1) = v144;
                        swift_retain();
                      }
                      else
                      {
                        *(_OWORD *)v142 = *(_OWORD *)v143;
                      }
                      a3 = v429;
                      v4 = v433;
                      v9 = v427;
                      v10 = v422;
                      v129 = v397;
                      v5 = v405;
                      v416[7](__dst, 0, 1, v125);
                    }
                    *(_BYTE *)(v7 + v129[29]) = v8[v129[29]];
                    *(_BYTE *)(v7 + v129[30]) = v8[v129[30]];
                    *(_BYTE *)(v7 + v129[31]) = v8[v129[31]];
                    *(_BYTE *)(v7 + v129[32]) = v8[v129[32]];
                    *(_QWORD *)(v7 + v129[33]) = *(_QWORD *)&v8[v129[33]];
                    swift_retain();
                    goto LABEL_159;
                  }
                  v118 = (_OWORD *)(v7 + 560);
                  v119 = *((_OWORD *)v8 + 35);
                }
                *v118 = v119;
                goto LABEL_60;
              }
LABEL_46:
              *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
              goto LABEL_47;
            }
          }
          *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
          v109 = *((_QWORD *)v8 + 55);
          if (v109)
            goto LABEL_41;
          goto LABEL_46;
        }
      }
      else
      {
        v53 = v8[72];
        if (v53 == 255)
        {
          v76 = *v18;
          *(_BYTE *)(v7 + 72) = v8[72];
          *(_QWORD *)v17 = v76;
        }
        else
        {
          v54 = *v18;
          outlined copy of GraphicsImage.Contents(*v18, v8[72]);
          *(_QWORD *)(v7 + 64) = v54;
          *(_BYTE *)(v7 + 72) = v53;
        }
        *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
        *(_BYTE *)(v7 + 104) = v8[104];
        v77 = *(_OWORD *)(v8 + 108);
        *(_BYTE *)(v7 + 124) = v8[124];
        *(_OWORD *)(v7 + 108) = v77;
        v78 = *((_OWORD *)v8 + 8);
        v79 = *((_OWORD *)v8 + 9);
        *(_BYTE *)(v7 + 160) = v8[160];
        *(_OWORD *)(v7 + 128) = v78;
        *(_OWORD *)(v7 + 144) = v79;
        *(_BYTE *)(v7 + 161) = v8[161];
        *(_BYTE *)(v7 + 162) = v8[162];
        *(_BYTE *)(v7 + 163) = v8[163];
        v80 = *((_QWORD *)v8 + 23);
        if (v80 >> 1 == 0xFFFFFFFF)
        {
          v81 = *(_OWORD *)(v8 + 184);
          *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
          *(_OWORD *)(v7 + 184) = v81;
        }
        else
        {
          v82 = *((_QWORD *)v8 + 21);
          v83 = *((_QWORD *)v8 + 22);
          v84 = *((_QWORD *)v8 + 24);
          outlined copy of AccessibilityImageLabel(v82, v83, *((_QWORD *)v8 + 23));
          *(_QWORD *)(v7 + 168) = v82;
          *(_QWORD *)(v7 + 176) = v83;
          *(_QWORD *)(v7 + 184) = v80;
          *(_QWORD *)(v7 + 192) = v84;
        }
        *(_QWORD *)(v7 + 200) = *((_QWORD *)v8 + 25);
        *(_QWORD *)(v7 + 208) = *((_QWORD *)v8 + 26);
        *(_BYTE *)(v7 + 216) = v8[216];
        *(_BYTE *)(v7 + 217) = v8[217];
        v85 = *((_DWORD *)v8 + 55);
        *(_BYTE *)(v7 + 224) = v8[224];
        *(_DWORD *)(v7 + 220) = v85;
        v86 = (void *)*((_QWORD *)v8 + 29);
        *(_QWORD *)(v7 + 232) = v86;
        *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
        *(_BYTE *)(v7 + 242) = v8[242];
        swift_unknownObjectRetain();
        swift_retain();
        v87 = v86;
        if (*((_QWORD *)v8 + 32))
          goto LABEL_10;
      }
      v88 = *(_OWORD *)(v8 + 248);
      v89 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v89;
      *(_OWORD *)(v7 + 248) = v88;
      goto LABEL_33;
    }
    v50 = type metadata accessor for PlatformItemList.Item();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v8, 1, v50))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
LABEL_159:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_160;
    }
    v390 = v51;
    v413 = (int *)v50;
    v423 = v10;
    v428 = v9;
    v431 = a3;
    v435 = v4;
    v58 = *(void **)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v59 = (void *)*((_QWORD *)v8 + 1);
    *(_QWORD *)(v7 + 8) = v59;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
    *(_BYTE *)(v7 + 32) = v8[32];
    *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
    *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
    *(_BYTE *)(v7 + 56) = v8[56];
    v60 = (_OWORD *)(v7 + 64);
    v61 = (id *)(v8 + 64);
    v62 = *((_QWORD *)v8 + 23);
    v63 = v58;
    v64 = v59;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v62 >> 1 == 4294967294)
    {
      v65 = *(_OWORD *)v61;
      v66 = *((_OWORD *)v8 + 5);
      v67 = *((_OWORD *)v8 + 7);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v7 + 112) = v67;
      *v60 = v65;
      *(_OWORD *)(v7 + 80) = v66;
      v68 = *((_OWORD *)v8 + 8);
      v69 = *((_OWORD *)v8 + 9);
      v70 = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v7 + 176) = v70;
      *(_OWORD *)(v7 + 128) = v68;
      *(_OWORD *)(v7 + 144) = v69;
      v71 = *((_OWORD *)v8 + 12);
      v72 = *((_OWORD *)v8 + 13);
      v73 = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      *(_OWORD *)(v7 + 208) = v72;
      *(_OWORD *)(v7 + 224) = v73;
      *(_OWORD *)(v7 + 192) = v71;
    }
    else
    {
      v111 = v8[72];
      if (v111 == 255)
      {
        v195 = *v61;
        *(_BYTE *)(v7 + 72) = v8[72];
        *(_QWORD *)v60 = v195;
      }
      else
      {
        v112 = *v61;
        outlined copy of GraphicsImage.Contents(*v61, v8[72]);
        *(_QWORD *)(v7 + 64) = v112;
        *(_BYTE *)(v7 + 72) = v111;
      }
      *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_BYTE *)(v7 + 104) = v8[104];
      v196 = *(_OWORD *)(v8 + 108);
      *(_BYTE *)(v7 + 124) = v8[124];
      *(_OWORD *)(v7 + 108) = v196;
      v197 = *((_OWORD *)v8 + 8);
      v198 = *((_OWORD *)v8 + 9);
      *(_BYTE *)(v7 + 160) = v8[160];
      *(_OWORD *)(v7 + 128) = v197;
      *(_OWORD *)(v7 + 144) = v198;
      *(_BYTE *)(v7 + 161) = v8[161];
      *(_BYTE *)(v7 + 162) = v8[162];
      *(_BYTE *)(v7 + 163) = v8[163];
      v199 = *((_QWORD *)v8 + 23);
      if (v199 >> 1 == 0xFFFFFFFF)
      {
        v200 = *(_OWORD *)(v8 + 184);
        *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
        *(_OWORD *)(v7 + 184) = v200;
      }
      else
      {
        v201 = *((_QWORD *)v8 + 21);
        v202 = *((_QWORD *)v8 + 22);
        v203 = *((_QWORD *)v8 + 24);
        outlined copy of AccessibilityImageLabel(v201, v202, *((_QWORD *)v8 + 23));
        *(_QWORD *)(v7 + 168) = v201;
        *(_QWORD *)(v7 + 176) = v202;
        *(_QWORD *)(v7 + 184) = v199;
        *(_QWORD *)(v7 + 192) = v203;
      }
      *(_QWORD *)(v7 + 200) = *((_QWORD *)v8 + 25);
      *(_QWORD *)(v7 + 208) = *((_QWORD *)v8 + 26);
      *(_BYTE *)(v7 + 216) = v8[216];
      *(_BYTE *)(v7 + 217) = v8[217];
      v204 = *((_DWORD *)v8 + 55);
      *(_BYTE *)(v7 + 224) = v8[224];
      *(_DWORD *)(v7 + 220) = v204;
      v205 = (void *)*((_QWORD *)v8 + 29);
      *(_QWORD *)(v7 + 232) = v205;
      *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
      *(_BYTE *)(v7 + 242) = v8[242];
      swift_unknownObjectRetain();
      swift_retain();
      v206 = v205;
    }
    if (*((_QWORD *)v8 + 32))
    {
      *(_QWORD *)(v7 + 248) = *((_QWORD *)v8 + 31);
      *(_QWORD *)(v7 + 256) = *((_QWORD *)v8 + 32);
      v207 = (void *)*((_QWORD *)v8 + 33);
      swift_bridgeObjectRetain();
      if ((unint64_t)v207 >= 2)
        v208 = v207;
      *(_QWORD *)(v7 + 264) = v207;
      v209 = *((_DWORD *)v8 + 68);
      *(_BYTE *)(v7 + 276) = v8[276];
      *(_DWORD *)(v7 + 272) = v209;
      *(_BYTE *)(v7 + 277) = v8[277];
      *(_BYTE *)(v7 + 278) = v8[278];
      *(_QWORD *)(v7 + 280) = *((_QWORD *)v8 + 35);
      *(_QWORD *)(v7 + 288) = *((_QWORD *)v8 + 36);
      swift_retain();
      swift_retain();
    }
    else
    {
      v210 = *(_OWORD *)(v8 + 248);
      v211 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v211;
      *(_OWORD *)(v7 + 248) = v210;
    }
    v212 = *((_QWORD *)v8 + 41);
    if (v212 >> 2 == 0xFFFFFFFF)
    {
      v213 = *(_OWORD *)(v8 + 296);
      v214 = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 328) = v214;
      *(_OWORD *)(v7 + 296) = v213;
      v215 = *(_OWORD *)(v8 + 344);
      v216 = *(_OWORD *)(v8 + 360);
      v217 = *(_OWORD *)(v8 + 376);
      *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
      *(_OWORD *)(v7 + 360) = v216;
      *(_OWORD *)(v7 + 376) = v217;
      *(_OWORD *)(v7 + 344) = v215;
    }
    else
    {
      v218 = (void *)*((_QWORD *)v8 + 37);
      v219 = *((_QWORD *)v8 + 38);
      v220 = *((_QWORD *)v8 + 40);
      v221 = *((_QWORD *)v8 + 42);
      v222 = *((_QWORD *)v8 + 43);
      v223 = *((_QWORD *)v8 + 44);
      v378 = *((_QWORD *)v8 + 39);
      v379 = *((_QWORD *)v8 + 45);
      v382 = *((_QWORD *)v8 + 46);
      v387 = *((_QWORD *)v8 + 47);
      v399 = (void *)*((_QWORD *)v8 + 48);
      __dstf = (void *)*((_QWORD *)v8 + 49);
      outlined copy of PlatformItemList.Item.SystemItem(v218, v219, v378, v220, v212, v221, v222, v223, v379, v382, v387, (char)v399, (uint64_t)__dstf);
      *(_QWORD *)(v7 + 296) = v218;
      *(_QWORD *)(v7 + 304) = v219;
      *(_QWORD *)(v7 + 312) = v378;
      *(_QWORD *)(v7 + 320) = v220;
      *(_QWORD *)(v7 + 328) = v212;
      *(_QWORD *)(v7 + 336) = v221;
      *(_QWORD *)(v7 + 344) = v222;
      *(_QWORD *)(v7 + 352) = v223;
      *(_QWORD *)(v7 + 360) = v379;
      *(_QWORD *)(v7 + 368) = v382;
      *(_QWORD *)(v7 + 376) = v387;
      *(_QWORD *)(v7 + 384) = v399;
      *(_QWORD *)(v7 + 392) = __dstf;
    }
    if (*((_QWORD *)v8 + 51) == 1)
    {
      *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
      v224 = *((_OWORD *)v8 + 26);
      v225 = *((_OWORD *)v8 + 27);
      v226 = *((_OWORD *)v8 + 28);
      *(_BYTE *)(v7 + 464) = v8[464];
      *(_OWORD *)(v7 + 432) = v225;
      *(_OWORD *)(v7 + 448) = v226;
      *(_OWORD *)(v7 + 416) = v224;
    }
    else
    {
      *(_BYTE *)(v7 + 400) = v8[400];
      *(_BYTE *)(v7 + 401) = v8[401];
      *(_BYTE *)(v7 + 402) = v8[402];
      *(_BYTE *)(v7 + 403) = v8[403];
      *(_BYTE *)(v7 + 404) = v8[404];
      v227 = *((_QWORD *)v8 + 51);
      if (v227)
      {
        v228 = *((_QWORD *)v8 + 52);
        *(_QWORD *)(v7 + 408) = v227;
        *(_QWORD *)(v7 + 416) = v228;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
      }
      v233 = *((_QWORD *)v8 + 53);
      if (v233)
      {
        v234 = *((_QWORD *)v8 + 54);
        *(_QWORD *)(v7 + 424) = v233;
        *(_QWORD *)(v7 + 432) = v234;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
      }
      v237 = *((_QWORD *)v8 + 55);
      if (v237)
      {
        v238 = *((_QWORD *)v8 + 56);
        *(_QWORD *)(v7 + 440) = v237;
        *(_QWORD *)(v7 + 448) = v238;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
      }
      *(_QWORD *)(v7 + 456) = *((_QWORD *)v8 + 57);
      *(_BYTE *)(v7 + 464) = v8[464];
    }
    *(_QWORD *)(v7 + 472) = *((_QWORD *)v8 + 59);
    *(_QWORD *)(v7 + 480) = *((_QWORD *)v8 + 60);
    *(_QWORD *)(v7 + 488) = *((_QWORD *)v8 + 61);
    *(_BYTE *)(v7 + 496) = v8[496];
    v248 = *((_QWORD *)v8 + 63);
    swift_bridgeObjectRetain();
    if (v248)
    {
      v249 = *((_QWORD *)v8 + 64);
      *(_QWORD *)(v7 + 504) = v248;
      *(_QWORD *)(v7 + 512) = v249;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
    }
    *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
    v250 = *((_QWORD *)v8 + 66);
    if (v250)
    {
      *(_QWORD *)(v7 + 528) = v250;
      *(_QWORD *)(v7 + 536) = *((_QWORD *)v8 + 67);
      *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v251 = *((_OWORD *)v8 + 33);
      *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
      *(_OWORD *)(v7 + 528) = v251;
    }
    v252 = *((_QWORD *)v8 + 69);
    if (v252 == 1)
    {
      v253 = (_OWORD *)(v7 + 552);
      v254 = *(_OWORD *)(v8 + 552);
      *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
    }
    else
    {
      *(_QWORD *)(v7 + 552) = v252;
      v255 = *((_QWORD *)v8 + 70);
      swift_retain();
      if (v255)
      {
        v256 = *((_QWORD *)v8 + 71);
        *(_QWORD *)(v7 + 560) = v255;
        *(_QWORD *)(v7 + 568) = v256;
        swift_retain();
LABEL_149:
        v278 = (void *)*((_QWORD *)v8 + 72);
        *(_QWORD *)(v7 + 576) = v278;
        *(_QWORD *)(v7 + 584) = *((_QWORD *)v8 + 73);
        *(_QWORD *)(v7 + 592) = *((_QWORD *)v8 + 74);
        *(_QWORD *)(v7 + 600) = *((_QWORD *)v8 + 75);
        *(_QWORD *)(v7 + 608) = *((_QWORD *)v8 + 76);
        *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
        *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
        *(_BYTE *)(v7 + 632) = v8[632];
        *(_BYTE *)(v7 + 633) = v8[633];
        *(_BYTE *)(v7 + 634) = v8[634];
        v279 = v413[28];
        __dstc = (char *)(v7 + v279);
        v280 = &v8[v279];
        v281 = type metadata accessor for CommandOperation();
        v388 = *(_QWORD *)(v281 - 8);
        v401 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v388 + 48);
        v282 = v278;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v401(v280, 1, v281))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(__dstc, v280, *(_QWORD *)(*(_QWORD *)(v283 - 8) + 64));
          a3 = v431;
          v4 = v435;
          v9 = v428;
          v284 = v413;
          v10 = v423;
          v285 = v390;
        }
        else
        {
          *__dstc = *v280;
          v286 = *(int *)(v281 + 20);
          v287 = v280;
          v383 = v280;
          v288 = &__dstc[v286];
          v289 = &v287[v286];
          v290 = *(_QWORD *)&v287[v286];
          v291 = *(_QWORD *)&v287[v286 + 8];
          v292 = v287[v286 + 16];
          outlined copy of Text.Storage(v290, v291, v292);
          *(_QWORD *)v288 = v290;
          *((_QWORD *)v288 + 1) = v291;
          v288[16] = v292;
          *((_QWORD *)v288 + 3) = *((_QWORD *)v289 + 3);
          v293 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v294 = &v288[v293];
          v295 = &v289[v293];
          v296 = type metadata accessor for UUID();
          v297 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v296 - 8) + 16);
          swift_bridgeObjectRetain();
          v297(v294, v295, v296);
          v298 = *(int *)(v281 + 24);
          v299 = &__dstc[v298];
          v300 = &v383[v298];
          if (*(_QWORD *)v300)
          {
            v301 = *((_QWORD *)v300 + 1);
            *(_QWORD *)v299 = *(_QWORD *)v300;
            *((_QWORD *)v299 + 1) = v301;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v299 = *(_OWORD *)v300;
          }
          a3 = v431;
          v4 = v435;
          v9 = v428;
          v284 = v413;
          v285 = v390;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v388 + 56))(__dstc, 0, 1, v281);
          v10 = v423;
        }
        *(_BYTE *)(v7 + v284[29]) = v8[v284[29]];
        *(_BYTE *)(v7 + v284[30]) = v8[v284[30]];
        *(_BYTE *)(v7 + v284[31]) = v8[v284[31]];
        *(_BYTE *)(v7 + v284[32]) = v8[v284[32]];
        *(_QWORD *)(v7 + v284[33]) = *(_QWORD *)&v8[v284[33]];
        v302 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v285 + 56);
        swift_retain();
        v302(v7, 0, 1, v284);
        goto LABEL_159;
      }
      v253 = (_OWORD *)(v7 + 560);
      v254 = *((_OWORD *)v8 + 35);
    }
    *v253 = v254;
    goto LABEL_149;
  }
  if (v13)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for DialogActionContext.CancelType);
LABEL_6:
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_160;
  }
  if (v5 == v4)
    goto LABEL_160;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for DialogActionContext.CancelType);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v55 = type metadata accessor for PlatformItemList.Item();
    v56 = *(unsigned int (***)(_QWORD, uint64_t, uint64_t))(v55 - 8);
    if (((unsigned int (**)(char *, uint64_t, uint64_t))v56)[6](v8, 1, v55))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
LABEL_205:
      swift_storeEnumTagMultiPayload();
      goto LABEL_160;
    }
    __dsta = v56;
    v424 = (int *)v55;
    v432 = a3;
    v436 = v4;
    v145 = *(void **)v8;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v146 = (void *)*((_QWORD *)v8 + 1);
    *(_QWORD *)(v7 + 8) = v146;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
    *(_BYTE *)(v7 + 32) = v8[32];
    *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
    *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
    *(_BYTE *)(v7 + 56) = v8[56];
    v147 = (_OWORD *)(v7 + 64);
    v148 = (id *)(v8 + 64);
    v149 = *((_QWORD *)v8 + 23);
    v150 = v145;
    v151 = v146;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v149 >> 1 == 4294967294)
    {
      v152 = *(_OWORD *)v148;
      v153 = *((_OWORD *)v8 + 5);
      v154 = *((_OWORD *)v8 + 7);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v7 + 112) = v154;
      *v147 = v152;
      *(_OWORD *)(v7 + 80) = v153;
      v155 = *((_OWORD *)v8 + 8);
      v156 = *((_OWORD *)v8 + 9);
      v157 = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v7 + 176) = v157;
      *(_OWORD *)(v7 + 128) = v155;
      *(_OWORD *)(v7 + 144) = v156;
      v158 = *((_OWORD *)v8 + 12);
      v159 = *((_OWORD *)v8 + 13);
      v160 = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      *(_OWORD *)(v7 + 208) = v159;
      *(_OWORD *)(v7 + 224) = v160;
      *(_OWORD *)(v7 + 192) = v158;
    }
    else
    {
      v229 = v8[72];
      if (v229 == 255)
      {
        v308 = *v148;
        *(_BYTE *)(v7 + 72) = v8[72];
        *(_QWORD *)v147 = v308;
      }
      else
      {
        v230 = *v148;
        outlined copy of GraphicsImage.Contents(*v148, v8[72]);
        *(_QWORD *)(v7 + 64) = v230;
        *(_BYTE *)(v7 + 72) = v229;
      }
      *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
      *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
      *(_BYTE *)(v7 + 104) = v8[104];
      v309 = *(_OWORD *)(v8 + 108);
      *(_BYTE *)(v7 + 124) = v8[124];
      *(_OWORD *)(v7 + 108) = v309;
      v310 = *((_OWORD *)v8 + 8);
      v311 = *((_OWORD *)v8 + 9);
      *(_BYTE *)(v7 + 160) = v8[160];
      *(_OWORD *)(v7 + 128) = v310;
      *(_OWORD *)(v7 + 144) = v311;
      *(_BYTE *)(v7 + 161) = v8[161];
      *(_BYTE *)(v7 + 162) = v8[162];
      *(_BYTE *)(v7 + 163) = v8[163];
      v312 = *((_QWORD *)v8 + 23);
      if (v312 >> 1 == 0xFFFFFFFF)
      {
        v313 = *(_OWORD *)(v8 + 184);
        *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
        *(_OWORD *)(v7 + 184) = v313;
      }
      else
      {
        v314 = *((_QWORD *)v8 + 21);
        v315 = *((_QWORD *)v8 + 22);
        v316 = *((_QWORD *)v8 + 24);
        outlined copy of AccessibilityImageLabel(v314, v315, *((_QWORD *)v8 + 23));
        *(_QWORD *)(v7 + 168) = v314;
        *(_QWORD *)(v7 + 176) = v315;
        *(_QWORD *)(v7 + 184) = v312;
        *(_QWORD *)(v7 + 192) = v316;
      }
      *(_QWORD *)(v7 + 200) = *((_QWORD *)v8 + 25);
      *(_QWORD *)(v7 + 208) = *((_QWORD *)v8 + 26);
      *(_BYTE *)(v7 + 216) = v8[216];
      *(_BYTE *)(v7 + 217) = v8[217];
      v317 = *((_DWORD *)v8 + 55);
      *(_BYTE *)(v7 + 224) = v8[224];
      *(_DWORD *)(v7 + 220) = v317;
      v318 = (void *)*((_QWORD *)v8 + 29);
      *(_QWORD *)(v7 + 232) = v318;
      *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
      *(_BYTE *)(v7 + 242) = v8[242];
      swift_unknownObjectRetain();
      swift_retain();
      v319 = v318;
    }
    if (*((_QWORD *)v8 + 32))
    {
      *(_QWORD *)(v7 + 248) = *((_QWORD *)v8 + 31);
      *(_QWORD *)(v7 + 256) = *((_QWORD *)v8 + 32);
      v320 = (void *)*((_QWORD *)v8 + 33);
      swift_bridgeObjectRetain();
      if ((unint64_t)v320 >= 2)
        v321 = v320;
      *(_QWORD *)(v7 + 264) = v320;
      v322 = *((_DWORD *)v8 + 68);
      *(_BYTE *)(v7 + 276) = v8[276];
      *(_DWORD *)(v7 + 272) = v322;
      *(_BYTE *)(v7 + 277) = v8[277];
      *(_BYTE *)(v7 + 278) = v8[278];
      *(_QWORD *)(v7 + 280) = *((_QWORD *)v8 + 35);
      *(_QWORD *)(v7 + 288) = *((_QWORD *)v8 + 36);
      swift_retain();
      swift_retain();
    }
    else
    {
      v323 = *(_OWORD *)(v8 + 248);
      v324 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v324;
      *(_OWORD *)(v7 + 248) = v323;
    }
    v325 = *((_QWORD *)v8 + 41);
    if (v325 >> 2 == 0xFFFFFFFF)
    {
      v326 = *(_OWORD *)(v8 + 296);
      v327 = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 328) = v327;
      *(_OWORD *)(v7 + 296) = v326;
      v328 = *(_OWORD *)(v8 + 344);
      v329 = *(_OWORD *)(v8 + 360);
      v330 = *(_OWORD *)(v8 + 376);
      *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
      *(_OWORD *)(v7 + 360) = v329;
      *(_OWORD *)(v7 + 376) = v330;
      *(_OWORD *)(v7 + 344) = v328;
    }
    else
    {
      v331 = (void *)*((_QWORD *)v8 + 37);
      v333 = *((_QWORD *)v8 + 39);
      v332 = *((_QWORD *)v8 + 40);
      v334 = *((_QWORD *)v8 + 42);
      v335 = *((_QWORD *)v8 + 43);
      v336 = *((_QWORD *)v8 + 44);
      v380 = *((_QWORD *)v8 + 38);
      v384 = *((_QWORD *)v8 + 45);
      v389 = *((_QWORD *)v8 + 46);
      v394 = *((_QWORD *)v8 + 47);
      v402 = (void *)*((_QWORD *)v8 + 48);
      v420 = (void *)*((_QWORD *)v8 + 49);
      outlined copy of PlatformItemList.Item.SystemItem(v331, v380, v333, v332, v325, v334, v335, v336, v384, v389, v394, (char)v402, (uint64_t)v420);
      *(_QWORD *)(v7 + 296) = v331;
      *(_QWORD *)(v7 + 304) = v380;
      *(_QWORD *)(v7 + 312) = v333;
      *(_QWORD *)(v7 + 320) = v332;
      *(_QWORD *)(v7 + 328) = v325;
      *(_QWORD *)(v7 + 336) = v334;
      *(_QWORD *)(v7 + 344) = v335;
      *(_QWORD *)(v7 + 352) = v336;
      *(_QWORD *)(v7 + 360) = v384;
      *(_QWORD *)(v7 + 368) = v389;
      *(_QWORD *)(v7 + 376) = v394;
      *(_QWORD *)(v7 + 384) = v402;
      *(_QWORD *)(v7 + 392) = v420;
    }
    if (*((_QWORD *)v8 + 51) == 1)
    {
      *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
      v337 = *((_OWORD *)v8 + 26);
      v338 = *((_OWORD *)v8 + 27);
      v339 = *((_OWORD *)v8 + 28);
      *(_BYTE *)(v7 + 464) = v8[464];
      *(_OWORD *)(v7 + 432) = v338;
      *(_OWORD *)(v7 + 448) = v339;
      *(_OWORD *)(v7 + 416) = v337;
    }
    else
    {
      *(_BYTE *)(v7 + 400) = v8[400];
      *(_BYTE *)(v7 + 401) = v8[401];
      *(_BYTE *)(v7 + 402) = v8[402];
      *(_BYTE *)(v7 + 403) = v8[403];
      *(_BYTE *)(v7 + 404) = v8[404];
      v340 = *((_QWORD *)v8 + 51);
      if (v340)
      {
        v341 = *((_QWORD *)v8 + 52);
        *(_QWORD *)(v7 + 408) = v340;
        *(_QWORD *)(v7 + 416) = v341;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
      }
      v342 = *((_QWORD *)v8 + 53);
      if (v342)
      {
        v343 = *((_QWORD *)v8 + 54);
        *(_QWORD *)(v7 + 424) = v342;
        *(_QWORD *)(v7 + 432) = v343;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
      }
      v344 = *((_QWORD *)v8 + 55);
      if (v344)
      {
        v345 = *((_QWORD *)v8 + 56);
        *(_QWORD *)(v7 + 440) = v344;
        *(_QWORD *)(v7 + 448) = v345;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
      }
      *(_QWORD *)(v7 + 456) = *((_QWORD *)v8 + 57);
      *(_BYTE *)(v7 + 464) = v8[464];
    }
    *(_QWORD *)(v7 + 472) = *((_QWORD *)v8 + 59);
    *(_QWORD *)(v7 + 480) = *((_QWORD *)v8 + 60);
    *(_QWORD *)(v7 + 488) = *((_QWORD *)v8 + 61);
    *(_BYTE *)(v7 + 496) = v8[496];
    v346 = *((_QWORD *)v8 + 63);
    swift_bridgeObjectRetain();
    if (v346)
    {
      v347 = *((_QWORD *)v8 + 64);
      *(_QWORD *)(v7 + 504) = v346;
      *(_QWORD *)(v7 + 512) = v347;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
    }
    *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
    v348 = *((_QWORD *)v8 + 66);
    if (v348)
    {
      *(_QWORD *)(v7 + 528) = v348;
      *(_QWORD *)(v7 + 536) = *((_QWORD *)v8 + 67);
      *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      v349 = *((_OWORD *)v8 + 33);
      *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
      *(_OWORD *)(v7 + 528) = v349;
    }
    v350 = *((_QWORD *)v8 + 69);
    if (v350 == 1)
    {
      v351 = (_OWORD *)(v7 + 552);
      v352 = *(_OWORD *)(v8 + 552);
      *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
    }
    else
    {
      *(_QWORD *)(v7 + 552) = v350;
      v353 = *((_QWORD *)v8 + 70);
      swift_retain();
      if (v353)
      {
        v354 = *((_QWORD *)v8 + 71);
        *(_QWORD *)(v7 + 560) = v353;
        *(_QWORD *)(v7 + 568) = v354;
        swift_retain();
LABEL_198:
        v355 = (void *)*((_QWORD *)v8 + 72);
        *(_QWORD *)(v7 + 576) = v355;
        *(_QWORD *)(v7 + 584) = *((_QWORD *)v8 + 73);
        *(_QWORD *)(v7 + 592) = *((_QWORD *)v8 + 74);
        *(_QWORD *)(v7 + 600) = *((_QWORD *)v8 + 75);
        *(_QWORD *)(v7 + 608) = *((_QWORD *)v8 + 76);
        *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
        *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
        *(_BYTE *)(v7 + 632) = v8[632];
        *(_BYTE *)(v7 + 633) = v8[633];
        *(_BYTE *)(v7 + 634) = v8[634];
        v356 = v424[28];
        v421 = (char *)(v7 + v356);
        v357 = &v8[v356];
        v358 = type metadata accessor for CommandOperation();
        v395 = *(_QWORD *)(v358 - 8);
        v403 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v395 + 48);
        v359 = v355;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v403(v357, 1, v358))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v421, v357, *(_QWORD *)(*(_QWORD *)(v360 - 8) + 64));
          a3 = v432;
          v4 = v436;
          v361 = v424;
        }
        else
        {
          *v421 = *v357;
          v362 = *(int *)(v358 + 20);
          v404 = (int *)v358;
          v363 = &v421[v362];
          v364 = &v357[v362];
          v365 = *(_QWORD *)&v357[v362];
          v366 = *(_QWORD *)&v357[v362 + 8];
          v367 = v357[v362 + 16];
          outlined copy of Text.Storage(*(_QWORD *)v364, *((_QWORD *)v364 + 1), v364[16]);
          *(_QWORD *)v363 = v365;
          *((_QWORD *)v363 + 1) = v366;
          v363[16] = v367;
          *((_QWORD *)v363 + 3) = *((_QWORD *)v364 + 3);
          v368 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v369 = &v363[v368];
          v370 = &v364[v368];
          v371 = type metadata accessor for UUID();
          v372 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v371 - 8) + 16);
          swift_bridgeObjectRetain();
          v372(v369, v370, v371);
          v373 = v404[6];
          v374 = &v421[v373];
          v375 = &v357[v373];
          if (*(_QWORD *)v375)
          {
            v376 = *((_QWORD *)v375 + 1);
            *(_QWORD *)v374 = *(_QWORD *)v375;
            *((_QWORD *)v374 + 1) = v376;
            swift_retain();
          }
          else
          {
            *(_OWORD *)v374 = *(_OWORD *)v375;
          }
          a3 = v432;
          v4 = v436;
          v361 = v424;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v395 + 56))(v421, 0, 1, v404);
        }
        *(_BYTE *)(v7 + v361[29]) = v8[v361[29]];
        *(_BYTE *)(v7 + v361[30]) = v8[v361[30]];
        *(_BYTE *)(v7 + v361[31]) = v8[v361[31]];
        *(_BYTE *)(v7 + v361[32]) = v8[v361[32]];
        *(_QWORD *)(v7 + v361[33]) = *(_QWORD *)&v8[v361[33]];
        v377 = (void (*)(uint64_t, _QWORD, uint64_t, int *))__dsta[7];
        swift_retain();
        v377(v7, 0, 1, v361);
        goto LABEL_205;
      }
      v351 = (_OWORD *)(v7 + 560);
      v352 = *((_OWORD *)v8 + 35);
    }
    *v351 = v352;
    goto LABEL_198;
  }
  v430 = a3;
  v434 = v4;
  v34 = *(void **)v8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v35 = (void *)*((_QWORD *)v8 + 1);
  *(_QWORD *)(v7 + 8) = v35;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(v7 + 24) = *((_QWORD *)v8 + 3);
  *(_BYTE *)(v7 + 32) = v8[32];
  *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
  *(_QWORD *)(v7 + 48) = *((_QWORD *)v8 + 6);
  *(_BYTE *)(v7 + 56) = v8[56];
  v36 = (_OWORD *)(v7 + 64);
  v37 = (id *)(v8 + 64);
  v38 = *((_QWORD *)v8 + 23);
  v39 = v34;
  v40 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v38 >> 1 == 4294967294)
  {
    v41 = *(_OWORD *)v37;
    v42 = *((_OWORD *)v8 + 5);
    v43 = *((_OWORD *)v8 + 7);
    *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
    *(_OWORD *)(v7 + 112) = v43;
    *v36 = v41;
    *(_OWORD *)(v7 + 80) = v42;
    v44 = *((_OWORD *)v8 + 8);
    v45 = *((_OWORD *)v8 + 9);
    v46 = *((_OWORD *)v8 + 11);
    *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
    *(_OWORD *)(v7 + 176) = v46;
    *(_OWORD *)(v7 + 128) = v44;
    *(_OWORD *)(v7 + 144) = v45;
    v47 = *((_OWORD *)v8 + 12);
    v48 = *((_OWORD *)v8 + 13);
    v49 = *((_OWORD *)v8 + 14);
    *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
    *(_OWORD *)(v7 + 208) = v48;
    *(_OWORD *)(v7 + 224) = v49;
    *(_OWORD *)(v7 + 192) = v47;
  }
  else
  {
    v74 = v8[72];
    if (v74 == 255)
    {
      v161 = *v37;
      *(_BYTE *)(v7 + 72) = v8[72];
      *(_QWORD *)v36 = v161;
    }
    else
    {
      v75 = *v37;
      outlined copy of GraphicsImage.Contents(*v37, v8[72]);
      *(_QWORD *)(v7 + 64) = v75;
      *(_BYTE *)(v7 + 72) = v74;
    }
    *(_QWORD *)(v7 + 80) = *((_QWORD *)v8 + 10);
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(v8 + 88);
    *(_BYTE *)(v7 + 104) = v8[104];
    v162 = *(_OWORD *)(v8 + 108);
    *(_BYTE *)(v7 + 124) = v8[124];
    *(_OWORD *)(v7 + 108) = v162;
    v163 = *((_OWORD *)v8 + 8);
    v164 = *((_OWORD *)v8 + 9);
    *(_BYTE *)(v7 + 160) = v8[160];
    *(_OWORD *)(v7 + 128) = v163;
    *(_OWORD *)(v7 + 144) = v164;
    *(_BYTE *)(v7 + 161) = v8[161];
    *(_BYTE *)(v7 + 162) = v8[162];
    *(_BYTE *)(v7 + 163) = v8[163];
    v165 = *((_QWORD *)v8 + 23);
    if (v165 >> 1 == 0xFFFFFFFF)
    {
      v166 = *(_OWORD *)(v8 + 184);
      *(_OWORD *)(v7 + 168) = *(_OWORD *)(v8 + 168);
      *(_OWORD *)(v7 + 184) = v166;
    }
    else
    {
      v167 = *((_QWORD *)v8 + 21);
      v168 = *((_QWORD *)v8 + 22);
      v169 = *((_QWORD *)v8 + 24);
      outlined copy of AccessibilityImageLabel(v167, v168, *((_QWORD *)v8 + 23));
      *(_QWORD *)(v7 + 168) = v167;
      *(_QWORD *)(v7 + 176) = v168;
      *(_QWORD *)(v7 + 184) = v165;
      *(_QWORD *)(v7 + 192) = v169;
    }
    *(_QWORD *)(v7 + 200) = *((_QWORD *)v8 + 25);
    *(_QWORD *)(v7 + 208) = *((_QWORD *)v8 + 26);
    *(_BYTE *)(v7 + 216) = v8[216];
    *(_BYTE *)(v7 + 217) = v8[217];
    v170 = *((_DWORD *)v8 + 55);
    *(_BYTE *)(v7 + 224) = v8[224];
    *(_DWORD *)(v7 + 220) = v170;
    v171 = (void *)*((_QWORD *)v8 + 29);
    *(_QWORD *)(v7 + 232) = v171;
    *(_WORD *)(v7 + 240) = *((_WORD *)v8 + 120);
    *(_BYTE *)(v7 + 242) = v8[242];
    swift_unknownObjectRetain();
    swift_retain();
    v172 = v171;
  }
  if (*((_QWORD *)v8 + 32))
  {
    *(_QWORD *)(v7 + 248) = *((_QWORD *)v8 + 31);
    *(_QWORD *)(v7 + 256) = *((_QWORD *)v8 + 32);
    v173 = (void *)*((_QWORD *)v8 + 33);
    swift_bridgeObjectRetain();
    if ((unint64_t)v173 >= 2)
      v174 = v173;
    *(_QWORD *)(v7 + 264) = v173;
    v175 = *((_DWORD *)v8 + 68);
    *(_BYTE *)(v7 + 276) = v8[276];
    *(_DWORD *)(v7 + 272) = v175;
    *(_BYTE *)(v7 + 277) = v8[277];
    *(_BYTE *)(v7 + 278) = v8[278];
    *(_QWORD *)(v7 + 280) = *((_QWORD *)v8 + 35);
    *(_QWORD *)(v7 + 288) = *((_QWORD *)v8 + 36);
    swift_retain();
    swift_retain();
  }
  else
  {
    v176 = *(_OWORD *)(v8 + 248);
    v177 = *(_OWORD *)(v8 + 280);
    *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
    *(_OWORD *)(v7 + 280) = v177;
    *(_OWORD *)(v7 + 248) = v176;
  }
  v178 = *((_QWORD *)v8 + 41);
  if (v178 >> 2 == 0xFFFFFFFF)
  {
    v179 = *(_OWORD *)(v8 + 296);
    v180 = *(_OWORD *)(v8 + 328);
    *(_OWORD *)(v7 + 312) = *(_OWORD *)(v8 + 312);
    *(_OWORD *)(v7 + 328) = v180;
    *(_OWORD *)(v7 + 296) = v179;
    v181 = *(_OWORD *)(v8 + 344);
    v182 = *(_OWORD *)(v8 + 360);
    v183 = *(_OWORD *)(v8 + 376);
    *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
    *(_OWORD *)(v7 + 360) = v182;
    *(_OWORD *)(v7 + 376) = v183;
    *(_OWORD *)(v7 + 344) = v181;
  }
  else
  {
    v184 = (void *)*((_QWORD *)v8 + 37);
    v185 = *((_QWORD *)v8 + 38);
    v186 = *((_QWORD *)v8 + 40);
    v187 = *((_QWORD *)v8 + 42);
    v188 = *((_QWORD *)v8 + 43);
    v189 = *((_QWORD *)v8 + 44);
    v386 = *((_QWORD *)v8 + 39);
    v392 = *((_QWORD *)v8 + 45);
    v398 = (void *)*((_QWORD *)v8 + 46);
    __dste = (void *)*((_QWORD *)v8 + 47);
    v417 = (void *)*((_QWORD *)v8 + 48);
    v425 = *((_QWORD *)v8 + 49);
    outlined copy of PlatformItemList.Item.SystemItem(v184, v185, v386, v186, v178, v187, v188, v189, v392, (uint64_t)v398, (uint64_t)__dste, (char)v417, v425);
    *(_QWORD *)(v7 + 296) = v184;
    *(_QWORD *)(v7 + 304) = v185;
    *(_QWORD *)(v7 + 312) = v386;
    *(_QWORD *)(v7 + 320) = v186;
    *(_QWORD *)(v7 + 328) = v178;
    *(_QWORD *)(v7 + 336) = v187;
    *(_QWORD *)(v7 + 344) = v188;
    *(_QWORD *)(v7 + 352) = v189;
    *(_QWORD *)(v7 + 360) = v392;
    *(_QWORD *)(v7 + 368) = v398;
    *(_QWORD *)(v7 + 376) = __dste;
    *(_QWORD *)(v7 + 384) = v417;
    *(_QWORD *)(v7 + 392) = v425;
  }
  if (*((_QWORD *)v8 + 51) == 1)
  {
    *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
    v190 = *((_OWORD *)v8 + 26);
    v191 = *((_OWORD *)v8 + 27);
    v192 = *((_OWORD *)v8 + 28);
    *(_BYTE *)(v7 + 464) = v8[464];
    *(_OWORD *)(v7 + 432) = v191;
    *(_OWORD *)(v7 + 448) = v192;
    *(_OWORD *)(v7 + 416) = v190;
  }
  else
  {
    *(_BYTE *)(v7 + 400) = v8[400];
    *(_BYTE *)(v7 + 401) = v8[401];
    *(_BYTE *)(v7 + 402) = v8[402];
    *(_BYTE *)(v7 + 403) = v8[403];
    *(_BYTE *)(v7 + 404) = v8[404];
    v193 = *((_QWORD *)v8 + 51);
    if (v193)
    {
      v194 = *((_QWORD *)v8 + 52);
      *(_QWORD *)(v7 + 408) = v193;
      *(_QWORD *)(v7 + 416) = v194;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 408) = *(_OWORD *)(v8 + 408);
    }
    v231 = *((_QWORD *)v8 + 53);
    if (v231)
    {
      v232 = *((_QWORD *)v8 + 54);
      *(_QWORD *)(v7 + 424) = v231;
      *(_QWORD *)(v7 + 432) = v232;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 424) = *(_OWORD *)(v8 + 424);
    }
    v235 = *((_QWORD *)v8 + 55);
    if (v235)
    {
      v236 = *((_QWORD *)v8 + 56);
      *(_QWORD *)(v7 + 440) = v235;
      *(_QWORD *)(v7 + 448) = v236;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v7 + 440) = *(_OWORD *)(v8 + 440);
    }
    *(_QWORD *)(v7 + 456) = *((_QWORD *)v8 + 57);
    *(_BYTE *)(v7 + 464) = v8[464];
  }
  *(_QWORD *)(v7 + 472) = *((_QWORD *)v8 + 59);
  *(_QWORD *)(v7 + 480) = *((_QWORD *)v8 + 60);
  *(_QWORD *)(v7 + 488) = *((_QWORD *)v8 + 61);
  *(_BYTE *)(v7 + 496) = v8[496];
  v239 = *((_QWORD *)v8 + 63);
  swift_bridgeObjectRetain();
  if (v239)
  {
    v240 = *((_QWORD *)v8 + 64);
    *(_QWORD *)(v7 + 504) = v239;
    *(_QWORD *)(v7 + 512) = v240;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
  }
  *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
  v241 = *((_QWORD *)v8 + 66);
  if (v241)
  {
    *(_QWORD *)(v7 + 528) = v241;
    *(_QWORD *)(v7 + 536) = *((_QWORD *)v8 + 67);
    *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    v242 = *((_OWORD *)v8 + 33);
    *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
    *(_OWORD *)(v7 + 528) = v242;
  }
  v243 = *((_QWORD *)v8 + 69);
  if (v243 == 1)
  {
    v244 = (_OWORD *)(v7 + 552);
    v245 = *(_OWORD *)(v8 + 552);
    *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
LABEL_142:
    *v244 = v245;
    goto LABEL_143;
  }
  *(_QWORD *)(v7 + 552) = v243;
  v246 = *((_QWORD *)v8 + 70);
  swift_retain();
  if (!v246)
  {
    v244 = (_OWORD *)(v7 + 560);
    v245 = *((_OWORD *)v8 + 35);
    goto LABEL_142;
  }
  v247 = *((_QWORD *)v8 + 71);
  *(_QWORD *)(v7 + 560) = v246;
  *(_QWORD *)(v7 + 568) = v247;
  swift_retain();
LABEL_143:
  v257 = (void *)*((_QWORD *)v8 + 72);
  *(_QWORD *)(v7 + 576) = v257;
  *(_QWORD *)(v7 + 584) = *((_QWORD *)v8 + 73);
  *(_QWORD *)(v7 + 592) = *((_QWORD *)v8 + 74);
  *(_QWORD *)(v7 + 600) = *((_QWORD *)v8 + 75);
  *(_QWORD *)(v7 + 608) = *((_QWORD *)v8 + 76);
  *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
  *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
  *(_BYTE *)(v7 + 632) = v8[632];
  *(_BYTE *)(v7 + 633) = v8[633];
  *(_BYTE *)(v7 + 634) = v8[634];
  __dstb = (int *)type metadata accessor for PlatformItemList.Item();
  v258 = __dstb[28];
  v400 = (char *)(v7 + v258);
  v426 = &v8[v258];
  v259 = type metadata accessor for CommandOperation();
  v260 = *(_QWORD *)(v259 - 8);
  v418 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48);
  v261 = v257;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v418(v426, 1, v259))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(v400, v426, *(_QWORD *)(*(_QWORD *)(v262 - 8) + 64));
    a3 = v430;
    v4 = v434;
  }
  else
  {
    v393 = v260;
    *v400 = *v426;
    v263 = *(int *)(v259 + 20);
    v264 = &v400[v263];
    v265 = &v426[v263];
    v266 = *(_QWORD *)&v426[v263];
    v267 = *(_QWORD *)&v426[v263 + 8];
    v419 = (int *)v259;
    v268 = v426[v263 + 16];
    outlined copy of Text.Storage(v266, *((_QWORD *)v265 + 1), v265[16]);
    *(_QWORD *)v264 = v266;
    *((_QWORD *)v264 + 1) = v267;
    v264[16] = v268;
    *((_QWORD *)v264 + 3) = *((_QWORD *)v265 + 3);
    v269 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v270 = &v264[v269];
    v271 = &v265[v269];
    v272 = type metadata accessor for UUID();
    v273 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v272 - 8) + 16);
    swift_bridgeObjectRetain();
    v273(v270, v271, v272);
    v274 = v419[6];
    v275 = &v400[v274];
    v276 = &v426[v274];
    if (*(_QWORD *)v276)
    {
      v277 = *((_QWORD *)v276 + 1);
      *(_QWORD *)v275 = *(_QWORD *)v276;
      *((_QWORD *)v275 + 1) = v277;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v275 = *(_OWORD *)v276;
    }
    a3 = v430;
    v4 = v434;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v393 + 56))(v400, 0, 1, v419);
  }
  *(_BYTE *)(v7 + __dstb[29]) = v8[__dstb[29]];
  *(_BYTE *)(v7 + __dstb[30]) = v8[__dstb[30]];
  *(_BYTE *)(v7 + __dstb[31]) = v8[__dstb[31]];
  *(_BYTE *)(v7 + __dstb[32]) = v8[__dstb[32]];
  *(_QWORD *)(v7 + __dstb[33]) = *(_QWORD *)&v8[__dstb[33]];
  swift_retain();
  swift_storeEnumTagMultiPayload();
LABEL_160:
  *(_QWORD *)((char *)v5 + a3[7]) = *(_QWORD *)((char *)v4 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)v5 + a3[8]) = *(_QWORD *)((char *)v4 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v303 = a3[9];
  v304 = *(void **)((char *)v5 + v303);
  v305 = *(void **)((char *)v4 + v303);
  *(_QWORD *)((char *)v5 + v303) = v305;
  v306 = v305;

  return v5;
}

_OWORD *initializeWithTake for DialogActionContext(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  _BYTE *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _OWORD *v69;
  _BYTE *v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _BYTE *v87;
  void *__dst;
  _BYTE *__dsta;
  uint64_t v90;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for DialogActionContext.CancelType(0);
  v90 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v90 + 48))(v8, 1, v9))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = v8[1];
      *v7 = *v8;
      v7[1] = v11;
      *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
      v12 = *((_QWORD *)v8 + 6);
      *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
      *((_QWORD *)v7 + 6) = v12;
      *((_BYTE *)v7 + 56) = *((_BYTE *)v8 + 56);
      v13 = v8[13];
      v7[12] = v8[12];
      v7[13] = v13;
      v7[14] = v8[14];
      *(_DWORD *)((char *)v7 + 239) = *(_DWORD *)((char *)v8 + 239);
      v14 = v8[9];
      v7[8] = v8[8];
      v7[9] = v14;
      v15 = v8[11];
      v7[10] = v8[10];
      v7[11] = v15;
      v16 = v8[5];
      v7[4] = v8[4];
      v7[5] = v16;
      v17 = v8[7];
      v7[6] = v8[6];
      v7[7] = v17;
      *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
      v18 = *(_OWORD *)((char *)v8 + 280);
      *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
      *(_OWORD *)((char *)v7 + 280) = v18;
      v19 = *(_OWORD *)((char *)v8 + 376);
      *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
      *(_OWORD *)((char *)v7 + 376) = v19;
      *((_QWORD *)v7 + 49) = *((_QWORD *)v8 + 49);
      v20 = *(_OWORD *)((char *)v8 + 312);
      *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
      *(_OWORD *)((char *)v7 + 312) = v20;
      v21 = *(_OWORD *)((char *)v8 + 344);
      *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
      *(_OWORD *)((char *)v7 + 344) = v21;
      v22 = v8[28];
      v7[27] = v8[27];
      v7[28] = v22;
      *((_BYTE *)v7 + 464) = *((_BYTE *)v8 + 464);
      v23 = v8[26];
      v7[25] = v8[25];
      v7[26] = v23;
      *(_OWORD *)((char *)v7 + 472) = *(_OWORD *)((char *)v8 + 472);
      *(_OWORD *)((char *)v7 + 481) = *(_OWORD *)((char *)v8 + 481);
      v24 = *((_QWORD *)v8 + 63);
      if (v24)
      {
        v25 = *((_QWORD *)v8 + 64);
        *((_QWORD *)v7 + 63) = v24;
        *((_QWORD *)v7 + 64) = v25;
      }
      else
      {
        *(_OWORD *)((char *)v7 + 504) = *(_OWORD *)((char *)v8 + 504);
      }
      *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
      v7[33] = v8[33];
      *((_QWORD *)v7 + 68) = *((_QWORD *)v8 + 68);
      *((_QWORD *)v7 + 71) = *((_QWORD *)v8 + 71);
      *(_OWORD *)((char *)v7 + 552) = *(_OWORD *)((char *)v8 + 552);
      *((_QWORD *)v7 + 72) = *((_QWORD *)v8 + 72);
      *(_OWORD *)((char *)v7 + 584) = *(_OWORD *)((char *)v8 + 584);
      *(_OWORD *)((char *)v7 + 600) = *(_OWORD *)((char *)v8 + 600);
      *((_QWORD *)v7 + 77) = *((_QWORD *)v8 + 77);
      *((_QWORD *)v7 + 78) = *((_QWORD *)v8 + 78);
      *((_BYTE *)v7 + 632) = *((_BYTE *)v8 + 632);
      *(_WORD *)((char *)v7 + 633) = *(_WORD *)((char *)v8 + 633);
      v28 = (int *)type metadata accessor for PlatformItemList.Item();
      v29 = v28[28];
      __dsta = (char *)v7 + v29;
      v30 = (char *)v8 + v29;
      v31 = type metadata accessor for CommandOperation();
      v32 = *(_QWORD *)(v31 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(__dsta, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v84 = v32;
        v86 = (void *)v9;
        *__dsta = *v30;
        v49 = *(int *)(v31 + 20);
        v50 = &__dsta[v49];
        v51 = &v30[v49];
        v52 = *(_OWORD *)&v30[v49 + 16];
        *v50 = *(_OWORD *)&v30[v49];
        v50[1] = v52;
        v53 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v54 = (char *)v50 + v53;
        v55 = &v51[v53];
        v56 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        v57 = *(int *)(v31 + 24);
        v58 = &__dsta[v57];
        v59 = (uint64_t *)&v30[v57];
        v60 = *v59;
        if (*v59)
        {
          v61 = v59[1];
          *v58 = v60;
          v58[1] = v61;
        }
        else
        {
          *(_OWORD *)v58 = *(_OWORD *)v59;
        }
        v9 = (uint64_t)v86;
        (*(void (**)(void))(v84 + 56))();
      }
      *((_BYTE *)v7 + v28[29]) = *((_BYTE *)v8 + v28[29]);
      *((_BYTE *)v7 + v28[30]) = *((_BYTE *)v8 + v28[30]);
      *((_BYTE *)v7 + v28[31]) = *((_BYTE *)v8 + v28[31]);
      *((_BYTE *)v7 + v28[32]) = *((_BYTE *)v8 + v28[32]);
      *(_QWORD *)((char *)v7 + v28[33]) = *(_QWORD *)((char *)v8 + v28[33]);
    }
    else
    {
      v26 = (int *)type metadata accessor for PlatformItemList.Item();
      __dst = (void *)*((_QWORD *)v26 - 1);
      if ((*((unsigned int (**)(_OWORD *, uint64_t, int *))__dst + 6))(v8, 1, v26))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v34 = v8[1];
        *v7 = *v8;
        v7[1] = v34;
        *((_BYTE *)v7 + 32) = *((_BYTE *)v8 + 32);
        v35 = *((_QWORD *)v8 + 6);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v8 + 5);
        *((_QWORD *)v7 + 6) = v35;
        *((_BYTE *)v7 + 56) = *((_BYTE *)v8 + 56);
        v36 = v8[13];
        v7[12] = v8[12];
        v7[13] = v36;
        v7[14] = v8[14];
        *(_DWORD *)((char *)v7 + 239) = *(_DWORD *)((char *)v8 + 239);
        v37 = v8[9];
        v7[8] = v8[8];
        v7[9] = v37;
        v38 = v8[11];
        v7[10] = v8[10];
        v7[11] = v38;
        v39 = v8[5];
        v7[4] = v8[4];
        v7[5] = v39;
        v40 = v8[7];
        v7[6] = v8[6];
        v7[7] = v40;
        *(_OWORD *)((char *)v7 + 248) = *(_OWORD *)((char *)v8 + 248);
        v41 = *(_OWORD *)((char *)v8 + 280);
        *(_OWORD *)((char *)v7 + 264) = *(_OWORD *)((char *)v8 + 264);
        *(_OWORD *)((char *)v7 + 280) = v41;
        v42 = *(_OWORD *)((char *)v8 + 376);
        *(_OWORD *)((char *)v7 + 360) = *(_OWORD *)((char *)v8 + 360);
        *(_OWORD *)((char *)v7 + 376) = v42;
        *((_QWORD *)v7 + 49) = *((_QWORD *)v8 + 49);
        v43 = *(_OWORD *)((char *)v8 + 312);
        *(_OWORD *)((char *)v7 + 296) = *(_OWORD *)((char *)v8 + 296);
        *(_OWORD *)((char *)v7 + 312) = v43;
        v44 = *(_OWORD *)((char *)v8 + 344);
        *(_OWORD *)((char *)v7 + 328) = *(_OWORD *)((char *)v8 + 328);
        *(_OWORD *)((char *)v7 + 344) = v44;
        v45 = v8[28];
        v7[27] = v8[27];
        v7[28] = v45;
        *((_BYTE *)v7 + 464) = *((_BYTE *)v8 + 464);
        v46 = v8[26];
        v7[25] = v8[25];
        v7[26] = v46;
        *(_OWORD *)((char *)v7 + 472) = *(_OWORD *)((char *)v8 + 472);
        *(_OWORD *)((char *)v7 + 481) = *(_OWORD *)((char *)v8 + 481);
        v47 = *((_QWORD *)v8 + 63);
        if (v47)
        {
          v48 = *((_QWORD *)v8 + 64);
          *((_QWORD *)v7 + 63) = v47;
          *((_QWORD *)v7 + 64) = v48;
        }
        else
        {
          *(_OWORD *)((char *)v7 + 504) = *(_OWORD *)((char *)v8 + 504);
        }
        *((_WORD *)v7 + 260) = *((_WORD *)v8 + 260);
        v7[33] = v8[33];
        *((_QWORD *)v7 + 68) = *((_QWORD *)v8 + 68);
        *((_QWORD *)v7 + 71) = *((_QWORD *)v8 + 71);
        *(_OWORD *)((char *)v7 + 552) = *(_OWORD *)((char *)v8 + 552);
        *((_QWORD *)v7 + 72) = *((_QWORD *)v8 + 72);
        *(_OWORD *)((char *)v7 + 584) = *(_OWORD *)((char *)v8 + 584);
        *(_OWORD *)((char *)v7 + 600) = *(_OWORD *)((char *)v8 + 600);
        *((_QWORD *)v7 + 77) = *((_QWORD *)v8 + 77);
        *((_QWORD *)v7 + 78) = *((_QWORD *)v8 + 78);
        *((_BYTE *)v7 + 632) = *((_BYTE *)v8 + 632);
        *(_WORD *)((char *)v7 + 633) = *(_WORD *)((char *)v8 + 633);
        v62 = v26[28];
        v87 = (char *)v7 + v62;
        v63 = (char *)v8 + v62;
        v64 = type metadata accessor for CommandOperation();
        v65 = *(_QWORD *)(v64 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v87, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          v83 = v63;
          v85 = v65;
          *v87 = *v63;
          v67 = *(int *)(v64 + 20);
          v68 = v63;
          v69 = &v87[v67];
          v70 = &v68[v67];
          v71 = *(_OWORD *)&v68[v67 + 16];
          *v69 = *(_OWORD *)&v68[v67];
          v69[1] = v71;
          v72 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v73 = (char *)v69 + v72;
          v74 = &v70[v72];
          v75 = type metadata accessor for UUID();
          (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
          v76 = *(int *)(v64 + 24);
          v77 = &v87[v76];
          v78 = (uint64_t *)&v83[v76];
          v79 = *v78;
          if (*v78)
          {
            v80 = v78[1];
            *v77 = v79;
            v77[1] = v80;
          }
          else
          {
            *(_OWORD *)v77 = *(_OWORD *)v78;
          }
          (*(void (**)(void))(v85 + 56))();
        }
        *((_BYTE *)v7 + v26[29]) = *((_BYTE *)v8 + v26[29]);
        *((_BYTE *)v7 + v26[30]) = *((_BYTE *)v8 + v26[30]);
        *((_BYTE *)v7 + v26[31]) = *((_BYTE *)v8 + v26[31]);
        *((_BYTE *)v7 + v26[32]) = *((_BYTE *)v8 + v26[32]);
        *(_QWORD *)((char *)v7 + v26[33]) = *(_QWORD *)((char *)v8 + v26[33]);
        (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__dst + 7))(v7, 0, 1, v26);
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v7, 0, 1, v9);
  }
  v81 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v81) = *(_QWORD *)((char *)a2 + v81);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  return a1;
}

_QWORD *assignWithTake for DialogActionContext(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unsigned int (**v88)(_BYTE *, uint64_t, uint64_t);
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  _QWORD *__src;
  char *__srca;
  void (**__srcb)(void *, _QWORD, uint64_t, uint64_t);
  char *__srcc;
  void (**__dst)(uint64_t, _QWORD, uint64_t, int *);
  char *__dsta;
  void (**__dstb)(uint64_t, _QWORD, uint64_t, int *);
  char *__dstc;
  int *v172;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v172 = a3;
  v6 = a3[6];
  v7 = (uint64_t)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DialogActionContext.CancelType(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v10[6];
  v12 = v11(v7, 1, v9);
  v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (v13)
      goto LABEL_6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v15;
      *(_BYTE *)(v7 + 32) = v8[32];
      v16 = *((_QWORD *)v8 + 6);
      *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
      *(_QWORD *)(v7 + 48) = v16;
      *(_BYTE *)(v7 + 56) = v8[56];
      v17 = *((_OWORD *)v8 + 13);
      *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
      *(_OWORD *)(v7 + 208) = v17;
      *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
      *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
      v18 = *((_OWORD *)v8 + 9);
      *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
      *(_OWORD *)(v7 + 144) = v18;
      v19 = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v7 + 176) = v19;
      v20 = *((_OWORD *)v8 + 5);
      *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
      *(_OWORD *)(v7 + 80) = v20;
      v21 = *((_OWORD *)v8 + 7);
      *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v7 + 112) = v21;
      *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
      v22 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v22;
      v23 = *(_OWORD *)(v8 + 376);
      *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
      *(_OWORD *)(v7 + 376) = v23;
      *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
      v24 = *(_OWORD *)(v8 + 312);
      *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
      *(_OWORD *)(v7 + 312) = v24;
      v25 = *(_OWORD *)(v8 + 344);
      *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
      *(_OWORD *)(v7 + 344) = v25;
      v26 = *((_OWORD *)v8 + 28);
      *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
      *(_OWORD *)(v7 + 448) = v26;
      *(_BYTE *)(v7 + 464) = v8[464];
      v27 = *((_OWORD *)v8 + 26);
      *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
      *(_OWORD *)(v7 + 416) = v27;
      *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
      *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
      v28 = *((_QWORD *)v8 + 63);
      if (v28)
      {
        v29 = *((_QWORD *)v8 + 64);
        *(_QWORD *)(v7 + 504) = v28;
        *(_QWORD *)(v7 + 512) = v29;
      }
      else
      {
        *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
      }
      *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
      *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
      *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
      *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
      *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
      *(_QWORD *)(v7 + 576) = *((_QWORD *)v8 + 72);
      *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
      *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
      *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
      *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
      *(_BYTE *)(v7 + 632) = v8[632];
      *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
      v47 = (int *)type metadata accessor for PlatformItemList.Item();
      v48 = v47[28];
      __dsta = (char *)(v7 + v48);
      v49 = &v8[v48];
      v50 = type metadata accessor for CommandOperation();
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(__dsta, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        v161 = v51;
        __src = v10;
        *__dsta = *v49;
        v70 = *(int *)(v50 + 20);
        v71 = &__dsta[v70];
        v72 = &v49[v70];
        v73 = *(_OWORD *)&v49[v70 + 16];
        *(_OWORD *)v71 = *(_OWORD *)&v49[v70];
        *((_OWORD *)v71 + 1) = v73;
        v74 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v75 = &v71[v74];
        v76 = &v72[v74];
        v77 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32))(v75, v76, v77);
        v78 = *(int *)(v50 + 24);
        v79 = &__dsta[v78];
        v80 = &v49[v78];
        v81 = *(_QWORD *)v80;
        if (*(_QWORD *)v80)
        {
          v82 = *((_QWORD *)v80 + 1);
          *(_QWORD *)v79 = v81;
          *((_QWORD *)v79 + 1) = v82;
        }
        else
        {
          *(_OWORD *)v79 = *(_OWORD *)v80;
        }
        v10 = __src;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v161 + 56))(__dsta, 0, 1, v50);
      }
      *(_BYTE *)(v7 + v47[29]) = v8[v47[29]];
      *(_BYTE *)(v7 + v47[30]) = v8[v47[30]];
      *(_BYTE *)(v7 + v47[31]) = v8[v47[31]];
      *(_BYTE *)(v7 + v47[32]) = v8[v47[32]];
      *(_QWORD *)(v7 + v47[33]) = *(_QWORD *)&v8[v47[33]];
    }
    else
    {
      v45 = type metadata accessor for PlatformItemList.Item();
      __dst = *(void (***)(uint64_t, _QWORD, uint64_t, int *))(v45 - 8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__dst[6])(v8, 1, v45))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        v55 = *((_OWORD *)v8 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v55;
        *(_BYTE *)(v7 + 32) = v8[32];
        v56 = *((_QWORD *)v8 + 6);
        *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
        *(_QWORD *)(v7 + 48) = v56;
        *(_BYTE *)(v7 + 56) = v8[56];
        v57 = *((_OWORD *)v8 + 13);
        *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
        *(_OWORD *)(v7 + 208) = v57;
        *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        v58 = *((_OWORD *)v8 + 9);
        *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
        *(_OWORD *)(v7 + 144) = v58;
        v59 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v59;
        v60 = *((_OWORD *)v8 + 5);
        *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
        *(_OWORD *)(v7 + 80) = v60;
        v61 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v61;
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
        v62 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v62;
        v63 = *(_OWORD *)(v8 + 376);
        *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
        *(_OWORD *)(v7 + 376) = v63;
        *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
        v64 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
        *(_OWORD *)(v7 + 312) = v64;
        v65 = *(_OWORD *)(v8 + 344);
        *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
        *(_OWORD *)(v7 + 344) = v65;
        v66 = *((_OWORD *)v8 + 28);
        *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
        *(_OWORD *)(v7 + 448) = v66;
        *(_BYTE *)(v7 + 464) = v8[464];
        v67 = *((_OWORD *)v8 + 26);
        *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
        *(_OWORD *)(v7 + 416) = v67;
        *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
        *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
        v68 = *((_QWORD *)v8 + 63);
        if (v68)
        {
          v69 = *((_QWORD *)v8 + 64);
          *(_QWORD *)(v7 + 504) = v68;
          *(_QWORD *)(v7 + 512) = v69;
        }
        else
        {
          *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
        }
        *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
        *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
        *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
        *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
        *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
        *(_QWORD *)(v7 + 576) = *((_QWORD *)v8 + 72);
        *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
        *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
        *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
        *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
        *(_BYTE *)(v7 + 632) = v8[632];
        *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
        v159 = (int *)v45;
        v105 = *(int *)(v45 + 112);
        __srca = (char *)(v7 + v105);
        v106 = &v8[v105];
        v107 = type metadata accessor for CommandOperation();
        v108 = *(_QWORD *)(v107 - 8);
        v162 = v106;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(__srca, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
          v110 = v159;
        }
        else
        {
          *__srca = *v106;
          v123 = *(int *)(v107 + 20);
          v124 = &__srca[v123];
          v156 = &v162[v123];
          v125 = *(_OWORD *)&v162[v123 + 16];
          *(_OWORD *)v124 = *(_OWORD *)&v162[v123];
          *((_OWORD *)v124 + 1) = v125;
          v126 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v127 = &v124[v126];
          v157 = &v156[v126];
          v128 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 32))(v127, v157, v128);
          v129 = *(int *)(v107 + 24);
          v130 = &__srca[v129];
          v131 = (uint64_t *)&v162[v129];
          v132 = *v131;
          v133 = v107;
          if (*v131)
          {
            v134 = v131[1];
            *(_QWORD *)v130 = v132;
            *((_QWORD *)v130 + 1) = v134;
          }
          else
          {
            *(_OWORD *)v130 = *(_OWORD *)v131;
          }
          v110 = v159;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(__srca, 0, 1, v133);
        }
        *(_BYTE *)(v7 + v110[29]) = v8[v110[29]];
        *(_BYTE *)(v7 + v110[30]) = v8[v110[30]];
        *(_BYTE *)(v7 + v110[31]) = v8[v110[31]];
        *(_BYTE *)(v7 + v110[32]) = v8[v110[32]];
        *(_QWORD *)(v7 + v110[33]) = *(_QWORD *)&v8[v110[33]];
        __dst[7](v7, 0, 1, v110);
      }
    }
    swift_storeEnumTagMultiPayload();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10[7])(v7, 0, 1, v9);
  }
  else
  {
    if (v13)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for DialogActionContext.CancelType);
LABEL_6:
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
      memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      goto LABEL_50;
    }
    if (a1 != a2)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v7, type metadata accessor for DialogActionContext.CancelType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v30 = *((_OWORD *)v8 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = v30;
        *(_BYTE *)(v7 + 32) = v8[32];
        v31 = *((_QWORD *)v8 + 6);
        *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
        *(_QWORD *)(v7 + 48) = v31;
        *(_BYTE *)(v7 + 56) = v8[56];
        v32 = *((_OWORD *)v8 + 13);
        *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
        *(_OWORD *)(v7 + 208) = v32;
        *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
        *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
        v33 = *((_OWORD *)v8 + 9);
        *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
        *(_OWORD *)(v7 + 144) = v33;
        v34 = *((_OWORD *)v8 + 11);
        *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
        *(_OWORD *)(v7 + 176) = v34;
        v35 = *((_OWORD *)v8 + 5);
        *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
        *(_OWORD *)(v7 + 80) = v35;
        v36 = *((_OWORD *)v8 + 7);
        *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
        *(_OWORD *)(v7 + 112) = v36;
        *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
        v37 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v37;
        v38 = *(_OWORD *)(v8 + 376);
        *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
        *(_OWORD *)(v7 + 376) = v38;
        *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
        v39 = *(_OWORD *)(v8 + 312);
        *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
        *(_OWORD *)(v7 + 312) = v39;
        v40 = *(_OWORD *)(v8 + 344);
        *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
        *(_OWORD *)(v7 + 344) = v40;
        v41 = *((_OWORD *)v8 + 28);
        *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
        *(_OWORD *)(v7 + 448) = v41;
        *(_BYTE *)(v7 + 464) = v8[464];
        v42 = *((_OWORD *)v8 + 26);
        *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
        *(_OWORD *)(v7 + 416) = v42;
        *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
        *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
        v43 = *((_QWORD *)v8 + 63);
        if (v43)
        {
          v44 = *((_QWORD *)v8 + 64);
          *(_QWORD *)(v7 + 504) = v43;
          *(_QWORD *)(v7 + 512) = v44;
        }
        else
        {
          *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
        }
        *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
        *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
        *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
        *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
        *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
        *(_QWORD *)(v7 + 576) = *((_QWORD *)v8 + 72);
        *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
        *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
        *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
        *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
        *(_BYTE *)(v7 + 632) = v8[632];
        *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
        v83 = (int *)type metadata accessor for PlatformItemList.Item();
        v84 = v83[28];
        v85 = (char *)(v7 + v84);
        v86 = &v8[v84];
        v87 = type metadata accessor for CommandOperation();
        v88 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v87 - 8);
        if (v88[6](v86, 1, v87))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
        }
        else
        {
          __srcb = (void (**)(void *, _QWORD, uint64_t, uint64_t))v88;
          __dstc = v85;
          *v85 = *v86;
          v111 = *(int *)(v87 + 20);
          v112 = &v85[v111];
          v113 = &v86[v111];
          v114 = *(_OWORD *)&v86[v111 + 16];
          *(_OWORD *)v112 = *(_OWORD *)&v86[v111];
          *((_OWORD *)v112 + 1) = v114;
          v115 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v163 = &v112[v115];
          v116 = &v113[v115];
          v117 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v163, v116, v117);
          v118 = *(int *)(v87 + 24);
          v119 = &__dstc[v118];
          v120 = &v86[v118];
          v121 = *(_QWORD *)v120;
          if (*(_QWORD *)v120)
          {
            v122 = *((_QWORD *)v120 + 1);
            *(_QWORD *)v119 = v121;
            *((_QWORD *)v119 + 1) = v122;
          }
          else
          {
            *(_OWORD *)v119 = *(_OWORD *)v120;
          }
          __srcb[7](__dstc, 0, 1, v87);
        }
        *(_BYTE *)(v7 + v83[29]) = v8[v83[29]];
        *(_BYTE *)(v7 + v83[30]) = v8[v83[30]];
        *(_BYTE *)(v7 + v83[31]) = v8[v83[31]];
        *(_BYTE *)(v7 + v83[32]) = v8[v83[32]];
        *(_QWORD *)(v7 + v83[33]) = *(_QWORD *)&v8[v83[33]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        v53 = (int *)type metadata accessor for PlatformItemList.Item();
        __dstb = (void (**)(uint64_t, _QWORD, uint64_t, int *))*((_QWORD *)v53 - 1);
        if (((unsigned int (*)(char *, uint64_t, int *))__dstb[6])(v8, 1, v53))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          memcpy((void *)v7, v8, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          v90 = *((_OWORD *)v8 + 1);
          *(_OWORD *)v7 = *(_OWORD *)v8;
          *(_OWORD *)(v7 + 16) = v90;
          *(_BYTE *)(v7 + 32) = v8[32];
          v91 = *((_QWORD *)v8 + 6);
          *(_QWORD *)(v7 + 40) = *((_QWORD *)v8 + 5);
          *(_QWORD *)(v7 + 48) = v91;
          *(_BYTE *)(v7 + 56) = v8[56];
          v92 = *((_OWORD *)v8 + 13);
          *(_OWORD *)(v7 + 192) = *((_OWORD *)v8 + 12);
          *(_OWORD *)(v7 + 208) = v92;
          *(_OWORD *)(v7 + 224) = *((_OWORD *)v8 + 14);
          *(_DWORD *)(v7 + 239) = *(_DWORD *)(v8 + 239);
          v93 = *((_OWORD *)v8 + 9);
          *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
          *(_OWORD *)(v7 + 144) = v93;
          v94 = *((_OWORD *)v8 + 11);
          *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
          *(_OWORD *)(v7 + 176) = v94;
          v95 = *((_OWORD *)v8 + 5);
          *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
          *(_OWORD *)(v7 + 80) = v95;
          v96 = *((_OWORD *)v8 + 7);
          *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
          *(_OWORD *)(v7 + 112) = v96;
          *(_OWORD *)(v7 + 248) = *(_OWORD *)(v8 + 248);
          v97 = *(_OWORD *)(v8 + 280);
          *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
          *(_OWORD *)(v7 + 280) = v97;
          v98 = *(_OWORD *)(v8 + 376);
          *(_OWORD *)(v7 + 360) = *(_OWORD *)(v8 + 360);
          *(_OWORD *)(v7 + 376) = v98;
          *(_QWORD *)(v7 + 392) = *((_QWORD *)v8 + 49);
          v99 = *(_OWORD *)(v8 + 312);
          *(_OWORD *)(v7 + 296) = *(_OWORD *)(v8 + 296);
          *(_OWORD *)(v7 + 312) = v99;
          v100 = *(_OWORD *)(v8 + 344);
          *(_OWORD *)(v7 + 328) = *(_OWORD *)(v8 + 328);
          *(_OWORD *)(v7 + 344) = v100;
          v101 = *((_OWORD *)v8 + 28);
          *(_OWORD *)(v7 + 432) = *((_OWORD *)v8 + 27);
          *(_OWORD *)(v7 + 448) = v101;
          *(_BYTE *)(v7 + 464) = v8[464];
          v102 = *((_OWORD *)v8 + 26);
          *(_OWORD *)(v7 + 400) = *((_OWORD *)v8 + 25);
          *(_OWORD *)(v7 + 416) = v102;
          *(_OWORD *)(v7 + 472) = *(_OWORD *)(v8 + 472);
          *(_OWORD *)(v7 + 481) = *(_OWORD *)(v8 + 481);
          v103 = *((_QWORD *)v8 + 63);
          if (v103)
          {
            v104 = *((_QWORD *)v8 + 64);
            *(_QWORD *)(v7 + 504) = v103;
            *(_QWORD *)(v7 + 512) = v104;
          }
          else
          {
            *(_OWORD *)(v7 + 504) = *(_OWORD *)(v8 + 504);
          }
          *(_WORD *)(v7 + 520) = *((_WORD *)v8 + 260);
          *(_OWORD *)(v7 + 528) = *((_OWORD *)v8 + 33);
          *(_QWORD *)(v7 + 544) = *((_QWORD *)v8 + 68);
          *(_QWORD *)(v7 + 568) = *((_QWORD *)v8 + 71);
          *(_OWORD *)(v7 + 552) = *(_OWORD *)(v8 + 552);
          *(_QWORD *)(v7 + 576) = *((_QWORD *)v8 + 72);
          *(_OWORD *)(v7 + 584) = *(_OWORD *)(v8 + 584);
          *(_OWORD *)(v7 + 600) = *(_OWORD *)(v8 + 600);
          *(_QWORD *)(v7 + 616) = *((_QWORD *)v8 + 77);
          *(_QWORD *)(v7 + 624) = *((_QWORD *)v8 + 78);
          *(_BYTE *)(v7 + 632) = v8[632];
          *(_WORD *)(v7 + 633) = *(_WORD *)(v8 + 633);
          v135 = v53[28];
          v136 = (char *)(v7 + v135);
          v137 = &v8[v135];
          v138 = type metadata accessor for CommandOperation();
          v139 = *(_QWORD *)(v138 - 8);
          __srcc = v137;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
          }
          else
          {
            v160 = v139;
            *v136 = *v137;
            v144 = *(int *)(v138 + 20);
            v145 = &v136[v144];
            v146 = &__srcc[v144];
            v147 = *(_OWORD *)&__srcc[v144 + 16];
            *(_OWORD *)v145 = *(_OWORD *)&__srcc[v144];
            *((_OWORD *)v145 + 1) = v147;
            v148 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v149 = &v145[v148];
            v158 = &v146[v148];
            v150 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 32))(v149, v158, v150);
            v151 = *(int *)(v138 + 24);
            v152 = &v136[v151];
            v153 = &__srcc[v151];
            v154 = *(_QWORD *)v153;
            if (*(_QWORD *)v153)
            {
              v155 = *((_QWORD *)v153 + 1);
              *(_QWORD *)v152 = v154;
              *((_QWORD *)v152 + 1) = v155;
            }
            else
            {
              *(_OWORD *)v152 = *(_OWORD *)v153;
            }
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v136, 0, 1, v138);
          }
          *(_BYTE *)(v7 + v53[29]) = v8[v53[29]];
          *(_BYTE *)(v7 + v53[30]) = v8[v53[30]];
          *(_BYTE *)(v7 + v53[31]) = v8[v53[31]];
          *(_BYTE *)(v7 + v53[32]) = v8[v53[32]];
          *(_QWORD *)(v7 + v53[33]) = *(_QWORD *)&v8[v53[33]];
          __dstb[7](v7, 0, 1, v53);
        }
        swift_storeEnumTagMultiPayload();
      }
    }
  }
LABEL_50:
  *(_QWORD *)((char *)a1 + v172[7]) = *(_QWORD *)((char *)a2 + v172[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + v172[8]) = *(_QWORD *)((char *)a2 + v172[8]);
  swift_bridgeObjectRelease();
  v141 = v172[9];
  v142 = *(void **)((char *)a1 + v141);
  *(_QWORD *)((char *)a1 + v141) = *(_QWORD *)((char *)a2 + v141);

  return a1;
}

uint64_t sub_1874805B4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

char *sub_187480640(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for DialogActionContext.CancelType(char *a1, char **a2, uint64_t a3)
{
  int v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  _OWORD *v11;
  unint64_t v12;
  id v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int (**v26)(_QWORD, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  char *v29;
  void *v30;
  char *v31;
  char *v32;
  char *v33;
  _OWORD *v34;
  _OWORD *v35;
  unint64_t v36;
  id v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char *v101;
  _BYTE *v102;
  uint64_t v103;
  void (*v104)(char *, _BYTE *, uint64_t);
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  __int128 v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char *v160;
  _BYTE *v161;
  uint64_t v162;
  void (*v163)(char *, _BYTE *, uint64_t);
  uint64_t v164;
  char *v165;
  _QWORD *v166;
  uint64_t v167;
  void (*v168)(char *, _QWORD, uint64_t, int *);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  int *v179;
  uint64_t v180;
  unsigned int (*v181)(_BYTE *, uint64_t, uint64_t);
  uint64_t v182;
  _QWORD *__dst;
  char *__dstb;
  char *__dsta;
  int *v186;
  uint64_t v187;
  unsigned int (*v188)(_BYTE *, uint64_t, uint64_t);
  uint64_t v189;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      v7 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v8;
      a1[32] = *((_BYTE *)a2 + 32);
      v9 = a2[6];
      *((_QWORD *)a1 + 5) = a2[5];
      *((_QWORD *)a1 + 6) = v9;
      a1[56] = *((_BYTE *)a2 + 56);
      v10 = a1 + 64;
      v11 = a2 + 8;
      v12 = (unint64_t)a2[23];
      v13 = v6;
      v14 = v7;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v12 >> 1 == 4294967294)
      {
        v15 = *((_OWORD *)a2 + 13);
        *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
        *((_OWORD *)a1 + 13) = v15;
        *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
        v16 = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 9) = v16;
        v17 = *((_OWORD *)a2 + 11);
        *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
        *((_OWORD *)a1 + 11) = v17;
        v18 = *((_OWORD *)a2 + 5);
        *v10 = *v11;
        *((_OWORD *)a1 + 5) = v18;
        v19 = *((_OWORD *)a2 + 7);
        *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
        *((_OWORD *)a1 + 7) = v19;
        v20 = a2[32];
        if (v20)
        {
LABEL_5:
          *((_QWORD *)a1 + 31) = a2[31];
          *((_QWORD *)a1 + 32) = v20;
          v21 = a2[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v21 >= 2)
            v22 = v21;
          *((_QWORD *)a1 + 33) = v21;
          *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
          a1[276] = *((_BYTE *)a2 + 276);
          *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
          v23 = a2[36];
          *((_QWORD *)a1 + 35) = a2[35];
          *((_QWORD *)a1 + 36) = v23;
          swift_retain();
          swift_retain();
LABEL_24:
          v57 = (unint64_t)a2[41];
          if (v57 >> 2 == 0xFFFFFFFF)
          {
            v58 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v58;
            *((_QWORD *)a1 + 49) = a2[49];
            v59 = *(_OWORD *)(a2 + 39);
            *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
            *(_OWORD *)(a1 + 312) = v59;
            v60 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v60;
          }
          else
          {
            v61 = a2[37];
            v62 = (uint64_t)a2[38];
            v63 = (uint64_t)a2[39];
            v64 = (uint64_t)a2[40];
            v65 = (uint64_t)a2[42];
            v66 = (uint64_t)a2[43];
            v67 = a2[44];
            v172 = (uint64_t)a2[45];
            v174 = a2[46];
            v178 = (uint64_t)a2[47];
            __dstb = a2[48];
            v187 = (uint64_t)a2[49];
            outlined copy of PlatformItemList.Item.SystemItem(v61, v62, v63, v64, v57, v65, v66, (char)v67, v172, (uint64_t)v174, v178, (char)__dstb, v187);
            *((_QWORD *)a1 + 37) = v61;
            *((_QWORD *)a1 + 38) = v62;
            *((_QWORD *)a1 + 39) = v63;
            *((_QWORD *)a1 + 40) = v64;
            *((_QWORD *)a1 + 41) = v57;
            *((_QWORD *)a1 + 42) = v65;
            *((_QWORD *)a1 + 43) = v66;
            *((_QWORD *)a1 + 44) = v67;
            *((_QWORD *)a1 + 45) = v172;
            *((_QWORD *)a1 + 46) = v174;
            *((_QWORD *)a1 + 47) = v178;
            *((_QWORD *)a1 + 48) = __dstb;
            *((_QWORD *)a1 + 49) = v187;
          }
          v68 = a2[51];
          if (v68 == (char *)1)
          {
            v69 = *((_OWORD *)a2 + 28);
            *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
            *((_OWORD *)a1 + 28) = v69;
            a1[464] = *((_BYTE *)a2 + 464);
            v70 = *((_OWORD *)a2 + 26);
            *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
            *((_OWORD *)a1 + 26) = v70;
LABEL_39:
            v78 = a2[60];
            *((_QWORD *)a1 + 59) = a2[59];
            *((_QWORD *)a1 + 60) = v78;
            *((_QWORD *)a1 + 61) = a2[61];
            a1[496] = *((_BYTE *)a2 + 496);
            v79 = a2[63];
            swift_bridgeObjectRetain();
            if (v79)
            {
              v80 = a2[64];
              *((_QWORD *)a1 + 63) = v79;
              *((_QWORD *)a1 + 64) = v80;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
            }
            *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
            v81 = a2[66];
            if (v81)
            {
              *((_QWORD *)a1 + 66) = v81;
              *((_QWORD *)a1 + 67) = a2[67];
              *((_QWORD *)a1 + 68) = a2[68];
              swift_bridgeObjectRetain();
              swift_retain();
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
              *((_QWORD *)a1 + 68) = a2[68];
            }
            v82 = a2[69];
            if (v82 == (char *)1)
            {
              *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
              *((_QWORD *)a1 + 71) = a2[71];
            }
            else
            {
              *((_QWORD *)a1 + 69) = v82;
              v83 = a2[70];
              swift_retain();
              if (v83)
              {
                v84 = a2[71];
                *((_QWORD *)a1 + 70) = v83;
                *((_QWORD *)a1 + 71) = v84;
                swift_retain();
              }
              else
              {
                *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
              }
            }
            v85 = a2[72];
            *((_QWORD *)a1 + 72) = v85;
            *((_QWORD *)a1 + 73) = a2[73];
            *((_QWORD *)a1 + 74) = a2[74];
            *((_QWORD *)a1 + 75) = a2[75];
            *((_QWORD *)a1 + 76) = a2[76];
            *((_QWORD *)a1 + 77) = a2[77];
            *((_QWORD *)a1 + 78) = a2[78];
            *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
            a1[634] = *((_BYTE *)a2 + 634);
            v86 = type metadata accessor for PlatformItemList.Item();
            v87 = *(int *)(v86 + 112);
            v179 = (int *)v86;
            __dsta = &a1[v87];
            v88 = (char *)a2 + v87;
            v89 = type metadata accessor for CommandOperation();
            v90 = *(_QWORD *)(v89 - 8);
            v188 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v90 + 48);
            v91 = v85;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v188(v88, 1, v89))
            {
              type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
              memcpy(__dsta, v88, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
            }
            else
            {
              v189 = v90;
              *__dsta = *v88;
              v93 = *(int *)(v89 + 20);
              v94 = &__dsta[v93];
              v95 = &v88[v93];
              v175 = v88;
              v96 = v89;
              v97 = *(_QWORD *)&v88[v93];
              v98 = *((_QWORD *)v95 + 1);
              v99 = v95[16];
              outlined copy of Text.Storage(v97, v98, v99);
              *(_QWORD *)v94 = v97;
              *((_QWORD *)v94 + 1) = v98;
              v94[16] = v99;
              *((_QWORD *)v94 + 3) = *((_QWORD *)v95 + 3);
              v100 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v101 = &v94[v100];
              v102 = &v95[v100];
              v103 = type metadata accessor for UUID();
              v104 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v103 - 8) + 16);
              swift_bridgeObjectRetain();
              v104(v101, v102, v103);
              v105 = *(int *)(v96 + 24);
              v106 = &__dsta[v105];
              v107 = &v175[v105];
              if (*(_QWORD *)v107)
              {
                v108 = *((_QWORD *)v107 + 1);
                *(_QWORD *)v106 = *(_QWORD *)v107;
                *((_QWORD *)v106 + 1) = v108;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v106 = *(_OWORD *)v107;
              }
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56))(__dsta, 0, 1, v96);
            }
            a1[v179[29]] = *((_BYTE *)a2 + v179[29]);
            a1[v179[30]] = *((_BYTE *)a2 + v179[30]);
            a1[v179[31]] = *((_BYTE *)a2 + v179[31]);
            a1[v179[32]] = *((_BYTE *)a2 + v179[32]);
            *(_QWORD *)&a1[v179[33]] = *(char **)((char *)a2 + v179[33]);
            swift_retain();
            goto LABEL_94;
          }
          *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
          a1[404] = *((_BYTE *)a2 + 404);
          if (v68)
          {
            v71 = a2[52];
            *((_QWORD *)a1 + 51) = v68;
            *((_QWORD *)a1 + 52) = v71;
            swift_retain();
            v72 = a2[53];
            if (v72)
              goto LABEL_31;
          }
          else
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
            v72 = a2[53];
            if (v72)
            {
LABEL_31:
              v73 = a2[54];
              *((_QWORD *)a1 + 53) = v72;
              *((_QWORD *)a1 + 54) = v73;
              swift_retain();
              v74 = a2[55];
              if (v74)
              {
LABEL_32:
                v75 = a2[56];
                *((_QWORD *)a1 + 55) = v74;
                *((_QWORD *)a1 + 56) = v75;
                swift_retain();
LABEL_38:
                *((_QWORD *)a1 + 57) = a2[57];
                a1[464] = *((_BYTE *)a2 + 464);
                goto LABEL_39;
              }
LABEL_37:
              *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
              goto LABEL_38;
            }
          }
          *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
          v74 = a2[55];
          if (v74)
            goto LABEL_32;
          goto LABEL_37;
        }
      }
      else
      {
        v28 = *((unsigned __int8 *)a2 + 72);
        if (v28 == 255)
        {
          *(_QWORD *)v10 = *(_QWORD *)v11;
          a1[72] = *((_BYTE *)a2 + 72);
        }
        else
        {
          v29 = a2[8];
          outlined copy of GraphicsImage.Contents(v29, *((_BYTE *)a2 + 72));
          *((_QWORD *)a1 + 8) = v29;
          a1[72] = v28;
          v12 = (unint64_t)a2[23];
        }
        *((_QWORD *)a1 + 10) = a2[10];
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
        a1[104] = *((_BYTE *)a2 + 104);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
        a1[124] = *((_BYTE *)a2 + 124);
        v48 = *((_OWORD *)a2 + 9);
        *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
        *((_OWORD *)a1 + 9) = v48;
        *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
        a1[162] = *((_BYTE *)a2 + 162);
        a1[163] = *((_BYTE *)a2 + 163);
        if (v12 >> 1 == 0xFFFFFFFF)
        {
          v49 = *(_OWORD *)(a2 + 23);
          *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
          *(_OWORD *)(a1 + 184) = v49;
        }
        else
        {
          v50 = (uint64_t)a2[21];
          v51 = (uint64_t)a2[22];
          v52 = a2[24];
          outlined copy of AccessibilityImageLabel(v50, v51, v12);
          *((_QWORD *)a1 + 21) = v50;
          *((_QWORD *)a1 + 22) = v51;
          *((_QWORD *)a1 + 23) = v12;
          *((_QWORD *)a1 + 24) = v52;
        }
        v53 = a2[26];
        *((_QWORD *)a1 + 25) = a2[25];
        *((_QWORD *)a1 + 26) = v53;
        *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
        *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
        a1[224] = *((_BYTE *)a2 + 224);
        v54 = a2[29];
        *((_QWORD *)a1 + 29) = v54;
        *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
        a1[242] = *((_BYTE *)a2 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        v55 = v54;
        v20 = a2[32];
        if (v20)
          goto LABEL_5;
      }
      v56 = *(_OWORD *)(a2 + 33);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 264) = v56;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
      goto LABEL_24;
    }
    v25 = type metadata accessor for PlatformItemList.Item();
    v26 = *(unsigned int (***)(_QWORD, uint64_t, uint64_t))(v25 - 8);
    if (((unsigned int (**)(char **, uint64_t, uint64_t))v26)[6](a2, 1, v25))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
LABEL_94:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    __dst = v26;
    v186 = (int *)v25;
    v30 = *a2;
    v31 = a2[1];
    *(_QWORD *)a1 = *a2;
    *((_QWORD *)a1 + 1) = v31;
    v32 = a2[3];
    *((_QWORD *)a1 + 2) = a2[2];
    *((_QWORD *)a1 + 3) = v32;
    a1[32] = *((_BYTE *)a2 + 32);
    v33 = a2[6];
    *((_QWORD *)a1 + 5) = a2[5];
    *((_QWORD *)a1 + 6) = v33;
    a1[56] = *((_BYTE *)a2 + 56);
    v34 = a1 + 64;
    v35 = a2 + 8;
    v36 = (unint64_t)a2[23];
    v37 = v30;
    v38 = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v36 >> 1 == 4294967294)
    {
      v39 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v39;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      v40 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v40;
      v41 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v41;
      v42 = *((_OWORD *)a2 + 5);
      *v34 = *v35;
      *((_OWORD *)a1 + 5) = v42;
      v43 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v43;
      v44 = a2[32];
      if (v44)
      {
LABEL_15:
        *((_QWORD *)a1 + 31) = a2[31];
        *((_QWORD *)a1 + 32) = v44;
        v45 = a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v45 >= 2)
          v46 = v45;
        *((_QWORD *)a1 + 33) = v45;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        a1[276] = *((_BYTE *)a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
        v47 = a2[36];
        *((_QWORD *)a1 + 35) = a2[35];
        *((_QWORD *)a1 + 36) = v47;
        swift_retain();
        swift_retain();
LABEL_63:
        v118 = (unint64_t)a2[41];
        if (v118 >> 2 == 0xFFFFFFFF)
        {
          v119 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v119;
          *((_QWORD *)a1 + 49) = a2[49];
          v120 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 312) = v120;
          v121 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v121;
        }
        else
        {
          v122 = a2[37];
          v123 = (uint64_t)a2[38];
          v124 = (uint64_t)a2[39];
          v125 = (uint64_t)a2[40];
          v127 = (uint64_t)a2[42];
          v126 = (uint64_t)a2[43];
          v128 = a2[44];
          v170 = (uint64_t)a2[45];
          v171 = (uint64_t)a2[46];
          v173 = (uint64_t)a2[47];
          v176 = a2[48];
          v180 = (uint64_t)a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v122, v123, v124, v125, v118, v127, v126, (char)v128, v170, v171, v173, (char)v176, v180);
          *((_QWORD *)a1 + 37) = v122;
          *((_QWORD *)a1 + 38) = v123;
          *((_QWORD *)a1 + 39) = v124;
          *((_QWORD *)a1 + 40) = v125;
          *((_QWORD *)a1 + 41) = v118;
          *((_QWORD *)a1 + 42) = v127;
          *((_QWORD *)a1 + 43) = v126;
          *((_QWORD *)a1 + 44) = v128;
          *((_QWORD *)a1 + 45) = v170;
          *((_QWORD *)a1 + 46) = v171;
          *((_QWORD *)a1 + 47) = v173;
          *((_QWORD *)a1 + 48) = v176;
          *((_QWORD *)a1 + 49) = v180;
        }
        v129 = a2[51];
        if (v129 == (char *)1)
        {
          v130 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v130;
          a1[464] = *((_BYTE *)a2 + 464);
          v131 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v131;
LABEL_76:
          v137 = a2[60];
          *((_QWORD *)a1 + 59) = a2[59];
          *((_QWORD *)a1 + 60) = v137;
          *((_QWORD *)a1 + 61) = a2[61];
          a1[496] = *((_BYTE *)a2 + 496);
          v138 = a2[63];
          swift_bridgeObjectRetain();
          if (v138)
          {
            v139 = a2[64];
            *((_QWORD *)a1 + 63) = v138;
            *((_QWORD *)a1 + 64) = v139;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          v140 = a2[66];
          if (v140)
          {
            *((_QWORD *)a1 + 66) = v140;
            *((_QWORD *)a1 + 67) = a2[67];
            *((_QWORD *)a1 + 68) = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            *((_QWORD *)a1 + 68) = a2[68];
          }
          v141 = a2[69];
          if (v141 == (char *)1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
            *((_QWORD *)a1 + 71) = a2[71];
          }
          else
          {
            *((_QWORD *)a1 + 69) = v141;
            v142 = a2[70];
            swift_retain();
            if (v142)
            {
              v143 = a2[71];
              *((_QWORD *)a1 + 70) = v142;
              *((_QWORD *)a1 + 71) = v143;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          v144 = a2[72];
          *((_QWORD *)a1 + 72) = v144;
          *((_QWORD *)a1 + 73) = a2[73];
          *((_QWORD *)a1 + 74) = a2[74];
          *((_QWORD *)a1 + 75) = a2[75];
          *((_QWORD *)a1 + 76) = a2[76];
          *((_QWORD *)a1 + 77) = a2[77];
          *((_QWORD *)a1 + 78) = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          a1[634] = *((_BYTE *)a2 + 634);
          v145 = v186[28];
          v177 = &a1[v145];
          v146 = (char *)a2 + v145;
          v147 = type metadata accessor for CommandOperation();
          v148 = *(_QWORD *)(v147 - 8);
          v181 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v148 + 48);
          v149 = v144;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v181(v146, 1, v147))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(v177, v146, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
            v151 = v186;
          }
          else
          {
            v182 = v148;
            *v177 = *v146;
            v152 = v147;
            v153 = *(int *)(v147 + 20);
            v154 = &v177[v153];
            v155 = &v146[v153];
            v156 = *(_QWORD *)&v146[v153];
            v157 = *(_QWORD *)&v146[v153 + 8];
            v158 = v146[v153 + 16];
            outlined copy of Text.Storage(v156, v157, v158);
            *(_QWORD *)v154 = v156;
            *((_QWORD *)v154 + 1) = v157;
            v154[16] = v158;
            *((_QWORD *)v154 + 3) = *((_QWORD *)v155 + 3);
            v159 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v160 = &v154[v159];
            v161 = &v155[v159];
            v162 = type metadata accessor for UUID();
            v163 = *(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v162 - 8) + 16);
            swift_bridgeObjectRetain();
            v163(v160, v161, v162);
            v164 = *(int *)(v152 + 24);
            v165 = &v177[v164];
            v166 = &v146[v164];
            if (*v166)
            {
              v167 = v166[1];
              *(_QWORD *)v165 = *v166;
              *((_QWORD *)v165 + 1) = v167;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v165 = *(_OWORD *)v166;
            }
            v151 = v186;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v182 + 56))(v177, 0, 1, v152);
          }
          a1[v151[29]] = *((_BYTE *)a2 + v151[29]);
          a1[v151[30]] = *((_BYTE *)a2 + v151[30]);
          a1[v151[31]] = *((_BYTE *)a2 + v151[31]);
          a1[v151[32]] = *((_BYTE *)a2 + v151[32]);
          *(_QWORD *)&a1[v151[33]] = *(char **)((char *)a2 + v151[33]);
          v168 = (void (*)(char *, _QWORD, uint64_t, int *))__dst[7];
          swift_retain();
          v168(a1, 0, 1, v151);
          goto LABEL_94;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        a1[404] = *((_BYTE *)a2 + 404);
        if (v129)
        {
          v132 = a2[52];
          *((_QWORD *)a1 + 51) = v129;
          *((_QWORD *)a1 + 52) = v132;
          swift_retain();
          v133 = a2[53];
          if (v133)
            goto LABEL_70;
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
          v133 = a2[53];
          if (v133)
          {
LABEL_70:
            v134 = a2[54];
            *((_QWORD *)a1 + 53) = v133;
            *((_QWORD *)a1 + 54) = v134;
            swift_retain();
            v135 = a2[55];
            if (v135)
            {
LABEL_71:
              v136 = a2[56];
              *((_QWORD *)a1 + 55) = v135;
              *((_QWORD *)a1 + 56) = v136;
              swift_retain();
LABEL_75:
              *((_QWORD *)a1 + 57) = a2[57];
              a1[464] = *((_BYTE *)a2 + 464);
              goto LABEL_76;
            }
LABEL_74:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
            goto LABEL_75;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
        v135 = a2[55];
        if (v135)
          goto LABEL_71;
        goto LABEL_74;
      }
    }
    else
    {
      v76 = *((unsigned __int8 *)a2 + 72);
      if (v76 == 255)
      {
        *(_QWORD *)v34 = *(_QWORD *)v35;
        a1[72] = *((_BYTE *)a2 + 72);
      }
      else
      {
        v77 = a2[8];
        outlined copy of GraphicsImage.Contents(v77, *((_BYTE *)a2 + 72));
        *((_QWORD *)a1 + 8) = v77;
        a1[72] = v76;
        v36 = (unint64_t)a2[23];
      }
      *((_QWORD *)a1 + 10) = a2[10];
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      a1[104] = *((_BYTE *)a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      a1[124] = *((_BYTE *)a2 + 124);
      v109 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v109;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      a1[162] = *((_BYTE *)a2 + 162);
      a1[163] = *((_BYTE *)a2 + 163);
      if (v36 >> 1 == 0xFFFFFFFF)
      {
        v110 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 184) = v110;
      }
      else
      {
        v111 = (uint64_t)a2[21];
        v112 = (uint64_t)a2[22];
        v113 = a2[24];
        outlined copy of AccessibilityImageLabel(v111, v112, v36);
        *((_QWORD *)a1 + 21) = v111;
        *((_QWORD *)a1 + 22) = v112;
        *((_QWORD *)a1 + 23) = v36;
        *((_QWORD *)a1 + 24) = v113;
      }
      v114 = a2[26];
      *((_QWORD *)a1 + 25) = a2[25];
      *((_QWORD *)a1 + 26) = v114;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      a1[224] = *((_BYTE *)a2 + 224);
      v115 = a2[29];
      *((_QWORD *)a1 + 29) = v115;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      a1[242] = *((_BYTE *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v116 = v115;
      v44 = a2[32];
      if (v44)
        goto LABEL_15;
    }
    v117 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v117;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_63;
  }
  v24 = *a2;
  *(_QWORD *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

uint64_t destroy for DialogActionContext.CancelType(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  int v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v9 = type metadata accessor for PlatformItemList.Item();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1, 1, v9);
    if ((_DWORD)result)
      return result;

    swift_bridgeObjectRelease();
    swift_release();
    v11 = *(_QWORD *)(a1 + 184);
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      v13 = *(unsigned __int8 *)(a1 + 72);
      if (v13 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v13);
        v11 = *(_QWORD *)(a1 + 184);
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v12 != 0x1FFFFFFFELL)
        outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v11);
      swift_unknownObjectRelease();
      swift_release();

    }
    if (*(_QWORD *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      v14 = *(void **)(a1 + 264);
      if ((unint64_t)v14 >= 2)

      swift_release();
      swift_release();
    }
    v15 = *(_QWORD *)(a1 + 328);
    if (v15 >> 2 != 0xFFFFFFFF)
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v15, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
    v16 = *(_QWORD *)(a1 + 408);
    if (v16)
    {
      if (v16 == 1)
      {
LABEL_49:
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(a1 + 504))
          swift_release();
        if (*(_QWORD *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(_QWORD *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(_QWORD *)(a1 + 560))
            swift_release();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = *(int *)(v9 + 112);
        goto LABEL_57;
      }
      swift_release();
    }
    if (*(_QWORD *)(a1 + 424))
      swift_release();
    if (*(_QWORD *)(a1 + 440))
      swift_release();
    goto LABEL_49;
  }

  swift_bridgeObjectRelease();
  swift_release();
  v2 = *(_QWORD *)(a1 + 184);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      v2 = *(_QWORD *)(a1 + 184);
      v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), v2);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2)

    swift_release();
    swift_release();
  }
  v6 = *(_QWORD *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), v6, *(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352), *(_QWORD *)(a1 + 360), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
  v7 = *(_QWORD *)(a1 + 408);
  if (!v7)
    goto LABEL_17;
  if (v7 != 1)
  {
    swift_release();
LABEL_17:
    if (*(_QWORD *)(a1 + 424))
      swift_release();
    if (*(_QWORD *)(a1 + 440))
      swift_release();
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 504))
    swift_release();
  if (*(_QWORD *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(a1 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
LABEL_57:
  v17 = a1 + v8;
  v18 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v19 = v17 + *(int *)(v18 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_BYTE *)(v19 + 16));
    swift_bridgeObjectRelease();
    v20 = v19 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    if (*(_QWORD *)(v17 + *(int *)(v18 + 24)))
      swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  id v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  __int128 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  void (*v101)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  __int128 v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  _QWORD *v145;
  id v146;
  uint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  void (*v161)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  void (*v166)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  void *v175;
  int *v176;
  void *v177;
  _BYTE *v178;
  void *__dstb;
  _BYTE *__dst;
  void *__dstc;
  unsigned int (*__dstd)(_BYTE *, uint64_t, uint64_t);
  void *__dsta;
  int *v184;
  uint64_t v185;
  unsigned int (*v186)(_BYTE *, uint64_t, uint64_t);
  uint64_t v187;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(void **)a2;
    v5 = *(void **)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v7;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v8 = (_OWORD *)(a1 + 64);
    v9 = (_OWORD *)(a2 + 64);
    v10 = *(_QWORD *)(a2 + 184);
    v11 = v4;
    v12 = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v10 >> 1 == 4294967294)
    {
      v13 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v13;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      v14 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v14;
      v15 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v15;
      v16 = *(_OWORD *)(a2 + 80);
      *v8 = *v9;
      *(_OWORD *)(a1 + 80) = v16;
      v17 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v17;
      v18 = *(_QWORD *)(a2 + 256);
      if (v18)
      {
LABEL_4:
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 256) = v18;
        v19 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v19 >= 2)
          v20 = v19;
        *(_QWORD *)(a1 + 264) = v19;
        *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
        *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
        v21 = *(_QWORD *)(a2 + 288);
        *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a1 + 288) = v21;
        swift_retain();
        swift_retain();
LABEL_22:
        v54 = *(_QWORD *)(a2 + 328);
        if (v54 >> 2 == 0xFFFFFFFF)
        {
          v55 = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(a1 + 376) = v55;
          *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
          v56 = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
          *(_OWORD *)(a1 + 312) = v56;
          v57 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 344) = v57;
        }
        else
        {
          v58 = *(void **)(a2 + 296);
          v59 = *(_QWORD *)(a2 + 304);
          v60 = *(_QWORD *)(a2 + 312);
          v61 = *(_QWORD *)(a2 + 320);
          v62 = *(_QWORD *)(a2 + 336);
          v63 = *(_QWORD *)(a2 + 344);
          v64 = *(_QWORD *)(a2 + 352);
          v170 = *(_QWORD *)(a2 + 360);
          v173 = *(_QWORD *)(a2 + 368);
          v175 = *(void **)(a2 + 376);
          __dstb = *(void **)(a2 + 384);
          v185 = *(_QWORD *)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v58, v59, v60, v61, v54, v62, v63, v64, v170, v173, (uint64_t)v175, (char)__dstb, v185);
          *(_QWORD *)(a1 + 296) = v58;
          *(_QWORD *)(a1 + 304) = v59;
          *(_QWORD *)(a1 + 312) = v60;
          *(_QWORD *)(a1 + 320) = v61;
          *(_QWORD *)(a1 + 328) = v54;
          *(_QWORD *)(a1 + 336) = v62;
          *(_QWORD *)(a1 + 344) = v63;
          *(_QWORD *)(a1 + 352) = v64;
          *(_QWORD *)(a1 + 360) = v170;
          *(_QWORD *)(a1 + 368) = v173;
          *(_QWORD *)(a1 + 376) = v175;
          *(_QWORD *)(a1 + 384) = __dstb;
          *(_QWORD *)(a1 + 392) = v185;
        }
        v65 = *(_QWORD *)(a2 + 408);
        if (v65 == 1)
        {
          v66 = *(_OWORD *)(a2 + 448);
          *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
          *(_OWORD *)(a1 + 448) = v66;
          *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
          v67 = *(_OWORD *)(a2 + 416);
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          *(_OWORD *)(a1 + 416) = v67;
LABEL_37:
          v75 = *(_QWORD *)(a2 + 480);
          *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
          *(_QWORD *)(a1 + 480) = v75;
          *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
          *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
          v76 = *(_QWORD *)(a2 + 504);
          swift_bridgeObjectRetain();
          if (v76)
          {
            v77 = *(_QWORD *)(a2 + 512);
            *(_QWORD *)(a1 + 504) = v76;
            *(_QWORD *)(a1 + 512) = v77;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
          }
          *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
          v78 = *(_QWORD *)(a2 + 528);
          if (v78)
          {
            *(_QWORD *)(a1 + 528) = v78;
            *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
            *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
            *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
          }
          v79 = *(_QWORD *)(a2 + 552);
          if (v79 == 1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
            *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
          }
          else
          {
            *(_QWORD *)(a1 + 552) = v79;
            v80 = *(_QWORD *)(a2 + 560);
            swift_retain();
            if (v80)
            {
              v81 = *(_QWORD *)(a2 + 568);
              *(_QWORD *)(a1 + 560) = v80;
              *(_QWORD *)(a1 + 568) = v81;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
            }
          }
          v82 = *(void **)(a2 + 576);
          *(_QWORD *)(a1 + 576) = v82;
          *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
          *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
          *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
          *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
          *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
          *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
          *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
          v83 = type metadata accessor for PlatformItemList.Item();
          v84 = *(int *)(v83 + 112);
          v176 = (int *)v83;
          __dst = (_BYTE *)(a1 + v84);
          v85 = (_BYTE *)(a2 + v84);
          v86 = type metadata accessor for CommandOperation();
          v87 = *(_QWORD *)(v86 - 8);
          v186 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v87 + 48);
          v88 = v82;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v186(v85, 1, v86))
          {
            type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
            memcpy(__dst, v85, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
          }
          else
          {
            v187 = v87;
            *__dst = *v85;
            v90 = *(int *)(v86 + 20);
            v91 = &__dst[v90];
            v92 = &v85[v90];
            v174 = v85;
            v93 = v86;
            v94 = *(_QWORD *)&v85[v90];
            v95 = *((_QWORD *)v92 + 1);
            v96 = v92[16];
            outlined copy of Text.Storage(v94, v95, v96);
            *(_QWORD *)v91 = v94;
            *((_QWORD *)v91 + 1) = v95;
            v91[16] = v96;
            *((_QWORD *)v91 + 3) = *((_QWORD *)v92 + 3);
            v97 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v98 = &v91[v97];
            v99 = &v92[v97];
            v100 = type metadata accessor for UUID();
            v101 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
            swift_bridgeObjectRetain();
            v101(v98, v99, v100);
            v102 = *(int *)(v93 + 24);
            v103 = &__dst[v102];
            v104 = &v174[v102];
            if (*v104)
            {
              v105 = v104[1];
              *v103 = *v104;
              v103[1] = v105;
              swift_retain();
            }
            else
            {
              *(_OWORD *)v103 = *(_OWORD *)v104;
            }
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v187 + 56))(__dst, 0, 1, v93);
          }
          *(_BYTE *)(a1 + v176[29]) = *(_BYTE *)(a2 + v176[29]);
          *(_BYTE *)(a1 + v176[30]) = *(_BYTE *)(a2 + v176[30]);
          *(_BYTE *)(a1 + v176[31]) = *(_BYTE *)(a2 + v176[31]);
          *(_BYTE *)(a1 + v176[32]) = *(_BYTE *)(a2 + v176[32]);
          *(_QWORD *)(a1 + v176[33]) = *(_QWORD *)(a2 + v176[33]);
          swift_retain();
          goto LABEL_92;
        }
        *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
        *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
        if (v65)
        {
          v68 = *(_QWORD *)(a2 + 416);
          *(_QWORD *)(a1 + 408) = v65;
          *(_QWORD *)(a1 + 416) = v68;
          swift_retain();
          v69 = *(_QWORD *)(a2 + 424);
          if (v69)
            goto LABEL_29;
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          v69 = *(_QWORD *)(a2 + 424);
          if (v69)
          {
LABEL_29:
            v70 = *(_QWORD *)(a2 + 432);
            *(_QWORD *)(a1 + 424) = v69;
            *(_QWORD *)(a1 + 432) = v70;
            swift_retain();
            v71 = *(_QWORD *)(a2 + 440);
            if (v71)
            {
LABEL_30:
              v72 = *(_QWORD *)(a2 + 448);
              *(_QWORD *)(a1 + 440) = v71;
              *(_QWORD *)(a1 + 448) = v72;
              swift_retain();
LABEL_36:
              *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
              *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
              goto LABEL_37;
            }
LABEL_35:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_36;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        v71 = *(_QWORD *)(a2 + 440);
        if (v71)
          goto LABEL_30;
        goto LABEL_35;
      }
    }
    else
    {
      v25 = *(unsigned __int8 *)(a2 + 72);
      if (v25 == 255)
      {
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      }
      else
      {
        v26 = *(void **)(a2 + 64);
        outlined copy of GraphicsImage.Contents(v26, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v26;
        *(_BYTE *)(a1 + 72) = v25;
        v10 = *(_QWORD *)(a2 + 184);
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      v45 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v45;
      *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      if (v10 >> 1 == 0xFFFFFFFF)
      {
        v46 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v46;
      }
      else
      {
        v47 = *(_QWORD *)(a2 + 168);
        v48 = *(_QWORD *)(a2 + 176);
        v49 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v47, v48, v10);
        *(_QWORD *)(a1 + 168) = v47;
        *(_QWORD *)(a1 + 176) = v48;
        *(_QWORD *)(a1 + 184) = v10;
        *(_QWORD *)(a1 + 192) = v49;
      }
      v50 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v50;
      *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
      *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      v51 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v51;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v52 = v51;
      v18 = *(_QWORD *)(a2 + 256);
      if (v18)
        goto LABEL_4;
    }
    v53 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v53;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_22;
  }
  v22 = type metadata accessor for PlatformItemList.Item();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(a2, 1, v22))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_92;
  }
  v172 = v23;
  v184 = (int *)v22;
  v27 = *(void **)a2;
  v28 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v28;
  v29 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v29;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v30 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v30;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v31 = (_QWORD *)(a1 + 64);
  v32 = (_QWORD *)(a2 + 64);
  v33 = *(_QWORD *)(a2 + 184);
  v34 = v27;
  v35 = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v33 >> 1 != 4294967294)
  {
    v73 = *(unsigned __int8 *)(a2 + 72);
    if (v73 == 255)
    {
      *v31 = *v32;
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    }
    else
    {
      v74 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v74, *(_BYTE *)(a2 + 72));
      *(_QWORD *)(a1 + 64) = v74;
      *(_BYTE *)(a1 + 72) = v73;
      v33 = *(_QWORD *)(a2 + 184);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    v106 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v106;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
    *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
    if (v33 >> 1 == 0xFFFFFFFF)
    {
      v107 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v107;
    }
    else
    {
      v108 = *(_QWORD *)(a2 + 168);
      v109 = *(_QWORD *)(a2 + 176);
      v110 = *(_QWORD *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v108, v109, v33);
      *(_QWORD *)(a1 + 168) = v108;
      *(_QWORD *)(a1 + 176) = v109;
      *(_QWORD *)(a1 + 184) = v33;
      *(_QWORD *)(a1 + 192) = v110;
    }
    v111 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v111;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    v112 = *(void **)(a2 + 232);
    *(_QWORD *)(a1 + 232) = v112;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    v113 = v112;
    v41 = *(_QWORD *)(a2 + 256);
    if (v41)
      goto LABEL_13;
LABEL_60:
    v114 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v114;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_61;
  }
  v36 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v36;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  v37 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v37;
  v38 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v38;
  v39 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(a1 + 80) = v39;
  v40 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v40;
  v41 = *(_QWORD *)(a2 + 256);
  if (!v41)
    goto LABEL_60;
LABEL_13:
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v41;
  v42 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v42 >= 2)
    v43 = v42;
  *(_QWORD *)(a1 + 264) = v42;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  v44 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v44;
  swift_retain();
  swift_retain();
LABEL_61:
  v115 = *(_QWORD *)(a2 + 328);
  if (v115 >> 2 == 0xFFFFFFFF)
  {
    v116 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v116;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v117 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v117;
    v118 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v118;
  }
  else
  {
    v119 = *(void **)(a2 + 296);
    v120 = *(_QWORD *)(a2 + 304);
    v121 = *(_QWORD *)(a2 + 312);
    v122 = *(_QWORD *)(a2 + 320);
    v124 = *(_QWORD *)(a2 + 336);
    v123 = *(_QWORD *)(a2 + 344);
    v125 = *(_QWORD *)(a2 + 352);
    v168 = *(_QWORD *)(a2 + 360);
    v169 = *(_QWORD *)(a2 + 368);
    v171 = *(_QWORD *)(a2 + 376);
    v177 = *(void **)(a2 + 384);
    __dstc = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v119, v120, v121, v122, v115, v124, v123, v125, v168, v169, v171, (char)v177, (uint64_t)__dstc);
    *(_QWORD *)(a1 + 296) = v119;
    *(_QWORD *)(a1 + 304) = v120;
    *(_QWORD *)(a1 + 312) = v121;
    *(_QWORD *)(a1 + 320) = v122;
    *(_QWORD *)(a1 + 328) = v115;
    *(_QWORD *)(a1 + 336) = v124;
    *(_QWORD *)(a1 + 344) = v123;
    *(_QWORD *)(a1 + 352) = v125;
    *(_QWORD *)(a1 + 360) = v168;
    *(_QWORD *)(a1 + 368) = v169;
    *(_QWORD *)(a1 + 376) = v171;
    *(_QWORD *)(a1 + 384) = v177;
    *(_QWORD *)(a1 + 392) = __dstc;
  }
  v126 = *(_QWORD *)(a2 + 408);
  if (v126 != 1)
  {
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
    if (v126)
    {
      v129 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = v126;
      *(_QWORD *)(a1 + 416) = v129;
      swift_retain();
      v130 = *(_QWORD *)(a2 + 424);
      if (v130)
        goto LABEL_68;
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      v130 = *(_QWORD *)(a2 + 424);
      if (v130)
      {
LABEL_68:
        v131 = *(_QWORD *)(a2 + 432);
        *(_QWORD *)(a1 + 424) = v130;
        *(_QWORD *)(a1 + 432) = v131;
        swift_retain();
        v132 = *(_QWORD *)(a2 + 440);
        if (v132)
        {
LABEL_69:
          v133 = *(_QWORD *)(a2 + 448);
          *(_QWORD *)(a1 + 440) = v132;
          *(_QWORD *)(a1 + 448) = v133;
          swift_retain();
LABEL_73:
          *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
          *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
          goto LABEL_74;
        }
LABEL_72:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
        goto LABEL_73;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    v132 = *(_QWORD *)(a2 + 440);
    if (v132)
      goto LABEL_69;
    goto LABEL_72;
  }
  v127 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v127;
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  v128 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v128;
LABEL_74:
  v134 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v134;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  v135 = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v135)
  {
    v136 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = v135;
    *(_QWORD *)(a1 + 512) = v136;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  v137 = *(_QWORD *)(a2 + 528);
  if (v137)
  {
    *(_QWORD *)(a1 + 528) = v137;
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  }
  v138 = *(_QWORD *)(a2 + 552);
  if (v138 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v138;
    v139 = *(_QWORD *)(a2 + 560);
    swift_retain();
    if (v139)
    {
      v140 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)(a1 + 560) = v139;
      *(_QWORD *)(a1 + 568) = v140;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  v141 = *(void **)(a2 + 576);
  *(_QWORD *)(a1 + 576) = v141;
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
  v142 = v184[28];
  v178 = (_BYTE *)(a1 + v142);
  v143 = (_BYTE *)(a2 + v142);
  v144 = type metadata accessor for CommandOperation();
  v145 = *(_QWORD **)(v144 - 8);
  __dstd = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v145[6];
  v146 = v141;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__dstd(v143, 1, v144))
  {
    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
    memcpy(v178, v143, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    v148 = v184;
    v149 = v172;
  }
  else
  {
    __dsta = v145;
    *v178 = *v143;
    v150 = v144;
    v151 = *(int *)(v144 + 20);
    v152 = &v178[v151];
    v153 = &v143[v151];
    v154 = *(_QWORD *)&v143[v151];
    v155 = *(_QWORD *)&v143[v151 + 8];
    v156 = v143[v151 + 16];
    outlined copy of Text.Storage(v154, v155, v156);
    *(_QWORD *)v152 = v154;
    *((_QWORD *)v152 + 1) = v155;
    v152[16] = v156;
    *((_QWORD *)v152 + 3) = *((_QWORD *)v153 + 3);
    v157 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v158 = &v152[v157];
    v159 = &v153[v157];
    v160 = type metadata accessor for UUID();
    v161 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v160 - 8) + 16);
    swift_bridgeObjectRetain();
    v161(v158, v159, v160);
    v162 = *(int *)(v150 + 24);
    v163 = &v178[v162];
    v164 = &v143[v162];
    if (*v164)
    {
      v165 = v164[1];
      *v163 = *v164;
      v163[1] = v165;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v163 = *(_OWORD *)v164;
    }
    v148 = v184;
    v149 = v172;
    (*((void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))__dsta + 7))(v178, 0, 1, v150);
  }
  *(_BYTE *)(a1 + v148[29]) = *(_BYTE *)(a2 + v148[29]);
  *(_BYTE *)(a1 + v148[30]) = *(_BYTE *)(a2 + v148[30]);
  *(_BYTE *)(a1 + v148[31]) = *(_BYTE *)(a2 + v148[31]);
  *(_BYTE *)(a1 + v148[32]) = *(_BYTE *)(a2 + v148[32]);
  *(_QWORD *)(a1 + v148[33]) = *(_QWORD *)(a2 + v148[33]);
  v166 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v149 + 56);
  swift_retain();
  v166(a1, 0, 1, v148);
LABEL_92:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  _OWORD *v6;
  id *v7;
  unint64_t v8;
  id v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  id v21;
  int v22;
  uint64_t v23;
  unsigned int (**v24)(_QWORD, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  id v27;
  void *v28;
  void *v29;
  _OWORD *v30;
  id *v31;
  unint64_t v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  id v45;
  int v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  void (*v113)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  id v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  void *v128;
  id v129;
  __int128 v130;
  __int128 v131;
  unint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  _OWORD *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  void (*v182)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  void (*v187)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  unsigned int (*v196)(_BYTE *, uint64_t, uint64_t);
  uint64_t v197;
  void *v198;
  int *v199;
  void *v200;
  _BYTE *v201;
  _QWORD *__dst;
  void *__dstb;
  _BYTE *__dsta;
  int *v205;
  uint64_t v206;
  unsigned int (*v207)(_BYTE *, uint64_t, uint64_t);
  uint64_t v208;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for DialogActionContext.CancelType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v5 = *(void **)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v6 = (_OWORD *)(a1 + 64);
      v7 = (id *)(a2 + 64);
      v8 = *(_QWORD *)(a2 + 184);
      v9 = v4;
      v10 = v5;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v8 >> 1 == 4294967294)
      {
        v11 = *(_OWORD *)v7;
        v12 = *(_OWORD *)(a2 + 80);
        v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v13;
        *v6 = v11;
        *(_OWORD *)(a1 + 80) = v12;
        v14 = *(_OWORD *)(a2 + 128);
        v15 = *(_OWORD *)(a2 + 144);
        v16 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v16;
        *(_OWORD *)(a1 + 128) = v14;
        *(_OWORD *)(a1 + 144) = v15;
        v17 = *(_OWORD *)(a2 + 192);
        v18 = *(_OWORD *)(a2 + 208);
        v19 = *(_OWORD *)(a2 + 224);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 224) = v19;
        *(_OWORD *)(a1 + 192) = v17;
        if (*(_QWORD *)(a2 + 256))
        {
LABEL_5:
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
          *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
          v20 = *(void **)(a2 + 264);
          swift_bridgeObjectRetain();
          if ((unint64_t)v20 >= 2)
            v21 = v20;
          *(_QWORD *)(a1 + 264) = v20;
          v22 = *(_DWORD *)(a2 + 272);
          *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
          *(_DWORD *)(a1 + 272) = v22;
          *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
          *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
          *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
          *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
          swift_retain();
          swift_retain();
LABEL_23:
          v61 = *(_QWORD *)(a2 + 328);
          if (v61 >> 2 == 0xFFFFFFFF)
          {
            v62 = *(_OWORD *)(a2 + 296);
            v63 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v63;
            *(_OWORD *)(a1 + 296) = v62;
            v64 = *(_OWORD *)(a2 + 344);
            v65 = *(_OWORD *)(a2 + 360);
            v66 = *(_OWORD *)(a2 + 376);
            *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
            *(_OWORD *)(a1 + 360) = v65;
            *(_OWORD *)(a1 + 376) = v66;
            *(_OWORD *)(a1 + 344) = v64;
          }
          else
          {
            v67 = *(void **)(a2 + 296);
            v68 = *(_QWORD *)(a2 + 304);
            v69 = *(_QWORD *)(a2 + 312);
            v70 = *(_QWORD *)(a2 + 320);
            v71 = *(_QWORD *)(a2 + 336);
            v72 = *(_QWORD *)(a2 + 344);
            v73 = *(_QWORD *)(a2 + 352);
            v191 = *(_QWORD *)(a2 + 360);
            v193 = *(_QWORD *)(a2 + 368);
            v198 = *(void **)(a2 + 376);
            __dstb = *(void **)(a2 + 384);
            v206 = *(_QWORD *)(a2 + 392);
            outlined copy of PlatformItemList.Item.SystemItem(v67, v68, v69, v70, v61, v71, v72, v73, v191, v193, (uint64_t)v198, (char)__dstb, v206);
            *(_QWORD *)(a1 + 296) = v67;
            *(_QWORD *)(a1 + 304) = v68;
            *(_QWORD *)(a1 + 312) = v69;
            *(_QWORD *)(a1 + 320) = v70;
            *(_QWORD *)(a1 + 328) = v61;
            *(_QWORD *)(a1 + 336) = v71;
            *(_QWORD *)(a1 + 344) = v72;
            *(_QWORD *)(a1 + 352) = v73;
            *(_QWORD *)(a1 + 360) = v191;
            *(_QWORD *)(a1 + 368) = v193;
            *(_QWORD *)(a1 + 376) = v198;
            *(_QWORD *)(a1 + 384) = __dstb;
            *(_QWORD *)(a1 + 392) = v206;
          }
          if (*(_QWORD *)(a2 + 408) == 1)
          {
            *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
            v74 = *(_OWORD *)(a2 + 416);
            v75 = *(_OWORD *)(a2 + 432);
            v76 = *(_OWORD *)(a2 + 448);
            *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
            *(_OWORD *)(a1 + 432) = v75;
            *(_OWORD *)(a1 + 448) = v76;
            *(_OWORD *)(a1 + 416) = v74;
            goto LABEL_38;
          }
          *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
          *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
          *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
          *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
          *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
          v77 = *(_QWORD *)(a2 + 408);
          if (v77)
          {
            v78 = *(_QWORD *)(a2 + 416);
            *(_QWORD *)(a1 + 408) = v77;
            *(_QWORD *)(a1 + 416) = v78;
            swift_retain();
            v79 = *(_QWORD *)(a2 + 424);
            if (v79)
              goto LABEL_30;
          }
          else
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
            v79 = *(_QWORD *)(a2 + 424);
            if (v79)
            {
LABEL_30:
              v80 = *(_QWORD *)(a2 + 432);
              *(_QWORD *)(a1 + 424) = v79;
              *(_QWORD *)(a1 + 432) = v80;
              swift_retain();
              v81 = *(_QWORD *)(a2 + 440);
              if (v81)
              {
LABEL_31:
                v82 = *(_QWORD *)(a2 + 448);
                *(_QWORD *)(a1 + 440) = v81;
                *(_QWORD *)(a1 + 448) = v82;
                swift_retain();
LABEL_37:
                *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
                *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_38:
                *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
                *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
                *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
                *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
                v85 = *(_QWORD *)(a2 + 504);
                swift_bridgeObjectRetain();
                if (v85)
                {
                  v86 = *(_QWORD *)(a2 + 512);
                  *(_QWORD *)(a1 + 504) = v85;
                  *(_QWORD *)(a1 + 512) = v86;
                  swift_retain();
                }
                else
                {
                  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
                }
                *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
                v87 = *(_QWORD *)(a2 + 528);
                if (v87)
                {
                  *(_QWORD *)(a1 + 528) = v87;
                  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
                  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  v88 = *(_OWORD *)(a2 + 528);
                  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                  *(_OWORD *)(a1 + 528) = v88;
                }
                v89 = *(_QWORD *)(a2 + 552);
                if (v89 == 1)
                {
                  v90 = (_OWORD *)(a1 + 552);
                  v91 = *(_OWORD *)(a2 + 552);
                  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
                }
                else
                {
                  *(_QWORD *)(a1 + 552) = v89;
                  v92 = *(_QWORD *)(a2 + 560);
                  swift_retain();
                  if (v92)
                  {
                    v93 = *(_QWORD *)(a2 + 568);
                    *(_QWORD *)(a1 + 560) = v92;
                    *(_QWORD *)(a1 + 568) = v93;
                    swift_retain();
LABEL_50:
                    v94 = *(void **)(a2 + 576);
                    *(_QWORD *)(a1 + 576) = v94;
                    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
                    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
                    *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
                    *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
                    *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
                    *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
                    *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
                    *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
                    *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
                    v95 = type metadata accessor for PlatformItemList.Item();
                    v96 = *(int *)(v95 + 112);
                    v199 = (int *)v95;
                    __dsta = (_BYTE *)(a1 + v96);
                    v97 = (_BYTE *)(a2 + v96);
                    v98 = type metadata accessor for CommandOperation();
                    v99 = *(_QWORD *)(v98 - 8);
                    v207 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48);
                    v100 = v94;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v207(v97, 1, v98))
                    {
                      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                      memcpy(__dsta, v97, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
                    }
                    else
                    {
                      v208 = v99;
                      *__dsta = *v97;
                      v102 = *(int *)(v98 + 20);
                      v103 = &__dsta[v102];
                      v104 = &v97[v102];
                      v194 = v97;
                      v105 = v98;
                      v106 = *(_QWORD *)&v97[v102];
                      v107 = *((_QWORD *)v104 + 1);
                      v108 = v104[16];
                      outlined copy of Text.Storage(v106, v107, v108);
                      *(_QWORD *)v103 = v106;
                      *((_QWORD *)v103 + 1) = v107;
                      v103[16] = v108;
                      *((_QWORD *)v103 + 3) = *((_QWORD *)v104 + 3);
                      v109 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                      v110 = &v103[v109];
                      v111 = &v104[v109];
                      v112 = type metadata accessor for UUID();
                      v113 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
                      swift_bridgeObjectRetain();
                      v113(v110, v111, v112);
                      v114 = *(int *)(v105 + 24);
                      v115 = &__dsta[v114];
                      v116 = &v194[v114];
                      if (*v116)
                      {
                        v117 = v116[1];
                        *v115 = *v116;
                        v115[1] = v117;
                        swift_retain();
                      }
                      else
                      {
                        *(_OWORD *)v115 = *(_OWORD *)v116;
                      }
                      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v208 + 56))(__dsta, 0, 1, v105);
                    }
                    *(_BYTE *)(a1 + v199[29]) = *(_BYTE *)(a2 + v199[29]);
                    *(_BYTE *)(a1 + v199[30]) = *(_BYTE *)(a2 + v199[30]);
                    *(_BYTE *)(a1 + v199[31]) = *(_BYTE *)(a2 + v199[31]);
                    *(_BYTE *)(a1 + v199[32]) = *(_BYTE *)(a2 + v199[32]);
                    *(_QWORD *)(a1 + v199[33]) = *(_QWORD *)(a2 + v199[33]);
                    swift_retain();
                    goto LABEL_95;
                  }
                  v90 = (_OWORD *)(a1 + 560);
                  v91 = *(_OWORD *)(a2 + 560);
                }
                *v90 = v91;
                goto LABEL_50;
              }
LABEL_36:
              *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
              goto LABEL_37;
            }
          }
          *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
          v81 = *(_QWORD *)(a2 + 440);
          if (v81)
            goto LABEL_31;
          goto LABEL_36;
        }
      }
      else
      {
        v26 = *(unsigned __int8 *)(a2 + 72);
        if (v26 == 255)
        {
          v47 = *v7;
          *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
          *(_QWORD *)v6 = v47;
        }
        else
        {
          v27 = *v7;
          outlined copy of GraphicsImage.Contents(*v7, *(_BYTE *)(a2 + 72));
          *(_QWORD *)(a1 + 64) = v27;
          *(_BYTE *)(a1 + 72) = v26;
        }
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
        v48 = *(_OWORD *)(a2 + 108);
        *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
        *(_OWORD *)(a1 + 108) = v48;
        v49 = *(_OWORD *)(a2 + 128);
        v50 = *(_OWORD *)(a2 + 144);
        *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
        *(_OWORD *)(a1 + 128) = v49;
        *(_OWORD *)(a1 + 144) = v50;
        *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
        *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
        *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
        v51 = *(_QWORD *)(a2 + 184);
        if (v51 >> 1 == 0xFFFFFFFF)
        {
          v52 = *(_OWORD *)(a2 + 184);
          *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 184) = v52;
        }
        else
        {
          v53 = *(_QWORD *)(a2 + 168);
          v54 = *(_QWORD *)(a2 + 176);
          v55 = *(_QWORD *)(a2 + 192);
          outlined copy of AccessibilityImageLabel(v53, v54, *(_QWORD *)(a2 + 184));
          *(_QWORD *)(a1 + 168) = v53;
          *(_QWORD *)(a1 + 176) = v54;
          *(_QWORD *)(a1 + 184) = v51;
          *(_QWORD *)(a1 + 192) = v55;
        }
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
        *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
        *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
        *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
        v56 = *(_DWORD *)(a2 + 220);
        *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
        *(_DWORD *)(a1 + 220) = v56;
        v57 = *(void **)(a2 + 232);
        *(_QWORD *)(a1 + 232) = v57;
        *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
        *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        v58 = v57;
        if (*(_QWORD *)(a2 + 256))
          goto LABEL_5;
      }
      v59 = *(_OWORD *)(a2 + 248);
      v60 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v60;
      *(_OWORD *)(a1 + 248) = v59;
      goto LABEL_23;
    }
    v23 = type metadata accessor for PlatformItemList.Item();
    v24 = *(unsigned int (***)(_QWORD, uint64_t, uint64_t))(v23 - 8);
    if (v24[6](a2, 1, v23))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_95:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    __dst = v24;
    v205 = (int *)v23;
    v28 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v29 = *(void **)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v29;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v30 = (_OWORD *)(a1 + 64);
    v31 = (id *)(a2 + 64);
    v32 = *(_QWORD *)(a2 + 184);
    v33 = v28;
    v34 = v29;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v32 >> 1 == 4294967294)
    {
      v35 = *(_OWORD *)v31;
      v36 = *(_OWORD *)(a2 + 80);
      v37 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v37;
      *v30 = v35;
      *(_OWORD *)(a1 + 80) = v36;
      v38 = *(_OWORD *)(a2 + 128);
      v39 = *(_OWORD *)(a2 + 144);
      v40 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v40;
      *(_OWORD *)(a1 + 128) = v38;
      *(_OWORD *)(a1 + 144) = v39;
      v41 = *(_OWORD *)(a2 + 192);
      v42 = *(_OWORD *)(a2 + 208);
      v43 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v42;
      *(_OWORD *)(a1 + 224) = v43;
      *(_OWORD *)(a1 + 192) = v41;
      if (*(_QWORD *)(a2 + 256))
      {
LABEL_14:
        *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
        *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
        v44 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v44 >= 2)
          v45 = v44;
        *(_QWORD *)(a1 + 264) = v44;
        v46 = *(_DWORD *)(a2 + 272);
        *(_BYTE *)(a1 + 276) = *(_BYTE *)(a2 + 276);
        *(_DWORD *)(a1 + 272) = v46;
        *(_BYTE *)(a1 + 277) = *(_BYTE *)(a2 + 277);
        *(_BYTE *)(a1 + 278) = *(_BYTE *)(a2 + 278);
        *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_retain();
        swift_retain();
LABEL_63:
        v132 = *(_QWORD *)(a2 + 328);
        if (v132 >> 2 == 0xFFFFFFFF)
        {
          v133 = *(_OWORD *)(a2 + 296);
          v134 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v134;
          *(_OWORD *)(a1 + 296) = v133;
          v135 = *(_OWORD *)(a2 + 344);
          v136 = *(_OWORD *)(a2 + 360);
          v137 = *(_OWORD *)(a2 + 376);
          *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v136;
          *(_OWORD *)(a1 + 376) = v137;
          *(_OWORD *)(a1 + 344) = v135;
        }
        else
        {
          v138 = *(void **)(a2 + 296);
          v139 = *(_QWORD *)(a2 + 304);
          v140 = *(_QWORD *)(a2 + 312);
          v141 = *(_QWORD *)(a2 + 320);
          v143 = *(_QWORD *)(a2 + 336);
          v142 = *(_QWORD *)(a2 + 344);
          v144 = *(_QWORD *)(a2 + 352);
          v189 = *(_QWORD *)(a2 + 360);
          v190 = *(_QWORD *)(a2 + 368);
          v192 = *(_QWORD *)(a2 + 376);
          v195 = *(_QWORD *)(a2 + 384);
          v200 = *(void **)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v138, v139, v140, v141, v132, v143, v142, v144, v189, v190, v192, v195, (uint64_t)v200);
          *(_QWORD *)(a1 + 296) = v138;
          *(_QWORD *)(a1 + 304) = v139;
          *(_QWORD *)(a1 + 312) = v140;
          *(_QWORD *)(a1 + 320) = v141;
          *(_QWORD *)(a1 + 328) = v132;
          *(_QWORD *)(a1 + 336) = v143;
          *(_QWORD *)(a1 + 344) = v142;
          *(_QWORD *)(a1 + 352) = v144;
          *(_QWORD *)(a1 + 360) = v189;
          *(_QWORD *)(a1 + 368) = v190;
          *(_QWORD *)(a1 + 376) = v192;
          *(_QWORD *)(a1 + 384) = v195;
          *(_QWORD *)(a1 + 392) = v200;
        }
        if (*(_QWORD *)(a2 + 408) == 1)
        {
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          v145 = *(_OWORD *)(a2 + 416);
          v146 = *(_OWORD *)(a2 + 432);
          v147 = *(_OWORD *)(a2 + 448);
          *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
          *(_OWORD *)(a1 + 432) = v146;
          *(_OWORD *)(a1 + 448) = v147;
          *(_OWORD *)(a1 + 416) = v145;
          goto LABEL_76;
        }
        *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
        *(_BYTE *)(a1 + 401) = *(_BYTE *)(a2 + 401);
        *(_BYTE *)(a1 + 402) = *(_BYTE *)(a2 + 402);
        *(_BYTE *)(a1 + 403) = *(_BYTE *)(a2 + 403);
        *(_BYTE *)(a1 + 404) = *(_BYTE *)(a2 + 404);
        v148 = *(_QWORD *)(a2 + 408);
        if (v148)
        {
          v149 = *(_QWORD *)(a2 + 416);
          *(_QWORD *)(a1 + 408) = v148;
          *(_QWORD *)(a1 + 416) = v149;
          swift_retain();
          v150 = *(_QWORD *)(a2 + 424);
          if (v150)
            goto LABEL_70;
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          v150 = *(_QWORD *)(a2 + 424);
          if (v150)
          {
LABEL_70:
            v151 = *(_QWORD *)(a2 + 432);
            *(_QWORD *)(a1 + 424) = v150;
            *(_QWORD *)(a1 + 432) = v151;
            swift_retain();
            v152 = *(_QWORD *)(a2 + 440);
            if (v152)
            {
LABEL_71:
              v153 = *(_QWORD *)(a2 + 448);
              *(_QWORD *)(a1 + 440) = v152;
              *(_QWORD *)(a1 + 448) = v153;
              swift_retain();
LABEL_75:
              *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
              *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
LABEL_76:
              *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
              *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
              *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
              *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
              v154 = *(_QWORD *)(a2 + 504);
              swift_bridgeObjectRetain();
              if (v154)
              {
                v155 = *(_QWORD *)(a2 + 512);
                *(_QWORD *)(a1 + 504) = v154;
                *(_QWORD *)(a1 + 512) = v155;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
              }
              *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
              v156 = *(_QWORD *)(a2 + 528);
              if (v156)
              {
                *(_QWORD *)(a1 + 528) = v156;
                *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
                *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                v157 = *(_OWORD *)(a2 + 528);
                *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
                *(_OWORD *)(a1 + 528) = v157;
              }
              v158 = *(_QWORD *)(a2 + 552);
              if (v158 == 1)
              {
                v159 = (_OWORD *)(a1 + 552);
                v160 = *(_OWORD *)(a2 + 552);
                *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
              }
              else
              {
                *(_QWORD *)(a1 + 552) = v158;
                v161 = *(_QWORD *)(a2 + 560);
                swift_retain();
                if (v161)
                {
                  v162 = *(_QWORD *)(a2 + 568);
                  *(_QWORD *)(a1 + 560) = v161;
                  *(_QWORD *)(a1 + 568) = v162;
                  swift_retain();
LABEL_88:
                  v163 = *(void **)(a2 + 576);
                  *(_QWORD *)(a1 + 576) = v163;
                  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
                  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
                  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
                  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
                  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
                  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
                  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
                  *(_BYTE *)(a1 + 633) = *(_BYTE *)(a2 + 633);
                  *(_BYTE *)(a1 + 634) = *(_BYTE *)(a2 + 634);
                  v164 = v205[28];
                  v201 = (_BYTE *)(a1 + v164);
                  v165 = (_BYTE *)(a2 + v164);
                  v166 = type metadata accessor for CommandOperation();
                  v167 = *(_QWORD *)(v166 - 8);
                  v196 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v167 + 48);
                  v168 = v163;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v196(v165, 1, v166))
                  {
                    type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
                    memcpy(v201, v165, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
                    v170 = v205;
                  }
                  else
                  {
                    v197 = v167;
                    *v201 = *v165;
                    v171 = v166;
                    v172 = *(int *)(v166 + 20);
                    v173 = &v201[v172];
                    v174 = &v165[v172];
                    v175 = *(_QWORD *)&v165[v172];
                    v176 = *(_QWORD *)&v165[v172 + 8];
                    v177 = v165[v172 + 16];
                    outlined copy of Text.Storage(v175, v176, v177);
                    *(_QWORD *)v173 = v175;
                    *((_QWORD *)v173 + 1) = v176;
                    v173[16] = v177;
                    *((_QWORD *)v173 + 3) = *((_QWORD *)v174 + 3);
                    v178 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    v179 = &v173[v178];
                    v180 = &v174[v178];
                    v181 = type metadata accessor for UUID();
                    v182 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v181 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v182(v179, v180, v181);
                    v183 = *(int *)(v171 + 24);
                    v184 = &v201[v183];
                    v185 = &v165[v183];
                    if (*v185)
                    {
                      v186 = v185[1];
                      *v184 = *v185;
                      v184[1] = v186;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)v184 = *(_OWORD *)v185;
                    }
                    v170 = v205;
                    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v197 + 56))(v201, 0, 1, v171);
                  }
                  *(_BYTE *)(a1 + v170[29]) = *(_BYTE *)(a2 + v170[29]);
                  *(_BYTE *)(a1 + v170[30]) = *(_BYTE *)(a2 + v170[30]);
                  *(_BYTE *)(a1 + v170[31]) = *(_BYTE *)(a2 + v170[31]);
                  *(_BYTE *)(a1 + v170[32]) = *(_BYTE *)(a2 + v170[32]);
                  *(_QWORD *)(a1 + v170[33]) = *(_QWORD *)(a2 + v170[33]);
                  v187 = (void (*)(uint64_t, _QWORD, uint64_t, int *))__dst[7];
                  swift_retain();
                  v187(a1, 0, 1, v170);
                  goto LABEL_95;
                }
                v159 = (_OWORD *)(a1 + 560);
                v160 = *(_OWORD *)(a2 + 560);
              }
              *v159 = v160;
              goto LABEL_88;
            }
LABEL_74:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_75;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        v152 = *(_QWORD *)(a2 + 440);
        if (v152)
          goto LABEL_71;
        goto LABEL_74;
      }
    }
    else
    {
      v83 = *(unsigned __int8 *)(a2 + 72);
      if (v83 == 255)
      {
        v118 = *v31;
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        *(_QWORD *)v30 = v118;
      }
      else
      {
        v84 = *v31;
        outlined copy of GraphicsImage.Contents(*v31, *(_BYTE *)(a2 + 72));
        *(_QWORD *)(a1 + 64) = v84;
        *(_BYTE *)(a1 + 72) = v83;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      v119 = *(_OWORD *)(a2 + 108);
      *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v119;
      v120 = *(_OWORD *)(a2 + 128);
      v121 = *(_OWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v120;
      *(_OWORD *)(a1 + 144) = v121;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
      *(_BYTE *)(a1 + 163) = *(_BYTE *)(a2 + 163);
      v122 = *(_QWORD *)(a2 + 184);
      if (v122 >> 1 == 0xFFFFFFFF)
      {
        v123 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v123;
      }
      else
      {
        v124 = *(_QWORD *)(a2 + 168);
        v125 = *(_QWORD *)(a2 + 176);
        v126 = *(_QWORD *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v124, v125, *(_QWORD *)(a2 + 184));
        *(_QWORD *)(a1 + 168) = v124;
        *(_QWORD *)(a1 + 176) = v125;
        *(_QWORD *)(a1 + 184) = v122;
        *(_QWORD *)(a1 + 192) = v126;
      }
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
      v127 = *(_DWORD *)(a2 + 220);
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v127;
      v128 = *(void **)(a2 + 232);
      *(_QWORD *)(a1 + 232) = v128;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(_BYTE *)(a1 + 242) = *(_BYTE *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      v129 = v128;
      if (*(_QWORD *)(a2 + 256))
        goto LABEL_14;
    }
    v130 = *(_OWORD *)(a2 + 248);
    v131 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v131;
    *(_OWORD *)(a1 + 248) = v130;
    goto LABEL_63;
  }
  return a1;
}

uint64_t initializeWithTake for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _BYTE *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _BYTE *v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char *v77;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v5;
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    v11 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v11;
    v12 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v12;
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v13 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v13;
    v14 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v14;
    v15 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v15;
    *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
    v16 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v16;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
    v17 = *(_QWORD *)(a2 + 504);
    if (v17)
    {
      v18 = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 504) = v17;
      *(_QWORD *)(a1 + 512) = v18;
    }
    else
    {
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    }
    *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
    *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
    *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
    *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
    v22 = (int *)type metadata accessor for PlatformItemList.Item();
    v23 = v22[28];
    v24 = (_BYTE *)(a1 + v23);
    v25 = (_BYTE *)(a2 + v23);
    v26 = type metadata accessor for CommandOperation();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *v24 = *v25;
      v44 = *(int *)(v26 + 20);
      v45 = &v24[v44];
      v46 = &v25[v44];
      v47 = *(_OWORD *)&v25[v44 + 16];
      *v45 = *(_OWORD *)&v25[v44];
      v45[1] = v47;
      v48 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      v49 = (char *)v45 + v48;
      v50 = &v46[v48];
      v51 = type metadata accessor for UUID();
      (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
      v52 = *(int *)(v26 + 24);
      v53 = &v24[v52];
      v54 = (uint64_t *)&v25[v52];
      v55 = *v54;
      if (*v54)
      {
        v56 = v54[1];
        *v53 = v55;
        v53[1] = v56;
      }
      else
      {
        *(_OWORD *)v53 = *(_OWORD *)v54;
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    *(_BYTE *)(a1 + v22[29]) = *(_BYTE *)(a2 + v22[29]);
    *(_BYTE *)(a1 + v22[30]) = *(_BYTE *)(a2 + v22[30]);
    *(_BYTE *)(a1 + v22[31]) = *(_BYTE *)(a2 + v22[31]);
    *(_BYTE *)(a1 + v22[32]) = *(_BYTE *)(a2 + v22[32]);
    *(_QWORD *)(a1 + v22[33]) = *(_QWORD *)(a2 + v22[33]);
  }
  else
  {
    v19 = (int *)type metadata accessor for PlatformItemList.Item();
    v20 = *((_QWORD *)v19 - 1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v20 + 48))(a2, 1, v19))
    {
      type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v29 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v29;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v30 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v30;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v31 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v31;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      v32 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v32;
      v33 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v33;
      v34 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v34;
      v35 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v35;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      v36 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v36;
      v37 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v37;
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      v38 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v38;
      v39 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v39;
      v40 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 448) = v40;
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
      v41 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v41;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      v42 = *(_QWORD *)(a2 + 504);
      if (v42)
      {
        v43 = *(_QWORD *)(a2 + 512);
        *(_QWORD *)(a1 + 504) = v42;
        *(_QWORD *)(a1 + 512) = v43;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      v57 = v19[28];
      v58 = (_BYTE *)(a1 + v57);
      v59 = (_BYTE *)(a2 + v57);
      v60 = type metadata accessor for CommandOperation();
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v76 = v20;
        *v58 = *v59;
        v63 = *(int *)(v60 + 20);
        v64 = &v58[v63];
        v65 = &v59[v63];
        v66 = *(_OWORD *)&v59[v63 + 16];
        *v64 = *(_OWORD *)&v59[v63];
        v64[1] = v66;
        v67 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v77 = (char *)v64 + v67;
        v68 = &v65[v67];
        v69 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v77, v68, v69);
        v70 = *(int *)(v60 + 24);
        v71 = &v58[v70];
        v72 = (uint64_t *)&v59[v70];
        v73 = *v72;
        if (*v72)
        {
          v74 = v72[1];
          *v71 = v73;
          v71[1] = v74;
        }
        else
        {
          *(_OWORD *)v71 = *(_OWORD *)v72;
        }
        v20 = v76;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      *(_BYTE *)(a1 + v19[29]) = *(_BYTE *)(a2 + v19[29]);
      *(_BYTE *)(a1 + v19[30]) = *(_BYTE *)(a2 + v19[30]);
      *(_BYTE *)(a1 + v19[31]) = *(_BYTE *)(a2 + v19[31]);
      *(_BYTE *)(a1 + v19[32]) = *(_BYTE *)(a2 + v19[32]);
      *(_QWORD *)(a1 + v19[33]) = *(_QWORD *)(a2 + v19[33]);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v20 + 56))(a1, 0, 1, v19);
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DialogActionContext.CancelType(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _BYTE *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  _BYTE *v65;
  __int128 v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v76;
  uint64_t v77;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, type metadata accessor for DialogActionContext.CancelType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      v5 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = v5;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      v6 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v6;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      v7 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v7;
      v8 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v8;
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      v11 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v11;
      v12 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v12;
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      v13 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v13;
      v14 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v14;
      v15 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 448) = v15;
      *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
      v16 = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
      *(_OWORD *)(a1 + 416) = v16;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      v17 = *(_QWORD *)(a2 + 504);
      if (v17)
      {
        v18 = *(_QWORD *)(a2 + 512);
        *(_QWORD *)(a1 + 504) = v17;
        *(_QWORD *)(a1 + 512) = v18;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
      *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
      *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      v22 = (int *)type metadata accessor for PlatformItemList.Item();
      v23 = v22[28];
      v24 = (_BYTE *)(a1 + v23);
      v25 = (_BYTE *)(a2 + v23);
      v26 = type metadata accessor for CommandOperation();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        *v24 = *v25;
        v44 = *(int *)(v26 + 20);
        v45 = &v24[v44];
        v46 = &v25[v44];
        v47 = *(_OWORD *)&v25[v44 + 16];
        *v45 = *(_OWORD *)&v25[v44];
        v45[1] = v47;
        v48 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        v49 = (char *)v45 + v48;
        v50 = &v46[v48];
        v51 = type metadata accessor for UUID();
        (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v49, v50, v51);
        v52 = *(int *)(v26 + 24);
        v53 = &v24[v52];
        v54 = (uint64_t *)&v25[v52];
        v55 = *v54;
        if (*v54)
        {
          v56 = v54[1];
          *v53 = v55;
          v53[1] = v56;
        }
        else
        {
          *(_OWORD *)v53 = *(_OWORD *)v54;
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *(_BYTE *)(a1 + v22[29]) = *(_BYTE *)(a2 + v22[29]);
      *(_BYTE *)(a1 + v22[30]) = *(_BYTE *)(a2 + v22[30]);
      *(_BYTE *)(a1 + v22[31]) = *(_BYTE *)(a2 + v22[31]);
      *(_BYTE *)(a1 + v22[32]) = *(_BYTE *)(a2 + v22[32]);
      *(_QWORD *)(a1 + v22[33]) = *(_QWORD *)(a2 + v22[33]);
    }
    else
    {
      v19 = (int *)type metadata accessor for PlatformItemList.Item();
      v20 = *((_QWORD *)v19 - 1);
      if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v20 + 48))(a2, 1, v19))
      {
        type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
        v30 = *(_QWORD *)(a2 + 48);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(a1 + 48) = v30;
        *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
        v31 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v31;
        *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
        *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
        v32 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v32;
        v33 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v33;
        v34 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v34;
        v35 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v35;
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        v36 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v36;
        v37 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(a1 + 376) = v37;
        *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
        v38 = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
        *(_OWORD *)(a1 + 312) = v38;
        v39 = *(_OWORD *)(a2 + 344);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 344) = v39;
        v40 = *(_OWORD *)(a2 + 448);
        *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
        *(_OWORD *)(a1 + 448) = v40;
        *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
        v41 = *(_OWORD *)(a2 + 416);
        *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
        *(_OWORD *)(a1 + 416) = v41;
        *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
        *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
        v42 = *(_QWORD *)(a2 + 504);
        if (v42)
        {
          v43 = *(_QWORD *)(a2 + 512);
          *(_QWORD *)(a1 + 504) = v42;
          *(_QWORD *)(a1 + 512) = v43;
        }
        else
        {
          *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
        }
        *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
        *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
        *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
        *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
        *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
        *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
        *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
        *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
        *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
        *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
        *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
        *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
        v57 = v19[28];
        v58 = (_BYTE *)(a1 + v57);
        v59 = (_BYTE *)(a2 + v57);
        v60 = type metadata accessor for CommandOperation();
        v61 = *(_QWORD *)(v60 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
        {
          type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for CommandOperation?, (void (*)(uint64_t))type metadata accessor for CommandOperation);
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
        }
        else
        {
          v77 = v20;
          *v58 = *v59;
          v63 = *(int *)(v60 + 20);
          v64 = &v58[v63];
          v65 = &v59[v63];
          v66 = *(_OWORD *)&v59[v63 + 16];
          *v64 = *(_OWORD *)&v59[v63];
          v64[1] = v66;
          v67 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          v76 = (char *)v64 + v67;
          v68 = &v65[v67];
          v69 = type metadata accessor for UUID();
          (*(void (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)(v69 - 8) + 32))(v76, v68, v69);
          v70 = *(int *)(v60 + 24);
          v71 = &v58[v70];
          v72 = (uint64_t *)&v59[v70];
          v73 = *v72;
          if (*v72)
          {
            v74 = v72[1];
            *v71 = v73;
            v71[1] = v74;
          }
          else
          {
            *(_OWORD *)v71 = *(_OWORD *)v72;
          }
          v20 = v77;
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
        }
        *(_BYTE *)(a1 + v19[29]) = *(_BYTE *)(a2 + v19[29]);
        *(_BYTE *)(a1 + v19[30]) = *(_BYTE *)(a2 + v19[30]);
        *(_BYTE *)(a1 + v19[31]) = *(_BYTE *)(a2 + v19[31]);
        *(_BYTE *)(a1 + v19[32]) = *(_BYTE *)(a2 + v19[32]);
        *(_QWORD *)(a1 + v19[33]) = *(_QWORD *)(a2 + v19[33]);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v20 + 56))(a1, 0, 1, v19);
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t DialogActionContext.init(visiting:presentationType:environment:actionDelegate:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  char v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  id v81;
  id v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  char v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  void *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  void (*v149)(uint64_t);
  uint64_t v150;
  id v151;
  id v152;
  uint64_t result;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(unint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  void (*v169)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  _QWORD *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  int v192;
  char *v193;
  char *v194;
  unint64_t v195;
  unint64_t *v196;
  char *v197;
  uint64_t v198;
  int v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  __n128 v208;
  uint64_t v209;
  __int128 v210[4];
  char v211;
  _QWORD v212[24];
  _QWORD v213[24];

  v178 = a4;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
  MEMORY[0x1E0C80A78](v9, v10);
  v167 = (uint64_t)&v158 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v198 = (uint64_t)&v158 - v14;
  v170 = type metadata accessor for PlatformItemList.Item();
  v176 = *(_QWORD *)(v170 - 8);
  MEMORY[0x1E0C80A78](v170, v15);
  v161 = (uint64_t)&v158 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v159 = (uint64_t)&v158 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v160 = (uint64_t)&v158 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v193 = (char *)&v158 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v194 = (char *)&v158 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v207 = (uint64_t *)((char *)&v158 - v31);
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
  v33 = v32;
  v201 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v175 = (char *)&v158 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?, v36);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (unint64_t *)((char *)&v158 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v41, v42);
  v200 = (uint64_t *)((char *)&v158 - v43);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1E0C80A78](v44, v45);
  v164 = (uint64_t)&v158 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v171 = (uint64_t)&v158 - v49;
  v50 = a3[1];
  v165 = *a3;
  v166 = v50;
  v51 = (int *)type metadata accessor for DialogActionContext(0);
  v52 = (unint64_t)a5 + v51[6];
  v53 = type metadata accessor for DialogActionContext.CancelType(0);
  v202 = *(_QWORD *)(v53 - 8);
  v203 = v53;
  v163 = *(void (**)(unint64_t, uint64_t, uint64_t))(v202 + 56);
  v163(v52, 1, 1);
  v162 = v51[9];
  *(_QWORD *)((char *)a5 + v162) = 0;
  v177 = a1;
  *a5 = a1;
  v54 = MEMORY[0x1E0DEE9D8];
  a5[1] = MEMORY[0x1E0DEE9D8];
  v173 = a5 + 1;
  v55 = specialized Dictionary.init(dictionaryLiteral:)(v54);
  v179 = v51[7];
  *(_QWORD *)((char *)a5 + v179) = v55;
  v172 = (_QWORD *)((char *)a5 + v51[8]);
  *v172 = v54;
  v168 = a2;
  v56 = v177;
  swift_bridgeObjectRetain();
  if ((_BYTE)a2)
  {
    v57 = 1;
  }
  else
  {
    static Semantics.v5.getter();
    v57 = isLinkedOnOrAfter(_:)() ^ 1;
  }
  v192 = v57;
  v58 = (uint64_t)v193;
  v59 = v207;
  v190 = a5;
  v169 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56);
  v169(v171, 1, 1, v170);
  v199 = 0;
  v60 = 0;
  v61 = *(_QWORD *)(v56 + 16);
  v197 = (char *)v59 + 521;
  v62 = (uint64_t)v194;
  v174 = v194 + 521;
  v191 = v52;
  v195 = v61;
  v196 = v40;
  v205 = v33;
  while (1)
  {
    if (v60 == v61)
    {
      v63 = 1;
      v206 = v61;
    }
    else
    {
      if (v60 >= *(_QWORD *)(v177 + 16))
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      v64 = v60 + 1;
      v65 = v60;
      v66 = (uint64_t)&v175[*(int *)(v33 + 48)];
      outlined init with copy of PlatformItemList.Item(v177+ ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80))+ *(_QWORD *)(v176 + 72) * v60, v66);
      v67 = (uint64_t)v40 + *(int *)(v33 + 48);
      *v40 = v65;
      v68 = v66;
      v59 = v207;
      outlined init with take of TableCellFormula(v68, v67, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v63 = 0;
      v206 = v64;
    }
    v69 = v201;
    (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v40, v63, 1, v33);
    v70 = v200;
    outlined init with take of (offset: Int, element: PlatformItemList.Item)?((uint64_t)v40, (uint64_t)v200);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v69 + 48))(v70, 1, v33) == 1)
    {
      swift_bridgeObjectRelease();
      v62 = (uint64_t)v173;
      if (v168 != 1)
        goto LABEL_57;
      if (*v173 >> 62)
      {
        swift_bridgeObjectRetain();
        v154 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v154)
        {
LABEL_57:
          if (!(*(_QWORD *)v62 >> 62))
          {
            v125 = *(_QWORD *)((*(_QWORD *)v62 & 0xFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_59;
          }
LABEL_84:
          swift_bridgeObjectRetain();
          v125 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
LABEL_59:
          v126 = v164;
          outlined init with copy of PlatformItemList.Item?(v171, v164, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v126, 1, v170) == 1)
          {
            v127 = v168;
            outlined destroy of IntelligenceElement?(v126, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
            if (v127 != 1 && !v125)
              goto LABEL_62;
            if (((v127 != 1) & (v199 ^ 1)) == 0)
            {
              if (v125)
              {
                v128 = static Text.System.cancel.getter();
                goto LABEL_68;
              }
LABEL_62:
              v128 = static Text.System.ok.getter();
LABEL_68:
              v136 = v128;
              v137 = v129;
              LODWORD(v207) = v125 == 0;
              v138 = v125 != 0;
              v213[0] = v165;
              v213[1] = v166;
              v139 = v130 & 1;
              v212[0] = 0;
              v212[1] = 0;
              *(_QWORD *)&v210[0] = 0;
              v140 = Text.resolveString(in:with:idiom:)();
              v142 = v141;
              swift_release();
              swift_release();
              v143 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
              v144 = (void *)MEMORY[0x18D75CC88](v140, v142);
              swift_bridgeObjectRelease();
              v145 = objc_msgSend(v143, sel_initWithString_, v144);

              _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v213);
              outlined init with take of TableCellFormula((uint64_t)v213, (uint64_t)v212, (uint64_t (*)(_QWORD))type metadata accessor for Image.Resolved?);
              *(_QWORD *)&v210[0] = 1;
              *((_QWORD *)&v210[0] + 1) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
              memset(&v210[1], 0, 48);
              v211 = 0;
              v208 = 0uLL;
              v209 = 0;
              v146 = v159;
              PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)((uint64_t)v145, (uint64_t)v212, v210, &v208, 0, 0, v159);
              outlined consume of Text.Storage(v136, v137, v139);
              swift_bridgeObjectRelease();
              *(_BYTE *)(v146 + 520) = 4 * v138;
              *(_BYTE *)(v146 + 521) = (_BYTE)v207;
              v52 = v191;
              outlined destroy of IntelligenceElement?(v191, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
              outlined init with take of TableCellFormula(v146, v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
              v133 = v203;
              swift_storeEnumTagMultiPayload();
              ((void (*)(unint64_t, _QWORD, uint64_t, uint64_t))v163)(v52, 0, 1, v133);
              v62 = (uint64_t)v173;
              goto LABEL_69;
            }
            swift_release();
            swift_release();
            v133 = v203;
            if (v168 == 2)
            {
LABEL_69:
              v147 = v167;
              outlined init with copy of PlatformItemList.Item?(v52, v167, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v202 + 48))(v147, 1, v133) == 1)
              {
                swift_release();
                outlined destroy of IntelligenceElement?(v171, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
                v148 = &lazy cache variable for type metadata for DialogActionContext.CancelType?;
                v149 = (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType;
                v150 = v147;
              }
              else
              {
                if (swift_getEnumCaseMultiPayload() != 1)
                {
                  swift_release();
                  outlined destroy of IntelligenceElement?(v171, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
                  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v147, type metadata accessor for DialogActionContext.CancelType);
                }
                outlined init with take of TableCellFormula(v147, v161, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                v151 = PlatformItemList.Item.alertAction(delegate:)(0);
                if (v151)
                {
                  v152 = v151;
                  MEMORY[0x18D75CF58]();
                  if (*(_QWORD *)((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v62 & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();

                }
                swift_release();
                outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v161, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
                v148 = (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?;
                v150 = v171;
                v149 = (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item;
              }
              return outlined destroy of IntelligenceElement?(v150, v148, v149);
            }
            outlined destroy of IntelligenceElement?(v52, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
            v134 = v52;
            v135 = 1;
          }
          else
          {
            swift_release();
            swift_release();
            v131 = v126;
            v132 = v160;
            outlined init with take of TableCellFormula(v131, v160, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            outlined destroy of IntelligenceElement?(v52, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
            outlined init with take of TableCellFormula(v132, v52, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
            v133 = v203;
            swift_storeEnumTagMultiPayload();
            v134 = v52;
            v135 = 0;
          }
          ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v163)(v134, v135, 1, v133);
          goto LABEL_69;
        }
      }
      else if (*(_QWORD *)((*v173 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_57;
      }
      static os_log_type_t.fault.getter();
      type metadata accessor for OS_os_log();
      v124 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      goto LABEL_57;
    }
    v71 = *v70;
    outlined init with take of TableCellFormula((uint64_t)v70 + *(int *)(v33 + 48), (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v72 = *v197;
    v204 = v71;
    if ((v72 & 1) == 0)
      v199 |= *((_BYTE *)v59 + 520) == 1;
    v73 = (uint64_t)v59;
    v74 = v198;
    outlined init with copy of PlatformItemList.Item?(v52, v198, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 48))(v74, 1, v203);
    outlined destroy of IntelligenceElement?(v74, &lazy cache variable for type metadata for DialogActionContext.CancelType?, (void (*)(uint64_t))type metadata accessor for DialogActionContext.CancelType);
    outlined init with copy of PlatformItemList.Item(v73, v62);
    if (v75 == 1)
    {
      v76 = *(unsigned __int8 *)(v62 + 520);
      v77 = *v174;
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v33 = v205;
      if ((v77 & 1) == 0 && v76 == 4)
      {
        v78 = v171;
        outlined destroy of IntelligenceElement?(v171, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
        v79 = v207;
        outlined init with take of TableCellFormula((uint64_t)v207, v78, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
        v80 = v78;
        v59 = v79;
        v169(v80, 0, 1, v170);
        goto LABEL_7;
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v62, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      v33 = v205;
    }
    outlined init with copy of PlatformItemList.Item((uint64_t)v207, v58);
    if ((v192 & 1) != 0 && *(_QWORD *)(v58 + 408) <= 1uLL)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
      goto LABEL_45;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v58, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v81 = PlatformItemList.Item.alertAction(delegate:)(v178);
    if (v81)
      break;
LABEL_45:
    v59 = v207;
    v106 = v207[41];
    if (v106 >> 2 != 0xFFFFFFFF && (v106 & 0xC000000000000000) == 0x4000000000000000)
    {
      v107 = v207[38];
      v109 = v207[39];
      v108 = v207[40];
      v182 = (id)v207[37];
      v183 = v108;
      v110 = v207[42];
      v180 = v207[43];
      v181 = v110;
      v112 = v207[44];
      v111 = v207[45];
      v113 = v207[46];
      v114 = v207[47];
      v116 = v207[48];
      v115 = v207[49];
      outlined copy of PlatformItemList.Item.SystemItem(v182, v107, v109, v108, v106, v110, v180, v112, v111, v113, v114, v116, v115);
      v184 = v115;
      v185 = v116;
      v157 = v116;
      v186 = v114;
      v156 = v114;
      v187 = v113;
      v188 = v111;
      v155 = v111;
      v118 = v181;
      v117 = v182;
      v204 = v107;
      v189 = v109;
      v119 = v109;
      v120 = v183;
      v121 = v180;
      v122 = outlined copy of PlatformItemList.Item.SystemItem(v182, v107, v119, v183, v106, v181, v180, v112, v155, v113, v156, v157, v115);
      v123 = v172;
      MEMORY[0x18D75CF58](v122);
      if (*(_QWORD *)((*v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined consume of PlatformItemList.Item.SystemItem?(v117, v204, v189, v120, v106, v118, v121, v112, v188, v187, v186, v185, v184);
      v52 = v191;
      v58 = (uint64_t)v193;
      v59 = v207;
      v33 = v205;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v62 = (uint64_t)v194;
LABEL_7:
    v61 = v195;
    v40 = v196;
    v60 = v206;
  }
  v62 = (uint64_t)v81;
  v82 = v81;
  v83 = v173;
  MEMORY[0x18D75CF58]();
  if (*(_QWORD *)((*v83 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v83 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v84 = v190;
  v85 = v179;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v213[0] = *(_QWORD *)((char *)v84 + v85);
  v87 = v213[0];
  *(_QWORD *)((char *)v84 + v85) = 0x8000000000000000;
  v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v82);
  v89 = *(_QWORD *)(v87 + 16);
  v90 = (v88 & 1) == 0;
  v91 = v89 + v90;
  if (__OFADD__(v89, v90))
    goto LABEL_82;
  v92 = v88;
  if (*(_QWORD *)(v87 + 24) >= v91)
  {
    v95 = v207;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
LABEL_30:
      v95 = v207;
    }
    v96 = v204;
    v97 = (_QWORD *)v213[0];
    if ((v92 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(v213[0] + 56) + 8 * v52) = v204;
    }
    else
    {
      *(_QWORD *)(v213[0] + 8 * (v52 >> 6) + 64) |= 1 << v52;
      v98 = 8 * v52;
      *(_QWORD *)(v97[6] + v98) = v82;
      *(_QWORD *)(v97[7] + v98) = v96;
      v99 = v97[2];
      v100 = __OFADD__(v99, 1);
      v101 = v99 + 1;
      if (v100)
        goto LABEL_83;
      v97[2] = v101;
    }
    *(_QWORD *)((char *)v190 + v179) = v97;
    swift_bridgeObjectRelease();
    v102 = v95[60];
    v58 = (uint64_t)v193;
    if (v102)
    {
      v103 = v95[59];
      v104 = v95[61];
      v105 = *((unsigned __int8 *)v95 + 496);
      if ((v103 == 13 && v102 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && !v104
        && !v105)
      {
        v52 = v191;
        if (*(_QWORD *)((char *)v190 + v162))

        else
          *(_QWORD *)((char *)v190 + v162) = v62;
        goto LABEL_45;
      }

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v52 = v191;
    goto LABEL_45;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v91, isUniquelyReferenced_nonNull_native);
  v93 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v82);
  if ((v92 & 1) == (v94 & 1))
  {
    v52 = v93;
    goto LABEL_30;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char *v12;
  id v13;
  unint64_t v14;
  int v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  int v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v3 = type metadata accessor for PlatformItemList.Item();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)aBlock - v10;
  v13 = 0;
  v14 = *(_QWORD *)(v1 + 328);
  if (v14 >> 2 != 0xFFFFFFFF && (v14 & 0xC000000000000000) == 0x4000000000000000)
    return v13;
  if (*(_QWORD *)v1)
  {

    outlined init with copy of PlatformItemList.Item(v1, (uint64_t)v12);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    outlined init with copy of PlatformItemList.Item(v1, (uint64_t)aBlock - v10);
    v16 = v12[520];
    v17 = v12[521];
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
    v13 = 0;
    if ((v17 & 1) != 0 || v16 != 4)
      return v13;
  }
  if (a1)
  {
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = partial apply for closure #1 in PlatformItemList.Item.alertAction(delegate:);
    if ((*(_BYTE *)(v1 + 521) & 1) != 0)
      goto LABEL_11;
LABEL_14:
    v28 = *(unsigned __int8 *)(v1 + 520);
    if (v28 == 4)
      v20 = 1;
    else
      v20 = 2 * (v28 == 1);
    v21 = *(id *)v1;
    if (*(_QWORD *)v1)
      goto LABEL_12;
LABEL_18:
    swift_retain();
    v26 = 0;
    goto LABEL_19;
  }
  outlined init with copy of PlatformItemList.Item(v1, (uint64_t)v7);
  v27 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v18 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v7, v18 + v27, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
  v19 = partial apply for closure #2 in PlatformItemList.Item.alertAction(delegate:);
  if ((*(_BYTE *)(v1 + 521) & 1) == 0)
    goto LABEL_14;
LABEL_11:
  v20 = 0;
  v21 = *(id *)v1;
  if (!*(_QWORD *)v1)
    goto LABEL_18;
LABEL_12:
  v22 = objc_msgSend(v21, sel_string);
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  swift_retain();
  v26 = (void *)MEMORY[0x18D75CC88](v23, v25);
  swift_bridgeObjectRelease();
LABEL_19:
  aBlock[4] = v19;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed _UITabAction) -> ();
  aBlock[3] = &block_descriptor_30;
  v29 = _Block_copy(aBlock);
  swift_release();
  v30 = objc_msgSend((id)objc_opt_self(), sel_actionWithTitle_style_handler_, v26, v20, v29);
  _Block_release(v29);

  v31 = *(_QWORD *)(v1 + 408);
  if (v31)
  {
    if (v31 == 1)
      v32 = *(_QWORD *)(v1 + 616) != 0;
    else
      v32 = *(unsigned __int8 *)(v1 + 56);
  }
  else
  {
    v32 = 0;
  }
  objc_msgSend(v30, sel_setEnabled_, v32);
  v13 = v30;
  specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v13, v1);

  swift_release();
  return v13;
}

uint64_t closure #1 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 80))(a1);
    return swift_release();
  }
  return result;
}

void closure #2 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(a2 + 408);
  if ((unint64_t)v2 >= 2)
  {
    v3 = swift_retain();
    v2(v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
  }
}

void type metadata accessor for (offset: Int, element: PlatformItemList.Item)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item))
  {
    type metadata accessor for PlatformItemList.Item();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item));
  }
}

uint64_t outlined init with take of (offset: Int, element: PlatformItemList.Item)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: PlatformItemList.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Image.Resolved?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Image.Resolved?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  }
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t sub_187485894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for PlatformItemList.Item();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);

  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(_QWORD *)(v3 + 184);
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    v6 = *(unsigned __int8 *)(v3 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v3 + 64), v6);
      v4 = *(_QWORD *)(v3 + 184);
      v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL)
      outlined consume of AccessibilityImageLabel(*(_QWORD *)(v3 + 168), *(_QWORD *)(v3 + 176), v4);
    swift_unknownObjectRelease();
    swift_release();

  }
  if (*(_QWORD *)(v3 + 256))
  {
    swift_bridgeObjectRelease();
    v7 = *(void **)(v3 + 264);
    if ((unint64_t)v7 >= 2)

    swift_release();
    swift_release();
  }
  v8 = *(_QWORD *)(v3 + 328);
  if (v8 >> 2 != 0xFFFFFFFF)
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v3 + 296), *(_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 312), *(_QWORD *)(v3 + 320), v8, *(_QWORD *)(v3 + 336), *(_QWORD *)(v3 + 344), *(_QWORD *)(v3 + 352), *(_QWORD *)(v3 + 360), *(_QWORD *)(v3 + 368), *(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 384), *(_QWORD *)(v3 + 392));
  v9 = *(_QWORD *)(v3 + 408);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_20;
    swift_release();
  }
  if (*(_QWORD *)(v3 + 424))
    swift_release();
  if (*(_QWORD *)(v3 + 440))
    swift_release();
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 504))
    swift_release();
  if (*(_QWORD *)(v3 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(v3 + 552) != 1)
  {
    swift_release();
    if (*(_QWORD *)(v3 + 560))
      swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v3 + *(int *)(v1 + 112);
  v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), *(_BYTE *)(v12 + 16));
    swift_bridgeObjectRelease();
    v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
    if (*(_QWORD *)(v10 + *(int *)(v11 + 24)))
      swift_release();
  }
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8) + 80);
  closure #2 in PlatformItemList.Item.alertAction(delegate:)(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_187485B7C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PlatformItemList.Item.alertAction(delegate:)(uint64_t a1)
{
  return closure #1 in PlatformItemList.Item.alertAction(delegate:)(a1);
}

ValueMetadata *type metadata accessor for SearchFieldConfigurationTokenFieldStyle()
{
  return &type metadata for SearchFieldConfigurationTokenFieldStyle;
}

uint64_t associated type witness table accessor for TokenFieldStyle.Body : View in SearchFieldConfigurationTokenFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v28 = a2;
  v3 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - v14;
  type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v11, type metadata accessor for TokenFieldConfiguration);
  closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)(a1, (uint64_t)&v29);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, type metadata accessor for TokenFieldConfiguration);
  v24 = &v11[*(int *)(v8 + 36)];
  v25 = v33;
  *(_QWORD *)v24 = v29;
  *(_OWORD *)(v24 + 8) = v30;
  *(_OWORD *)(v24 + 24) = v31;
  *(_OWORD *)(v24 + 40) = v32;
  *((_QWORD *)v24 + 7) = v25;
  outlined init with take of TableCellFormula((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v19, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v23, v28, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<SearchFieldConfigurationTokenFieldStyle.BodyView<ForEach<Binding<[AnyToken]>, AnyHashable, ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, PickerStyleWriter<SectionPickerStyle>>, StyleContextWriter<MenuStyleContext>>);
}

__n128 closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 result;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t KeyPath;
  __n128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v34 = a1;
  v4 = type metadata accessor for TokenFieldConfiguration(0);
  v35 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v35 + 64);
  MEMORY[0x1E0C80A78](v4, v6);
  v33 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<SearchAttributedString>, (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (uint64_t *)((char *)&v33 - v11);
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], v7);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (uint64_t *)((char *)&v33 - v17);
  outlined init with copy of Binding<AnyToken>(a1, (uint64_t)&v33 - v17, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  KeyPath = swift_getKeyPath();
  v19 = (char *)v18 + *(int *)(v15 + 32);
  v20 = (char *)v12 + *(int *)(v9 + 32);
  v21 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v19, v21);
  type metadata accessor for _ConditionalContent<_ConditionalContent<TupleView<(ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>>)>>, TupleView<(VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>?, ForEach<Slice<TableColumnCollection>, UUID, VStack<_ConditionalContent<SortableTableHeaderButton, StaticTableHeaderButton>>>)>>(0, &lazy cache variable for type metadata for WritableKeyPath<AttributedString, SearchAttributedString>, v13, (uint64_t (*)(uint64_t))type metadata accessor for SearchAttributedString, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC870]);
  lazy protocol witness table accessor for type WritableKeyPath<AttributedString, SearchAttributedString> and conformance WritableKeyPath<A, B>();
  v22 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *v12 = *v18;
  v12[1] = v22;
  swift_retain();
  swift_release();
  outlined destroy of Binding<AnyToken>((uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for Binding<AttributedString>, (uint64_t)v13, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  KeyPath = swift_getKeyPath();
  v23 = SearchAttributedString.tokens.getter();
  type metadata accessor for WritableKeyPath<SearchAttributedString, [AnyToken]>();
  lazy protocol witness table accessor for type WritableKeyPath<SearchAttributedString, [AnyToken]> and conformance WritableKeyPath<A, B>();
  v24 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  v25 = *v12;
  swift_retain();
  swift_release();
  outlined destroy of Binding<AnyToken>((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for Binding<SearchAttributedString>, (uint64_t)type metadata accessor for SearchAttributedString, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  v36 = v25;
  v37 = v24;
  v38 = v23;
  v26 = v33;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v33, type metadata accessor for TokenFieldConfiguration);
  v27 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v28 = swift_allocObject();
  outlined init with take of TableCellFormula(v26, v28 + v27, type metadata accessor for TokenFieldConfiguration);
  type metadata accessor for Binding<[AnyToken]>();
  type metadata accessor for ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  lazy protocol witness table accessor for type Binding<[AnyToken]> and conformance <A> Binding<A>();
  lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<AnyView>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Binding<AnyToken> and conformance <A> Binding<A>();
  ForEach<>.init(_:content:)();
  v29 = v43;
  result = v40;
  v31 = v41;
  v32 = v42;
  *(_QWORD *)a2 = KeyPath;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v31;
  *(_OWORD *)(a2 + 40) = v32;
  *(_QWORD *)(a2 + 56) = v29;
  return result;
}

uint64_t key path setter for AttributedString.search : AttributedString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, v8);
  v9 = type metadata accessor for AttributedString();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v7, v9);
}

uint64_t implicit closure #1 in closure #1 in SearchFieldConfigurationTokenFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[88];
  _OWORD v9[5];
  uint64_t v10;
  _OWORD v11[5];
  uint64_t v12;

  outlined init with copy of Binding<AnyToken>(a1, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v9[3] = v11[3];
  v9[4] = v11[4];
  v10 = v12;
  v9[0] = v11[0];
  v9[1] = v11[1];
  v9[2] = v11[2];
  outlined init with copy of Binding<AnyToken>((uint64_t)v9, (uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  v5 = type metadata accessor for TokenFieldConfiguration(0);
  v6 = (*(uint64_t (**)(_BYTE *))(a2 + *(int *)(v5 + 28)))(v8);
  outlined destroy of Binding<AnyToken>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  *a3 = v6;
  a3[1] = (uint64_t)closure #1 in View.forcePlatformItem();
  a3[2] = 0;
  return outlined destroy of Binding<AnyToken>((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for Binding<AnyToken>, (uint64_t)&type metadata for AnyToken, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
}

void static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  int v8;
  _UNKNOWN **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  uint64_t v18;
  _QWORD v19[7];
  int OffsetAttribute2;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  _UNKNOWN **v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ValueMetadata *v37;
  int v38;
  _UNKNOWN **v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v23 = a5;
  v46 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_UNKNOWN ***)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_DWORD *)(a2 + 80);
  v37 = *(ValueMetadata **)a2;
  v38 = v8;
  v40 = *(_OWORD *)(a2 + 24);
  v39 = v9;
  v41 = v10;
  v42 = v11;
  v21 = *(_OWORD *)(a2 + 56);
  v43 = v21;
  v44 = *(_QWORD *)(a2 + 72);
  v45 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = v11;
  swift_bridgeObjectRetain();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(2u);
  v33[0] = v7;
  type metadata accessor for SearchFieldConfigurationTokenFieldStyle.BodyView(255, a3, a4, v13);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for TokenFieldConfiguration(0) - 8) + 64))
    closure #1 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(1, a3, a4, v14);
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v33[0] = v7;
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64))
    closure #2 in static SearchFieldConfigurationTokenFieldStyle.BodyView._makeView(view:inputs:)(1, a3, a4, v15);
  v16 = AGGraphCreateOffsetAttribute2();
  v19[4] = v41;
  v19[5] = v42;
  v24 = v37;
  LODWORD(v25) = v38;
  v26 = v39;
  v27 = v40;
  v28 = v41;
  v29 = v42;
  v30 = v43;
  v31 = v44;
  v32 = v45;
  v17 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(v16, (uint64_t *)&v24, 1, (uint64_t)v33);
  v19[6] = v19;
  v19[1] = v34;
  v19[2] = v35;
  v19[3] = v36;
  MEMORY[0x1E0C80A78](v17, v18);
  v24 = &type metadata for SearchTokenPlatformItemListFlags;
  v25 = a3;
  v26 = &protocol witness table for SearchTokenPlatformItemListFlags;
  *(_QWORD *)&v27 = a4;
  type metadata accessor for PlatformItemListGenerator();
}

