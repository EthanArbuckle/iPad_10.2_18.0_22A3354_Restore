uint64_t destroy for CommandGroupPlacementBox(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined consume of Text.Storage(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  outlined copy of Text.Storage(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for CommandGroupPlacementBox(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v8 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandGroupPlacementBox()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A61AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, type metadata accessor for CommandGroupPlacement);
}

uint64_t storeEnumTagSinglePayload for CommandGroupPlacementBox()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A61B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, type metadata accessor for CommandGroupPlacement);
}

uint64_t type metadata accessor for CommandGroupPlacementBox(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandGroupPlacementBox);
}

uint64_t type metadata completion function for CommandGroupPlacementBox()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CommandGroupPlacement(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CommandGroupPlacementBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, type metadata accessor for CommandGroupPlacementBox, (uint64_t)&protocol conformance descriptor for CommandGroupPlacementBox);
}

uint64_t type metadata accessor for CommandGroup.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CommandGroup.MakeList);
}

uint64_t sub_187A61BC8()
{
  uint64_t v0;

  outlined consume of Environment<DismissWindowAction>.Content(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_BYTE *)(v0 + 33));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in InspectorCommands.body.getter()
{
  uint64_t v0;

  return closure #1 in closure #1 in InspectorCommands.body.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t sub_187A61C20()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.disabled(_:)(_BYTE *a1)
{
  uint64_t v1;

  return closure #1 in View.disabled(_:)(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_187A61C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int EnumCaseMultiPayload;
  unint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for CommandGroupPlacement(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(0);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = v0 + v3;
  outlined consume of Text.Storage(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
  swift_bridgeObjectRelease();
  v9 = v8 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v12 = v11;
  v13 = v0 + v7 + *(int *)(v11 + 36);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_BYTE *)(v13 + 16));

LABEL_6:
      swift_release();
      break;
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v13, *(_QWORD *)(v13 + 8), *(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24), *(_WORD *)(v13 + 32), *(_BYTE *)(v13 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v13 + 40), *(_QWORD *)(v13 + 48), *(_QWORD *)(v13 + 56), *(_QWORD *)(v13 + 64), *(_WORD *)(v13 + 72), *(_BYTE *)(v13 + 74));
      v15 = v13 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v16 = type metadata accessor for URL();
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
      break;
    case 0:
      goto LABEL_6;
  }
  outlined consume of Text.Storage(*(_QWORD *)(v0 + v7 + *(int *)(v12 + 40)), *(_QWORD *)(v0 + v7 + *(int *)(v12 + 40) + 8), *(_BYTE *)(v0 + v7 + *(int *)(v12 + 40) + 16));
  swift_bridgeObjectRelease();
  type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(0);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  return specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(a1, a2, *(_BYTE *)(v2 + 16), v2 + v6, v2 + ((v6 + v7 + v9) & ~v9));
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>, (uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)&protocol witness table for AllPlatformItemListFlags, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
  }
}

void type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>));
  }
}

uint64_t sub_187A62018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CommandOperation();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v0 + v3 + *(int *)(v1 + 20);
  outlined consume of Text.Storage(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_BYTE *)(v4 + 16));
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  if (*(_QWORD *)(v0 + v3 + *(int *)(v1 + 24)))
    swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    v3[1] = &protocol witness table for PlatformItemListTransformModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void base witness table accessor for _AttributeBody in CommandGroup<A>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

void static CommandGroupPlacement.singleWindowList.getter()
{
  static CommandGroupPlacement.windowList.getter();
}

void static CommandGroupPlacement.appShortcuts.getter()
{
  static CommandGroupPlacement.windowList.getter();
}

uint64_t UIKitTextInput.update(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  uint64_t result;

  swift_retain();
  swift_retain();
  v5 = specialized NSTextAlignment.init(in:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 128))(v5, a2, a3);
  EnvironmentValues.minimumScaleFactor.getter();
  v7 = v6;
  static MinimumScaleFactorKey.defaultValue.getter();
  v9 = v8;
  if (v7 < v8)
  {
    EnvironmentValues.effectiveFont.getter();
    v10 = (void *)Font.platformFont(in:)();
    swift_release();
    CTFontRef.pointSize.getter();
    v12 = v11;

    (*(void (**)(uint64_t, uint64_t, double))(a3 + 152))(a2, a3, v7 * v12);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a2, a3);
  if (v7 < v9 != (result & 1))
    return (*(uint64_t (**)(BOOL, uint64_t, uint64_t))(a3 + 176))(v7 < v9, a2, a3);
  return result;
}

uint64_t UIKitTextInputTraits.updateTraits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = MEMORY[0x1E0CE53E0];
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>, (uint64_t)&type metadata for KeyboardTypeKey, (uint64_t)&protocol witness table for KeyboardTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 64))(v12, a2, a3);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>, (uint64_t)&type metadata for AutocorrectionTypeKey, (uint64_t)&protocol witness table for AutocorrectionTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v6);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 64))(v12, a2, a3);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>, (uint64_t)&type metadata for AutocorrectionTypeKey, (uint64_t)&protocol witness table for AutocorrectionTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v6);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v7 = 1;
  if ((v12 & 1) == 0)
    v7 = 2;
  if (v12 == 2)
    v8 = 0;
  else
    v8 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(v8, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v13)
  {
    v9 = MEMORY[0x18D75CC88]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(v9, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>, (uint64_t)&type metadata for TextInputAutocapitalizationKey, (uint64_t)&protocol witness table for TextInputAutocapitalizationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a3 + 16))(v12, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, (uint64_t)&type metadata for EnvironmentValues.SubmitLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.SubmitLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v10 = qword_187C829F8[(char)v12];
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
  if (result != v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(v10, a2, a3);
  return result;
}

void UITextInputTraits_Private.updatePrivateTraits(in:)(uint64_t a1)
{
  void *v1;
  unsigned int v2;
  unsigned __int16 v3;
  unsigned __int8 v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v2 = v3 | (v4 << 16);
  if (v3 != 2)
  {
    if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceEnableDictation) & 1) != 0)
    {
      if ((v3 & 1) == objc_msgSend(v1, sel_forceEnableDictation))
      {
LABEL_10:
        if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        {
          if ((v3 & 1) != 0)
          {
LABEL_16:
            if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceSpellingDictation) & 1) != 0)
            {
              if (objc_msgSend(v1, sel_forceSpellingDictation) == (unsigned __int16)(v3 & 0x100) >> 8)
              {
LABEL_21:
                if ((objc_msgSend(v1, sel_respondsToSelector_, sel_preferOnlineDictation) & 1) != 0)
                {
                  if (objc_msgSend(v1, sel_preferOnlineDictation) == (v2 & 0x10000) >> 16)
                    return;
                }
                else if ((v2 & 0x10000) == 0)
                {
                  return;
                }
                _UITextInputTraitSetPreferOnlineDictation(v1, HIWORD(v2) & 1);
                return;
              }
            }
            else if ((v3 & 0x100) == 0)
            {
              goto LABEL_21;
            }
            _UITextInputTraitSetForceSpellingDictation(v1, (v2 >> 8) & 1);
            goto LABEL_21;
          }
LABEL_15:
          _UITextInputTraitSetForceDisableDictation(v1, (v3 & 1) == 0);
          goto LABEL_16;
        }
LABEL_14:
        if (((v2 ^ objc_msgSend(v1, sel_forceDisableDictation)) & 1) != 0)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else if ((v3 & 1) == 0)
    {
      if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
    _UITextInputTraitSetForceEnableDictation(v1, v3 & 1);
    goto LABEL_10;
  }
}

void UIKitTextView.enqueueScrollIfNeeded()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v21;
  void (*v22)(uint64_t);
  uint64_t v23;

  v1 = objc_msgSend(v0, sel_superview);
  if (v1)
  {
    v2 = v1;
    while (1)
    {
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
        break;
      v3 = objc_msgSend(v2, sel_superview);

      v2 = v3;
      if (!v3)
        return;
    }
    v4 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v5 = *MEMORY[0x1E0DC4E70];
    v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    v22 = partial apply for closure #1 in UIKitTextView.enqueueScrollIfNeeded();
    v23 = v8;
    v9 = MEMORY[0x1E0C809B0];
    v18 = MEMORY[0x1E0C809B0];
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    v21 = &block_descriptor_79;
    v10 = _Block_copy(&v18);
    swift_release();
    v11 = objc_msgSend(v4, sel_addObserverForName_object_queue_usingBlock_, v5, 0, 0, v10);
    _Block_release(v10);
    *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_didShowObserver] = v11;
    swift_unknownObjectRelease();
    v12 = *MEMORY[0x1E0DC4FE0];
    v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v4;
    v22 = partial apply for closure #2 in UIKitTextView.enqueueScrollIfNeeded();
    v23 = v14;
    v18 = v9;
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    v21 = &block_descriptor_13_3;
    v15 = _Block_copy(&v18);
    v16 = v4;
    swift_release();
    v17 = objc_msgSend(v16, sel_addObserverForName_object_queue_usingBlock_, v12, 0, 0, v15);

    _Block_release(v15);
    *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_willHideObserver] = v17;
    swift_unknownObjectRelease();
  }
}

uint64_t UITextView.range.getter()
{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  result = (uint64_t)objc_msgSend(v0, sel_text);
  if (result)
  {
    v2 = (void *)result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      objc_msgSend(v0, sel_selectedRange);
      v7 = Range<>.init(_:in:)();
      v9 = v8;
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        return 15;
      else
        return v7;
    }
    else
    {
      swift_bridgeObjectRelease();
      return 15;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for UIKitTextInputTraits.uiAutocapitalizationType.setter in conformance UITextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setAutocapitalizationType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiAutoCorrectionType.setter in conformance UITextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setAutocorrectionType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiKeyboardType.setter in conformance UITextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setKeyboardType_, a1);
}

void protocol witness for UIKitTextInputTraits.uiTextContentType.setter in conformance UITextView(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setTextContentType_, a1);

}

id protocol witness for UIKitTextInputTraits.uiReturnKeyType.getter in conformance UITextView()
{
  void *v0;

  return objc_msgSend(v0, sel_returnKeyType);
}

id protocol witness for UIKitTextInputTraits.uiReturnKeyType.setter in conformance UITextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setReturnKeyType_, a1);
}

uint64_t UITextField.uiSelectedRange.getter()
{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  result = (uint64_t)objc_msgSend(v0, sel_text);
  v2 = (void *)result;
  if (result)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v3 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      objc_msgSend(v0, sel_selectionRange);
      v7 = Range<>.init(_:in:)();
      v9 = v8;
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
        return 15;
      else
        return v7;
    }
    else
    {
      swift_bridgeObjectRelease();
      return 15;
    }
  }
  return result;
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance UITextField(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setAttributedText_, a1);

}

void protocol witness for UIKitTextInput.uiAttributedPlaceholder.setter in conformance UITextField(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setAttributedPlaceholder_, a1);

}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.getter in conformance UITextField()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_defaultTextAttributes);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void protocol witness for UIKitTextInput.uiDefaultTextAttributes.setter in conformance UITextField()
{
  void *v0;
  Class isa;

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setDefaultTextAttributes_, isa);

}

id protocol witness for UIKitTextInput.uiMinimumFontSize.setter in conformance UITextField()
{
  void *v0;

  return objc_msgSend(v0, sel_setMinimumFontSize_);
}

id protocol witness for UIKitTextInput.uiAdjustsFontSizeToFitWidth.getter in conformance UITextField()
{
  void *v0;

  return objc_msgSend(v0, sel_adjustsFontSizeToFitWidth);
}

id protocol witness for UIKitTextInput.uiAdjustsFontSizeToFitWidth.setter in conformance UITextField(char a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setAdjustsFontSizeToFitWidth_, a1 & 1);
}

uint64_t protocol witness for UIKitTextInput.uiSelectedRange.getter in conformance UITextField()
{
  return UITextField.uiSelectedRange.getter();
}

id protocol witness for UIKitTextInput.uiSelectedRange.setter in conformance UITextField(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = objc_msgSend(v3, sel_text);
  if (result)
  {
    v8 = result;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if ((a3 & 1) != 0)
    {
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
      lazy protocol witness table accessor for type String and conformance String();
      v12 = _NSRange.init<A, B>(_:in:)();
      return objc_msgSend(v3, sel_setSelectionRange_, v12, v13, v9, v11, a1, a2);
    }
  }
  return result;
}

id protocol witness for UIKitTextInput.uiAttributedText.getter in conformance VerticalTextView()
{
  void *v0;

  return objc_msgSend(v0, sel_attributedText);
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3)
{
  protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(a1, a2, a3, (SEL *)&selRef_setAttributedText_);
}

void protocol witness for UIKitTextInput.uiAttributedPlaceholder.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3)
{
  protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(a1, a2, a3, (SEL *)&selRef_setAttributedPlaceholder_);
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v4;

  if (a1)
  {
    objc_msgSend(v4, *a4);

  }
}

id protocol witness for UIKitTextInput.uiInputAccessoryView.getter in conformance VerticalTextView()
{
  void *v0;

  return objc_msgSend(v0, sel_inputAccessoryView);
}

void protocol witness for UIKitTextInput.uiInputAccessoryView.setter in conformance VerticalTextView(void *a1)
{
  void *v1;

  objc_msgSend(v1, sel_setInputAccessoryView_, a1);

}

id protocol witness for UIKitTextInput.uiTextAlignment.setter in conformance VerticalTextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setTextAlignment_, a1);
}

uint64_t protocol witness for UIKitTextInput.uiSelectedRange.getter in conformance VerticalTextView()
{
  return UITextView.range.getter();
}

id protocol witness for UIKitTextInput.uiSelectedRange.setter in conformance VerticalTextView(id result, uint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a3 & 1) == 0)
  {
    result = objc_msgSend(v3, sel_text);
    if (result)
    {
      v4 = result;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
      lazy protocol witness table accessor for type String and conformance String();
      v8 = _NSRange.init<A, B>(_:in:)();
      return objc_msgSend(v3, sel_setSelectedRange_, v8, v9, v5, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

id protocol witness for UIKitTextInput.uiTextAffinity.getter in conformance VerticalTextView()
{
  void *v0;

  return objc_msgSend(v0, sel_selectionAffinity);
}

id protocol witness for UIKitTextInput.uiTextAffinity.setter in conformance VerticalTextView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_setSelectionAffinity_, a1);
}

void closure #1 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](v4);
  if (v5)
  {
    v6 = (void *)v5;
    swift_beginAccess();
    v7 = MEMORY[0x18D760234](a3 + 16);
    if (v7)
    {
      v8 = (void *)v7;
      objc_msgSend(v6, sel_bounds);
      objc_msgSend(v8, sel_convertRect_fromCoordinateSpace_, v6);
      EdgeInsets.init(_all:)();
      CGRect.inset(by:)();
      objc_msgSend(v8, sel_scrollRectToVisible_animated_, 1);

      v6 = v8;
    }

  }
}

void closure #2 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x18D760234](v4);
  if (v5)
  {
    v6 = (char *)v5;
    if (*(_QWORD *)(v5 + OBJC_IVAR____TtC7SwiftUI13UIKitTextView_didShowObserver))
    {
      objc_msgSend(a3, sel_removeObserver_);
      if (*(_QWORD *)&v6[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_willHideObserver])
      {
        objc_msgSend(a3, sel_removeObserver_);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

id UIKitTextView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitTextView()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>, (uint64_t)&type metadata for KeyboardTypeKey, (uint64_t)&protocol witness table for KeyboardTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>, (uint64_t)&type metadata for AutocorrectionTypeKey, (uint64_t)&protocol witness table for AutocorrectionTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>, (uint64_t)&type metadata for TextInputAutocapitalizationKey, (uint64_t)&protocol witness table for TextInputAutocapitalizationKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, (uint64_t)&type metadata for EnvironmentValues.SubmitLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.SubmitLabelKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187A63954()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A63978()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in UIKitTextView.enqueueScrollIfNeeded()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_187A639AC()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1)
{
  uint64_t v1;

  closure #2 in UIKitTextView.enqueueScrollIfNeeded()(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransactionalPreferenceTransformModifier<A>()
{
  return &protocol witness table for TransactionalPreferenceTransformModifier<A>;
}

uint64_t View.transactionalPreferenceTransform<A>(key:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a2;
  v11[1] = a3;
  v9 = type metadata accessor for TransactionalPreferenceTransformModifier(0, a5, a7, a4);
  swift_retain();
  MEMORY[0x18D75B4AC](v11, a4, v9, a6);
  return swift_release();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance IsAnimated<A>()
{
  return specialized IsAnimated.description.getter();
}

uint64_t sub_187A63B1C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

unint64_t specialized IsAnimated.description.getter()
{
  Swift::String v0;

  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t Gesture.allowsIncompleteEventSequences()()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = type metadata accessor for AllowsIncompleteEventSequences(0, AssociatedTypeWitness, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowsIncompleteEventSequences<A>, v3);
  return Gesture.modifier<A>(_:)();
}

uint64_t type metadata accessor for AllowsIncompleteEventSequences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AllowsIncompleteEventSequences);
}

uint64_t sub_187A63C68()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for AllowsIncompleteEventSequences(255, AssociatedTypeWitness, v1, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AllowsIncompleteEventSequences<A>, v5);
  v3 = type metadata accessor for ModifierGesture();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E88], v3);
}

uint64_t static AllowsIncompleteEventSequences._makeGesture(modifier:inputs:body:)(uint64_t a1, __int128 *a2, void (*a3)(_OWORD *))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[6];
  _OWORD v9[2];
  __int128 v10;
  _BYTE v11[64];
  _BYTE v12[44];
  __int128 v13;
  _BYTE v14[64];
  _BYTE v15[44];

  *(_OWORD *)&v15[28] = *(__int128 *)((char *)a2 + 108);
  v4 = a2[5];
  *(_OWORD *)&v14[48] = a2[4];
  *(_OWORD *)v15 = v4;
  *(_OWORD *)&v15[16] = a2[6];
  v5 = a2[1];
  v13 = *a2;
  *(_OWORD *)v14 = v5;
  v6 = a2[3];
  *(_OWORD *)&v14[16] = a2[2];
  *(_OWORD *)&v14[32] = v6;
  *(_QWORD *)&v10 = v13;
  DWORD2(v10) = DWORD2(v13);
  *(_QWORD *)v11 = *(_QWORD *)v14;
  *(_OWORD *)&v11[8] = *(_OWORD *)&v14[8];
  *(_OWORD *)&v11[24] = *(_OWORD *)&v14[24];
  *(_OWORD *)&v11[40] = *(_OWORD *)&v14[40];
  *(_QWORD *)&v11[56] = *(_QWORD *)&v14[56];
  *(_OWORD *)&v12[8] = *(_OWORD *)&v15[8];
  *(_OWORD *)&v12[24] = *(_OWORD *)&v15[24];
  *(_DWORD *)v12 = *(_DWORD *)v15;
  *(_DWORD *)&v12[40] = *(_DWORD *)&v15[40] | 2;
  v8[4] = *(_OWORD *)&v11[48];
  v8[5] = *(_OWORD *)v12;
  v9[0] = *(_OWORD *)&v12[16];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v12[28];
  v8[0] = v10;
  v8[1] = *(_OWORD *)v11;
  v8[2] = *(_OWORD *)&v11[16];
  v8[3] = *(_OWORD *)&v11[32];
  outlined retain of _GestureInputs((uint64_t)&v13);
  outlined retain of _GestureInputs((uint64_t)&v10);
  a3(v8);
  outlined release of _GestureInputs((uint64_t)&v10);
  return outlined release of _GestureInputs((uint64_t)&v10);
}

void __swiftcall SquareBorderTextFieldStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void SquareBorderTextFieldStyle._body(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in SquareBorderTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SquareBorderTextFieldStyle()
{
  return &type metadata for SquareBorderTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent)
  {
    v1 = type metadata accessor for SquareBorderTextFieldStyle.BodyContent();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SquareBorderTextFieldStyle.BodyContent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent);
  }
  return result;
}

uint64_t type metadata accessor for SquareBorderTextFieldStyle.BodyContent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SquareBorderTextFieldStyle.BodyContent;
  if (!type metadata singleton initialization cache for SquareBorderTextFieldStyle.BodyContent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t getEnumTagSinglePayload for SquareBorderTextFieldStyle.BodyContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A63EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SquareBorderTextFieldStyle.BodyContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A63F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for TextField);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t associated type witness table accessor for View.Body : View in SquareBorderTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ListMenuPickerStyle()
{
  return &type metadata for ListMenuPickerStyle;
}

void static ListMenuPickerStyle._makeView<A>(value:inputs:)()
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _PickerValue();
}

void sub_187A640B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int OffsetAttribute2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for PickerStyleConfiguration(0, v1, v0, v2) - 8) + 64))
    closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  MenuPickerStyle.Body.init(configuration:isBordered:)(OffsetAttribute2, 1);
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
  type metadata accessor for PickerStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v0, v5);
  v7 = type metadata accessor for PickerContentView(255, v1, v0, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  type metadata accessor for Menu();
}

void sub_187A64208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_UNKNOWN **a27,uint64_t a28,uint64_t a29,_UNKNOWN **a30,_UNKNOWN **a31)
{
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  v35 = type metadata accessor for ModifiedContent();
  a30 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  a31 = &protocol witness table for SectionStyleModifier<A>;
  v36 = MEMORY[0x1E0CE2E70];
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v33, &a30);
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, v32, MEMORY[0x1E0CE4530]);
  a28 = v37;
  a29 = v38;
  MEMORY[0x18D75FFDC](v36, v31, &a28);
  a26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Menu<A, B>, a1);
  a27 = &protocol witness table for MenuStyleModifier<A>;
  MEMORY[0x18D75FFDC](v36, v35, &a26);
  type metadata accessor for GroupElementsOfContent();
}

void sub_187A642E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Group();
  v3 = type metadata accessor for PopUpButton(255, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopUpButton<A>, v3);
  type metadata accessor for GroupElementsOfContent();
}

void sub_187A64334()
{
  type metadata accessor for Group();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE6398]);
  type metadata accessor for StaticIf();
}

void sub_187A6437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;

  v11 = type metadata accessor for MenuPickerStyle.Body(0, v5, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuPickerStyle.Body<A>, v11);
  _GraphValue.init<A>(_:)();
  v12 = *(_DWORD *)(v10 - 168);
  v13 = *(_QWORD *)(v10 - 160);
  v15 = *(_QWORD *)(v10 - 136);
  v14 = *(_QWORD *)(v10 - 128);
  v16 = *(_DWORD *)(v10 - 96);
  v23 = *(_QWORD *)(v10 - 176);
  v24 = v12;
  v25 = v13;
  v26 = *(_OWORD *)(v10 - 152);
  v27 = v15;
  v28 = v14;
  v29 = *(_OWORD *)(v10 - 120);
  v30 = *(_QWORD *)(v10 - 104);
  v31 = v16;
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v8);
  v17 = MEMORY[0x1E0CE71B8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v7, &v22);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v9);
  MEMORY[0x18D75FFDC](v17, v6, &v21);
  static StaticIf<>._makeView(view:inputs:)(&v32, &v23, v19, v7, v6, v18, v20);
}

void static ListMenuPickerStyle._makeViewList<A>(value:inputs:)()
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _PickerValue();
}

void sub_187A645A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int OffsetAttribute2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(_QWORD *)(*(_QWORD *)(type metadata accessor for PickerStyleConfiguration(0, v1, v0, v2) - 8) + 64))
    closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)();
  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  MenuPickerStyle.Body.init(configuration:isBordered:)(OffsetAttribute2, 1);
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
  type metadata accessor for PickerStyleConfiguration.Content(255, v1, v0, v4);
  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label(255, v1, v0, v5);
  v7 = type metadata accessor for PickerContentView(255, v1, v0, v6);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PickerContentView<A>, v7);
  type metadata accessor for Menu();
}

void sub_187A64700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_UNKNOWN **a27,uint64_t a28,uint64_t a29,_UNKNOWN **a30,_UNKNOWN **a31)
{
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  v35 = type metadata accessor for ModifiedContent();
  a30 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  a31 = &protocol witness table for SectionStyleModifier<A>;
  v36 = MEMORY[0x1E0CE2E70];
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v33, &a30);
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, v32, MEMORY[0x1E0CE4530]);
  a28 = v37;
  a29 = v38;
  MEMORY[0x18D75FFDC](v36, v31, &a28);
  a26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for Menu<A, B>, a1);
  a27 = &protocol witness table for MenuStyleModifier<A>;
  MEMORY[0x18D75FFDC](v36, v35, &a26);
  type metadata accessor for GroupElementsOfContent();
}

void sub_187A647E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Group();
  v3 = type metadata accessor for PopUpButton(255, v1, v0, v2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for PopUpButton<A>, v3);
  type metadata accessor for GroupElementsOfContent();
}

void sub_187A6482C()
{
  type metadata accessor for Group();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE6398]);
  type metadata accessor for StaticIf();
}

void sub_187A64874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;

  v11 = type metadata accessor for MenuPickerStyle.Body(0, v5, v4, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuPickerStyle.Body<A>, v11);
  _GraphValue.init<A>(_:)();
  v12 = *(_DWORD *)(v10 - 168);
  v13 = *(_QWORD *)(v10 - 160);
  v14 = *(_QWORD *)(v10 - 136);
  v15 = *(_DWORD *)(v10 - 112);
  v16 = *(_QWORD *)(v10 - 104);
  v17 = *(_BYTE *)(v10 - 96);
  v23 = *(_QWORD *)(v10 - 176);
  v24 = v12;
  v25 = v13;
  v26 = *(_OWORD *)(v10 - 152);
  v27 = v14;
  v28 = *(_OWORD *)(v10 - 128);
  v29 = v15;
  v30 = v16;
  v31 = v17;
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v8);
  v18 = MEMORY[0x1E0CE71B8];
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v7, &v22);
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupElementsOfContent<A, B>, v9);
  MEMORY[0x18D75FFDC](v18, v6, &v21);
  static StaticIf<>._makeViewList(view:inputs:)(&v32, &v23, v20, v7, v6, v19);
}

void closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)()
{
  type metadata accessor for _PickerValue();
}

uint64_t sub_187A64A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v11[2] = a1;
  v12 = type metadata accessor for PickerStyleConfiguration(0, v6, v5, a4);
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, v4, (uint64_t)v11, v12, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  return v13;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldProvideBridgedPopUpButton()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ShouldProvideBridgedPopUpButton()
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  return PropertyList.subscript.setter();
}

ValueMetadata *type metadata accessor for ShouldProvideBridgedPopUpButton()
{
  return &type metadata for ShouldProvideBridgedPopUpButton;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ShouldProvideBridgedPopUpButton()
{
  return &protocol witness table for ShouldProvideBridgedPopUpButton;
}

uint64_t key path getter for EnvironmentValues.isNavigationEnabledInternal : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isNavigationEnabledInternal.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.isNavigationEnabledInternal : EnvironmentValues()
{
  return EnvironmentValues.isNavigationEnabledInternal.setter();
}

uint64_t NavigationView.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t NavigationView.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, v3);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  KeyPath = swift_getKeyPath();
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a2 = KeyPath;
  *(_BYTE *)(a2 + 8) = 0;
  v14 = type metadata accessor for NavigationView.InternalBody(0, v6, v12, v13);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2 + *(int *)(v14 + 36), v10, v6);
}

void NavigationView.InternalBody.body.getter(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[3];

  type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>();
  v2 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  v3[0] = *(_QWORD *)(a1 + 24);
  v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for StaticSourceWriter();
}

void sub_187A64E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for ModifiedContent();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v2 - 232) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  *(_QWORD *)(v2 - 192) = v1;
  *(_QWORD *)(v2 - 184) = v0;
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 224);
  lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, (uint64_t)partial apply for closure #1 in NavigationView.InternalBody.body.getter);
}

uint64_t sub_187A64F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);

  *(_QWORD *)(v7 - 152) = v3;
  *(_QWORD *)(v7 - 144) = &protocol witness table for StaticSourceWriter<A, B>;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7 - 152);
  MEMORY[0x18D75B4AC](v9, v5, &type metadata for NavigationCommonModifier, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v5);
  v10 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  *(_QWORD *)(v7 - 168) = v9;
  *(_QWORD *)(v7 - 160) = v10;
  v11 = MEMORY[0x18D75FFDC](v8, v1, v7 - 168);
  static ViewBuilder.buildExpression<A>(_:)(v6, v1, v11);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 232) + 8);
  v12(v6, v1);
  static ViewBuilder.buildBlock<A>(_:)(v4, v1, *(_QWORD *)(v7 - 216));
  return v12(v4, v1);
}

uint64_t closure #1 in NavigationView.InternalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  _QWORD v27[2];
  char v28;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v27[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>();
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v27[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v27[-1] - v18;
  v21 = type metadata accessor for NavigationView.InternalBody(0, a2, a3, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1 + *(int *)(v21 + 36), a2);
  swift_getKeyPath();
  v28 = 1;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  v22 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  v27[0] = a3;
  v27[1] = v22;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v27);
  static ViewBuilder.buildExpression<A>(_:)(v15, v11, v23);
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v15, v11);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v19, v11, a4);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v11);
}

void protocol witness for View.body.getter in conformance NavigationView<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationView<A>, a1);
  specialized PrimitiveView.body.getter();
}

void associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in NavigationView<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t instantiation function for generic protocol witness table for NavigationView<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationView<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in NavigationView<A>()
{
  return &protocol witness table for NavigationView<A>;
}

uint64_t getEnumTagSinglePayload for NavigationView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A652D8 + 4 * byte_187C82E90[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationView(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata completion function for NavigationView.InternalBody()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationView.InternalBody(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 9) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0xFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 9) & ~v7);
      v15 = *(unsigned __int8 *)(a1 + 8);
      if (v15 > 1)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A65624 + 4 * byte_187C82E9E[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for NavigationView.InternalBody(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for NavigationView.InternalBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NavigationView.InternalBody);
}

uint64_t associated type witness table accessor for View.Body : View in NavigationView<A>.InternalBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>);
  }
}

uint64_t partial apply for closure #1 in NavigationView.InternalBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in NavigationView.InternalBody.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_187A65938@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isNavigationEnabledInternal.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A65970()
{
  return EnvironmentValues.isNavigationEnabledInternal.setter();
}

void sub_187A6599C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>();
  v2 = type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187A65A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[14];

  v1 = type metadata accessor for ModifiedContent();
  v2 = type metadata accessor for ModifiedContent();
  v5[0] = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v4[0] = MEMORY[0x18D75FFDC](v0, v1, v5);
  v4[1] = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  return MEMORY[0x18D75FFDC](v0, v2, v4);
}

void base witness table accessor for Scrollable in CollectionViewListScrollable<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void CollectionViewListScrollable.coordinator.getter()
{
  type metadata accessor for UICollectionViewListCoordinator();
}

id sub_187A65ACC()
{
  id *WeakValue;
  id v1;
  id v2;

  WeakValue = (id *)AGGraphGetWeakValue();
  if (!WeakValue)
    return 0;
  v1 = *WeakValue;
  v2 = *WeakValue;
  return v1;
}

void CollectionViewListScrollable.base.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v4);
  v7 = type metadata accessor for ListScrollable.DataSourceProvider(0, v4, v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  CollectionViewListScrollable.coordinator.getter();
}

uint64_t sub_187A65B9C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    v6 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x88);
    swift_beginAccess();
    v7 = swift_checkMetadataState();
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v4, v6, v7);

    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
  }
  else
  {
    v9 = swift_checkMetadataState();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  }
  v10 = v2[1];
  swift_storeEnumTagMultiPayload();
  v11 = v2[2];
  v12 = v2[3];
  v13 = v2[4];
  v14 = swift_checkMetadataState();
  ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)(v10, v4, v11, v12, v13, v14, v3, v1);
  return swift_retain();
}

void CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v11, a1, v10);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  v14 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v13 + 32) = a3;
  *(_OWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 56) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, v11, a3);
  CollectionViewListScrollable.apply<A>(id:_:)(a1, (uint64_t)partial apply for closure #1 in CollectionViewListScrollable.scroll<A>(to:), v13, a2);
}

uint64_t sub_187A65D84(char a1)
{
  swift_release();
  return a1 & 1;
}

BOOL closure #1 in CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = type metadata accessor for ShadowListDataSource(255, a3, *(_QWORD *)(a6 + 8), a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v11);
  v14 = type metadata accessor for ListScrollable(0, v11, v12, v13);
  return ListScrollable.scroll<A>(to:)(a2, v14, a5, a8);
}

void CollectionViewListScrollable.apply<A>(id:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8), a4);
  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v4);
  v7 = type metadata accessor for ListScrollable(0, v4, v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  CollectionViewListScrollable.coordinator.getter();
}

uint64_t sub_187A65EE8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;

  if (a1)
  {
    v8 = v2;
    v9 = *(_QWORD *)(v6 - 96);
    if (!UICollectionViewListCoordinatorBase.hasPendingID<A>(_:)(v8, *(_QWORD *)(v6 - 88), v9))
      CollectionViewListScrollable.base.getter(v3, v10, v11, v12);
    v13 = swift_allocObject();
    v14 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v13 + 16) = v5;
    *(_QWORD *)(v13 + 24) = v14;
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v6 - 88);
    *(_QWORD *)(v13 + 40) = v4;
    *(_QWORD *)(v13 + 48) = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v13 + 56) = v9;
    *(_QWORD *)(v13 + 64) = *(_QWORD *)(v6 - 112);
    *(_QWORD *)(v13 + 72) = *(_QWORD *)(v6 - 104);
    v15 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v13 + 80) = *(_OWORD *)v1;
    *(_OWORD *)(v13 + 96) = v15;
    *(_QWORD *)(v13 + 112) = *(_QWORD *)(v1 + 32);
    swift_retain();
    outlined retain of CoreGlue2.LinkURLParameters(v1);
    static Update.enqueueAction(_:)();
    swift_release();

    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

void closure #1 in CollectionViewListScrollable.apply<A>(id:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = type metadata accessor for ShadowListDataSource(255, a4, *(_QWORD *)(a7 + 8), a4);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v10 = type metadata accessor for ListScrollable(0, v7, v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  type metadata accessor for CollectionViewListScrollable();
}

void sub_187A66098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.base.getter(a1, a2, a3, a4);
}

uint64_t sub_187A660A4()
{
  void (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
}

void CollectionViewListScrollable.runScrollTest(_:scrollMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a3, v10, v11, v12);
}

uint64_t sub_187A6617C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(v6 - 80) = v5;
  *(_QWORD *)(v6 - 72) = v0;
  v7 = ListScrollable.runScrollTest(_:scrollMode:)(v1, (unint64_t *)(v6 - 80));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  return v7 & 1;
}

void CollectionViewListScrollable.runScrollTest(_:scrollMode:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a5 + 16), *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8), a4);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v6);
  v9 = type metadata accessor for ListScrollable(0, v6, v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  CollectionViewListScrollable.base.getter(a5, v11, v12, v13);
}

uint64_t sub_187A66270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)(v8 - 96) = v7;
  *(_QWORD *)(v8 - 88) = v2;
  v9 = ListScrollable.runScrollTest(_:scrollMode:onComplete:)(v3, (unint64_t *)(v8 - 96), v1, v0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v4);
  return v9 & 1;
}

void CollectionViewListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a6 + 16), *(_QWORD *)(*(_QWORD *)(a6 + 32) + 8), a4);
  v8 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v7);
  v10 = type metadata accessor for ListScrollable(0, v7, v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  CollectionViewListScrollable.base.getter(a6, v12, v13, v14);
}

uint64_t sub_187A66374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)(v8 - 96) = v0;
  *(_QWORD *)(v8 - 88) = v3;
  *(_QWORD *)(v8 - 112) = v1;
  *(_QWORD *)(v8 - 104) = v2;
  v9 = ListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(v4, (uint64_t *)(v8 - 96), (unint64_t *)(v8 - 112), *(_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 120));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v5);
  return v9 & 1;
}

void CollectionViewListScrollable.mapFirstChild<A, B>(ofType:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a4, v10, v11, v12);
}

uint64_t sub_187A6647C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ListScrollable.mapFirstChild<A, B>(ofType:body:)(v3, v2, v5, v1, *(_QWORD *)(v7 - 88), v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v5);
}

void CollectionViewListScrollable.allowsContentOffsetAdjustments.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a1, v10, v11, v12);
}

uint64_t sub_187A66558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return 1;
}

void protocol witness for Scrollable.scroll<A>(to:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.scroll<A>(to:)(a1, a4, a2, a3);
}

uint64_t sub_187A665BC(char a1)
{
  return a1 & 1;
}

void protocol witness for Scrollable.setContentTarget(_:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized CollectionViewListScrollable.setContentTarget(_:)(a3, a2, a3, a4);
}

uint64_t sub_187A665FC(char a1)
{
  return a1 & 1;
}

void protocol witness for Scrollable.allowsContentOffsetAdjustments.getter in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.allowsContentOffsetAdjustments.getter(a1, a2, a3, a4);
}

uint64_t sub_187A66638(char a1)
{
  return a1 & 1;
}

void protocol witness for Scrollable.adjustContentOffset(by:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized CollectionViewListScrollable.setContentTarget(_:)(a1, a2, a3, a4);
}

uint64_t sub_187A66674(char a1)
{
  return a1 & 1;
}

void protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CollectionViewListScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, a3, a6);
}

void protocol witness for PPTScrollable.runScrollTest(_:scrollMode:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.runScrollTest(_:scrollMode:)(a1, a2, a3, a4);
}

uint64_t sub_187A666F8(char a1)
{
  return a1 & 1;
}

void protocol witness for PPTScrollable.runScrollTest(_:scrollMode:onComplete:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CollectionViewListScrollable.runScrollTest(_:scrollMode:onComplete:)(a1, a2, a3, a4, a5);
}

uint64_t sub_187A66734(char a1)
{
  return a1 & 1;
}

void protocol witness for PPTScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CollectionViewListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_187A66770(char a1)
{
  return a1 & 1;
}

void CollectionViewListScrollable.visibleCollectionViewIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a1, v10, v11, v12);
}

uint64_t sub_187A6680C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = ListScrollable.visibleCollectionViewIDs.getter(v2, a2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  return v5;
}

void CollectionViewListScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a3, v10, v11, v12);
}

uint64_t sub_187A66908()
{
  _OWORD *v0;
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  *(_QWORD *)(v7 - 128) = *v2;
  *(_QWORD *)(v7 - 120) = v6;
  *(_DWORD *)(v7 - 132) = v1;
  v8 = protocol witness for static Rule.initialValue.getter in conformance ToString<A>(v0);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(v5 + 8))(v4, v3, v8);
}

uint64_t static CollectionViewListScrollable.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;

  v4 = a1 & 1;
  v5 = type metadata accessor for ShadowListDataSource(0, a2, *(_QWORD *)(a4 + 8), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  return NavigationSelectionModifier.init(isActive:presentedValue:)(v4);
}

void CollectionViewListScrollable.firstCollectionViewIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a2, v10, v11, v12);
}

uint64_t sub_187A66A58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 80) = *v0;
  *(_QWORD *)(v5 - 72) = v4;
  v6 = ListScrollable.firstCollectionViewIndex(of:)((uint64_t *)(v5 - 80), v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return v6;
}

void CollectionViewListScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a4, v10, v11, v12);
}

uint64_t sub_187A66B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v6 = ListScrollable.applyCollectionViewIDs(from:to:)(v2, v1, v0, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  return v6 & 1;
}

void CollectionViewListScrollable.collectionViewID(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a2, v10, v11, v12);
}

uint64_t sub_187A66C28()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;

  v4 = protocol witness for static Rule.initialValue.getter in conformance ToString<A>(v0);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(v3 + 8))(v2, v1, v4);
}

void CollectionViewListScrollable.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a5 + 16), *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8), a4);
  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v6);
  v9 = type metadata accessor for ListScrollable(0, v6, v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  CollectionViewListScrollable.base.getter(a5, v11, v12, v13);
}

uint64_t sub_187A66D10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)(v8 - 96) = *v2;
  *(_QWORD *)(v8 - 88) = v7;
  v9 = ListScrollable.scroll(toCollectionViewID:anchor:)(v8 - 96, v1, v0, v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v4);
  return v9 & 1;
}

void static CollectionViewListScrollable.accessibilityRole.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for ShadowListDataSource(0, a1, *(_QWORD *)(a2 + 8), a3);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(a4);
}

void protocol witness for ScrollableCollection.visibleCollectionViewIDs.getter in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.visibleCollectionViewIDs.getter(a1, a2, a3, a4);
}

void protocol witness for ScrollableCollection.forEachVisibleSubview(_:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized CollectionViewListScrollable.forEachVisibleSubview(_:)(a3, a2, a3, a4);
}

void protocol witness for ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance CollectionViewListScrollable<A, B>(char a1, uint64_t *a2)
{
  return static CollectionViewListScrollable.hasMultipleViewsInAxis(_:)(a1 & 1, a2[2], a2[3], a2[4]);
}

void protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.firstCollectionViewIndex(of:)(a1, a2, a3, a4);
}

void protocol witness for ScrollableCollection.applyCollectionViewIDs(from:to:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.applyCollectionViewIDs(from:to:)(a1, a2, a3, a4);
}

uint64_t sub_187A66EE0(char a1)
{
  return a1 & 1;
}

void protocol witness for ScrollableCollection.collectionViewID(for:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CollectionViewListScrollable.collectionViewID(for:)(a1, a2, a3, a4);
}

void protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  CollectionViewListScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1, a5);
}

uint64_t sub_187A66F58(char a1)
{
  return a1 & 1;
}

void protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance CollectionViewListScrollable<A, B>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  static CollectionViewListScrollable.accessibilityRole.getter(a1[2], a1[4], a1[5], a2);
}

void protocol witness for Rule.value.getter in conformance ScrollViewPreferenceProvider(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  id v4;

  type metadata accessor for UIScrollView?();
  v2 = *(void **)AGGraphGetValue();
  if (v2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_187BF9830;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(_BYTE *)(v3 + 72) = 0;
    swift_unknownObjectWeakAssign();
    v4 = v2;
    *(_QWORD *)(v3 + 48) = AGCreateWeakAttribute();
    *(_QWORD *)(v3 + 56) = AGCreateWeakAttribute();
    *(_QWORD *)(v3 + 64) = AGCreateWeakAttribute();

  }
  else
  {
    v3 = MEMORY[0x1E0DEE9D8];
  }
  *a1 = v3;
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollGeometryProvider@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 112) = 1;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance ScrollGeometryProvider@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = type metadata accessor for BridgedListState(0);
  v3 = AGGraphGetValue() + *(int *)(v2 + 24);
  if ((*(_BYTE *)(v3 + 112) & 1) != 0)
  {
    static ScrollGeometry.zero.getter();
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v3;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    v7 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    result = *(__n128 *)(v3 + 96);
    *(__n128 *)(a1 + 96) = result;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance MakeRepresentable<A, B>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void static ListRepresentable.dismantleViewProvider(_:coordinator:)(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  v2 = objc_msgSend(a1, sel_refreshControl);
  if (v2)
  {
    v3 = v2;
    type metadata accessor for UIKitRefreshControl();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = (void *)v4;
      if (*(_QWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
      {
        v6 = swift_retain();
        MEMORY[0x18D75D204](v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
        swift_release();
      }
      objc_msgSend(v5, sel_endRefreshing);
    }

  }
  objc_msgSend(a1, sel_setRefreshControl_, 0);
  v7 = objc_msgSend(a1, sel_contextMenuInteraction);
  objc_msgSend(v7, sel_dismissMenu);

}

void ListRepresentable._identifiedViewTree(in:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  int8x16_t *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  int8x16_t v19[10];
  char v20;
  _QWORD v21[22];

  objc_msgSend(a1, sel_layoutIfNeeded);
  v4 = objc_msgSend(a1, sel_visibleCells);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewCell);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_18:
      v17 = 1;
LABEL_22:
      *(_QWORD *)a2 = v8;
      *(_BYTE *)(a2 + 160) = v17;
      return;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    v8 = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    v17 = 2;
    *(_OWORD *)(a2 + 8) = 0u;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_20;
LABEL_3:
  if (v6 >= 1)
  {
    v18 = a2;
    v7 = 0;
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x18D75E3BC](v7, v5);
      else
        v11 = *(id *)(v5 + 8 * v7 + 32);
      v12 = v11;
      type metadata accessor for AnyListCollectionViewCell();
      v13 = (_QWORD *)swift_dynamicCastClassUnconditional();
      (*(void (**)(_QWORD *__return_ptr))((*v9 & *v13) + 0x88))(v21);
      outlined init with copy of _IdentifiedViewTree((uint64_t)v21, (uint64_t)v19);
      if (v20 == 2
        && (v14 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v19[2], v19[6]), vorrq_s8(v19[4], v19[8])), vorrq_s8(vorrq_s8(v19[3], v19[7]), vorrq_s8(v19[5], v19[9]))), vorrq_s8(v19[0], v19[1])), !*(_QWORD *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v21);

        v10 = v19;
      }
      else
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v19);
        outlined init with copy of _IdentifiedViewTree((uint64_t)v21, (uint64_t)v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
        v16 = *((_QWORD *)v8 + 2);
        v15 = *((_QWORD *)v8 + 3);
        if (v16 >= v15 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v16 + 1;
        outlined init with take of _IdentifiedViewTree((__int128 *)v19[0].i8, (uint64_t)&v8[168 * v16 + 32]);

        v10 = (int8x16_t *)v21;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)v10);
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    a2 = v18;
    if (*((_QWORD *)v8 + 2))
      goto LABEL_18;
    goto LABEL_21;
  }
  __break(1u);
}

void protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance ListRepresentable<A, B>(void **a1)
{
  static ListRepresentable.dismantleViewProvider(_:coordinator:)(*a1);
}

void protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance ListRepresentable<A, B>(void **a1@<X0>, uint64_t a2@<X8>)
{
  ListRepresentable._identifiedViewTree(in:)(*a1, a2);
}

uint64_t outlined init with take of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187A675E8()
{
  swift_release();
  return swift_deallocObject();
}

void specialized CollectionViewListScrollable.forEachVisibleSubview(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a1, v10, v11, v12);
}

uint64_t sub_187A67694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void specialized CollectionViewListScrollable.setContentTarget(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for ShadowListDataSource(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ShadowListDataSource<A>, v5);
  v8 = type metadata accessor for ListScrollable(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  CollectionViewListScrollable.base.getter(a1, v10, v11, v12);
}

uint64_t sub_187A67744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  return 0;
}

uint64_t sub_187A67770()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[4];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return closure #1 in CollectionViewListScrollable.scroll<A>(to:)(a1, (uint64_t)v1 + ((v3 + 64) & ~v3), v1[2], v1[3], v2, v1[5], v1[6], v1[7]);
}

uint64_t sub_187A677EC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CollectionViewListScrollable.apply<A>(id:_:)()
{
  uint64_t *v0;

  closure #1 in CollectionViewListScrollable.apply<A>(id:_:)(v0[8], v0[9], (uint64_t)(v0 + 10), v0[2], v0[3], v0[4], v0[5]);
}

ValueMetadata *type metadata accessor for ScrollViewPreferenceProvider()
{
  return &type metadata for ScrollViewPreferenceProvider;
}

ValueMetadata *type metadata accessor for ScrollGeometryProvider()
{
  return &type metadata for ScrollGeometryProvider;
}

uint64_t getEnumTagSinglePayload for MakeRepresentable(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

uint64_t assignWithTake for ListRepresentable(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRepresentable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t initializeWithCopy for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release();
  return a1;
}

void specialized ListRepresentable.sizeThatFits(_:provider:context:)()
{
  type metadata accessor for ListRepresentable();
}

uint64_t sub_187A67B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  double v14;
  double v15;
  char *v16;
  double v17;
  double v18;
  uint64_t v19[4];
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;

  v8 = type metadata accessor for PlatformViewRepresentableContext(0, a1, (uint64_t)&protocol witness table for ListRepresentable<A, B>, a4);
  PlatformViewRepresentableContext.environment.getter(v8, v9, v19);
  if (v19[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v10 = v20;
  v11 = v21;
  v12 = v22;
  if (v22 == 1 && !(v20 | v21))
    return 0;
  if ((v5 & 1) != 0)
  {
    v14 = 10.0;
    if ((v4 & 1) != 0)
      v15 = 10.0;
    else
      v15 = v7;
  }
  else
  {
    if ((v4 & 1) == 0)
      return 0;
    v14 = v18;
    v15 = 10.0;
  }
  v16 = &v6[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  if (v6[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize + 16] == 1
    && (AGGraphClearUpdate(),
        closure #1 in UpdateCoalescingCollectionView.idealSize(in:)(v6, v14, v15),
        result = AGGraphSetUpdate(),
        (v16[16] & 1) != 0))
  {
    __break(1u);
  }
  else
  {
    v17 = *(double *)v16;
    if ((v5 & 1) == 0)
      v17 = v14;
    if ((v4 & 1) != 0 && v12 && !(v10 | v11))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return *(_QWORD *)&v17;
  }
  return result;
}

uint64_t sub_187A67D88()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A67DAC()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for CollectionViewListUtilities()
{
  return &type metadata for CollectionViewListUtilities;
}

uint64_t storeEnumTagSinglePayload for CollectionViewListUtilities.CoordinatorKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A67E48 + 4 * byte_187C82FD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A67E7C + 4 * byte_187C82FD0[v4]))();
}

uint64_t sub_187A67E7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A67E84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A67E8CLL);
  return result;
}

uint64_t sub_187A67E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A67EA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A67EA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A67EAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind;
  if (!lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CollectionViewListUtilities.CoordinatorKind, &type metadata for CollectionViewListUtilities.CoordinatorKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind);
  }
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.== infix(_:_:)(__int128 *a1)
{
  char v1;
  char v2;
  __int128 v4;
  char v5;

  v1 = *((_BYTE *)a1 + 16);
  v4 = *a1;
  v5 = v1;
  specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)((uint64_t)&v4);
  return v2 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration(__int128 *a1)
{
  char v1;
  char v2;
  __int128 v4;
  char v5;

  v1 = *((_BYTE *)a1 + 16);
  v4 = *a1;
  v5 = v1;
  specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)((uint64_t)&v4);
  return v2 & 1;
}

void static AnimatedValuePlaybackConfiguration.scrubbing(time:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void static AnimatedValuePlaybackConfiguration.scrubbing(progress:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 64;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.restart.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0x3FC999999999999ALL;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t static AnimatedValuePlaybackConfiguration.onChange<A>(of:interruptionBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];

  v4 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = *v6;
  v8 = *((_BYTE *)v6 + 8);
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v4);
  result = AnyEquatable.init<A>(_:)();
  *(_QWORD *)a3 = v12[1];
  *(_QWORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 16) = v8 | 0x80;
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.repeating(autoreverses:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result & 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = -64;
  return result;
}

void static AnimatedValuePlaybackConfiguration.repeating.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -64;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.InterruptionBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration.InterruptionBehavior(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 8))
      return 1;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) == 0)
      return 1;
  }
  return 0;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.ignore.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.restart(blendDuration:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

void specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_187A6819C()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (v1 < 0x40)
  {
    outlined consume of AnimatedValuePlaybackConfiguration.Mode(v5, v3, v4);
    outlined consume of AnimatedValuePlaybackConfiguration.Mode(v2, v0, v1);
    return *(double *)&v5 == *(double *)&v2;
  }
  else
  {
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(v2, v0, v1);
    outlined consume of AnimatedValuePlaybackConfiguration.Mode(v5, v3, v4);
    outlined consume of AnimatedValuePlaybackConfiguration.Mode(v2, v0, v1);
    return 0;
  }
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration()
{
  return &type metadata for AnimatedValuePlaybackConfiguration;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.InterruptionBehavior()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.InterruptionBehavior;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior;
}

uint64_t destroy for AnimatedValuePlaybackConfiguration.Mode(uint64_t a1)
{
  return outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValuePlaybackConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 125);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatedValuePlaybackConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for AnimatedValuePlaybackConfiguration.Mode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 6;
}

uint64_t destructiveProjectEnumData for AnimatedValuePlaybackConfiguration.Mode(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AnimatedValuePlaybackConfiguration.Mode(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.Mode()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.Mode;
}

uint64_t key path getter for EnvironmentValues.pageIndexDisplayMode : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.pageIndexDisplayMode.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.pageIndexDisplayMode : EnvironmentValues()
{
  return EnvironmentValues.pageIndexDisplayMode.setter();
}

SwiftUI::PageIndexViewStyle __swiftcall PageIndexViewStyle.init(backgroundDisplayMode:)(SwiftUI::PageIndexViewStyle backgroundDisplayMode)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)backgroundDisplayMode.background.style;
  return backgroundDisplayMode;
}

uint64_t PageIndexViewStyle._makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[12];
  _BYTE __src[336];
  uint64_t v20;

  v4 = *v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  swift_retain();
  v8 = _VariadicView_Children.endIndex.getter();
  result = _VariadicView_Children.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    result = _VariadicView_Children.endIndex.getter();
    if (v8 < 0 || result < v8)
      goto LABEL_18;
    v10 = MEMORY[0x1E0DEE9D8];
    if (!v8)
    {
LABEL_15:
      v15 = qword_187C836B8[v4];
      result = swift_getKeyPath();
      *(_QWORD *)a2 = v5;
      *(_QWORD *)(a2 + 8) = v6;
      *(_QWORD *)(a2 + 16) = v7;
      *(_QWORD *)(a2 + 24) = v10;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a2 + 40) = result;
      *(_BYTE *)(a2 + 48) = 0;
      return result;
    }
    v16 = v4;
    v17 = v5;
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v11 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v18[2] = v18[8];
      v18[3] = v18[9];
      v18[4] = v18[10];
      v18[5] = v18[11];
      v18[0] = v18[6];
      v18[1] = v18[7];
      v12 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v12 != -1)
        swift_once();
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      outlined destroy of _VariadicView_Children.Element((uint64_t)v18);
      v10 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
        v10 = v20;
      }
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        v10 = v20;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      memcpy((void *)(v10 + 336 * v14 + 32), __src, 0x150uLL);
      result = _VariadicView_Children.endIndex.getter();
      if (v11 >= result)
        break;
      if (v8 == ++v11)
      {
        v5 = v17;
        v4 = v16;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void static PageIndexViewStyle.BackgroundDisplayMode.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PageIndexViewStyle.BackgroundDisplayMode.interactive.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PageIndexViewStyle.BackgroundDisplayMode.always.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static PageIndexViewStyle.BackgroundDisplayMode.never.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t UIKitPageIndexView.index.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v1);
  return v1;
}

uint64_t UIKitPageIndexView.displayMode.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1 + *(int *)(a1 + 44);
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned __int8 *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, *(_BYTE *)(v2 + 8));
  v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<ControlSize>.Content(v3, v4);
  return v5;
}

id UIKitPageIndexView.makeCoordinator()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  objc_super v9;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = (objc_class *)type metadata accessor for Coordinator();
  swift_retain();
  swift_retain();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators;
  *(_QWORD *)&v5[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = &v5[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_index];
  *(_QWORD *)v7 = v1;
  *((_QWORD *)v7 + 1) = v2;
  *((_QWORD *)v7 + 2) = v3;
  v9.receiver = v5;
  v9.super_class = v4;
  return objc_msgSendSuper2(&v9, sel_init);
}

void UIKitPageIndexView.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  __int128 *v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110;
  _QWORD *v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  void *v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  id v139;
  void (*v140)(uint64_t *, _QWORD);
  uint64_t v141;
  _QWORD v142[2];
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t *v153;
  _QWORD *v154;
  uint64_t *v155;
  char *v156;
  _OWORD v157[10];
  _BYTE v158[19];
  _QWORD *v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _OWORD v170[3];
  __int128 v171;
  __int128 v172;
  _OWORD v173[2];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD v180[2];
  __int128 v181;
  __int128 v182;
  _OWORD v183[2];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _OWORD v190[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  _OWORD v201[3];
  uint64_t v202;
  __int128 v203;
  _OWORD v204[9];
  _BYTE v205[19];
  uint64_t v206;
  _BYTE v207[184];
  _BYTE v208[184];
  _QWORD v209[42];
  _BYTE v210[184];
  _BYTE v211[216];
  uint64_t v212[3];
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;

  v4 = v3;
  v5 = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) + 8);
  v10 = *(uint64_t **)(v9 + 8);
  v154 = (_QWORD *)type metadata accessor for EnumeratedSequence();
  MEMORY[0x1E0C80A78](v154, v11);
  v153 = (_QWORD *)((char *)v142 - v12);
  v155 = v10;
  v151 = type metadata accessor for EnumeratedSequence.Iterator();
  v142[0] = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v13);
  v156 = (char *)v142 - v14;
  v15 = *(char **)(a2 + 40);
  v16 = v4[1];
  v17 = v4[2];
  v18 = &v15[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_index];
  *(_QWORD *)v18 = *v4;
  *((_QWORD *)v18 + 1) = v16;
  *((_QWORD *)v18 + 2) = v17;
  swift_retain();
  swift_retain();
  v147 = v15;
  v19 = a1;
  swift_release();
  swift_release();
  v146 = (char *)v4 + *(int *)(v5 + 36);
  v142[1] = v9;
  v20 = dispatch thunk of Collection.count.getter();
  v21 = objc_msgSend(a1, sel_numberOfPages);
  v150 = a1;
  v144 = v4;
  v145 = v8;
  v143 = v5;
  if (v21 == (id)v20)
    goto LABEL_32;
  objc_msgSend(a1, sel_setNumberOfPages_, v20);
  v22 = &v147[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators];
  swift_beginAccess();
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)v22 + 64;
  v25 = 1 << *(_BYTE *)(*(_QWORD *)v22 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(*(_QWORD *)v22 + 64);
  v28 = (unint64_t)(v25 + 63) >> 6;
  swift_bridgeObjectRetain();
  v29 = 0;
  while (v27)
  {
    v40 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    v41 = v40 | (v29 << 6);
LABEL_27:
    v45 = *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * v41);
    if (v45 >= v20)
    {
      swift_beginAccess();
      v46 = specialized __RawDictionaryStorage.find<A>(_:)(v45);
      if ((v47 & 1) != 0)
      {
        v48 = v46;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v50 = *(_QWORD *)v22;
        v209[0] = *(_QWORD *)v22;
        *(_QWORD *)v22 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v50 = v209[0];
        }
        v30 = *(_QWORD *)(v50 + 56) + 184 * v48;
        v32 = *(_OWORD *)(v30 + 32);
        v31 = *(_OWORD *)(v30 + 48);
        v33 = *(_OWORD *)(v30 + 16);
        v203 = *(_OWORD *)v30;
        v204[0] = v33;
        v204[1] = v32;
        v204[2] = v31;
        v34 = *(_OWORD *)(v30 + 64);
        v35 = *(_OWORD *)(v30 + 80);
        v36 = *(_OWORD *)(v30 + 96);
        v204[6] = *(_OWORD *)(v30 + 112);
        v204[5] = v36;
        v204[4] = v35;
        v204[3] = v34;
        v37 = *(_OWORD *)(v30 + 128);
        v38 = *(_OWORD *)(v30 + 144);
        v39 = *(_OWORD *)(v30 + 160);
        *(_DWORD *)&v205[15] = *(_DWORD *)(v30 + 175);
        *(_OWORD *)v205 = v39;
        v204[8] = v38;
        v204[7] = v37;
        specialized _NativeDictionary._delete(at:)(v48, v50);
        *(_QWORD *)v22 = v50;
        swift_bridgeObjectRelease();
        outlined release of Image.Resolved((uint64_t)&v203);
      }
      swift_endAccess();
    }
  }
  v42 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v42 >= v28)
    goto LABEL_31;
  v43 = *(_QWORD *)(v24 + 8 * v42);
  ++v29;
  if (v43)
    goto LABEL_26;
  v29 = v42 + 1;
  if (v42 + 1 >= v28)
    goto LABEL_31;
  v43 = *(_QWORD *)(v24 + 8 * v29);
  if (v43)
    goto LABEL_26;
  v29 = v42 + 2;
  if (v42 + 2 >= v28)
    goto LABEL_31;
  v43 = *(_QWORD *)(v24 + 8 * v29);
  if (v43)
    goto LABEL_26;
  v29 = v42 + 3;
  if (v42 + 3 >= v28)
    goto LABEL_31;
  v43 = *(_QWORD *)(v24 + 8 * v29);
  if (v43)
    goto LABEL_26;
  v29 = v42 + 4;
  if (v42 + 4 >= v28)
    goto LABEL_31;
  v43 = *(_QWORD *)(v24 + 8 * v29);
  if (v43)
  {
LABEL_26:
    v27 = (v43 - 1) & v43;
    v41 = __clz(__rbit64(v43)) + (v29 << 6);
    goto LABEL_27;
  }
  v44 = v42 + 5;
  if (v44 >= v28)
  {
LABEL_31:
    swift_release();
    v19 = v150;
    v4 = v144;
    v5 = v143;
LABEL_32:
    if (objc_msgSend(v19, sel_backgroundStyle) != *(id *)((char *)v4 + *(int *)(v5 + 40)))
      objc_msgSend(v19, sel_setBackgroundStyle_);
    v51 = objc_msgSend(v19, sel_allowsContinuousInteraction);
    v52 = v151;
    if ((v51 & 1) == 0)
      objc_msgSend(v19, sel_setAllowsContinuousInteraction_, 1);
    v53 = UIKitPageIndexView.displayMode.getter(v5);
    if ((v53 != 1) != objc_msgSend(v19, sel_hidesForSinglePage))
      objc_msgSend(v19, sel_setHidesForSinglePage_, v53 != 1);
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    v54 = &v147[OBJC_IVAR____TtC7SwiftUIP33_59ABB005D29F0E32A3A965407533FE0D11Coordinator_lastIndicators];
    swift_beginAccess();
    EnumeratedSequence.Iterator.next()();
    outlined init with take of (offset: Int, element: PlatformItem)?((uint64_t)&v203, (uint64_t)&v214);
    if (!v215)
    {
LABEL_82:
      (*(void (**)(char *, uint64_t))(v142[0] + 8))(v156, v52);
      v139 = objc_msgSend(v19, sel_currentPage);
      if (v139 != (id)UIKitPageIndexView.index.getter())
        objc_msgSend(v19, sel_setCurrentPage_, UIKitPageIndexView.index.getter());
      if ((dispatch thunk of Collection.isEmpty.getter() & 1) != 0)
      {

      }
      else
      {
        v209[0] = UIKitPageIndexView.index.getter();
        v140 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
        outlined init with copy of PlatformItem(v141, (uint64_t)&v203);
        v140(&v214, 0);
        specialized PlatformItem.applyAccessibilityProperties(to:)(v19, (uint64_t)&v203);

        outlined destroy of PlatformItem((uint64_t)&v203);
      }
      return;
    }
    v154 = &v209[3];
    v155 = &v215;
    v152 = &v206;
    v153 = &v213;
    v149 = (uint64_t)v204 + 8;
    v148 = (uint64_t)&v192 + 8;
    v55 = MEMORY[0x1E0CE7280];
    while (1)
    {
      v76 = v214;
      memcpy(v209, v155, sizeof(v209));
      outlined init with take of Image.Resolved?((uint64_t)v154, (uint64_t)v211, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      outlined init with take of Image.Resolved?((uint64_t)v211, (uint64_t)v212, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v212) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v203);
        v77 = &v203;
      }
      else
      {
        v78 = (uint64_t)v153;
        outlined retain of Image.Resolved?((uint64_t)v153, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        v77 = (__int128 *)v78;
      }
      outlined init with take of Image.Resolved?((uint64_t)v77, (uint64_t)v210, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      v79 = *(_QWORD *)v54;
      if (*(_QWORD *)(*(_QWORD *)v54 + 16)
        && (v80 = specialized __RawDictionaryStorage.find<A>(_:)(v76), (v81 & 1) != 0))
      {
        v82 = (char *)(*(_QWORD *)(v79 + 56) + 184 * v80);
        v84 = *((_OWORD *)v82 + 2);
        v83 = *((_OWORD *)v82 + 3);
        v85 = *((_OWORD *)v82 + 1);
        v191 = *(_OWORD *)v82;
        v192 = v85;
        v193 = v84;
        v194 = v83;
        v86 = *((_OWORD *)v82 + 4);
        v87 = *((_OWORD *)v82 + 5);
        v88 = *((_OWORD *)v82 + 7);
        v197 = *((_OWORD *)v82 + 6);
        v198 = v88;
        v195 = v86;
        v196 = v87;
        v89 = *((_OWORD *)v82 + 8);
        v90 = *((_OWORD *)v82 + 9);
        v91 = *((_OWORD *)v82 + 10);
        *(_DWORD *)((char *)v201 + 15) = *(_DWORD *)(v82 + 175);
        v201[0] = v91;
        v200 = v90;
        v199 = v89;
        memmove(&v203, v82, 0xB3uLL);
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v203);
        outlined retain of Image.Resolved((uint64_t)&v191);
      }
      else
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v203);
      }
      outlined init with take of Image.Resolved?((uint64_t)&v203, (uint64_t)v208, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      outlined init with take of Image.Resolved?((uint64_t)v210, (uint64_t)v207, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v207) == 1)
      {
        outlined init with take of Image.Resolved?((uint64_t)v208, (uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v203) == 1)
          goto LABEL_43;
      }
      else
      {
        outlined init with take of Image.Resolved?((uint64_t)v210, (uint64_t)&v191, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        outlined init with take of Image.Resolved?((uint64_t)v208, (uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v203) != 1)
        {
          outlined init with take of Image.Resolved?((uint64_t)v208, (uint64_t)&v171, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
          v168 = v178;
          v169 = v179;
          v170[0] = v180[0];
          *(_DWORD *)((char *)v170 + 15) = *(_DWORD *)((char *)v180 + 15);
          v164 = v174;
          v165 = v175;
          v166 = v176;
          v167 = v177;
          v160 = v171;
          v161 = v172;
          v162 = v173[0];
          v163 = v173[1];
          outlined retain of Image.Resolved?((uint64_t)v210, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
          v120 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v191, (uint64_t)&v160);
          outlined retain of Image.Resolved?((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          v188 = v199;
          v189 = v200;
          v190[0] = v201[0];
          *(_DWORD *)((char *)v190 + 15) = *(_DWORD *)((char *)v201 + 15);
          v184 = v195;
          v185 = v196;
          v186 = v197;
          v187 = v198;
          v181 = v191;
          v182 = v192;
          v183[0] = v193;
          v183[1] = v194;
          outlined release of Image.Resolved((uint64_t)&v181);
          outlined retain of Image.Resolved?((uint64_t)v210, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
          if ((v120 & 1) != 0)
            goto LABEL_43;
          goto LABEL_57;
        }
        v178 = v199;
        v179 = v200;
        v180[0] = v201[0];
        *(_DWORD *)((char *)v180 + 15) = *(_DWORD *)((char *)v201 + 15);
        v174 = v195;
        v175 = v196;
        v176 = v197;
        v177 = v198;
        v171 = v191;
        v172 = v192;
        v173[0] = v193;
        v173[1] = v194;
        outlined init with take of Image.Resolved?((uint64_t)v210, (uint64_t)&v181, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        outlined retain of Image.Resolved((uint64_t)&v181);
        outlined release of Image.Resolved((uint64_t)&v171);
      }
      outlined init with take of Image.Resolved?((uint64_t)v210, (uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      outlined init with take of Image.Resolved?((uint64_t)v208, (uint64_t)v152, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)&v203);
LABEL_57:
      outlined init with take of Image.Resolved?((uint64_t)v211, (uint64_t)&v203, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v203) == 1
        || (outlined init with take of Image.Resolved?(v149, (uint64_t)&v181, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v181) == 1))
      {
        v92 = 0;
      }
      else if (*((_QWORD *)&v188 + 1))
      {
        swift_unknownObjectRetain();
        objc_opt_self();
        v92 = (void *)swift_dynamicCastObjCClassUnconditional();
      }
      else
      {
        v134 = (void *)v181;
        v135 = BYTE8(v181);
        *(_QWORD *)&v171 = v181;
        BYTE8(v171) = BYTE8(v181);
        v172 = v182;
        *(_QWORD *)&v173[0] = *(_QWORD *)&v183[0];
        BYTE8(v173[0]) = BYTE8(v183[0]);
        *(_OWORD *)((char *)v173 + 12) = *(_OWORD *)((char *)v183 + 12);
        BYTE12(v173[1]) = BYTE12(v183[1]);
        v174 = v184;
        v175 = v185;
        LODWORD(v176) = v186;
        outlined init with take of Image.Resolved?((uint64_t)v211, (uint64_t)&v191, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
        v136 = v202;
        v137 = v149;
        outlined retain of Image.Resolved?(v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        outlined copy of GraphicsImage.Contents?(v134, v135);
        swift_retain();
        v92 = (void *)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v136);
        v52 = v151;
        swift_release();
        outlined retain of Image.Resolved?(v137, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined consume of Image.Resolved?);
        v138 = v135;
        v19 = v150;
        outlined consume of GraphicsImage.Contents?(v134, v138);
      }
      objc_msgSend(v19, sel_setIndicatorImage_forPage_, v92, v76);

      outlined init with take of Image.Resolved?((uint64_t)v211, (uint64_t)&v191, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
      if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v191) == 1)
      {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)&v171);
        v93 = &v171;
      }
      else
      {
        v94 = v148;
        outlined retain of Image.Resolved?(v148, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))outlined copy of Image.Resolved?);
        v93 = (__int128 *)v94;
      }
      outlined init with take of Image.Resolved?((uint64_t)v93, (uint64_t)&v181, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      swift_beginAccess();
      outlined init with take of Image.Resolved?((uint64_t)&v181, (uint64_t)&v171, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
      if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v171) == 1)
      {
        v95 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
        if ((v96 & 1) != 0)
        {
          v97 = v95;
          v98 = swift_isUniquelyReferenced_nonNull_native();
          v99 = *(_QWORD *)v54;
          *(_QWORD *)&v157[0] = *(_QWORD *)v54;
          *(_QWORD *)v54 = 0x8000000000000000;
          if (!v98)
          {
            specialized _NativeDictionary.copy()();
            v99 = *(_QWORD *)&v157[0];
          }
          v100 = *(_QWORD *)(v99 + 56) + 184 * v97;
          v102 = *(_OWORD *)(v100 + 32);
          v101 = *(_OWORD *)(v100 + 48);
          v103 = *(_OWORD *)(v100 + 16);
          v160 = *(_OWORD *)v100;
          v161 = v103;
          v162 = v102;
          v163 = v101;
          v104 = *(_OWORD *)(v100 + 64);
          v105 = *(_OWORD *)(v100 + 80);
          v106 = *(_OWORD *)(v100 + 112);
          v166 = *(_OWORD *)(v100 + 96);
          v167 = v106;
          v164 = v104;
          v165 = v105;
          v107 = *(_OWORD *)(v100 + 128);
          v108 = *(_OWORD *)(v100 + 144);
          v109 = *(_OWORD *)(v100 + 160);
          *(_DWORD *)((char *)v170 + 15) = *(_DWORD *)(v100 + 175);
          v169 = v108;
          v170[0] = v109;
          v168 = v107;
          specialized _NativeDictionary._delete(at:)(v97, v99);
          *(_QWORD *)v54 = v99;
          swift_bridgeObjectRelease();
          outlined release of Image.Resolved((uint64_t)&v160);
        }
      }
      else
      {
        v110 = swift_isUniquelyReferenced_nonNull_native();
        v159 = *(_QWORD **)v54;
        v111 = v159;
        *(_QWORD *)v54 = 0x8000000000000000;
        v113 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
        v114 = v111[2];
        v115 = (v112 & 1) == 0;
        v116 = v114 + v115;
        if (__OFADD__(v114, v115))
          goto LABEL_88;
        v117 = v112;
        if (v111[3] >= v116)
        {
          if ((v110 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v116, v110);
          v118 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
          if ((v117 & 1) != (v119 & 1))
            goto LABEL_91;
          v113 = v118;
        }
        v52 = v151;
        outlined init with take of Image.Resolved?((uint64_t)&v181, (uint64_t)&v160, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v55);
        if ((v117 & 1) != 0)
        {
          v56 = v159;
          v57 = v159[7] + 184 * v113;
          v58 = *(_OWORD *)(v57 + 48);
          v60 = *(_OWORD *)v57;
          v59 = *(_OWORD *)(v57 + 16);
          v157[2] = *(_OWORD *)(v57 + 32);
          v157[3] = v58;
          v157[0] = v60;
          v157[1] = v59;
          v61 = *(_OWORD *)(v57 + 112);
          v63 = *(_OWORD *)(v57 + 64);
          v62 = *(_OWORD *)(v57 + 80);
          v157[6] = *(_OWORD *)(v57 + 96);
          v157[7] = v61;
          v157[4] = v63;
          v157[5] = v62;
          v65 = *(_OWORD *)(v57 + 144);
          v64 = *(_OWORD *)(v57 + 160);
          v66 = *(_OWORD *)(v57 + 128);
          *(_DWORD *)&v158[15] = *(_DWORD *)(v57 + 175);
          v157[9] = v65;
          *(_OWORD *)v158 = v64;
          v157[8] = v66;
          outlined release of Image.Resolved((uint64_t)v157);
          v67 = v163;
          v69 = v160;
          v68 = v161;
          *(_OWORD *)(v57 + 32) = v162;
          *(_OWORD *)(v57 + 48) = v67;
          *(_OWORD *)v57 = v69;
          *(_OWORD *)(v57 + 16) = v68;
          v70 = v167;
          v72 = v164;
          v71 = v165;
          *(_OWORD *)(v57 + 96) = v166;
          *(_OWORD *)(v57 + 112) = v70;
          *(_OWORD *)(v57 + 64) = v72;
          *(_OWORD *)(v57 + 80) = v71;
          v74 = v169;
          v73 = v170[0];
          v75 = v168;
          *(_DWORD *)(v57 + 175) = *(_DWORD *)((char *)v170 + 15);
          *(_OWORD *)(v57 + 144) = v74;
          *(_OWORD *)(v57 + 160) = v73;
          *(_OWORD *)(v57 + 128) = v75;
        }
        else
        {
          v56 = v159;
          v159[(v113 >> 6) + 8] |= 1 << v113;
          *(_QWORD *)(v56[6] + 8 * v113) = v76;
          v121 = v56[7] + 184 * v113;
          v122 = v163;
          v124 = v160;
          v123 = v161;
          *(_OWORD *)(v121 + 32) = v162;
          *(_OWORD *)(v121 + 48) = v122;
          *(_OWORD *)v121 = v124;
          *(_OWORD *)(v121 + 16) = v123;
          v125 = v167;
          v127 = v164;
          v126 = v165;
          *(_OWORD *)(v121 + 96) = v166;
          *(_OWORD *)(v121 + 112) = v125;
          *(_OWORD *)(v121 + 64) = v127;
          *(_OWORD *)(v121 + 80) = v126;
          v128 = v168;
          v129 = v169;
          v130 = v170[0];
          *(_DWORD *)(v121 + 175) = *(_DWORD *)((char *)v170 + 15);
          *(_OWORD *)(v121 + 144) = v129;
          *(_OWORD *)(v121 + 160) = v130;
          *(_OWORD *)(v121 + 128) = v128;
          v131 = v56[2];
          v132 = __OFADD__(v131, 1);
          v133 = v131 + 1;
          if (v132)
            goto LABEL_89;
          v56[2] = v133;
        }
        *(_QWORD *)v54 = v56;
        swift_bridgeObjectRelease();
        v19 = v150;
      }
      swift_endAccess();
LABEL_43:
      outlined destroy of PlatformItem((uint64_t)v209);
      EnumeratedSequence.Iterator.next()();
      outlined init with take of (offset: Int, element: PlatformItem)?((uint64_t)&v203, (uint64_t)&v214);
      if (!v215)
        goto LABEL_82;
    }
  }
  v43 = *(_QWORD *)(v24 + 8 * v44);
  if (v43)
  {
    v29 = v44;
    goto LABEL_26;
  }
  while (1)
  {
    v29 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v29 >= v28)
      goto LABEL_31;
    v43 = *(_QWORD *)(v24 + 8 * v29);
    ++v44;
    if (v43)
      goto LABEL_26;
  }
LABEL_90:
  __break(1u);
LABEL_91:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitPageIndexView<A>(uint64_t a1)
{
  return specialized UIKitPageIndexView.makeUIView(context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPageIndexView<A>@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = UIKitPageIndexView.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Coordinator.pageDidChange(_:)(uint64_t a1, uint64_t a2)
{
  if ((a1 & 1) != 0)
    a1 = static Animation.default.getter();
  MEMORY[0x1E0C80A78](a1, a2);
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in Coordinator.pageDidChange(_:)(uint64_t a1, void *a2)
{
  swift_retain();
  swift_retain();
  objc_msgSend(a2, sel_currentPage);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187A69AB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.pageIndexDisplayMode.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A69AF0()
{
  return EnvironmentValues.pageIndexDisplayMode.setter();
}

uint64_t associated type witness table accessor for IndexViewStyle._Body : View in PageIndexViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PageIndexViewStyle()
{
  return &type metadata for PageIndexViewStyle;
}

ValueMetadata *type metadata accessor for PageIndexViewStyle.BackgroundDisplayMode()
{
  return &type metadata for PageIndexViewStyle.BackgroundDisplayMode;
}

uint64_t storeEnumTagSinglePayload for PageIndexViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187A69BB4 + 4 * byte_187C834F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187A69BE8 + 4 * byte_187C834F0[v4]))();
}

uint64_t sub_187A69BE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A69BF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A69BF8);
  return result;
}

uint64_t sub_187A69C04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A69C0CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187A69C10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A69C18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageViewBackgroundDisplayMode()
{
  return &type metadata for PageViewBackgroundDisplayMode;
}

uint64_t type metadata completion function for UIKitPageIndexView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitPageIndexView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    v13 = ((unint64_t)a1 + v6 + 24) & ~v6;
    v14 = ((unint64_t)a2 + v6 + 24) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v15(v13, v14, v4);
    v16 = (_QWORD *)((v7 + v13) & 0xFFFFFFFFFFFFF8);
    v17 = (v7 + v14) & 0xFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v17 += 15;
    *v16 = v18;
    v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
    v21 = *(_BYTE *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
    outlined copy of Environment<Bool>.Content(v20, v21);
    *(_QWORD *)v19 = v20;
    *(_BYTE *)(v19 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for UIKitPageIndexView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  swift_release();
  swift_release();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = (((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  return outlined consume of Environment<ControlSize>.Content(*(_QWORD *)v6, *(unsigned __int8 *)(v6 + 8));
}

_QWORD *initializeWithCopy for UIKitPageIndexView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 24) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 24) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (_QWORD *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v5) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v5);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v5;
  return a1;
}

_QWORD *assignWithCopy for UIKitPageIndexView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 24) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 24) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  LOBYTE(v9) = *(_BYTE *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v14, v9);
  v16 = *(_QWORD *)v13;
  v17 = *(unsigned __int8 *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v9;
  outlined consume of Environment<ControlSize>.Content(v16, v17);
  return a1;
}

uint64_t initializeWithTake for UIKitPageIndexView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  v9 = (_QWORD *)((v8 + v6) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)((v8 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v9 = *v10;
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  return a1;
}

_QWORD *assignWithTake for UIKitPageIndexView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 24) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 24) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)v14;
  LOBYTE(v14) = *(_BYTE *)(v14 + 8);
  v16 = *(_QWORD *)v13;
  v17 = *(unsigned __int8 *)(v13 + 8);
  *(_QWORD *)v13 = v15;
  *(_BYTE *)(v13 + 8) = v14;
  outlined consume of Environment<ControlSize>.Content(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitPageIndexView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 24) & ~v7);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
  }
  else
  {
    v8 = ((((*(_QWORD *)(v4 + 64) + ((v7 + 24) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A6A224 + 4 * byte_187C834FA[v12]))();
  }
}

void storeEnumTagSinglePayload for UIKitPageIndexView(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(_QWORD *)(v5 + 64)
         + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X13 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187A6A3EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A6A45CLL);
}

void sub_187A6A3F4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A6A3FCLL);
  JUMPOUT(0x187A6A45CLL);
}

void sub_187A6A410()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A6A45CLL);
}

void sub_187A6A418()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A6A45CLL);
}

void sub_187A6A420(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if (a3 < 0)
      JUMPOUT(0x187A6A42CLL);
    if (a2 < 0)
      JUMPOUT(0x187A6A450);
    *(_QWORD *)(v3 + 8) = (a2 - 1);
  }
  JUMPOUT(0x187A6A45CLL);
}

uint64_t type metadata accessor for UIKitPageIndexView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIKitPageIndexView);
}

unint64_t lazy protocol witness table accessor for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode;
  if (!lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PageViewBackgroundDisplayMode, &type metadata for PageViewBackgroundDisplayMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode);
  }
  return result;
}

void specialized PlatformItem.applyAccessibilityProperties(to:)(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;

  v4 = PlatformItem.accessibilityEffectiveText.getter();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(a1, sel_setAccessibilityAttributedValue_, v4);

  }
  v6 = *(_QWORD *)(a2 + 320);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = AGGraphClearUpdate();
    MEMORY[0x1E0C80A78](v7, v8);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    v27 = v24;
    v28 = v25;
    v9 = EnvironmentValues.accessibilityEnabled.getter();
    swift_release();
    swift_release();
    if ((v9 & 1) != 0)
    {
      v10 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)&v24);
      swift_bridgeObjectRelease();
      if (v25)
      {
        if (v26 >= 2u)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v11 = (void *)MEMORY[0x18D75CC88](v24, v25);
          swift_bridgeObjectRelease();
          objc_msgSend(a1, sel_setAccessibilityIdentifier_, v11);

        }
      }
      v27 = v6;
      AccessibilityProperties.traits.getter();
      v12 = v24;
      v13 = (unint64_t)objc_msgSend(a1, sel_accessibilityTraits);
      v14 = static AccessibilityTrait.allCases.getter();
      v15 = 0;
      v16 = *(_QWORD *)(v14 + 16);
      if (v16)
      {
        v17 = (unsigned __int8 *)(v14 + 32);
        do
        {
          v19 = *v17++;
          v18 = v19;
          v20 = (1 << v19) & 0x2844;
          v21 = v19 > 0xD || v20 == 0;
          if (!v21 && ((v12 >> v18) & 1) != 0)
          {
            LOBYTE(v24) = v18;
            v22 = AccessibilityTrait.uiTrait.getter();
            if ((v23 & 1) == 0)
              v15 |= v22;
          }
          --v16;
        }
        while (v16);
      }
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setAccessibilityTraits_, v15 | v13);
    }
  }
}

uint64_t outlined init with take of (offset: Int, element: PlatformItem)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for (offset: Int, element: PlatformItem)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: PlatformItem)?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItem)?)
  {
    type metadata accessor for (offset: Int, element: PlatformItem)();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItem)?);
  }
}

void type metadata accessor for (offset: Int, element: PlatformItem)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItem))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItem));
  }
}

id specialized UIKitPageIndexView.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A88]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_pageDidChange_, 4096);
  return v2;
}

uint64_t partial apply for closure #1 in Coordinator.pageDidChange(_:)()
{
  uint64_t v0;

  return closure #1 in Coordinator.pageDidChange(_:)(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in Coordinator.pageDidChange(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in Coordinator.pageDidChange(_:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t AccessibilityFocusState.Binding.propertyID.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  type metadata accessor for AccessibilityFocusStoreLocation(0, v4, v5, a4);
  if (swift_dynamicCastClass())
    return FocusStoreLocation.id.getter();
  else
    return type metadata accessor for AccessibilityFocusState.Binding.PrivateType(0, v4, v5, v6);
}

uint64_t View.accessibilityFocused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v7;
  _QWORD v8[2];
  char v9;

  v8[0] = a1;
  v8[1] = a2;
  v9 = a3;
  v7 = 1;
  return View.accessibilityFocused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E0DEAFA0], a5, MEMORY[0x1E0DEAFB0], a6);
}

void AccessibilityFocusState.Binding.wrappedValue.getter()
{
  type metadata accessor for Binding();
  JUMPOUT(0x18D75B9C8);
}

uint64_t AccessibilityFocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusState.Binding.wrappedValue.setter(a1, a2, (void (*)(void))specialized FocusState.Binding.wrappedValue.setter);
}

void (*AccessibilityFocusState.Binding.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v5[4] = malloc(v8);
  v9 = type metadata accessor for Binding();
  MEMORY[0x18D75B9C8](v9);
  return FocusState.Binding.wrappedValue.modify;
}

uint64_t AccessibilityFocusState.Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t AccessibilityFocusState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityFocusState.getValue(forReading:)(1, a1, a2);
}

uint64_t AccessibilityFocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusState.Binding.wrappedValue.setter(a1, a2, (void (*)(void))specialized AccessibilityFocusState.wrappedValue.setter);
}

uint64_t AccessibilityFocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

uint64_t AccessibilityFocusState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (!*(_QWORD *)(v3 + *(int *)(a2 + 40)))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3 + *(int *)(a2 + 36));
  type metadata accessor for GraphHost();
  swift_retain();
  if ((static GraphHost.isUpdating.getter() & 1) != 0)
  {
    if ((a1 & 1) != 0)
      dispatch thunk of AnyLocation.wasRead.setter();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 16))(a3, v3 + *(int *)(a2 + 36));
  }
  dispatch thunk of AnyLocation.get()();
  return swift_release();
}

void (*AccessibilityFocusState.wrappedValue.modify(_QWORD *a1, uint64_t a2))(_QWORD **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  AccessibilityFocusState.getValue(forReading:)(1, a2, (uint64_t)v9);
  return AccessibilityFocusState.wrappedValue.modify;
}

void AccessibilityFocusState.wrappedValue.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = *v2;
    v3 = v2[1];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(_QWORD *)(v3 + *(int *)(v4 + 40)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    v7 = v2[2];
    v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(_QWORD *)(v2[1] + *(int *)(*v2 + 40)))
      dispatch thunk of AnyLocation.set(_:transaction:)();
    v6 = (void *)v2[4];
    v5 = (void *)v2[5];
    (*(void (**)(void *, _QWORD))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);
  free(v2);
}

uint64_t AccessibilityFocusState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for Binding();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v22 - v18;
  AccessibilityFocusState.getValue(forReading:)(0, a1, (uint64_t)&v22 - v18);
  if (*(_QWORD *)(v2 + *(int *)(a1 + 40)))
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v19, v5);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    v20 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v10, v6);
}

uint64_t static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6, a7);
}

void AccessibilityFocusState.init<>()(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0x10000;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t AccessibilityFocusState.init<>(for:)@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 v3;
  uint64_t result;

  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 3) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v3 = *a1;
  result = AccessibilityTechnologySet.assertAllSupportFocus()(*a1);
  *(_WORD *)a2 = v3;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

uint64_t AccessibilityFocusState.init<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  *(_WORD *)a3 = 0;
  *(_BYTE *)(a3 + 2) = 1;
  v6 = type metadata accessor for Optional();
  v12 = a2;
  v7 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v6, &v12);
  v9 = (int *)type metadata accessor for AccessibilityFocusState(0, v6, v7, v8);
  *(_QWORD *)(a3 + v9[10]) = 0;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v10(a3 + v9[9], 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(a3 + v9[11], 1, 1, a1);
}

uint64_t AccessibilityFocusState.init<A>(for:)@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v14;

  v7 = *a1;
  v8 = type metadata accessor for Optional();
  v14 = a3;
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v8, &v14);
  v11 = (int *)type metadata accessor for AccessibilityFocusState(0, v8, v9, v10);
  *(_QWORD *)(a4 + v11[10]) = 0;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56);
  v12(a4 + v11[9], 1, 1, a2);
  v12(a4 + v11[11], 1, 1, a2);
  result = AccessibilityTechnologySet.assertAllSupportFocus()(v7);
  *(_WORD *)a4 = v7;
  *(_BYTE *)(a4 + 2) = 0;
  return result;
}

uint64_t AccessibilityFocusState.Box.store.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *Value;
  uint64_t v4;
  uint64_t v5;

  if (*MEMORY[0x1E0CFED28] == (_DWORD)result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    Value = (_QWORD *)AGGraphGetValue();
    v4 = Value[1];
    v5 = Value[2];
    *a2 = *Value;
    a2[1] = v4;
    a2[2] = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AccessibilityFocusState.Box.update(property:phase:)(__int16 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  char v35;
  _QWORD *v36;
  _BOOL4 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = v3;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*((_QWORD *)v4 + 1);
  v37 = v12 == 0;
  v36 = v12;
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 24);
    v14 = v12;
  }
  else
  {
    if ((a1[1] & 1) != 0)
    {
      if (one-time initialization token for focusSupportingTechnologies != -1)
        swift_once();
      v15 = static AccessibilityTechnologies.focusSupportingTechnologies;
    }
    else
    {
      v16 = *a1;
      if (one-time initialization token for focusSupportingTechnologies != -1)
        swift_once();
      v15 = static AccessibilityTechnologies.focusSupportingTechnologies & v16;
    }
    v13 = *(_QWORD *)(a3 + 24);
    v18 = type metadata accessor for AccessibilityFocusState(0, v7, v13, v9);
    if (*(_QWORD *)((char *)a1 + *(int *)(v18 + 40))
      && (type metadata accessor for AccessibilityFocusStoreLocation(0, v7, v13, v17),
          (v19 = swift_dynamicCastClass()) != 0))
    {
      v14 = (_QWORD *)v19;
      swift_retain();
    }
    else
    {
      type metadata accessor for AccessibilityFocusStoreLocation(0, v7, v13, v17);
      type metadata accessor for GraphHost();
      v20 = MEMORY[0x18D75C118]();
      v21 = (uint64_t)a1 + *(int *)(v18 + 44);
      LOWORD(v38) = v15;
      v14 = specialized AccessibilityFocusStoreLocation.__allocating_init(host:resetValue:technologies:)(v20, v21, (__int16 *)&v38);
      swift_release();
    }
    *((_QWORD *)v4 + 1) = v14;
  }
  AccessibilityFocusState.Box.store.getter(*v4, &v38);
  v22 = v39;
  if (v39)
  {
    v23 = v40;
    v24 = v38;
  }
  else
  {
    v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v24 = 0;
    v23 = MEMORY[0x1E0DEE9E0];
  }
  v14[2] = v24;
  v14[3] = v22;
  v14[4] = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = AccessibilityFocusStoreLocation.update()((uint64_t)v11, v25);
  v28 = type metadata accessor for AccessibilityFocusState(0, v7, v13, v27);
  v29 = v8;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 24))((uint64_t)a1 + *(int *)(v28 + 36), v11, v7);
  v31 = *((_QWORD *)v4 + 1);
  if (v31)
  {
    v32 = *(int *)(v28 + 40);
    swift_retain();
    swift_release();
    *(_QWORD *)((char *)a1 + v32) = v31;
    if (*MEMORY[0x1E0CFED28] == *v4 || (result = AGGraphGetValue(), (v33 & 1) != 0))
    {
      swift_weakInit();
      specialized closure #2 in AccessibilityFocusState.Box.update(property:phase:)();
      result = swift_weakDestroy();
    }
    if (!v26)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v7);
      v35 = v37;
      return v35 & 1;
    }
    if (*((_QWORD *)v4 + 1))
    {
      v34 = v36 == 0;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v7);
      v35 = v34 | AccessibilityFocusStoreLocation.wasRead.getter();
      return v35 & 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #2 in AccessibilityFocusState.Box.update(property:phase:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    AccessibilityFocusStoreLocation.performDeferredUpdate()();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance AccessibilityFocusState<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, *(_QWORD *)(a6 + 16), a5, *(_QWORD *)(a6 + 24));
}

uint64_t View.accessibilityFocused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a5;
  v29 = a7;
  v30 = a3;
  v27 = a1;
  v28 = a2;
  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AccessibilityFocusState.Binding(0, v12, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v27 - v17;
  v20 = type metadata accessor for AccessibilityFocusBindingModifier(0, a4, a6, v19);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v27 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v18, v27, v14, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v28, a4);
  AccessibilityFocusBindingModifier.init(binding:prototype:)((uint64_t)v18, (uint64_t)v11, a4, a6, (uint64_t)v25);
  MEMORY[0x18D75B4AC](v25, v30, v20, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v20);
}

uint64_t AccessibilityFocusBindingModifier.init(binding:prototype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = type metadata accessor for AccessibilityFocusState.Binding(0, a3, a4, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  v12 = a5 + *(int *)(type metadata accessor for AccessibilityFocusBindingModifier(0, a3, a4, v11) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v12, a2, a3);
}

uint64_t AccessibilityFocusBindingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];

  v44 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v42 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v39 = v7;
  v38 = type metadata accessor for AccessibilityFocusState.Binding(0, v4, v7, v8);
  v9 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v10);
  v12 = (char *)&v37 - v11;
  v14 = type metadata accessor for AccessibilityFocusStoreListModifier(0, v4, v7, v13);
  v41 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v37 - v17;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusBindingModifier<A>, a2, v16);
  v19 = type metadata accessor for _ViewModifier_Content();
  v20 = type metadata accessor for ModifiedContent();
  v40 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v37 - v27;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v30 = v37;
  v29(v12, v37, v38, v26);
  v31 = v30 + *(int *)(a2 + 36);
  v32 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v31, v4);
  AccessibilityFocusStoreListModifier.init(binding:prototype:)((uint64_t)v12, v32, v4, v39, (uint64_t)v18);
  v33 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v19);
  MEMORY[0x18D75B4AC](v18, v19, v14, v33);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v14);
  v45[0] = v33;
  v45[1] = &protocol witness table for AccessibilityFocusStoreListModifier<A>;
  v34 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v20, v45);
  static ViewBuilder.buildExpression<A>(_:)(v23, v20, v34);
  v35 = *(void (**)(char *, uint64_t))(v40 + 8);
  v35(v23, v20);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v28, v20, v44);
  return ((uint64_t (*)(char *, uint64_t))v35)(v28, v20);
}

uint64_t specialized AccessibilityFocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v2 + *(int *)(a2 + 40)))
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  return result;
}

uint64_t specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  lazy protocol witness table accessor for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v9 = type metadata accessor for AccessibilityFocusState.Box(0, a4, a6, v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusState<A>.Box, v9);
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

uint64_t type metadata accessor for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusState);
}

uint64_t type metadata accessor for AccessibilityFocusState.Binding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusState.Binding);
}

uint64_t type metadata accessor for AccessibilityFocusBindingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusBindingModifier);
}

void sub_187A6B958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  keypath_getTm_3(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityFocusState.Binding, (void (*)(uint64_t))AccessibilityFocusState.Binding.wrappedValue.getter);
}

uint64_t sub_187A6B96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_2(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityFocusState.Binding, (uint64_t (*)(uint64_t, uint64_t))specialized FocusState.Binding.wrappedValue.setter);
}

uint64_t sub_187A6B980()
{
  return 16;
}

__n128 sub_187A6B98C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_187A6B998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  keypath_getTm_3(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityFocusState, (void (*)(uint64_t))AccessibilityFocusState.wrappedValue.getter);
}

uint64_t sub_187A6B9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_2(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for AccessibilityFocusState, specialized AccessibilityFocusState.wrappedValue.setter);
}

uint64_t keypath_setTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8;

  v8 = a5(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
  return a6(a1, v8);
}

uint64_t sub_187A6BA08()
{
  return 16;
}

__n128 sub_187A6BA14(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for AccessibilityFocusState()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessibilityFocusState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 7;
  v9 = v6 + 8;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8 + ((v7 + 7 + ((v6 + 3) & ~v6)) & 0xFFFFFFFFFFFFFFF8)) & ~v6) + v7 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v13 = ~v6;
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v14 = (a1 + v6 + 3) & ~v6;
    v15 = ((unint64_t)a2 + v6 + 3) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v16(v14, v15, v4);
    v17 = (_QWORD *)((v8 + v14) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)((v8 + v15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v18;
    v19 = ((unint64_t)v17 + v9) & v13;
    v20 = ((unint64_t)v18 + v9) & v13;
    swift_retain();
    v16(v19, v20, v4);
  }
  return v3;
}

uint64_t destroy for AccessibilityFocusState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v8)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (a1 + v4 + 3) & ~v4;
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v8(v5, v2);
  v6 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  return ((uint64_t (*)(unint64_t, uint64_t))v8)((v4 + v6 + 8) & ~v4, v2);
}

uint64_t initializeWithCopy for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 3 + a1) & ~v6;
  v8 = (v6 + 3 + a2) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (_QWORD *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = ((unint64_t)v11 + v6 + 8) & ~v6;
  v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
  swift_retain();
  v9(v13, v14, v4);
  return a1;
}

uint64_t assignWithCopy for AccessibilityFocusState(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 3 + a1) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 3) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64) + 7;
  v12 = (_QWORD *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_retain();
  swift_release();
  v10(((unint64_t)v12 + v7 + 8) & ~v7, ((unint64_t)v13 + v7 + 8) & ~v7, v5);
  return a1;
}

uint64_t initializeWithTake for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 3 + a1) & ~v6;
  v8 = (v6 + 3 + a2) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (_QWORD *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v9(((unint64_t)v11 + v6 + 8) & ~v6, ((unint64_t)v12 + v6 + 8) & ~v6, v4);
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 3 + a1) & ~v6;
  v8 = (v6 + 3 + a2) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v9(v7, v8, v4);
  v10 = *(_QWORD *)(v5 + 64) + 7;
  v11 = (_QWORD *)((v10 + v7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_release();
  v9(((unint64_t)v11 + v6 + 8) & ~v6, ((unint64_t)v12 + v6 + 8) & ~v6, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v8 + 7;
  v10 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v11 = ((v7 + ((v9 + ((v7 + 3) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7) + v8;
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_22:
      v17 = (a1 + v7 + 3) & ~v7;
      if (v5 >= 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))(v17);
      v18 = *(_QWORD *)((v9 + v17) & 0xFFFFFFFFFFFFF8);
      if (v18 >= 0xFFFFFFFF)
        LODWORD(v18) = -1;
      if ((v18 + 1) >= 2)
        return v18;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_22;
LABEL_15:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if (!(_DWORD)v11)
    return v6 + v16 + 1;
  if (v11 > 3)
    LODWORD(v11) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A6C03C + 4 * byte_187C836E0[(v11 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityFocusState(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80)
       + ((*(_QWORD *)(v5 + 64)
         + 7
         + ((*(unsigned __int8 *)(v5 + 80) + 3) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusState.Binding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A6C3C4 + 4 * byte_187C836EE[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityFocusState.Binding(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_187A6C638(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v4 = a1[2];
  v5 = type metadata accessor for AccessibilityFocusBindingModifier(255, a1[1], a1[3], a4);
  v6 = type metadata accessor for ModifiedContent();
  v8[0] = v4;
  v8[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusBindingModifier<A>, v5);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v8);
}

uint64_t sub_187A6C6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a1 + 8);
  type metadata accessor for AccessibilityFocusBindingModifier<Bool>(255, a2, a3, a4);
  v5 = type metadata accessor for ModifiedContent();
  v10[0] = v4;
  v10[1] = lazy protocol witness table accessor for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>(v5, v6, v7, v8);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v10);
}

void type metadata accessor for AccessibilityFocusBindingModifier<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for AccessibilityFocusBindingModifier<Bool>)
  {
    v4 = type metadata accessor for AccessibilityFocusBindingModifier(0, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0], a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityFocusBindingModifier<Bool>);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;

  result = lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>)
  {
    type metadata accessor for AccessibilityFocusBindingModifier<Bool>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusBindingModifier<A>, v5);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusBindingModifier<Bool> and conformance AccessibilityFocusBindingModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusBindingModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 16) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v7 + 8) & ~v7);
      v16 = *v15;
      if (v16 >= 0xFFFFFFFF)
        LODWORD(v16) = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A6C890 + 4 * byte_187C836FC[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for AccessibilityFocusBindingModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityFocusBindingModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for AccessibilityFocusState.Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusState.Box);
}

uint64_t sub_187A6CB50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for AccessibilityFocusBindingModifier(255, *a1, v5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityFocusBindingModifier<A>, v6);
  v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for AccessibilityFocusStoreListModifier(255, v4, v5, v8);
  v9 = type metadata accessor for ModifiedContent();
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v7);
  v11[1] = &protocol witness table for AccessibilityFocusStoreListModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v11);
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in AccessibilityFocusState<A>.Box()
{
  return &protocol witness table for AccessibilityFocusState<A>;
}

uint64_t type metadata accessor for AccessibilityFocusState.Binding.PrivateType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessibilityFocusState.Binding.PrivateType);
}

void static _ConditionalContent<>._makeToolbar(content:inputs:)()
{
  PreferencesInputs.makeIndirectOutputs()();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for _ConditionalContent<>.ToolbarProvider();
}

uint64_t sub_187A6CDA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ConditionalContent<A, B><>.ToolbarProvider, a1);
  v6 = v1;
  _ConditionalContent.Container.init(content:provider:)();
  v7 = *(_DWORD *)(v3 - 224);
  v8 = *(_QWORD *)(v3 - 216);
  v9 = *(_QWORD *)(v3 - 192);
  v10 = *(_QWORD *)(v3 - 184);
  v11 = *(_DWORD *)(v3 - 176);
  v12 = *(_QWORD *)(v3 - 168);
  v13 = *(_DWORD *)(v3 - 160);
  v14 = *(_QWORD *)(v3 - 152);
  v23 = *(_QWORD *)(v3 - 232);
  v15 = *(_DWORD *)(v3 - 144);
  v16 = *(_QWORD *)(v3 - 136);
  v17 = *(void **)(v3 - 128);
  v18 = *(_OWORD *)(v3 - 208);
  *(_DWORD *)(v3 - 240) = *(_DWORD *)(v3 - 240);
  *(_QWORD *)(v3 - 232) = v23;
  *(_DWORD *)(v3 - 224) = v7;
  *(_OWORD *)(v3 - 208) = v18;
  *(_QWORD *)(v3 - 216) = v8;
  *(_QWORD *)(v3 - 192) = v9;
  *(_QWORD *)(v3 - 184) = v10;
  *(_DWORD *)(v3 - 176) = v11;
  *(_QWORD *)(v3 - 168) = v12;
  *(_DWORD *)(v3 - 160) = v13;
  *(_QWORD *)(v3 - 152) = v14;
  *(_DWORD *)(v3 - 144) = v15;
  *(_QWORD *)(v3 - 136) = v16;
  *(_QWORD *)(v3 - 128) = v17;
  v28[2] = type metadata accessor for _ConditionalContent.Info();
  v31 = v2;
  v32 = v6;
  v33 = a1;
  v34 = v5;
  v29 = type metadata accessor for _ConditionalContent.Container();
  v30 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BB8], v29);
  v19 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v17;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3 - 240, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v28, v29, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v21);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v3 - 240) = v24;
  *(_DWORD *)(v3 - 232) = v25;
  LOBYTE(v31) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)v26 = v24;
  *(_DWORD *)(v26 + 8) = v25;
  *(_QWORD *)(v26 + 16) = v27;
  return result;
}

void type metadata accessor for _ConditionalContent<>.ToolbarProvider()
{
  JUMPOUT(0x18D75FF28);
}

void _ConditionalContent<>.ToolbarProvider.detachOutputs()()
{
  PreferencesOutputs.detachIndirectOutputs()();
}

uint64_t _ConditionalContent<>.ToolbarProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 40);
  v20 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_DWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v20;
  *(_DWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  swift_beginAccess();
  v9 = *(_DWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v18 = *(_OWORD *)(v4 + 48);
  v19 = *(_OWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v4 + 64);
  v12 = *(_QWORD *)(v4 + 72);
  v13 = *(_BYTE *)(v4 + 80);
  v14 = *(_BYTE *)(v4 + 81);
  v15 = *(_QWORD *)(v4 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v9;
  *(_QWORD *)(v16 + 24) = v10;
  *(_OWORD *)(v16 + 32) = v19;
  *(_OWORD *)(v16 + 48) = v18;
  *(_QWORD *)(v16 + 64) = v11;
  *(_QWORD *)(v16 + 72) = v12;
  *(_BYTE *)(v16 + 80) = v13;
  *(_BYTE *)(v16 + 81) = v14;
  *(_QWORD *)(v16 + 88) = v15;
  swift_retain();
  *(_QWORD *)(a1 + 16) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  int v20;
  _BYTE v21[4];

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = *((_DWORD *)a2 + 14);
  v9 = a2[8];
  v10 = *((_DWORD *)a2 + 18);
  v11 = *(_QWORD *)(a3 + 16);
  _GraphValue.init(_:)();
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = *(_OWORD *)(a2 + 3);
  v17 = *(_OWORD *)(a2 + 5);
  v18 = v8;
  v19 = v9;
  v20 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(a3 + 32) + 32))(v21, &v13, v11);
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  _BYTE v26[4];

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v9 = a2[6];
  v14 = *((_DWORD *)a2 + 18);
  v15 = *((_DWORD *)a2 + 14);
  v10 = a2[8] + 1;
  v11 = *(_QWORD *)(a3 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  _GraphValue.init(_:)();
  v16 = v5;
  v17 = v6;
  v18 = v7;
  v12 = a2[4];
  v19 = a2[3];
  v20 = v12;
  v21 = v8;
  v22 = v9;
  v23 = v15;
  v24 = v10;
  v25 = v14;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t))(*(_QWORD *)(a3 + 40) + 32))(v26, &v16, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.ToolbarProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v2 = *(_DWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_DWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_DWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.ToolbarProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(v1 + 88);
  v3 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_DWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

void protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> _ConditionalContent<A, B>()
{
  static _ConditionalContent<>._makeToolbar(content:inputs:)();
}

void static Optional<A>._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v18 = *((_DWORD *)a2 + 14);
  v10 = a2[8];
  v11 = *((_DWORD *)a2 + 18);
  LODWORD(v23) = *a1;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  v17 = *(_OWORD *)(a2 + 5);
  v12 = a2[3];
  v13 = a2[4];
  LODWORD(v23) = _GraphValue.value.getter();
  v20 = type metadata accessor for _ConditionalContent();
  v21 = type metadata accessor for Optional<A>.Child(0, a3, a4, v14);
  v22 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for A?<A>.Child, v21);
  v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v19, v21, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  _GraphValue.init(_:)();
  v23 = v7;
  v24 = v8;
  v25 = v9;
  v26 = v12;
  v27 = v13;
  v28 = v17;
  v29 = v18;
  v30 = v10;
  v31 = v11;
  static _ConditionalContent<>._makeToolbar(content:inputs:)();
}

uint64_t Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Value;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v3 = type metadata accessor for _ConditionalContent.Storage();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21 - v6;
  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, Value, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    v19 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v19(v17, v12, a1);
    v19(v7, v17, a1);
  }
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v22, v7, v3);
}

void protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <A> A?(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  static Optional<A>._makeToolbar(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t instantiation function for generic protocol witness table for <> _ConditionalContent<A, B>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = *(_QWORD *)(a3[1] + 8);
  v6[0] = *(_QWORD *)(*a3 + 8);
  v6[1] = v4;
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> _ConditionalContent<A, B>, a2, v6);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for ListCoreDataSource.performDrop(to:) in conformance TableDataSourceAdaptor(uint64_t a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = *(void **)(a1 + 24);
  return specialized ListCoreDataSource.performDrop(to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), v1);
}

uint64_t specialized ListCoreDataSource.performDrop(to:)(unint64_t a1, uint64_t a2, char a3, Swift::OpaquePointer a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[11];
  _OWORD v10[2];
  _OWORD v11[9];
  __int128 v12;
  __int128 v13;
  _OWORD v14[2];
  _BYTE v15[208];

  TableDataSourceAdaptor.contextForItem(index:)(a1, a2, (uint64_t)v15);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11);
  if ((_QWORD)v12)
  {
    v9[10] = v13;
    v10[0] = v14[0];
    *(_OWORD *)((char *)v10 + 11) = *(_OWORD *)((char *)v14 + 11);
    v9[6] = v11[6];
    v9[7] = v11[7];
    v9[8] = v11[8];
    v9[9] = v12;
    v9[2] = v11[2];
    v9[3] = v11[3];
    v9[4] = v11[4];
    v9[5] = v11[5];
    v9[0] = v11[0];
    v9[1] = v11[1];
    v6 = ViewTraitCollection.insertInteraction(for:)(a3 & 1);
    if (v6 != 1)
    {
      v7 = v6;
      OnInsertInteraction.insert(_:)(a4);
      outlined consume of OnInsertInteraction?(v7);
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  return outlined destroy of TaskPriority?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
}

uint64_t ListCoreDataSource.performDrop(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[3];
  char *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;

  v49 = a3;
  v46 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v43[1] = AssociatedTypeWitness;
  v43[2] = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = type metadata accessor for DropCoordinator.Operation(0, TupleTypeMetadata2, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v43 - v12;
  v14 = swift_checkMetadataState();
  v47 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v43 - v20;
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)v43 - v25;
  v44 = (char *)v43 + *(int *)(v27 + 48) - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v9, v24);
  v45 = swift_getEnumCaseMultiPayload() == 1;
  v28 = *(int *)(v14 + 48);
  v29 = &v21[v28];
  v30 = &v13[v28];
  v31 = swift_checkMetadataState();
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32);
  v32(v21, v13, v31);
  v33 = swift_checkMetadataState();
  v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
  v34(v29, v30, v33);
  v35 = &v17[*(int *)(v14 + 48)];
  v32(v17, v21, v31);
  v34(v35, v29, v33);
  v32(v26, v17, v31);
  v36 = v44;
  v34(v44, v35, v33);
  v37 = (uint64_t)&v21[*(int *)(v14 + 48)];
  v38 = swift_checkMetadataState();
  v39 = *(_QWORD *)(v38 - 8);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v21, v26, v38);
  v40 = swift_checkMetadataState();
  v41 = *(_QWORD *)(v40 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 16))(v37, v36, v40);
  v51 = v48;
  v52 = v49;
  v53 = v45;
  v54 = v46;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v21, v37, (uint64_t)partial apply for closure #1 in ListCoreDataSource.performDrop(to:), (uint64_t)v50, v48, MEMORY[0x1E0DEE9C0] + 8, v49, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)&v55, (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v14);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v37, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v21, v38);
}

BOOL protocol witness for ListCoreDataSource.canMoveCell(forRowAt:) in conformance TableDataSourceAdaptor(unint64_t *a1, uint64_t *a2)
{
  BOOL v2;
  _OWORD v4[11];
  _OWORD v5[2];
  _OWORD v6[9];
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  _BYTE v10[216];

  TableDataSourceAdaptor.contextForItem(index:)(*a1, *a2, (uint64_t)v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v6);
  if ((_QWORD)v7)
  {
    v4[10] = v8;
    v5[0] = v9[0];
    *(_OWORD *)((char *)v5 + 11) = *(_OWORD *)((char *)v9 + 11);
    v4[6] = v6[6];
    v4[7] = v6[7];
    v4[8] = v6[8];
    v4[9] = v7;
    v4[2] = v6[2];
    v4[3] = v6[3];
    v4[4] = v6[4];
    v4[5] = v6[5];
    v4[0] = v6[0];
    v4[1] = v6[1];
    v2 = specialized closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)((uint64_t)v4);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  else
  {
    v2 = 0;
  }
  outlined destroy of TaskPriority?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  return v2;
}

uint64_t ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t, double);
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  char v31;

  v27 = a4;
  v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v23 - v15;
  v18 = (char *)&v23 + *(int *)(v17 + 48) - v15;
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16);
  v19((char *)&v23 - v15, a1, AssociatedTypeWitness, v14);
  v23 = *(_QWORD *)(v7 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v20(v18, v26, v7);
  v21 = (uint64_t)&v11[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v19)(v11, v16, AssociatedTypeWitness);
  v20((char *)v21, (uint64_t)v18, v7);
  v29 = a3;
  v30 = v27;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v11, v21, (uint64_t)partial apply for closure #1 in ListCoreDataSource.canMoveCell(forRowAt:), (uint64_t)v28, a3, MEMORY[0x1E0DEAFA0], v27, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)&v31, (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, TupleTypeMetadata2);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, AssociatedTypeWitness);
  return v31 & 1;
}

BOOL protocol witness for ListCoreDataSource.canMoveCell(from:to:) in conformance TableDataSourceAdaptor(_BOOL8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return specialized ListCoreDataSource.canMoveCell(from:to:)(*a1, *a2, *a3, *a4);
}

BOOL specialized ListCoreDataSource.canMoveCell(from:to:)(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BOOL8 v14;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v19[6];

  v5 = *(_QWORD *)(v4 + 40);
  if (*(_QWORD *)(v5 + 16) <= a3)
    return 0;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = v5 + 96 * a3;
    v9 = *(_QWORD *)(v7 + 112);
    v8 = *(_QWORD *)(v7 + 120);
    v10 = __OFADD__(v9, v8);
    v11 = v9 + v8;
    if (!v10)
    {
      if (v11 > a4)
      {
        v14 = result;
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_187BF9820;
        *(_QWORD *)(inited + 32) = v14;
        *(_QWORD *)(inited + 40) = a2;
        *(_QWORD *)(inited + 48) = a3;
        *(_QWORD *)(inited + 56) = a4;
        MEMORY[0x1E0C80A78](inited, v16);
        v19[2] = v4;
        v17 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:), (uint64_t)v19, inited);
        if (v17[2])
          v18 = specialized closure #1 in ListCoreDataSource.canMoveCell(from:to:)((uint64_t)v17);
        else
          v18 = 0;
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        return v18;
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t ListCoreDataSource.canMoveCell(from:to:)(void (*a1)(void), uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  void (*v32)(double);
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83[9];

  v76 = a3;
  v77 = a4;
  v79 = a2;
  v75 = a1;
  v65 = a6;
  v7 = *(_QWORD *)(a6 + 8);
  swift_getAssociatedTypeWitness();
  v82 = a5;
  v70 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v69 = (char *)&v62 - v10;
  v11 = swift_checkMetadataState();
  v67 = *(_QWORD *)(v11 - 8);
  v68 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v66 = (char *)&v62 - v13;
  v73 = v7;
  swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v14 = swift_getAssociatedTypeWitness();
  v71 = *(_QWORD *)(v14 - 8);
  v15 = v71;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v62 - v17;
  v19 = swift_checkMetadataState();
  v72 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v62 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v78 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v24);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)&v62 + *(int *)(TupleTypeMetadata2 + 48) - v30;
  v32 = *(void (**)(double))(v15 + 16);
  v80 = (char *)&v62 - v30;
  v32(v29);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  v63 = v31;
  v33(v31, v79, AssociatedTypeWitness);
  v79 = TupleTypeMetadata2;
  v34 = *(int *)(TupleTypeMetadata2 + 48);
  v35 = v73;
  v36 = &v26[v34];
  v75 = (void (*)(void))v32;
  ((void (*)(char *, char *, uint64_t))v32)(v26, v76, v14);
  v37 = v77;
  v76 = v36;
  v77 = AssociatedTypeWitness;
  v64 = (void (*)(uint64_t, char *, uint64_t))v33;
  v33(v36, v37, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v35 + 56))(v82, v35);
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v22, v19);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v36) = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v18, v14);
  if ((v36 & 1) == 0)
    goto LABEL_4;
  v38 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 80))(v26, v82, v35);
  v40 = v68;
  v39 = v69;
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v40);
  v41 = v77;
  swift_getAssociatedConformanceWitness();
  v42 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v39, v41);
  if ((v42 & 1) != 0)
  {
    v43 = v79;
    type metadata accessor for _ContiguousArrayStorage();
    v44 = v78;
    v45 = *(_QWORD *)(v78 + 72);
    swift_allocObject();
    v46 = static Array._adoptStorage(_:count:)();
    v48 = v47;
    v49 = v47 + *(int *)(v43 + 48);
    v50 = v75;
    ((void (*)(uint64_t, char *, uint64_t))v75)(v47, v80, v14);
    v51 = v49;
    v52 = v77;
    v53 = v64;
    v64(v51, v63, v77);
    v54 = v48 + v45 + *(int *)(v43 + 48);
    v50();
    v53(v54, v76, v52);
    _finalizeUninitializedArray<A>(_:)();
    MEMORY[0x1E0C80A78](v46, v55);
    v56 = v82;
    v57 = v65;
    *(&v62 - 2) = v82;
    *(&v62 - 1) = v57;
    ListCoreDataSource.visitRowsAt<A>(_:visitor:)((void (*)(uint64_t))partial apply for closure #1 in ListCoreDataSource.canMoveCell(from:to:), v56, MEMORY[0x1E0DEAFA0], v57, (uint64_t)v83);
    swift_bridgeObjectRelease();
    v58 = *(void (**)(char *, uint64_t))(v44 + 8);
    v58(v26, v43);
    v58(v80, v43);
    return v83[0] & 1;
  }
  else
  {
LABEL_4:
    v60 = v79;
    v61 = *(void (**)(char *, uint64_t))(v78 + 8);
    v61(v26, v79);
    v61(v80, v60);
    return 0;
  }
}

uint64_t protocol witness for ListCoreDataSource.moveCell(fromRowAt:to:) in conformance TableDataSourceAdaptor(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return specialized ListCoreDataSource.moveCell(fromRowAt:to:)(*a1, *a2, *a3, *a4);
}

uint64_t specialized ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD *v11;
  _QWORD v13[4];
  _BYTE v14[176];

  v5 = v4;
  outlined init with copy of TableDataSourceAdaptor(v5, (uint64_t)v14);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9820;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  *(_QWORD *)(inited + 56) = a4;
  v13[2] = v14;
  v11 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:), (uint64_t)v13, inited);
  if (v11[2])
    specialized closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)((uint64_t)v11, a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of TableDataSourceAdaptor((uint64_t)v14);
}

uint64_t ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, double);
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67[9];

  v57 = a6;
  v54 = a3;
  v55 = a4;
  v51 = a1;
  v52 = a2;
  v62 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v61 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v60 = a5;
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v12);
  v53 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v59 = (char *)&v49 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v49 - v19;
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v49 - v24;
  v27 = (char *)&v49 + *(int *)(v26 + 48) - v24;
  v28 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
  v28((char *)&v49 - v24, v51, AssociatedTypeWitness, v23);
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v30 = v27;
  v29(v27, v52, v9);
  v31 = *(int *)(TupleTypeMetadata2 + 48);
  v58 = v20;
  v32 = &v20[v31];
  v52 = &v20[v31];
  ((void (*)(char *, uint64_t, uint64_t))v28)(v20, v54, AssociatedTypeWitness);
  v29(v32, v55, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v56, v60);
  type metadata accessor for _ContiguousArrayStorage();
  v50 = v11;
  v33 = *(_QWORD *)(v11 + 72);
  swift_allocObject();
  v56 = static Array._adoptStorage(_:count:)();
  v35 = v34;
  v36 = (char *)(v34 + *(int *)(TupleTypeMetadata2 + 48));
  v49 = v25;
  ((void (*)(uint64_t, char *, uint64_t))v28)(v34, v25, AssociatedTypeWitness);
  v29(v36, v30, v9);
  v37 = v35 + v33 + *(int *)(TupleTypeMetadata2 + 48);
  v38 = AssociatedTypeWitness;
  ((void (*)(void))v28)();
  v39 = v52;
  v29((char *)v37, v52, v9);
  _finalizeUninitializedArray<A>(_:)();
  v40 = &v59[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(void))v28)();
  v29(v40, v30, v9);
  v41 = v53;
  v42 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
  v43 = v58;
  ((void (*)(char *, char *, uint64_t))v28)(v53, v58, v38);
  v29(v42, v39, v9);
  v45 = v59;
  v44 = v60;
  v63 = v60;
  v64 = v57;
  v65 = v59;
  v66 = v41;
  v46 = v61;
  ListCoreDataSource.visitRowsAt<A>(_:visitor:)((void (*)(uint64_t))partial apply for closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:), v60, MEMORY[0x1E0DEE9C0] + 8, v57, (uint64_t)v67);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v46, v44);
  v47 = *(void (**)(char *, uint64_t))(v50 + 8);
  v47(v43, TupleTypeMetadata2);
  v47(v49, TupleTypeMetadata2);
  v47(v45, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v47)(v41, TupleTypeMetadata2);
}

uint64_t protocol witness for ListCoreDataSource.deleteCell(forRow:) in conformance TableDataSourceAdaptor(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD v6[11];
  _OWORD v7[2];
  _OWORD v8[9];
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  _BYTE v12[208];
  _BYTE v13[176];

  v3 = *a1;
  v4 = *a2;
  outlined init with copy of TableDataSourceAdaptor(v2, (uint64_t)v13);
  TableDataSourceAdaptor.contextForItem(index:)(v3, v4, (uint64_t)v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8);
  if ((_QWORD)v9)
  {
    v6[10] = v10;
    v7[0] = v11[0];
    *(_OWORD *)((char *)v7 + 11) = *(_OWORD *)((char *)v11 + 11);
    v6[6] = v8[6];
    v6[7] = v8[7];
    v6[8] = v8[8];
    v6[9] = v9;
    v6[2] = v8[2];
    v6[3] = v8[3];
    v6[4] = v8[4];
    v6[5] = v8[5];
    v6[0] = v8[0];
    v6[1] = v8[1];
    specialized closure #1 in ListCoreDataSource.deleteCell(forRow:)((uint64_t)v6, v3, v4);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  outlined destroy of TaskPriority?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  return outlined destroy of TableDataSourceAdaptor((uint64_t)v13);
}

uint64_t ListCoreDataSource.deleteCell(forRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, double);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;

  v42 = a4;
  v40 = a2;
  v44 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v43 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v39 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v35 - v15;
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v35 - v20;
  v23 = (char *)&v35 + *(int *)(v22 + 48) - v20;
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v38 + 16);
  v24((char *)&v35 - v20, a1, AssociatedTypeWitness, v19);
  v37 = *(_QWORD *)(v8 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v25(v23, v40, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v41, a3);
  v26 = *(int *)(TupleTypeMetadata2 + 48);
  v27 = v16;
  v35 = v16;
  v36 = AssociatedTypeWitness;
  v28 = (uint64_t)&v16[v26];
  v41 = v28;
  ((void (*)(char *, char *, uint64_t))v24)(v27, v21, AssociatedTypeWitness);
  v25((char *)v28, (uint64_t)v23, v8);
  v29 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v24)(v12, v21, AssociatedTypeWitness);
  v25(v29, (uint64_t)v23, v8);
  v46 = a3;
  v47 = v42;
  v48 = v12;
  v30 = (uint64_t)v35;
  v31 = v41;
  v32 = v43;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v35, v41, (uint64_t)partial apply for closure #1 in ListCoreDataSource.deleteCell(forRow:), (uint64_t)v45, a3, MEMORY[0x1E0DEE9C0] + 8, v42, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)&v49, (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, a3);
  v33 = *(void (**)(char *, uint64_t))(v39 + 8);
  v33(v21, TupleTypeMetadata2);
  v33(v12, TupleTypeMetadata2);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v31, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v30, v36);
}

uint64_t protocol witness for ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(*a1, *a2, a3, a4);
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  int v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  char v49;

  v45 = a6;
  v44 = a3;
  v41 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v42 = (uint64_t)&v35 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v35 - v21;
  v24 = (char *)&v35 + *(int *)(v23 + 48) - v21;
  v39 = *(_QWORD *)(v12 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v39 + 16);
  v26 = a1;
  v27 = v12;
  v37 = v12;
  v25((char *)&v35 - v21, v26, v12, v20);
  v38 = *(_QWORD *)(v13 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v28(v24, a2, v13);
  v29 = (uint64_t)&v17[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v25)(v17, v22, v27);
  v28((char *)v29, (uint64_t)v24, v13);
  v47 = a4;
  v48 = v41;
  v49 = v44;
  v31 = v42;
  v30 = AssociatedTypeWitness;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v17, v29, (uint64_t)partial apply for closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:), (uint64_t)v46, a4, AssociatedTypeWitness, v41, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), v42, (void (*)(uint64_t, char *, uint64_t, _QWORD))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v22, TupleTypeMetadata2);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v29, v13);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v37);
  v32 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v30) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v45, 1, 1, v30);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v31, v36);
  }
  else
  {
    v34 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v45, v31, v30);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v30);
  }
}

_QWORD *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[27];
  _OWORD v25[9];
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];
  __int128 v29;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v29 = *(_OWORD *)(a3 + 16 * v7 + 32);
    a1(v25, &v29);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((_QWORD)v26)
    {
      v23 = v27;
      *(_OWORD *)v24 = v28[0];
      *(_OWORD *)&v24[11] = *(_OWORD *)((char *)v28 + 11);
      v19 = v25[6];
      v20 = v25[7];
      v21 = v25[8];
      v22 = v26;
      v15 = v25[2];
      v16 = v25[3];
      v17 = v25[4];
      v18 = v25[5];
      v13 = v25[0];
      v14 = v25[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      v10 = v8[2];
      v9 = v8[3];
      if (v10 >= v9 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v8);
      v8[2] = v10 + 1;
      v11 = &v8[26 * v10];
      v11[2] = v13;
      v11[5] = v16;
      v11[6] = v17;
      v11[3] = v14;
      v11[4] = v15;
      v11[9] = v20;
      v11[10] = v21;
      v11[7] = v18;
      v11[8] = v19;
      *(_OWORD *)((char *)v11 + 219) = *(_OWORD *)&v24[11];
      v11[12] = v23;
      v11[13] = *(_OWORD *)v24;
      v11[11] = v22;
    }
    else
    {
      outlined destroy of TaskPriority?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ListCoreDataSource.canMoveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a4;
  v33 = a1;
  v6 = *(_QWORD *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v31 = (uint64_t)&v29 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v13 - 8);
  v30 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v29 - v19;
  type metadata accessor for IndexPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658], MEMORY[0x1E0CB1690]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v37 == v36)
  {
    v21 = 0;
  }
  else
  {
    v22 = v31;
    ListDiffable.rowIndex(at:)((uint64_t)v20, v31, v33, a3, v6);
    ListDiffable.rowIndex(at:)((uint64_t)v16, (uint64_t)v9, a2, a3, v6);
    v21 = (*(uint64_t (**)(char *, uint64_t, char *, char *, uint64_t))(v35 + 176))(v20, v22, v16, v9, a3);
    v23 = *(void (**)(char *, uint64_t))(v32 + 8);
    v24 = AssociatedTypeWitness;
    v23(v9, AssociatedTypeWitness);
    v25 = *(void (**)(char *, uint64_t))(v29 + 8);
    v26 = v16;
    v27 = v30;
    v25(v26, v30);
    v23((char *)v22, v24);
    v25(v20, v27);
  }
  return v21 & 1;
}

uint64_t ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedTypeWitness;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a4;
  v40 = a2;
  v37 = a1;
  v5 = *(_QWORD *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v34 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v13 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v13 - 8);
  v35 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v34 - v19;
  v21 = type metadata accessor for IndexPath();
  v22 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1658];
  v23 = *(_QWORD *)(v21 - 8);
  v25 = MEMORY[0x1E0C80A78](v21, v24);
  v27 = (char *)&v34 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v27, v40, v21, v25);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, v22, MEMORY[0x1E0CB1690]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v42 == v41)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v21);
    ListDiffable.rowIndex(at:)((uint64_t)v20, (uint64_t)v12, v37, a3, v5);
    ListDiffable.rowIndex(at:)((uint64_t)v16, (uint64_t)v8, v40, a3, v5);
    (*(void (**)(char *, char *, char *, char *, uint64_t))(v39 + 184))(v20, v12, v16, v8, a3);
    v28 = *(void (**)(char *, uint64_t))(v36 + 8);
    v29 = AssociatedTypeWitness;
    v28(v8, AssociatedTypeWitness);
    v30 = *(void (**)(char *, uint64_t))(v34 + 8);
    v31 = v16;
    v32 = v35;
    v30(v31, v35);
    v28(v12, v29);
    return ((uint64_t (*)(char *, uint64_t))v30)(v20, v32);
  }
  return result;
}

uint64_t ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v10 = *(_QWORD *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v13);
  v15 = (char *)&v17 - v14;
  ListDiffable.sectionIndex(atOffset:)(a3, a4, v10);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 96))(a1, a2, v15, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
}

uint64_t ListCoreDataSource.deleteCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v5 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v17 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v17 - v14;
  ListDiffable.rowIndex(at:)((uint64_t)&v17 - v14, (uint64_t)v10, v18, a2, v5);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 192))(v15, v10, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v18 = a1;
  v5 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v8);
  v10 = (char *)&v17 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v17 - v14;
  ListDiffable.rowIndex(at:)((uint64_t)&v17 - v14, (uint64_t)v10, v18, a2, v5);
  LOBYTE(v3) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v3 + 168))(v15, v10, a2, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v3 & 1;
}

uint64_t ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(void (*a1)(uint64_t)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  v9 = type metadata accessor for Array();
  type metadata accessor for _RowVisitationContext(0, a2, a4, v10);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF38], v9);
  v11 = Sequence.compactMap<A>(_:)();
  v12 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v12);
  if ((Collection.isEmpty.getter() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    a1(v11);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 0, 1, a3);
  }
}

uint64_t closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[0] = a5;
  v22[1] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v14 = (char *)v22 - v13;
  v16 = *(int *)(v15 + 48);
  v17 = &v14[v16];
  v18 = a1 + v16;
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v14, a1, AssociatedTypeWitness, v12);
  v20 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v17, v18, v9);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 208))(v14, v17, a3, a4);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, AssociatedTypeWitness);
}

uint64_t closure #1 in ListCoreDataSource.performDrop(to:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>)
{
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  Swift::OpaquePointer v13;

  v7 = a1 & 1;
  type metadata accessor for _RowVisitationContext(0, a3, a4, a3);
  result = ViewTraitCollection.insertInteraction(for:)(v7);
  v9 = result;
  if (result != 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v13._rawValue = *(void **)(a2
                             + *(int *)(type metadata accessor for DropCoordinator(0, TupleTypeMetadata2, v11, v12)
                                      + 28));
    OnInsertInteraction.insert(_:)(v13);
    result = outlined consume of OnInsertInteraction?(v9);
  }
  *a5 = v9 == 1;
  return result;
}

BOOL specialized closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  char v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = type metadata accessor for MoveInteraction();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 152);
  v17 = v6;
  v15 = 0;
  v16 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v19 & 1) != 0)
    return 0;
  v7 = v18;
  v17 = v6;
  v15 = 0;
  v16 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v19 & 1) != 0)
    return 0;
  v14 = v18;
  v18 = v6;
  LOBYTE(v17) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v9 = v15;
  v18 = v6;
  v10 = ViewTraitCollection.onMove.getter();
  v12 = v11;
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
  dispatch thunk of SetAlgebra.init()();
  v15 = v7;
  dispatch thunk of SetAlgebra.insert(_:)();
  *(_QWORD *)v5 = v10;
  *((_QWORD *)v5 + 1) = v12;
  v5[16] = v9;
  *(_QWORD *)&v5[*(int *)(v2 + 28)] = v14;
  v8 = v10 != 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  return v8;
}

BOOL specialized closure #1 in ListCoreDataSource.canMoveCell(from:to:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, _QWORD *);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t *v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  char v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t, uint64_t);
  char v55;
  _BYTE v56[152];
  uint64_t (*v57)(uint64_t, uint64_t);

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v43 - v8;
  v10 = type metadata accessor for MoveInteraction();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (uint64_t *)((char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15, v16);
  MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v43 - v20;
  if (*(_QWORD *)(a1 + 16) != 2)
    return 0;
  v50 = v19;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + 32, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  v22 = v57;
  v53 = v57;
  v51 = 0;
  v52 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v55 & 1) != 0
    || (v49 = v54, v53 = v22, v51 = 0, v52 = 1, ViewTraitCollection.value<A>(for:defaultValue:)(), (v55 & 1) != 0))
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v23(v9, 1, 1, v10);
  }
  else
  {
    v47 = v54;
    v54 = v22;
    LOBYTE(v53) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    LODWORD(v46) = v51;
    v54 = v22;
    v45 = ViewTraitCollection.onMove.getter();
    v44 = v25;
    type metadata accessor for IndexSet();
    v48 = v14;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
    dispatch thunk of SetAlgebra.init()();
    v51 = v49;
    v14 = v48;
    dispatch thunk of SetAlgebra.insert(_:)();
    v26 = v44;
    *(_QWORD *)v9 = v45;
    *((_QWORD *)v9 + 1) = v26;
    v9[16] = v46;
    *(_QWORD *)&v9[*(int *)(v10 + 28)] = v47;
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v23(v9, 0, 1, v10);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v28 = 1;
  if (v27(v9, 1, v10) == 1)
  {
    v29 = (uint64_t)v9;
LABEL_14:
    outlined destroy of TaskPriority?(v29, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + 240, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  v30 = v57;
  v53 = v57;
  v51 = 0;
  v52 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v55 & 1) == 0)
  {
    v31 = v54;
    v53 = v30;
    v51 = 0;
    v52 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v55 & 1) == 0)
    {
      v49 = v54;
      v54 = v30;
      LOBYTE(v53) = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      LODWORD(v48) = v51;
      v54 = v30;
      v47 = ViewTraitCollection.onMove.getter();
      v46 = v32;
      type metadata accessor for IndexSet();
      v45 = v31;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
      dispatch thunk of SetAlgebra.init()();
      v51 = v45;
      dispatch thunk of SetAlgebra.insert(_:)();
      v28 = 0;
      v33 = v46;
      *(_QWORD *)v5 = v47;
      *((_QWORD *)v5 + 1) = v33;
      v5[16] = (char)v48;
      *(_QWORD *)&v5[*(int *)(v10 + 28)] = v49;
    }
  }
  v23(v5, v28, 1, v10);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if (v27(v5, 1, v10) == 1)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    v29 = (uint64_t)v5;
    goto LABEL_14;
  }
  v34 = v50;
  outlined init with take of TableCellFormula((uint64_t)v5, v50, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  v35 = *(int *)(v10 + 28);
  v36 = *(_QWORD *)(v34 + v35);
  v37 = *(_QWORD *)&v21[v35];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  if (v36 == v37)
  {
    v38 = *v14;
    v39 = v14[1];
    v24 = *v14 != 0;
    if (*v14)
    {
      v40 = swift_allocObject();
      *(_QWORD *)(v40 + 16) = v38;
      *(_QWORD *)(v40 + 24) = v39;
      v41 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
    }
    else
    {
      v41 = 0;
    }
    outlined copy of AppIntentExecutor?(v38);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v41);
  }
  else
  {
    v24 = 0;
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  return v24;
}

uint64_t closure #1 in ListCoreDataSource.canMoveCell(from:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL *v62;

  v62 = a4;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v59 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v60 = (uint64_t)&v55 - v12;
  v14 = type metadata accessor for _RowVisitationContext(0, a2, a3, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v55 - v21;
  v61 = type metadata accessor for MoveInteraction();
  v23 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v24);
  v26 = (uint64_t *)((char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v55 - v29;
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v55 - v34;
  result = MEMORY[0x18D75D024](a1, v14, v33);
  if (result == 2)
  {
    v37 = (uint64_t)v59;
    v56 = v30;
    v57 = v26;
    v58 = v35;
    Array.subscript.getter();
    v38 = v60;
    _RowVisitationContext.moveInteraction.getter(v60);
    v39 = *(void (**)(char *, uint64_t))(v15 + 8);
    v39(v22, v14);
    v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    v41 = v61;
    if (v40(v38, 1, v61) == 1)
    {
      v42 = v38;
LABEL_7:
      result = outlined destroy of TaskPriority?(v42, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
      v43 = 0;
      goto LABEL_15;
    }
    v44 = v38;
    v45 = (uint64_t)v58;
    outlined init with take of TableCellFormula(v44, (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    Array.subscript.getter();
    _RowVisitationContext.moveInteraction.getter(v37);
    v39(v18, v14);
    if (v40(v37, 1, v41) == 1)
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
      v42 = v37;
      goto LABEL_7;
    }
    v46 = (uint64_t)v56;
    outlined init with take of TableCellFormula(v37, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    v47 = *(int *)(v41 + 28);
    v48 = *(_QWORD *)(v46 + v47);
    v49 = *(_QWORD *)(v45 + v47);
    v50 = v57;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v46, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    if (v48 == v49)
    {
      v51 = *v50;
      v52 = v50[1];
      v43 = *v50 != 0;
      if (*v50)
      {
        v53 = swift_allocObject();
        *(_QWORD *)(v53 + 16) = v51;
        *(_QWORD *)(v53 + 24) = v52;
        v54 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()partial apply;
      }
      else
      {
        v54 = 0;
      }
      outlined copy of AppIntentExecutor?(v51);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v54);
    }
    else
    {
      v43 = 0;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v50, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v46, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v45, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  }
  else
  {
    v43 = 0;
  }
LABEL_15:
  *v62 = v43;
  return result;
}

void specialized closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  int v34;
  Swift::Int v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::Int v41;
  char v42;
  Swift::Int v43;
  Swift::Int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  Swift::Int v48;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v31 - v12;
  v14 = type metadata accessor for MoveInteraction();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  v38 = a2;
  v39 = a3;
  v40 = v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + 32, (uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  v20 = v48;
  v43 = v48;
  v41 = 0;
  v21 = 1;
  v42 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v45 & 1) == 0)
  {
    v37 = v44;
    v43 = v20;
    v41 = 0;
    v42 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v45 & 1) == 0)
    {
      v35 = v44;
      v44 = v20;
      LOBYTE(v43) = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      v34 = v41;
      v44 = v20;
      v33 = ViewTraitCollection.onMove.getter();
      v32 = v22;
      type metadata accessor for IndexSet();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
      v36 = a4;
      dispatch thunk of SetAlgebra.init()();
      v41 = v37;
      a4 = v36;
      dispatch thunk of SetAlgebra.insert(_:)();
      v21 = 0;
      v23 = v32;
      *(_QWORD *)v13 = v33;
      *((_QWORD *)v13 + 1) = v23;
      v13[16] = v34;
      *(_QWORD *)&v13[*(int *)(v14 + 28)] = v35;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v21, 1, v14);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v24 = outlined destroy of TaskPriority?((uint64_t)v13, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    v46 = v38;
    v47 = v39;
    MEMORY[0x1E0C80A78](v24, v25);
    *(&v31 - 2) = (uint64_t)&v46;
    static Log.internalError(_:)();
    return;
  }
  v26 = (uint64_t)v40;
  outlined init with take of TableCellFormula((uint64_t)v13, (uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
  if (v19 < 2)
    goto LABEL_14;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + 240, (uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  v43 = v48;
  v41 = 0;
  v42 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v27 = v44;
  v28 = v45;
  v29 = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v46, (uint64_t (*)(_QWORD))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if ((v28 & 1) != 0)
  {
    v46 = a4;
    v47 = a5;
    MEMORY[0x1E0C80A78](v29, v30);
    *(&v31 - 2) = (uint64_t)&v46;
    static Log.internalError(_:)();
  }
  else
  {
    MoveInteraction.move(to:)(v27);
  }
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
}

uint64_t closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  Swift::Int v40;
  char v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t TupleTypeMetadata2;
  uint64_t v56;

  v49 = a3;
  v50 = a2;
  v56 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v51 = swift_getAssociatedTypeWitness();
  v52 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v53 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v10 = (char *)&v49 - v9;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v49 - v13;
  v54 = a5;
  v16 = type metadata accessor for _RowVisitationContext(0, a4, a5, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v49 - v23;
  v25 = type metadata accessor for MoveInteraction();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  Array.subscript.getter();
  _RowVisitationContext.moveInteraction.getter((uint64_t)v14);
  v30 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30(v24, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v25) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v14, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    v31 = TupleTypeMetadata2;
    v32 = *(int *)(TupleTypeMetadata2 + 48);
    v33 = &v10[v32];
    v34 = v50 + v32;
    (*(void (**)(char *))(*(_QWORD *)(v52 - 8) + 16))(v10);
    v35 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v33, v34);
    MEMORY[0x1E0C80A78](v35, v36);
    v37 = v54;
    *(&v49 - 4) = a4;
    *(&v49 - 3) = v37;
    *(&v49 - 2) = (uint64_t)v10;
    static Log.internalError(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v10, v31);
  }
  else
  {
    v39 = TupleTypeMetadata2;
    outlined init with take of TableCellFormula((uint64_t)v14, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    Array.subscript.getter();
    v40 = _RowVisitationContext.dynamicContentOffset.getter();
    v42 = v41;
    v30(v20, v16);
    if ((v42 & 1) != 0)
    {
      v43 = *(int *)(v39 + 48);
      v44 = &v10[v43];
      v45 = v49 + v43;
      (*(void (**)(char *))(*(_QWORD *)(v52 - 8) + 16))(v10);
      v46 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v44, v45);
      MEMORY[0x1E0C80A78](v46, v47);
      v48 = v54;
      *(&v49 - 4) = a4;
      *(&v49 - 3) = v48;
      *(&v49 - 2) = (uint64_t)v10;
      static Log.internalError(_:)();
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v10, v39);
    }
    else
    {
      MoveInteraction.move(to:)(v40);
      return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for MoveInteraction);
    }
  }
}

uint64_t implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  _QWORD v15[2];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v8 = (char *)v15 - v7;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  v9._object = (void *)0x8000000187BEE760;
  v9._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v9);
  v10 = *(int *)(TupleTypeMetadata2 + 48);
  v11 = a1 + v10;
  v12 = &v8[v10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v8, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11, v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
  v13._countAndFlagsBits = 0xD000000000000029;
  v13._object = (void *)0x8000000187BEE780;
  String.append(_:)(v13);
  return v15[0];
}

uint64_t implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  _QWORD v15[2];

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v3 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v6);
  v8 = (char *)v15 - v7;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v9._object = (void *)0x8000000187BEE730;
  v9._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v9);
  v10 = *(int *)(TupleTypeMetadata2 + 48);
  v11 = a1 + v10;
  v12 = &v8[v10];
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v8, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v12, v11, v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, TupleTypeMetadata2);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return v15[0];
}

uint64_t specialized closure #1 in ListCoreDataSource.deleteCell(forRow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (_QWORD *)((char *)v18 - v8);
  v10 = type metadata accessor for DeleteInteraction();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(a1 + 152);
  ViewTraitCollection.deleteInteraction.getter(v9);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v15 = outlined destroy of TaskPriority?((uint64_t)v9, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction);
    v18[0] = a2;
    v18[1] = a3;
    MEMORY[0x1E0C80A78](v15, v16);
    v18[-2] = v18;
    static Log.internalError(_:)();
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DeleteInteraction);
    DeleteInteraction.delete()();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DeleteInteraction);
  }
  return 0;
}

uint64_t closure #1 in ListCoreDataSource.deleteCell(forRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v32 = a2;
  v34 = a1;
  v35 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v10);
  v12 = (char *)&v30 - v11;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v30 - v15);
  v17 = type metadata accessor for DeleteInteraction();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a4;
  type metadata accessor for _RowVisitationContext(0, a3, a4, v22);
  _RowVisitationContext.deleteInteraction.getter(v16);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v16, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction);
    v23 = *(int *)(TupleTypeMetadata2 + 48);
    v24 = &v12[v23];
    v25 = v32 + v23;
    (*(void (**)(char *))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v12);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v24, v25, v8);
    MEMORY[0x1E0C80A78](v26, v27);
    v28 = v33;
    *(&v30 - 4) = a3;
    *(&v30 - 3) = v28;
    *(&v30 - 2) = (uint64_t)v12;
    static Log.internalError(_:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v12, TupleTypeMetadata2);
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v16, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DeleteInteraction);
    DeleteInteraction.delete()();
    result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DeleteInteraction);
  }
  *v35 = 0;
  return result;
}

uint64_t implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(76);
  v0._object = (void *)0x8000000187BEE6E0;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0xD00000000000002BLL;
  v1._object = (void *)0x8000000187BEE700;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v18 - v12;
  v15 = type metadata accessor for _RowVisitationContext(0, a2, a3, v14);
  _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a1, v15, (uint64_t)v13);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a4, 1, 1, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v13, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t partial apply for closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(*(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x8000000187BEE760;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  type metadata accessor for (Int, Int)();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0xD000000000000029;
  v1._object = (void *)0x8000000187BEE780;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(42);
  v0._object = (void *)0x8000000187BEE730;
  v0._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v0);
  type metadata accessor for (Int, Int)();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>)
  {
    v2 = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v4 = type metadata accessor for _RowVisitationContext(a1, (uint64_t)&type metadata for TableDataSourceAdaptor, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>);
  }
}

uint64_t specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(76);
  v0._object = (void *)0x8000000187BEE6E0;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0xD00000000000002BLL;
  v1._object = (void *)0x8000000187BEE700;
  String.append(_:)(v1);
  return 0;
}

uint64_t partial apply for specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  return specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.deleteCell(forRow:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ListCoreDataSource.deleteCell(forRow:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t partial apply for implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  return implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)();
}

unint64_t partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)(a1, a2);
}

{
  return TableDataSourceAdaptor.contextForItem(index:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

uint64_t partial apply for specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)();
}

uint64_t partial apply for specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)(a1, v2[5], v2[2], v2[4], a2);
}

uint64_t partial apply for implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(*(_QWORD *)(v0 + 32));
}

uint64_t partial apply for implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(*(_QWORD *)(v0 + 32));
}

uint64_t sub_187A72BBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.canMoveCell(from:to:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in ListCoreDataSource.canMoveCell(from:to:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

BOOL partial apply for closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)@<W0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _BOOL8 result;

  type metadata accessor for _RowVisitationContext(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1);
  result = _RowVisitationContext.canMove.getter();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in ListCoreDataSource.performDrop(to:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in ListCoreDataSource.performDrop(to:)(*(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void static ToolbarLabelStyle.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolbarLabelStyle.Role()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ToolbarLabelStyle.Role()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarLabelStyle.Role()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ToolbarLabelStyle.Role@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized ToolbarLabelStyle.Role.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ToolbarLabelStyle.Role(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 5;
}

void static ToolbarLabelStyle.titleAndIcon.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

BOOL static ToolbarLabelStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Scene.windowToolbarLabelStyle(fixed:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t EnvironmentValues.toolbarLabelStyle.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.toolbarLabelStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_187A72FC4()
{
  return EnvironmentValues.toolbarLabelStyle.setter();
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle()
{
  return &type metadata for ToolbarLabelStyle;
}

uint64_t storeEnumTagSinglePayload for ToolbarLabelStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187A73058 + 4 * byte_187C83B65[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187A7308C + 4 * asc_187C83B60[v4]))();
}

uint64_t sub_187A7308C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A73094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A7309CLL);
  return result;
}

uint64_t sub_187A730A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A730B0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187A730B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A730BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle.Role()
{
  return &type metadata for ToolbarLabelStyle.Role;
}

void *type metadata accessor for EnvironmentValues.ToolbarLabelStyleKey()
{
  return &unk_1E1AC37F8;
}

unint64_t lazy protocol witness table accessor for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role;
  if (!lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ToolbarLabelStyle.Role, &type metadata for ToolbarLabelStyle.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role);
  }
  return result;
}

uint64_t EnvironmentValues.toolbarLabelStyle.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ToolbarLabelStyleKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

BOOL specialized static ToolbarLabelStyle.Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(char *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(char *)(a2 + 16);
  if ((v4 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
    {
      outlined consume of ToolbarLabelStyle.Data(*(_QWORD *)a1, v3, v4);
      outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
      return (v5 ^ v2) == 0;
    }
LABEL_6:
    outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
    outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
    outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
    return 0;
  }
  if ((v7 & 0x80000000) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_6;
  }
  outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined copy of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined copy of ToolbarLabelStyle.Data(v2, v3, v4);
  type metadata accessor for Binding<ToolbarLabelStyle>();
  v11 = v10;
  MEMORY[0x18D75B9C8](&v17);
  v12 = v17;
  v14 = v5;
  v15 = v6;
  v16 = v7 & 0x7F;
  swift_retain();
  swift_retain();
  MEMORY[0x18D75B9C8](&v13, v11);
  outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  return v12 == v13;
}

uint64_t specialized ToolbarLabelStyle.Role.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 5) >= 4)
    return 4;
  else
    return a1 - 5;
}

void type metadata accessor for Binding<ToolbarLabelStyle>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<ToolbarLabelStyle>)
  {
    v0 = type metadata accessor for Binding();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<ToolbarLabelStyle>);
  }
}

uint64_t destroy for ToolbarLabelStyle.Data(uint64_t a1)
{
  return outlined consume of ToolbarLabelStyle.Data(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ToolbarLabelStyle.Data(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ToolbarLabelStyle.Data(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ToolbarLabelStyle.Data(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ToolbarLabelStyle.Data(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarLabelStyle.Data(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x1FFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x1FFF);
  v3 = ((*(unsigned __int8 *)(a1 + 16) >> 7) | (2
                                              * ((*(_QWORD *)(a1 + 8) >> 57) & 0x78 | *(_QWORD *)(a1 + 8) & 7 | (((*(unsigned __int8 *)(a1 + 16) >> 2) & 0x1F) << 7)))) ^ 0x1FFF;
  if (v3 >> 1 >= 0xFFF)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ToolbarLabelStyle.Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x1FFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x1FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x1FFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x1FFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0xFFF | ((-a2 & 0x1FFF) << 12);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_BYTE *)(result + 16) = (v3 >> 5) & 0xFC;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ToolbarLabelStyle.Data(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 16) & 3 | (a2 << 7);
  *(_QWORD *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  *(_BYTE *)(result + 16) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle.Data()
{
  return &type metadata for ToolbarLabelStyle.Data;
}

void static ToolbarLabelStyle.iconOnly.getter()
{
  static ToolbarLabelStyle.titleAndIcon.getter();
}

void static ToolbarLabelStyle.titleOnly.getter()
{
  static ToolbarLabelStyle.titleAndIcon.getter();
}

ValueMetadata *type metadata accessor for HiddenBadgedViewStyle()
{
  return &type metadata for HiddenBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in HiddenBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_187A73664()
{
  return &protocol witness table for BadgeViewStyleConfiguration.Content;
}

uint64_t destroy for HeaderFooterConfiguration()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration()
{
  return &type metadata for HeaderFooterConfiguration;
}

uint64_t EnvironmentValues.headerFooterConfiguration.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t HeaderFooterConfiguration.defaultEdgeInsets(for:)()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  uint64_t result;

  if (v0[1] - 1 >= 2)
  {
    v1 = *((_QWORD *)v0 + 1);
    v2 = (*v0 ^ 1) & v0[16];
    if (((v1 == 0) & v2 & v0[17]) == 0 && (v2 != 1 || v1 != 2 && (v0[17] & 1) == 0))
    {
      if (v1)
      {
        static Edge.Set.horizontal.getter();
        return EdgeInsets.init(_:edges:)();
      }
    }
  }
  return result;
}

uint64_t HeaderFooterConfiguration.font.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)v0 & 1) != 0)
    return 0;
  if (*(_BYTE *)(v0 + 16) != 1 || !((*(_QWORD *)(v0 + 8) == 2) | *(_BYTE *)(v0 + 17) & 1))
    return swift_retain();
  static Font.Weight.semibold.getter();
  return static Font.system(_:design:weight:)();
}

__n128 HeaderFooterConfiguration.updateValues()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __n128 result;
  _OWORD v7[2];
  __n128 v8;

  v1 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)v0 & 1) != 0)
    static UIListContentConfiguration.footer()();
  else
    static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v4, (uint64_t *)v7);
  swift_release();
  swift_release();
  v5 = v7[1];
  *(_OWORD *)(v0 + 24) = v7[0];
  *(_OWORD *)(v0 + 40) = v5;
  result = v8;
  *(__n128 *)(v0 + 56) = v8;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance HeaderFooterConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = HIBYTE(static HeaderFooterConfigurationKey.defaultValue);
  v3 = qword_1EDE3CFA8;
  v4 = word_1EDE3CFB0;
  v5 = HIBYTE(word_1EDE3CFB0);
  v6 = qword_1EDE3CFB8;
  v7 = unk_1EDE3CFC0;
  *(_BYTE *)a1 = static HeaderFooterConfigurationKey.defaultValue;
  *(_BYTE *)(a1 + 1) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = unk_1EDE3CFC8;
  *(_OWORD *)(a1 + 56) = unk_1EDE3CFD8;
  swift_retain();
  return swift_retain();
}

uint64_t specialized HeaderFooterConfiguration.Values.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[2];

  v4 = type metadata accessor for UIListContentConfiguration.TextProperties();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.primary.getter();
  static Font.body.getter();
  UIListContentConfiguration.textProperties.getter();
  v9 = UIListContentConfiguration.TextProperties.color.getter();
  v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v8, v4);
  v23[1] = v9;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (uint64_t (*)(uint64_t))type metadata accessor for UIColor, (uint64_t)&protocol conformance descriptor for UIColor);
  v11 = Color.init<A>(provider:)();
  swift_release();
  swift_retain();
  UIListContentConfiguration.textProperties.getter();
  UIListContentConfiguration.TextProperties.font.getter();
  v10(v8, v4);
  v12 = Font.init(_:)();
  swift_release();
  swift_retain();
  UIListContentConfiguration.directionalLayoutMargins.getter();
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  swift_release();
  result = swift_release();
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v14;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v20;
  return result;
}

ValueMetadata *type metadata accessor for HeaderFooterConfigurationKey()
{
  return &type metadata for HeaderFooterConfigurationKey;
}

uint64_t initializeWithCopy for HeaderFooterConfiguration.Values(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for HeaderFooterConfiguration.Values(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

_OWORD *assignWithTake for HeaderFooterConfiguration.Values(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  swift_release();
  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration.Values()
{
  return &type metadata for HeaderFooterConfiguration.Values;
}

uint64_t storeEnumTagSinglePayload for HeaderFooterConfiguration.Position(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A73F40 + 4 * byte_187C83D05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A73F74 + 4 * byte_187C83D00[v4]))();
}

uint64_t sub_187A73F74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A73F7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A73F84);
  return result;
}

uint64_t sub_187A73F90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A73F98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A73F9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A73FA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration.Position()
{
  return &type metadata for HeaderFooterConfiguration.Position;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position;
  if (!lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for HeaderFooterConfiguration.Position, &type metadata for HeaderFooterConfiguration.Position);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
  }
}

uint64_t BorderedProminentButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  char *v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a1;
  v44 = a2;
  v42 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v42, v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - v12;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>();
  v40 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0);
  v23 = v22;
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
  v41 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v43, (uint64_t)v4, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v31 = v4[1];
  *v9 = *v4;
  v9[1] = v31;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v4[*(int *)(v42 + 24)], (uint64_t)&v9[*(int *)(v6 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v4, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v9, (uint64_t)v13);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13, (uint64_t)v17);
  v17[*(int *)(v40 + 36)] = 1;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v21, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>);
  v32 = &v26[*(int *)(v23 + 36)];
  *(_QWORD *)v32 = 0;
  v32[8] = 1;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>);
  KeyPath = swift_getKeyPath();
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = swift_getKeyPath();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v26, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  v37 = &v30[*(int *)(v41 + 36)];
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *((_QWORD *)v37 + 2) = KeyPath;
  v37[24] = 0;
  *((_QWORD *)v37 + 4) = v34;
  *((_WORD *)v37 + 20) = 0;
  *((_QWORD *)v37 + 6) = v35;
  v37[56] = 0;
  *((_QWORD *)v37 + 8) = v36;
  v37[72] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v30, v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>);
}

uint64_t type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>, MEMORY[0x1E0CE4ED8], MEMORY[0x1E0CE4EC8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE5A58]);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicat(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  }
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance BorderedProminentButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BorderedProminentButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t BorderedProminentButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, 1, a1);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderedProminentButtonStyle@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, 1, a1);
}

ValueMetadata *type metadata accessor for BorderedProminentButtonStyle()
{
  return &type metadata for BorderedProminentButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
    v3[1] = &protocol witness table for ViewInputFlagModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput, (uint64_t)&type metadata for ButtonContainerIsBorderedInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>);
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, EmptyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetBorderedProminentButtonStyle and conformance WidgetBorderedProminentButtonStyle, (uint64_t)&type metadata for WidgetBorderedProminentButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleContainerModifier<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<WidgetBorderedProminentButtonStyle> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

void static PointerStyle.grabActive.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PointerStyle.columnResize(directions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PointerStyle.frameResize(position:directions:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PointerStyle.image(_:hotSpot:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PointerStyle.shape<A>(_:eoFill:size:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t outlined copy of PointerStyle.Value(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  int v5;

  v5 = a5 >> 13;
  if (v5 == 4)
    return outlined copy of Path.Storage(result, a2, a3, a4, a5);
  if (v5 == 3)
    return swift_retain();
  return result;
}

uint64_t outlined consume of PointerStyle.Value(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  int v5;

  v5 = a5 >> 13;
  if (v5 == 4)
    return outlined consume of Path.Storage(result, a2, a3, a4, a5);
  if (v5 == 3)
    return swift_release();
  return result;
}

ValueMetadata *type metadata accessor for PointerStyle()
{
  return &type metadata for PointerStyle;
}

uint64_t destroy for PointerStyle(uint64_t a1)
{
  return outlined consume of PointerStyle.Value(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_WORD *)(a1 + 32));
}

uint64_t initializeWithCopy for PointerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_WORD *)(a2 + 32);
  outlined copy of PointerStyle.Value(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PointerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_WORD *)(a2 + 32);
  outlined copy of PointerStyle.Value(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v7;
  outlined consume of PointerStyle.Value(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PointerStyle(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int16 v9;

  v3 = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v3;
  outlined consume of PointerStyle.Value(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PointerStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFFB && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 4091);
  v3 = (*(_WORD *)(a1 + 32) & 0xF8 | (*(unsigned __int16 *)(a1 + 32) >> 13) | (*(unsigned __int16 *)(a1 + 32) >> 1) & 0xF00) ^ 0xFFF;
  if (v3 >= 0xFFA)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PointerStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 > 0xFFA)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 4091;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFFB)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFFB)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 3) & 0x1FF) - (a2 << 9);
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_WORD *)(result + 32) = (16 * v3) & 0xFE00 | (8 * (v3 & 0x1F));
    }
  }
  return result;
}

uint64_t getEnumTag for PointerStyle.Value(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int16 *)(a1 + 32) >> 13;
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveProjectEnumData for PointerStyle.Value(uint64_t result)
{
  *(_WORD *)(result + 32) &= 0x1FFFu;
  return result;
}

uint64_t destructiveInjectEnumTag for PointerStyle.Value(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0x107 | ((_WORD)a2 << 13);
  }
  else
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = -24576;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointerStyle.Value()
{
  return &type metadata for PointerStyle.Value;
}

void static PointerStyle.default.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.horizontalText.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.rectSelection.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.grabIdle.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.verticalText.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.link.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.zoomIn.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.zoomOut.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.columnResize.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.rowResize.getter()
{
  static PointerStyle.grabActive.getter();
}

void static PointerStyle.rowResize(directions:)()
{
  static PointerStyle.columnResize(directions:)();
}

uint64_t View.groupBoxStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GroupBoxStyleModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for GroupBoxStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupBoxStyleModifier);
}

unint64_t instantiation function for generic protocol witness table for GroupBoxStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GroupBoxStyleConfiguration.Label()
{
  return &protocol witness table for GroupBoxStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for GroupBoxStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GroupBoxStyleConfiguration.Content()
{
  return &protocol witness table for GroupBoxStyleConfiguration.Content;
}

uint64_t dispatch thunk of GroupBoxStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration()
{
  return &type metadata for GroupBoxStyleConfiguration;
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration.Label()
{
  return &type metadata for GroupBoxStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration.Content()
{
  return &type metadata for GroupBoxStyleConfiguration.Content;
}

uint64_t sub_187A74D98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for GroupBoxStyleModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for GroupBoxStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

ValueMetadata *type metadata accessor for ResolvedGroupBoxStyle()
{
  return &type metadata for ResolvedGroupBoxStyle;
}

uint64_t getEnumTagSinglePayload for GroupBoxStyleModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A74EB8 + 4 * byte_187C83F30[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for GroupBoxStyleModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in GroupBoxStyleModifier<A>()
{
  return &protocol witness table for GroupBoxStyleModifier<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in GroupBoxStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ResolvedGroupBoxStyle.body.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;

  LOBYTE(v5) = 0;
  type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for GroupBox<A, B>);
  View._addingBackgroundGroup()();
  if (one-time initialization token for contain != -1)
    swift_once();
  v2 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain_n();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E0CE5688], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = 0;
  swift_release();
  a1->n128_u8[0] = v6;
  a1->n128_u64[1] = v7;
  result = v8;
  a1[1] = v8;
  a1[2].n128_u64[0] = v9;
  a1[2].n128_u64[1] = v3;
  a1[3].n128_u64[0] = v2;
  return result;
}

double protocol witness for View.body.getter in conformance ResolvedGroupBoxStyle@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = ResolvedGroupBoxStyle.body.getter(a1).n128_u64[0];
  return result;
}

uint64_t GroupBoxStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(double))(v3 + 24))(v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v13, AssociatedTypeWitness, a2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, AssociatedTypeWitness);
}

uint64_t instantiation function for generic protocol witness table for GroupBoxStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleModifier<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GroupBoxStyleModifier<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedGroupBoxStyle()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>, (uint64_t)&protocol conformance descriptor for GroupBoxStyleModifier<A>);
}

void type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>)
  {
    v2 = lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle();
    v4 = type metadata accessor for GroupBoxStyleModifier(a1, (uint64_t)&type metadata for DefaultGroupBoxStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedGroupBoxStyle(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A754A4()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>> and conformance _UnaryViewAdaptor<A>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>, MEMORY[0x1E0CE4108]);
}

uint64_t sub_187A754D0()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

void PlatformViewHost.focusedValues.setter(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  int v3;
  char *v4;
  char v5[2];

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x90);
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v4[8] = v2;
  *((_DWORD *)v4 + 3) = v3;
  swift_release();
  PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)((uint64_t)v5, 0);
}

Swift::Void __swiftcall PlatformViewHost.updateHostedViewBounds()()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = (id)(*(uint64_t (**)(char *))(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x58) + 72))(&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x78)]);
  v3 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v2 & *(_QWORD *)v1) + 0x58) + 72))(&v1[*(_QWORD *)((*v2 & *(_QWORD *)v1) + 0x78)]);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v3, sel_frameForAlignmentRect_);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  objc_msgSend(v12, sel_setFrame_, v5, v7, v9, v11);
}

double PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  objc_class *ObjectType;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  float v26;
  float v27;
  float v28;
  objc_super v30;
  objc_super v31;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB0);
  v10 = *((_BYTE *)v3 + v9);
  *((_BYTE *)v3 + v9) = 1;
  v31.receiver = v3;
  v31.super_class = (Class)swift_getObjectType();
  v11 = objc_msgSendSuper2(&v31, sel_hostedView);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel__wantsConstraintBasedLayout);
    objc_msgSend(v12, sel_bounds);
    v15 = v14;
    v17 = v16;
    v30.receiver = v3;
    v30.super_class = ObjectType;
    objc_msgSendSuper2(&v30, sel__layoutSizeThatFits_fixedAxes_, a1, a2, a3);
    v19 = v18;
    v21 = v20;
    v22 = v20 == v17 || v18 == v15;
    if (v22 && (v13 & 1) == 0 && (PlatformViewHost.implementsFittingSize.getter() & 1) == 0)
    {
      objc_msgSend(v12, sel_intrinsicContentSize);
      if (v23 == *MEMORY[0x1E0DC55F0])
        v23 = a2;
      if (v19 == v15)
        v19 = v23;
      if (v24 == *MEMORY[0x1E0DC55F0])
        v25 = a3;
      else
        v25 = v24;
      if (v21 == v17)
        v21 = v25;
    }
    if ((v13 & 1) != 0 || (PlatformViewHost.implementsFittingSize.getter() & 1) != 0)
      goto LABEL_31;
    if (v19 >= a2 || (objc_msgSend(v12, sel_contentHuggingPriorityForAxis_, 0), v26 >= 750.0))
    {
      if (v19 > a2)
      {
        objc_msgSend(v12, sel_contentCompressionResistancePriorityForAxis_, 0);
        if (v27 < 750.0)
          v19 = a2;
      }
    }
    else
    {
      v19 = a2;
    }
    if (v21 < a3 && (objc_msgSend(v12, sel_contentHuggingPriorityForAxis_, 1), v28 < 750.0) || v21 <= a3)
    {
LABEL_31:

    }
    else
    {
      objc_msgSend(v12, sel_contentCompressionResistancePriorityForAxis_, 1);

    }
  }
  else
  {
    v19 = a2;
  }
  *((_BYTE *)v3 + *(_QWORD *)((*v8 & *v3) + 0xB0)) = v10;
  return v19;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlatformViewHost<A>.ViewControllerParentingMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TableColumnCustomization.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PlatformViewHost<A>.ViewControllerParentingMode()
{
  char *v0;

  return TableColumnCustomization.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PlatformViewHost<A>.ViewControllerParentingMode(uint64_t a1)
{
  char *v1;

  TableColumnCustomization.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlatformViewHost<A>.ViewControllerParentingMode()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  TableColumnCustomization.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t PlatformViewHost.responder.getter()
{
  return swift_weakLoadStrong();
}

unint64_t PlatformViewHost.implementsFittingSize.getter()
{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  unint64_t result;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  objc_super v9;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8);
  v2 = *((unsigned __int8 *)v0 + v1);
  if (v2 != 2)
    return v2 & 1;
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  result = (unint64_t)objc_msgSendSuper2(&v9, sel_hostedView);
  if (result)
  {
    v4 = (void *)result;
    if (one-time initialization token for fittingSizeSelector != -1)
      swift_once();
    v5 = (unint64_t)objc_msgSend(v4, sel_methodForSelector_, fittingSizeSelector);
    if (one-time initialization token for defaultFittingSizeIMP != -1)
      swift_once();
    v6 = defaultFittingSizeIMP;

    v7 = (v5 | v6) == 0;
    v8 = v5 == v6;
    if (!v6)
      v8 = v5 == 0;
    if (v5)
      v7 = v8;
    result = !v7;
    *((_BYTE *)v0 + v1) = !v7;
  }
  return result;
}

id @objc PlatformViewHost.hostedView.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = PlatformViewHost.hostedView.getter();

  return v2;
}

void __swiftcall PlatformViewHost.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  id v3;
  Class isa;
  double y;
  double x;
  objc_class *ObjectType;
  id v8;
  id v9;
  objc_super v10;
  objc_super v11;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  ObjectType = (objc_class *)swift_getObjectType();
  if ((static UnifiedHitTestingFeature.isEnabled.getter() & 1) != 0)
  {
    v10.receiver = v3;
    v10.super_class = ObjectType;
    v8 = -[UIView_optional hitTest:withEvent:](&v10, sel_hitTest_withEvent_, isa, x, y);
    if (v8)
    {
      if (v8 == v3)

    }
  }
  else
  {
    v11.receiver = v3;
    v11.super_class = ObjectType;
    v9 = -[UIView_optional hitTest:withEvent:](&v11, sel_hitTest_withEvent_, isa, x, y);
  }
}

id @objc PlatformViewHost.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  PlatformViewHost.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

double @objc PlatformViewHost.intrinsicContentSize.getter(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  v2 = PlatformViewHost.intrinsicContentSize.getter();

  return v2;
}

float @objc PlatformViewHost.contentCompressionResistancePriority(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  float v5;
  float v6;

  v4 = a1;
  PlatformViewHost.contentCompressionResistancePriority(for:)(a3, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
  v6 = v5;

  return v6;
}

float @objc PlatformViewHost.contentHuggingPriority(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  float v5;
  float v6;

  v4 = a1;
  PlatformViewHost.contentCompressionResistancePriority(for:)(a3, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  v6 = v5;

  return v6;
}

Swift::Void __swiftcall PlatformViewHost.invalidateLayout()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  _BYTE v5[8];

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0);
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[48] = 1;
  v4 = (uint64_t)v0 + *(_QWORD *)((*v2 & *v0) + 0xC0);
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 16) & 1) == 0)
  {
    outlined init with copy of PlatformViewLayoutInvalidator(v4, (uint64_t)v5);
    if (swift_weakLoadStrong())
    {
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
      GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
      swift_release();
    }
    outlined destroy of PlatformViewLayoutInvalidator((uint64_t)v5);
  }
  *((_BYTE *)v1 + *(_QWORD *)((*v2 & *v1) + 0xC8)) = 0;
}

void closure #1 in PlatformViewHost.enqueueLayoutInvalidation()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (void *)v2;
    PlatformViewHost.invalidateLayout()();

  }
}

double @objc PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v8;
  double v9;

  v8 = a1;
  v9 = PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(a5, a2, a3);

  return v9;
}

float @objc PlatformViewHost._priorityForEngineHostConstraints()()
{
  return 940.0;
}

id @objc PlatformViewHost._parentContainer.getter(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  v2 = PlatformViewHost._parentContainer.getter();

  return v2;
}

id PlatformViewHost._parentContainer.getter()
{
  _QWORD *v0;
  objc_class *ObjectType;
  _QWORD *v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType();
  if ((MEMORY[0x18D75A3D8]() & 1) == 0)
  {
    v13.receiver = v0;
    v13.super_class = ObjectType;
    return objc_msgSendSuper2(&v13, sel__parentGestureRecognizerContainer);
  }
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!swift_weakLoadStrong())
  {
    if (!MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x80)))
      goto LABEL_6;
    swift_getObjectType();
    ViewRendererHost.responderNode.getter();
    swift_unknownObjectRelease();
  }
  swift_release();
LABEL_6:
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v4 = Strong;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      v5 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v5)
        break;
      type metadata accessor for UIViewResponder();
      v6 = swift_dynamicCastClass();
      if (v6)
      {
        v5 = MEMORY[0x18D760234](v6 + 48);
        if (v5)
          break;
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong())
        goto LABEL_16;
    }
    v7 = v5;
    swift_release();
  }
  else
  {
LABEL_16:
    swift_beginAccess();
    v7 = MEMORY[0x18D760234](v4 + 16);
    if (v7)
    {
      v8 = *(_QWORD *)(v4 + 24);
      v9 = swift_getObjectType();
      v10 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(&v12, v10, v10, v9, v8);
      swift_unknownObjectRelease();
      v7 = v12;
    }
  }
  swift_release();
  swift_release();
  return (id)v7;
}

void @objc PlatformViewHost.init(hostedView:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized PlatformViewHost.init(hostedView:)();
}

uint64_t storeEnumTagSinglePayload for PlatformViewHost.ViewControllerParentingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A7614C + 4 * byte_187C84145[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A76180 + 4 * byte_187C84140[v4]))();
}

uint64_t sub_187A76180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A76188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A76190);
  return result;
}

uint64_t sub_187A7619C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A761A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A761A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A761B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for PlatformViewHost.ViewControllerParentingMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PlatformViewHost.ViewControllerParentingMode);
}

void base witness table accessor for Equatable in PlatformViewHost<A>.ViewControllerParentingMode()
{
  JUMPOUT(0x18D75FFDCLL);
}

void one-time initialization function for fittingSizeSelector()
{
  fittingSizeSelector = (uint64_t)sel_sizeThatFits_;
}

id one-time initialization function for defaultFittingSizeIMP()
{
  id result;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  if (one-time initialization token for fittingSizeSelector != -1)
    swift_once();
  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instanceMethodForSelector_, fittingSizeSelector);
  defaultFittingSizeIMP = (uint64_t)result;
  return result;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableUnifiedLayoutFeature()
{
  return 0xD000000000000025;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableUnifiedLayoutFeature()
{
  swift_beginAccess();
  return static EnableUnifiedLayoutFeature.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableUnifiedLayoutFeature(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static EnableUnifiedLayoutFeature.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableUnifiedLayoutFeature())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableUnifiedLayoutFeature()
{
  lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableUnifiedLayoutFeature()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableUnifiedLayoutFeature()
{
  lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableUnifiedLayoutFeature@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t sub_187A76468()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A7648C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

_QWORD *specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  char *v28;
  id v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  _QWORD *v31;
  id v32;
  id v33;
  void *v34;
  objc_class *ObjectType;
  int v39;
  uint64_t v40[2];
  objc_super v41;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = *MEMORY[0x1E0DEEDD8] & *v6;
  v12 = *a4;
  v13 = a4[1];
  v14 = *a5;
  v15 = (char *)v6 + *(_QWORD *)(v11 + 0x80);
  *((_QWORD *)v15 + 1) = 0;
  swift_unknownObjectWeakInit();
  *((_BYTE *)v6 + *(_QWORD *)((*v10 & *v6) + 0x88)) = 2;
  swift_weakInit();
  v16 = *(_QWORD *)((*v10 & *v6) + 0xA0);
  type metadata accessor for UIView.SafeAreaHelper();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_BYTE *)(v17 + 48) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_BYTE *)(v17 + 88) = 1;
  *(_QWORD *)((char *)v6 + v16) = v17;
  v18 = (int64x2_t *)((char *)v6 + *(_QWORD *)((*v10 & *v6) + 0xA8));
  v19 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *v18 = v19;
  v18[1] = v19;
  *((_BYTE *)v6 + *(_QWORD *)((*v10 & *v6) + 0xB0)) = 0;
  *((_BYTE *)v6 + *(_QWORD *)((*v10 & *v6) + 0xB8)) = 2;
  v20 = (char *)v6 + *(_QWORD *)((*v10 & *v6) + 0xC0);
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  *((_BYTE *)v6 + *(_QWORD *)((*v10 & *v6) + 0xC8)) = 0;
  v21 = (char *)v6 + *(_QWORD *)((*v10 & *v6) + 0xD0);
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  v21[48] = 1;
  v22 = (_QWORD *)((char *)v6 + *(_QWORD *)((*v10 & *v6) + 0x68));
  *v22 = v12;
  v22[1] = v13;
  *(_DWORD *)((char *)v6 + *(_QWORD *)((*v10 & *v6) + 0x70)) = v14;
  v23 = (char *)v6 + *(_QWORD *)((*v10 & *v6) + 0x78);
  v26 = v11 + 80;
  v25 = *(_QWORD *)(v11 + 80);
  v24 = *(_QWORD *)(v26 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v23, a1, AssociatedTypeWitness);
  *((_QWORD *)v15 + 1) = a3;
  swift_unknownObjectWeakAssign();
  v28 = (char *)v6 + *(_QWORD *)((*v10 & *v6) + 0x90);
  *(_QWORD *)v28 = 0;
  v28[8] = 0;
  *((_DWORD *)v28 + 3) = 0;
  *(_QWORD *)((char *)v6 + *(_QWORD *)((*v10 & *v6) + 0x60)) = a6;
  v41.receiver = v6;
  v41.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  v29 = objc_msgSendSuper2(&v41, sel_initWithHostedView_, 0);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 128);
  v31 = v29;
  if ((v30(v25, v24) & 1) != 0)
  {
    static Semantics.v6.getter();
    *((_BYTE *)v31 + *(_QWORD *)((*v10 & *v31) + 0x88)) = (isLinkedOnOrAfter(_:)() & 1) == 0;
  }
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0)
  {
    v32 = objc_msgSend(v31, sel_layer);
    objc_msgSend(v32, sel_setAllowsGroupOpacity_, 0);

    v33 = objc_msgSend(v31, sel_layer);
    objc_msgSend(v33, sel_setAllowsGroupBlending_, 0);

  }
  if ((v30(v25, v24) & 1) == 0)
  {
    v34 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)((*v10 & *v31) + 0x58) + 72))((char *)v31 + *(_QWORD *)((*v10 & *v31) + 0x78));
    PlatformViewHost.hostedView.setter(v34);
  }
  v40[0] = v12;
  v40[1] = v13;
  v39 = v14;
  PlatformViewHost.updateEnvironment(_:viewPhase:)(v40, &v39);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return v31;
}

_QWORD *specialized PlatformViewHost.__allocating_init(_:host:environment:viewPhase:importer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return specialized PlatformViewHost.init(_:host:environment:viewPhase:importer:)(a1, a2, a3, a4, a5, a6);
}

uint64_t outlined init with copy of PlatformViewLayoutInvalidator?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for PlatformViewLayoutInvalidator?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PlatformViewLayoutInvalidator?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PlatformViewLayoutInvalidator?)
  {
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?);
  }
}

uint64_t outlined destroy of PlatformViewLayoutInvalidator?(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for PlatformViewLayoutInvalidator?();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #2 in PlatformViewHost.enqueueLayoutInvalidation()()
{
  uint64_t v0;

  closure #1 in PlatformViewHost.enqueueLayoutInvalidation()(*(_QWORD *)(v0 + 32));
}

uint64_t sub_187A76A08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of PlatformViewLayoutInvalidator(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UserDefaultObserver.Target.GraphAttribute(a2, a1);
  return a2;
}

uint64_t outlined destroy of PlatformViewLayoutInvalidator(uint64_t a1)
{
  destroy for ResetFocusAction();
  return a1;
}

void specialized PlatformViewHost.init(hostedView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

ValueMetadata *type metadata accessor for EnableUnifiedLayoutFeature()
{
  return &type metadata for EnableUnifiedLayoutFeature;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableUnifiedLayoutFeature()
{
  return &protocol witness table for EnableUnifiedLayoutFeature;
}

uint64_t key path getter for EnvironmentValues.defaultForegroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultForegroundStyle : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.defaultForegroundStyle.setter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ListButtonStyleDisabledOpacityModifier@<X0>(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;
  double v9;
  uint64_t v10;

  v3 = *(_QWORD *)v1;
  v4 = *(unsigned __int8 *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 24);
  outlined copy of Environment<Bool>.Content(v5, v6);
  v7 = specialized Environment.wrappedValue.getter(v5, v6);
  result = outlined consume of Environment<Bool>.Content(v5, v6);
  v9 = 1.0;
  if ((v7 & 1) == 0)
  {
    outlined copy of Environment<SceneBridge?>.Content(v3, v4);
    v10 = specialized Environment.wrappedValue.getter(v3, v4);
    result = outlined consume of Environment<AnyShapeStyle?>.Content(v3, v4);
    if (v10)
    {
      result = swift_release();
      v9 = 0.5;
    }
  }
  *a1 = v9;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonPrimaryTintListStyleContextPredicate()
{
  char v0;

  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
    v0 = 1;
  else
    v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  return v0 & 1;
}

uint64_t View.automaticListButtonStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a4;
  v30 = a5;
  v31 = a1;
  v32 = a6;
  v33 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WrappedButtonStyle(255, v10, v12, v11);
  v14 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v13);
  v16 = type metadata accessor for ButtonStyleModifier(0, v13, v14, v15);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v30 - v19;
  v21 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v16, v18);
  v22 = type metadata accessor for AutomaticStyleOverrideModifier(0, (uint64_t)&type metadata for DefaultListButtonStyle, v16, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)&v30 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v31, a3, v25);
  ButtonStyleModifier.init<A>(style:)((uint64_t)v9, a3, v30, v28, (uint64_t)v20);
  StaticIf<>.init<>(_:then:)((uint64_t)v20, v16, (uint64_t)v27);
  MEMORY[0x18D75B4AC](v27, v33, v22, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v22);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a4;
  v26 = a5;
  v27 = a1;
  v28 = a6;
  v29 = a2;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ButtonStyleModifier(0, v10, v12, v11);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v26 - v16;
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v13, v15);
  v19 = type metadata accessor for AutomaticStyleOverrideModifier(0, (uint64_t)&type metadata for DefaultListButtonStyle, v13, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&v26 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v27, a3, v22);
  FormatInputToString.init(format:)((uint64_t)v9, a3, (uint64_t)v17);
  StaticIf<>.init<>(_:then:)((uint64_t)v17, v13, (uint64_t)v24);
  MEMORY[0x18D75B4AC](v24, v29, v19, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v19);
}

uint64_t sub_187A771C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v4 = a1[2];
  v5 = type metadata accessor for WrappedButtonStyle(255, a1[1], a1[3], a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for WrappedButtonStyle<A>, v5);
  v8 = type metadata accessor for ButtonStyleModifier(255, v5, v6, v7);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v8);
  type metadata accessor for AutomaticStyleOverrideModifier(255, (uint64_t)&type metadata for DefaultListButtonStyle, v8, v9);
  v10 = type metadata accessor for ModifiedContent();
  v12[0] = v4;
  v12[1] = &protocol witness table for AutomaticStyleOverrideModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v10, v12);
}

uint64_t sub_187A7727C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = a1[2];
  v5 = type metadata accessor for ButtonStyleModifier(255, a1[1], a1[3], a4);
  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonStyleModifier<A>, v5);
  type metadata accessor for AutomaticStyleOverrideModifier(255, (uint64_t)&type metadata for DefaultListButtonStyle, v5, v6);
  v7 = type metadata accessor for ModifiedContent();
  v9[0] = v4;
  v9[1] = &protocol witness table for AutomaticStyleOverrideModifier<A, B>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v9);
}

void type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>)
  {
    type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>();
    v0 = type metadata accessor for Group();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
  }
}

uint64_t type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>;
  if (!lazy cache variable for type metadata for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for DefaultListButtonStyle.ListButton();
    lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t sub_187A77414@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A7744C()
{
  swift_retain();
  return EnvironmentValues.defaultForegroundStyle.setter();
}

uint64_t sub_187A77474@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A774AC()
{
  swift_retain();
  return EnvironmentValues.tint.setter();
}

uint64_t type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>;
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>)
  {
    type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, (void (*)(uint64_t))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
    type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t IsToggle;

  result = lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
    v2 = v1;
    IsToggle = lazy protocol witness table accessor for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE71B8], v2, &IsToggle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsToggle;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>)
  {
    IsToggle = type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>();
    v2[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DefaultListButtonStyle.ListButton and conformance DefaultListButtonStyle.ListButton, (uint64_t (*)(uint64_t))type metadata accessor for DefaultListButtonStyle.ListButton, (uint64_t)&protocol conformance descriptor for DefaultListButtonStyle.ListButton);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsToggle, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unsigned __int8 v47;
  char v49;
  char v50;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v26 = *(_QWORD *)v9;
      v27 = *((_QWORD *)v9 + 1);
      v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v9, v27, v28);
      *(_QWORD *)v8 = v26;
      *((_QWORD *)v8 + 1) = v27;
      v8[16] = v28;
      v29 = *((_QWORD *)v9 + 5);
      v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((_QWORD *)v8 + 5) = v29;
      v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *((_QWORD *)v9 + 1);
        v14 = *((_QWORD *)v9 + 2);
        v13 = *((_QWORD *)v9 + 3);
        v49 = v9[34];
        v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v9, v12, v14, v13, v15, v49);
        *(_QWORD *)v8 = v11;
        *((_QWORD *)v8 + 1) = v12;
        *((_QWORD *)v8 + 2) = v14;
        *((_QWORD *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v49;
        v16 = *((_QWORD *)v9 + 5);
        v17 = *((_QWORD *)v9 + 6);
        v18 = *((_QWORD *)v9 + 7);
        v19 = *((_QWORD *)v9 + 8);
        v50 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v50);
        *((_QWORD *)v8 + 5) = v16;
        *((_QWORD *)v8 + 6) = v17;
        *((_QWORD *)v8 + 7) = v18;
        *((_QWORD *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v50;
        v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v21 = &v8[v20];
        v22 = &v9[v20];
        v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
        v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        v33 = a3[5];
        v34 = (char *)v4 + v33;
        v35 = (char *)a2 + v33;
        v36 = *(_QWORD *)v35;
        v37 = v35[8];
        outlined copy of Environment<Bool>.Content(*(_QWORD *)v35, v37);
        *(_QWORD *)v34 = v36;
        v34[8] = v37;
        v38 = a3[6];
        v39 = (char *)v4 + v38;
        v40 = (char *)a2 + v38;
        v41 = *(_QWORD *)v40;
        v42 = v40[8];
        outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v40, v42);
        *(_QWORD *)v39 = v41;
        v39[8] = v42;
        v43 = a3[7];
        v44 = (char *)v4 + v43;
        v45 = (char *)a2 + v43;
        v46 = *(_QWORD *)v45;
        v47 = v45[8];
        outlined copy of Environment<SceneBridge?>.Content(*(_QWORD *)v45, v47);
        *(_QWORD *)v44 = v46;
        v44[8] = v47;
        return v4;
      }
      v32 = *((_QWORD *)v9 + 1);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *((_QWORD *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  v25 = *(_QWORD *)a2;
  *v4 = *(_QWORD *)a2;
  v4 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_WORD *initializeWithTake for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v12 = &v7[v11];
    v13 = &v8[v11];
    v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v16 = a3[5];
  v17 = a3[6];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = a3[7];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  return a1;
}

_WORD *assignWithTake for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = v19[8];
  v21 = *(_QWORD *)v18;
  v22 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = (char)v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  v23 = a3[6];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = v25[8];
  v27 = *(_QWORD *)v24;
  v28 = v24[8];
  *(_QWORD *)v24 = v26;
  v24[8] = (char)v25;
  outlined consume of Environment<AnyShapeStyle?>.Content(v27, v28);
  v29 = a3[7];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *(_QWORD *)v31;
  LOBYTE(v31) = v31[8];
  v33 = *(_QWORD *)v30;
  v34 = v30[8];
  *(_QWORD *)v30 = v32;
  v30[8] = (char)v31;
  outlined consume of Environment<AnyShapeStyle?>.Content(v33, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultListButtonStyle.ListButton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A77BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DefaultListButtonStyle.ListButton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A77C58(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t IsToggle;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>)
  {
    IsToggle = type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>();
    v2[0] = lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance _UnaryViewAdaptor<A>, &lazy cache variable for type metadata for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, (void (*)(uint64_t))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
    v2[1] = lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, IsToggle, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(255, a2, a3, a4);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4108], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultListButtonStyle.ListButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187A77E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + *(int *)(v1 + 24) + ((v2 + 16) & ~v2);
  type metadata accessor for ButtonAction();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));

LABEL_6:
      swift_release();
      return swift_deallocObject();
    case 1:
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_WORD *)(v3 + 32), *(_BYTE *)(v3 + 34));
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_WORD *)(v3 + 72), *(_BYTE *)(v3 + 74));
      v5 = v3 + *(int *)(type metadata accessor for LinkDestination() + 24);
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
      return swift_deallocObject();
    case 0:
      goto LABEL_6;
  }
  return swift_deallocObject();
}

uint64_t key path getter for EnvironmentValues.foregroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A77FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundStyle : EnvironmentValues()
{
  swift_retain();
  return EnvironmentValues.foregroundStyle.setter();
}

uint64_t sub_187A78018()
{
  swift_retain();
  return EnvironmentValues.foregroundStyle.setter();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
}

uint64_t destroy for ListButtonStyleDisabledOpacityModifier(uint64_t a1)
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ListButtonStyleDisabledOpacityModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, (char)v2);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t *assignWithCopy for ListButtonStyleDisabledOpacityModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  outlined copy of Environment<SceneBridge?>.Content(*a2, v5);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  v8 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, (char)v2);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = v8;
  *((_BYTE *)a1 + 24) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t *assignWithTake for ListButtonStyleDisabledOpacityModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((_BYTE *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  v10 = *((_BYTE *)a1 + 24);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for ListButtonStyleDisabledOpacityModifier()
{
  return &type metadata for ListButtonStyleDisabledOpacityModifier;
}

ValueMetadata *type metadata accessor for ButtonPrimaryTintListStyleContextPredicate()
{
  return &type metadata for ButtonPrimaryTintListStyleContextPredicate;
}

uint64_t sub_187A781E8()
{
  return lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>, &lazy cache variable for type metadata for _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>);
}

uint64_t type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>;
  if (!lazy cache variable for type metadata for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    lazy protocol witness table accessor for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(255);
    type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate;
  if (!lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonPrimaryTintListStyleContextPredicate, &type metadata for ButtonPrimaryTintListStyleContextPredicate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t ShouldRenderAs;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>)
  {
    ShouldRenderAs = type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>();
    v2[1] = v2[0];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, ShouldRenderAs, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
    v3[1] = &protocol witness table for _DefaultForegroundStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ListButtonStyleDisabledOpacityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = MEMORY[0x1E0CE2BA8];
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>)
  {
    lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>);
  }
}

ValueMetadata *type metadata accessor for SwiftUIResolvedTextProvider()
{
  return &type metadata for SwiftUIResolvedTextProvider;
}

void protocol witness for static ResolvedTextProvider.updateImageTextAttachment(in:image:) in conformance SwiftUIResolvedTextProvider(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  char v5;

  v3 = *(id *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of GraphicsImage.Contents?(*(id *)a2, v5);
  v4 = (id)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 1, 0);
  outlined consume of GraphicsImage.Contents?(v3, v5);
  objc_msgSend(a1, sel_setImage_, v4);

}

uint64_t specialized static SwiftUIResolvedTextProvider.updateWidgetTextAttachment(_:namedImage:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  int *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Class isa;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  _BYTE v52[184];
  uint64_t v53[3];
  int v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[192];

  v51 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v49 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  MEMORY[0x1E0C80A78](v50, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v46 = (char *)&v43 - v11;
  v12 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  v13 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  v48 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (uint64_t *)((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(_QWORD *)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_DWORD *)(a2 + 24);
  v21 = *(unsigned __int8 *)(a2 + 28);
  v22 = *(_BYTE *)(a2 + 29);
  v44 = *(unsigned __int8 *)(a2 + 30);
  v45 = v21;
  v23 = *(_QWORD *)(a2 + 32);
  v24 = *(_QWORD *)(a2 + 40);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v60);
  v53[0] = v18;
  v53[1] = v17;
  v53[2] = v19;
  v54 = v20;
  v55 = v45;
  v56 = v22;
  v57 = v44;
  v58 = v23;
  v59 = v24;
  outlined init with take of TableCellFormula((uint64_t)v60, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Image.Resolved?);
  swift_bridgeObjectRetain();
  v25 = (void *)v19;
  v26 = (uint64_t)v46;
  outlined copy of Image.Location(v25);
  swift_retain();
  swift_retain();
  WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)(v53, (uint64_t)v52, v16);
  v27 = v47;
  swift_storeEnumTagMultiPayload();
  v28 = v49;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Graphic((uint64_t)v16, v49);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v29(v28, 0, 1, v27);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v30 = (int *)v50;
  v31 = (uint64_t)&v8[*(int *)(v50 + 24)];
  v29(v31, 1, 1, v27);
  *(_QWORD *)&v8[v30[7]] = 0;
  v32 = &v8[v30[8]];
  v33 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = &v8[v30[9]];
  v34[48] = 0;
  *((_OWORD *)v34 + 1) = 0u;
  *((_OWORD *)v34 + 2) = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = &v8[v30[10]];
  v36 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = &v8[v30[11]];
  *(_OWORD *)v37 = xmmword_187BF9840;
  *((_OWORD *)v37 + 1) = 0u;
  *((_OWORD *)v37 + 2) = 0u;
  *((_OWORD *)v37 + 3) = 0u;
  outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?(v28, v31);

  *(_QWORD *)v8 = 0;
  outlined init with take of TableCellFormula((uint64_t)v8, v26, type metadata accessor for WidgetAuxiliaryViewMetadata);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata();
  v38 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v40 = v39;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v38, v40);
  objc_msgSend(v51, sel_setContents_, isa);
  swift_release();

  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v26, type metadata accessor for WidgetAuxiliaryViewMetadata);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance _PlainButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  KeyPath = swift_getKeyPath();
  v8 = swift_getKeyPath();
  v9 = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v8;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = v9;
  *(_BYTE *)(a2 + 72) = 0;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v5);
}

void __swiftcall PlainButtonMenuStyle.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PlainButtonMenuStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlainButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlainButtonMenuStyle()
{
  return &type metadata for PlainButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v3[1] = &protocol witness table for MenuStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>);
  }
}

void type metadata accessor for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!lazy cache variable for type metadata for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>)
  {
    type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>(255);
    v3 = v2;
    v4 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase> and conformance ButtonStyleAdaptorMenuStyle<A>, (uint64_t (*)(uint64_t))type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>, (uint64_t)&protocol conformance descriptor for ButtonStyleAdaptorMenuStyle<A>);
    v6 = type metadata accessor for MenuStyleModifier(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&lazy cache variable for type metadata for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>);
  }
}

void type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>)
  {
    v2 = lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase();
    v4 = type metadata accessor for ButtonStyleAdaptorMenuStyle(a1, (uint64_t)&type metadata for PlainButtonStyleBase, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>);
  }
}

ValueMetadata *type metadata accessor for _PlainButtonMenuStyle()
{
  return &type metadata for _PlainButtonMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _PlainButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabContent.defaultVisibility(_:for:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v5[8];
  uint64_t v6;

  v5[0] = a1;
  v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for DefaultTabVisibilityModifier, a4);
}

{
  _BYTE v5[8];
  uint64_t v6;

  v5[0] = a1;
  v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for DefaultTabVisibilityModifier, a4);
}

BOOL static TabPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TabContent.hidden(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for TabHiddenModifier, a3);
}

void static TabPlacement.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static TabPlacement.pinned.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static TabPlacement.sidebarOnly.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static TabPlacement.bottomBar.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static TabPlacement.topBar.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static TabPlacement.sidebar.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void TabPlacement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TabPlacement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabPlacement and conformance TabPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement;
  if (!lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabPlacement, &type metadata for TabPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabPlacement()
{
  return &type metadata for TabPlacement;
}

uint64_t sub_187A78E5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for DefaultTabVisibilityModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier, a4);
}

uint64_t sub_187A78E70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA29CustomizationBehaviorModifier33_0BD63AC3193ED2016BE9565DB357DE28LLVGAaBHPxAaBHD1__AgA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for TabHiddenModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier, a4);
}

unint64_t lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier;
  if (!lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabHiddenModifier, &type metadata for TabHiddenModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TabPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187A78F14 + 4 * byte_187C84915[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_187A78F48 + 4 * byte_187C84910[v4]))();
}

uint64_t sub_187A78F48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A78F50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A78F58);
  return result;
}

uint64_t sub_187A78F64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A78F6CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_187A78F70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A78F78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabPlacement.Placement()
{
  return &type metadata for TabPlacement.Placement;
}

ValueMetadata *type metadata accessor for DefaultTabVisibilityModifier()
{
  return &type metadata for DefaultTabVisibilityModifier;
}

uint64_t storeEnumTagSinglePayload for TabHiddenModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187A78FF0 + 4 * byte_187C8491F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187A79024 + 4 * byte_187C8491A[v4]))();
}

uint64_t sub_187A79024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A7902C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A79034);
  return result;
}

uint64_t sub_187A79040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A79048);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187A7904C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A79054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabHiddenModifier()
{
  return &type metadata for TabHiddenModifier;
}

unint64_t lazy protocol witness table accessor for type TabPlacement.Placement and conformance TabPlacement.Placement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement;
  if (!lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TabPlacement.Placement, &type metadata for TabPlacement.Placement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabHiddenModifier()
{
  char *v0;
  char v1;

  v1 = *v0;
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<TabHiddenModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier);
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DefaultTabVisibilityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in DefaultTabVisibilityModifier.body(content:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return result;
  v6 = result;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    v8 = *(_BYTE *)(a3 + v7 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *(_QWORD **)(v6 + 32);
    *(_QWORD *)(v6 + 32) = 0x8000000000000000;
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (v10[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v19 = v10;
        if ((v11 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v19 = v10;
        if ((v16 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_20;
      v12 = v17;
      v19 = v10;
      if ((v16 & 1) != 0)
      {
LABEL_3:
        *(_BYTE *)(v19[7] + v12) = a2;
        goto LABEL_4;
      }
    }
    v19[(v12 >> 6) + 8] |= 1 << v12;
    *(_BYTE *)(v19[6] + v12) = v8;
    *(_BYTE *)(v19[7] + v12) = a2;
    v20 = v19[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_19;
    v19[2] = v22;
LABEL_4:
    ++v7;
    *(_QWORD *)(v6 + 32) = v19;
    swift_bridgeObjectRelease();
    if (v3 == v7)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DefaultTabVisibilityModifier()
{
  char *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  type metadata accessor for _ViewModifier_Content<CustomizationBehaviorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<CustomizationBehaviorModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t sub_187A79430()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DefaultTabVisibilityModifier.body(content:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in DefaultTabVisibilityModifier.body(content:)(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_187A79460()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabHiddenModifier.body(content:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 1) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t sub_187A7947C(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier, (uint64_t)&type metadata for DefaultTabVisibilityModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t sub_187A794A0(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA021CustomizationBehaviorH033_0BD63AC3193ED2016BE9565DB357DE28LLVG_AA10TabOptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier, (uint64_t)&type metadata for TabHiddenModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<TabHiddenModifier> and conformance _ViewModifier_Content<A>);
}

void View.sectionActions<A>(content:)()
{
  lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  type metadata accessor for StaticSourceWriter();
}

void sub_187A79524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;

  v13 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v12 - 208) = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&a9 - v20;
  (*(void (**)(double))(v12 - 232))(v19);
  *(_QWORD *)(v12 - 176) = v11;
  *(_QWORD *)(v12 - 168) = v9;
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v12 - 224);
  *(_QWORD *)(v12 - 152) = v10;
  *(_QWORD *)(v12 - 144) = v21;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Actions, (uint64_t)partial apply for closure #1 in TableHeaderRowContent.tableRowBody.getter);
}

uint64_t sub_187A79600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v5, v0);
  v8 = AnyView.init<A>(_:)();
  *(_QWORD *)(v7 - 136) = v6;
  *(_QWORD *)(v7 - 128) = &protocol witness table for StaticSourceWriter<A, B>;
  *(_QWORD *)(v7 - 120) = v8;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v7 - 136);
  View._trait<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 208) + 8))(v3, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v5, v0);
}

void sub_187A796C8()
{
  lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187A79704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[12];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = v0;
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>();
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE52E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionActionsTraitKey()
{
  return &type metadata for SectionActionsTraitKey;
}

ValueMetadata *type metadata accessor for SidebarSectionActionButtonStyle()
{
  return &type metadata for SidebarSectionActionButtonStyle;
}

ValueMetadata *type metadata accessor for SidebarSectionActionStyleContext()
{
  return &type metadata for SidebarSectionActionStyleContext;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SidebarSectionActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarSectionActionButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v17 = v7[1];
  *v12 = *v7;
  v12[1] = v17;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)&v7[*(int *)(v4 + 24)], (uint64_t)&v12[*(int *)(v9 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v7);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v12, (uint64_t)v16);
  KeyPath = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v16, a2);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
  v23 = a2 + *(int *)(v22 + 36);
  *(_QWORD *)v23 = KeyPath;
  *(_BYTE *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = v19;
  *(_BYTE *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = v20;
  *(_BYTE *)(v23 + 40) = 0;
  *(_QWORD *)(v23 + 48) = v21;
  *(_BYTE *)(v23 + 56) = 0;
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v16);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for VStack<TableHeaderViewCore>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>);
  }
}

uint64_t InlineActionsSectionStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4;
  uint64_t v5;

  v4 = 0;
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(result, a2);
    type metadata accessor for Binding<Bool>();
    MEMORY[0x18D75B9C8](&v5);
    swift_release();
    result = swift_release();
    if (v5 != 1)
      v4 = 1;
  }
  *(_BYTE *)a3 = v4;
  *(_WORD *)(a3 + 1) = 257;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

BOOL specialized static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

ValueMetadata *type metadata accessor for InlineActionsSectionStyle()
{
  return &type metadata for InlineActionsSectionStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    v3[1] = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in InlineActionsSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>();
    v3[1] = &protocol witness table for SectionStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>(255);
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for SectionStyleModifier<PlainSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle, (uint64_t)&type metadata for PlainSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>);
  }
}

void type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>();
    v3 = type metadata accessor for Section(a1, (uint64_t)&type metadata for SectionStyleConfiguration.Header, v2, (uint64_t)&type metadata for SectionStyleConfiguration.Footer);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>);
  }
}

void type metadata accessor for TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>)
  {
    type metadata accessor for (_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)();
    v0 = type metadata accessor for TupleView();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>);
  }
}

void type metadata accessor for (_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E0CE7C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>));
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)
  {
    type metadata accessor for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>);
  }
}

void type metadata accessor for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsMoveDisabledTraitKey>, (uint64_t)&type metadata for IsMoveDisabledTraitKey, (uint64_t)&protocol witness table for IsMoveDisabledTraitKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>);
  }
}

unint64_t lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];

  result = lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>(255);
    v2 = v1;
    v3[0] = &protocol witness table for SectionStyleConfiguration.Header;
    v3[1] = lazy protocol witness table accessor for type TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>();
    v3[2] = &protocol witness table for SectionStyleConfiguration.Footer;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> Section<A, B, C>, v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t _UIHostingView.currentTimestamp.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80));
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*_UIHostingView.renderingPhase.modify())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t _UIHostingView.externalUpdateCount.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98));
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t _UIHostingView.disabledBackgroundColor.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC0)) = result;
  return result;
}

uint64_t _UIHostingView.allowFrameChanges.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8));
}

uint64_t _UIHostingView.allowFrameChanges.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC8)) = result;
  return result;
}

uint64_t _UIHostingView.transparentBackgroundReasons.getter()
{
  _QWORD *v0;

  return *(unsigned int *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0));
}

uint64_t _UIHostingView.transparentBackgroundReasons.setter(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD0);
  v4 = *(_DWORD *)((char *)v1 + v3);
  *(_DWORD *)((char *)v1 + v3) = result;
  if ((v4 == 0) == (*(_DWORD *)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0xD0)) != 0))
    _UIHostingView.updateBackgroundColor()();
  return result;
}

id _UIHostingView.explicitSafeAreaInsets.setter(uint64_t a1)
{
  _QWORD *v1;

  outlined init with take of EdgeInsets?(a1, (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD8));
  return objc_msgSend(v1, sel_safeAreaInsetsDidChange);
}

void (*_UIHostingView.isHiddenForReuse.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _UIHostingView.isHiddenForReuse.modify;
}

void _UIHostingView.isHiddenForReuse.modify(uint64_t a1, char a2)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    _UIHostingView.updateRemovedState()();
}

void (*_UIHostingView.safeAreaRegions.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x108));
  swift_beginAccess();
  v3[3] = *v4;
  return _UIHostingView.safeAreaRegions.modify;
}

void _UIHostingView.safeAreaRegions.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  _UIHostingView.safeAreaRegions.setter(*(_QWORD *)(*(_QWORD *)a1 + 24));
  free(v1);
}

uint64_t _UIHostingView.inheritedEnvironment.setter(_OWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x118));
  v3 = *v2;
  *(_OWORD *)v2 = *a1;
  outlined consume of EnvironmentValues?(v3);
  return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, v4, v5, v6);
}

uint64_t (*_UIHostingView.environmentOverride.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return _UIHostingView.environmentOverride.modify;
}

uint64_t _UIHostingView.environmentOverride.modify(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, v4, v5, v6);
  return result;
}

void _UIHostingView.currentEvent.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x138);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

double _UIHostingView.lastRenderTime.getter@<D0>(double *a1@<X8>)
{
  _QWORD *v1;
  double result;

  result = *(double *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x150));
  *a1 = result;
  return result;
}

double _UIHostingView.lastRenderTime.setter(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *(double *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x150)) = *a1;
  return result;
}

uint64_t _UIHostingView.canAdvanceTimeAutomatically.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158));
}

uint64_t _UIHostingView.canAdvanceTimeAutomatically.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x158)) = result;
  return result;
}

uint64_t _UIHostingView.pendingPostDisappearPreferencesUpdate.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168));
}

uint64_t _UIHostingView.pendingPostDisappearPreferencesUpdate.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x168)) = result;
  return result;
}

void _UIHostingView.nextTimerTime.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x170);
  v3 = *(_QWORD *)v2;
  LOBYTE(v2) = v2[8];
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = (_BYTE)v2;
}

uint64_t _UIHostingView.accessibilityEnabled.setter(char a1)
{
  _QWORD *v1;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = a1 & 1;
  v4 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v5 = *(_QWORD *)((char *)v1 + v4[13]);
  result = swift_beginAccess();
  v8 = *(unsigned __int8 *)(v5 + 360);
  *(_BYTE *)(v5 + 360) = a1;
  if (v8 != v3)
  {
    v9 = type metadata accessor for _UIHostingView(0, v4[10], v4[11], v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return specialized static AccessibilityFocus.changed(from:to:within:)(0, 0);
  }
  return result;
}

void (*_UIHostingView.accessibilityEnabled.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68));
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *(_BYTE *)(v4 + 360);
  return _UIHostingView.accessibilityEnabled.modify;
}

void _UIHostingView.accessibilityEnabled.modify(uint64_t a1, uint64_t a2)
{
  _UIHostingView.accessibilityEnabled.modify(a1, a2, (void (*)(_QWORD))_UIHostingView.accessibilityEnabled.setter);
}

uint64_t _UIHostingView.scrollTest.setter(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x238)) = a1;
  return swift_release();
}

uint64_t _UIHostingView.focusedValues.setter(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x250);
  *(_QWORD *)v4 = *(_QWORD *)a1;
  v4[8] = v2;
  *((_DWORD *)v4 + 3) = v3;
  swift_release();
  return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(4, v5, v6, v7);
}

uint64_t _UIHostingView.currentAccessibilityFocusStore.setter(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x258);
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(256, v3, v4, v5);
}

uint64_t _UIHostingView.isEnteringForeground.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278));
}

void _UIHostingView.windowWillRotate(notification:)()
{
  _QWORD *v0;

  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8)) = 1;
}

void _UIHostingView.windowDidRotate(notification:)()
{
  _QWORD *v0;

  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8)) = 0;
}

void _UIHostingView.sceneDidEnterBackground(notification:)()
{
  _UIHostingView.sceneActivationStateDidChange(with:)(2u);
}

void _UIHostingView.sceneWillDeactivate(notification:)()
{
  _UIHostingView.sceneActivationStateDidChange(with:)(0);
}

uint64_t _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, a2, a3, a4);
}

{
  _QWORD *v4;
  uint64_t v5;

  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

Swift::Void __swiftcall _UIHostingView.updatePreferences(renderDisplayList:)(Swift::Bool renderDisplayList)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  CFTimeInterval v5;
  char v6;

  v2 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v1);
  if (*((_BYTE *)v1 + v2[43]) == 1)
  {
    v5 = CACurrentMediaTime();
    _UIHostingView.renderInterval(timestamp:)(&v5);
    UIAnimationDragCoefficient();
    v5 = 0.0;
    v6 = 1;
    v4 = type metadata accessor for _UIHostingView(0, v2[10], v2[11], v3);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
  }
}

uint64_t _UIHostingView.platformItemListDidChange(list:)(uint64_t (*a1)(void))
{
  _QWORD *v1;
  _QWORD *v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = (char *)v1 + v3[72];
  result = MEMORY[0x18D760234](v4);
  if (result)
  {
    v6 = *((_QWORD *)v4 + 1);
    ObjectType = swift_getObjectType();
    v8 = a1();
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v6 + 40))(v1, v8, v3[10], v3[11], ObjectType, v6);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _UIHostingView.isCapturingSnapshots.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288));
}

uint64_t _UIHostingView.isCapturingSnapshots.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x288)) = result;
  return result;
}

Swift::Void __swiftcall _UIHostingView.willBeginSnapshotSession()()
{
  _QWORD *v0;

  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288)) = 1;
}

Swift::Void __swiftcall _UIHostingView.didEndSnapshotSession()()
{
  _QWORD *v0;

  *((_BYTE *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288)) = 0;
}

uint64_t _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE v11[12];

  v2 = *MEMORY[0x1E0DEEDD8] & *v1;
  v3 = *(_QWORD *)(v2 + 0x50);
  v4 = MEMORY[0x1E0C80A78](a1, a1);
  v6 = &v11[-v5];
  (*(void (**)(_BYTE *, double))(v7 + 16))(&v11[-v5], v4);
  CoreCoordinator.dataSource.setter((uint64_t)v6);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v3;
  v9[3] = *(_QWORD *)(v2 + 88);
  v9[4] = v8;
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  return swift_release();
}

void (*_UIHostingView.rootView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  char *v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  v5 = *(_QWORD *)(v4 + 0x50);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v8 = malloc(v7);
  v3[7] = v8;
  v9 = (char *)v1 + *(_QWORD *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(void *, char *, uint64_t))(v6 + 16))(v8, v9, v5);
  return _UIHostingView.rootView.modify;
}

void _UIHostingView.rootView.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 48), v4, v5);
    specialized _UIHostingView.rootView.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized _UIHostingView.rootView.setter(*(_QWORD *)(*(_QWORD *)a1 + 56));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290);
  swift_beginAccess();
  return *v1;
}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter(char a1)
{
  _QWORD *v1;
  char *v3;
  char v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x290);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(v4);
}

void (*_UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x290);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *v4;
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify;
}

void _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify(uint64_t a1, uint64_t a2)
{
  _UIHostingView.accessibilityEnabled.modify(a1, a2, (void (*)(_QWORD))_UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter);
}

uint64_t _UIHostingView.setWantsTransparentBackground(for:_:)(int a1, char a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;

  v3 = *(_DWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD0));
  if ((v3 & a1) != 0)
    v4 = ~a1;
  else
    v4 = -1;
  v5 = v4 & v3;
  if ((v3 & a1) == a1)
    v6 = 0;
  else
    v6 = a1;
  v7 = v6 | v3;
  if ((a2 & 1) != 0)
    return _UIHostingView.transparentBackgroundReasons.setter(v7);
  else
    return _UIHostingView.transparentBackgroundReasons.setter(v5);
}

void _UIHostingView.accessibilityFocusedElementDidChange(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];
  __int128 v43;
  __int128 v44;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, sel_userInfo, v10);
  v14 = MEMORY[0x1E0DEE9B8];
  if (!v13)
  {
    v43 = 0u;
    v44 = 0u;
LABEL_11:
    outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for Any?, v14 + 8);
    v20 = 0;
    goto LABEL_12;
  }
  v15 = v13;
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(_QWORD *)&v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((_QWORD *)&v43 + 1) = v17;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v16 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v18, (uint64_t)&v43);
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((_QWORD *)&v44 + 1))
    goto LABEL_11;
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if (swift_dynamicCast())
    v20 = (void *)aBlock[0];
  else
    v20 = 0;
LABEL_12:
  v21 = objc_msgSend(a1, sel_userInfo);
  if (v21)
  {
    v22 = v21;
    v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)&v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((_QWORD *)&v43 + 1) = v24;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v23 + 16)
      && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v26 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v23 + 56) + 32 * v25, (uint64_t)&v43);
    }
    else
    {
      v43 = 0u;
      v44 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)aBlock);
    if (*((_QWORD *)&v44 + 1))
    {
      type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
      if (swift_dynamicCast())
        v28 = (void *)aBlock[0];
      else
        v28 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    v43 = 0u;
    v44 = 0u;
  }
  outlined destroy of AccessibilityTableContext?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for Any?, v14 + 8);
  v28 = 0;
LABEL_23:
  v30 = *(_QWORD *)(v3 + 80);
  v29 = *(_QWORD *)(v3 + 88);
  v31 = type metadata accessor for _UIHostingView(0, v30, v29, v27);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v31);
  if (specialized static AccessibilityFocus.changed(from:to:within:)((unint64_t)v20, (unint64_t)v28))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v32 = (void *)static OS_dispatch_queue.main.getter();
    v33 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = v30;
    v34[3] = v29;
    v34[4] = v33;
    aBlock[4] = partial apply for closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:);
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_83_0;
    v35 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], v36, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v37 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18D75D930](0, v12, v7, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v37);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  }
  else
  {

  }
}

uint64_t _UIHostingView.accessibilityDidChange(nodes:)(uint64_t (*a1)(uint64_t))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;

  v3 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x68));
  result = swift_beginAccess();
  if (*(_BYTE *)(v3 + 360) == 1)
  {
    v5 = a1(result);
    v6 = v5;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v7 = result;
      if (result)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        for (i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
            v9 = (id)MEMORY[0x18D75E3BC](i, v6);
          else
            v9 = *(id *)(v6 + 8 * i + 32);
          v10 = v9;
          AccessibilityNode.updatePlatformProperties()();

        }
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t _UIHostingView.uiKitAccessibilityElements(options:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  Class v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;

  v3 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = *(_QWORD *)((char *)v1 + v3[13]);
  swift_beginAccess();
  if ((*(_BYTE *)(v4 + 360) & 1) == 0)
  {
    if (_AXSAccessibilityEnabled()
      || (v6 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL),
          v7 = NSClassFromString(v6),
          v6,
          v7))
    {
      _UIHostingView.accessibilityEnabled.setter(1);
    }
  }
  v8 = type metadata accessor for _UIHostingView(0, v3[10], v3[11], v5);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v8);
  v10 = ViewRendererHost.accessibilityNodes.getter(v8, v9);
  v11 = v10;
  if ((a1 & 2) != 0)
  {
    if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
    {
      v19 = swift_bridgeObjectRetain();
      v12 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    v20 = v12;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v20, 0, 4, 2);
    swift_bridgeObjectRelease();
    v11 = v20;
  }
  v13 = static AccessibilityCore.queryFilter(elements:options:)(v11, a1);
  swift_bridgeObjectRelease();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n((unint64_t)v13);
  swift_bridgeObjectRelease();
  UIView.accessibilityHostingSubviews.getter();
  Array<A>.merge(with:options:)(v15, a1, v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall _UIHostingView.accessibilityReinstantiateIfNeeded()()
{
  static Update.ensure<A>(_:)();
}

Swift::Void __swiftcall _UIHostingView.focusDidChange()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x58), v0);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v2);
  v3 = ViewRendererHost.responderNode.getter();
  v4 = (void *)FocusBridge.host.getter();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, sel_setNeedsFocusUpdate);

  }
  FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(v3);
  swift_release();
  swift_release();
}

uint64_t _UIHostingView.makeViewDebugData()()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E0CB0338], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.ensure<A>(_:)();
  return v1;
}

id _UIHostingView.foreignSubviews.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298);
  v2 = *(void **)((char *)v0 + v1);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + v1);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_weakObjectsHashTable);
    v5 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t _UIHostingView.isInsertingRenderedSubview.getter()
{
  _QWORD *v0;

  return *((unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0));
}

uint64_t _UIHostingView.isInsertingRenderedSubview.setter(uint64_t result)
{
  _QWORD *v1;

  *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2A0)) = result;
  return result;
}

void _UIHostingView.printHitTestIfNeeded(at:with:)(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  double v11;
  id v12;
  char v13;
  uint64_t v14;

  _eventDebugTriggers.getter();
  if ((v13 & 0x40) != 0 && a1)
  {
    v12 = a1;
    if (!objc_msgSend(v12, sel_type))
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = specialized implicit closure #1 in UIView.ancestors.getter;
      *(_QWORD *)(v6 + 24) = 0;
      type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for HostingViewProtocol);
      type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>> and conformance DropFirstSequence<A>, (uint64_t (*)(uint64_t))type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>, MEMORY[0x1E0DEC9D0]);
      Sequence.first<A>(ofType:)();
      v7 = swift_release();
      if (v14)
      {

        swift_unknownObjectRelease();
        return;
      }
      v8 = MEMORY[0x18D75A3D8](v7);
      v9 = (id)_UICurrentHitTestContext();
      v10 = v9;
      if ((v8 & 1) != 0)
      {
        if (v9)
        {
          objc_msgSend(v9, sel_radius);
          UIView.printHitTest(_:radius:)(a2, a3, v11);

        }
      }
      else
      {

        if (!v10)
          UIView.printHitTest(_:radius:)(a2, a3, 1.0);
      }
    }

  }
}

void *protocol witness for CurrentEventProvider.currentEvent.getter in conformance _UIHostingView<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized _UIHostingView.currentEvent.getter();
  v1 = v0;
  return v0;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (String?, String)();
    type metadata accessor for (key: String?, value: String)();
    v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1);
        v2 = v13;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_QWORD *)(v2 + 32 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v2 = v11;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1);
        v2 = v11;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
    do
    {
      v4 += 16;
      swift_unknownObjectRetain_n();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v5 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    do
    {
      v4 += 8;
      CGFloat._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (String, String)();
    type metadata accessor for (name: String, value: String)();
    v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v2 = v13;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1);
        v2 = v13;
      }
      v4 += 32;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_QWORD *)(v2 + 32 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1;
  if (a1 >> 62)
  {
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    swift_bridgeObjectRetain();
    v6 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    if (!swift_dynamicCastMetatype())
    {
      v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
        v5 = v2 + 32;
        while (swift_dynamicCastObjCProtocolConditional())
        {
          v5 += 8;
          if (!--v4)
            return v1;
        }
        return v2 | 1;
      }
    }
    return v1;
  }
}

char *specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (char *)v3;
  v13 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        MEMORY[0x18D75E3BC](i, a1);
        type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
        swift_dynamicCast();
        v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v13;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          v3 = v13;
        }
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      v8 = (id *)(a1 + 32);
      type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
      do
      {
        v9 = *v8;
        swift_dynamicCast();
        v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v13;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
          v3 = v13;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return (char *)v3;
  v12 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        MEMORY[0x18D75E3BC](i, a1);
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
        swift_dynamicCast();
        v3 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          v3 = v12;
        }
        *(_QWORD *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      v8 = a1 + 32;
      type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v3 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v12;
        }
        v10 = *(_QWORD *)(v3 + 16);
        v9 = *(_QWORD *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
          v3 = v12;
        }
        *(_QWORD *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8;
        --v2;
      }
      while (v2);
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed _UIGestureRecognizerContainer) -> (@owned String?)(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v3 = v1(v2);
  v5 = v4;
  swift_release();
  swift_unknownObjectRelease();
  if (v5)
  {
    v6 = (void *)MEMORY[0x18D75CC88](v3, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

uint64_t _UIHostingView.renderer.getter()
{
  return swift_retain();
}

id _UIHostingView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void @objc _UIHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized _UIHostingView.init(coder:)();
}

uint64_t _UIHostingView._rendererConfiguration.getter()
{
  return static Update.locked<A>(_:)();
}

uint64_t _UIHostingView._rendererConfiguration.setter()
{
  static Update.locked<A>(_:)();
  return swift_release();
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70));
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 32);
  *a2 = *(_QWORD *)(v3 + 24);
  a2[1] = v4;
  return swift_retain();
}

void (*_UIHostingView._rendererConfiguration.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[2] = v1;
  static Update.locked<A>(_:)();
  return _UIHostingView._rendererConfiguration.modify;
}

void _UIHostingView._rendererConfiguration.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    _UIHostingView._rendererConfiguration.setter();
    swift_release();
  }
  else
  {
    _UIHostingView._rendererConfiguration.setter();
  }
  free(v2);
}

uint64_t _UIHostingView._rendererObject.getter()
{
  uint64_t v1;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  static Update.locked<A>(_:)();
  return v1;
}

void closure #1 in _UIHostingView.didMoveToWindow()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x18D760234](v1);
  if (v2)
  {
    v3 = (_QWORD *)v2;
    _UIHostingView.updatePreferences(renderDisplayList:)(0);
    *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x168)) = 0;

  }
}

uint64_t @objc _UIHostingView.windowWillRotate(notification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowWillRotate(notification:)(a1, a2, a3, (void (*)(uint64_t))_UIHostingView.windowWillRotate(notification:));
}

uint64_t @objc _UIHostingView.windowDidRotate(notification:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowWillRotate(notification:)(a1, a2, a3, (void (*)(uint64_t))_UIHostingView.windowDidRotate(notification:));
}

uint64_t @objc _UIHostingView.windowWillRotate(notification:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = type metadata accessor for Notification();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  a4(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t @objc _UIHostingView.windowDidMoveToScene(notification:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowDidMoveToScene(notification:)(a1, a2, a3, (void (*)(void))_UIHostingView.windowDidMoveToScene(notification:));
}

uint64_t @objc _UIHostingView.sceneDidEnterBackground(notification:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowDidMoveToScene(notification:)(a1, a2, a3, _UIHostingView.sceneDidEnterBackground(notification:));
}

uint64_t @objc _UIHostingView.sceneWillDeactivate(notification:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc _UIHostingView.windowDidMoveToScene(notification:)(a1, a2, a3, _UIHostingView.sceneWillDeactivate(notification:));
}

uint64_t implicit closure #1 in _UIHostingView._geometryChanged(_:forAncestor:)(_QWORD *a1)
{
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;

  v1 = *MEMORY[0x1E0DEEDD8] & *a1;
  _StringGuts.grow(_:)(54);
  v2._object = (void *)0x8000000187BEF560;
  v2._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v2);
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CB2120], v4);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

void _UIHostingView.displayLinkTimer(timestamp:targetTimestamp:isAsyncThread:)(double *a1, double *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  char *v19;
  double v20;
  char v21;

  v4 = v3;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = *MEMORY[0x1E0DEEDD8] & *v3;
  v8 = *a1;
  v9 = *a2;
  _UIHostingView.clearUpdateTimer()();
  v20 = v8;
  _UIHostingView.renderInterval(timestamp:)(&v20);
  UIAnimationDragCoefficient();
  if ((a3 & 1) != 0)
  {
    v11 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v10);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v11);
    ViewRendererHost.renderAsync(interval:targetTimestamp:)();
    if ((v21 & 1) != 0)
    {
      v12 = *(_QWORD *)((char *)v3 + *(_QWORD *)((*v6 & *v3) + 0x148));
      if (v12)
        *(_BYTE *)(v12 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
      _UIHostingView.requestUpdate(after:)(0.0);
    }
    else
    {
      if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) != 0)
      {
        v16 = v20;
        v17 = (double *)((char *)v3 + *(_QWORD *)((*v6 & *v3) + 0x80));
        swift_beginAccess();
        _UIHostingView.requestUpdate(after:)(fmax(v16 - *v17, 0.000001));
      }
      if ((ViewGraph.updateRequiredMainThread.getter() & 1) != 0)
      {
        v18 = *(_QWORD *)((char *)v4 + *(_QWORD *)((*v6 & *v4) + 0x148));
        if (v18)
          *(_BYTE *)(v18 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
      }
    }
  }
  else
  {
    v20 = v9;
    v21 = 0;
    v13 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), v10);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v13);
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    v14 = *(char **)((char *)v3 + *(_QWORD *)((*v6 & *v3) + 0x148));
    if (v14)
    {
      v15 = *(double *)&v14[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      v19 = v14;
      static Time.infinity.getter();
      if (v15 < v20 && (ViewGraph.updateRequiredMainThread.getter() & 1) == 0)
      {
        static Semantics.v3.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) != 0)
          v19[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread] = 1;
      }

    }
  }
}

double @objc _UIHostingView.transform3D.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[8];

  v3 = a1;
  _UIHostingView.transform3D.getter(v4, v13);

  result = *(double *)v13;
  v6 = v13[1];
  v7 = v13[2];
  v8 = v13[3];
  v9 = v13[4];
  v10 = v13[5];
  v11 = v13[6];
  v12 = v13[7];
  *a2 = v13[0];
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  a2[6] = v11;
  a2[7] = v12;
  return result;
}

double _UIHostingView.transform3D.getter@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  objc_class *v4;
  double result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  objc_super v14;

  v4 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), a1);
  v14.receiver = v2;
  v14.super_class = v4;
  objc_msgSendSuper2(&v14, sel_transform3D);
  result = *(double *)&v6;
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  a2[5] = v11;
  a2[6] = v12;
  a2[7] = v13;
  return result;
}

void @objc _UIHostingView.transform3D.setter(void *a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  __int128 v10[8];

  v3 = a3[1];
  v10[0] = *a3;
  v10[1] = v3;
  v4 = a3[3];
  v10[2] = a3[2];
  v10[3] = v4;
  v5 = a3[5];
  v10[4] = a3[4];
  v10[5] = v5;
  v6 = a3[7];
  v10[6] = a3[6];
  v10[7] = v6;
  v9 = a1;
  _UIHostingView.transform3D.setter(v10, (uint64_t)v9, v7, v8);

}

uint64_t _UIHostingView.transform3D.setter(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[7];
  uint64_t v17;
  uint64_t v18;
  objc_super v19;
  objc_super v20;
  __int128 v21;

  v14 = a1[1];
  v15 = *a1;
  v12 = a1[3];
  v13 = a1[2];
  v10 = a1[5];
  v11 = a1[4];
  v9 = a1[6];
  v5 = *((_QWORD *)a1 + 14);
  v6 = *((_QWORD *)a1 + 15);
  v7 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v20.receiver = v4;
  v20.super_class = v7;
  objc_msgSendSuper2(&v20, sel_transform3D);
  v19.receiver = v4;
  v19.super_class = v7;
  v16[0] = v15;
  v16[1] = v14;
  v16[2] = v13;
  v16[3] = v12;
  v16[4] = v11;
  v16[5] = v10;
  v16[6] = v9;
  v17 = v5;
  v18 = v6;
  objc_msgSendSuper2(&v19, sel_setTransform3D_, v16);
  return _UIHostingView.transform3D.didset((double *)&v21);
}

uint64_t _UIHostingView.transform3D.didset(double *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CATransform3D b;
  CATransform3D a;

  v2 = *v1;
  v3 = *MEMORY[0x1E0DEEDD8];
  v14 = *((_OWORD *)a1 + 1);
  v15 = *(_OWORD *)a1;
  v12 = *((_OWORD *)a1 + 3);
  v13 = *((_OWORD *)a1 + 2);
  v10 = *((_OWORD *)a1 + 5);
  v11 = *((_OWORD *)a1 + 4);
  v9 = *((_OWORD *)a1 + 6);
  v4 = a1[14];
  v5 = a1[15];
  objc_msgSend(v1, sel_transform3D);
  *(_OWORD *)&b.m11 = v15;
  *(_OWORD *)&b.m13 = v14;
  *(_OWORD *)&b.m21 = v13;
  *(_OWORD *)&b.m23 = v12;
  *(_OWORD *)&b.m31 = v11;
  *(_OWORD *)&b.m33 = v10;
  *(_OWORD *)&b.m41 = v9;
  b.m43 = v4;
  b.m44 = v5;
  result = CATransform3DEqualToTransform(&a, &b);
  if ((result & 1) == 0)
  {
    LOWORD(a.m11) = 8;
    v8 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v3 & v2) + 0x50), *(_QWORD *)((v3 & v2) + 0x58), v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v8);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

void @objc _UIHostingView.transform.setter(void *a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v7[3];

  v3 = a3[1];
  v7[0] = *a3;
  v7[1] = v3;
  v7[2] = a3[2];
  v6 = a1;
  _UIHostingView.transform.setter(v7, (uint64_t)v6, v4, v5);

}

uint64_t _UIHostingView.transform.setter(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  objc_super v14;
  objc_super v15;

  v9 = a1[1];
  v10 = *a1;
  v5 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 5);
  v7 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v15.receiver = v4;
  v15.super_class = v7;
  objc_msgSendSuper2(&v15, sel_transform);
  v14.receiver = v4;
  v14.super_class = v7;
  v11[0] = v10;
  v11[1] = v9;
  v12 = v5;
  v13 = v6;
  objc_msgSendSuper2(&v14, sel_setTransform_, v11);
  return _UIHostingView.transform.didset();
}

uint64_t _UIHostingView.transform.didset()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  objc_msgSend(v0, sel_transform);
  result = static CGAffineTransform.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v2 & v1) + 0x50), *(_QWORD *)((v2 & v1) + 0x58), v4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

uint64_t @objc _UIHostingView.clipsToBounds.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v1 = a1;
  v5 = _UIHostingView.clipsToBounds.getter((uint64_t)v1, v2, v3, v4);

  return v5 & 1;
}

id _UIHostingView.clipsToBounds.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_clipsToBounds);
}

void @objc _UIHostingView.clipsToBounds.setter(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  _UIHostingView.clipsToBounds.setter(a3, (uint64_t)v6, v4, v5);

}

id _UIHostingView.clipsToBounds.setter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  char v7;
  objc_super v9;
  objc_super v10;

  v6 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v10.receiver = v4;
  v10.super_class = v6;
  v7 = objc_msgSendSuper2(&v10, sel_clipsToBounds);
  v9.receiver = v4;
  v9.super_class = v6;
  objc_msgSendSuper2(&v9, sel_setClipsToBounds_, a1 & 1);
  return _UIHostingView.clipsToBounds.didset(v7);
}

id _UIHostingView.clipsToBounds.didset(char a1)
{
  uint64_t *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 & 1;
  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  result = objc_msgSend(v1, sel_clipsToBounds);
  if ((_DWORD)result != v2)
  {
    v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v4 & v3) + 0x50), *(_QWORD *)((v4 & v3) + 0x58), v6);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
    return (id)ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return result;
}

void @objc _UIHostingView.willBeginSnapshotSession()()
{
  _UIHostingView.willBeginSnapshotSession()();
}

void @objc _UIHostingView.didEndSnapshotSession()()
{
  _UIHostingView.didEndSnapshotSession()();
}

void @objc _UIHostingView.externalEnvironmentDidChange()(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()((uint64_t)v4, v1, v2, v3);

}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(char a1)
{
  _QWORD *v1;
  int v2;
  _QWORD *v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;

  v2 = a1 & 1;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = (char *)v1 + v3[82];
  result = swift_beginAccess();
  if (*v4 != v2)
  {
    if (*v4)
    {
      static _ProposedSize.unspecified.getter();
      v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v7 = (_QWORD *)swift_allocObject();
      v7[2] = v3[10];
      v7[3] = v3[11];
      v7[4] = v6;
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      return swift_release();
    }
    else
    {
      static _ProposedSize.unspecified.getter();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      return swift_endAccess();
    }
  }
  return result;
}

void closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(double *a1, double *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  double v23;
  double v24;
  void (*v25)(char *, uint64_t);
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;

  v6 = type metadata accessor for FloatingPointRoundingRule();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  v14 = *a2;
  v13 = a2[1];
  swift_beginAccess();
  v15 = (void *)MEMORY[0x18D760234](a3 + 16);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_traitCollection);
    objc_msgSend(v17, sel_displayScale);
    v19 = v18;

    if (v19 < 1.0)
      v20 = 1.0;
    else
      v20 = 1.0 / v19;
    v21 = *MEMORY[0x1E0DED4F0];
    v22 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
    v22(v10, v21, v6);
    v29 = v12;
    v30 = v11;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v20);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v20);
    v23 = v29;
    v24 = v30;
    v25 = *(void (**)(char *, uint64_t))(v7 + 8);
    v25(v10, v6);
    v22(v10, v21, v6);
    v29 = v13;
    v30 = v14;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v20);
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v20);
    v26 = v29;
    v27 = v30;
    v25(v10, v6);
    if (v24 != v27 || v23 != v26)
      objc_msgSend(v16, sel_invalidateIntrinsicContentSize);

  }
}

uint64_t closure #1 in _UIHostingView.safeAreaInsets.getter()
{
  GraphHost.environment.getter();
  EnvironmentValues.layoutDirection.getter();
  swift_release();
  return swift_release();
}

void closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x18D760234](v5);
  if (v6)
  {
    v8 = (void *)v6;
    v9 = type metadata accessor for _UIHostingView(0, a2, a3, v7);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  }
}

void @objc _UIHostingView.accessibilityFocusedElementDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  _UIHostingView.accessibilityFocusedElementDidChange(_:)(v4);

}

void @objc _UIHostingView.clarityUISettingDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = a3;
  v8 = a1;
  _UIHostingView.sceneDidUpdateSystemUserInterfaceStyle()(2, v5, v6, v7);

}

Class @objc _UIHostingView.accessibilityElements.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.accessibilityElements.getter(a1, a2, 6);
}

Swift::Int __swiftcall _UIHostingView.accessibilityElementCount()()
{
  unint64_t v0;
  Swift::Int v1;

  v0 = _UIHostingView.uiKitAccessibilityElements(options:)(4);
  if (v0 >> 62)
    v1 = _CocoaArrayWrapper.endIndex.getter();
  else
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Int @objc _UIHostingView.accessibilityElementCount()(void *a1)
{
  id v1;
  Swift::Int v2;

  v1 = a1;
  v2 = _UIHostingView.accessibilityElementCount()();

  return v2;
}

uint64_t @objc _UIHostingView.accessibilityShouldEnumerateContainerElementsArrayDirectly()()
{
  return 1;
}

Class @objc _UIHostingView.automationElements.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.accessibilityElements.getter(a1, a2, 1);
}

Class @objc _UIHostingView.accessibilityElements.getter(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  char *v5;
  NSArray v6;

  v4 = a1;
  v5 = _UIHostingView.accessibilityElements.getter(a3);

  if (v5)
  {
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

char *_UIHostingView.accessibilityElements.getter(uint64_t a1)
{
  unint64_t v1;
  char *v2;

  v1 = _UIHostingView.uiKitAccessibilityElements(options:)(a1);
  v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t @objc _UIHostingView._accessibilityAutomationHitTestReverseOrder()()
{
  return 1;
}

uint64_t @objc _UIHostingView._accessibilityIsSwiftUIHostingView()()
{
  return 1;
}

uint64_t @objc _UIHostingView._accessibilityIsSwiftUIHostingCellView.getter()
{
  return 0;
}

void @objc _UIHostingView.accessibilityReinstantiateIfNeeded()(void *a1)
{
  id v1;

  v1 = a1;
  _UIHostingView.accessibilityReinstantiateIfNeeded()();

}

uint64_t _UIHostingView.forEachIdentifiedView(body:)(void (*a1)(_BYTE *), uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[168];

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7 = (_QWORD *)swift_allocObject();
  v8 = *(_QWORD *)(v5 + 80);
  v7[2] = v8;
  v9 = *(_QWORD *)(v5 + 88);
  v7[3] = v9;
  v7[4] = v6;
  v11 = type metadata accessor for _UIHostingView(0, v8, v9, v10);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v11);
  ViewRendererHost.preferenceValue<A>(_:)();
  swift_retain();
  specialized _IdentifiedViewTree.forEach(_:)((uint64_t)v13, (uint64_t)partial apply for closure #1 in _UIHostingView.forEachIdentifiedView(body:), (uint64_t)v7, a1, a2);
  swift_release();
  outlined destroy of _IdentifiedViewTree((uint64_t)v13);
  return swift_release();
}

void closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x18D760234](v3);
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  if (v4)
  {
    v9 = v4;
    objc_msgSend(v4, sel_convertRect_fromView_, 0, *a1, a1[1], a1[2], a1[3]);
    v5 = v10;
    v6 = v11;
    v7 = v12;
    v8 = v13;

  }
  *a1 = v5;
  *((_QWORD *)a1 + 1) = v6;
  *((_QWORD *)a1 + 2) = v7;
  *((_QWORD *)a1 + 3) = v8;
}

void _UIHostingView.forEachDescendantHost(body:)(void (*a1)(void *, uint64_t), uint64_t a2)
{
  void *v2;

  specialized UIView.forEachDescendant(_:)(v2, a1, a2);
}

uint64_t _UIHostingView._viewDebugData()()
{
  return ViewGraph.viewDebugData()();
}

uint64_t @objc _UIHostingView.canBecomeFirstResponder.getter(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = _UIHostingView.canBecomeFirstResponder.getter();

  return v2 & 1;
}

uint64_t _UIHostingView.canBecomeFirstResponder.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_retain();
  v0 = FocusBridge.host.getter();
  if (v0)
  {
    v1 = (void *)v0;
    if ((FocusBridge.canAcceptFocus.getter() & 1) != 0)
    {
      swift_getObjectType();
      v2 = ViewRendererHost.responderNode.getter();
      if (v2)
      {
        MEMORY[0x1E0C80A78](v2, v3);
        MEMORY[0x1E0C80A78](v4, v5);
        dispatch thunk of ResponderNode.visit(applying:)();
        swift_release();
        swift_release();

        return 0;
      }
    }
    swift_release();

  }
  else
  {
    swift_release();
  }
  return 0;
}

Swift::Void __swiftcall _UIHostingView._didChange(toFirstResponder:)(UIResponder_optional *toFirstResponder)
{
  uint64_t v1;
  _QWORD *v2;
  objc_class *v4;
  uint64_t v5;
  objc_super v6;

  v4 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  v6.receiver = v2;
  v6.super_class = v4;
  -[UIResponder_optional _didChangeToFirstResponder:](&v6, sel__didChangeToFirstResponder_, toFirstResponder);
  swift_retain();
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  v5 = ViewRendererHost.responderNode.getter();
  FocusBridge.firstResponderDidChange(to:rootResponder:)(toFirstResponder, v5);
  swift_release();
  swift_release();
}

void @objc _UIHostingView._didChange(toFirstResponder:)(void *a1, uint64_t a2, UIResponder_optional *a3)
{
  UIResponder_optional *v5;
  id v6;

  v5 = a3;
  v6 = a1;
  _UIHostingView._didChange(toFirstResponder:)(a3);

}

uint64_t @objc _UIHostingView._swiftuiReturnsSubviewsInFocusItemsInRect()()
{
  return 1;
}

void _UIHostingView.focusItems(in:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v14;
  objc_class *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  unint64_t v24;
  objc_super v25;

  v9 = v8;
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v15 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x58), a8);
  v25.receiver = v8;
  v25.super_class = v15;
  v16 = objc_msgSendSuper2(&v25, sel_focusItemsInRect_, a1, a2, a3, a4);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v24 = MEMORY[0x1E0DEE9D8];
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x1E0DEE9D8];
    goto LABEL_15;
  }
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v18)
    goto LABEL_14;
LABEL_3:
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v18; ++i)
  {
    if ((v17 & 0xC000000000000001) != 0)
      MEMORY[0x18D75E3BC](i, v17);
    else
      swift_unknownObjectRetain();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  v20 = v24;
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_15:
  v21 = (void *)MEMORY[0x18D760234]((char *)v9 + *(_QWORD *)((*v14 & *v9) + 0x130));
  if (!v21
    || (v22 = v21,
        v23 = objc_msgSend(v21, sel__shouldIgnoreChildFocusRegions),
        v22,
        (v23 & 1) == 0))
  {
    UIKitContainerFocusItem.childFocusItems(in:)((uint64_t)v15, (uint64_t)&protocol witness table for _UIHostingView<A>, a1, a2, a3, a4);
    specialized Array.append<A>(contentsOf:)(v20);
  }
}

Class @objc _UIHostingView.focusItems(in:)(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;

  v9 = a1;
  _UIHostingView.focusItems(in:)(a2, a3, a4, a5, (uint64_t)v9, v10, v11, v12);

  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t static _UIHostingView._supportsInvalidatingFocusCache()()
{
  return 1;
}

Class @objc _UIHostingView.preferredFocusEnvironments.getter(void *a1, uint64_t a2)
{
  return @objc ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter(a1, a2, (void (*)(void))_UIHostingView.preferredFocusEnvironments.getter, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
}

void @objc _UIHostingView.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized _UIHostingView.didUpdateFocus(in:with:)(v6);

}

void @objc _UIHostingView.keyboardWillShow(notification:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  _UIHostingView.keyboardWillShow(notification:)((NSNotification)v4);

}

void @objc _UIHostingView.keyboardWillHide(notification:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  _UIHostingView.keyboardWillHide(notification:)((NSNotification)v4);

}

uint64_t _UIHostingView.addsKeyboardToSafeAreaInsets.getter()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108);
  swift_beginAccess();
  return (*v1 >> 1) & 1;
}

uint64_t _UIHostingView.addsKeyboardToSafeAreaInsets.setter(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x108));
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v3 = *v2 | 2;
  }
  else
  {
    swift_beginAccess();
    v3 = *v2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return _UIHostingView.safeAreaRegions.setter(v3);
}

void (*_UIHostingView.addsKeyboardToSafeAreaInsets.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  _QWORD *v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x108);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = (*v4 & 2) != 0;
  return _UIHostingView.addsKeyboardToSafeAreaInsets.modify;
}

void _UIHostingView.addsKeyboardToSafeAreaInsets.modify(uint64_t a1, uint64_t a2)
{
  _UIHostingView.accessibilityEnabled.modify(a1, a2, (void (*)(_QWORD))_UIHostingView.addsKeyboardToSafeAreaInsets.setter);
}

void _UIHostingView.accessibilityEnabled.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(_QWORD *)a1 + 32));
  free(v3);
}

uint64_t closure #1 in _UIHostingView.makeViewDebugData()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  ViewGraph.viewDebugData()();
  v2 = static _ViewDebug.serializedData(_:)();
  v4 = v3;
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

Class @objc _UIHostingView.makeViewDebugData()(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Class isa;

  v1 = a1;
  v2 = _UIHostingView.makeViewDebugData()();
  v4 = v3;

  if (v4 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v2, v4);
  }
  return isa;
}

Swift::Void __swiftcall _UIHostingView.swiftui_insertRenderedSubview(_:at:)(UIView *_, Swift::Int at)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *((_BYTE *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0)) = 1;
  objc_msgSend(v2, sel_insertSubview_atIndex_, _, at);
  *((_BYTE *)v2 + *(_QWORD *)((*v3 & *v2) + 0x2A0)) = 0;
}

void @objc _UIHostingView.swiftui_insertRenderedSubview(_:at:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  UIView *v6;
  id v7;

  v6 = a3;
  v7 = a1;
  _UIHostingView.swiftui_insertRenderedSubview(_:at:)(v6, a4);

}

Swift::Void __swiftcall _UIHostingView.didAddSubview(_:)(UIView *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  objc_class *v5;
  id v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  UIView *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  objc_super v18;

  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  v18.receiver = v2;
  v18.super_class = v5;
  -[UIView didAddSubview:](&v18, sel_didAddSubview_, a1);
  if ((*((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x2A0)) & 1) != 0)
    return;
  v6 = _UIHostingView.foreignSubviews.getter();
  objc_msgSend(v6, sel_addObject_, a1);

  static Semantics.v7.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    return;
  v7 = 0xD000000000000018;
  if (_SwiftUIIsAppleInternalBuild())
  {
    v8 = (void *)MEMORY[0x18D760234]((char *)v2 + *(_QWORD *)((*v4 & *v2) + 0x130));
    if (!v8)
    {
      v9 = 0xEE0077656956676ELL;
      v7 = 0x6974736F4849555FLL;
      goto LABEL_7;
    }

  }
  v9 = 0x8000000187BEE9B0;
LABEL_7:
  v10 = static os_log_type_t.fault.getter();
  v11 = static Log.runtimeIssuesLog.getter();
  swift_bridgeObjectRetain();
  if (os_log_type_enabled(v11, v10))
  {
    swift_bridgeObjectRetain_n();
    v12 = a1;
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v17 = v14;
    *(_DWORD *)v13 = 136315650;
    swift_getObjectType();
    v15 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_186E48000, v11, v10, "Adding '%s' as a subview of %s is not supported and may result in a broken view hierarchy. Add your view above %s in a common superview or insert it into your SwiftUI content in a UIViewRepresentable instead.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v14, -1, -1);
    MEMORY[0x18D760108](v13, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

}

void @objc _UIHostingView.didAddSubview(_:)(void *a1, uint64_t a2, void *a3)
{
  UIView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  _UIHostingView.didAddSubview(_:)(v4);

}

Swift::Void __swiftcall _UIHostingView.willRemoveSubview(_:)(UIView *a1)
{
  uint64_t v1;
  _QWORD *v2;
  objc_class *v4;
  id v5;
  objc_super v6;

  v4 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  v6.receiver = v2;
  v6.super_class = v4;
  -[UIView willRemoveSubview:](&v6, sel_willRemoveSubview_, a1);
  v5 = _UIHostingView.foreignSubviews.getter();
  objc_msgSend(v5, sel_removeObject_, a1);

}

void @objc _UIHostingView.willRemoveSubview(_:)(void *a1, uint64_t a2, void *a3)
{
  UIView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  _UIHostingView.willRemoveSubview(_:)(v4);

}

void __swiftcall _UIHostingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  _QWORD *v3;
  Class isa;
  double y;
  double x;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  objc_class *v25;
  unsigned __int8 v26;
  _QWORD *v27;
  objc_class *v28;
  id v29;
  objc_super v30;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = *MEMORY[0x1E0DEEDD8] & *v3;
  _UIHostingView.printHitTestIfNeeded(at:with:)(with.value.super.isa, _.x, _.y);
  v10 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88), v9);
  v30.receiver = v3;
  v30.super_class = v10;
  v11 = -[UIView_optional hitTest:withEvent:](&v30, sel_hitTest_withEvent_, isa, x, y);
  if ((MEMORY[0x18D75A3D8]() & 1) != 0)
  {
    v12 = (id)_UICurrentHitTestContext();
    if (v12)
    {

    }
    else if ((static CoreTesting.isRunning.getter() & 1) == 0)
    {
      return;
    }
    if (v11)
    {
      v28 = isa;
      v29 = v11;
      v13 = v11;
      v14 = _UIHostingView.foreignSubviews.getter();
      v15 = objc_msgSend(v14, sel_allObjects);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v16 >> 62)
        goto LABEL_24;
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (v17)
      {
        v18 = 4;
        while (1)
        {
          v19 = (v16 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18D75E3BC](v18 - 4, v16)
              : *(id *)(v16 + 8 * v18);
          v20 = v19;
          v21 = v18 - 3;
          if (__OFADD__(v18 - 4, 1))
            break;
          v22 = objc_msgSend(v13, sel_isDescendantOfView_, v19);

          if (v22)
          {

            swift_bridgeObjectRelease();
            return;
          }
          ++v18;
          if (v21 == v17)
            goto LABEL_15;
        }
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_15:

      swift_bridgeObjectRelease();
      isa = v28;
      v11 = v29;
      v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    }
    v23 = *(_QWORD *)((*v7 & *v3) + 0x138);
    v24 = *(void **)((char *)v3 + v23);
    *(_QWORD *)((char *)v3 + v23) = isa;
    v25 = isa;

    if ((UIViewIgnoresTouchEvents() & 1) != 0)
    {

    }
    else
    {
      v26 = objc_msgSend(v3, sel_pointInside_withEvent_, v25, x, y);

      if ((v26 & 1) != 0)
        v27 = v3;
    }
  }
}

id @objc _UIHostingView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  _UIHostingView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

void _UIHostingView._hitTest(with:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = v1;
  v4 = *v1;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8];
  if ((MEMORY[0x18D75A3D8]() & 1) == 0)
  {
    v21 = *(_QWORD *)((*v5 & *v1) + 0x138);
    v22 = *(void **)((char *)v1 + v21);
    *(_QWORD *)((char *)v1 + v21) = 0;

    return;
  }
  MEMORY[0x18D75B908]();
  _UIHostingView.updateTransformWithoutGeometryObservation()();
  if (a1)
  {
    objc_msgSend(a1, sel_point);
    v8 = v7;
    v10 = v9;
    objc_msgSend(a1, sel_radius);
    v12 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((v6 & v4) + 0x50), *(_QWORD *)((v6 & v4) + 0x58), v11);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v12);
    if (!ViewRendererHost.responderNode.getter())
      goto LABEL_37;
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      v36 = 0;
      v13 = ViewResponder.hitTest(globalPoint:radius:options:)();
      swift_release();
      if (!v13)
        goto LABEL_37;
      v14 = static ViewResponder.hitTestKey.getter();
      type metadata accessor for UIViewResponder();
      v15 = swift_dynamicCastClass();
      if (v15)
      {
        v16 = v15;
        v17 = MEMORY[0x18D760234](v15 + 40);
        if (v17)
        {
          v18 = (void *)v17;
          swift_retain();
          v19 = closure #1 in _UIHostingView._hitTest(with:)(v16, v14, v18, v2, v8, v10);
          if (v19)
          {
            v20 = v19;
            if (!objc_msgSend(v20, sel__hitTestWithContext_, a1))
              v20;
            _eventDebugTriggers.getter();

            goto LABEL_19;
          }

          swift_release_n();
LABEL_37:
          static Update.end()();
          v31 = *(_QWORD *)((*v5 & *v2) + 0x138);
          v32 = *(void **)((char *)v2 + v31);
          *(_QWORD *)((char *)v2 + v31) = 0;

          v33 = v2;
          return;
        }
      }
      if (swift_conformsToProtocol2())
        v23 = v13;
      else
        v23 = 0;
      if (v23)
      {
        swift_retain();
        if (dispatch thunk of ViewResponder.gestureContainer.getter())
        {
          swift_unknownObjectRetain();
          _eventDebugTriggers.getter();
          swift_unknownObjectRelease();
LABEL_19:
          swift_release_n();
LABEL_38:
          static Update.end()();
          v34 = *(_QWORD *)((*v5 & *v2) + 0x138);
          v35 = *(void **)((char *)v2 + v34);
          *(_QWORD *)((char *)v2 + v34) = 0;

          return;
        }
        swift_release();
      }
      swift_retain();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        while (1)
        {
          v24 = dispatch thunk of ViewResponder.gestureContainer.getter();
          if (v24)
            break;
          v25 = swift_dynamicCastClass();
          if (v25)
          {
            v24 = MEMORY[0x18D760234](v25 + 48);
            if (v24)
              break;
          }
          swift_release();
          swift_beginAccess();
          if (!swift_weakLoadStrong())
            goto LABEL_29;
        }
        v26 = (_QWORD *)v24;
        swift_release();
        goto LABEL_31;
      }
LABEL_29:
      swift_beginAccess();
      if (MEMORY[0x18D760234](v13 + 16))
      {
        v27 = *(_QWORD *)(v13 + 24);
        ObjectType = swift_getObjectType();
        v29 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16))(&v37, v29, v29, ObjectType, v27);
        swift_unknownObjectRelease();
        v26 = v37;
        if (v37)
        {
LABEL_31:
          swift_release();
          swift_getObjectType();
          if (v26 != v2)
          {
            _eventDebugTriggers.getter();
            if ((v37 & 0x20) != 0)
            {
              v30 = v26;
              specialized printGestureContainerAncestors(_:)();

            }
            swift_release();
            goto LABEL_38;
          }

          goto LABEL_36;
        }
      }
      swift_release();
    }
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  __break(1u);
}

id closure #1 in _UIHostingView._hitTest(with:)(uint64_t a1, int a2, void *a3, _QWORD *a4, double a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[40];
  _DWORD v15[6];
  uint64_t v16;

  v11 = a1 + 152;
  swift_beginAccess();
  outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?(v11, (uint64_t)v14);
  if (v14[32] == 1)
  {
    outlined destroy of AccessibilityTableContext?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult);
LABEL_6:
    objc_msgSend(a3, sel_convertPoint_fromView_, 0, a5, a6);
    return objc_msgSend(a3, sel_hitTest_withEvent_, *(_QWORD *)((char *)a4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a4) + 0x138)));
  }
  outlined init with take of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v14, (uint64_t)v15);
  if (v15[0] != a2)
  {
    outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v15);
    goto LABEL_6;
  }
  v12 = MEMORY[0x18D760234](&v16);
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v15);
  return (id)v12;
}

id @objc _UIHostingView._hitTest(with:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a1;
  _UIHostingView._hitTest(with:)(a3);
  v8 = v7;

  return v8;
}

Class @objc _UIHostingView._childContainers.getter(void *a1, uint64_t a2)
{
  return @objc ClarityUIApplicationSceneSpecification.initialSettingsDiffActions.getter(a1, a2, (void (*)(void))_UIHostingView._childContainers.getter, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
}

uint64_t _UIHostingView._childContainers.getter()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  objc_class *v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v12;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = MEMORY[0x18D75A3D8]();
  v4 = (objc_class *)type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  if ((v2 & 1) == 0)
  {
    v12.receiver = v0;
    v12.super_class = v4;
    v6 = objc_msgSendSuper2(&v12, sel__childGestureRecognizerContainers);
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v5;
  }
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  if (ViewRendererHost.responderNode.getter())
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
      v5 = ViewResponder.childGestureContainers.getter();
    else
      v5 = MEMORY[0x1E0DEE9D8];
    swift_release();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9D8];
  }
  if (!(v5 >> 62))
  {
    v7 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    if (swift_dynamicCastMetatype() || (v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_11:
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = v7 + 32;
      while (swift_dynamicCastObjCProtocolConditional())
      {
        v10 += 8;
        if (!--v9)
          goto LABEL_11;
      }
      swift_bridgeObjectRelease();
      return v7 | 1;
    }
    return v5;
  }
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
  swift_bridgeObjectRetain();
  v11 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();
  return v11;
}

uint64_t @objc _UIHostingView._intelligenceBaseClass.getter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _UIHostingView._intelligenceBaseClass.getter(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), a3, a4);
  return swift_getObjCClassFromMetadata();
}

void @objc _UIHostingView._intelligenceCollectContent(in:collector:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;

  v5 = type metadata accessor for IntelligenceElement.Content();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3;
  v11 = a1;
  UIIntelligenceElementCollector.createRemoteContext()();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0DC16C8], v5);
  UIIntelligenceElementCollector.collect(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

}

uint64_t _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;

  v14 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0x58), a8);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v14);
  return IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(a2, a3, a4, a5, a1, v14, (uint64_t)&protocol witness table for UIView, v15);
}

void @objc _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, void *a7)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v12 = a7;
  v15 = a1;
  _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)((uint64_t)v12, a2, a3, a4, a5, (uint64_t)v15, v13, v14);

}

id _UIHostingView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void _UIHostingView.init(frame:)()
{
  specialized _UIHostingView.init(frame:)();
}

void @objc _UIHostingView.init(frame:)()
{
  specialized _UIHostingView.init(frame:)();
}

Swift::Void __swiftcall _UIHostingView.setTestSize(_:)(CGSize a1)
{
  _QWORD *v1;
  double height;
  double width;
  double v4;
  double v5;
  void *v7;
  id v8;
  double v9;
  double v10;
  double v11;
  id v12;
  id v13;
  double v15;
  double v16;
  _QWORD *v18;

  height = a1.height;
  width = a1.width;
  static CGSize.deviceSize.getter();
  if (v5 == width && v4 == height)
  {
    v7 = (void *)objc_opt_self();
    v8 = objc_msgSend(v7, sel_currentDevice);
    specialized UIDevice.screenSize.getter();
    width = v9;
    v11 = v10;

    v12 = objc_msgSend(v7, sel_currentDevice);
    v13 = objc_msgSend(v12, sel_userInterfaceIdiom);

    if (v13 == (id)1 && width < v11)
    {
      height = width;
      width = v11;
    }
    else
    {
      height = v11;
      if (!v13)
      {
        height = v11 >= width ? v11 : width;
        if (v11 < width)
          width = v11;
      }
    }
  }
  objc_msgSend(v1, sel_bounds);
  if (v16 != width || v15 != height)
  {
    v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    *((_BYTE *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC8)) = 1;
    objc_msgSend(v1, sel_setBounds_);
    *((_BYTE *)v1 + *(_QWORD *)((*v18 & *v1) + 0xC8)) = 0;
  }
}

double _UIHostingView.testSize.getter()
{
  void *v0;
  double v1;

  objc_msgSend(v0, sel_bounds);
  return v1;
}

uint64_t _UIHostingView.attributeCountInfo.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  return ViewRendererHost.preferenceValue<A>(_:)();
}

id _UIHostingView.setTestSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD v6[4];
  char v7;

  *(double *)v6 = a1;
  *(double *)&v6[1] = a2;
  *(double *)&v6[2] = a3;
  *(double *)&v6[3] = a4;
  v7 = 0;
  outlined init with take of EdgeInsets?((uint64_t)v6, (uint64_t)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0xD8));
  return objc_msgSend(v4, sel_safeAreaInsetsDidChange);
}

Swift::Void __swiftcall _UIHostingView._renderForTest(interval:)(Swift::Double interval)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  *((_BYTE *)v2 + *(_QWORD *)((*v4 & *v2) + 0x158)) = 0;
  v8 = 16;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
  v6 = (void *)objc_opt_self();
  swift_beginAccess();
  while (!__OFSUB__(v8, 1))
  {
    --v8;
    static CoreTesting.needsRender.setter();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    ViewGraphDelegate.updateGraph<A>(body:)();
    static NSRunLoop.flushObservers()();
    LOBYTE(v7) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    objc_msgSend(v6, sel_flush, 0, v7);
    if (!specialized shouldContinue #1 <A>() in _UIHostingView._renderForTest(interval:)(v2, &v8))
    {
      static CoreTesting.needsRender.setter();
      *((_BYTE *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x158)) = 1;
      return;
    }
  }
  __break(1u);
}

BOOL specialized shouldContinue #1 <A>() in _UIHostingView._renderForTest(interval:)(_QWORD *a1, _QWORD *a2)
{
  _WORD *v3;

  v3 = (_WORD *)((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x88));
  swift_beginAccess();
  if (!*v3 && (static CoreTesting.needsRender.getter() & 1) == 0)
    return 0;
  swift_beginAccess();
  return *a2 >= 0;
}

Swift::Bool __swiftcall _UIHostingView._renderAsyncForTest(interval:)(Swift::Double interval)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = v2;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  *((_BYTE *)v2 + *(_QWORD *)((*v5 & *v2) + 0x158)) = 0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
  v7 = 1;
  while (1)
  {
    v9 = static NSRunLoop.flushObservers()();
    MEMORY[0x1E0C80A78](v9, v10);
    static Update.locked<A>(_:)();
    if (v12 != 1)
      break;
    objc_msgSend((id)objc_opt_self(), sel_flush);
    if ((v7 & 1) != 0)
      v7 = ViewGraph.updateRequiredMainThread.getter() ^ 1;
    else
      v7 = 0;
    v8 = (_WORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88));
    swift_beginAccess();
    if (!*v8)
      goto LABEL_8;
  }
  v7 = 0;
LABEL_8:
  *((_BYTE *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x158)) = 1;
  return v7 & 1;
}

uint64_t closure #1 in _UIHostingView._renderAsyncForTest(interval:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x58), a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  result = ViewRendererHost.renderAsync(interval:targetTimestamp:)();
  *a3 = (v6 & 1) == 0;
  return result;
}

uint64_t _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v17;
  _QWORD *v18;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v6);
  v9 = v8[71];
  if (*(_QWORD *)((char *)v6 + v9))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ScrollTest();
    result = swift_allocObject();
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_QWORD *)(result + 88) = 0;
    *(double *)(result + 16) = a4;
    *(_QWORD *)(result + 24) = a1;
    *(double *)(result + 32) = a5;
    *(double *)(result + 40) = a6;
    *(_BYTE *)(result + 48) = 1;
    *(_QWORD *)((char *)v6 + v9) = result;
    if (*(_QWORD *)((char *)v6 + *(_QWORD *)((*v7 & *v6) + 0x238)))
    {
      v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v18 = (_QWORD *)swift_allocObject();
      v18[2] = v8[10];
      v18[3] = v8[11];
      v18[4] = a2;
      v18[5] = a3;
      v18[6] = v17;
      swift_retain();
      outlined copy of AppIntentExecutor?(a2);
      swift_retain();
      ScrollTest.run<A>(in:completion:)((uint64_t)v6, (uint64_t (*)(uint64_t))partial apply for closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:));
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

_QWORD *closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;

  v3 = a3 + 16;
  if (a1)
    a1();
  swift_beginAccess();
  result = (_QWORD *)MEMORY[0x18D760234](v3);
  if (result)
  {
    *(_QWORD *)((char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x238)) = 0;

    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t _UIHostingView.viewCacheIsEmpty.getter()
{
  unsigned __int8 v1;

  static Update.locked<A>(_:)();
  return v1;
}

uint64_t _UIHostingView.hasActivePresentation.getter()
{
  _QWORD *v0;
  uint64_t result;
  void *v2;
  id v3;

  result = MEMORY[0x18D760234]((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130));
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, sel_presentedViewController);

    if (v3)
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.dismissActivePresentations()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  _QWORD v7[6];

  v1 = (void *)objc_opt_self();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in _UIHostingView.dismissActivePresentations();
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_31_0;
  v4 = _Block_copy(v7);
  v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel__performWithoutDeferringTransitions_, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

void closure #1 in _UIHostingView.dismissActivePresentations()(_QWORD *a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)MEMORY[0x18D760234]((char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x130));
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_presentedViewController);

    if (v3)
    {
      objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 0, 0);

    }
  }
}

void protocol witness for TestHost.sendTestEvents(_:) in conformance _UIHostingView<A1>(Swift::OpaquePointer a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>);
  ViewRendererHost.sendTestEvents(_:)(a1);
}

void protocol witness for TestHost.resetTestEvents() in conformance _UIHostingView<A1>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a1);
  ViewRendererHost.resetTestEvents()();
}

uint64_t (*protocol witness for TestHost.environmentOverride.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.environmentOverride.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for TestHost.isHiddenForReuse.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.isHiddenForReuse.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for TestHost.invalidateProperties(_:mayDeferUpdate:) in conformance _UIHostingView<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, a3);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*protocol witness for TestHost.accessibilityEnabled.modify in conformance _UIHostingView<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.accessibilityEnabled.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_2(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:)()
{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for DropDelegate?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for CGSize(0);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for BridgedListState(0);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E0CE2780], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for WeakBox<UIView>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for [SceneID : KeyboardShortcut]();
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [SceneList.Item.Summary], (uint64_t)&type metadata for SceneList.Item.Summary, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  return static External._update(_:attribute:)();
}

{
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  return static External._update(_:attribute:)();
}

{
  type metadata accessor for HostingScrollView();
  return static External._update(_:attribute:)();
}

id specialized closure #1 in sequence<A>(first:next:)(uint64_t a1, void (*a2)(id *__return_ptr, id *))
{
  id v3;
  id v4;
  id v6;
  id v7;
  id v9;
  id v10;

  v3 = *(id *)a1;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    *(_BYTE *)(a1 + 8) = 0;
    v4 = v3;
  }
  else if (v3)
  {
    v9 = *(id *)a1;
    v6 = v3;
    a2(&v10, &v9);

    v3 = v10;
    v7 = v10;

    *(_QWORD *)a1 = v3;
  }
  return v3;
}

uint64_t specialized _UIHostingView.displayLink.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148));
}

uint64_t specialized _UIHostingView.updateTimer.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178));
}

uint64_t specialized _UIHostingView.viewGraph.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68));
}

void specialized _UIHostingView.init(rootView:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  swift_getObjectType();
  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  v3 = v0;
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v0 + v2) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x90)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x98)) = 0;
  v4 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xA0);
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xA8)) = 0;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xB0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xB8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xC0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xC8)) = 1;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xD0)) = 0;
  v5 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xD8);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v6 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xE0);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xE8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0xF0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0xF8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x100)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x108)) = -1;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x138)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x148)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x150)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x158)) = 1;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x160)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x168)) = 0;
  v7 = (char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x170);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v1 & *v3) + 0x178)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v1 & *v3) + 0x180)) = 2;
  type metadata accessor for DeprecatedAlertBridge();
}

unint64_t lazy protocol witness table accessor for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory;
  if (!lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitResponderEventBindingBridge.Factory, &type metadata for UIKitResponderEventBindingBridge.Factory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory;
  if (!lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitGestureContainerFactory, &type metadata for UIKitGestureContainerFactory);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory);
  }
  return result;
}

void partial apply for closure #1 in _UIHostingView.modifyViewInputs(_:)()
{
  uint64_t v0;

  closure #1 in _UIHostingView.modifyViewInputs(_:)(*(_QWORD **)(v0 + 16), *(id *)(v0 + 24));
}

void type metadata accessor for External<WeakBox<UIView>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for External<WeakBox<UIView>>)
  {
    type metadata accessor for WeakBox<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE77D8]);
    v0 = type metadata accessor for External();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<WeakBox<UIView>>);
  }
}

unint64_t lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput;
  if (!lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitHostContainerFocusItemInput, &type metadata for UIKitHostContainerFocusItemInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput;
  if (!lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitHostContainerFocusItemInput, &type metadata for UIKitHostContainerFocusItemInput);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput);
  }
  return result;
}

uint64_t sub_187A82DFC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  uint64_t *v0;

  closure #6 in _UIHostingView.updateEnvironment()(v0[4], v0[2], v0[3], _UIHostingView.updateRootView());
}

void specialized _UIHostingView.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for _UIHostingView(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  specialized _UIHostingView.init(rootView:)();
}

void specialized _UIHostingView.viewController.setter()
{
  swift_unknownObjectWeakAssign();
  _UIHostingView.updateBackgroundColor()();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  objc_class *v4;
  id v5;
  objc_class *v6;
  id v7;
  objc_super v8;
  objc_super v9;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = swift_unknownObjectWeakAssign();
  v3 = (void *)MEMORY[0x18D760234](v2);

  if (v3)
  {
    if (*(_DWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0xD0)))
    {
      type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      v9.receiver = v0;
      v9.super_class = v4;
      objc_msgSendSuper2(&v9, sel_setBackgroundColor_, 0);
    }
    else
    {
      v5 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
      if ((*((_BYTE *)v0 + *(_QWORD *)((*v1 & *v0) + 0xC0)) & 1) != 0)
      {

      }
      else
      {
        v7 = v5;
        type metadata accessor for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
        v8.receiver = v0;
        v8.super_class = v6;
        objc_msgSendSuper2(&v8, sel_setBackgroundColor_, v7);

      }
    }
  }
}

uint64_t specialized _UIHostingView.rootView.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v11[8];

  v2 = *MEMORY[0x1E0DEEDD8] & *v1;
  v3 = *(_QWORD *)(v2 + 0x50);
  v4 = MEMORY[0x1E0C80A78](a1, a1);
  v6 = (char *)v11 - v5;
  (*(void (**)(char *, double))(v7 + 16))((char *)v11 - v5, v4);
  CoreCoordinator.dataSource.setter((uint64_t)v6);
  v11[7] = 1;
  v9 = type metadata accessor for _UIHostingView(0, v3, *(_QWORD *)(v2 + 88), v8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v9);
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t partial apply for closure #1 in _UIHostingView.makeViewDebugData()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _UIHostingView.makeViewDebugData()(a1);
}

uint64_t specialized _UIHostingView.traitCollectionOverride.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128));
}

uint64_t specialized _UIHostingView.currentEvent.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138));
}

uint64_t specialized _UIHostingView.eventBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140));
}

uint64_t specialized _UIHostingView.statusBarBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8));
}

uint64_t specialized _UIHostingView.focusBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0));
}

uint64_t specialized _UIHostingView.inspectorBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0));
}

uint64_t specialized _UIHostingView.tooltipBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8));
}

uint64_t specialized _UIHostingView.editMenuBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0));
}

uint64_t specialized _UIHostingView.sharingActivityPickerBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8));
}

uint64_t specialized _UIHostingView.shareConfigurationBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0));
}

uint64_t specialized _UIHostingView.scenePresentationBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8));
}

uint64_t specialized _UIHostingView.avkitCaptureButtonBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0));
}

uint64_t specialized _UIHostingView.pencilEventsBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8));
}

uint64_t specialized _UIHostingView.pointerBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200));
}

uint64_t specialized _UIHostingView.contextMenuBridge.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210));
}

uint64_t specialized _UIHostingView.delegate.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)((char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x240) + 8) = a2;
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized _UIHostingView.eventBindingManager.getter()
{
  _QWORD *v0;

  return *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78));
}

void specialized _UIHostingView.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70);
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(_QWORD *)((char *)v0 + v3) = DisplayList.ViewRenderer.init(platform:)();
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x80)) = 0;
  static ViewRendererHostProperties.all.getter();
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x90)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x98)) = 0;
  v4 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0xA0);
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xA8)) = 0;
  *(_DWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0xB0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xB8)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xC0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xC8)) = 1;
  *(_DWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0xD0)) = 0;
  v5 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0xD8);
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  v5[32] = 1;
  v6 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0xE0);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  *(_DWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0xE8)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0xF0)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0xF8)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x100)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x108)) = -1;
  *(_OWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x110)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x118)) = xmmword_187BFE310;
  *(_OWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x120)) = xmmword_187BFE310;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x128)) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x138)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x148)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x150)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x158)) = 1;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x160)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x168)) = 0;
  v7 = (char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x170);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v2 & *v0) + 0x178)) = 0;
  *((_BYTE *)v0 + *(_QWORD *)((*v2 & *v0) + 0x180)) = 2;
  type metadata accessor for DeprecatedAlertBridge();
}

void sub_187A8358C()
{
  DeprecatedAlertBridge.__allocating_init(style:)(1);
}

void sub_187A83598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + v2) = a1;
  type metadata accessor for DeprecatedAlertBridge();
}

void sub_187A835D0()
{
  DeprecatedAlertBridge.__allocating_init(style:)(0);
}

void sub_187A835DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;

  *(_QWORD *)((char *)v1 + v2) = a1;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x198)) = v6;
  v7 = *(_QWORD *)((*v5 & *v1) + 0x1A0);
  type metadata accessor for FocusBridge();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  swift_unknownObjectWeakInit();
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = v10;
  EnvironmentValues.init()();
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 136) = v6;
  *(_DWORD *)(v8 + 144) = 0;
  swift_weakInit();
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_WORD *)(v8 + 176) = v6;
  *(_QWORD *)((char *)v1 + v7) = v8;
  v11 = *(_QWORD *)((*v5 & *v1) + 0x1A8);
  type metadata accessor for DragAndDropBridge(0, v3, v4, v12);
  *(_QWORD *)((char *)v1 + v11) = PencilEventsBridge.__allocating_init()();
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x1B0)) = 0;
  v13 = *(_QWORD *)((*v5 & *v1) + 0x1B8);
  type metadata accessor for TooltipBridge(0, v3, v4, v14);
  *(_QWORD *)((char *)v1 + v13) = PencilEventsBridge.__allocating_init()();
  v15 = *(_QWORD *)((*v5 & *v1) + 0x1C0);
  type metadata accessor for EditMenuBridge(0, v3, v4, v16);
  *(_QWORD *)((char *)v1 + v15) = PencilEventsBridge.__allocating_init()();
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x1C8)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x1D0)) = 0;
  v17 = *(_QWORD *)((*v5 & *v1) + 0x1D8);
  type metadata accessor for UIKitStatusBarBridge(0, v3, v4, v18);
  *(_QWORD *)((char *)v1 + v17) = UIKitStatusBarBridge.__allocating_init()();
  swift_weakInit();
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x1E8)) = 0;
  v19 = *(_QWORD *)((*v5 & *v1) + 0x1F0);
  type metadata accessor for AVKitCaptureButtonBridge(0, v3, v4, v20);
  *(_QWORD *)((char *)v1 + v19) = PencilEventsBridge.__allocating_init()();
  v21 = *(_QWORD *)((*v5 & *v1) + 0x1F8);
  type metadata accessor for PencilEventsBridge(0, v3, v4, v22);
  *(_QWORD *)((char *)v1 + v21) = PencilEventsBridge.__allocating_init()();
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x200)) = 0;
  v23 = *(_QWORD *)((*v5 & *v1) + 0x208);
  type metadata accessor for UIKitSensoryFeedbackCache(0, v3, v4, v24);
  *(_QWORD *)((char *)v1 + v23) = UIKitSensoryFeedbackCache.__allocating_init()();
  v25 = *(_QWORD *)((*v5 & *v1) + 0x210);
  type metadata accessor for ContextMenuBridge(0, v3, v4, v26);
  *(_QWORD *)((char *)v1 + v25) = PencilEventsBridge.__allocating_init()();
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x218)) = 0;
  v27 = *(_QWORD *)((*v5 & *v1) + 0x220);
  *(_QWORD *)((char *)v1 + v27) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x228)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x230)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x238)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x240) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x248)) = 0;
  v28 = (char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x250);
  *(_QWORD *)v28 = 0;
  v28[8] = 0;
  *((_DWORD *)v28 + 3) = 0;
  v29 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x258));
  v30 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *v29 = 0;
  v29[1] = v30;
  v29[2] = MEMORY[0x1E0DEE9E0];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v31 = (char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x270);
  *(_QWORD *)v31 = 0;
  v31[8] = v6;
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x278)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x280)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x288)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x290)) = 0;
  *(_QWORD *)((char *)v1 + *(_QWORD *)((*v5 & *v1) + 0x298)) = 0;
  *((_BYTE *)v1 + *(_QWORD *)((*v5 & *v1) + 0x2A0)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for closure #1 in _UIHostingView.deinit()
{
  ViewGraph.preferenceBridge.setter();
  GraphHost.invalidate()();
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in _UIHostingView._rendererConfiguration.getter(*(_QWORD **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  swift_retain();
  return DisplayList.ViewRenderer.configuration.setter();
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererObject.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DisplayList.ViewRenderer.exportedObject(rootView:)();
  *a1 = result;
  return result;
}

void partial apply for closure #2 in _UIHostingView.didMoveToWindow()()
{
  uint64_t *v0;

  closure #6 in _UIHostingView.updateEnvironment()(v0[4], v0[2], v0[3], _UIHostingView.updateRemovedState());
}

uint64_t sub_187A83BB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized _UIHostingView._geometryChanged(_:forAncestor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t ObjectType;
  uint64_t v8;

  if (*((_BYTE *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x100)) == 1)
  {
    v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  else
  {
    ObjectType = swift_getObjectType();
    result = (*(uint64_t (**)(void))(ObjectType + 1792))();
    if ((result & 1) != 0)
    {
      MEMORY[0x1E0C80A78](result, v8);
      return static Log.internalError(_:)();
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in _UIHostingView.safeAreaInsets.getter()
{
  return closure #1 in _UIHostingView.safeAreaInsets.getter();
}

id specialized _UIHostingView.backgroundColor.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v6;
  objc_class *v7;
  objc_super v9;

  v6 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v4);
  *((_BYTE *)v4 + v6[24]) = 1;
  v7 = (objc_class *)type metadata accessor for _UIHostingView(0, v6[10], v6[11], a4);
  v9.receiver = v4;
  v9.super_class = v7;
  return objc_msgSendSuper2(&v9, sel_setBackgroundColor_, a1);
}

double specialized _UIHostingView._layoutSizeThatFits(_:fixedAxes:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  _QWORD v17[2];
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = type metadata accessor for FloatingPointRoundingRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ProposedSize.init(width:height:)();
  v8 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v7);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v8);
  ViewRendererHost.sizeThatFits(_:)();
  v10 = v9;
  v12 = v11;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0DED500], v2);
  GraphHost.environment.getter();
  v18 = v20;
  v19 = v21;
  EnvironmentValues.pixelLength.getter();
  v14 = v13;
  swift_release();
  swift_release();
  v17[1] = v12;
  v18 = v10;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v14);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, v14);
  v15 = v18;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v15;
}

void partial apply for closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1)
{
  uint64_t v1;

  closure #1 in _UIHostingView.forEachIdentifiedView(body:)(a1, *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in FocusBridge.acceptsFirstResponder.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in FocusBridge.acceptsFirstResponder.getter(a1, a2, *(_BYTE **)(v3 + 16), a3);
}

uint64_t specialized _UIHostingView.didUpdateFocus(in:with:)(void *a1)
{
  swift_retain();
  specialized FocusBridge.didUpdateFocus(in:with:)(a1);
  return swift_release();
}

uint64_t specialized _UIHostingView._intelligenceBaseClass.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for _UIHostingView(0, a1, a2, a4);
}

void specialized _UIHostingView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t partial apply for closure #1 in _UIHostingView._renderAsyncForTest(interval:)@<X0>(uint64_t a1@<X3>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in _UIHostingView._renderAsyncForTest(interval:)(*(_QWORD **)(v2 + 16), a1, a2);
}

uint64_t sub_187A83F98()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)()
{
  uint64_t v0;

  return closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(*(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t partial apply for closure #1 in _UIHostingView.viewCacheIsEmpty.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = DisplayList.ViewRenderer.viewCacheIsEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A84034()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.dismissActivePresentations()()
{
  uint64_t v0;

  closure #1 in _UIHostingView.dismissActivePresentations()(*(_QWORD **)(v0 + 16));
}

uint64_t sub_187A84060()
{
  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for _BenchmarkHost in _UIHostingView<A>()
{
  return &protocol witness table for _UIHostingView<A>;
}

double sub_187A8407C@<D0>(_QWORD *a1@<X8>)
{
  return _UIHostingView.currentTimestamp.getter(a1);
}

uint64_t sub_187A8409C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return _UIHostingView.currentTimestamp.setter(&v2);
}

uint64_t sub_187A840D0()
{
  return 16;
}

__n128 sub_187A840DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A840E8@<X0>(_WORD *a1@<X8>)
{
  return _UIHostingView.propertiesNeedingUpdate.getter(a1);
}

uint64_t sub_187A84108(__int16 *a1)
{
  __int16 v2;

  v2 = *a1;
  return _UIHostingView.propertiesNeedingUpdate.setter(&v2);
}

uint64_t sub_187A8413C()
{
  return 16;
}

__n128 sub_187A84148(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A84154@<X0>(_BYTE *a1@<X8>)
{
  return _UIHostingView.renderingPhase.getter(a1);
}

uint64_t sub_187A84174(char *a1)
{
  char v2;

  v2 = *a1;
  return _UIHostingView.renderingPhase.setter(&v2);
}

uint64_t sub_187A841A8()
{
  return 16;
}

__n128 sub_187A841B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A841C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.externalUpdateCount.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A841E8(uint64_t *a1)
{
  return _UIHostingView.externalUpdateCount.setter(*a1);
}

uint64_t sub_187A8420C()
{
  return 16;
}

__n128 sub_187A84218(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A84224@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.isHiddenForReuse.getter();
  *a1 = result & 1;
  return result;
}

void sub_187A84250(char *a1)
{
  _UIHostingView.isHiddenForReuse.setter(*a1);
}

uint64_t sub_187A84274()
{
  return 16;
}

__n128 sub_187A84280(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A8428C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.safeAreaRegions.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A842B4(uint64_t *a1)
{
  return _UIHostingView.safeAreaRegions.setter(*a1);
}

uint64_t sub_187A842D8()
{
  return 16;
}

__n128 sub_187A842E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_187A842F0@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  _UIHostingView.environmentOverride.getter((uint64_t *)&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_187A84328(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  outlined copy of EnvironmentValues?(v3[0]);
  return _UIHostingView.environmentOverride.setter(v3);
}

uint64_t sub_187A84368()
{
  return 16;
}

__n128 sub_187A84374(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A84380@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A843AC(char *a1)
{
  return _UIHostingView.accessibilityEnabled.setter(*a1);
}

uint64_t sub_187A843D0()
{
  return 16;
}

__n128 sub_187A843DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_187A843E8@<D0>(double *a1@<X8>)
{
  double result;
  uint64_t v3;
  double v4;

  _UIHostingView._rendererConfiguration.getter();
  result = v4;
  *(_QWORD *)a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_187A84428()
{
  swift_retain();
  return _UIHostingView._rendererConfiguration.setter();
}

uint64_t sub_187A8446C()
{
  return 16;
}

__n128 sub_187A84478(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A84484@<X0>(uint64_t a1@<X8>)
{
  return CoreCoordinator.dataSource.getter(a1);
}

uint64_t sub_187A844A4(uint64_t a1)
{
  return specialized _UIHostingView.rootView.setter(a1);
}

uint64_t sub_187A844C4()
{
  return 16;
}

__n128 sub_187A844D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A844DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A84508(char *a1)
{
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter(*a1);
}

uint64_t sub_187A8452C()
{
  return 16;
}

__n128 sub_187A84538(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A84544@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _UIHostingView.addsKeyboardToSafeAreaInsets.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A84570(char *a1)
{
  return _UIHostingView.addsKeyboardToSafeAreaInsets.setter(*a1);
}

uint64_t sub_187A84594()
{
  return 16;
}

__n128 sub_187A845A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for _UIHostingView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _UIHostingView.currentTimestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of _UIHostingView.currentTimestamp.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of _UIHostingView.currentTimestamp.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of _UIHostingView.propertiesNeedingUpdate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of _UIHostingView.propertiesNeedingUpdate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of _UIHostingView.propertiesNeedingUpdate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of _UIHostingView.renderingPhase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of _UIHostingView.renderingPhase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of _UIHostingView.renderingPhase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of _UIHostingView.externalUpdateCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of _UIHostingView.externalUpdateCount.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of _UIHostingView.externalUpdateCount.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of _UIHostingView.isHiddenForReuse.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of _UIHostingView.isHiddenForReuse.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of _UIHostingView.isHiddenForReuse.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of _UIHostingView.environmentOverride.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of _UIHostingView.environmentOverride.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of _UIHostingView.environmentOverride.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x670))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x678))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x680))();
}

uint64_t dispatch thunk of _UIHostingView.__allocating_init(rootView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1992))();
}

uint64_t dispatch thunk of _UIHostingView.modifyViewInputs(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x860))();
}

uint64_t dispatch thunk of _UIHostingView.setRootView(_:transaction:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8A8))();
}

uint64_t dispatch thunk of _UIHostingView.rootView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8B0))();
}

uint64_t dispatch thunk of _UIHostingView.rootView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8B8))();
}

uint64_t dispatch thunk of _UIHostingView.rootView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8C0))();
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8C8))();
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8D0))();
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8D8))();
}

uint64_t dispatch thunk of _UIHostingView.makeViewDebugData()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x950))();
}

void type metadata accessor for (name: String, value: String)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (name: String, value: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
  }
}

void partial apply for closure #1 in _UIHostingView.accessibilityReinstantiateIfNeeded()()
{
  GraphHost.uninstantiate(immediately:)(0);
  GraphHost.instantiateIfNeeded()();
}

void partial apply for closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)()
{
  uint64_t *v0;

  closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)(v0[4], v0[2], v0[3]);
}

uint64_t sub_187A84A18()
{
  swift_release();
  return swift_deallocObject();
}

id partial apply for specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = specialized closure #1 in sequence<A>(first:next:)(a1, *(void (**)(id *__return_ptr, id *))(v2 + 16));
  *a2 = result;
  return result;
}

void type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>()
{
  unint64_t Sequence;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>)
  {
    type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UnfoldSequence<UIView, (UIView?, Bool)> and conformance UnfoldSequence<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>, MEMORY[0x1E0DEC5E8]);
    Sequence = type metadata accessor for DropFirstSequence();
    if (!v1)
      atomic_store(Sequence, (unint64_t *)&lazy cache variable for type metadata for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>);
  }
}

void type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UnfoldSequence<UIView, (UIView?, Bool)>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    type metadata accessor for (UIView?, Bool)();
    v0 = type metadata accessor for UnfoldSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnfoldSequence<UIView, (UIView?, Bool)>);
  }
}

void type metadata accessor for (UIView?, Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (UIView?, Bool))
  {
    type metadata accessor for WeakBox<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for UIView?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIView?, Bool));
  }
}

uint64_t partial apply for implicit closure #1 in _UIHostingView._geometryChanged(_:forAncestor:)()
{
  uint64_t v0;

  return implicit closure #1 in _UIHostingView._geometryChanged(_:forAncestor:)(*(_QWORD **)(v0 + 16));
}

void partial apply for closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(double *a1, double *a2)
{
  uint64_t v2;

  closure #1 in _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.didset(a1, a2, *(_QWORD *)(v2 + 32));
}

void View.windowContentAspectRatio(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t static WidgetBundleBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

unint64_t lazy protocol witness table accessor for type EmptyWidget and conformance EmptyWidget()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget;
  if (!lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EmptyWidget, &type metadata for EmptyWidget);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget);
  }
  return result;
}

void static WidgetBundleBuilder.buildOptional<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

ValueMetadata *type metadata accessor for WidgetBundleBuilder()
{
  return &type metadata for WidgetBundleBuilder;
}

uint64_t sub_187A84CA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

ValueMetadata *type metadata accessor for EmptyWidget()
{
  return &type metadata for EmptyWidget;
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in EmptyWidget()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_187A84CC8()
{
  return &protocol witness table for EmptyWidgetConfiguration;
}

void UIHostingController.__allocating_init(hostingView:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  UIHostingController.init(hostingView:)(a1);
}

uint64_t UIHostingController.persistentSystemOverlays.getter(_WORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + direct field offset for UIHostingController.persistentSystemOverlays;
  *a1 = *(_WORD *)(v1 + direct field offset for UIHostingController.persistentSystemOverlays);
  return *(unsigned __int8 *)(v2 + 2);
}

uint64_t UIHostingController.centersRootView.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v5 = *MEMORY[0x1E0DEEDD8] & *v4;
  v6 = *(void **)((char *)v4 + direct field offset for UIHostingController.host);
  v7 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88), a4);
  v8 = v6;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v7);
  LOBYTE(v7) = ViewRendererHost.centersRootView.getter();

  return v7 & 1;
}

void UIHostingController.centersRootView.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v5 = *(void **)((char *)v4 + direct field offset for UIHostingController.host);
  v6 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7 = v5;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v6);
  ViewRendererHost.centersRootView.setter();

}

void (*UIHostingController.centersRootView.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = UIHostingController.centersRootView.getter(a1, a2, a3, a4) & 1;
  return UIHostingController.centersRootView.modify;
}

void UIHostingController.centersRootView.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  UIHostingController.centersRootView.setter(*(unsigned __int8 *)(a1 + 8), a2, a3, a4);
}

void (*specialized UIHostingController.rootView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v4 = direct field offset for UIHostingController.host;
  v3[10] = v1;
  v3[11] = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + v4)) + 0x60));
  swift_beginAccess();
  v3[9] = *v5;
  swift_retain();
  return UIHostingController.rootView.modifyspecialized ;
}

void UIHostingController.rootView.modifyspecialized (uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 80) + *(_QWORD *)(*(_QWORD *)a1 + 88));
  v5 = (_QWORD *)((char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x60));
  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    *v5 = v3;
    swift_retain_n();
    v6 = v4;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release_n();

    swift_release();
  }
  else
  {
    swift_beginAccess();
    *v5 = v3;
    swift_retain_n();
    v7 = v4;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release_n();

  }
  free(v2);
}

void (*UIHostingController.rootView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x50);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  CoreCoordinator.dataSource.getter((uint64_t)v7);
  return UIHostingController.rootView.modify;
}

void UIHostingController.rootView.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    specialized UIHostingController.rootView.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized UIHostingController.rootView.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void (*UIHostingController.sizingOptions.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (_QWORD *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  v3[3] = *v4;
  return UIHostingController.sizingOptions.modify;
}

void UIHostingController.sizingOptions.modify(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v1 = *(void **)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  UIHostingController.sizingOptions.setter(&v2);
  free(v1);
}

Swift::Void __swiftcall UIHostingController.idealSizeDidChange(from:to:)(CGSize from, CGSize to)
{
  char *v2;
  char *v3;
  double width;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  double height;
  double v29;
  uint64_t v30;
  _QWORD v31[3];

  v3 = v2;
  height = from.height;
  width = from.width;
  v5 = type metadata accessor for FloatingPointRoundingRule();
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&height - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v2, sel_view, v8);
  if (!v11)
  {
    __break(1u);
    goto LABEL_14;
  }
  v12 = v11;
  objc_msgSend(v11, sel_effectiveUserInterfaceLayoutDirection);

  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  v29 = *(double *)v31;
  v30 = v31[1];
  EnvironmentValues.pixelLength.getter();
  v14 = v13;
  swift_release();
  swift_release();
  v15 = objc_msgSend(v3, sel_view);
  if (!v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v15;
  objc_msgSend(v15, sel_safeAreaInsets);

  CGSize.inset(by:)();
  v18 = v17;
  v20 = v19;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x1E0DED500], v5);
  v31[0] = v18;
  v29 = v20;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v14);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, v14);
  v21 = *(double *)v31;
  v22 = v29;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v23 = &v3[direct field offset for UIHostingController.sizingOptions];
  swift_beginAccess();
  if (!*(_QWORD *)v23)
  {
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v21 != width || v22 != height)
  {
    v24 = &v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    if ((*v24 & 1) != 0)
    {
      _UIHostingView.renderingPhase.getter(v31);
      if (LOBYTE(v31[0]) == 1)
      {
        v25 = swift_allocObject();
        *(_QWORD *)(v25 + 16) = v3;
        *(double *)(v25 + 24) = v21;
        *(double *)(v25 + 32) = v22;
        v26 = v3;
        onNextMainRunLoop(do:)();
        swift_release();
      }
      else
      {
        objc_msgSend(v3, sel_setPreferredContentSize_, v21, v22);
      }
    }
    v27 = &v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    if ((*v27 & 2) != 0)
      objc_msgSend(*(id *)&v3[direct field offset for UIHostingController.host], sel_invalidateIntrinsicContentSize);
  }
}

void UIHostingController.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + direct field offset for UIHostingController.host);
  _UIHostingView.setRootView(_:transaction:)(a1);

}

CGSize __swiftcall UIHostingController.sizeThatFits(in:)(CGSize in)
{
  uint64_t v1;
  double v2;
  double v3;
  CGSize result;

  objc_msgSend(*(id *)(v1 + direct field offset for UIHostingController.host), sel_sizeThatFits_, in.width, in.height);
  result.height = v3;
  result.width = v2;
  return result;
}

Swift::Void __swiftcall UIHostingController._render(seconds:)(Swift::Double seconds)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *v2;
  v4 = *(void **)((char *)v2 + direct field offset for UIHostingController.host);
  v5 = type metadata accessor for _UIHostingView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & v3) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & v3) + 0x58), v1);
  v6 = v4;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v5);
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

}

uint64_t specialized UIHostingController._forEachIdentifiedView(body:)(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  id v7;
  _BYTE v9[168];

  v5 = *(void **)(v2 + direct field offset for UIHostingController.host);
  v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v7 = v5;
  ViewRendererHost.preferenceValue<A>(_:)();
  swift_retain();
  specialized _IdentifiedViewTree.forEach(_:)((uint64_t)v9, (uint64_t)partial apply for specialized closure #1 in _UIHostingView.forEachIdentifiedView(body:), v6, a1, a2);
  swift_release();
  outlined destroy of _IdentifiedViewTree((uint64_t)v9);

  return swift_release();
}

void UIHostingController._forEachIdentifiedView(body:)(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;
  id v5;

  v5 = *(id *)(v2 + direct field offset for UIHostingController.host);
  _UIHostingView.forEachIdentifiedView(body:)(a1, a2);

}

uint64_t UIHostingController._disableSafeArea.getter()
{
  char v0;
  uint64_t v2;
  _BYTE v3[40];

  _UIHostingView.explicitSafeAreaInsets.getter((uint64_t)&v2);
  static EdgeInsets.zero.getter();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v2, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?);
  if ((v3[32] & 1) != 0)
    v0 = 0;
  else
    v0 = static EdgeInsets.== infix(_:_:)();
  return v0 & 1;
}

void specialized UIHostingController._disableSafeArea.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;

  v8 = *(id *)(v1 + direct field offset for UIHostingController.host);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if ((a1 & 1) != 0)
    static EdgeInsets.zero.getter();
  v7 = (char *)v8 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v8) + 0xD8);
  *(_QWORD *)v7 = v3;
  *((_QWORD *)v7 + 1) = v4;
  *((_QWORD *)v7 + 2) = v5;
  *((_QWORD *)v7 + 3) = v6;
  v7[32] = (a1 & 1) == 0;
  objc_msgSend(v8, sel_safeAreaInsetsDidChange);

}

void UIHostingController._disableSafeArea.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  BOOL v9;

  v7 = *(id *)(v1 + direct field offset for UIHostingController.host);
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if ((a1 & 1) != 0)
    static EdgeInsets.zero.getter();
  v8[0] = v3;
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v9 = (a1 & 1) == 0;
  _UIHostingView.explicitSafeAreaInsets.setter((uint64_t)v8);

}

void (*specialized UIHostingController._disableSafeArea.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = a1 + 2;
  v3 = direct field offset for UIHostingController.host;
  *a1 = v1;
  a1[1] = v3;
  v4 = *(_BYTE *)(*(_QWORD *)(v1 + v3) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + v3)) + 0xD8) + 32);
  static EdgeInsets.zero.getter();
  if ((v4 & 1) != 0)
    v5 = 0;
  else
    v5 = static EdgeInsets.== infix(_:_:)();
  *v2 = v5 & 1;
  return UIHostingController._disableSafeArea.modifyspecialized ;
}

void UIHostingController._disableSafeArea.modifyspecialized (uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(id *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v8 = v2;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (v1)
  {
    static EdgeInsets.zero.getter();
    v2 = v8;
  }
  v7 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD8);
  *(_QWORD *)v7 = v3;
  *((_QWORD *)v7 + 1) = v4;
  *((_QWORD *)v7 + 2) = v5;
  *((_QWORD *)v7 + 3) = v6;
  v7[32] = v1 ^ 1;
  objc_msgSend(v2, sel_safeAreaInsetsDidChange);

}

void (*UIHostingController._disableSafeArea.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = UIHostingController._disableSafeArea.getter() & 1;
  return UIHostingController._disableSafeArea.modify;
}

void UIHostingController._disableSafeArea.modify(uint64_t a1)
{
  UIHostingController._disableSafeArea.setter(*(_BYTE *)(a1 + 8));
}

Swift::Void __swiftcall UIHostingController.updateWindowSizeObservers(_:)(SwiftUI::UIHostingControllerSizingOptions a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;

  v2 = v1;
  v3 = *(_QWORD *)a1.rawValue;
  if (!_UIHostingView.sceneBridge.getter())
    return;
  if ((v3 & 4) != 0)
  {
    swift_retain();
    static _ProposedSize.zero.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    goto LABEL_6;
  }
  v4 = (_BYTE *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  if ((*v4 & 4) == 0)
  {
    swift_retain();
    static _ProposedSize.zero.getter();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.stopObserving(proposal:)();
    swift_endAccess();
LABEL_6:
    swift_release();
  }
  if ((v3 & 8) != 0)
  {
    swift_retain();
    static _ProposedSize.infinity.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
  }
  else
  {
    v5 = (_BYTE *)(v2 + direct field offset for UIHostingController.sizingOptions);
    swift_beginAccess();
    if ((*v5 & 8) == 0)
    {
      swift_retain();
      static _ProposedSize.infinity.getter();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.stopObserving(proposal:)();
      swift_endAccess();
      swift_release();
    }
  }
  swift_release();
}

Class @objc UIHostingController.keyCommands.getter(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSArray v6;

  v1 = a1;
  v5 = UIHostingController.keyCommands.getter((uint64_t)v1, v2, v3, v4);

  if (v5)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

uint64_t UIHostingController.keyCommands.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[5];
  objc_super v18;

  v5 = v4;
  v6 = *MEMORY[0x1E0DEEDD8] & *v4;
  v7 = *(char **)((char *)v4 + direct field offset for UIHostingController.keyboardShortcutBridge);
  if (v7)
  {
    if (*(_DWORD *)&v7[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings + 8] == -1)
    {
      MEMORY[0x1E0C80A78](a1, a2);
      v11 = v7;
      static Update.ensure<A>(_:)();
    }
    else
    {
      v8 = v7;
    }
    v10 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), v9);
    v17[3] = v10;
    v17[4] = &protocol witness table for UIHostingController<A>;
    v17[0] = v5;
    v12 = v5;
    KeyboardShortcutBridge.updateKeyCommands(_:)((uint64_t)v17);

    outlined destroy of KeyboardShortcutSource?((uint64_t)v17);
  }
  else
  {
    v10 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), a4);
  }
  v18.receiver = v5;
  v18.super_class = v10;
  v13 = objc_msgSendSuper2(&v18, sel_keyCommands);
  if (!v13)
    return 0;
  v14 = v13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v15;
}

uint64_t closure #1 in UIHostingController.keyCommands.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;

  swift_retain();
  GraphHost.addPreference<A>(_:)();
  v2 = OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences) = 1;
  swift_release();
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  if (*(_BYTE *)(a1 + v2) == 1)
  {
    PreferenceList.subscript.getter();
    v3 = a1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings;
    *(_QWORD *)v3 = v5;
    *(_DWORD *)(v3 + 8) = v6;
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void UIHostingController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  specialized UIHostingController.init(coder:rootView:)(a1, a2);
}

uint64_t sub_187A86298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(v2);
  return a1;
}

void UIHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  specialized UIHostingController.init(coder:rootView:)(a1, a2);
}

uint64_t sub_187A862F8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(v1);
  return a1;
}

id UIHostingController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void @objc UIHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized UIHostingController.init(coder:)();
}

void UIHostingController.init(_hostingView:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.allowedBehaviors) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.requiredBridges) = 0;
  v4 = (uint64_t)v1 + direct field offset for UIHostingController.overrides;
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v4);
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.customTabItem) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.toolbarBridge) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.inspectorBridgeV5) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.barAppearanceBridge) = 0;
  v5 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v6 = swift_allocObject();
  v7 = v1;
  v8 = specialized UIKitDialogBridge.init()(v6);
  swift_release();
  *(_QWORD *)((char *)v1 + v5) = v8;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.testBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.contentScrollViewBridge) = 0;
  v9 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = -1;
  *(_QWORD *)((char *)v7 + v9) = v10;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.alwaysOnBridge) = 0;
  v11 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)((char *)v7 + v11) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)((char *)v7 + direct field offset for UIHostingController.deferredEdges) = 256;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker) = MEMORY[0x1E0DEE9D8];
  v13 = (char *)v7 + direct field offset for UIHostingController.persistentSystemOverlays;
  *(_WORD *)v13 = 512;
  v13[2] = 3;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker) = v12;
  *((_BYTE *)v7 + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController) = 0;
  *((_BYTE *)v7 + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController) = 0;
  v14 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)((char *)v7 + v14) = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.navigationBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.keyboardShortcutBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.sizingOptions) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.host) = a1;
  v15 = a1;

  v17 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v16);
  v19.receiver = v7;
  v19.super_class = v17;
  v18 = objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  UIHostingController._commonInit()();
}

void *sub_187A86610()
{
  void *v0;
  void *v1;

  return v1;
}

Swift::Void __swiftcall UIHostingController.viewWillAppear(_:)(Swift::Bool a1)
{
  uint64_t v1;
  _QWORD *v2;
  objc_class *v4;
  objc_super v5;

  v4 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x58), v1);
  v5.receiver = v2;
  v5.super_class = v4;
  objc_msgSendSuper2(&v5, sel_viewWillAppear_, a1);
  UIHostingController._viewWillAppear(_:)(a1);
}

uint64_t UIHostingController.viewDidAppear(_:)(char a1, SEL *a2, uint64_t (*a3)(id), uint64_t a4)
{
  _QWORD *v4;
  objc_class *v8;
  id v9;
  objc_super v11;

  v8 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v11.receiver = v4;
  v11.super_class = v8;
  v9 = objc_msgSendSuper2(&v11, *a2, a1 & 1);
  return a3(v9);
}

uint64_t @objc UIHostingController.isModalInPresentation.getter(void *a1)
{
  id v1;
  char v2;

  v1 = a1;
  v2 = UIHostingController.isModalInPresentation.getter();

  return v2 & 1;
}

uint64_t UIHostingController.isModalInPresentation.getter()
{
  unsigned __int8 v1;

  static Update.ensure<A>(_:)();
  return v1;
}

void @objc UIHostingController.isModalInPresentation.setter(void *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v6 = a1;
  UIHostingController.isModalInPresentation.setter(a3, (uint64_t)v6, v4, v5);

}

id UIHostingController.isModalInPresentation.setter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  objc_super v8;

  v6 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v8.receiver = v4;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_setModalInPresentation_, a1 & 1);
}

id closure #1 in UIHostingController.isModalInPresentation.getter@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  id result;
  objc_super v9;
  char v10;

  v4 = *a1;
  v5 = *MEMORY[0x1E0DEEDD8];
  swift_retain();
  GraphHost.preferenceValue<A>(_:)();
  swift_release();
  if (v10 == 2)
  {
    v7 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((v5 & v4) + 0x50), *(_QWORD *)((v5 & v4) + 0x58), v6);
    v9.receiver = a1;
    v9.super_class = v7;
    result = objc_msgSendSuper2(&v9, sel_isModalInPresentation);
  }
  else
  {
    result = (id)(v10 & 1);
  }
  *a2 = (_BYTE)result;
  return result;
}

Swift::Bool __swiftcall UIHostingController._wantsTransparentBackground()()
{
  return _UIHostingView.wantsTransparentBackground.getter();
}

BOOL @objc UIHostingController._wantsTransparentBackground()()
{
  return UIHostingController._wantsTransparentBackground()();
}

void UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t ObjectType;
  void (*v15)(uint64_t, uint64_t);
  id v16;
  objc_super v17;

  v6 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v17.receiver = v4;
  v17.super_class = v6;
  objc_msgSendSuper2(&v17, sel_preferredContentSizeDidChangeForChildContentContainer_, a1);
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_view);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, sel_superview);

      if (v10)
      {
        swift_getObjectType();
        v11 = swift_conformsToProtocol2();
        if (v11)
          v12 = v11;
        else
          v12 = 0;
        if (v11)
          v13 = v10;
        else
          v13 = 0;
        if (v13)
        {
          ObjectType = swift_getObjectType();
          v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
          v16 = v10;
          v15(ObjectType, v12);

        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void @objc UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;

  swift_unknownObjectRetain();
  v7 = a1;
  UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(a3, (uint64_t)v7, v5, v6);
  swift_unknownObjectRelease();

}

void closure #1 in UIHostingController.sizingOptionsDidChange(from:)(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  v7 = a3 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x18D760234](v7);
  if (v8)
  {
    v9 = (void *)v8;
    UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v4, v3), (CGSize)__PAIR128__(v6, v5));

  }
}

uint64_t @objc UIHostingController.preferredStatusBarUpdateAnimation.getter(void *a1)
{
  id v1;
  uint64_t updated;

  v1 = a1;
  updated = UIHostingController.preferredStatusBarUpdateAnimation.getter();

  return updated;
}

void UIHostingController.viewWillTransition(to:with:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v16;

  v10 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x50);
  v11 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v6) + 0x58);
  v16.receiver = v6;
  v16.super_class = (Class)type metadata accessor for UIHostingController(0, v10, v11, a6);
  objc_msgSendSuper2(&v16, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  v12 = *(void **)((char *)v6 + direct field offset for UIHostingController.host);
  v14 = type metadata accessor for _UIHostingView(0, v10, v11, v13);
  v15 = v12;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v14);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

}

void @objc UIHostingController.viewWillTransition(to:with:)(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  id v11;

  swift_unknownObjectRetain();
  v11 = a1;
  UIHostingController.viewWillTransition(to:with:)(a5, a2, a3, (uint64_t)v11, v9, v10);
  swift_unknownObjectRelease();

}

uint64_t UIHostingController._update(with:completion:)(void *a1, uint64_t (*a2)(void))
{
  uint64_t v2;

  if (*(_QWORD *)(v2 + direct field offset for UIHostingController.alwaysOnBridge))
  {
    swift_retain();
    AlwaysOnBridge.update(with:)(a1);
    swift_release();
  }
  return a2();
}

uint64_t @objc UIHostingController._update(with:completion:)(void *a1, int a2, void *a3, void *aBlock)
{
  void *v6;
  id v7;
  id v8;

  v6 = _Block_copy(aBlock);
  *(_QWORD *)(swift_allocObject() + 16) = v6;
  v7 = a3;
  v8 = a1;
  UIHostingController._update(with:completion:)(a3, partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ());

  return swift_release();
}

uint64_t UIHostingController._timelines(for:)()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + direct field offset for UIHostingController.alwaysOnBridge))
    return MEMORY[0x1E0DEE9D8];
  specialized AlwaysOnBridge.timelines(for:)();
  return swift_bridgeObjectRetain();
}

Class @objc UIHostingController._timelines(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Class isa;
  uint64_t v7;

  v0 = type metadata accessor for DateInterval();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  UIHostingController._timelines(for:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

void UIHostingController._rendererConfiguration.getter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  _UIHostingView._rendererConfiguration.getter();

}

void UIHostingController._rendererConfiguration.setter()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  _UIHostingView._rendererConfiguration.setter();

}

void (*specialized UIHostingController._rendererConfiguration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  id v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = direct field offset for UIHostingController.host;
  v3[2] = v1;
  v3[3] = v4;
  v5 = *(id *)(v1 + v4);
  static Update.locked<A>(_:)();
  v3[4] = 0;

  return UIHostingController._rendererConfiguration.modifyspecialized ;
}

void UIHostingController._rendererConfiguration.modifyspecialized (uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)a1 + 16) + *(_QWORD *)(*(_QWORD *)a1 + 24));
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v4 = v3;
    static Update.locked<A>(_:)();
    swift_release();
  }
  else
  {
    v4 = v3;
    static Update.locked<A>(_:)();
  }

  swift_release();
  free(v2);
}

void (*UIHostingController._rendererConfiguration.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  UIHostingController._rendererConfiguration.getter();
  return UIHostingController._rendererConfiguration.modify;
}

void UIHostingController._rendererConfiguration.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_retain();
    UIHostingController._rendererConfiguration.setter();
    swift_release();
  }
  else
  {
    UIHostingController._rendererConfiguration.setter();
  }
}

uint64_t UIHostingController._rendererObject.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  v2 = _UIHostingView._rendererObject.getter();

  return v2;
}

id UIHostingController.target(forAction:withSender:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  void *v23;
  objc_super v24;
  __int128 v25;
  __int128 v26;

  v7 = *v3;
  v8 = *MEMORY[0x1E0DEEDD8];
  if ((static Selector.== infix(_:_:)() & 1) != 0)
  {
    result = *(id *)((char *)v3 + direct field offset for UIHostingController.keyboardShortcutBridge);
    if (result)
    {
      v23 = *(void **)((char *)v3 + direct field offset for UIHostingController.keyboardShortcutBridge);
      *(_QWORD *)(a3 + 24) = type metadata accessor for KeyboardShortcutBridge();
      v10 = v23;
      *(_QWORD *)a3 = v23;
      return v10;
    }
    else
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    v11 = v8 & v7;
    outlined init with copy of Any?(a2, (uint64_t)&v25);
    v13 = *((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v14 = __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1));
      v15 = *(_QWORD *)(v13 - 8);
      v16 = MEMORY[0x1E0C80A78](v14, v14);
      v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v15 + 16))(v18, v16);
      v19 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    }
    else
    {
      v19 = 0;
    }
    v20 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)(v11 + 80), *(_QWORD *)(v11 + 88), v12);
    v24.receiver = v3;
    v24.super_class = v20;
    v21 = objc_msgSendSuper2(&v24, sel_targetForAction_withSender_, a1, v19);
    swift_unknownObjectRelease();
    if (v21)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v25 = 0u;
      v26 = 0u;
    }
    return (id)outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v25, a3, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
  return result;
}

id @objc UIHostingController.target(forAction:withSender:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _OWORD v16[2];
  _QWORD v17[3];
  uint64_t v18;

  if (a4)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    v7 = a1;
  }
  UIHostingController.target(forAction:withSender:)(a3, (uint64_t)v16, (uint64_t)v17);

  outlined destroy of Any?((uint64_t)v16);
  v8 = v18;
  if (!v18)
    return 0;
  v9 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v9);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v13, v11);
  v14 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v14;
}

id UIHostingController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x18D75CC88]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void UIHostingController.init(nibName:bundle:)()
{
  specialized UIHostingController.init(nibName:bundle:)();
}

void @objc UIHostingController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  specialized UIHostingController.init(nibName:bundle:)();
}

id UIHostingController.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for UIHostingController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t protocol witness for _UIHostingViewable.rootView.getter in conformance <> UIHostingController<A>()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for _UIHostingViewable.rootView.setter in conformance <> UIHostingController<A>(uint64_t a1)
{
  specialized UIHostingController.rootView.setter(a1);
  return swift_release();
}

uint64_t (*protocol witness for _UIHostingViewable.rootView.modify in conformance <> UIHostingController<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController.rootView.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for _UIHostingViewable._render(seconds:) in conformance <> UIHostingController<A>()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E0CE7518], MEMORY[0x1E0CE7508], (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();

}

uint64_t protocol witness for _UIHostingViewable._disableSafeArea.getter in conformance <> UIHostingController<A>()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(*(_QWORD *)(v0 + direct field offset for UIHostingController.host)
                + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + direct field offset for UIHostingController.host))
                            + 0xD8)
                + 32);
  static EdgeInsets.zero.getter();
  if ((v1 & 1) != 0)
    return 0;
  else
    return static EdgeInsets.== infix(_:_:)();
}

uint64_t (*protocol witness for _UIHostingViewable._disableSafeArea.modify in conformance <> UIHostingController<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController._disableSafeArea.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for _UIHostingViewable._rendererConfiguration.getter in conformance <> UIHostingController<A>()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  static Update.locked<A>(_:)();

}

uint64_t protocol witness for _UIHostingViewable._rendererConfiguration.setter in conformance <> UIHostingController<A>()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  static Update.locked<A>(_:)();

  return swift_release();
}

uint64_t (*protocol witness for _UIHostingViewable._rendererConfiguration.modify in conformance <> UIHostingController<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController._rendererConfiguration.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for _UIHostingViewable._rendererObject.getter in conformance <> UIHostingController<A>()
{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  v3 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?);
  v1 = v3;
  static Update.locked<A>(_:)();

  return v4;
}

uint64_t specialized UIHostingController.toolbarBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.toolbarBridge);
}

uint64_t specialized UIHostingController.host.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.host);
}

uint64_t specialized UIHostingController.alwaysOnBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.alwaysOnBridge);
}

uint64_t specialized UIHostingController.testBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.testBridge);
}

void specialized UIHostingController.init(rootView:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.allowedBehaviors) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.requiredBridges) = 0;
  v4 = (uint64_t)v1 + direct field offset for UIHostingController.overrides;
  v19 = xmmword_187BF9F90;
  v20 = 0;
  v21 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v22 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v19, v4);
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.customTabItem) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.toolbarBridge) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.inspectorBridgeV5) = 0;
  *(_QWORD *)((char *)v1 + direct field offset for UIHostingController.barAppearanceBridge) = 0;
  v5 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v6 = swift_allocObject();
  v7 = v1;
  v8 = specialized UIKitDialogBridge.init()(v6);
  swift_release();
  *(_QWORD *)((char *)v1 + v5) = v8;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.testBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.contentScrollViewBridge) = 0;
  v9 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = -1;
  *(_QWORD *)((char *)v7 + v9) = v10;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.alwaysOnBridge) = 0;
  v11 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)((char *)v7 + v11) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)((char *)v7 + direct field offset for UIHostingController.deferredEdges) = 256;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker) = MEMORY[0x1E0DEE9D8];
  v13 = (char *)v7 + direct field offset for UIHostingController.persistentSystemOverlays;
  *(_WORD *)v13 = 512;
  v13[2] = 3;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker) = v12;
  *((_BYTE *)v7 + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController) = 0;
  *((_BYTE *)v7 + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController) = 0;
  v14 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)((char *)v7 + v14) = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.navigationBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.keyboardShortcutBridge) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for UIHostingController.sizingOptions) = 0;
  type metadata accessor for _UIHostingView(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v15);
  specialized _UIHostingView.__allocating_init(rootView:)(a1, v16, v17, v18);
}

void sub_187A87C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;

  *(_QWORD *)&v9[direct field offset for UIHostingController.host] = a1;

  v13 = (objc_class *)type metadata accessor for UIHostingController(0, v10, v11, v12);
  a9.receiver = v9;
  a9.super_class = v13;
  v14 = objc_msgSendSuper2(&a9, sel_initWithNibName_bundle_, 0, 0);
  UIHostingController._commonInit()();
}

void *sub_187A87C50()
{
  void *v0;

  return v0;
}

void specialized UIHostingController.__allocating_init(rootView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v6;

  v6 = objc_allocWithZone((Class)type metadata accessor for UIHostingController(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  specialized UIHostingController.init(rootView:)(a1);
}

void specialized UIHostingController.rootView.setter(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(v1 + direct field offset for UIHostingController.host);
  specialized _UIHostingView.rootView.setter(a1);

}

uint64_t specialized UIHostingController.navigationBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.navigationBridge);
}

uint64_t specialized UIHostingController.keyboardShortcutBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.keyboardShortcutBridge);
}

uint64_t partial apply for closure #1 in UIHostingController.keyCommands.getter()
{
  uint64_t v0;

  return closure #1 in UIHostingController.keyCommands.getter(*(_QWORD *)(v0 + 16));
}

uint64_t specialized UIHostingController.screenEdgesSystemGestureSeedTracker.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized UIHostingController.persistentSystemOverlaysSeedTracker.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized UIHostingController.contentScrollViewBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.contentScrollViewBridge);
}

uint64_t specialized UIHostingController.barAppearanceBridge.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.barAppearanceBridge);
}

uint64_t specialized UIHostingController.inspectorBridgeV5.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for UIHostingController.inspectorBridgeV5);
}

void specialized UIHostingController.init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;

  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.allowedBehaviors) = 0;
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.requiredBridges) = 0;
  v5 = (uint64_t)v2 + direct field offset for UIHostingController.overrides;
  v20 = xmmword_187BF9F90;
  v21 = 0;
  v22 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v23 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v20, v5);
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.customTabItem) = 0;
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.toolbarBridge) = 0;
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.inspectorBridgeV5) = 0;
  *(_QWORD *)((char *)v2 + direct field offset for UIHostingController.barAppearanceBridge) = 0;
  v6 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v7 = swift_allocObject();
  v8 = v2;
  v9 = specialized UIKitDialogBridge.init()(v7);
  swift_release();
  *(_QWORD *)((char *)v2 + v6) = v9;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.testBridge) = 0;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.contentScrollViewBridge) = 0;
  v10 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = -1;
  *(_QWORD *)((char *)v8 + v10) = v11;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.alwaysOnBridge) = 0;
  v12 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)((char *)v8 + v12) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)((char *)v8 + direct field offset for UIHostingController.deferredEdges) = 256;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker) = MEMORY[0x1E0DEE9D8];
  v14 = (char *)v8 + direct field offset for UIHostingController.persistentSystemOverlays;
  *(_WORD *)v14 = 512;
  v14[2] = 3;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker) = v13;
  *((_BYTE *)v8 + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController) = 0;
  *((_BYTE *)v8 + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController) = 0;
  v15 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)((char *)v8 + v15) = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.navigationBridge) = 0;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.keyboardShortcutBridge) = 0;
  *(_QWORD *)((char *)v8 + direct field offset for UIHostingController.sizingOptions) = 0;
  type metadata accessor for _UIHostingView(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v16);
  specialized _UIHostingView.__allocating_init(rootView:)(a2, v17, v18, v19);
}

uint64_t sub_187A8803C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v2[direct field offset for UIHostingController.host] = a1;

  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for UIHostingController(0, v3, v4, v5);
  v6 = objc_msgSendSuper2(&v9, sel_initWithCoder_, v1);
  if (v6)
  {
    v7 = v6;
    UIHostingController._commonInit()();
  }
  return 0;
}

void specialized UIHostingController.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;

  v1 = v0;
  *(_QWORD *)&v0[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(_QWORD *)&v0[direct field offset for UIHostingController.requiredBridges] = 0;
  v2 = (uint64_t)&v0[direct field offset for UIHostingController.overrides];
  v12 = xmmword_187BF9F90;
  v13 = 0;
  v14 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v15 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v12, v2);
  *(_QWORD *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  v3 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  v4 = swift_allocObject();
  v5 = specialized UIKitDialogBridge.init()(v4);
  swift_release();
  *(_QWORD *)&v1[v3] = v5;
  *(_QWORD *)&v1[direct field offset for UIHostingController.testBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  v6 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = -1;
  *(_QWORD *)&v1[v6] = v7;
  *(_QWORD *)&v1[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  v8 = direct field offset for UIHostingController.fileImportExportBridge;
  *(_QWORD *)&v1[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v1[direct field offset for UIHostingController.deferredEdges] = 256;
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E0DEE9D8];
  v10 = &v1[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)v10 = 512;
  v10[2] = 3;
  *(_QWORD *)&v1[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v9;
  v1[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v1[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  v11 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(_QWORD *)&v1[v11] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(_QWORD *)&v1[direct field offset for UIHostingController.navigationBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(_QWORD *)&v1[direct field offset for UIHostingController.sizingOptions] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id partial apply for closure #1 in UIHostingController.isModalInPresentation.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in UIHostingController.isModalInPresentation.getter(*(uint64_t **)(v1 + 16), a1);
}

void specialized UIHostingController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_187A88348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = UIHostingController.centersRootView.getter(a1, a2, a3, a4);
  *a5 = result & 1;
  return result;
}

void sub_187A88374(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  UIHostingController.centersRootView.setter(*a1, a2, a3, a4);
}

uint64_t sub_187A88398()
{
  return 16;
}

__n128 sub_187A883A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A883B0@<X0>(uint64_t a1@<X8>)
{
  return UIHostingController.rootView.getter(a1);
}

void sub_187A883D0(uint64_t a1)
{
  specialized UIHostingController.rootView.setter(a1);
}

uint64_t sub_187A883F0()
{
  return 16;
}

__n128 sub_187A883FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A88408@<X0>(_QWORD *a1@<X8>)
{
  return UIHostingController.sizingOptions.getter(a1);
}

uint64_t sub_187A88428(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return UIHostingController.sizingOptions.setter(&v2);
}

uint64_t sub_187A8845C()
{
  return 16;
}

__n128 sub_187A88468(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A88474@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UIHostingController._disableSafeArea.getter();
  *a1 = result & 1;
  return result;
}

void sub_187A884A0(char *a1)
{
  UIHostingController._disableSafeArea.setter(*a1);
}

uint64_t sub_187A884C4()
{
  return 16;
}

__n128 sub_187A884D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double sub_187A884DC@<D0>(double *a1@<X8>)
{
  double result;
  uint64_t v3;
  double v4;

  UIHostingController._rendererConfiguration.getter();
  result = v4;
  *(_QWORD *)a1 = v3;
  a1[1] = v4;
  return result;
}

void sub_187A8851C()
{
  swift_retain();
  UIHostingController._rendererConfiguration.setter();
}

uint64_t sub_187A88560()
{
  return 16;
}

__n128 sub_187A8856C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for UIHostingController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UIHostingController.centersRootView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of UIHostingController.centersRootView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of UIHostingController.centersRootView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(rootView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 768))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(coder:rootView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 776))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(hostingView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 784))();
}

uint64_t dispatch thunk of UIHostingController.rootView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of UIHostingController.setRootView(_:transaction:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of UIHostingController.sizeThatFits(in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of UIHostingController._render(seconds:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of UIHostingController._forEachIdentifiedView(body:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t sub_187A88708()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_187A8872C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A88750()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187A88774()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingController.sizingOptionsDidChange(from:)(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;

  closure #1 in UIHostingController.sizingOptionsDidChange(from:)(a1, a2, *(_QWORD *)(v2 + 32));
}

uint64_t sub_187A887A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  return partial apply for closure #1 in _UIHostingView._rendererConfiguration.setter();
}

void partial apply for specialized closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1)
{
  uint64_t v1;

  closure #1 in _UIHostingView.forEachIdentifiedView(body:)(a1, v1);
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.getterspecialized partial apply@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #1 in _UIHostingView._rendererConfiguration.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableRowElementCount(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

void TableRowForEachState.__allocating_init(inputs:)()
{
  swift_allocObject();
  TableRowForEachState.init(inputs:)();
}

void TableRowForEachState.init(inputs:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (id)AGSubgraphGetCurrent();
  if (v1)
  {
    *(_QWORD *)(v0 + 168) = v1;
    *(_DWORD *)(v0 + 176) = 0;
    *(_BYTE *)(v0 + 180) = 1;
    *(_DWORD *)(v0 + 184) = 0;
    *(_BYTE *)(v0 + 188) = 1;
    v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
    v3 = type metadata accessor for ForEach();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 168);
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 1;
    type metadata accessor for TableRowForEachState.Item();
  }
  __break(1u);
}

void TableRowForEachState.update(forEach:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[24];
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v18 = a1;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 88);
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16[10] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v16[20] = (char *)v16 - v8;
  v9 = *(_QWORD *)(v3 + 104);
  v10 = *(_QWORD *)(v3 + 80);
  v16[16] = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v16[17] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = *(_QWORD *)(v3 + 96);
  v21 = v10;
  v22 = v4;
  v23 = v15;
  v24 = v9;
  v19 = *(_OWORD *)(v3 + 112);
  v25 = v19;
  type metadata accessor for TableRowForEachState.Item();
}

uint64_t TableRowForEachState.eraseItem(_:)(uint64_t a1)
{
  AGSubgraphRef.willRemove()();
  AGSubgraphRemoveChild();
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 200)) = 1;
  return TableColumnForEachState.Item.release()();
}

void TableRowForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[14];
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v46 = a2;
  v47 = a1;
  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v39[4] = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v39[12] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v7);
  v39[9] = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v39[3] = (char *)v39 - v11;
  v41 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v40 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v3[11];
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v39[8] = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v39[10] = (char *)v39 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v49 = (char *)v39 - v25;
  v26 = v2 + v3[20];
  swift_beginAccess();
  v27 = v3[12];
  v28 = v3[14];
  v42 = v5;
  v50 = v5;
  v51 = v15;
  v48 = v15;
  v29 = v26;
  v52 = v27;
  v53 = v4;
  v44 = v28;
  v54 = v28;
  v30 = type metadata accessor for ForEach();
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48);
  if (v31(v29, 1, v30) == 1)
  {
    __break(1u);
  }
  else
  {
    v39[13] = v2;
    v32 = v27;
    v43 = v16;
    v45 = v30;
    ForEach.idGenerator.getter();
    v33 = v45;
    swift_endAccess();
    swift_beginAccess();
    v39[7] = v31;
    if (v31(v29, 1, v33) != 1)
    {
      v34 = v40;
      ForEach.data.getter();
      swift_endAccess();
      v35 = v42;
      v36 = v48;
      v50 = v42;
      v51 = v48;
      v39[6] = v29;
      v52 = v32;
      v53 = v4;
      v37 = v44;
      v54 = v44;
      v39[5] = type metadata accessor for ForEach.IDGenerator();
      ForEach.IDGenerator.makeID(data:index:offset:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v35);
      swift_release();
      swift_beginAccess();
      v38 = v3[15];
      v50 = v35;
      v51 = v36;
      v52 = v32;
      v53 = v4;
      v54 = v37;
      v55 = v38;
      type metadata accessor for TableRowForEachState.Item();
    }
  }
  __break(1u);
  JUMPOUT(0x187A8AAB0);
}

void closure #1 in TableRowForEachState.item(at:offset:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v16[6] = a3;
  v16[8] = a2;
  v16[1] = a4;
  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v6 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v6, v7);
  v16[4] = (char *)v16 - v8;
  v10 = v4[12];
  v11 = v4[13];
  v12 = v4[14];
  v20 = v4[10];
  v9 = v20;
  v21 = v5;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v18 = type metadata accessor for ForEach();
  v17 = type metadata accessor for Optional();
  v16[9] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v13);
  v19 = (char *)v16 - v14;
  v15 = v4[15];
  v20 = v9;
  v21 = v5;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = v15;
  type metadata accessor for TableRowForEachState.ChildTraits();
}

void sub_187A8AC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v15 - 408) = a1;
  *(_QWORD *)(v15 - 424) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v15 - 432) = (char *)&a9 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v15 - 328) = v10;
  *(_QWORD *)(v15 - 288) = v10;
  *(_QWORD *)(v15 - 280) = v12;
  *(_QWORD *)(v15 - 272) = v9;
  *(_QWORD *)(v15 - 336) = v11;
  *(_QWORD *)(v15 - 264) = v11;
  *(_QWORD *)(v15 - 344) = v13;
  *(_QWORD *)(v15 - 256) = v13;
  *(_QWORD *)(v15 - 248) = v14;
  type metadata accessor for TableRowForEachState.ChildContent();
}

void sub_187A8ACC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;

  *(_QWORD *)(v8 - 392) = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (_DWORD *)((char *)&v13 - v10);
  if ((*(_BYTE *)(v5 + 180) & 1) == 0)
  {
    v12 = *(_DWORD *)(v5 + 176);
    (*(void (**)(uint64_t, _QWORD, uint64_t, double))(v2 + 16))(v3, *(_QWORD *)(v8 - 384), v6, v9);
    *v11 = v12;
    *(_QWORD *)(v8 - 288) = *(_QWORD *)(v8 - 328);
    *(_QWORD *)(v8 - 280) = v6;
    *(_QWORD *)(v8 - 272) = v4;
    *(_QWORD *)(v8 - 264) = *(_QWORD *)(v8 - 336);
    *(_QWORD *)(v8 - 256) = *(_QWORD *)(v8 - 344);
    *(_QWORD *)(v8 - 248) = v7;
    type metadata accessor for TableRowForEachState.ChildContent();
  }
  __break(1u);
  JUMPOUT(0x187A8B0E0);
}

void TableRowForEachState.ChildTraits.init(forEach:item:traits:itemOffset:itemID:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ForEach();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for TableRowForEachState.ChildTraits();
}

uint64_t sub_187A8B184(int *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;

  *(_QWORD *)(v3 + a1[17]) = v2;
  *(_DWORD *)(v3 + a1[18]) = v1;
  v4 = v3 + a1[19];
  *(_QWORD *)v4 = v8;
  *(_BYTE *)(v4 + 8) = v9 & 1;
  v5 = v3 + a1[20];
  v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, v10, v6);
}

void closure #2 in TableRowForEachState.item(at:offset:)()
{
  type metadata accessor for TableRowForEachState.ChildTraits();
}

uint64_t sub_187A8B238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(a1 + 68);
  swift_retain();
  result = swift_release();
  *(_QWORD *)(v2 + v3) = v1;
  return result;
}

uint64_t implicit closure #2 in TableRowForEachState.item(at:offset:)()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x8000000187BEFB80;
  v0._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t TableRowForEachState.fetchRowsPerElement()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 104);
  v4 = *(_QWORD *)(v2 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v8 = (char *)&v26 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char *)v1 + *(_QWORD *)(v2 + 168);
  if (v16[8] == 1 && !*(_QWORD *)v16)
  {
    v28 = v13;
    v29 = v12;
    v17 = (uint64_t)v1 + *(_QWORD *)(v2 + 160);
    swift_beginAccess();
    v18 = *(_QWORD *)(v2 + 112);
    v30 = v4;
    v31 = *(_OWORD *)(v2 + 88);
    v32 = v3;
    v33 = v18;
    v19 = v17;
    v20 = type metadata accessor for ForEach();
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
    result = v21(v19, 1, v20);
    if ((_DWORD)result == 1)
    {
      __break(1u);
LABEL_12:
      __break(1u);
      return result;
    }
    v27 = v20;
    v23 = v19;
    ForEach.data.getter();
    swift_endAccess();
    v24 = dispatch thunk of Collection.isEmpty.getter();
    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v15, v4);
    if ((v24 & 1) == 0)
    {
      swift_beginAccess();
      result = v21(v23, 1, v27);
      if ((_DWORD)result != 1)
      {
        ForEach.data.getter();
        swift_endAccess();
        dispatch thunk of Collection.startIndex.getter();
        v25(v15, v4);
        TableRowForEachState.item(at:offset:)((uint64_t)v8, 0);
      }
      goto LABEL_12;
    }
  }
  if (v16[8])
    return 0;
  else
    return *(_QWORD *)v16;
}

uint64_t TableRowForEachState.forEachItem(from:do:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  char *v51;
  char *v52;
  void (*v53)(char *, _QWORD *);
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *AssociatedTypeWitness;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  void (*v113)(char *, _QWORD *);
  char *v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v106 = a3;
  v105 = a2;
  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 104);
  v111 = a1;
  v112 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
  v7 = (_QWORD *)v4[10];
  AssociatedTypeWitness = (_QWORD *)swift_getAssociatedTypeWitness();
  v8 = *(AssociatedTypeWitness - 1);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v99 = (char *)&v91 - v10;
  v115 = v6;
  v11 = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v91 - v15;
  v110 = v7;
  v17 = (char *)*(v7 - 1);
  MEMORY[0x1E0C80A78](v18, v19);
  v114 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v91 - v23;
  v108 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v116 = (char *)&v91 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v98 = (char *)&v91 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v109 = (char *)&v91 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v97 = (char *)&v91 - v40;
  result = AGSubgraphIsValid();
  if (!(_DWORD)result)
    return result;
  v96 = v16;
  v95 = v13;
  v123 = 0;
  v42 = TableRowForEachState.fetchRowsPerElement()();
  v107 = v3;
  v104 = v28;
  if ((v43 & 1) == 0)
  {
    v44 = v42;
    if (v42 >= 1)
    {
      v123 = *v111 / v42;
      v45 = v107 + *(_QWORD *)(*(_QWORD *)v107 + 160);
      swift_beginAccess();
      v46 = v4[11];
      v47 = v4[12];
      v48 = v4[14];
      v4 = v110;
      v117 = v110;
      v118 = v46;
      v103 = v46;
      v102 = v47;
      v119 = v47;
      v120 = v112;
      v101 = v48;
      v121 = v48;
      v49 = type metadata accessor for ForEach();
      v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48);
      if (v50(v45, 1, v49) != 1)
      {
        ForEach.data.getter();
        swift_endAccess();
        swift_beginAccess();
        if (v50(v45, 1, v49) != 1)
        {
          v51 = v114;
          ForEach.data.getter();
          swift_endAccess();
          v52 = v109;
          dispatch thunk of Collection.startIndex.getter();
          v53 = (void (*)(char *, _QWORD *))*((_QWORD *)v17 + 1);
          v53(v51, v4);
          v54 = v97;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          v55 = v108;
          (*(void (**)(char *, uint64_t))(v108 + 8))(v52, v11);
          v113 = v53;
          v53(v24, v4);
          v94 = 0;
          v56 = v111;
          v57 = *v111 % v44;
          v58 = v107;
LABEL_17:
          v75 = (uint64_t)v116;
          goto LABEL_18;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
LABEL_15:
    v123 = 0;
    v58 = v107;
    v78 = v107 + *(_QWORD *)(*(_QWORD *)v107 + 160);
    swift_beginAccess();
    v79 = v4[11];
    v80 = v4[12];
    v81 = v4[14];
    v4 = v110;
    v117 = v110;
    v118 = v79;
    v103 = v79;
    v102 = v80;
    v119 = v80;
    v120 = v112;
    v101 = v81;
    v121 = v81;
    v82 = type metadata accessor for ForEach();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v78, 1, v82) != 1)
    {
      v83 = v114;
      ForEach.data.getter();
      swift_endAccess();
      v54 = v97;
      dispatch thunk of Collection.endIndex.getter();
      v113 = (void (*)(char *, _QWORD *))*((_QWORD *)v17 + 1);
      v113(v83, v4);
      v57 = 0;
      v94 = 0;
      v56 = v111;
      v55 = v108;
      goto LABEL_17;
    }
LABEL_28:
    __break(1u);
    JUMPOUT(0x187A8BF68);
  }
  v59 = v3;
  v92 = v12;
  v122 = 0;
  v60 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 160);
  swift_beginAccess();
  v61 = v4[11];
  v62 = v4[12];
  v63 = v4[14];
  v64 = v110;
  v117 = v110;
  v118 = v61;
  v103 = v61;
  v102 = v62;
  v119 = v62;
  v120 = v112;
  v101 = v63;
  v121 = v63;
  v65 = type metadata accessor for ForEach();
  v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48);
  if (v93(v60, 1, v65) == 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  v66 = v114;
  v91 = v60;
  ForEach.data.getter();
  swift_endAccess();
  v67 = v99;
  dispatch thunk of Collection.indices.getter();
  v113 = (void (*)(char *, _QWORD *))*((_QWORD *)v17 + 1);
  v68 = ((uint64_t (*)(char *, _QWORD *))v113)(v66, v64);
  MEMORY[0x1E0C80A78](v68, v69);
  *(&v91 - 4) = v59;
  *(&v91 - 3) = (uint64_t)&v123;
  *(&v91 - 2) = (uint64_t)v111;
  *(&v91 - 1) = (uint64_t)&v122;
  v70 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  v71 = v96;
  Sequence.first(where:)();
  (*(void (**)(char *, _QWORD *))(v8 + 8))(v67, v70);
  v55 = v108;
  v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48))(v71, 1, v11);
  v94 = 0;
  if (v72 == 1)
  {
    v73 = v91;
    swift_beginAccess();
    v74 = v93(v73, 1, v65);
    v75 = (uint64_t)v116;
    v54 = v97;
    if (v74 == 1)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v76 = v114;
    ForEach.data.getter();
    swift_endAccess();
    v17 = v98;
    v4 = v110;
    dispatch thunk of Collection.endIndex.getter();
    v113(v76, v4);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v92);
    v56 = v111;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v17, v11);
  }
  else
  {
    v77 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v17 = v98;
    v77(v98, v71, v11);
    v4 = v110;
    v56 = v111;
    v75 = (uint64_t)v116;
    v54 = v97;
    v77(v97, v17, v11);
  }
  v57 = *v56 - v122;
  v58 = v107;
  if (__OFSUB__(*v56, v122))
  {
    __break(1u);
    goto LABEL_15;
  }
LABEL_18:
  *v56 = v57;
  AssociatedTypeWitness = *(_QWORD **)(v55 + 16);
  ((void (*)(uint64_t, char *, uint64_t))AssociatedTypeWitness)(v75, v54, v11);
  v84 = (char *)(v58 + *(_QWORD *)(*(_QWORD *)v58 + 160));
  v99 = (char *)(v57 & ~(v57 >> 63));
  v98 = v84;
  v85 = v114;
  v86 = v104;
  ((void (*)(char *, uint64_t, uint64_t))AssociatedTypeWitness)(v104, v75, v11);
  swift_beginAccess();
  v117 = v4;
  v118 = v103;
  v119 = v102;
  v120 = v112;
  v121 = v101;
  v87 = type metadata accessor for ForEach();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v84, 1, v87) == 1)
    goto LABEL_28;
  ForEach.data.getter();
  swift_endAccess();
  v88 = v109;
  dispatch thunk of Collection.endIndex.getter();
  v113(v85, v4);
  swift_getAssociatedConformanceWitness();
  v89 = dispatch thunk of static Equatable.== infix(_:_:)();
  v90 = *(void (**)(char *, uint64_t))(v55 + 8);
  v90(v88, v11);
  v90(v86, v11);
  if ((v89 & 1) == 0)
    TableRowForEachState.item(at:offset:)((uint64_t)v116, v123);
  v90(v116, v11);
  v90(v97, v11);
  return 1;
}

void closure #1 in TableRowForEachState.forEachItem(from:do:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  TableRowForEachState.item(at:offset:)(a1, *a3);
}

uint64_t sub_187A8BFB8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t InputValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  result = swift_release();
  if (*(_BYTE *)(v0 + 188) == 1)
    goto LABEL_7;
  InputValue = AGGraphGetInputValue();
  outlined init with copy of TableRowList(InputValue, (uint64_t)v11);
  v6 = v12;
  v7 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  v9 = *v2 + v8;
  if (__OFADD__(*v2, v8))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v10 = *v3;
  if (*v3 >= v9)
  {
    *v2 = v9;
    *v1 &= 1uLL;
  }
  return v10 < v9;
}

uint64_t TableRowForEachState.count()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!AGSubgraphIsValid())
    return 0;
  v8 = TableRowForEachState.fetchRowsPerElement()();
  if ((v9 & 1) != 0)
  {
    v16 = 0;
    v19 = 0;
    MEMORY[0x1E0C80A78](v8, v9);
    *((_QWORD *)&v15 - 2) = &v19;
    *((_QWORD *)&v15 - 1) = v2;
    TableRowForEachState.forEachItem(from:do:)(&v16, (uint64_t)partial apply for closure #1 in TableRowForEachState.count(), (uint64_t)(&v15 - 2));
    return v19;
  }
  else
  {
    v10 = v8;
    v11 = (uint64_t)v2 + *(_QWORD *)(*v2 + 160);
    swift_beginAccess();
    v16 = v4;
    v17 = *(_OWORD *)(v3 + 88);
    v15 = *(_OWORD *)(v3 + 104);
    v18 = v15;
    v12 = type metadata accessor for ForEach();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      ForEach.data.getter();
      swift_endAccess();
      v14 = dispatch thunk of Collection.count.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      result = v14 * v10;
      if ((unsigned __int128)(v14 * (__int128)v10) >> 64 != (v14 * v10) >> 63)
      {
        __break(1u);
        return 0;
      }
    }
  }
  return result;
}

void closure #1 in TableRowForEachState.count()(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t InputValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a4 + 188) != 1)
  {
    InputValue = AGGraphGetInputValue();
    outlined init with copy of TableRowList(InputValue, (uint64_t)v9);
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (!__OFADD__(*a3, v8))
    {
      *a3 += v8;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void TableRowForEachState.Info.Init.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t Value;
  uint64_t v18;
  _QWORD v19[6];

  v12 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v19 - v14;
  v19[1] = a3;
  v19[2] = a4;
  v19[3] = a5;
  v19[4] = a6;
  v19[5] = a7;
  v16 = type metadata accessor for ForEach();
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, Value, v16);
  TableRowForEachState.update(forEach:)((uint64_t)v15, v18);
}

void protocol witness for Rule.value.getter in conformance TableRowForEachState<A, B, C>.Info.Init(uint64_t *a1)
{
  uint64_t v1;

  TableRowForEachState.Info.Init.value.getter(*(_QWORD *)v1, *(unsigned int *)(v1 + 8), a1[2], a1[3], a1[4], a1[5], a1[6]);
}

uint64_t TableRowForEachState.ChildTraits.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  if (*(_DWORD *)(v2 + *(int *)(a1 + 72)) == *MEMORY[0x1E0CFED28])
  {
    result = 0;
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t TableRowForEachState.ChildTraits.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  __n128 v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(_BYTE *, __n128);
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  _BYTE *v41;
  unsigned int (*v42)(_BYTE *, uint64_t, uint64_t);
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  void (*v52)(_BYTE *, uint64_t);
  uint64_t v53;
  char v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _BYTE *v71;
  _BYTE v72[4];
  int v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  void (*v77)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t TupleTypeMetadata2;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];

  v3 = (int *)a1;
  v97[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v85 = &v72[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v80 = &v72[-v9];
  v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v11);
  v13 = &v72[-v12];
  v88 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v72[-v22];
  v29.n128_f64[0] = MEMORY[0x1E0C80A78](v24, v25);
  v30 = &v72[-v26];
  v79 = v3[17];
  v31 = *(_QWORD *)(v2 + v79);
  v89 = v3;
  if (!v31)
  {
    v44 = v88;
    goto LABEL_18;
  }
  v32 = v2 + v3[19];
  v33 = *(_BYTE *)(v32 + 8);
  v34 = *(_QWORD *)(v31 + *(_QWORD *)(*(_QWORD *)v31 + 168));
  v86 = v4;
  v82 = v17;
  v74 = v27;
  v81 = v28;
  if ((v33 & 1) != 0 || *(_QWORD *)v32 != v34)
  {
    *(_QWORD *)v32 = v34;
    *(_BYTE *)(v32 + 8) = 0;
    v73 = 1;
  }
  else
  {
    v73 = 0;
  }
  v35 = v3[20];
  v83 = v2;
  v36 = (_BYTE *)(v2 + v35);
  v37 = v88;
  v38 = *(void (**)(_BYTE *, __n128))(v88 + 16);
  v78 = v36;
  v38(&v72[-v26], v29);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v75 = v31 + *(_QWORD *)(*(_QWORD *)v31 + 128);
  v40 = v86;
  v76 = v39;
  ((void (*)(_BYTE *))v39)(v23);
  v77 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v5 + 56);
  v77(v23, 0, 1, v40);
  v41 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v38)(v13, v30, v10);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v38)(v41, v23, v10);
  v84 = v5;
  v42 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
  if (v42(v13, 1, v40) != 1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v38)(v81, v13, v10);
    if (v42(v41, 1, v40) != 1)
    {
      v47 = v40;
      v48 = v84;
      v49 = v80;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v84 + 32))(v80, v41, v40);
      swift_retain();
      v50 = v81;
      LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = v48;
      v52 = *(void (**)(_BYTE *, uint64_t))(v48 + 8);
      v52(v49, v47);
      v53 = v88;
      v43 = *(void (**)(_BYTE *, uint64_t))(v88 + 8);
      v43(v23, v10);
      v43(v30, v10);
      v44 = v53;
      v4 = v86;
      v52(v50, v86);
      v5 = v51;
      v43(v13, v10);
      v17 = v82;
      if ((TupleTypeMetadata2 & 1) != 0)
      {
        swift_release();
        v2 = v83;
        v3 = v89;
        goto LABEL_17;
      }
LABEL_14:
      v46 = v78;
      v43(v78, v10);
      v76((uint64_t)v46, v75, v4);
      swift_release();
      LODWORD(v31) = 1;
      v77(v46, 0, 1, v4);
      v2 = v83;
      v3 = v89;
      goto LABEL_18;
    }
    v45 = v88;
    v43 = *(void (**)(_BYTE *, uint64_t))(v88 + 8);
    swift_retain();
    v43(v23, v10);
    v43(v30, v10);
    v5 = v84;
    v44 = v45;
    v4 = v86;
    (*(void (**)(_BYTE *, uint64_t))(v84 + 8))(v81, v86);
LABEL_13:
    v17 = v82;
    (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v13, TupleTypeMetadata2);
    goto LABEL_14;
  }
  v43 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
  swift_retain();
  v43(v23, v10);
  v43(v30, v10);
  v44 = v37;
  if (v42(v41, 1, v40) != 1)
  {
    v5 = v84;
    v4 = v86;
    goto LABEL_13;
  }
  v43(v13, v10);
  swift_release();
  v2 = v83;
  v5 = v84;
  v3 = v89;
  v4 = v86;
  v17 = v82;
LABEL_17:
  LODWORD(v31) = v73;
LABEL_18:
  if (*(_DWORD *)(v2 + v3[18]) == *MEMORY[0x1E0CFED28])
  {
    v55 = 1;
  }
  else
  {
    AGGraphGetValue();
    v55 = (v54 & 1) == 0;
  }
  if (AGGraphGetOutputValue() && v55)
  {
    v56 = swift_bridgeObjectRetain();
    v57 = (uint64_t)v89;
    v97[0] = v56;
    if (!(_DWORD)v31)
      goto LABEL_32;
  }
  else
  {
    v57 = (uint64_t)v89;
    TableRowForEachState.ChildTraits.traits.getter((uint64_t)v89, v97);
    if (v97[0])
    {
      if (!(_DWORD)v31)
      {
LABEL_32:
        if (!AGGraphGetOutputValue())
        {
          v91 = v97[0];
          AGGraphSetOutputValue();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      ViewTraitCollection.init()();
      v97[0] = v91;
      if (!(_DWORD)v31)
        goto LABEL_32;
    }
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 16))(v17, v2 + *(int *)(v57 + 80), v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v17, v10);
    goto LABEL_32;
  }
  v58 = v57;
  v59 = v85;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v85, v17, v4);
  v60 = v2 + *(int *)(v58 + 76);
  if (*(_BYTE *)(v60 + 8) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v59, v4);
    goto LABEL_32;
  }
  v62 = *(_QWORD *)v60;
  v63 = *(_QWORD *)(v2 + v79);
  v64 = v5;
  if (v63)
    v63 = *(_QWORD *)(v63 + *(_QWORD *)(*(_QWORD *)v63 + 176));
  v65 = v89;
  v91 = v63;
  LOBYTE(v92) = 0;
  ViewTraitCollection.subscript.setter();
  v91 = v62;
  LOBYTE(v92) = 0;
  ViewTraitCollection.subscript.setter();
  v66 = *((_QWORD *)v65 + 2);
  v67 = *((_QWORD *)v65 + 4);
  v68 = *((_QWORD *)v65 + 5);
  v69 = *((_QWORD *)v65 + 6);
  v91 = v66;
  v92 = v4;
  v93 = v67;
  v94 = v68;
  v95 = v69;
  type metadata accessor for ForEach();
  ForEach.idGenerator.getter();
  v90 = v96;
  v91 = v66;
  v92 = v4;
  v93 = v67;
  v94 = v68;
  v95 = v69;
  type metadata accessor for ForEach.IDGenerator();
  v70 = ForEach.IDGenerator.isConstant.getter();
  swift_release();
  if ((v70 & 1) != 0)
  {
    v91 = v62;
    LOBYTE(v92) = 0;
    _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x1E0DEB428], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE3430]);
    lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
    ViewTraitCollection.subscript.setter();
    v71 = v85;
  }
  else
  {
    v71 = v85;
    ViewTraitCollection.setTag<A>(for:value:)();
  }
  v91 = v97[0];
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v64 + 8))(v71, v4);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TableRowForEachState<A, B, C>.ChildTraits(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowForEachState<A, B, C>.ChildTraits, a1);
  return static AsyncAttribute.flags.getter();
}

void TableRowForEachState.ChildContent.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[6];
  uint64_t AssociatedTypeWitness;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v20 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 8);
  v5 = *(_QWORD *)(v3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v6);
  v18[2] = (char *)v18 - v7;
  v18[3] = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v18[1] = v4;
  v10 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v10 - 8);
  v23 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v24 = (char *)v18 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v18[5] = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  specialized TableRowForEachState.ChildContent.info.getter();
}

void sub_187A8CE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)(v7 - 264) = v3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v7 - 256) = v1;
  *(_QWORD *)(v7 - 320) = v8;
  v8(v0, v1, v4);
  swift_beginAccess();
  v9 = *(_QWORD *)(v4 + 24);
  swift_retain();
  *(_QWORD *)(v7 - 176) = v5;
  *(_QWORD *)(v7 - 168) = v9;
  *(_QWORD *)(v7 - 160) = v2;
  *(_QWORD *)(v7 - 152) = v6;
  v10 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v7 - 208) = v10;
  *(_OWORD *)(v7 - 144) = v10;
  type metadata accessor for TableRowForEachState.Item();
}

uint64_t sub_187A8CED4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = *(_QWORD *)(v10 - 208);
  MEMORY[0x18D75CA24](v1, v3, v2, a1, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v12 = *(_QWORD *)(v10 - 128);
  if (!v12)
  {
    swift_endAccess();
    return swift_release();
  }
  swift_endAccess();
  if (*(_DWORD *)(v12 + *(_QWORD *)(*(_QWORD *)v12 + 184)) != *(_DWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 192)))
  {
    swift_release();
    return swift_release();
  }
  v13 = v7 + *(_QWORD *)(*(_QWORD *)v7 + 160);
  swift_beginAccess();
  *(_QWORD *)(v10 - 176) = v8;
  *(_QWORD *)(v10 - 168) = v2;
  *(_QWORD *)(v10 - 208) = v6;
  *(_QWORD *)(v10 - 160) = v6;
  *(_QWORD *)(v10 - 152) = v9;
  *(_QWORD *)(v10 - 144) = v11;
  v14 = type metadata accessor for ForEach();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    ForEach.data.getter();
    swift_endAccess();
    v16 = v12 + *(_QWORD *)(*(_QWORD *)v12 + 160);
    swift_beginAccess();
    v17 = *(_QWORD *)(v10 - 288);
    v18 = *(_QWORD *)(v10 - 304);
    v19 = *(_QWORD *)(v10 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v16, v19);
    v20 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
    (*(void (**)(_QWORD))(*(_QWORD *)(v10 - 232) + 16))(*(_QWORD *)(v10 - 216));
    v20(v10 - 176, 0);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 296) + 8))(v5, v8);
    v21 = *(_QWORD *)(v10 - 280);
    v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 - 320))(v21, *(_QWORD *)(v10 - 256), v4);
    v24 = MEMORY[0x1E0C80A78](v22, v23);
    v25 = *(_QWORD *)(v10 - 216);
    v33 = v7;
    v34 = v25;
    v26 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowForEachState<A, B, C>.ChildContent, v4, v24);
    v27 = *(_QWORD *)(v10 - 248);
    v28 = *(_QWORD *)(v10 - 208);
    StatefulRule.withObservation<A>(do:)();
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 264) + 8))(v21, v4);
    MEMORY[0x1E0C80A78](v29, v30);
    v33 = v4;
    v34 = v26;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v27, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v32, v28, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v31);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 240) + 8))(v27, v28);
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v10 - 232) + 8))(*(_QWORD *)(v10 - 216), *(_QWORD *)(v10 - 224));
  }
  return result;
}

uint64_t closure #1 in TableRowForEachState.ChildContent.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void (*v6)(uint64_t);

  v3 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 160);
  swift_beginAccess();
  v4 = type metadata accessor for ForEach();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (void (*)(uint64_t))specialized ForEach.content.getter(v4);
    swift_retain();
    v6(a2);
    return swift_release();
  }
  return result;
}

uint64_t TableRowForEachState.deinit()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 128);
  v8[6] = *(_OWORD *)(v0 + 112);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 160);
  v2 = *(_OWORD *)(v0 + 64);
  v8[2] = *(_OWORD *)(v0 + 48);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 96);
  v8[4] = *(_OWORD *)(v0 + 80);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 32);
  v8[0] = *(_OWORD *)(v0 + 16);
  v8[1] = v4;
  outlined release of _TableRowInputs((uint64_t)v8);

  v5 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  type metadata accessor for ForEach();
  v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableRowForEachState.__deallocating_deinit()
{
  return CustomPreviewResponder.__deallocating_deinit((void (*)(void))TableRowForEachState.deinit);
}

void static ForEach<>._makeRows(content:inputs:)()
{
  type metadata accessor for TableRowForEachState();
}

void sub_187A8D43C()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = v0[7];
  v1[6] = v0[6];
  v1[7] = v3;
  v1[8] = v0[8];
  v4 = v0[3];
  v1[2] = v0[2];
  v1[3] = v4;
  v5 = v0[5];
  v1[4] = v0[4];
  v1[5] = v5;
  v6 = v0[1];
  *v1 = *v0;
  v1[1] = v6;
  outlined retain of _TableRowInputs(v2 - 256);
  swift_allocObject();
  TableRowForEachState.init(inputs:)();
}

void sub_187A8D494()
{
  swift_retain();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for TableRowForEachState.Info();
}

void sub_187A8D4F4()
{
  type metadata accessor for TableRowForEachState.Info.Init();
}

void sub_187A8D514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;

  a27 = a1;
  a28 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TableRowForEachState<A, B, C>.Info.Init, a1);
  v32 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&a14, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)&a24, a1, MEMORY[0x1E0DEDCE8], v32, MEMORY[0x1E0DEDD18], v33);
  swift_release();
  *(_DWORD *)(v30 + 176) = a30;
  *(_BYTE *)(v30 + 180) = 0;
  LODWORD(a30) = a11;
  swift_retain();
  v34 = _GraphValue.value.getter();
  a14 = v30;
  a15 = v34;
  type metadata accessor for ForEach<>.MakeList();
}

uint64_t sub_187A8D5C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _DWORD v9[12];
  _QWORD v10[10];
  uint64_t v11;
  int v12;

  v10[2] = a1;
  v10[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.MakeList, a1);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)v10, a1, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  swift_release();
  v6 = v11;
  *(_DWORD *)(v1 + 184) = v11;
  *(_BYTE *)(v1 + 188) = 0;
  PreferencesOutputs.init()();
  v7 = *(_DWORD *)(v2 - 112);
  v11 = *(_QWORD *)(v2 - 120);
  v12 = v7;
  v9[8] = v6;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

void type metadata accessor for TableRowForEachState()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t static ForEach<>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[9];
  uint64_t v13;

  v7 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v7;
  v12[8] = *(_OWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 144);
  v8 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v8;
  v9 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v9;
  v10 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v10;
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a7 + 64))(v12, a4, a7) & 1;
}

void ForEach<>.MakeList.value.getter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t Value;
  uint64_t v19;
  _DWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v22 = a8;
  v20[3] = a2;
  v21 = a7;
  v13 = type metadata accessor for ForEach();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v20 - v15;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v17 = type metadata accessor for ForEach();
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, Value, v17);
  TableRowForEachState.update(forEach:)((uint64_t)v16, v19);
}

uint64_t sub_187A8D868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = &protocol witness table for ForEach<A, B, C><>.Generator;
  *(_QWORD *)v1 = v2;
  *(_DWORD *)(v1 + 8) = v3;
  return swift_retain();
}

void protocol witness for Rule.value.getter in conformance ForEach<A, B, C><>.MakeList(uint64_t *a1)
{
  uint64_t v1;

  ForEach<>.MakeList.value.getter(*(_QWORD *)v1, *(_DWORD *)(v1 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t ForEach<>.SynthesizedForEachRowIDs.endIndex.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t ForEach<>.SynthesizedForEachRowIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v22 = a3;
  v5 = *(_QWORD *)(a2 + 24);
  v23 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v20 - v13;
  Collection.index(atOffset:)();
  v15 = *(_QWORD *)(v3 + *(int *)(a2 + 68));
  v16 = *(_QWORD *)(a2 + 32);
  v17 = *(_QWORD *)(a2 + 48);
  v24 = v10;
  v25 = v5;
  v26 = v16;
  v27 = v9;
  v28 = v17;
  v29 = v15;
  type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  v18 = v22;
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  *(_BYTE *)(v18 + 40) = 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs);
  return RandomAccessCollection<>.index(before:)();
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a4);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a3);
  return RandomAccessCollection<>.distance(from:to:)();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ForEach<>.SynthesizedForEachRowIDs.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = ForEach<>.SynthesizedForEachRowIDs.subscript.read(v6, *a2, a3);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*ForEach<>.SynthesizedForEachRowIDs.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  void *v6;

  v6 = malloc(0x29uLL);
  *a1 = v6;
  ForEach<>.SynthesizedForEachRowIDs.subscript.getter(a2, a3, (uint64_t)v6);
  return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a1);
  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs);
  return RandomAccessCollection<>.index(after:)();
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v4, a1);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a1);
  result = type metadata accessor for IndexingIterator();
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs, a1);
  return Collection._copyToContiguousArray()();
}

uint64_t ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD v13[5];
  int v14;
  uint64_t v15;

  v13[2] = a8;
  v13[3] = a12;
  v13[4] = a3;
  v14 = a4;
  v15 = a1;
  return TableRowForEachState.forEachItem(from:do:)(a2, (uint64_t)partial apply for closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:), (uint64_t)v13) & 1;
}

uint64_t closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t InputValue;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  if (*(_BYTE *)(a3 + 188) == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    InputValue = AGGraphGetInputValue();
    outlined init with copy of TableRowList(InputValue, (uint64_t)v14);
    outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
    v12 = v16;
    v13 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    LOBYTE(a7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(a5, v10, a6, a7, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return a7 & 1;
  }
  return result;
}

void ForEach<>.Generator.rowIDs.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for ForEach<>.SynthesizedForEachRowIDs();
}

uint64_t sub_187A8E040(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t InputValue;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, uint64_t, uint64_t);
  uint64_t v41;
  _BYTE v42[96];

  MEMORY[0x1E0C80A78](a1, a2);
  v11 = &v42[-v10];
  static Semantics.v5.getter();
  v12 = 0;
  if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    return v12;
  *(_QWORD *)(v9 - 200) = v3;
  v13 = TableRowForEachState.fetchRowsPerElement()();
  if ((v14 & 1) != 0)
    return 0;
  v15 = v13;
  *(_QWORD *)(v9 - 208) = v4;
  *(_QWORD *)(v9 - 152) = 0;
  *(_QWORD *)(v9 - 144) = 0;
  MEMORY[0x1E0C80A78](v13, v14);
  *(_QWORD *)&v42[-16] = v9 - 144;
  result = TableRowForEachState.forEachItem(from:do:)((uint64_t *)(v9 - 152), (uint64_t)partial apply for closure #1 in ForEach<>.Generator.rowIDs.getter, (uint64_t)&v42[-32]);
  v17 = *(_QWORD *)(v9 - 144);
  if (!v17)
  {
    type metadata accessor for WrappedTableRowIDs<[TableRowID]>(0);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
    return v12;
  }
  if (v15 != 1)
  {
LABEL_20:
    swift_release();
    return 0;
  }
  if (v2[188] == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  InputValue = AGGraphGetInputValue();
  outlined init with copy of TableRowList(InputValue, v9 - 136);
  v19 = *(_QWORD *)(v9 - 112);
  v20 = *(_QWORD *)(v9 - 104);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v9 - 136), v19);
  v21 = *(_QWORD *)(v20 + 24);
  *(_QWORD *)(v9 - 224) = v17;
  *(_QWORD *)(v9 - 216) = v21;
  swift_retain();
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 - 216))(v19, v20);
  outlined destroy of TableRowList(v9 - 136);
  if (!v22)
  {
    swift_release();
    goto LABEL_20;
  }
  v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 88);
  *(_QWORD *)(v9 - 216) = v23;
  v24 = swift_retain();
  v25 = v23(v24);
  v26 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 96);
  *(_QWORD *)(v9 - 240) = v26();
  *(_QWORD *)(v9 - 232) = (*(uint64_t (**)(void))(v9 - 216))();
  result = v26();
  v27 = *(_QWORD *)(v9 - 232);
  *(_QWORD *)(v9 - 232) = v25;
  if (v25 < v27 || result < v25)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v29 = (*(uint64_t (**)(uint64_t))(v9 - 216))(result);
  v30 = v26();
  *(_QWORD *)(v9 - 216) = v22;
  result = swift_release();
  v31 = *(_QWORD *)(v9 - 240);
  if (v31 < v29 || v30 < v31)
    goto LABEL_25;
  v32 = *(_QWORD *)(v9 - 232);
  v33 = __OFSUB__(v31, v32);
  v34 = v31 - v32;
  v36 = *(_QWORD *)(v9 - 208);
  v35 = *(_QWORD *)(v9 - 200);
  if (v33)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v34 != 1)
  {
    swift_release();
    swift_release();
    goto LABEL_20;
  }
  v37 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 160)];
  swift_beginAccess();
  *(_QWORD *)(v9 - 136) = v7;
  *(_QWORD *)(v9 - 128) = v6;
  v38 = *(_QWORD *)(v9 - 184);
  *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 192);
  *(_QWORD *)(v9 - 112) = v38;
  *(_QWORD *)(v9 - 104) = v35;
  v39 = type metadata accessor for ForEach();
  v40 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48);
  result = v40(v37, 1, v39);
  if ((_DWORD)result != 1)
  {
    ForEach.data.getter();
    swift_endAccess();
    swift_beginAccess();
    result = v40(v37, 1, v39);
    if ((_DWORD)result != 1)
    {
      ForEach.idGenerator.getter();
      swift_endAccess();
      swift_release();
      swift_release();
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v11, v8, v7);
      *(_QWORD *)(v9 - 136) = v7;
      *(_QWORD *)(v9 - 128) = v6;
      v41 = *(_QWORD *)(v9 - 184);
      *(_QWORD *)(v9 - 120) = *(_QWORD *)(v9 - 192);
      *(_QWORD *)(v9 - 112) = v41;
      *(_QWORD *)(v9 - 104) = *(_QWORD *)(v9 - 200);
      *(_QWORD *)(v9 - 96) = v36;
      type metadata accessor for ForEach<>.SynthesizedForEachRowIDs();
    }
    goto LABEL_29;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance ForEach<A, B, C><>.Generator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  return ForEach<>.Generator.visitRows<A>(applying:from:)(a1, a2, *(_QWORD *)v5, *(_DWORD *)(v5 + 8), a5[2], a5[3], a5[4], a3, a5[5], a5[6], a5[7], a4) & 1;
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(_QWORD *a1, uint64_t a2)
{
  return protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ForEach<>.Generator.count.getter);
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance ForEach<A, B, C><>.Generator(_QWORD *a1, uint64_t a2)
{
  return protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ForEach<>.Generator.rowIDs.getter);
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(*(_QWORD *)v3, *(unsigned int *)(v3 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

void protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> ForEach<A, B, C>()
{
  static ForEach<>._makeRows(content:inputs:)();
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ForEach<>._containsOutlineSymbol(inputs:)(a1, a2, a3, *(_QWORD *)(a2 + 32), a5, a6, *(_QWORD *)(a3 - 8));
}

void ForEach<>.init<>(_:content:)()
{
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void type metadata accessor for TableRowForEachState.Info()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableRowForEachState.Info.Init()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187A8E5D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for DynamicTableRowContent.Data : Collection in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 8);
}

uint64_t type metadata completion function for TableRowForEachState()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for ForEach();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t type metadata completion function for TableRowForEachState.Item()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

void type metadata accessor for TableRowForEachState.Item()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t dispatch thunk of DynamicTableRowContent.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *type metadata accessor for TableRowElementCount()
{
  return &unk_1E1AD5300;
}

void base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.Info.Init()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187A8E868()
{
  return 56;
}

__n128 sub_187A8E874(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void type metadata accessor for ForEach<>.SynthesizedForEachRowIDs()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.rowIDs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  **(_QWORD **)(v2 + 16) = a2;
  swift_retain();
  swift_release();
  return 0;
}

void partial apply for closure #1 in TableRowForEachState.forEachItem(from:do:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in TableRowForEachState.forEachItem(from:do:)(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_187A8E8E8(char a1)
{
  return a1 & 1;
}

uint64_t *specialized TableRowForEachState.Item.init(id:rows:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t *v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;

  v16 = *v9;
  swift_weakInit();
  *((_BYTE *)v9 + *(_QWORD *)(*v9 + 200)) = 0;
  *((_BYTE *)v9 + *(_QWORD *)(*v9 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 88) - 8) + 32))((uint64_t)v9 + *(_QWORD *)(*v9 + 128), a1);
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 + 136)) = a2;
  swift_weakAssign();
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 + 152)) = a3;
  v17 = (uint64_t)v9 + *(_QWORD *)(*v9 + 160);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v17, a4, AssociatedTypeWitness);
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 + 168)) = a5;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 + 176)) = a6;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 + 184)) = a7;
  *((_BYTE *)v9 + *(_QWORD *)(*v9 + 192)) = a9;
  return v9;
}

uint64_t partial apply for implicit closure #2 in TableRowForEachState.item(at:offset:)()
{
  return implicit closure #2 in TableRowForEachState.item(at:offset:)();
}

void partial apply for closure #2 in TableRowForEachState.item(at:offset:)()
{
  closure #2 in TableRowForEachState.item(at:offset:)();
}

void type metadata accessor for TableRowForEachState.ChildTraits()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for TableRowForEachState.ChildContent()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in TableRowForEachState.count()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in TableRowForEachState.count()(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(a1, a2, *(_QWORD *)(v2 + 32), *(unsigned int *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t getEnumTagSinglePayload for TableRowForEachState.ChildContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A8EB5C + 4 * byte_187C85030[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for TableRowForEachState.ChildContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata completion function for TableRowForEachState.ChildTraits()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableRowForEachState.ChildTraits(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  unsigned int (*v33)(const void *, uint64_t, uint64_t);
  uint64_t v34;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84))
    v9 = *(_QWORD *)(v7 + 64);
  else
    v9 = *(_QWORD *)(v7 + 64) + 1;
  v10 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  v11 = v10 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0;
  if (v11
    && (v12 = *(_QWORD *)(v6 + 64),
        v13 = (((((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8,
        v14 = v8 + 9,
        ((v8 + 9 + ((((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v8)
      + v9 <= 0x18))
  {
    v15 = ~v8;
    v16 = v13 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v17 = (_QWORD *)(((unint64_t)v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    v18 = (_QWORD *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8);
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
    *v22 = *v23;
    *(_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v4 + v16 + 7) & 0xFFFFFFFFFFFFF8);
    v25 = (_QWORD *)(((unint64_t)a2 + v16 + 7) & 0xFFFFFFFFFFFFF8);
    *v24 = *v25;
    v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFF8);
    v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = ((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8;
    v29 = ((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)v29;
    *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
    *(_QWORD *)v28 = v30;
    v31 = (void *)((v14 + v28) & v15);
    v32 = (const void *)((v14 + v29) & v15);
    v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v33(v32, 1, v5))
    {
      memcpy(v31, v32, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v31, v32, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v31, 0, 1, v5);
    }
  }
  else
  {
    v34 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v34 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + 7;
  swift_release();
  swift_release();
  swift_release();
  v6 = ((a1
       + (((((((v5 & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFF8)
     + 11;
  swift_release();
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + (((v6 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 9) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v9, v7);
  return result;
}

uint64_t initializeWithCopy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t);
  size_t v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v16 = a1 + v15 + 7;
  v17 = (_QWORD *)((a2 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v16 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v16 = *v17;
  v18 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFF8);
  v19 = (_DWORD *)((v16 + 11) & 0xFFFFFFFFFFFFF8);
  *v19 = *v18;
  v20 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = (_BYTE)v14;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (void *)((v24 + 9 + v20) & ~v24);
  v26 = (const void *)((v24 + 9 + v21) & ~v24);
  v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v27(v26, 1, v22))
  {
    if (*(_DWORD *)(v23 + 84))
      v28 = *(_QWORD *)(v23 + 64);
    else
      v28 = *(_QWORD *)(v23 + 64) + 1;
    memcpy(v25, v26, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  size_t v30;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_QWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  v11 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  swift_retain();
  swift_release();
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8);
  *v13 = *v14;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8);
  v15 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v16 = a1 + v15 + 7;
  v17 = a2 + v15 + 7;
  v18 = (v17 & 0xFFFFFFFFFFFFF8) + 11;
  *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFF8);
  v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v19 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v18 & 0xFFFFFFFFFFFFF8);
  v20 = ((v19 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((v18 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = v22;
  v23 = *(_QWORD *)(a3 + 24);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (void *)((v25 + 9 + v20) & ~v25);
  v27 = (void *)((v25 + 9 + v21) & ~v25);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v18) = v28(v26, 1, v23);
  v29 = v28(v27, 1, v23);
  if ((_DWORD)v18)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v26, v27, v23);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
      return a1;
    }
  }
  else
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v26, v27, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  }
  if (*(_DWORD *)(v24 + 84))
    v30 = *(_QWORD *)(v24 + 64);
  else
    v30 = *(_QWORD *)(v24 + 64) + 1;
  memcpy(v26, v27, v30);
  return a1;
}

uint64_t initializeWithTake for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v15 = a1 + v14 + 7;
  v16 = (_QWORD *)((a2 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  v15 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v15 = *v16;
  v17 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFF8);
  v18 = (_DWORD *)((v15 + 11) & 0xFFFFFFFFFFFFF8);
  *v18 = *v17;
  v19 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v13) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = (_BYTE)v13;
  v21 = *(_QWORD *)(a3 + 24);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (void *)((v23 + 9 + v19) & ~v23);
  v25 = (const void *)((v23 + 9 + v20) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v25, 1, v21))
  {
    if (*(_DWORD *)(v22 + 84))
      v26 = *(_QWORD *)(v22 + 64);
    else
      v26 = *(_QWORD *)(v22 + 64) + 1;
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v24, v25, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t (*v27)(void *, uint64_t, uint64_t);
  int v28;
  size_t v29;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64) + 7;
  v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  swift_release();
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_QWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  swift_release();
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  swift_release();
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v14 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v15 = a1 + v14 + 7;
  v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  v16 += 11;
  *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) = v17;
  v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v18 & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFF8);
  v19 = ((v18 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((v16 & 0xFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = v21;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (void *)((v24 + 9 + v19) & ~v24);
  v26 = (void *)((v24 + 9 + v20) & ~v24);
  v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v12) = v27(v25, 1, v22);
  v28 = v27(v26, 1, v22);
  if ((_DWORD)v12)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v25, v26, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      return a1;
    }
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v25, v26, v22);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v25, v22);
  }
  if (*(_DWORD *)(v23 + 84))
    v29 = *(_QWORD *)(v23 + 64);
  else
    v29 = *(_QWORD *)(v23 + 64) + 1;
  memcpy(v25, v26, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowForEachState.ChildTraits(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = v9;
  if (v8)
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  if (!a2)
    return 0;
  v12 = *(_QWORD *)(v4 + 64);
  v13 = (((((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = v14 + 9;
  v16 = a2 - v10;
  if (a2 <= v10)
    goto LABEL_33;
  v17 = v11
      + ((v15 + ((((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v21 < 2)
    {
LABEL_33:
      if (v6 >= v9)
      {
        if (v5 < 0x7FFFFFFF)
        {
          v25 = *(_QWORD *)((a1 + v12 + 7) & 0xFFFFFFFFFFFFF8);
          if (v25 >= 0xFFFFFFFF)
            LODWORD(v25) = -1;
          return (v25 + 1);
        }
        else
        {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
      }
      else
      {
        v24 = (*(uint64_t (**)(unint64_t))(v7 + 48))((v15
                                                                     + ((((((a1 + v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
        if (v24 >= 2)
          return v24 - 1;
        else
          return 0;
      }
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_33;
LABEL_24:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = v17;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v10 + v22 + 1;
}

void storeEnumTagSinglePayload for TableRowForEachState.ChildTraits(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v13;
  v14 = ((*(unsigned __int8 *)(v9 + 80)
        + 9
        + ((((((((((((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 11) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + v13;
  v15 = a3 >= v12;
  v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 > 3)
    {
      v6 = 1u;
      if (v12 < a2)
        goto LABEL_22;
      goto LABEL_16;
    }
    v17 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v6 = 4u;
      if (v12 < a2)
      {
LABEL_22:
        v18 = ~v12 + a2;
        if (v14 < 4)
        {
          if ((_DWORD)v14)
          {
            v19 = v18 & ~(-1 << (8 * v14));
            bzero(a1, v14);
            if ((_DWORD)v14 == 3)
            {
              *a1 = v19;
              *((_BYTE *)a1 + 2) = BYTE2(v19);
            }
            else if ((_DWORD)v14 == 2)
            {
              *a1 = v19;
            }
            else
            {
              *(_BYTE *)a1 = v19;
            }
          }
        }
        else
        {
          bzero(a1, v14);
          *(_DWORD *)a1 = v18;
        }
        __asm { BR              X10 }
      }
LABEL_16:
      __asm { BR              X6 }
    }
    if (v17 >= 0x100)
      v6 = 2;
    else
      v6 = v17 > 1;
  }
  if (v12 < a2)
    goto LABEL_22;
  goto LABEL_16;
}

uint64_t type metadata completion function for ForEach<>.SynthesizedForEachRowIDs()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ForEach<>.SynthesizedForEachRowIDs(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A8FF38 + 4 * byte_187C85050[v10]))();
  }
}

void storeEnumTagSinglePayload for ForEach<>.SynthesizedForEachRowIDs(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187A900B8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A9013CLL);
}

void sub_187A900C0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A900C8);
  JUMPOUT(0x187A9013CLL);
}

void sub_187A90110()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A9013CLL);
}

void sub_187A90118()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A9013CLL);
}

uint64_t sub_187A90120(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x187A9012CLL);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x187A9013CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void base witness table accessor for Sequence in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8C0]);
}

void base witness table accessor for Collection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB890]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE28], a1, &v3);
}

void base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.ChildTraits()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.ChildContent()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x1E0DEB8B8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ForEach<A, B, C><>.SynthesizedForEachRowIDs);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0DEDE40], a1, &v3);
}

void specialized TableRowForEachState.ChildContent.info.getter()
{
  type metadata accessor for TableRowForEachState.Info();
}

uint64_t sub_187A90350()
{
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TableRowForEachState.ChildContent.updateValue()()
{
  uint64_t v0;

  return closure #1 in TableRowForEachState.ChildContent.updateValue()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t EnvironmentValues.managedObjectContext.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.managedObjectContext : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

void key path setter for EnvironmentValues.managedObjectContext : EnvironmentValues(id *a1)
{
  id v1;

  v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

uint64_t EnvironmentValues.managedObjectContext.setter(void *a1)
{
  uint64_t v1;
  id v3;

  type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {

  }
  return swift_release();
}

void (*EnvironmentValues.managedObjectContext.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[2] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues.managedObjectContext.modify;
}

void EnvironmentValues.managedObjectContext.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(id *)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  v6 = v5;
  v7 = v6;
  if ((a2 & 1) != 0)
  {
    v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

id one-time initialization function for defaultValue()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97B88]), sel_initWithConcurrencyType_, 2);
  static NSManagedObjectContextEnvironmentKey.defaultValue = (uint64_t)result;
  return result;
}

id protocol witness for static EnvironmentKey.defaultValue.getter in conformance NSManagedObjectContextEnvironmentKey@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = (void *)static NSManagedObjectContextEnvironmentKey.defaultValue;
  *a1 = static NSManagedObjectContextEnvironmentKey.defaultValue;
  return v2;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance NSManagedObjectContextEnvironmentKey()
{
  type metadata accessor for NSManagedObjectContext();
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t sub_187A90978@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

void sub_187A909B0(id *a1)
{
  id v1;

  v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

ValueMetadata *type metadata accessor for NSManagedObjectContextEnvironmentKey()
{
  return &type metadata for NSManagedObjectContextEnvironmentKey;
}

unint64_t type metadata accessor for NSManagedObjectContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSManagedObjectContext;
  if (!lazy cache variable for type metadata for NSManagedObjectContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v5)(_OWORD *, _QWORD);
  __int128 *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v12 = a3;
  swift_bridgeObjectRetain();
  if (!PreferenceKeys.endIndex.getter())
    return swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
  while (1)
  {
    v5 = (void (*)(_OWORD *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
    v10 = *v6;
    v5(v11, 0);
    v7 = v13;
    *(_QWORD *)&v11[0] = v12;
    swift_bridgeObjectRetain();
    result = PreferenceKeys.endIndex.getter();
    if (v7 < 0 || v7 >= result)
      break;
    v9 = v7 + 1;
    v13 = v9;
    swift_bridgeObjectRelease();
    v11[0] = v10;
    a1(v11);
    if (v3 || v9 == PreferenceKeys.endIndex.getter())
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static MapKitPreferenceKeys.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return MEMORY[0x18D7579C0](&v5, &v4) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MapKitPreferenceKeys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v4 = *a2;
  v5 = v2;
  return MEMORY[0x18D7579C0](&v5, &v4) & 1;
}

uint64_t MapKitPreferencesInputs.init(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PreferencesInputs.hostKeys.getter();
  swift_bridgeObjectRelease();
  result = PreferencesInputs.init(hostKeys:)();
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t MapKitPreferencesInputs.contains<A>(_:)()
{
  return PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1;
}

uint64_t MapKitPreferencesInputs.visitKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t, double);
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for VisitKeysVisitor(0, v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = &v22[-v17];
  v19 = *v3;
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v7 + 16);
  v20(v9, a1, a2, v16);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v18, v9, a2);
  v23 = a2;
  v24 = a3;
  v25 = v18;
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)((void (*)(_OWORD *))partial apply for closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:), (uint64_t)v22, v19);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _BYTE *, uint64_t))v20)(a1, v18, a2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v18, v13);
}

uint64_t type metadata accessor for VisitKeysVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisitKeysVisitor);
}

uint64_t closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v6 = a1[1];
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
  v8 = type metadata accessor for VisitKeysVisitor(0, a3, a4, a4);
  v9 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VisitKeysVisitor<A>, v8);
  return v7(a2, v8, v9, v5, v6);
}

uint64_t partial apply for closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t MapKitPreferencesOutputs.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = PreferencesOutputs.init()();
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t MapKitPreferencesOutputs.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  int v14;

  v7 = *((_DWORD *)v3 + 2);
  v13 = *v3;
  v14 = v7;
  v8 = PreferencesOutputs.subscript.getter();
  LODWORD(v13) = v8;
  BYTE4(v13) = BYTE4(v8) & 1;
  v12[2] = a1;
  v12[3] = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  v9 = type metadata accessor for _GraphValue();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in MapKitPreferencesOutputs.subscript.getter, (uint64_t)v12, MEMORY[0x1E0DEDCE8], v9, v10, a3);
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.subscript.getter()
{
  swift_getAssociatedTypeWitness();
  return _GraphValue.init(_:)();
}

uint64_t MapKitPreferencesOutputs.subscript.setter(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];
  int v9;
  char v10;
  int v11;
  char v12;

  v4 = *((_BYTE *)a1 + 4);
  v9 = *a1;
  v10 = v4;
  v8[2] = a3;
  v8[3] = a4;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  type metadata accessor for Optional();
  v5 = type metadata accessor for Attribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in MapKitPreferencesOutputs.subscript.setter, (uint64_t)v8, MEMORY[0x1E0DEDCE8], v5, v6, (uint64_t)&v11);
  LOBYTE(v9) = v12;
  return PreferencesOutputs.subscript.setter();
}

uint64_t closure #1 in MapKitPreferencesOutputs.subscript.setter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  result = _GraphValue.value.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.subscript.setter@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in MapKitPreferencesOutputs.subscript.setter(a1);
}

void (*MapKitPreferencesOutputs.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *v9 = a2;
  v9[1] = a3;
  MapKitPreferencesOutputs.subscript.getter(a3, a4, (uint64_t)(v9 + 4));
  return MapKitPreferencesOutputs.subscript.modify;
}

void MapKitPreferencesOutputs.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  char v10;
  int v11;
  char v12;

  v3 = *a1;
  v4 = *((_BYTE *)*a1 + 36);
  v5 = (*a1)[2];
  v6 = **a1;
  v7 = (*a1)[1];
  if ((a2 & 1) != 0)
  {
    v9 = *((_DWORD *)*a1 + 8);
    v10 = v4;
    v8 = &v9;
  }
  else
  {
    v11 = *((_DWORD *)*a1 + 8);
    v12 = v4;
    v8 = &v11;
  }
  MapKitPreferencesOutputs.subscript.setter(v8, v6, v7, v5);
  free(v3);
}

uint64_t MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)()
{
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a1(&v2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  return _GraphValue.value.getter();
}

uint64_t partial apply for implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)()
{
  uint64_t v0;

  return implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(*(void (**)(uint64_t *__return_ptr))(v0 + 32));
}

uint64_t MapKitPreferencesOutputs.visitKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for VisitKeysVisitor(0, v10, v11, v12);
  v13 = *(_QWORD *)(v23 - 8);
  v15 = MEMORY[0x1E0C80A78](v23, v14);
  v17 = (char *)&v22 - v16;
  v18 = *v3;
  v19 = *((_DWORD *)v3 + 2);
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 32);
  v20(v9, a1, a2, v15);
  ((void (*)(char *, char *, uint64_t))v20)(v17, v9, a2);
  v27 = v18;
  v28 = v19;
  v24 = a2;
  v25 = a3;
  v26 = v17;
  swift_bridgeObjectRetain();
  PreferencesOutputs.forEachPreference(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(a1, v17, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v23);
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.visitKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[4];
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 16);
  v11 = type metadata accessor for VisitKeysVisitor(0, v7, v8, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for VisitKeysVisitor<A>, v11);
  return v10(v9, v11, v12, a1, a2);
}

ValueMetadata *type metadata accessor for MapKitPreferenceKeys()
{
  return &type metadata for MapKitPreferenceKeys;
}

ValueMetadata *type metadata accessor for MapKitPreferencesInputs()
{
  return &type metadata for MapKitPreferencesInputs;
}

ValueMetadata *type metadata accessor for MapKitPreferencesOutputs()
{
  return &type metadata for MapKitPreferencesOutputs;
}

uint64_t dispatch thunk of MapKitPreferenceKeyVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t getEnumTagSinglePayload for VisitKeysVisitor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187A915EC + 4 * byte_187C858A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for VisitKeysVisitor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t VisitKeysVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 8))(a1, a3, a4, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance VisitKeysVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return VisitKeysVisitor.visit<A>(key:)(a1, a4, a2, a3);
}

void PresentationDetent.uiSheetDetentId.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_187A91848()
{
  Swift::String v0;
  uint64_t v1;

  v0._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1 = MEMORY[0x18D75CC88](0x6E6F697463617246, 0xE90000000000003ALL);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t View.presentationDetents(_:)(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_187A919B0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDetents(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t View.presentationDetents(_:selection:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v3;
  v7[4] = v4;
  v7[5] = v5;
  v7[6] = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.presentationDetents(_:selection:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  v12 = a1[1];
  v13 = a1[2];
  swift_retain();
  swift_retain();
  result = outlined consume of Binding<NavigationSplitViewColumn>?(v12, v13);
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  return result;
}

uint64_t sub_187A91B70()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDetents(_:selection:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in View.presentationDetents(_:selection:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t View.presentationDragIndicator(_:)(char a1)
{
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_187A91C3C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDragIndicator(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 58) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t View.presentationBackgroundInteraction(_:)(__int128 *a1)
{
  char v2;
  __int128 v3;

  v3 = *a1;
  v2 = 2;
  return View.presentationBackgroundInteraction(_:for:)((uint64_t *)&v3, &v2);
}

uint64_t View.presentationBackgroundInteraction(_:for:)(uint64_t *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_BYTE *)(v5 + 32) = v4;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t View.presentationCompactAdaptation(_:)(char *a1)
{
  return View.presentationCompactAdaptation(_:)(a1);
}

{
  char v1;

  v1 = *a1;
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t View.presentationCompactAdaptation(horizontal:vertical:)(char *a1, char *a2)
{
  char v2;
  char v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 17) = v3;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t View.presentationCornerRadius(_:)(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = a2 & 1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t View.presentationContentInteraction(_:)(char *a1)
{
  return View.presentationCompactAdaptation(_:)(a1);
}

uint64_t View.presentationDragIndicator(_:offset:)(char a1, uint64_t a2, char a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3 & 1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

void closure #1 in View.presentationBackgroundInteraction(_:for:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v6 = (a3 >> 57) & 0x78 | a3 & 7;
  if (v6 == 95 || v6 == 63)
  {
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = 0;
  }
  else if ((~a3 & 0xF000000000000007) != 0)
  {
    PresentationDetent.uiSheetDetentId.getter();
    v8 = v7;
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = v8;
  }
  else
  {
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = 1;
  }
  if (a4 == 1)
  {
    if (v6 == 63 || v6 == 95)
      v10 = 1;
    else
      v10 = 2;
    *(_BYTE *)(a1 + 56) = v10;
  }
}

uint64_t sub_187A92074()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in View.presentationBackgroundInteraction(_:for:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in View.presentationBackgroundInteraction(_:for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_187A92090()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCompactAdaptation(_:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(result + 40) = v2;
  *(_BYTE *)(result + 41) = v2;
  return result;
}

uint64_t sub_187A920B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCompactAdaptation(horizontal:vertical:)(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(result + 40) = *(_WORD *)(v1 + 16);
  return result;
}

uint64_t sub_187A920CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCornerRadius(_:)(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)(result + 64) = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(result + 72) = v2;
  return result;
}

uint64_t sub_187A920F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationContentInteraction(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 57) = *(_BYTE *)(v1 + 16);
  return result;
}

uint64_t sub_187A9210C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDragIndicator(_:offset:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(result + 58) = *(_BYTE *)(v1 + 16);
  *(_QWORD *)(result + 80) = v2;
  *(_BYTE *)(result + 88) = v3;
  return result;
}

uint64_t View.popoverAutomaticDismissalEnabled(_:)(char a1)
{
  *(_BYTE *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t sub_187A921C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.popoverAutomaticDismissalEnabled(_:)(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(result + 89) = *(_BYTE *)(v1 + 16);
  return result;
}

double static PresentationDetent.medium.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187C85E90;
  return result;
}

double static PresentationDetent.large.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_187C85EA0;
  return result;
}

void static PresentationDetent.fraction(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
}

void static PresentationDetent.height(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x4000000000000000;
}

uint64_t static PresentationDetent.custom<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2 | 0x8000000000000000;
  return result;
}

void PresentationDetent.Identifier.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

void sub_187A92254()
{
  Swift::UInt64 v0;
  Swift::UInt64 v1;

  Hasher._combine(_:)(2uLL);
  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationDetent.Identifier()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresentationDetent.Identifier(uint64_t a1)
{
  uint64_t *v1;

  PresentationDetent.Identifier.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationDetent.Identifier()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationDetent.Identifier(uint64_t a1)
{
  return specialized static PresentationDetent.Identifier.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

double closure #1 in PresentationDetent.uiSheetDetent.getter(void *a1, double a2)
{
  double v3;

  objc_msgSend(a1, sel_maximumDetentValue);
  return v3 * a2;
}

uint64_t closure #3 in PresentationDetent.uiSheetDetent.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v4;
  uint64_t v5;

  v5 = a1;
  result = (*(uint64_t (**)(uint64_t *))(a3 + 8))(&v5);
  if ((v4 & 1) != 0)
    return 0;
  return result;
}

id PresentationDetent.Context.maxDetentValue.getter()
{
  id *v0;

  return objc_msgSend(*v0, sel_maximumDetentValue);
}

uint64_t PresentationDetent.Context.subscript.getter()
{
  id *v0;
  id v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v1 = objc_msgSend(*v0, sel_containerTraitCollection);
  EnvironmentValues.init()();
  v3 = v4;
  UITraitCollection.resolvedEnvironment(base:)(&v3, &v5);

  swift_release();
  swift_release();
  v4 = v5;
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

void PresentationDetent.hash(into:)(uint64_t a1)
{
  uint64_t *v1;

  PresentationDetent.Identifier.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int PresentationDetent.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void static PresentationAdaptation.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PresentationAdaptation.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PresentationAdaptation.popover.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static PresentationAdaptation.sheet.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static PresentationAdaptation.fullScreenCover.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static PresentationAdaptation.blurOverFullScreen.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

BOOL static PresentationContentInteraction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

double static PresentationBackgroundInteraction.automatic.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187C85EB0;
  return result;
}

double static PresentationBackgroundInteraction.enabled.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187C6DB50;
  return result;
}

__n128 static PresentationBackgroundInteraction.enabled(upThrough:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double static PresentationBackgroundInteraction.disabled.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_187C85EC0;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationDimmingBehavior(void **a1, void **a2)
{
  return specialized static PresentationDimmingBehavior.== infix(_:_:)(*a1, *a2);
}

_QWORD *PresentationOptionsPreference.merge(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  char v29;
  _QWORD *result;
  _QWORD v31[17];
  char v32;
  __int128 v33;
  uint64_t v34;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    swift_bridgeObjectRetain();
  else
    v3 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v4;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    v6 = *(_QWORD *)(v1 + 8);
    v7 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(_QWORD *)(v1 + 32);
    v10 = *(_QWORD *)(a1 + 8);
    outlined copy of Binding<NavigationSplitViewColumn>?(v6, v7);
    v4 = v10;
  }
  v11 = v6;
  v12 = v7;
  v13 = *(_QWORD *)(v1 + 8);
  v14 = *(_QWORD *)(v1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  outlined consume of Binding<NavigationSplitViewColumn>?(v13, v14);
  *(_QWORD *)(v1 + 8) = v11;
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)(v1 + 24) = v8;
  *(_QWORD *)(v1 + 32) = v9;
  v15 = *(void **)(a1 + 48);
  v16 = v15;
  if (v15 == (void *)2)
  {
    v16 = *(void **)(v1 + 48);
    outlined copy of PresentationDimmingBehavior?(v16);
  }
  v17 = *(void **)(v1 + 48);
  outlined copy of PresentationDimmingBehavior?(v15);
  outlined consume of PresentationDimmingBehavior?(v17);
  *(_QWORD *)(v1 + 48) = v16;
  v18 = *(unsigned __int8 *)(a1 + 40);
  if (v18 == 6)
    LOBYTE(v18) = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(v1 + 40) = v18;
  v19 = *(unsigned __int8 *)(a1 + 41);
  if (v19 == 6)
    LOBYTE(v19) = *(_BYTE *)(v1 + 41);
  *(_BYTE *)(v1 + 41) = v19;
  v20 = *(_BYTE *)(a1 + 56);
  if (!v20)
    v20 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(v1 + 56) = v20;
  v21 = *(_BYTE *)(a1 + 57);
  if (!v21)
    v21 = *(_BYTE *)(v1 + 57);
  *(_BYTE *)(v1 + 57) = v21;
  v22 = *(_BYTE *)(a1 + 58);
  if (!v22)
    v22 = *(_BYTE *)(v1 + 58);
  *(_BYTE *)(v1 + 58) = v22;
  if (*(_BYTE *)(a1 + 72) == 1)
  {
    v23 = *(_BYTE *)(v1 + 72);
    v24 = v1;
  }
  else
  {
    v23 = 0;
    v24 = a1;
  }
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v24 + 64);
  *(_BYTE *)(v1 + 72) = v23;
  if (*(_BYTE *)(a1 + 88) == 1)
  {
    v25 = *(_BYTE *)(v1 + 88);
    v26 = v1;
  }
  else
  {
    v25 = 0;
    v26 = a1;
  }
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v26 + 80);
  *(_BYTE *)(v1 + 88) = v25;
  v27 = *(unsigned __int8 *)(a1 + 89);
  if (v27 == 2)
    LOBYTE(v27) = *(_BYTE *)(v1 + 89);
  *(_BYTE *)(v1 + 89) = v27;
  outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v33);
  if (v34)
  {
    outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)v31);
  }
  else
  {
    outlined init with copy of PresentationSizing?(v1 + 96, (uint64_t)v31);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)&v33, (uint64_t (*)(_QWORD))type metadata accessor for PresentationSizing?);
  }
  outlined assign with take of PresentationSizing?((uint64_t)v31, v1 + 96);
  v28 = *(_BYTE *)(v1 + 136);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v31);
  v29 = v28 | v32;
  result = outlined destroy of PresentationOptionsPreference(v31);
  *(_BYTE *)(v1 + 136) = v29 & 1;
  return result;
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PresentationOptionsPreferenceKey(uint64_t a1, void (*a2)(_QWORD *__return_ptr))
{
  _QWORD v3[18];

  a2(v3);
  PresentationOptionsPreference.merge(_:)((uint64_t)v3);
  return outlined destroy of PresentationOptionsPreference(v3);
}

uint64_t PresentationOptionsPreference.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t (*v8)(void);
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(138);
  v1._countAndFlagsBits = 0xD00000000000002ELL;
  v1._object = (void *)0x8000000187BEFBC0;
  String.append(_:)(v1);
  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = MEMORY[0x18D75CF7C](v3, &type metadata for PresentationDetent);
  String.append(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000187BEFBF0;
  v5._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  type metadata accessor for Binding<PresentationDetent>?();
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  v7._object = (void *)0x8000000187BEFC10;
  String.append(_:)(v7);
  v8 = MEMORY[0x1E0DEB940];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationAdaptation.Kind?, (uint64_t)&type metadata for PresentationAdaptation.Kind, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x8000000187BEFC30;
  String.append(_:)(v10);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationAdaptation?, (uint64_t)&type metadata for PresentationAdaptation, (uint64_t (*)(_QWORD, uint64_t))v8);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x6D6964202020200ALL;
  v12._object = (void *)0xEE00203A676E696DLL;
  String.append(_:)(v12);
  outlined copy of PresentationDimmingBehavior?(*(id *)(v0 + 48));
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for PresentationDimmingBehavior?, (uint64_t)&type metadata for PresentationDimmingBehavior, (uint64_t (*)(_QWORD, uint64_t))v8);
  v13._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static PresentationDetent.Identifier.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_187A92AD4 + 4 * byte_187C859B8[a2 >> 62]))();
}

BOOL sub_187A92AD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return !(a4 >> 62) && *(double *)&a1 == *(double *)&a3;
}

uint64_t specialized static PresentationDetent.== infix(_:_:)(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_187A92BDC + 4 * byte_187C859BC[*(_QWORD *)(a1 + 8) >> 62]))();
}

BOOL sub_187A92BDC@<W0>(double a1@<X8>)
{
  unint64_t v1;
  double v2;

  return !(v1 >> 62) && v2 == a1;
}

void sub_187A92C1C(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;

  if (v1 >> 62 != 2 || v2 != a1)
    JUMPOUT(0x187A92C14);
  JUMPOUT(0x187A92BF4);
}

void sub_187A92C30(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2 | v3 ^ 0xC000000000000000)
  {
    if (v3 != 0xC000000000000000 || v2 != 1)
    {
      if (v1 >> 62 != 3 || a1 != 2 || v1 != 0xC000000000000000)
        goto LABEL_34;
LABEL_35:
      JUMPOUT(0x187A92BF4);
    }
    if (v1 >> 62 == 3 && a1 == 1 && v1 == 0xC000000000000000)
      goto LABEL_35;
  }
  else if (v1 >> 62 == 3 && a1 == 0 && v1 == 0xC000000000000000)
  {
    goto LABEL_35;
  }
LABEL_34:
  JUMPOUT(0x187A92C14);
}

ValueMetadata *type metadata accessor for PresentationDetent()
{
  return &type metadata for PresentationDetent;
}

ValueMetadata *type metadata accessor for PresentationDetent.Context()
{
  return &type metadata for PresentationDetent.Context;
}

ValueMetadata *type metadata accessor for PresentationAdaptation()
{
  return &type metadata for PresentationAdaptation;
}

ValueMetadata *type metadata accessor for PresentationPassthroughBehavior()
{
  return &type metadata for PresentationPassthroughBehavior;
}

ValueMetadata *type metadata accessor for PresentationContentInteraction()
{
  return &type metadata for PresentationContentInteraction;
}

uint64_t getEnumTagSinglePayload for PresentationBackgroundInteraction(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 122);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 >> 57) & 0x18 | v3 & 7;
  v5 = ((v3 >> 57) >> 5) | (4 * v4);
  if ((signed int)-v5 < -125 || v5 == 125)
    v6 = -125;
  else
    v6 = -v5;
  v7 = v6 + 124;
  if (!v4)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationBackgroundInteraction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(_QWORD *)result = a2 - 122;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = ((32 * (125 - a2)) | ((125 - a2) >> 2) | ((unint64_t)((32 * (125 - a2)) | ((125 - a2) >> 2)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationBackgroundInteraction()
{
  return &type metadata for PresentationBackgroundInteraction;
}

uint64_t dispatch thunk of static CustomPresentationDetent.height(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_187A92E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t getEnumTagSinglePayload for PresentationBackgroundInteraction.Kind(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 122);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 >> 57) & 0x18 | v3 & 7;
  v5 = (((v3 >> 57) >> 5) | (4 * v4)) ^ 0x7F;
  if (!v4)
    v5 = 0;
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresentationBackgroundInteraction.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 122;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = ((32 * (125 - a2)) | ((125 - a2) >> 2) | ((unint64_t)((32 * (125 - a2)) | ((125 - a2) >> 2)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationBackgroundInteraction.Kind(uint64_t a1)
{
  unint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (v1 >> 57) & 0x18 | v1 & 7;
  v3 = (((v1 >> 57) >> 5) | (4 * v2)) ^ 0x7F;
  if (v2)
    return v3;
  else
    return 0;
}

_QWORD *destructiveInjectEnumTag for PresentationBackgroundInteraction.Kind(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7B)
  {
    *result = a2 - 124;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationBackgroundInteraction.Kind()
{
  return &type metadata for PresentationBackgroundInteraction.Kind;
}

ValueMetadata *type metadata accessor for PresentationContentInteraction.Kind()
{
  return &type metadata for PresentationContentInteraction.Kind;
}

uint64_t storeEnumTagSinglePayload for PresentationPassthroughBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A9300C + 4 * byte_187C859C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A93040 + 4 * byte_187C859C0[v4]))();
}

uint64_t sub_187A93040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A93048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A93050);
  return result;
}

uint64_t sub_187A9305C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A93064);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A93068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A93070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationPassthroughBehavior.Kind()
{
  return &type metadata for PresentationPassthroughBehavior.Kind;
}

uint64_t storeEnumTagSinglePayload for PresentationAdaptation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187A930D8 + 4 * byte_187C859CF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_187A9310C + 4 * byte_187C859CA[v4]))();
}

uint64_t sub_187A9310C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A93114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A9311CLL);
  return result;
}

uint64_t sub_187A93128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A93130);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_187A93134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A9313C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationAdaptation.Kind()
{
  return &type metadata for PresentationAdaptation.Kind;
}

uint64_t getEnumTagSinglePayload for PresentationDetent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7D && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 125);
  v3 = (((*(_QWORD *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(_QWORD *)(a1 + 8) >> 57) & 0x18 | *(_QWORD *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7C)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PresentationDetent(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7C)
  {
    *(_QWORD *)result = a2 - 125;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7D)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationDetent.Identifier(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 62;
  if ((_DWORD)v1 == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return v1;
}

_QWORD *destructiveInjectEnumTag for PresentationDetent.Identifier(_QWORD *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *result = (a2 - 3);
    result[1] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationDetent.Identifier()
{
  return &type metadata for PresentationDetent.Identifier;
}

uint64_t initializeWithCopy for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  id v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 24);
    *v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  if (v7 >= 2)
  {
    if (v7 != 2)
    {
      *(_QWORD *)(a1 + 48) = v7;
      v8 = (id)v7;
      goto LABEL_9;
    }
    v7 = 2;
  }
  *(_QWORD *)(a1 + 48) = v7;
LABEL_9:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v9 = (_OWORD *)(a1 + 96);
  v10 = (_OWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 120);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = v11;
    *(_QWORD *)(a1 + 128) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 112);
    *v9 = *v10;
    *(_OWORD *)(a1 + 112) = v13;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  }
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t assignWithCopy for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  void *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  id v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(a1 + 8);
      v7 = *(_OWORD *)(a2 + 24);
      *v4 = *v5;
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
  }
  v9 = (unint64_t *)(a1 + 48);
  v10 = *(void **)(a1 + 48);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  v11 = *(_QWORD *)(a2 + 48);
  if (v10 == (void *)2)
  {
    if (v11 < 2)
    {
LABEL_20:
      *v9 = v11;
      goto LABEL_21;
    }
    if (v11 == 2)
    {
      v11 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *v9 = v11;
    v12 = (id)v11;
    goto LABEL_21;
  }
  if (v11 == 2)
  {
    outlined destroy of PresentationDimmingBehavior((void **)(a1 + 48));
LABEL_19:
    v11 = *(_QWORD *)(a2 + 48);
    goto LABEL_20;
  }
  if ((unint64_t)v10 < 2)
  {
    if (v11 < 2)
      goto LABEL_20;
    goto LABEL_16;
  }
  if (v11 < 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 48, (uint64_t (*)(_QWORD))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_19;
  }
  *v9 = v11;
  v19 = (id)v11;

LABEL_21:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  v13 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v15 = *(_QWORD *)(a2 + 120);
  if (!*(_QWORD *)(a1 + 120))
  {
    if (v15)
    {
      *(_QWORD *)(a1 + 120) = v15;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 96, a2 + 96);
      goto LABEL_28;
    }
LABEL_27:
    v16 = *(_OWORD *)(a2 + 96);
    v17 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_28;
  }
  if (!v15)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    goto LABEL_27;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
LABEL_28:
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_release();
      *(_QWORD *)(a1 + 16) = v4;
      swift_release();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of Binding<PresentationDetent>(a1 + 8);
  }
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
LABEL_6:
  v7 = (unint64_t *)(a1 + 48);
  v6 = *(void **)(a1 + 48);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  if (v6 == (void *)2)
  {
    if (v8 != 2)
      goto LABEL_15;
LABEL_11:
    *v7 = 2;
    goto LABEL_16;
  }
  if (v8 == 2)
  {
    outlined destroy of PresentationDimmingBehavior((void **)(a1 + 48));
    goto LABEL_11;
  }
  if ((unint64_t)v6 < 2)
  {
LABEL_15:
    *v7 = v8;
    goto LABEL_16;
  }
  if (v8 < 2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1 + 48, (uint64_t (*)(_QWORD))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_15;
  }
  *v7 = v8;

LABEL_16:
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 120))
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationOptionsPreference(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationOptionsPreference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for PresentationDimmingBehavior(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for PresentationDimmingBehavior(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for PresentationDimmingBehavior(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for PresentationDimmingBehavior(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationDimmingBehavior(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresentationDimmingBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationDimmingBehavior()
{
  return &type metadata for PresentationDimmingBehavior;
}

ValueMetadata *type metadata accessor for PresentationOptionsPreferenceKey()
{
  return &type metadata for PresentationOptionsPreferenceKey;
}

unint64_t lazy protocol witness table accessor for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier;
  if (!lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationDetent.Identifier, &type metadata for PresentationDetent.Identifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind;
  if (!lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationAdaptation.Kind, &type metadata for PresentationAdaptation.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind;
  if (!lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationPassthroughBehavior.Kind, &type metadata for PresentationPassthroughBehavior.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind;
  if (!lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationContentInteraction.Kind, &type metadata for PresentationContentInteraction.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind);
  }
  return result;
}

void type metadata accessor for Binding<PresentationDetent>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Binding<PresentationDetent>?)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationDetent>?);
  }
}

uint64_t specialized static PresentationDimmingBehavior.== infix(_:_:)(void *a1, void *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1)
  {
    if (!a2)
    {
LABEL_6:
      v4 = 1;
      return v4 & 1;
    }
LABEL_8:
    v4 = 0;
    return v4 & 1;
  }
  if (a1 == (void *)1)
  {
    if (a2 != (void *)1)
      goto LABEL_8;
    goto LABEL_6;
  }
  if ((unint64_t)a2 < 2)
    goto LABEL_8;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Image.Location(a1);
  outlined copy of Image.Location(a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Image.Location(a2);
  outlined consume of Image.Location(a1);
  return v4 & 1;
}

ValueMetadata *type metadata accessor for PresentationDetent.CustomPresentationDetentWrapper()
{
  return &type metadata for PresentationDetent.CustomPresentationDetentWrapper;
}

unint64_t lazy protocol witness table accessor for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper;
  if (!lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationDetent.CustomPresentationDetentWrapper, &type metadata for PresentationDetent.CustomPresentationDetentWrapper);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent.CustomPresentationDetentWrapper and conformance PresentationDetent.CustomPresentationDetentWrapper);
  }
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(_QWORD *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    *(_QWORD *)&v36[0] = v17;
    type metadata accessor for NSAttributedStringKey(0);
    v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42[3];
  __int128 v43[2];
  __int128 v44;
  __int128 v45;
  ValueMetadata *v46;
  unint64_t v47;

  v1 = result;
  if (*(_QWORD *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    result = static _DictionaryStorage.allocate(capacity:)();
    v2 = result;
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v37 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(63 - v3) >> 6;
  v38 = 0;
  v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v38 << 6);
      goto LABEL_27;
    }
    v11 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v36)
      goto LABEL_36;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v38 + 1;
    if (!v12)
    {
      v13 = v38 + 2;
      if (v38 + 2 >= v36)
        goto LABEL_36;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v38 + 3;
        if (v38 + 3 >= v36)
          goto LABEL_36;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v38 + 4;
          if (v38 + 4 >= v36)
            goto LABEL_36;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
          {
            v14 = v38 + 5;
            if (v38 + 5 >= v36)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return v2;
            }
            v12 = *(_QWORD *)(v37 + 8 * v14);
            v13 = v38 + 5;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v38 = v13;
LABEL_27:
    v15 = v1;
    v16 = (Swift::UInt *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v1 + 56) + 112 * v10;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v40 = *(_OWORD *)(v19 + 40);
    v41 = *(_OWORD *)(v19 + 24);
    v39 = *(_OWORD *)(v19 + 56);
    v23 = *(_QWORD *)(v19 + 72);
    v24 = *(_QWORD *)(v19 + 80);
    v25 = *(_QWORD *)(v19 + 88);
    v26 = *(_QWORD *)(v19 + 96);
    v27 = *(_BYTE *)(v19 + 104);
    v46 = &type metadata for TouchEvent;
    v47 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
    v28 = swift_allocObject();
    *(_QWORD *)&v45 = v28;
    *(_QWORD *)(v28 + 16) = v20;
    *(_BYTE *)(v28 + 24) = v21;
    *(_QWORD *)(v28 + 32) = v22;
    *(_OWORD *)(v28 + 40) = v41;
    *(_OWORD *)(v28 + 56) = v40;
    *(_OWORD *)(v28 + 72) = v39;
    *(_QWORD *)(v28 + 88) = v23;
    *(_QWORD *)(v28 + 96) = v24;
    *(_QWORD *)(v28 + 104) = v25;
    *(_QWORD *)(v28 + 112) = v26;
    *(_BYTE *)(v28 + 120) = v27;
    outlined init with take of OptionalBinaryInteger(&v45, (uint64_t)v42);
    outlined init with take of OptionalBinaryInteger(v42, (uint64_t)&v44);
    outlined init with take of OptionalBinaryInteger(&v44, (uint64_t)v43);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v2 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v6 + 8 * (v30 >> 6))) != 0)
    {
      v7 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v6 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v6 + 8 * v31);
      }
      while (v35 == -1);
      v7 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    v8 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    *v8 = v17;
    v8[1] = v18;
    outlined init with take of OptionalBinaryInteger(v43, *(_QWORD *)(v2 + 56) + 40 * v7);
    ++*(_QWORD *)(v2 + 16);
    result = swift_retain();
    v1 = v15;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v36)
      goto LABEL_36;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_26;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  __int128 v34[3];
  __int128 v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v1 = result;
  if (*(_QWORD *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    result = static _DictionaryStorage.allocate(capacity:)();
    v2 = result;
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v33 = 0;
  v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v33 << 6);
      goto LABEL_27;
    }
    v11 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v31)
      goto LABEL_36;
    v12 = *(_QWORD *)(v32 + 8 * v11);
    v13 = v33 + 1;
    if (!v12)
    {
      v13 = v33 + 2;
      if (v33 + 2 >= v31)
        goto LABEL_36;
      v12 = *(_QWORD *)(v32 + 8 * v13);
      if (!v12)
      {
        v13 = v33 + 3;
        if (v33 + 3 >= v31)
          goto LABEL_36;
        v12 = *(_QWORD *)(v32 + 8 * v13);
        if (!v12)
        {
          v13 = v33 + 4;
          if (v33 + 4 >= v31)
            goto LABEL_36;
          v12 = *(_QWORD *)(v32 + 8 * v13);
          if (!v12)
          {
            v14 = v33 + 5;
            if (v33 + 5 >= v31)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return v2;
            }
            v12 = *(_QWORD *)(v32 + 8 * v14);
            v13 = v33 + 5;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v33 = v13;
LABEL_27:
    v15 = (Swift::UInt *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(v1 + 56) + 32 * v10;
    v19 = *(_QWORD *)v18;
    v20 = *(_BYTE *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_BYTE *)(v18 + 24);
    v38 = MEMORY[0x1E0CE4878];
    v39 = MEMORY[0x1E0CE4868];
    v23 = swift_allocObject();
    *(_QWORD *)&v37 = v23;
    *(_QWORD *)(v23 + 16) = v19;
    *(_BYTE *)(v23 + 24) = v20;
    *(_QWORD *)(v23 + 32) = v21;
    *(_BYTE *)(v23 + 40) = v22;
    outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)v34);
    outlined init with take of OptionalBinaryInteger(v34, (uint64_t)&v36);
    outlined init with take of OptionalBinaryInteger(&v36, (uint64_t)v35);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v2 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v6 + 8 * (v25 >> 6))) != 0)
    {
      v7 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v6 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v6 + 8 * v26);
      }
      while (v30 == -1);
      v7 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    v8 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    *v8 = v16;
    v8[1] = v17;
    outlined init with take of OptionalBinaryInteger(v35, *(_QWORD *)(v2 + 56) + 40 * v7);
    ++*(_QWORD *)(v2 + 16);
    result = swift_retain();
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v31)
      goto LABEL_36;
    v12 = *(_QWORD *)(v32 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_26;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  Swift::UInt *v16;
  Swift::UInt v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  __int128 v35[3];
  __int128 v36[2];
  __int128 v37;
  __int128 v38;
  ValueMetadata *v39;
  unint64_t v40;

  v1 = result;
  if (*(_QWORD *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    result = static _DictionaryStorage.allocate(capacity:)();
    v2 = result;
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v3 = 0;
  v34 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v33 = (unint64_t)(63 - v4) >> 6;
  v7 = v2 + 64;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_27;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v12 >= v33)
      goto LABEL_36;
    v13 = *(_QWORD *)(v34 + 8 * v12);
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v33)
        goto LABEL_36;
      v13 = *(_QWORD *)(v34 + 8 * v14);
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v33)
          goto LABEL_36;
        v13 = *(_QWORD *)(v34 + 8 * v14);
        if (!v13)
        {
          v14 = v3 + 4;
          if (v3 + 4 >= v33)
            goto LABEL_36;
          v13 = *(_QWORD *)(v34 + 8 * v14);
          if (!v13)
          {
            v15 = v3 + 5;
            if (v3 + 5 >= v33)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return v2;
            }
            v13 = *(_QWORD *)(v34 + 8 * v15);
            v14 = v3 + 5;
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_26:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v3 = v14;
LABEL_27:
    v16 = (Swift::UInt *)(*(_QWORD *)(v1 + 48) + 16 * v11);
    v17 = *v16;
    v18 = v16[1];
    v19 = *(_QWORD *)(v1 + 56) + 40 * v11;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v39 = &type metadata for HoverEvent;
    v40 = lazy protocol witness table accessor for type HoverEvent and conformance HoverEvent();
    v25 = swift_allocObject();
    *(_QWORD *)&v38 = v25;
    *(_QWORD *)(v25 + 16) = v20;
    *(_BYTE *)(v25 + 24) = v21;
    *(_QWORD *)(v25 + 32) = v22;
    *(_QWORD *)(v25 + 40) = v23;
    *(_QWORD *)(v25 + 48) = v24;
    outlined init with take of OptionalBinaryInteger(&v38, (uint64_t)v35);
    outlined init with take of OptionalBinaryInteger(v35, (uint64_t)&v37);
    outlined init with take of OptionalBinaryInteger(&v37, (uint64_t)v36);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v2 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v7 + 8 * (v27 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v7 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v7 + 8 * v28);
      }
      while (v32 == -1);
      v8 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v7 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    v9 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v8);
    *v9 = v17;
    v9[1] = v18;
    outlined init with take of OptionalBinaryInteger(v36, *(_QWORD *)(v2 + 56) + 40 * v8);
    ++*(_QWORD *)(v2 + 16);
    result = swift_retain();
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v33)
      goto LABEL_36;
    v13 = *(_QWORD *)(v34 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_26;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  Swift::UInt *v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40[3];
  __int128 v41[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v1 = result;
  if (*(_QWORD *)(result + 16))
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    result = static _DictionaryStorage.allocate(capacity:)();
    v2 = result;
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v36 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v3) >> 6;
  v37 = 0;
  v6 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v37 << 6);
      goto LABEL_27;
    }
    v11 = v37 + 1;
    if (__OFADD__(v37, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v11 >= v35)
      goto LABEL_36;
    v12 = *(_QWORD *)(v36 + 8 * v11);
    v13 = v37 + 1;
    if (!v12)
    {
      v13 = v37 + 2;
      if (v37 + 2 >= v35)
        goto LABEL_36;
      v12 = *(_QWORD *)(v36 + 8 * v13);
      if (!v12)
      {
        v13 = v37 + 3;
        if (v37 + 3 >= v35)
          goto LABEL_36;
        v12 = *(_QWORD *)(v36 + 8 * v13);
        if (!v12)
        {
          v13 = v37 + 4;
          if (v37 + 4 >= v35)
            goto LABEL_36;
          v12 = *(_QWORD *)(v36 + 8 * v13);
          if (!v12)
          {
            v14 = v37 + 5;
            if (v37 + 5 >= v35)
            {
LABEL_36:
              swift_bridgeObjectRetain();
              outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
              return v2;
            }
            v12 = *(_QWORD *)(v36 + 8 * v14);
            v13 = v37 + 5;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_26:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v37 = v13;
LABEL_27:
    v15 = (Swift::UInt *)(*(_QWORD *)(v1 + 48) + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(v1 + 56) + 96 * v10;
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    v21 = *(_BYTE *)(v18 + 32);
    v22 = *(_QWORD *)(v18 + 40);
    v23 = *(_QWORD *)(v18 + 48);
    v38 = *(_OWORD *)v18;
    v39 = *(_OWORD *)(v18 + 56);
    v24 = *(_QWORD *)(v18 + 72);
    v25 = *(_QWORD *)(v18 + 80);
    v26 = *(_BYTE *)(v18 + 88);
    v44 = MEMORY[0x1E0CE78C8];
    v45 = MEMORY[0x1E0CE78B8];
    v27 = swift_allocObject();
    *(_QWORD *)&v43 = v27;
    *(_OWORD *)(v27 + 16) = v38;
    *(_QWORD *)(v27 + 32) = v19;
    *(_QWORD *)(v27 + 40) = v20;
    *(_BYTE *)(v27 + 48) = v21;
    *(_QWORD *)(v27 + 56) = v22;
    *(_QWORD *)(v27 + 64) = v23;
    *(_OWORD *)(v27 + 72) = v39;
    *(_QWORD *)(v27 + 88) = v24;
    *(_QWORD *)(v27 + 96) = v25;
    *(_BYTE *)(v27 + 104) = v26;
    outlined init with take of OptionalBinaryInteger(&v43, (uint64_t)v40);
    outlined init with take of OptionalBinaryInteger(v40, (uint64_t)&v42);
    outlined init with take of OptionalBinaryInteger(&v42, (uint64_t)v41);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v2 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v6 + 8 * (v29 >> 6))) != 0)
    {
      v7 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v6 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v6 + 8 * v30);
      }
      while (v34 == -1);
      v7 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v6 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
    v8 = (Swift::UInt *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    *v8 = v16;
    v8[1] = v17;
    outlined init with take of OptionalBinaryInteger(v41, *(_QWORD *)(v2 + 56) + 40 * v7);
    ++*(_QWORD *)(v2 + 16);
    result = swift_retain();
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v35)
      goto LABEL_36;
    v12 = *(_QWORD *)(v36 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_26;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t UIKitGestureRecognizer.updateInheritedPhase(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  static Semantics.v6.getter();
  result = isLinkedOnOrAfter(_:)();
  if ((result & 1) != 0)
  {
    result = MEMORY[0x18D75A3D8]();
    if ((result & 1) == 0)
    {
      result = static CoreTesting.isRunning.getter();
      if ((result & 1) == 0)
      {
        v4 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase;
        if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase + 8) & 1) != 0
          || *(_QWORD *)v4 != v2)
        {
          result = swift_weakLoadStrong();
          if (result)
          {
            dispatch thunk of EventBindingBridge.setInheritedPhase(_:)();
            result = swift_release();
          }
          *(_QWORD *)v4 = v2;
          *(_BYTE *)(v4 + 8) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t UIKitGestureRecognizer.convert(touches:with:)(uint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;

  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
    Set.Iterator.init(_cocoa:)();
    a1 = v53;
    v47 = v54;
    v4 = v55;
    v5 = v56;
    v6 = v57;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v47 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v46 = (unint64_t)(v4 + 64) >> 6;
  v48 = a1;
  if (a1 < 0)
    goto LABEL_10;
LABEL_8:
  if (v6)
  {
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
    goto LABEL_27;
  }
  v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v46)
      goto LABEL_33;
    v16 = *(_QWORD *)(v47 + 8 * v15);
    v13 = v5 + 1;
    if (!v16)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v46)
        goto LABEL_33;
      v16 = *(_QWORD *)(v47 + 8 * v13);
      if (!v16)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v46)
          goto LABEL_33;
        v16 = *(_QWORD *)(v47 + 8 * v13);
        if (!v16)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v46)
            goto LABEL_33;
          v16 = *(_QWORD *)(v47 + 8 * v13);
          if (!v16)
          {
            v17 = v5 + 5;
            while (v46 != v17)
            {
              v16 = *(_QWORD *)(v47 + 8 * v17++);
              if (v16)
              {
                v13 = v17 - 1;
                goto LABEL_26;
              }
            }
            goto LABEL_33;
          }
        }
      }
    }
LABEL_26:
    v11 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_27:
    v14 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (v14)
    {
      while (1)
      {
        v18 = v3;
        type metadata accessor for (UITransformEvent, TransformEvent)(0, &lazy cache variable for type metadata for (UITouch, TouchEvent), &lazy cache variable for type metadata for UITouch);
        v20 = v19;
        v21 = (Swift::UInt)v14;
        v22 = v14;
        v51 = objc_msgSend(v50, sel_view);
        v23 = a2;
        v24 = objc_msgSend(v22, sel_phase);
        objc_msgSend(v22, sel_locationInView_, 0);
        v26 = v25;
        v28 = v27;
        objc_msgSend(v22, sel_timestamp);
        v30 = v29;
        objc_msgSend(v22, sel_majorRadius);
        v32 = v31;
        objc_msgSend(v22, sel_force);
        v34 = v33;
        objc_msgSend(v22, sel_maximumPossibleForce);
        v36 = v35;
        v37 = specialized EventModifiers.init(_:)((int)objc_msgSend(v23, sel_modifierFlags));
        objc_msgSend(v22, sel_altitudeAngle);
        v39 = v38;
        objc_msgSend(v22, sel_azimuthAngleInView_, 0);
        v41 = v40;
        v42 = objc_msgSend(v22, sel_type);

        if ((unint64_t)v42 >= 4)
          goto LABEL_35;
        *(_QWORD *)&v58 = v30;
        v43 = 0x201010302010100uLL >> (8 * v24);
        if ((unint64_t)v24 >= 8)
          LOBYTE(v43) = 3;
        BYTE8(v58) = v43;
        v60 = 0;
        v61 = 0;
        v59 = 0;
        v62 = v26;
        v63 = v28;
        v64 = v32;
        v65 = v34;
        v66 = v36;
        v67 = v37;
        v68 = v39;
        v69 = v41;
        v70 = (char)v42;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v52 = (void *)v18;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v58, v20, v21, isUniquelyReferenced_nonNull_native);
        v3 = v18;

        swift_bridgeObjectRelease();
        v5 = v13;
        v6 = v11;
        a1 = v48;
        if ((v48 & 0x8000000000000000) == 0)
          goto LABEL_8;
LABEL_10:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v14 = v52;
          swift_unknownObjectRelease();
          v13 = v5;
          v11 = v6;
          if (v52)
            continue;
        }
        break;
      }
    }
LABEL_33:
    outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
    return v3;
  }
  __break(1u);
LABEL_35:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall UIKitGestureRecognizer.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  if (swift_weakLoadStrong())
  {
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)();
    swift_release();
  }
  v2 = v0 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter;
  swift_beginAccess();
  if (*(_DWORD *)v2 == -1)
  {
    __break(1u);
  }
  else
  {
    ++*(_DWORD *)v2;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    v3 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState;
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 1;
    v4 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase;
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 1;
  }
}

Swift::Bool __swiftcall UIKitGestureRecognizer.shouldReceive(_:)(UIEvent a1)
{
  _BYTE *v1;
  objc_class *v3;
  uint64_t v5;
  objc_super v6;

  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (MEMORY[0x18D75A3D8]() & 1) == 0
    && (static CoreTesting.isRunning.getter() & 1) == 0
    && v1[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase + 8] == 1)
  {
    v5 = 0;
    UIKitGestureRecognizer.updateInheritedPhase(_:)(&v5);
  }
  v3 = (objc_class *)type metadata accessor for UIKitGestureRecognizer();
  v6.receiver = v1;
  v6.super_class = v3;
  return objc_msgSendSuper2(&v6, sel_shouldReceiveEvent_, a1.super.isa);
}

Swift::Void __swiftcall UIKitGestureRecognizer._updateForActiveEvents()()
{
  char *v0;
  id v1;
  id v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (MEMORY[0x18D75A3D8]() & 1) == 0
    && (static CoreTesting.isRunning.getter() & 1) == 0)
  {
    v1 = objc_msgSend(v0, sel_state);
    if ((v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState + 8] & 1) == 0
      && (v2 = *(id *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState], v1 != v2)
      && (v2 != (id)3 ? (v3 = v2 == 0) : (v3 = 1),
          v3 && (objc_msgSend(v0, sel_state) == (id)5 || objc_msgSend(v0, sel_state) == (id)4)))
    {
      v4 = 2;
    }
    else
    {
      v4 = objc_msgSend(v0, sel__hasUnmetFailureRequirements) ^ 1;
    }
    v5 = v4;
    UIKitGestureRecognizer.updateInheritedPhase(_:)(&v5);
  }
}

void @objc UIKitGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v7 = a1;
  v8 = UIKitGestureRecognizer.convert(touches:with:)(v6, v9);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void @objc UIKitGestureRecognizer.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v7 = a1;
  v8 = specialized UIKitGestureRecognizer.convert(buttonEvents:with:)(v6);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

id UIKitGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for EventBindingSource.attach(to:) in conformance UIKitGestureRecognizer()
{
  _QWORD *v0;
  uint64_t Strong;
  void (*v2)(uint64_t);

  swift_weakAssign();
  Strong = swift_weakLoadStrong();
  v2 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130);
  swift_retain();
  v2(Strong);
  swift_release();
  return swift_release();
}

_QWORD *protocol witness for EventBindingSource.didUpdate(gestureCategory:in:) in conformance UIKitGestureRecognizer(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory) = *result;
  return result;
}

uint64_t UIKitGestureRecognizer._transformChanged(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t result;
  char v23;
  uint64_t inited;
  uint64_t v25;

  if (objc_msgSend(a1, sel_phase) == (id)1)
  {
    objc_msgSend(a1, sel_scale);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale) = v3;
    objc_msgSend(a1, sel_rotation);
    *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle) = -v4;
  }
  type metadata accessor for (UITransformEvent, TransformEvent)(0, &lazy cache variable for type metadata for (UITransformEvent, TransformEvent), (unint64_t *)&lazy cache variable for type metadata for UITransformEvent);
  v6 = v5;
  objc_msgSend(a1, sel_locationInView_, 0);
  v8 = v7;
  v10 = v9;
  objc_msgSend(a1, sel_timestamp);
  v12 = v11;
  v13 = objc_msgSend(a1, sel_phase);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale);
  objc_msgSend(a1, sel_scale);
  v16 = v15;
  v17 = OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle;
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle);
  objc_msgSend(a1, sel_rotation);
  v20 = v19;
  v21 = *(double *)(v1 + v17);
  result = swift_weakLoadStrong();
  if (result)
  {
    if ((unint64_t)v13 >= 5)
      v23 = 3;
    else
      v23 = 0x302010003uLL >> (8 * v13);
    type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_187BF9830;
    *(_QWORD *)(inited + 32) = v6;
    *(_QWORD *)(inited + 40) = a1;
    *(_QWORD *)(inited + 72) = &type metadata for TransformEvent;
    *(_QWORD *)(inited + 80) = lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
    v25 = swift_allocObject();
    *(_QWORD *)(inited + 48) = v25;
    *(_QWORD *)(v25 + 16) = v12;
    *(_BYTE *)(v25 + 24) = v23;
    *(_QWORD *)(v25 + 32) = 0;
    *(_QWORD *)(v25 + 40) = v8;
    *(_QWORD *)(v25 + 48) = v10;
    *(_QWORD *)(v25 + 56) = v8;
    *(_QWORD *)(v25 + 64) = v10;
    *(_QWORD *)(v25 + 72) = v14;
    *(_QWORD *)(v25 + 80) = v16;
    *(_QWORD *)(v25 + 88) = v18;
    *(double *)(v25 + 96) = (v20 * -128.0 + v21 * -128.0) * 0.0078125;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for (EventID, EventType)();
    swift_arrayDestroy();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UIKitGestureRecognizer._scrollingChanged(with:)(unint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;

  v2 = v1;
  v4 = objc_msgSend(v2, sel_view);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_window);

  }
  else
  {
    v6 = 0;
  }
  swift_beginAccess();
  v7 = ScrollEventConverter.convert(_:in:)(a1, v6);
  swift_endAccess();

  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *specialized UIKitGestureRecognizer.convert(buttonEvents:with:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  id v24;
  char v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  Swift::UInt *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v2 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    Set.Iterator.init(_cocoa:)();
    a1 = v47;
    v44 = v48;
    v3 = v49;
    v4 = v50;
    v5 = v51;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v44 = a1 + 56;
    v7 = ~v6;
    v8 = -v6;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = v7;
    v4 = 0;
  }
  v43 = (unint64_t)(v3 + 64) >> 6;
  v45 = a1;
  while (a1 < 0)
  {
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_58;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = v46;
    swift_unknownObjectRelease();
    v13 = v4;
    v11 = v5;
    if (!v46)
      goto LABEL_58;
LABEL_31:
    type metadata accessor for (UITransformEvent, TransformEvent)(0, &lazy cache variable for type metadata for (UIPress, PhysicalButtonEvent), (unint64_t *)&lazy cache variable for type metadata for UIPress);
    v19 = v18;
    objc_msgSend(v14, sel_timestamp);
    v21 = v20;
    v22 = objc_msgSend(v14, sel_phase);
    if ((unint64_t)v22 >= 5)
      v23 = 3;
    else
      v23 = 0x302010100uLL >> (8 * v22);
    v24 = objc_msgSend(v14, sel_type);
    v25 = 0;
    switch((unint64_t)v24)
    {
      case 0uLL:
        goto LABEL_47;
      case 1uLL:
        v25 = 1;
        goto LABEL_47;
      case 2uLL:
        v25 = 2;
        goto LABEL_47;
      case 3uLL:
        v25 = 3;
        goto LABEL_47;
      case 4uLL:
        v25 = 4;
        goto LABEL_47;
      case 5uLL:
        v25 = 5;
        goto LABEL_47;
      case 6uLL:
        v25 = 6;
        goto LABEL_47;
      case 0x1EuLL:
        v25 = 7;
        goto LABEL_47;
      case 0x1FuLL:
        v25 = 8;
        goto LABEL_47;
      default:
        if (one-time initialization token for back != -1)
          swift_once();
        if ((id)static UIPressType.back != v24)
          goto LABEL_63;
        v25 = 9;
LABEL_47:
        v26 = v2;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46 = v26;
        v28 = v19;
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v19, (Swift::UInt)v14);
        v31 = v26[2];
        v32 = (v29 & 1) == 0;
        v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_63:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x187A964CCLL);
        }
        v34 = v29;
        if (v26[3] >= v33)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v2 = v26;
            if ((v29 & 1) != 0)
              goto LABEL_8;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v2 = v26;
            if ((v34 & 1) != 0)
              goto LABEL_8;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          v35 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (Swift::UInt)v14);
          if ((v34 & 1) != (v36 & 1))
            goto LABEL_62;
          v30 = v35;
          v2 = v26;
          if ((v34 & 1) != 0)
          {
LABEL_8:
            v10 = v2[7] + 32 * v30;
            swift_release();
            *(_QWORD *)v10 = v21;
            *(_BYTE *)(v10 + 8) = v23;
            *(_QWORD *)(v10 + 16) = 0;
            *(_BYTE *)(v10 + 24) = v25;
            goto LABEL_9;
          }
        }
        v2[(v30 >> 6) + 8] |= 1 << v30;
        v37 = (Swift::UInt *)(v2[6] + 16 * v30);
        *v37 = v28;
        v37[1] = (Swift::UInt)v14;
        v38 = v2[7] + 32 * v30;
        *(_QWORD *)v38 = v21;
        *(_BYTE *)(v38 + 8) = v23;
        *(_QWORD *)(v38 + 16) = 0;
        *(_BYTE *)(v38 + 24) = v25;
        v39 = v2[2];
        v40 = __OFADD__(v39, 1);
        v41 = v39 + 1;
        if (v40)
          goto LABEL_60;
        v2[2] = v41;
LABEL_9:

        swift_bridgeObjectRelease();
        v4 = v13;
        v5 = v11;
        a1 = v45;
        break;
    }
  }
  if (v5)
  {
    v11 = (v5 - 1) & v5;
    v12 = __clz(__rbit64(v5)) | (v4 << 6);
    v13 = v4;
    goto LABEL_30;
  }
  v15 = v4 + 1;
  if (__OFADD__(v4, 1))
    goto LABEL_61;
  if (v15 < v43)
  {
    v16 = *(_QWORD *)(v44 + 8 * v15);
    v13 = v4 + 1;
    if (!v16)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v43)
        goto LABEL_58;
      v16 = *(_QWORD *)(v44 + 8 * v13);
      if (!v16)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v43)
          goto LABEL_58;
        v16 = *(_QWORD *)(v44 + 8 * v13);
        if (!v16)
        {
          v13 = v4 + 4;
          if (v4 + 4 >= v43)
            goto LABEL_58;
          v16 = *(_QWORD *)(v44 + 8 * v13);
          if (!v16)
          {
            v17 = v4 + 5;
            do
            {
              if (v43 == v17)
                goto LABEL_58;
              v16 = *(_QWORD *)(v44 + 8 * v17++);
            }
            while (!v16);
            v13 = v17 - 1;
          }
        }
      }
    }
    v11 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_30:
    v14 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (!v14)
      goto LABEL_58;
    goto LABEL_31;
  }
LABEL_58:
  outlined consume of [_ViewList_ID.Canonical : IncrementalLayoutCacheItem].Iterator._Variant();
  return v2;
}

void specialized UIKitGestureRecognizer.init(coder:)()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;

  swift_weakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale] = 0x3FF0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle] = 0;
  v1 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter];
  *(_DWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory] = 0;
  v2 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIKitGestureRecognizer.didUpdate(phase:in:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(a1 + 1);
  objc_msgSend(v1, sel_state);
  __asm { BR              X9 }
}

id sub_187A96664(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char *v14;
  id result;
  char *v17;

  result = objc_msgSend(v14, sel_setState_, a1);
  v17 = &v14[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(_QWORD *)v17 = a1;
  v17[8] = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer;
  if (!lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer)
  {
    v1 = type metadata accessor for UIKitGestureRecognizer();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitGestureRecognizer, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer);
  }
  return result;
}

uint64_t sub_187A96710()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>)
  {
    type metadata accessor for (EventID, EventType)();
    v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>);
  }
}

uint64_t sub_187A96788()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187A967AC()
{
  swift_release();
  return swift_deallocObject();
}

void type metadata accessor for (UITransformEvent, TransformEvent)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_187A9683C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187A96860()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in DefaultStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StepperStyle.makeBody(configuration:) in conformance DefaultStepperStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  KeyPath = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a2 + 88) = KeyPath;
  *(_BYTE *)(a2 + 96) = 0;
  swift_retain();
  outlined copy of AppIntentExecutor?(v4);
  outlined copy of AppIntentExecutor?(v6);
  return swift_retain();
}

ValueMetadata *type metadata accessor for DefaultStepperStyle()
{
  return &type metadata for DefaultStepperStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>(255, a2, a3, a4);
    v6 = v5;
    v10[0] = lazy protocol witness table accessor for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(v5, v7, v8, v9);
    v10[1] = &protocol witness table for StepperStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>)
  {
    type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>(255, a2, a3, a4);
    type metadata accessor for StepperStyleModifier<MenuStepperStyle>(255, &lazy cache variable for type metadata for StepperStyleModifier<SegmentedButtonStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle, (uint64_t)&type metadata for SegmentedButtonStepperStyle);
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>);
  }
}

void type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>)
  {
    type metadata accessor for Stepper<StepperStyleConfiguration.Label>(255, a2, a3, a4);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>();
    v4 = type metadata accessor for ModifiedContent();
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>);
  }
}

void type metadata accessor for Stepper<StepperStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Stepper<StepperStyleConfiguration.Label>)
  {
    v4 = type metadata accessor for Stepper(0, (uint64_t)&type metadata for StepperStyleConfiguration.Label, (uint64_t)&protocol witness table for StepperStyleConfiguration.Label, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Stepper<StepperStyleConfiguration.Label>);
  }
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for StepperStyleModifier<MenuStepperStyle>(255, &lazy cache variable for type metadata for StepperStyleModifier<MenuStepperStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuStepperStyle and conformance MenuStepperStyle, (uint64_t)&type metadata for MenuStepperStyle);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE6398]);
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuStepperStyle and conformance MenuStepperStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle;
  if (!lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MenuStepperStyle, &type metadata for MenuStepperStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle);
  }
  return result;
}

void type metadata accessor for StepperStyleModifier<MenuStepperStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3();
    v9 = type metadata accessor for StepperStyleModifier(a1, a4, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t lazy protocol witness table accessor for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle;
  if (!lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SegmentedButtonStepperStyle, &type metadata for SegmentedButtonStepperStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>(255, a2, a3, a4);
    v6 = v5;
    v7[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Stepper<StepperStyleConfiguration.Label> and conformance Stepper<A>, (uint64_t (*)(uint64_t))type metadata accessor for Stepper<StepperStyleConfiguration.Label>, (uint64_t)&protocol conformance descriptor for Stepper<A>);
    v7[1] = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>();
    v2[0] = &protocol witness table for StepperStyleModifier<A>;
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t TabContent.tabPlacement(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;

  v4 = *a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for TabPlacementModifier, a3);
}

uint64_t sub_187A96D9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[1];
  v5 = type metadata accessor for ModifiedTabContent(255, *a1, (uint64_t)&type metadata for TabPlacementModifier, a4);
  v7[0] = v4;
  v7[1] = lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier();
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> ModifiedTabContent<A, B>, v5, v7);
}

uint64_t storeEnumTagSinglePayload for TabPlacementModifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_187A96E3C + 4 * byte_187C85FB5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_187A96E70 + 4 * asc_187C85FB0[v4]))();
}

uint64_t sub_187A96E70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A96E78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A96E80);
  return result;
}

uint64_t sub_187A96E8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A96E94);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_187A96E98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A96EA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabPlacementModifier()
{
  return &type metadata for TabPlacementModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabPlacementModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabPlacementModifier()
{
  char *v0;
  char v1;

  v1 = *v0;
  *(_BYTE *)(swift_allocObject() + 16) = v1;
  type metadata accessor for _ViewModifier_Content<TabPlacementModifier>();
  lazy protocol witness table accessor for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>();
  View.transformTrait<A>(_:transform:)();
  return swift_release();
}

uint64_t sub_187A96F54()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in TabPlacementModifier.body(content:)(_BYTE *result)
{
  uint64_t v1;

  *result = *(_BYTE *)(v1 + 16);
  return result;
}

void type metadata accessor for _ViewModifier_Content<TabPlacementModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<TabPlacementModifier>)
  {
    lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TabPlacementModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<TabPlacementModifier>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187A97010()
{
  type metadata accessor for _ViewModifier_Content<TabPlacementModifier>();
  lazy protocol witness table accessor for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>();
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SwiftUIDefaultAccentColorProvider()
{
  return &type metadata for SwiftUIDefaultAccentColorProvider;
}

SwiftUI::BorderedTableStyle __swiftcall BorderedTableStyle.init()()
{
  SwiftUI::BorderedTableStyle result;

  result.alternatingRowBackgrounds.guts = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::BorderedTableStyle __swiftcall BorderedTableStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  SwiftUI::BorderedTableStyle result;

  result.alternatingRowBackgrounds.guts = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void BorderedTableStyle.makeBody(configuration:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t associated type witness table accessor for TableStyle.Body : View in BorderedTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for BorderedTableStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A9710C + 4 * byte_187C86055[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A97140 + 4 * byte_187C86050[v4]))();
}

uint64_t sub_187A97140(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A97148(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A97150);
  return result;
}

uint64_t sub_187A9715C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A97164);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A97168(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A97170(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BorderedTableStyle()
{
  return &type metadata for BorderedTableStyle;
}

uint64_t EnvironmentValues.effectiveButtonRepeatTiming.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (!*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
    result = swift_release_n();
    if (v6 == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_6;
    }
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
  result = swift_release_n();
  if (v6 != 1)
    goto LABEL_7;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
LABEL_6:
  result = swift_release_n();
  v4 = v5;
LABEL_8:
  *a1 = v4;
  return result;
}

uint64_t View.buttonRepeatBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t HasCustomRepeatBehavior;
  _QWORD v16[2];
  char v17;

  type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>();
  v5 = type metadata accessor for ModifiedContent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16[-1] - v8;
  v10 = *a1;
  swift_getKeyPath();
  v17 = v10;
  View.environment<A>(_:_:)();
  swift_release();
  v11 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v16[0] = a3;
  v16[1] = v11;
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v16);
  HasCustomRepeatBehavior = lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
  View.input<A>(_:)((uint64_t)&type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior, v5, (uint64_t)&type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior, v12, HasCustomRepeatBehavior);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>);
  }
}

uint64_t EnvironmentValues.buttonRepeatTiming.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.buttonRepeatTiming : EnvironmentValues@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.buttonRepeatTiming.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void static ButtonRepeatBehavior.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static ButtonRepeatBehavior.enabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ButtonRepeatBehavior.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void ButtonRepeatBehavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static ButtonRepeatBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int ButtonRepeatBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.buttonRepeatBehavior.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.buttonRepeatBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.buttonRepeatBehavior : EnvironmentValues()
{
  return EnvironmentValues.buttonRepeatBehavior.setter();
}

uint64_t sub_187A97CAC()
{
  return EnvironmentValues.buttonRepeatBehavior.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t EnvironmentValues.buttonRepeatBehavior.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
  return PropertyList.subscript.setter();
}

Swift::Double_optional __swiftcall ButtonRepeatTiming.Iterator.next()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  Swift::Double_optional result;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2 >= 2)
  {
    if (v0[1] != *(_QWORD *)(v1 + 48))
      goto LABEL_5;
    LOBYTE(v3) = specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    v1 = *v0;
    v2 = *(_QWORD *)(*v0 + 16);
  }
  if (!v2)
  {
    LOBYTE(v3) = 0;
    goto LABEL_9;
  }
LABEL_5:
  v5 = v0[1];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 40);
    v0[1] = v7;
  }
LABEL_9:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

void one-time initialization function for iOSStepper()
{
  static ButtonRepeatTiming.iOSStepper = (uint64_t)&outlined read-only object #0 of one-time initialization function for iOSStepper;
}

uint64_t (*EnvironmentValues.buttonRepeatTiming.modify(uint64_t a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.buttonRepeatTiming.modify;
}

uint64_t EnvironmentValues.buttonRepeatTiming.modify(_QWORD *a1, char a2)
{
  uint64_t v3;

  v3 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(_QWORD *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ButtonRepeatTiming.Key@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for iOSStepper != -1)
    swift_once();
  *a1 = static ButtonRepeatTiming.iOSStepper;
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior, &type metadata for ButtonRepeatBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior);
  }
  return result;
}

uint64_t sub_187A982E4()
{
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter();
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior()
{
  return &type metadata for ButtonRepeatBehavior;
}

uint64_t sub_187A98328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>(255);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void type metadata accessor for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>(uint64_t a1)
{
  unint64_t HasCustomRepeatBehavior;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>)
  {
    HasCustomRepeatBehavior = lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior, HasCustomRepeatBehavior, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>);
  }
}

uint64_t storeEnumTagSinglePayload for ButtonRepeatBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A9846C + 4 * byte_187C860A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A984A0 + 4 * asc_187C860A0[v4]))();
}

uint64_t sub_187A984A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A984A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A984B0);
  return result;
}

uint64_t sub_187A984BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A984C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A984C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A984D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.Guts()
{
  return &type metadata for ButtonRepeatBehavior.Guts;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.Key()
{
  return &type metadata for ButtonRepeatBehavior.Key;
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming.Key()
{
  return &type metadata for ButtonRepeatTiming.Key;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonRepeatBehavior.Guts, &type metadata for ButtonRepeatBehavior.Guts);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  return &protocol witness table for ButtonRepeatBehavior.HasCustomRepeatBehavior;
}

uint64_t View.buttonOutset(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path setter for _ButtonGesture.action : _ButtonGesture(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t _ButtonGesture.action.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _ButtonGesture.action.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_ButtonGesture.action.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _ButtonGesture.pressingAction : _ButtonGesture@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned __int8 *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;
  return outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
}

uint64_t key path setter for _ButtonGesture.pressingAction : _ButtonGesture(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t _ButtonGesture.pressingAction.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t _ButtonGesture.pressingAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_ButtonGesture.pressingAction.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ButtonGesture.init(action:pressing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 40) = 1;
  return result;
}

uint64_t static _ButtonGesture._makeGesture(gesture:inputs:)()
{
  lazy protocol witness table accessor for type _ButtonGesture and conformance _ButtonGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t _ButtonGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  _OWORD v7[2];

  v3 = v1[1];
  v6 = *v1;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(__int128 *)((char *)v1 + 25);
  closure #1 in _ButtonGesture.internalBody.getter((uint64_t)&v6, a1);
  *(_QWORD *)(a1 + 72) = swift_getKeyPath();
  *(_WORD *)(a1 + 80) = 0;
  v4 = v7[0];
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v7 + 9);
  return outlined retain of _ButtonGesture((uint64_t)&v6);
}

__n128 closure #1 in _ButtonGesture.internalBody.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  char v10;
  uint64_t (*v11)(char);
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  __n128 result;
  __n128 v17;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = swift_allocObject();
    v8 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(_QWORD *)(v7 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(_QWORD *)(v7 + 24) = v6;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
    *(_QWORD *)(v9 + 24) = v7;
    swift_retain();
    v10 = 0;
    v11 = partial apply for closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter;
  }
  else
  {
    v11 = 0;
    v9 = 0;
    v8 = 0;
    v10 = -1;
  }
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v4, v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
  v12 = (_OWORD *)swift_allocObject();
  v13 = *(_OWORD *)(a1 + 16);
  v12[1] = *(_OWORD *)a1;
  v12[2] = v13;
  *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)(a1 + 25);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_BYTE *)(a1 + 40);
  outlined retain of _ButtonGesture(a1);
  MapGesture.init(_:)();
  result = v17;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = partial apply for closure #2 in closure #1 in _ButtonGesture.internalBody.getter;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v14;
  *(_BYTE *)(a2 + 48) = v15;
  *(__n128 *)(a2 + 56) = v17;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(char a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  _QWORD v7[4];
  BOOL v8;

  v5 = a1 == 2;
  type metadata accessor for MainActor();
  v7[2] = a2;
  v7[3] = a3;
  v8 = v5;
  return specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))partial apply for closure #1 in closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter, (uint64_t)v7);
}

uint64_t closure #2 in closure #1 in _ButtonGesture.internalBody.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[4];

  type metadata accessor for MainActor();
  v6[2] = a4;
  return specialized static MainActor.assumeIsolated<A>(_:file:line:)((void (*)(void))partial apply for closure #1 in closure #2 in closure #1 in _ButtonGesture.internalBody.getter, (uint64_t)v6);
}

uint64_t _ButtonGesture.LegacyBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, char);
  uint64_t v34;
  __int128 v35;

  v29 = a1;
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(0);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)v1;
  v7 = *(unsigned __int8 *)(v1 + 8);
  v8 = *(unsigned __int8 *)(v1 + 9);
  v9 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)&v26 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 32);
  v11 = *(_QWORD *)(v1 + 40);
  v12 = *(double *)(v1 + 48);
  v13 = *(unsigned __int8 *)(v1 + 56);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  v14 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  v16 = v15;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  if ((v16 & 1) != 0)
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    v18 = v30;
    v35 = v30;
    v17 = 25.0;
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0)
    {
      v35 = v18;
      if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
        v17 = 0.0;
      else
        v17 = 70.0;
    }
  }
  else
  {
    v17 = *(double *)&v14;
  }
  if (v13)
    v12 = 0.0;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v26;
  *(_QWORD *)(v19 + 24) = v9;
  *(double *)&v30 = v17;
  *((double *)&v30 + 1) = v12;
  v31 = v10;
  v32 = v11;
  v33 = partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:);
  v34 = v19;
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v10, v11);
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>, MEMORY[0x1E0CE2E88]);
  swift_retain();
  Gesture.cancellable()();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  MapGesture.init(_:)();
  v21 = v27;
  v20 = v28;
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 16);
  v26 = v30;
  v23 = v29;
  v22(v29, v5, v28);
  type metadata accessor for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  *(_OWORD *)(v23 + *(int *)(v24 + 52)) = v26;
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v20);
}

uint64_t EnvironmentValues.buttonOutset.getter()
{
  uint64_t v0;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.buttonOutset : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.buttonOutset.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_187A99004@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.buttonOutset.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.buttonOutset : EnvironmentValues()
{
  return EnvironmentValues.buttonOutset.setter();
}

uint64_t sub_187A99070()
{
  return EnvironmentValues.buttonOutset.setter();
}

unint64_t lazy protocol witness table accessor for type _ButtonGesture and conformance _ButtonGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture;
  if (!lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ButtonGesture, &type metadata for _ButtonGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture;
  if (!lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ButtonGesture, &type metadata for _ButtonGesture);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture);
  }
  return result;
}

uint64_t outlined retain of _ButtonGesture(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v2, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.buttonOutset.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance _ButtonGesture@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  _OWORD v7[2];

  v3 = v1[1];
  v6 = *v1;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(__int128 *)((char *)v1 + 25);
  closure #1 in _ButtonGesture.internalBody.getter((uint64_t)&v6, a1);
  *(_QWORD *)(a1 + 72) = swift_getKeyPath();
  *(_WORD *)(a1 + 80) = 0;
  v4 = v7[0];
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v7 + 9);
  return outlined retain of _ButtonGesture((uint64_t)&v6);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _ButtonGesture()
{
  lazy protocol witness table accessor for type _ButtonGesture and conformance _ButtonGesture();
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance _ButtonGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t View._onButtonGesture(pressing:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD v12[5];
  char v13;
  uint64_t v14;
  uint64_t v15;

  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = 0;
  v13 = 1;
  v14 = a3;
  v15 = a4;
  swift_retain_n();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for ButtonActionModifier<_ButtonGesture>, (uint64_t)&type metadata for _ButtonGesture, (uint64_t)&protocol witness table for _ButtonGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ButtonActionModifier);
  MEMORY[0x18D75B4AC](v12, a5, v10, a6);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
  return swift_release();
}

uint64_t implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v11 = type metadata accessor for ButtonActionModifier.PlatformSelectionBehavior(0, a3, a4, a4);
  v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonActionModifier<A>.PlatformSelectionBehavior, v11);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7;
}

uint64_t (*ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Value;
  char v16;
  char v17;
  void (*v18)(char *, char *, uint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v6 = type metadata accessor for ButtonActionModifier(0, a3, a4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v22 - v13;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, Value, v6);
  v16 = *(_BYTE *)AGGraphGetValue();
  v17 = *(_BYTE *)AGGraphGetValue();
  v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v18(v10, v14, v6);
  v19 = (*(unsigned __int8 *)(v7 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a3;
  *(_QWORD *)(v20 + 24) = a4;
  *(_BYTE *)(v20 + 32) = v16;
  *(_BYTE *)(v20 + 33) = v17;
  v18((char *)(v20 + v19), v10, v6);
  return partial apply for closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter;
}

uint64_t closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v12 = type metadata accessor for PlatformItemList.Item();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v28 - v19;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v28 - v19);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v22 = (uint64_t *)(a4 + *(int *)(type metadata accessor for ButtonActionModifier(0, a5, a6, v21) + 36));
    v24 = *v22;
    v23 = v22[1];
    swift_retain();
  }
  else
  {
    v24 = 0;
    v23 = 0;
    a3 = 0;
  }
  outlined consume of PlatformItemList.Item.SelectionBehavior?(*((_QWORD *)v20 + 50), *((_QWORD *)v20 + 51), *((_QWORD *)v20 + 52), *((_QWORD *)v20 + 53), *((_QWORD *)v20 + 54), *((_QWORD *)v20 + 55));
  *((_QWORD *)v20 + 50) = 1;
  *((_QWORD *)v20 + 51) = v24;
  *((_QWORD *)v20 + 52) = v23;
  *(_OWORD *)(v20 + 424) = 0u;
  *(_OWORD *)(v20 + 440) = 0u;
  *((_QWORD *)v20 + 57) = 0;
  v20[464] = a3;
  v20[56] = a2 & 1;
  outlined init with copy of PlatformItemList.Item((uint64_t)v20, (uint64_t)v16);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v25 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_187BF9830;
  outlined init with take of PlatformItemList.Item((uint64_t)v16, v26 + v25);
  *a1 = v26;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItemList.Item);
}

uint64_t protocol witness for Rule.value.getter in conformance ButtonActionModifier<A>.PlatformSelectionBehavior@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = ButtonActionModifier.PlatformSelectionBehavior.value.getter(*(_QWORD *)v2, *(unsigned int *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v6 = v5;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t ButtonActionModifier.PlatformAction.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Value;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v4 = type metadata accessor for ButtonActionModifier(0, a2, a3, a4);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - v7;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, Value, v4);
  v10 = *(_QWORD *)&v8[*(int *)(v4 + 36)];
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_retain();
  v11(v8, v4);
  return v10;
}

uint64_t protocol witness for Rule.value.getter in conformance ButtonActionModifier<A>.PlatformAction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (**a3)()@<X8>)
{
  unsigned int *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  result = ButtonActionModifier.PlatformAction.value.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  if (result)
  {
    v7 = result;
    v8 = v6;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v7;
    *(_QWORD *)(result + 24) = v8;
    v9 = thunk for @escaping @callee_guaranteed () -> (@out ())partial apply;
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  a3[1] = (uint64_t (*)())result;
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance LegacyButtonGesture.Value(uint64_t a1)
{
  return ((uint64_t (*)(_QWORD))((char *)sub_187A99A54 + 4 * byte_187C863B0[*(unsigned __int8 *)(a1 + 25)]))(0);
}

uint64_t sub_187A99A54()
{
  char v0;

  return v0 & 1;
}

uint64_t LegacyButtonGesture.body.getter(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t (*v16)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t v17;
  _BYTE v19[16];
  uint64_t (*v20)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t v21;

  type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(0, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v19[-v8];
  type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = swift_allocObject();
  *(double *)(v14 + 16) = a1;
  *(double *)(v14 + 24) = a2;
  v20 = partial apply for closure #1 in LegacyButtonGesture.body.getter;
  v21 = v14;
  v19[15] = 3;
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(0);
  v16 = v15;
  v17 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, MEMORY[0x1E0CE1270]);
  Gesture.dependency(_:)();
  swift_release();
  v20 = v16;
  v21 = v17;
  swift_getOpaqueTypeConformance2();
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>, MEMORY[0x1E0CE2E88]);
  Gesture.eventFilter<A>(forType:_:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
}

BOOL closure #1 in closure #1 in LegacyButtonGesture.body.getter(uint64_t a1)
{
  return *(_BYTE *)(a1 + 24) == 0;
}

void closure #2 in closure #1 in LegacyButtonGesture.body.getter(uint64_t a1)
{
  __asm { BR              X9 }
}

void sub_187A99CEC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CGFloat v25;
  CGFloat v26;
  _BOOL4 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGPoint v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  if (v6 == 1)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_WORD *)(v2 + 24) = 2;
  }
  else
  {
    v29 = v2;
    v14 = -a1;
    v30 = v1;
    outlined copy of GesturePhase<SpatialEvent>(v7, v3, v6, v8, v9, v10, v11, v4, v1, v5);
    v15 = 0;
    v33.origin.x = 0.0;
    v33.origin.y = 0.0;
    v33.size.width = v13;
    v33.size.height = v12;
    v34 = CGRectInset(v33, v14, v14);
    x = v34.origin.x;
    y = v34.origin.y;
    width = v34.size.width;
    height = v34.size.height;
    v20 = v3;
    SpatialEvent.location.getter();
    v22 = v21;
    v24 = v23;
    v31 = v3;
    SpatialEvent.location.getter();
    v32.x = v25;
    v32.y = v26;
    v35.origin.x = x;
    v35.origin.y = y;
    v35.size.width = width;
    v35.size.height = height;
    v27 = CGRectContainsPoint(v35, v32);
    outlined consume of GesturePhase<SpatialEvent>(v7, v31, v6, v8, v9, v10, v11, v4, v30, v5);
    if (v27)
    {
      v28 = 1;
      v15 = v22;
    }
    else
    {
      v20 = 0;
      v28 = 2;
      v24 = 0;
    }
    *(_QWORD *)v29 = v15;
    *(_QWORD *)(v29 + 8) = v24;
    *(_QWORD *)(v29 + 16) = v20;
    *(_BYTE *)(v29 + 24) = v28;
    *(_BYTE *)(v29 + 25) = 0;
  }
}

uint64_t protocol witness for Gesture.body.getter in conformance LegacyButtonGesture()
{
  double *v0;

  return LegacyButtonGesture.body.getter(*v0, v0[1]);
}

void (*EnvironmentValues.buttonOutset.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v4 = *((_BYTE *)v3 + 24);
  *v3 = v3[2];
  *((_BYTE *)v3 + 8) = v4;
  return EnvironmentValues.buttonOutset.modify;
}

void EnvironmentValues.buttonOutset.modify(_QWORD **a1)
{
  _BYTE *v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = (*a1)[4];
  v3 = *((_BYTE *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1E1ABAA40, (uint64_t)&protocol witness table for ButtonOutsetKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  free(v1);
}

_UNKNOWN **base witness table accessor for Gesture in _ButtonGesture()
{
  return &protocol witness table for _ButtonGesture;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in _ButtonGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A9A268@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t assignWithTake for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>();
    v2[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<PrimitiveButtonGesture, ()> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>, MEMORY[0x1E0CE14D8]);
    v2[1] = lazy protocol witness table accessor for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>;
  if (!lazy cache variable for type metadata for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>)
  {
    type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>();
    type metadata accessor for StaticIf();
  }
  return result;
}

void type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<PrimitiveButtonGesture, ()>)
  {
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<PrimitiveButtonGesture, ()>);
  }
}

unint64_t lazy protocol witness table accessor for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody;
  if (!lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _ButtonGesture.LegacyBody, &unk_1E1AB9D48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody);
  }
  return result;
}

uint64_t sub_187A9A508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for ButtonActionModifier<_ButtonGesture>, (uint64_t)&type metadata for _ButtonGesture, (uint64_t)&protocol witness table for _ButtonGesture, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ButtonActionModifier);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for ButtonActionModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187A9A584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>, MEMORY[0x1E0CE65C0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t destroy for _ButtonGesture.LegacyBody(uint64_t a1)
{
  uint64_t result;

  outlined consume of Environment<CGFloat?>.Content(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_BYTE *)(a1 + 9));
  result = swift_release();
  if (*(_QWORD *)(a1 + 32))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v6, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain();
  if (v7)
  {
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_BYTE *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(_QWORD *)a2, v6, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = v4;
  v9 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v10;
  swift_retain();
  swift_release();
  v11 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v13;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  v14 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v14;
  return a1;
}

uint64_t assignWithTake for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 9);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 9);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v6, v8, v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v9 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v9)
    {
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v11;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  swift_release();
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ButtonGesture.LegacyBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ButtonGesture.LegacyBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for _ButtonGesture.LegacyBody()
{
  return &unk_1E1AB9D48;
}

uint64_t initializeWithCopy for PrimitiveButtonGesture(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    outlined copy of HoverCallback();
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v5;
  }
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveButtonGesture(uint64_t a1, __int128 *a2)
{
  int v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v10 = v4 & 1;
      v11 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      outlined copy of HoverCallback();
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_BYTE *)(a1 + 16) = v10;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of ButtonPressingAction(a1);
    v5 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    outlined copy of HoverCallback();
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
    outlined consume of HoverCallback();
  }
  v13 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = v13;
  swift_retain();
  swift_release();
  v14 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  return a1;
}

uint64_t outlined destroy of ButtonPressingAction(uint64_t a1)
{
  outlined consume of HoverCallback();
  return a1;
}

uint64_t assignWithTake for PrimitiveButtonGesture(uint64_t a1, uint64_t a2)
{
  int v4;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v4 & 1;
      outlined consume of HoverCallback();
      goto LABEL_6;
    }
    outlined destroy of ButtonPressingAction(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGesture()
{
  return &type metadata for PrimitiveButtonGesture;
}

ValueMetadata *type metadata accessor for ButtonPressingAction()
{
  return &type metadata for ButtonPressingAction;
}

uint64_t getEnumTagSinglePayload for ButtonActionModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187A9AC34 + 4 * byte_187C863B8[v10]))();
  }
}

void storeEnumTagSinglePayload for ButtonActionModifier(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187A9ADAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187A9AE24);
}

void sub_187A9ADB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187A9ADBCLL);
  JUMPOUT(0x187A9AE24);
}

void sub_187A9ADFC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A9AE24);
}

void sub_187A9AE04()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187A9AE24);
}

uint64_t sub_187A9AE0C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187A9AE24);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187A9AE20);
    JUMPOUT(0x187A9AE18);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void *type metadata accessor for ButtonOutsetKey()
{
  return &unk_1E1ABAA40;
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonActionModifier<A>()
{
  return &protocol witness table for ButtonActionModifier<A>;
}

void base witness table accessor for MultiViewModifier in ButtonActionModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for PrimitiveViewModifier in ButtonActionModifier<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for Gesture in PrimitiveButtonGesture()
{
  return &protocol witness table for PrimitiveButtonGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in _ButtonGesture.LegacyBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static PrimitiveButtonGesture._makeGesture(gesture:inputs:)()
{
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<PrimitiveButtonGesture>, (uint64_t)&type metadata for PrimitiveButtonGesture, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  swift_getKeyPath();
  _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  _GraphInputs.interfaceIdiom.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, MEMORY[0x1E0CE2E88]);
  swift_getOpaqueTypeConformance2();
  static Gesture.makeDebuggableGesture(gesture:inputs:)();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _GestureOutputs<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE2FD8]);
  _GestureOutputs.phase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  lazy protocol witness table accessor for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase();
  Attribute.init<A>(body:value:flags:update:)();
  _GestureOutputs.withPhase<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t PrimitiveButtonGesture.Child.value.getter()
{
  PrimitiveButtonGesture.Child.effectiveOutset.getter();
  AGGraphGetValue();
  type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, MEMORY[0x1E0CE2E88]);
  return Gesture.requiredTapCount(_:)();
}

double PrimitiveButtonGesture.Child.effectiveOutset.getter()
{
  _BYTE *Value;
  char v1;
  double result;
  char v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  Value = (_BYTE *)AGGraphGetValue();
  if ((Value[8] & 1) == 0)
    return *(double *)Value;
  v1 = AnyInterfaceIdiom.accepts<A>(_:)();
  result = 25.0;
  if ((v1 & 1) == 0)
  {
    v3 = AnyInterfaceIdiom.accepts<A>(_:)();
    result = 70.0;
    if ((v3 & 1) != 0)
      return 0.0;
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PrimitiveButtonGesture.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void protocol witness for static Rule.initialValue.getter in conformance PrimitiveButtonGesture.Phase(_WORD *a1@<X8>)
{
  *a1 = -256;
}

uint64_t protocol witness for Rule.value.getter in conformance PrimitiveButtonGesture.Phase()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for GesturePhase<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE17C0]);
  AGGraphGetValue();
  return GesturePhase.withValue<A>(_:)();
}

void protocol witness for Gesture.body.getter in conformance PrimitiveButtonGesture()
{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, MEMORY[0x1E0CE2E88]);
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE76F8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0);
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>();
    v5[0] = v2;
    v5[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>, MEMORY[0x1E0CE2E88]);
    v3 = MEMORY[0x18D75FF88](a1, v5, MEMORY[0x1E0CE76F8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0);
  }
}

uint64_t PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t (*v23)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  char v28;
  uint64_t (*v29)@<X0>(uint64_t@<X8>, double@<D0>, double@<D1>);
  uint64_t v30;

  v27[2] = a3;
  type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(0, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v27 - v11;
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>();
  v27[1] = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  *(double *)(v21 + 16) = a4;
  *(_QWORD *)(v21 + 24) = a1;
  *(_BYTE *)(v21 + 32) = a2 & 1;
  v29 = partial apply for closure #1 in PrimitiveButtonGestureCore.body.getter;
  v30 = v21;
  v28 = 3;
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(0);
  v23 = v22;
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, MEMORY[0x1E0CE1270]);
  Gesture.dependency(_:)();
  swift_release();
  v29 = v23;
  v30 = v24;
  swift_getOpaqueTypeConformance2();
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v25 = MEMORY[0x1E0CE2E88];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>, MEMORY[0x1E0CE2E88]);
  Gesture.eventFilter<A>(forType:_:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>, v25);
  Gesture.cancellable()();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
}

void closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_187A9B8CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  CGFloat v10;
  CGFloat v11;
  double v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (v8 == 1)
  {
    *(_QWORD *)v0 = 0;
    *(_QWORD *)(v0 + 8) = 0;
    *(_QWORD *)(v0 + 16) = 0;
    *(_WORD *)(v0 + 24) = 3;
  }
  else
  {
    v14 = v9;
    v15 = v1;
    v16 = v8;
    v17 = v2;
    v18 = v7;
    v19 = v6;
    v20 = v5;
    v21 = v4;
    v22 = v3;
    result = PrimitiveButtonGestureCore.makeValue(event:size:)((uint64_t)&v14, v0, v11, v10, v12);
    *(_BYTE *)(v0 + 25) = 0;
  }
  return result;
}

uint64_t PrimitiveButtonGestureCore.makeValue(event:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, double a5@<D2>)
{
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  char v11;
  CGFloat x;
  CGFloat y;
  CGFloat v14;
  CGFloat v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  CGFloat height;
  CGFloat width;
  CGPoint v22;
  CGPoint v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v8 = *(_QWORD *)(a1 + 8);
  SpatialEvent.location.getter();
  v22.x = v9;
  v22.y = v10;
  v24.origin.x = 0.0;
  v24.origin.y = 0.0;
  v24.size.width = a3;
  v24.size.height = a4;
  if (CGRectContainsPoint(v24, v22))
  {
    v11 = 0;
  }
  else
  {
    v25.origin.x = 0.0;
    v25.origin.y = 0.0;
    v25.size.width = a3;
    v25.size.height = a4;
    v26 = CGRectInset(v25, -a5, -a5);
    x = v26.origin.x;
    y = v26.origin.y;
    height = v26.size.height;
    width = v26.size.width;
    SpatialEvent.location.getter();
    v23.x = v14;
    v23.y = v15;
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.height = height;
    v27.size.width = width;
    if (CGRectContainsPoint(v27, v23))
      v11 = 1;
    else
      v11 = 2;
  }
  result = SpatialEvent.location.getter();
  *(_QWORD *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v11;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance PrimitiveButtonGestureCore@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return PrimitiveButtonGestureCore.body.getter(*(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1, *(double *)v1);
}

void PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t (*sub_187A9BCE0())()
{
  _BYTE *v0;
  uint64_t *v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t (*result)();
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v3 = *v0;
  if (v2 < 2)
  {
    if (v3 != 2)
    {
      v4 = 2;
      goto LABEL_7;
    }
    return 0;
  }
  if (v3 == 1)
    return 0;
  v4 = 1;
LABEL_7:
  v6 = *((unsigned __int8 *)v1 + 16);
  if (v6 == 255)
  {
LABEL_8:
    result = 0;
    *v0 = v4;
    return result;
  }
  v8 = *v1;
  v7 = v1[1];
  if ((v6 & 1) != 0)
  {
    if (v3 == v4 || (v3 - 1) < 2)
      goto LABEL_8;
  }
  else if (v3 == v4)
  {
    goto LABEL_8;
  }
  v9 = v6 & 1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v7;
  *(_BYTE *)(v10 + 32) = v9;
  *(_BYTE *)(v10 + 33) = v4;
  *v0 = v4;
  outlined copy of HoverCallback();
  return partial apply for closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:);
}

uint64_t closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(_QWORD), double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  a1(0);
  outlined consume of HoverCallback();
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a6 + 24))(*(_QWORD *)&a2, *(_QWORD *)&a3, 0);
}

uint64_t closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(_BOOL8), uint64_t a2, char a3, _BOOL8 a4)
{
  _BOOL8 v4;

  v4 = a4;
  if ((a3 & 1) != 0)
    v4 = (a4 - 1) < 2u;
  swift_retain();
  a1(v4);
  return outlined consume of HoverCallback();
}

uint64_t closure #1 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(_QWORD))
{
  swift_retain();
  a1(0);
  return outlined consume of HoverCallback();
}

void protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance PrimitiveButtonGestureCallbacks(uint64_t a1)
{
  PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(a1);
}

uint64_t (*protocol witness for GestureCallbacks.cancel(state:) in conformance PrimitiveButtonGestureCallbacks(unsigned __int8 *a1))()
{
  uint64_t *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v2 = *((unsigned __int8 *)v1 + 16);
  if (v2 == 255)
    return 0;
  v3 = *a1;
  v4 = *v1;
  v5 = v1[1];
  if ((v2 & 1) != 0)
  {
    if ((v3 - 1) > 1)
      return 0;
  }
  else if (v3 != 2)
  {
    return 0;
  }
  v7 = v2 & 1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_BYTE *)(v8 + 32) = v7;
  outlined copy of HoverCallback();
  return partial apply for closure #1 in PrimitiveButtonGestureCallbacks.cancel(state:);
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonGesture.Child, &unk_1E1B18B80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonGesture.Phase, &unk_1E1ADD358);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>> and conformance CallbacksGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, MEMORY[0x1E0CE3150]);
    lazy protocol witness table accessor for type LegacyButtonGesture and conformance LegacyButtonGesture();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
  }
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<LegacyButtonGesture.Value>, (uint64_t (*)(void))lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value, (uint64_t)&unk_1E1ACE768, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    lazy protocol witness table accessor for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>();
    v0 = type metadata accessor for CallbacksGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>);
  }
}

unint64_t lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyButtonGesture.Value, &unk_1E1ACE768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyButtonGesture.Value, &unk_1E1ACE768);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>;
  if (!lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>)
  {
    type metadata accessor for VStack<TableHeaderViewCore>(255, &lazy cache variable for type metadata for PressableGestureCallbacks<LegacyButtonGesture.Value>, (uint64_t (*)(void))lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value, (uint64_t)&unk_1E1ACE768, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PressableGestureCallbacks<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LegacyButtonGesture and conformance LegacyButtonGesture()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LegacyButtonGesture, &unk_1E1ACE7F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture);
  }
  return result;
}

uint64_t sub_187A9C480()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

void type metadata accessor for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<LegacyButtonGesture.Value, ()>, (uint64_t)&unk_1E1ACE768, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255);
    lazy protocol witness table accessor for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<LegacyButtonGesture.Value, ()>, (uint64_t)&unk_1E1ACE768, MEMORY[0x1E0DEE9C0] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>);
  }
  return result;
}

uint64_t specialized static LegacyButtonGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    return (*(unsigned __int8 *)(a2 + 24) ^ *(unsigned __int8 *)(a1 + 24) ^ 1) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL specialized static PrimitiveButtonGestureCore.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
}

uint64_t type metadata accessor for ButtonActionModifier.PlatformAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonActionModifier.PlatformAction);
}

uint64_t partial apply for implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  return implicit closure #2 in static ButtonActionModifier._makeView(modifier:inputs:body:)(*(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for ButtonActionModifier.PlatformSelectionBehavior(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ButtonActionModifier.PlatformSelectionBehavior);
}

uint64_t sub_187A9C6EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187A9C710()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in _ButtonGesture.internalBody.getter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return closure #2 in closure #1 in _ButtonGesture.internalBody.getter(a1, a2, a3 & 1, v3 + 16);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(char a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in _ButtonGesture.internalBody.getter()
{
  uint64_t v0;

  return (**(uint64_t (***)(void))(v0 + 16))();
}

void *type metadata accessor for PrimitiveButtonGesture.Phase()
{
  return &unk_1E1ADD358;
}

uint64_t getEnumTagSinglePayload for PrimitiveButtonGestureCore.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimitiveButtonGestureCore.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCore.Value()
{
  return &type metadata for PrimitiveButtonGestureCore.Value;
}

void *type metadata accessor for PrimitiveButtonGesture.Child()
{
  return &unk_1E1B18B80;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCore()
{
  return &type metadata for PrimitiveButtonGestureCore;
}

uint64_t destroy for PrimitiveButtonGesture(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255)
    outlined consume of HoverCallback();
  return swift_release();
}

uint64_t initializeWithCopy for PrimitiveButtonGestureCallbacks(uint64_t a1, uint64_t *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v5 = v4 & 1;
    v6 = *a2;
    v7 = a2[1];
    outlined copy of HoverCallback();
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v5;
  }
  v8 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveButtonGestureCallbacks(uint64_t a1, __int128 *a2)
{
  int v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      v6 = *a2;
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      v10 = v4 & 1;
      v11 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      outlined copy of HoverCallback();
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_BYTE *)(a1 + 16) = v10;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of ButtonPressingAction(a1);
    v5 = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 16) = v5;
  }
  else
  {
    v7 = v4 & 1;
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    outlined copy of HoverCallback();
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_BYTE *)(a1 + 16) = v7;
    outlined consume of HoverCallback();
  }
  v13 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PrimitiveButtonGestureCallbacks(uint64_t a1, uint64_t a2)
{
  int v4;

  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = v4 & 1;
      outlined consume of HoverCallback();
      goto LABEL_6;
    }
    outlined destroy of ButtonPressingAction(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCallbacks()
{
  return &type metadata for PrimitiveButtonGestureCallbacks;
}

void *type metadata accessor for LegacyButtonGesture()
{
  return &unk_1E1ACE7F0;
}

uint64_t getEnumTagSinglePayload for LegacyButtonGesture.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyButtonGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for LegacyButtonGesture.Value()
{
  return &unk_1E1ACE768;
}

uint64_t storeEnumTagSinglePayload for ButtonPressPhase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_187A9CBC0 + 4 * byte_187C863D4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_187A9CBF4 + 4 * byte_187C863CF[v4]))();
}

uint64_t sub_187A9CBF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A9CBFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A9CC04);
  return result;
}

uint64_t sub_187A9CC10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A9CC18);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_187A9CC1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A9CC24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ButtonPressPhase()
{
  return &type metadata for ButtonPressPhase;
}

uint64_t sub_187A9CC40()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()> and conformance _MapGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>, MEMORY[0x1E0CE14D8]);
}

void type metadata accessor for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0(255);
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>, MEMORY[0x1E0CE2E88]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for _MapGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>);
  }
}

unint64_t lazy protocol witness table accessor for type ButtonPressPhase and conformance ButtonPressPhase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase;
  if (!lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ButtonPressPhase, &type metadata for ButtonPressPhase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase);
  }
  return result;
}

void base witness table accessor for _AttributeBody in ButtonActionModifier<A>.PlatformSelectionBehavior()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in ButtonActionModifier<A>.PlatformAction()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in LegacyButtonGesture()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for LegacyButtonGesture.Value(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in PrimitiveButtonGestureCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A9CE30()
{
  return objectdestroy_46Tm();
}

uint64_t partial apply for closure #1 in PrimitiveButtonGestureCallbacks.cancel(state:)()
{
  uint64_t v0;

  return closure #1 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(_QWORD))(v0 + 16));
}

uint64_t sub_187A9CE54()
{
  return objectdestroy_46Tm();
}

uint64_t partial apply for closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;

  return closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(_BOOL8))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t outlined init with take of ButtonPressingAction?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for ButtonPressingAction?, (uint64_t)&type metadata for ButtonPressingAction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187A9CEC8()
{
  uint64_t v0;

  if (*(unsigned __int8 *)(v0 + 32) != 255)
    outlined consume of HoverCallback();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 40))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), 0);
}

uint64_t outlined retain of ButtonPressingAction?(uint64_t a1)
{
  outlined copy of ButtonPressingAction?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t outlined copy of ButtonPressingAction?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 != 255)
    return outlined copy of HoverCallback();
  return result;
}

uint64_t sub_187A9CF74()
{
  uint64_t v0;

  outlined consume of HoverCallback();
  if (*(unsigned __int8 *)(v0 + 56) != 255)
    outlined consume of HoverCallback();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v0;

  return closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(_QWORD))(v0 + 16), *(double *)(v0 + 80), *(double *)(v0 + 88), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), v0 + 40);
}

uint64_t sub_187A9CFD8()
{
  return objectdestroy_46Tm();
}

uint64_t objectdestroy_46Tm()
{
  outlined consume of HoverCallback();
  return swift_deallocObject();
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1)
{
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(a1, (unint64_t *)&lazy cache variable for type metadata for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>, &lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>);
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE2E88]);
    v7 = type metadata accessor for SizeGesture();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(a1, &lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>, &lazy cache variable for type metadata for MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (void (*)(void))lazy protocol witness table accessor for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>);
}

void type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    v0 = MEMORY[0x1E0CE1920];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DelayedGesture<SpatialEvent>, MEMORY[0x1E0CE1920], MEMORY[0x1E0CE26E8]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E0CE1910], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    v1 = type metadata accessor for ModifierGesture();
    if (!v2)
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>);
  }
}

unint64_t lazy protocol witness table accessor for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>;
  if (!lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for DelayedGesture<SpatialEvent>, MEMORY[0x1E0CE1920], MEMORY[0x1E0CE26E8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE26F8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, MEMORY[0x1E0CE1920], (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>);
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<PrimitiveButtonGestureCore.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value);
    type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, MEMORY[0x1E0CE1270]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  }
}

uint64_t lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1180], v5);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<PrimitiveButtonGestureCore.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
  }
}

uint64_t sub_187A9D49C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  double v8;
  int v9;
  double v10;
  uint64_t result;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(double *)(v3 + 24);
  v9 = *(unsigned __int8 *)(v3 + 32);
  if (v9)
    v10 = 0.01;
  else
    v10 = v8;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  *(double *)(result + 24) = v8;
  *(_BYTE *)(result + 32) = v9;
  *(double *)(result + 40) = a2;
  *(double *)(result + 48) = a3;
  *(_BYTE *)a1 = 0;
  *(double *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = closure #1 in closure #1 in PrimitiveButtonGestureCore.body.getter;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = partial apply for closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_187A9D54C()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter(uint64_t a1)
{
  closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter(a1);
}

void type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  if (!*a2)
  {
    v10[0] = a3(255);
    v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, MEMORY[0x1E0CE1270]);
    v8 = MEMORY[0x18D75FF88](a1, v10, MEMORY[0x1E0CE76D0], 0);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1)
{
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(a1, &lazy cache variable for type metadata for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>, &lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>);
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(a1, &lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>, &lazy cache variable for type metadata for MapGesture<SpatialEvent, LegacyButtonGesture.Value>, (uint64_t)&unk_1E1ACE768, (void (*)(void))lazy protocol witness table accessor for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>);
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, a3, MEMORY[0x1E0CE1920], a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    a5();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>, MEMORY[0x1E0CE2E88]);
    v7 = type metadata accessor for ModifierGesture();
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, LegacyButtonGesture.Value>, MEMORY[0x1E0CE1920], (uint64_t)&unk_1E1ACE768, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1E1ACE768, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>);
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1E1ACE768);
    type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, MEMORY[0x1E0CE1270]);
    swift_getOpaqueTypeConformance2();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  }
}

uint64_t sub_187A9D888()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LegacyButtonGesture.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 24) = v8;
  *(double *)(result + 32) = a2;
  *(double *)(result + 40) = a3;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = closure #1 in closure #1 in LegacyButtonGesture.body.getter;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = partial apply for closure #2 in closure #1 in LegacyButtonGesture.body.getter;
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t sub_187A9D90C()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in LegacyButtonGesture.body.getter(uint64_t a1)
{
  closure #2 in closure #1 in LegacyButtonGesture.body.getter(a1);
}

uint64_t sub_187A9D928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ButtonActionModifier(0, v5, *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + ((v6 + 34) & ~v6), v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ButtonActionModifier(0, v6, v7, a4) - 8) + 80);
  return closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(a1, *(_BYTE *)(v4 + 32), *(_BYTE *)(v4 + 33), v4 + ((v8 + 34) & ~v8), v6, v7);
}

uint64_t storeEnumTagSinglePayload for PrimitiveButtonGestureCore.LocationInBounds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187A9DA60 + 4 * byte_187C863DE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187A9DA94 + 4 * byte_187C863D9[v4]))();
}

uint64_t sub_187A9DA94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A9DA9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187A9DAA4);
  return result;
}

uint64_t sub_187A9DAB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187A9DAB8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187A9DABC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187A9DAC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PrimitiveButtonGestureCore.LocationInBounds()
{
  return &unk_1E1AEF9C8;
}

uint64_t sub_187A9DAE0()
{
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A9DB54()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>, MEMORY[0x1E0CE2E88]);
}

void type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1E1ACE768, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1170]);
    type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1E1ACE768);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>, MEMORY[0x1E0CE2E88]);
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
  }
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveButtonGestureCore.LocationInBounds, &unk_1E1AEF9C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds);
  }
  return result;
}

uint64_t closure #1 in UIKitSearchFieldAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  _BYTE v20[216];
  id v21[27];

  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for KitRepresentable(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  outlined init with take of TableCellFormula(a1 + 24, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItem.PrimaryContent?);
  outlined init with take of TableCellFormula((uint64_t)v20, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for PlatformItem.PrimaryContent?);
  v14 = 0;
  v15 = 0;
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v21) != 1)
  {
    if (v21[0])
    {
      v16 = objc_msgSend(v21[0], sel_string);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v17;

    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
  }
  outlined init with take of TableCellFormula((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v18 = (uint64_t *)&v13[*(int *)(v10 + 20)];
  *v18 = v14;
  v18[1] = v15;
  return outlined init with take of TableCellFormula((uint64_t)v13, a3, type metadata accessor for KitRepresentable);
}

uint64_t protocol witness for View.body.getter in conformance UIKitSearchFieldAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, (uint64_t)v7, type metadata accessor for UIKitSearchFieldAdaptor);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  outlined init with take of TableCellFormula((uint64_t)v7, v9 + v8, type metadata accessor for UIKitSearchFieldAdaptor);
  swift_retain();
  v10 = static Alignment.center.getter();
  v12 = v11;
  v13 = v3 + *(int *)(type metadata accessor for SearchFieldConfiguration(0) + 32);
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(v13 + 8);
  v16 = *(_BYTE *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  outlined copy of Text.Storage(*(_QWORD *)v13, v15, v16);
  swift_bridgeObjectRetain();
  result = swift_release();
  *(_QWORD *)a3 = partial apply for closure #1 in UIKitSearchFieldAdaptor.body.getter;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 40) = v15;
  *(_BYTE *)(a3 + 48) = v16;
  *(_QWORD *)(a3 + 56) = v17;
  return result;
}

void KitRepresentable.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v6 = type metadata accessor for AttributedString();
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v40, v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 32);
  v16 = *(void **)(a2 + 40);
  v38 = v2;
  if ((_DWORD)v12 == 1)
  {
    v39 = &v36;
    MEMORY[0x1E0C80A78](v10, v11);
    *(&v36 - 2) = __ROR8__(v15, 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v14, 1);
    v17 = v6;
    v18 = v16;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v15, v14, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v14, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v15, v14, 1);

    v6 = v17;
    v3 = v38;
    v15 = v45;
    v14 = v46;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  v19 = v16;
  specialized UIKitTextInput.update(in:)(v15, v14);
  specialized UIKitTextInputTraits.updateTraits(in:)(v15, v14);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v15, v14);
  v39 = (uint64_t *)OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating;
  v19[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 1;
  v20 = (uint64_t *)(v3 + *(int *)(type metadata accessor for KitRepresentable(0) + 20));
  v21 = v20[1];
  if (!v21)
    goto LABEL_10;
  v22 = *v20;
  v23 = objc_msgSend(a1, sel_placeholder);
  if (v23)
  {
    v24 = v23;
    v37 = v6;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    if (v25 == v22 && v21 == v27)
    {
      swift_bridgeObjectRelease();
      v6 = v37;
LABEL_10:
      objc_msgSend(a1, sel_setPlaceholder_, 0);
      goto LABEL_12;
    }
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v6 = v37;
    if ((v28 & 1) != 0)
      goto LABEL_10;
  }
  v29 = (void *)MEMORY[0x18D75CC88](v22, v21);
  objc_msgSend(a1, sel_setPlaceholder_, v29);

LABEL_12:
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18D75B9C8]();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, &v13[*(int *)(v40 + 36)], v6);
  String.init(_:)();
  v45 = v15;
  v46 = v14;
  v43 = 0;
  v44 = 0;
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  v30 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  swift_bridgeObjectRelease();
  if (v30)
  {
    v31 = objc_msgSend(a1, sel_attributedText);
    if (!v31)
      goto LABEL_15;
    v32 = v31;
    type metadata accessor for NSAttributedString();
    v33 = v30;
    v34 = v32;
    LOBYTE(v32) = static NSObject.== infix(_:_:)();

    if ((v32 & 1) == 0)
    {
LABEL_15:
      v35 = v30;
      objc_msgSend(a1, sel_setAttributedText_, v35);

    }
  }
  swift_release();
  swift_release();
  *((_BYTE *)v39 + (_QWORD)v19) = 0;

}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance KitRepresentable(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C48]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_textDidChange_, 0x20000);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingDidBegin_, 0x10000);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingDidEnd_, 0x40000);

  return v2;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance KitRepresentable@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  _BYTE *v8;
  id v9;
  uint64_t result;
  objc_super v11;

  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v7 = (objc_class *)type metadata accessor for Coordinator(0);
  v8 = objc_allocWithZone(v7);
  v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)&v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state], (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  v11.receiver = v8;
  v11.super_class = v7;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  *a1 = v9;
  return result;
}

double protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance KitRepresentable(uint64_t a1, id a2)
{
  double result;
  __int128 v4;
  double v5;

  objc_msgSend(a2, sel_sizeThatFits_, *MEMORY[0x1E0DC4FF8], *(double *)(MEMORY[0x1E0DC4FF8] + 8));
  static _LayoutTraits.Dimension.fixed(_:)();
  result = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(double *)(a1 + 40) = v5;
  return result;
}

void Coordinator.textDidChange(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v26 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v26, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AttributeContainer();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for AttributedString();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  type metadata accessor for Binding<SearchFieldState>(0);
  v18 = v17;
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating) & 1) == 0)
  {
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
    v22 = objc_msgSend(a1, sel_text);
    if (v22)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    MEMORY[0x18D75B9C8](v18);
    v23 = &v5[*(int *)(v26 + 36)];
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v23, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 24))(v23, v16, v8);
    SearchFieldState.textDidChange(from:)();
    v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v16, v8);
    v24(v12, v8);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
  }
}

uint64_t closure #1 in Coordinator.editingDidBegin(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  int v20;
  unsigned __int8 v21;
  uint64_t v23;

  v2 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (unsigned __int8 *)&v23 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (unsigned __int8 *)&v23 - v12;
  type metadata accessor for Binding<SearchFieldState>(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v18, v19);
  MEMORY[0x18D75B9C8](v15);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if ((*v9 & 1) == 0)
  {
    v20 = v9[2];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v20 == 2)
    {
      v20 = v5[3];
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
      if (v20 == 2)
      {
        v21 = 0;
LABEL_7:
        *v9 = v21;
        v9[*(int *)(v2 + 40)] = 1;
        goto LABEL_8;
      }
    }
    else
    {
      outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    }
    v21 = v20 & 1;
    goto LABEL_7;
  }
LABEL_8:
  if ((specialized static SearchFieldState.== infix(_:_:)(v13, v9) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
}

uint64_t closure #1 in Coordinator.editingDidEnd(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  void (*v45)(char *, uint64_t);
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = type metadata accessor for AttributedString.CharacterView();
  v53 = *(_QWORD *)(v2 - 8);
  v54 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for AttributedString();
  v6 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v47 - v12;
  v14 = type metadata accessor for SearchFieldState();
  MEMORY[0x1E0C80A78](v14, v15);
  v51 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (unsigned __int8 *)&v47 - v23;
  type metadata accessor for Binding<SearchFieldState>(0);
  v26 = v25;
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v29, v30);
  MEMORY[0x18D75B9C8](v26);
  v47 = v24;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v24, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  *v20 = 2;
  AttributedString.init(stringLiteral:)();
  v48 = v14;
  v31 = *(int *)(v14 + 36);
  v32 = v13;
  v33 = v52;
  v34 = &v20[v31];
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, &v20[v31], v52);
  v50 = v6;
  (*(void (**)(char *, char *, uint64_t))(v6 + 24))(v34, v32, v33);
  v49 = v9;
  AttributedString.characters.getter();
  v35 = AttributedString.CharacterView._count.getter();
  v36 = v54;
  v37 = *(void (**)(char *, uint64_t))(v53 + 8);
  v37(v5, v54);
  AttributedString.characters.getter();
  v38 = AttributedString.CharacterView._count.getter();
  result = ((uint64_t (*)(char *, uint64_t))v37)(v5, v36);
  v40 = v38 - v35;
  if (__OFSUB__(v38, v35))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  v41 = v51;
  if (v40 < 0)
  {
    v42 = __OFSUB__(0, v40);
    v40 = v35 - v38;
    if (v42)
      goto LABEL_19;
  }
  if (v40 != 1 || v38 < 1 || *v20 == 2)
    goto LABEL_11;
  v43 = v20[2];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v20, v51, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  if (v43 == 2)
  {
    v44 = *(unsigned __int8 *)(v41 + 3);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if (v44 == 2 || (v44 & 1) == 0)
      goto LABEL_11;
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v41, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
    if ((v43 & 1) == 0)
      goto LABEL_11;
  }
  *v20 = 1;
LABEL_11:
  v45 = *(void (**)(char *, uint64_t))(v50 + 8);
  v45(v32, v33);
  v45(v49, v33);
  if ((v20[8] & 1) == 0)
  {
    *((_DWORD *)v20 + 1) = 0;
    v20[8] = 1;
  }
  v46 = v47;
  v20[*(int *)(v48 + 40)] = 0;
  if ((specialized static SearchFieldState.== infix(_:_:)(v46, (unsigned __int8 *)v20) & 1) == 0)
    dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for SearchFieldState);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for Binding<SearchFieldState>);
}

uint64_t ObjC metadata update function for Coordinator()
{
  return type metadata accessor for Coordinator(0);
}

uint64_t type metadata accessor for Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for Coordinator);
}

void type metadata completion function for Coordinator()
{
  unint64_t v0;

  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t partial apply for closure #1 in Coordinator.editingDidEnd(_:)()
{
  uint64_t v0;

  return closure #1 in Coordinator.editingDidEnd(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in Coordinator.editingDidBegin(_:)()
{
  uint64_t v0;

  return closure #1 in Coordinator.editingDidBegin(_:)(*(_QWORD *)(v0 + 16));
}

_QWORD *initializeBufferWithCopyOfBuffer for UIKitSearchFieldAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v33;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (_QWORD *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = (int *)v4;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v33 = &v10[v13];
    v14 = &v11[v13];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v33, v14, v15);
    v10[v12[10]] = v11[v12[10]];
    v17 = v12[11];
    v18 = &v10[v17];
    v19 = &v11[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v7[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = v22[8];
    if (v23 == 255)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
    }
    else
    {
      v24 = v23 & 1;
      v25 = *(_QWORD *)v22;
      outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v22, v23 & 1);
      *(_QWORD *)v21 = v25;
      v21[8] = v24;
    }
    *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
    v26 = v7[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(_QWORD *)((char *)a2 + v26);
    v30 = *((_QWORD *)v28 + 1);
    v31 = v28[16];
    outlined copy of Text.Storage(v29, v30, v31);
    *(_QWORD *)v27 = v29;
    *((_QWORD *)v27 + 1) = v30;
    v27[16] = v31;
    *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for UIKitSearchFieldAdaptor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = v3 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for SearchFieldConfiguration(0);
  v7 = a1 + *(int *)(v6 + 24);
  v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v7, v8 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(a1 + *(int *)(v6 + 32)), *(_QWORD *)(a1 + *(int *)(v6 + 32) + 8), *(_BYTE *)(a1 + *(int *)(v6 + 32) + 16));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for UIKitSearchFieldAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<SearchFieldState>(0);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((_BYTE *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  v9 = (int *)type metadata accessor for SearchFieldState();
  v10 = v9[9];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for AttributedString();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  v15 = v9[11];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v19 = v18[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = v21[8];
  if (v22 == 255)
  {
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
  }
  else
  {
    v23 = v22 & 1;
    v24 = *(_QWORD *)v21;
    outlined copy of PlatformItemCollection.Storage(*(_QWORD *)v21, v22 & 1);
    *(_QWORD *)v20 = v24;
    v20[8] = v23;
  }
  *((_BYTE *)a1 + v18[7]) = *((_BYTE *)a2 + v18[7]);
  v25 = v18[8];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  v29 = *((_QWORD *)v27 + 1);
  v30 = v27[16];
  outlined copy of Text.Storage(v28, v29, v30);
  *(_QWORD *)v26 = v28;
  *((_QWORD *)v26 + 1) = v29;
  v26[16] = v30;
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for UIKitSearchFieldAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *v6 = *((_BYTE *)a2 + v5);
  v6[1] = *((_BYTE *)a2 + v5 + 1);
  v6[2] = *((_BYTE *)a2 + v5 + 2);
  v6[3] = *((_BYTE *)a2 + v5 + 3);
  LODWORD(v5) = *(_DWORD *)((char *)a2 + v5 + 4);
  v6[8] = v7[8];
  *((_DWORD *)v6 + 1) = v5;
  v8 = (int *)type metadata accessor for SearchFieldState();
  v9 = v8[9];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  v13 = v8[11];
  v14 = &v6[v13];
  v15 = &v7[v13];
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v17 = v16[6];
  v18 = (uint64_t)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((unsigned __int8 *)a1 + v17 + 8);
  v21 = *((unsigned __int8 *)a2 + v17 + 8);
  if (v20 == 255)
  {
    if (v21 == 255)
    {
      v23 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      *(_QWORD *)v18 = v23;
    }
    else
    {
      v28 = v21 & 1;
      v29 = *(_QWORD *)v19;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(_QWORD *)v18 = v29;
      *(_BYTE *)(v18 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v18);
    v22 = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = v22;
  }
  else
  {
    v24 = v21 & 1;
    v25 = *(_QWORD *)v19;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    v26 = *(_QWORD *)v18;
    v27 = *(_BYTE *)(v18 + 8);
    *(_QWORD *)v18 = v25;
    *(_BYTE *)(v18 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((_BYTE *)a1 + v16[7]) = *((_BYTE *)a2 + v16[7]);
  v30 = v16[8];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)((char *)a2 + v30);
  v34 = *((_QWORD *)v32 + 1);
  v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  v36 = *(_QWORD *)v31;
  v37 = *((_QWORD *)v31 + 1);
  v38 = v31[16];
  *(_QWORD *)v31 = v33;
  *((_QWORD *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((_QWORD *)v31 + 3) = *((_QWORD *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for UIKitSearchFieldAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<SearchFieldState>(0);
  v6 = *(int *)(v5 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((_BYTE *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  v9 = (int *)type metadata accessor for SearchFieldState();
  v10 = v9[9];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  v14 = v9[11];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v18 = v17[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *((_BYTE *)a1 + v17[7]) = *((_BYTE *)a2 + v17[7]);
  v21 = v17[8];
  v22 = (_OWORD *)((char *)a1 + v21);
  v23 = (_OWORD *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  return a1;
}

_QWORD *assignWithTake for UIKitSearchFieldAdaptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v5 = *(int *)(v4 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  *v6 = *((_BYTE *)a2 + v5);
  v6[1] = *((_BYTE *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  v8 = (int *)type metadata accessor for SearchFieldState();
  v9 = v8[9];
  v10 = &v6[v9];
  v11 = &v7[v9];
  v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  v13 = v8[11];
  v14 = &v6[v13];
  v15 = &v7[v13];
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  v17 = v16[6];
  v18 = (uint64_t)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    v21 = v19[8];
    if (v21 != 255)
    {
      v22 = *(_QWORD *)v18;
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
LABEL_6:
  *((_BYTE *)a1 + v16[7]) = *((_BYTE *)a2 + v16[7]);
  v23 = v16[8];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  LOBYTE(v23) = v25[16];
  v26 = *(_QWORD *)v24;
  v27 = *((_QWORD *)v24 + 1);
  v28 = v24[16];
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v24[16] = v23;
  outlined consume of Text.Storage(v26, v27, v28);
  *((_QWORD *)v24 + 3) = *((_QWORD *)v25 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSearchFieldAdaptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A9F8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitSearchFieldAdaptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187A9F924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchFieldConfiguration(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitSearchFieldAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchFieldAdaptor);
}

uint64_t associated type witness table accessor for View.Body : View in UIKitSearchFieldAdaptor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A9F988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UIKitSearchFieldAdaptor(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v4 = *(int *)(v3 + 32);
  v5 = v2 + v4 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = type metadata accessor for SearchFieldConfiguration(0);
  v8 = v2 + *(int *)(v7 + 24);
  v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255)
    outlined consume of PlatformItemCollection.Storage(*(_QWORD *)v8, v9 & 1);
  outlined consume of Text.Storage(*(_QWORD *)(v2 + *(int *)(v7 + 32)), *(_QWORD *)(v2 + *(int *)(v7 + 32) + 8), *(_BYTE *)(v2 + *(int *)(v7 + 32) + 16));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchFieldAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UIKitSearchFieldAdaptor(0) - 8) + 80);
  return closure #1 in UIKitSearchFieldAdaptor.body.getter(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t type metadata accessor for KitRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KitRepresentable);
}

_QWORD *initializeBufferWithCopyOfBuffer for KitRepresentable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    *v10 = *((_BYTE *)a2 + v9);
    v10[1] = *((_BYTE *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    v12 = (int *)type metadata accessor for SearchFieldState();
    v13 = v12[9];
    v25 = &v10[v13];
    v14 = &v11[v13];
    v15 = type metadata accessor for AttributedString();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v16(v25, v14, v15);
    v10[v12[10]] = v11[v12[10]];
    v17 = v12[11];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = *(int *)(a3 + 20);
    v21 = (_QWORD *)((char *)v7 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for KitRepresentable(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = v3 + *(int *)(type metadata accessor for SearchFieldState() + 36);
  v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for KitRepresentable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_retain();
  swift_retain();
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v16 = v10[11];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = *(int *)(a3 + 20);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for KitRepresentable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  v8[2] = *((_BYTE *)a2 + v7 + 2);
  v8[3] = *((_BYTE *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = *(int *)(a3 + 20);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for KitRepresentable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *v9 = *((_BYTE *)a2 + v8);
  v9[1] = *((_BYTE *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((_BYTE *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  v11 = (int *)type metadata accessor for SearchFieldState();
  v12 = v11[9];
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  v16 = v11[11];
  v17 = &v9[v16];
  v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *assignWithTake for KitRepresentable(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(int *)(v6 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  v10 = (int *)type metadata accessor for SearchFieldState();
  v11 = v10[9];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  v15 = v10[11];
  v16 = &v8[v15];
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = *(int *)(a3 + 20);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KitRepresentable()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AA0128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  type metadata accessor for Binding<SearchFieldState>(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for KitRepresentable()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_187AA01C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for Binding<SearchFieldState>(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
}

void type metadata completion function for KitRepresentable()
{
  unint64_t v0;

  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_UNKNOWN **sub_187AA02AC()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

ValueMetadata *type metadata accessor for PhysicalButtonPressGesture()
{
  return &type metadata for PhysicalButtonPressGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in PhysicalButtonPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.onPhysicalButtonPress(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  outlined copy of AppIntentExecutor?(a2);
  lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
  Gesture.onEnded(_:)();
  swift_release();
  type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>, MEMORY[0x1E0CE2260]);
  View.gesture<A>(_:including:)();
  return swift_release();
}

uint64_t closure #1 in PhysicalButtonPressGesture.body.getter(uint64_t a1)
{
  return ((uint64_t (*)())((char *)sub_187AA0428 + 4 * byte_187C86C60[*(unsigned __int8 *)(a1 + 25)]))();
}

uint64_t sub_187AA0428()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_187AA0440 + 4 * byte_187C86C6E[v0]))();
}

void sub_187AA0440(char a1@<W1>, char *a2@<X8>)
{
  char v2;
  char v3;

  if ((a1 & 1) != 0)
  {
    v2 = 0;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    v2 = 10;
  }
  *a2 = v2;
  a2[1] = v3;
}

BOOL PhysicalButtonPressGesture.AllowedButtonTypes.insert(_:)(_BYTE *a1, char *a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = qword_187C86E68[*a2];
  v5 = *v2 & v4;
  if (!v5)
    *v2 |= v4;
  *a1 = v3;
  return v5 == 0;
}

char *PhysicalButtonPressGesture.AllowedButtonTypes.remove(_:)@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  v4 = qword_187C86E68[v3];
  if ((*v2 & v4) == 0)
    LOBYTE(v3) = 10;
  *v2 &= ~v4;
  *a2 = v3;
  return result;
}

char *PhysicalButtonPressGesture.AllowedButtonTypes.update(with:)@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = qword_187C86E68[v3];
  v5 = *v2;
  *v2 |= v4;
  if ((v5 & v4) == 0)
    LOBYTE(v3) = 10;
  *a2 = v3;
  return result;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance PhysicalButtonPressGesture.AllowedButtonTypes(char *a1)
{
  _QWORD *v1;

  return (qword_187C86E68[*a1] & *v1) != 0;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PhysicalButtonPressGesture.AllowedButtonTypes@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance PhysicalButtonPressGesture()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>, MEMORY[0x1E0CE2E88]);
  Gesture.dependency(_:)();
  return swift_release();
}

uint64_t sub_187AA0768()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PhysicalButtonPressGesture.body.getter(uint64_t a1)
{
  return closure #1 in PhysicalButtonPressGesture.body.getter(a1);
}

void type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, MEMORY[0x1E0CE4858], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE0BC8]);
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for EventListener<PhysicalButtonEvent>, MEMORY[0x1E0CE4868], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE1EB0]);
    lazy protocol witness table accessor for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>();
    v0 = type metadata accessor for ModifierGesture();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>);
  }
}

void type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, MEMORY[0x1E0CE4878]);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, MEMORY[0x1E0CE4858], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE0BC8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE0BE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for EventListener<PhysicalButtonEvent>, MEMORY[0x1E0CE4868], (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0CE1EB0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE1EC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t sub_187AA0940()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_187AA096C()
{
  type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>> and conformance ModifierGesture<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>, MEMORY[0x1E0CE2E88]);
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhysicalButtonPressGesture.AllowedButtonTypes, &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhysicalButtonPressGesture.AllowedButtonTypes, &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhysicalButtonPressGesture.AllowedButtonTypes, &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PhysicalButtonPressGesture.AllowedButtonTypes, &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

void TemporalStack.init(states:alignment:content:)(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TemporalStack();
}

uint64_t sub_187AA0B70(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)(v5 + *(int *)(result + 68));
  *v6 = v4;
  v6[1] = v3;
  v7 = (_QWORD *)(v5 + *(int *)(result + 72));
  *v7 = v2;
  v7[1] = v1;
  return result;
}

void type metadata accessor for TemporalStack()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t getEnumTagSinglePayload for TemporalStateViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AA0C64 + 4 * byte_187C86EC0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TemporalStateViewModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TemporalStateViewModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStateViewModifier);
}

uint64_t type metadata completion function for TemporalStack()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    v13 = v12[1];
    v14 = (_QWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v12;
    v14[1] = v13;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TemporalStack(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v9 = (_QWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187AA1208 + 4 * byte_187C86ECE[v10]))();
  }
}

void storeEnumTagSinglePayload for TemporalStack(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187AA1390()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AA1410);
}

void sub_187AA1398(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AA13A0);
  JUMPOUT(0x187AA1410);
}

void sub_187AA13E8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AA1410);
}

void sub_187AA13F0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AA1410);
}

uint64_t sub_187AA13F8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187AA1410);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187AA140CLL);
    JUMPOUT(0x187AA1404);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

_UNKNOWN **base witness table accessor for View in TemporalStack<A, B>()
{
  return &protocol witness table for TemporalStack<A, B>;
}

void protocol witness for static View._makeView(view:inputs:) in conformance TemporalStack<A, B>()
{
  static TemporalStack._makeView(view:inputs:)();
}

void static TemporalStack._makeView(view:inputs:)()
{
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for TemporalStack();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TemporalStack<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStack<A, B>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TemporalStack<A, B>()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStack<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance TemporalStack<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStack<A, B>, a1);
  specialized PrimitiveView.body.getter();
}

double static TemporalStateViewModifier._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  char v52;
  double *v53;
  double result;
  _BYTE v55[16];
  uint64_t State;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  double v79;
  unint64_t v80;
  double v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  int v97;
  uint64_t v98;

  v60 = a5;
  v59 = a4;
  v69 = a6;
  v98 = *MEMORY[0x1E0C80C00];
  v58 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a2 + 32);
  v13 = *(_DWORD *)(a2 + 36);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v17 = *(_DWORD *)(a2 + 56);
  v16 = *(_DWORD *)(a2 + 60);
  v18 = *(_DWORD *)(a2 + 64);
  v19 = *(_DWORD *)(a2 + 68);
  v20 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 80);
  v89 = v7;
  v90 = v8;
  v91 = v9;
  *(_QWORD *)&v92 = __PAIR64__(v11, v10);
  *((_QWORD *)&v92 + 1) = __PAIR64__(v13, v12);
  v93 = v14;
  v94 = v15;
  *(_QWORD *)&v95 = __PAIR64__(v16, v17);
  *((_QWORD *)&v95 + 1) = __PAIR64__(v19, v18);
  v96 = __PAIR64__(v21, v20);
  v97 = v22;
  v68 = v8;
  v67 = v10;
  v66 = v11;
  v65 = v12;
  v64 = v13;
  v73 = v16;
  v62 = v18;
  v61 = v19;
  v72 = v20;
  v71 = v21;
  v70 = v22;
  v63 = v7;
  swift_retain();
  v76 = v9;
  swift_retain();
  v75 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.animatedPosition()();
  _ViewInputs.containerPosition.setter();
  v80 = v89;
  LODWORD(v81) = v90;
  v82 = v9;
  v83 = v92;
  v84 = v14;
  v85 = v15;
  v86 = v95;
  v87 = v96;
  v88 = v97;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRetain();
  a3(&v78, v23, &v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v80 = v15;
  v74 = v17;
  LODWORD(v81) = v17;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
  {
    LODWORD(v80) = v58;
    v25 = v59;
    v26 = v60;
    type metadata accessor for TemporalStateViewModifier(255, v59, v60, v24);
    type metadata accessor for _GraphValue();
    v27 = _GraphValue.value.getter();
    v80 = v78;
    v81 = v79;
    v28 = _ViewOutputs.subscript.getter();
    v30 = *MEMORY[0x1E0CFED28];
    if ((v28 & 0x100000000) != 0)
      v31 = *MEMORY[0x1E0CFED28];
    else
      v31 = v28;
    v80 = __PAIR64__(v31, v27);
    MEMORY[0x1E0C80A78](v28, v29);
    State = type metadata accessor for TemporalStateViewModifier.MakeState(0, v59, v60, v32);
    v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateViewModifier<A>.MakeState, State);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<TemporalState>, (uint64_t)&unk_1E1B18618, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v80, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v55, State, MEMORY[0x1E0DEDCE8], v33, MEMORY[0x1E0DEDD18], v34);
    v58 = v77;
    v80 = v15;
    LODWORD(v81) = v74;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0)
    {
      v80 = v78;
      v81 = v79;
      v35 = _ViewOutputs.subscript.getter();
      v80 = v63;
      if ((v35 & 0x100000000) == 0)
        v30 = v35;
      LODWORD(v81) = v68;
      v82 = v76;
      *(_QWORD *)&v83 = __PAIR64__(v66, v67);
      *((_QWORD *)&v83 + 1) = __PAIR64__(v64, v65);
      v84 = v75;
      v85 = v15;
      *(_QWORD *)&v86 = __PAIR64__(v73, v74);
      *((_QWORD *)&v86 + 1) = __PAIR64__(v61, v62);
      v87 = __PAIR64__(v71, v72);
      v88 = v70;
      v36 = _ViewInputs.transaction.getter();
      v80 = __PAIR64__(v30, v58);
      LODWORD(v81) = v36;
      MEMORY[0x1E0C80A78](v36, v37);
      v39 = type metadata accessor for TemporalStateViewModifier.AddState(0, v25, v26, v38);
      State = v39;
      v57 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateViewModifier<A>.AddState, v39);
      type metadata accessor for Attribute<[ArchivedViewState]>();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v80, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v55, v39, MEMORY[0x1E0DEDCE8], v40, MEMORY[0x1E0DEDD18], v41);
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      LOBYTE(v80) = 0;
      _ViewOutputs.subscript.setter();
    }
    _DisplayList_Identity.init()();
    LODWORD(v60) = v80;
    v42 = v63;
    v80 = v63;
    v43 = v68;
    LODWORD(v81) = v68;
    v82 = v76;
    v44 = v67;
    v45 = v66;
    *(_QWORD *)&v83 = __PAIR64__(v66, v67);
    v46 = v65;
    v47 = v64;
    *((_QWORD *)&v83 + 1) = __PAIR64__(v64, v65);
    v84 = v75;
    v85 = v15;
    v59 = v15;
    v48 = v74;
    *(_QWORD *)&v86 = __PAIR64__(v73, v74);
    v49 = v62;
    v50 = v61;
    *((_QWORD *)&v86 + 1) = __PAIR64__(v61, v62);
    v87 = __PAIR64__(v71, v72);
    v88 = v70;
    v77 = v60;
    _ViewInputs.pushIdentity(_:)();
    v80 = v42;
    LODWORD(v81) = v43;
    v82 = v76;
    *(_QWORD *)&v83 = __PAIR64__(v45, v44);
    *((_QWORD *)&v83 + 1) = __PAIR64__(v47, v46);
    v84 = v75;
    v85 = v59;
    *(_QWORD *)&v86 = __PAIR64__(v73, v48);
    *((_QWORD *)&v86 + 1) = __PAIR64__(v50, v49);
    v87 = __PAIR64__(v71, v72);
    v88 = v70;
    v51 = _ViewInputs.animatedSize()();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v52 = v80;
    v80 = __PAIR64__(v58, v60);
    LODWORD(v81) = v51;
    BYTE4(v81) = v52;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type TemporalStateDisplayList and conformance TemporalStateDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v80) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v53 = (double *)v69;
  *v69 = v78;
  result = v79;
  v53[1] = v79;
  return result;
}

uint64_t TemporalStateViewModifier.MakeState.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t Value;
  char v5;

  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
  {
    result = 0;
    *(_BYTE *)(a2 + 10) = 0;
    *(_WORD *)(a2 + 8) = 0;
  }
  else
  {
    Value = AGGraphGetValue();
    v5 = *(_BYTE *)(Value + 10);
    *(_WORD *)(a2 + 8) = *(_WORD *)(Value + 8);
    *(_BYTE *)(a2 + 10) = v5;
    result = swift_bridgeObjectRetain();
  }
  *(_QWORD *)a2 = result;
  return result;
}

double TemporalStateViewModifier.MakeState.value.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  int v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  double result;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  __int128 v30;
  int v31;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TemporalStateViewModifier(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v23 - v15;
  Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, Value, v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, a2);
  StrongHash.init<A>(of:)();
  v23 = v30;
  v18 = v31;
  TemporalStateViewModifier.MakeState.content.getter(a1, (uint64_t)&v24);
  v19 = v24;
  if (v24)
  {
    v20 = v25;
    v21 = v26;
  }
  else
  {
    DisplayList.init()();
    v19 = v27;
    v20 = v28;
    v21 = v29;
  }
  result = *(double *)&v23;
  *(_OWORD *)a3 = v23;
  *(_DWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = v19;
  *(_WORD *)(a3 + 32) = v20;
  *(_BYTE *)(a3 + 34) = v21;
  return result;
}

uint64_t TemporalStateViewModifier.AddState.childStates.getter(uint64_t a1)
{
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a1))
    return 0;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Rule.initialValue.getter in conformance TemporalStateViewModifier<A>.MakeState@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 31) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double protocol witness for Rule.value.getter in conformance TemporalStateViewModifier<A>.MakeState@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return TemporalStateViewModifier.MakeState.value.getter(*v2, *(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStateViewModifier<A>.MakeState(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateViewModifier<A>.MakeState, a1);
  return static AsyncAttribute.flags.getter();
}

char *TemporalStateViewModifier.AddState.value.getter(uint64_t a1)
{
  int v1;
  uint64_t v2;
  char *v3;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;

  v1 = a1;
  v2 = TemporalStateViewModifier.AddState.childStates.getter(a1);
  if (v2)
    v3 = (char *)v2;
  else
    v3 = (char *)MEMORY[0x1E0DEE9D8];
  Value = AGGraphGetValue();
  v5 = *(_QWORD *)Value;
  v6 = *(_QWORD *)(Value + 8);
  v7 = *(_DWORD *)(Value + 16);
  AGGraphGetValue();
  swift_retain();
  v8 = Transaction.animation.getter();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
  v10 = *((_QWORD *)v3 + 2);
  v9 = *((_QWORD *)v3 + 3);
  if (v10 >= v9 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v3);
  *((_QWORD *)v3 + 2) = v10 + 1;
  v11 = &v3[32 * v10];
  *((_QWORD *)v11 + 4) = v5;
  *((_QWORD *)v11 + 5) = v6;
  *((_DWORD *)v11 + 12) = v7;
  *((_DWORD *)v11 + 13) = v1;
  *((_QWORD *)v11 + 7) = v8;
  return v3;
}

char *protocol witness for Rule.value.getter in conformance TemporalStateViewModifier<A>.AddState@<X0>(char **a1@<X8>)
{
  uint64_t *v1;
  char *result;

  result = TemporalStateViewModifier.AddState.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStateViewModifier<A>.AddState(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateViewModifier<A>.AddState, a1);
  return static AsyncAttribute.flags.getter();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TemporalStateViewModifier<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static TemporalStateViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TemporalStateViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateViewModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in TemporalStateViewModifier<A>()
{
  return &protocol witness table for TemporalStateViewModifier<A>;
}

uint64_t default argument 3 of TemporalStackChildren.init(view:inputs:childGeometries:children:nextID:)()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TemporalStackChild(0, AssociatedTypeWitness, v1, v2);
  return Array.init()();
}

void closure #1 in static TemporalStack._makeView(view:inputs:)()
{
  type metadata accessor for TemporalStack();
}

uint64_t sub_187AA2EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[16];

  v2 = v1 + *(int *)(a1 + 68);
  v7[2] = a1;
  v3 = MEMORY[0x1E0CE7AF8];
  v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v2, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_25, (uint64_t)v7, v3, MEMORY[0x1E0DEDCE8], v4, MEMORY[0x1E0DEDD18], v5);
  return v7[4];
}

uint64_t closure #3 in static TemporalStack._makeView(view:inputs:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t (*v9)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t CombinerVisitor;
  uint64_t v13;
  uint64_t v15;
  int v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = a1;
  v16 = a2;
  v9 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
  CombinerVisitor = type metadata accessor for MakeCombinerVisitor(0, AssociatedTypeWitness, v10, v11);
  v13 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for MakeCombinerVisitor<A>, CombinerVisitor);
  return v9(&v15, CombinerVisitor, v13, a3, a4);
}

double TemporalStackChild.init(state:hash:subgraph:outputs:id:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  double *v19;
  double result;

  v13 = *(_DWORD *)(a2 + 16);
  v14 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a7, a1, a6);
  v17 = (int *)type metadata accessor for TemporalStackChild(0, a6, v15, v16);
  v18 = a7 + v17[7];
  *(_OWORD *)v18 = *(_OWORD *)a2;
  *(_DWORD *)(v18 + 16) = v13;
  *(_QWORD *)(a7 + v17[8]) = a3;
  v19 = (double *)(a7 + v17[9]);
  *v19 = v14;
  result = a4[1];
  v19[1] = result;
  *(_DWORD *)(a7 + v17[10]) = a5;
  return result;
}

void TemporalStackChildren.view.getter()
{
  type metadata accessor for TemporalStack();
}

uint64_t sub_187AA30F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

void TemporalStackChildren.updateValue()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[15];
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = a1[2];
  v24[13] = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = type metadata accessor for TemporalStackChild(0, AssociatedTypeWitness, v5, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  v29 = v9;
  MEMORY[0x1E0C80A78](v10, AssociatedTypeWitness);
  v27 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v31 = (char *)v24 - v14;
  v15 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v15, v16);
  v24[14] = (char *)v24 - v17;
  v25 = swift_getAssociatedTypeWitness();
  v24[3] = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v18);
  v26 = (char *)v24 - v19;
  v20 = a1[3];
  v21 = a1[5];
  v22 = a1[6];
  v23 = a1[7];
  v32 = v3;
  v33 = v20;
  v24[7] = v20;
  v24[8] = v2;
  v34 = v2;
  v35 = v21;
  v24[6] = v21;
  v28 = v22;
  v36 = v22;
  v37 = v23;
  v24[5] = v23;
  type metadata accessor for TemporalStack();
}

void closure #1 in TemporalStackChildren.updateValue()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD v26[18];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v37 = a6;
  v38 = a7;
  v35 = a5;
  v36 = a4;
  v43 = 0;
  v44 = a3;
  v26[3] = a2;
  v45 = a13;
  v41 = a12;
  v27 = a11;
  v28 = a9;
  v52 = *MEMORY[0x1E0C80C00];
  v40 = a10;
  v42 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = type metadata accessor for TemporalStackChild(0, AssociatedTypeWitness, v15, v16);
  v33 = *(_QWORD *)(v17 - 8);
  v34 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v31 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v32 = (char *)v26 - v22;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v23, v24);
  v39 = (char *)v26 - v25;
  v46 = a8;
  v47 = a9;
  v48 = a10;
  v49 = a11;
  v50 = a12;
  v51 = a13;
  type metadata accessor for TemporalStackChildView();
}

void sub_187AA3B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v9 + 112) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v9 + 120) = a1;
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v9 + 104) = (char *)&a9 - v13;
  LODWORD(v13) = *(_DWORD *)(v11 + 112);
  *(_DWORD *)(v9 + 196) = v13;
  *(_DWORD *)(v11 + 112) = v13 + 1;
  v14 = *(_QWORD *)(v11 + 8);
  LODWORD(v13) = *(_DWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  v17 = *(_QWORD *)(v11 + 48);
  v16 = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v9 + 56) = v14;
  *(_QWORD *)(v9 + 64) = v17;
  *(_QWORD *)(v9 + 208) = v16;
  v18 = *(_DWORD *)(v11 + 88);
  *(_QWORD *)(v9 + 456) = v14;
  *(_DWORD *)(v9 + 464) = v13;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 32);
  *(_QWORD *)(v9 + 496) = v17;
  *(_QWORD *)(v9 + 504) = v16;
  *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 64);
  *(_QWORD *)(v9 + 528) = *(_QWORD *)(v11 + 80);
  *(_DWORD *)(v9 + 536) = v18;
  swift_beginAccess();
  v19 = *(_DWORD *)(v15 + 16);
  v20 = *(_QWORD *)(v15 + 24);
  v21 = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(v9 + 32) = v21;
  v23 = *(_QWORD *)(v15 + 64);
  v22 = *(_QWORD *)(v15 + 72);
  v24 = *(_BYTE *)(v15 + 80);
  v25 = *(_BYTE *)(v15 + 81);
  v26 = *(_QWORD *)(v15 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E0CE37B0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE0C18]);
  v27 = swift_allocObject();
  *(_DWORD *)(v27 + 16) = v19;
  *(_QWORD *)(v27 + 24) = v20;
  v28 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v27 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v27 + 48) = v28;
  *(_QWORD *)(v27 + 64) = v23;
  *(_QWORD *)(v27 + 72) = v22;
  *(_BYTE *)(v27 + 80) = v24;
  *(_BYTE *)(v27 + 81) = v25;
  *(_QWORD *)(v27 + 88) = v26;
  swift_retain();
  *(_QWORD *)(v9 + 472) = v27;
  v29 = *(_QWORD *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableIndex(_:)(0);
  *(_QWORD *)(v9 + 208) = v11;
  v30 = *(_QWORD *)(v9 + 80);
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v9 + 232);
  *(_QWORD *)(v12 - 184) = v30;
  *(_QWORD *)(v12 - 176) = *(_QWORD *)(v9 + 216);
  *(_QWORD *)(v12 - 168) = v29;
  v31 = *(_QWORD *)(v9 + 256);
  *(_QWORD *)(v12 - 160) = *(_QWORD *)(v9 + 224);
  *(_QWORD *)(v12 - 152) = v31;
  type metadata accessor for TemporalStackChildren();
}

void sub_187AA3CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (v3 == *MEMORY[0x1E0CFED28])
  {
    v6 = *(_QWORD *)(v2 + 96);
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 196);
    *(_DWORD *)(v4 - 192) = *(_DWORD *)(v2 + 12);
    *(_DWORD *)(v4 - 188) = v5;
    *(_DWORD *)(v4 - 184) = v3;
    MEMORY[0x1E0C80A78](a1, a2);
    v6 = *(_QWORD *)(v2 + 96);
    v16 = type metadata accessor for TemporalStackChildGeometry(0, v6, v7, v8);
    v17 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackChildGeometry<A>, v16);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, MEMORY[0x1E0CE19C0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
    v9 = *(_QWORD *)(v2 + 240);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4 - 192, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v15, v16, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
    *(_QWORD *)(v2 + 240) = v9;
    Attribute<A>.size()();
    _ViewInputs.size.setter();
    Attribute<A>.origin()();
    _ViewInputs.position.setter();
  }
  v12 = *(_QWORD *)(v2 + 200);
  v13 = **(_DWORD **)(v2 + 208);
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 + 88) + 16);
  *(_QWORD *)(v2 + 96) = v14;
  v14(v12, *(_QWORD *)(v2 + 248), v6);
  TemporalStackChildView.init(view:state:)(v13, *(_DWORD **)(v2 + 104));
}

uint64_t sub_187AA3E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = *(_QWORD *)(v2 + 120);
  v38 = v5;
  v39 = v9;
  v40 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackChildView<A, B>, v9, v8);
  v10 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v4, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)&v37, v9, MEMORY[0x1E0DEDCE8], v10, MEMORY[0x1E0DEDD18], v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 112) + 8))(v4, v9);
  _GraphValue.init(_:)();
  v12 = *(_OWORD *)(v2 + 504);
  *(_OWORD *)(v2 + 592) = v12;
  v13 = *(_OWORD *)(v2 + 488);
  *(_OWORD *)(v2 + 576) = v13;
  v14 = *(_OWORD *)(v2 + 520);
  *(_OWORD *)(v2 + 608) = v14;
  v15 = *(_OWORD *)(v2 + 456);
  *(_OWORD *)(v2 + 544) = v15;
  v16 = *(_OWORD *)(v2 + 472);
  *(_OWORD *)(v2 + 560) = v16;
  *(_OWORD *)(v2 + 368) = v13;
  *(_OWORD *)(v2 + 384) = v12;
  *(_OWORD *)(v2 + 400) = v14;
  v17 = *(_DWORD *)(v2 + 536);
  *(_DWORD *)(v7 - 112) = v17;
  *(_QWORD *)(v2 + 288) = *(_QWORD *)(v7 - 144);
  *(_DWORD *)(v2 + 296) = *(_DWORD *)(v7 - 136);
  *(_DWORD *)(v2 + 416) = v17;
  *(_OWORD *)(v2 + 336) = v15;
  *(_OWORD *)(v2 + 352) = v16;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 96);
  v19 = *(_QWORD *)(v2 + 248);
  static View.makeDebuggableView(view:inputs:)();
  v20 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v21 = *(_DWORD *)(v2 + 196);
  if ((v20 & 1) != 0)
  {
    v18(v3, v19, v6);
    StrongHash.init<A>(of:)();
    v22 = *(_QWORD *)(v2 + 336);
    v23 = *(_QWORD *)(v2 + 344);
    v24 = *(unsigned int *)(v2 + 352);
    v25 = *(_QWORD *)(v2 + 312);
    v26 = *(_QWORD *)(v2 + 320);
    outlined retain of _ViewInputs(v7 - 192);
    swift_bridgeObjectRetain();
    *(_BYTE *)(v2 + 288) = 0;
    v27 = v26;
    v3 = *(_QWORD *)(v2 + 200);
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(v22, v23, v24, v7 - 192, v25, v27);
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs(v7 - 192);
    _ViewOutputs.subscript.setter();
  }
  v18(v3, v19, v6);
  StrongHash.init<A>(of:)();
  v28 = *(_DWORD *)(v2 + 352);
  *(_OWORD *)(v2 + 256) = *(_OWORD *)(v2 + 336);
  v18(v3, v19, v6);
  *(_OWORD *)(v2 + 336) = *(_OWORD *)(v2 + 256);
  *(_DWORD *)(v2 + 352) = v28;
  *(_QWORD *)(v2 + 288) = *(_QWORD *)(v2 + 312);
  *(_QWORD *)(v2 + 296) = *(_QWORD *)(v2 + 320);
  v29 = *(_QWORD *)(v2 + 136);
  v30 = v3;
  v31 = *(void **)(v2 + 168);
  v32 = TemporalStackChild.init(state:hash:subgraph:outputs:id:)(v30, v2 + 336, (uint64_t)v31, (double *)(v2 + 288), v21, v6, v29);
  v34 = *(_QWORD *)(v2 + 144);
  v33 = *(_QWORD *)(v2 + 152);
  (*(void (**)(_QWORD, uint64_t, uint64_t, double))(v34 + 16))(*(_QWORD *)(v2 + 128), v29, v33, v32);
  type metadata accessor for Array();
  v35 = v31;
  Array.insert(_:at:)();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v29, v33);
  **(_BYTE **)(v2 + 176) = 1;
  ++**(_QWORD **)(v2 + 184);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void TemporalStackChildView.init(view:state:)(int a1@<W0>, _DWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for TemporalStackChildView();
}

uint64_t sub_187AA41F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v2 + *(int *)(a1 + 68);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v3, v1, AssociatedTypeWitness);
}

uint64_t TemporalStackChildView.value.getter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackChildView<A, B>, a1);
  return Rule.withObservation<A>(do:)();
}

void closure #1 in TemporalStackChildView.value.getter()
{
  type metadata accessor for TemporalStack();
}

void sub_187AA4330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 - 144) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 128) = v7;
  *(_QWORD *)(v8 - 120) = v6;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v4;
  *(_QWORD *)(v8 - 96) = v3;
  *(_QWORD *)(v8 - 88) = v2;
  type metadata accessor for TemporalStackChildView();
}

void sub_187AA4378()
{
  TemporalStackChildren.view.getter();
}

uint64_t sub_187AA4384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  void (*v6)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t))(v2 + *(int *)(v0 + 72));
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 144) + 8);
  swift_retain();
  v6(v2, v0);
  v5(v1 + *(int *)(v3 + 68));
  return swift_release();
}

uint64_t TemporalStackChildGeometry.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t i;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a5;
  v8 = type metadata accessor for TemporalStackChild(0, a3, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v26 - v11;
  v28 = a2;
  v29 = specialized TemporalStackChildGeometry.children.getter(a1, a2, a3, v13);
  v14 = type metadata accessor for Array();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF48], v14);
  result = RandomAccessCollection<>.indices.getter();
  v18 = v30;
  v17 = v31;
  if (v30 == v31)
    return static ViewGeometry.zero.getter();
  if (v31 < v30)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    for (i = v30 << 6; ; i += 64)
    {
      if ((uint64_t)v18 >= v17)
      {
        __break(1u);
        goto LABEL_13;
      }
      specialized TemporalStackChildGeometry.children.getter(a1, v28, a3, v16);
      swift_bridgeObjectRetain();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      v20 = *(_DWORD *)&v12[*(int *)(v8 + 40)];
      result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if (v20 == HIDWORD(a1))
        break;
      if (v17 == ++v18)
        return static ViewGeometry.zero.getter();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [ViewGeometry], MEMORY[0x1E0CE19C0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = AGGraphGetValue();
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_14;
    if (v18 < *(_QWORD *)(*(_QWORD *)result + 16))
    {
      v21 = *(_QWORD *)result + i;
      v22 = *(_QWORD *)(v21 + 48);
      v23 = *(_QWORD *)(v21 + 56);
      v24 = v27;
      *v27 = *(_OWORD *)(v21 + 32);
      *((_QWORD *)v24 + 2) = v22;
      *((_QWORD *)v24 + 3) = v23;
      v25 = *(_OWORD *)(v21 + 80);
      v24[2] = *(_OWORD *)(v21 + 64);
      v24[3] = v25;
      return swift_retain();
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TemporalStackChildGeometry<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t v3;

  return TemporalStackChildGeometry.value.getter(*(_QWORD *)v3, *(unsigned int *)(v3 + 8), *(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t TemporalStackLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  v6 = *(_QWORD *)v4;
  v7 = *(unsigned int *)(v4 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v25 = specialized TemporalStackChildGeometry.children.getter(v6, v7, v8, a4);
  v20[2] = v8;
  type metadata accessor for TemporalStackChild(255, v8, v9, v10);
  v11 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  v12 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v11);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TemporalStackLayoutComputer.updateValue(), (uint64_t)v20, v11, MEMORY[0x1E0CE5108], MEMORY[0x1E0DEDCE8], v12, MEMORY[0x1E0DEDD18], v13);
  swift_bridgeObjectRelease();
  result = AGGraphGetCurrentAttribute();
  v15 = *MEMORY[0x1E0CFED28];
  if ((_DWORD)result == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
  }
  else
  {
    LayoutProxyCollection.init(context:attributes:)();
    v16 = v25;
    v17 = *((_QWORD *)&v25 + 1);
    result = AGGraphGetCurrentAttribute();
    if ((_DWORD)result != v15)
    {
      LOBYTE(v25) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      v18 = DWORD2(v25);
      v19 = v25;
      v25 = *(_OWORD *)AGGraphGetValue();
      v23 = v19;
      v24 = v18;
      v21 = v16;
      v22 = v17;
      lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
      MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackLayoutComputer<A>, a1);
      Layout.updateLayoutComputer<A>(rule:layoutContext:children:)();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TemporalStackLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TemporalStackChild(0, a2, a3, a4);
  _ViewOutputs.layoutComputer.getter();
  return LayoutProxyAttributes.init(layoutComputer:traitsList:)();
}

uint64_t TemporalStateDisplayList.updateValue()()
{
  uint64_t v0;
  uint64_t Value;
  int v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  DisplayList.Version.init(forUpdate:)();
  v0 = swift_allocObject();
  Value = AGGraphGetValue();
  v2 = *(_DWORD *)(Value + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)Value;
  *(_DWORD *)(v0 + 32) = v2;
  AGGraphGetValue();
  AGGraphGetValue();
  v3 = swift_bridgeObjectRetain();
  MEMORY[0x18D75BE3C](v3);
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v5, v6);
  DisplayList.init(_:)();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return outlined consume of DisplayList.Item.Value(v5, v6);
}

uint64_t TemporalStackDisplayList.value.getter(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *Value;
  __int128 v19;
  int v21;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int16 v28;
  char v29;
  __int128 v30;
  __int128 v31;

  v3 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  v5 = *(_DWORD *)(v1 + 16);
  DisplayList.Version.init(forUpdate:)();
  v6 = v30;
  v30 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v30 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18D755E9C]();
  v21 = *(_QWORD *)v1;
  *((_QWORD *)&v30 + 1) = __PAIR64__(v4, v3);
  LODWORD(v31) = v5;
  *(_QWORD *)&v30 = specialized TemporalStackDisplayList.children.getter(a1, v7, v8, v9);
  v23 = *(_QWORD *)(a1 + 16);
  type metadata accessor for TemporalStackChild(255, v23, v10, v11);
  v12 = type metadata accessor for Array();
  type metadata accessor for (StrongHash, DisplayList)();
  v14 = v13;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x18D75FFDC](MEMORY[0x1E0DEAF50], v12);
  v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TemporalStackDisplayList.value.getter, (uint64_t)v22, v12, v14, MEMORY[0x1E0DEDCE8], v15, MEMORY[0x1E0DEDD18], v16);
  swift_bridgeObjectRelease();
  v26 = v17;
  v27 = xmmword_187BF9FB0;
  v29 = 0;
  v28 = 0;
  Value = (__int128 *)AGGraphGetValue();
  v19 = Value[1];
  v30 = *Value;
  v31 = v19;
  MEMORY[0x18D75BE3C]();
  v25 = v21;
  v24 = v6;
  DisplayList.Item.init(_:frame:identity:version:)();
  return DisplayList.init(_:)();
}

uint64_t closure #1 in TemporalStackDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t Value;
  __int16 v9;
  char v10;

  v6 = a1 + *(int *)(type metadata accessor for TemporalStackChild(0, a2, a3, a4) + 28);
  v7 = *(_DWORD *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(_DWORD *)(a5 + 16) = v7;
  if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
    return DisplayList.init()();
  Value = AGGraphGetValue();
  v9 = *(_WORD *)(Value + 8);
  v10 = *(_BYTE *)(Value + 10);
  *(_QWORD *)(a5 + 24) = *(_QWORD *)Value;
  *(_WORD *)(a5 + 32) = v9;
  *(_BYTE *)(a5 + 34) = v10;
  return swift_bridgeObjectRetain();
}

uint64_t TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t Value;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  char *v33;
  Swift::Bool IsNativeType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD v55[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v48 = (char *)&v45 - v12;
  v15 = type metadata accessor for TemporalStackChild(0, a2, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v45 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v45 - v19;
  v21 = *(void (**)(uint64_t, uint64_t, double))(a4 + 16);
  v52 = a5;
  v21(a3, a4, v18);
  v51 = a2;
  v54 = a4;
  v22 = specialized TemporalStackPreference.children.getter(a1, a2, a3, a4);
  v23 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18D75D06C](v23, v15))
    return swift_bridgeObjectRelease();
  v24 = 0;
  v25 = &v20[*(int *)(v15 + 36)];
  v53 = 1;
  v46 = v25;
  v47 = a3;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v20, v22+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v24, v15);
      v35 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_14;
      goto LABEL_8;
    }
    result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v45 != 8)
      break;
    v55[0] = result;
    (*(void (**)(char *, _QWORD *, uint64_t))(v16 + 16))(v20, v55, v15);
    swift_unknownObjectRelease();
    v35 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_14:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_8:
    v36 = *(_QWORD *)v25;
    swift_bridgeObjectRetain();
    v37 = *((_QWORD *)v25 + 1);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    v55[0] = v36;
    v55[1] = v37;
    v38 = _ViewOutputs.subscript.getter();
    v39 = swift_bridgeObjectRelease();
    if ((v38 & 0x100000000) == 0)
    {
      if ((v53 & 1) != 0)
      {
        v26 = v50;
        Value = AGGraphGetValue();
        v28 = v20;
        v29 = v48;
        v30 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, Value, v26);
        v31 = v52;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v52, v26);
        v32 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
        v20 = v28;
        v33 = v29;
        v25 = v46;
        a3 = v47;
        v32(v31, v33, v26);
      }
      else
      {
        v41 = MEMORY[0x1E0C80A78](v39, v40);
        v42 = v52;
        *(&v45 - 4) = v51;
        *(&v45 - 3) = a3;
        v43 = v54;
        *(&v45 - 2) = v54;
        *((_DWORD *)&v45 - 2) = v38;
        (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v43 + 24))(v42, partial apply for closure #1 in TemporalStackPreference.value.getter, v41);
      }
      v53 = 0;
    }
    ++v24;
    if (v35 == MEMORY[0x18D75D06C](v22, v15))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t Value;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TemporalStackPreference<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance TemporalStackPreference<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;

  return TemporalStackPreference.value.getter(*v2, a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStackPreference<A, B>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackPreference<A, B>, a1);
  return static AsyncAttribute.flags.getter();
}

uint64_t MakeCombinerVisitor.visit<A>(key:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a3 != MEMORY[0x1E0CE1000])
  {
    v7 = *(_QWORD *)(a2 + 16);
    v13 = *(_DWORD *)(v4 + 8);
    MEMORY[0x1E0C80A78](result, a2);
    v10[2] = swift_getAssociatedTypeWitness();
    v11 = type metadata accessor for TemporalStackPreference(0, v7, a3, a4);
    v12 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStackPreference<A, B>, v11);
    v8 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v13, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
    LOBYTE(v13) = 0;
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

uint64_t protocol witness for PreferenceKeyVisitor.visit<A>(key:) in conformance MakeCombinerVisitor<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MakeCombinerVisitor.visit<A>(key:)(a1, a4, a2, a3);
}

uint64_t specialized static TemporalState.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  char v3;
  __int8 v4;
  __int16 v5;
  uint64_t v6;
  __int8 v7;
  __int16 v8;
  uint64_t v10;
  __int16 v11;
  __int8 v12;
  uint64_t v13;
  __int16 v14;
  __int8 v15;

  v3 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    v4 = a2[2].i8[2];
    v5 = a2[2].i16[0];
    v6 = a2[1].i64[1];
    v7 = a1[2].i8[2];
    v8 = a1[2].i16[0];
    v13 = a1[1].i64[1];
    v14 = v8;
    v15 = v7;
    v10 = v6;
    v11 = v5;
    v12 = v4;
    v3 = MEMORY[0x18D756124](&v13, &v10);
  }
  return v3 & 1;
}

uint64_t type metadata accessor for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStackChild);
}

void type metadata accessor for TemporalStackChildren()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for TemporalStackLayoutComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStackLayoutComputer);
}

void partial apply for closure #2 in static TemporalStack._makeView(view:inputs:)()
{
  type metadata accessor for TemporalStackChildren();
}

void sub_187AA5398()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 92) = v1;
}

uint64_t type metadata accessor for TemporalStackDisplayList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStackDisplayList);
}

uint64_t type metadata accessor for MakeCombinerVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MakeCombinerVisitor);
}

uint64_t type metadata accessor for TemporalStateViewModifier.MakeState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStateViewModifier.MakeState);
}

unint64_t lazy protocol witness table accessor for type TemporalStateDisplayList and conformance TemporalStateDisplayList()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList;
  if (!lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TemporalStateDisplayList, &unk_1E1B181F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList);
  }
  return result;
}

uint64_t type metadata accessor for TemporalStateViewModifier.AddState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStateViewModifier.AddState);
}

void type metadata accessor for Attribute<[ArchivedViewState]>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<[ArchivedViewState]>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[ArchivedViewState]>);
  }
}

uint64_t sub_187AA5520()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for TemporalStateDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TemporalStateDisplayList(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 13) = v3;
  return result;
}

void *type metadata accessor for TemporalStateDisplayList()
{
  return &unk_1E1B181F0;
}

uint64_t initializeWithCopy for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t assignWithTake for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 35))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemporalState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for TemporalState()
{
  return &unk_1E1B18618;
}

uint64_t getEnumTagSinglePayload for MakeCombinerVisitor(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeCombinerVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t destroy for TemporalStackChildren(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  id v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v6 = *(void **)(a2 + 96);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  v4 = *(void **)(a2 + 96);
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy116_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChildren(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 116))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemporalStackChildren(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 116) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 116) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata completion function for TemporalStackChild()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStackChild(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  id v18;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v12 = *(_OWORD *)v11;
    *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
    *(_OWORD *)v10 = v12;
    v13 = (_QWORD *)((v10 + 27) & 0xFFFFFFFFFFFFF8);
    v14 = (void **)((v11 + 27) & 0xFFFFFFFFFFFFF8);
    v15 = *v14;
    *v13 = *v14;
    v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_DWORD *)(v16 + 8) = *(_DWORD *)(v17 + 8);
    *(_DWORD *)(v16 + 12) = *(_DWORD *)(v17 + 12);
    *(_DWORD *)((v16 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v17 + 19) & 0xFFFFFFFFFFFFF8);
    v18 = v15;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TemporalStackChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  void **v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_DWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 16) = v9;
  v10 = (_QWORD *)((v7 + 27) & 0xFFFFFFFFFFFFF8);
  v11 = (void **)((v8 + 27) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  *v10 = *v11;
  v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFF8);
  v15 = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  void **v9;
  void **v10;
  void *v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  v9 = (void **)(((unint64_t)v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void **)(((unint64_t)v8 + 27) & 0xFFFFFFFFFFFFF8);
  v11 = *v10;
  v12 = *v9;
  *v9 = *v10;
  v13 = v11;

  v14 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(v15 + 12);
  *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v15 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = *(_DWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 16) = v9;
  v10 = (_QWORD *)((v7 + 27) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v8 + 27) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  void **v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 3;
  v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  v7[4] = v8[4];
  v9 = (void **)(((unint64_t)v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void **)(((unint64_t)v8 + 27) & 0xFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = *v10;

  v12 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChild(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2
    && *((_BYTE *)a1
       + ((((((((v7 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v6 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v9 = *(_QWORD *)(((((unint64_t)a1 + v7 + 3) & 0xFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

void storeEnumTagSinglePayload for TemporalStackChild(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = (((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3)
      a1[v10] = 0;
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        v12 = (_QWORD *)((((unint64_t)&a1[v9 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0)
          v13 = a2 ^ 0x80000000;
        else
          v13 = a2 - 1;
        *v12 = v13;
      }
      else
      {
        (*(void (**)(_BYTE *))(v6 + 56))(a1);
      }
    }
  }
  else
  {
    v11 = ~v8 + a2;
    bzero(a1, (((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4);
    *(_DWORD *)a1 = v11;
    if (v8 < a3)
      a1[v10] = 1;
  }
}

void base witness table accessor for _AttributeBody in TemporalStateViewModifier<A>.MakeState()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStateViewModifier<A>.AddState()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStackDisplayList<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStackLayoutComputer<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStackChildren<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for TemporalStackChildView()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata accessor for TemporalStackChildGeometry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStackChildGeometry);
}

uint64_t specialized TemporalStackChildGeometry.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TemporalStackChild(255, a3, a3, a4);
  type metadata accessor for Array();
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TemporalStackLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in TemporalStackLayoutComputer.updateValue()(a1, *(_QWORD *)(v4 + 16), a2, a4);
}

uint64_t specialized TemporalStackDisplayList.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TemporalStackChild(255, *(_QWORD *)(a1 + 16), a3, a4);
  type metadata accessor for Array();
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TemporalStackDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return closure #1 in TemporalStackDisplayList.value.getter(a1, *(_QWORD *)(v4 + 16), a2, a3, a4);
}

void type metadata accessor for (StrongHash, DisplayList)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (StrongHash, DisplayList))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
  }
}

uint64_t type metadata accessor for TemporalStackPreference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TemporalStackPreference);
}

uint64_t type metadata completion function for TemporalStackChildView()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStackChildView(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 4) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 4) & ~v6, ((unint64_t)a2 + v6 + 4) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for TemporalStackChildView(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_DWORD *initializeWithCopy for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithCopy for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithTake for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChildView(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v6)
    goto LABEL_20;
  v8 = ((v7 + 4) & ~v7) + *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_20;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_20:
      if ((_DWORD)v6)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))((a1 + v7 + 4) & ~v7, v6, AssociatedTypeWitness);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_20;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v13 = v8;
    else
      v13 = 4;
    __asm { BR              X11 }
  }
  return (v6 + v12 + 1);
}

void storeEnumTagSinglePayload for TemporalStackChildView(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void base witness table accessor for _AttributeBody in TemporalStackPreference<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStackChildGeometry<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in TemporalStackChildView<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void partial apply for closure #1 in TemporalStackChildView.value.getter()
{
  closure #1 in TemporalStackChildView.value.getter();
}

uint64_t specialized TemporalStackPreference.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TemporalStackChild(255, a2, a3, a4);
  type metadata accessor for Array();
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TemporalStackPreference.value.getter(a1);
}

unint64_t SelectionBasedStorage.$menu.getter(unsigned int a1)
{
  uint64_t v1;

  v1 = a1;
  if (*MEMORY[0x1E0CFED28] == a1)
    v1 = 0;
  return v1 | ((unint64_t)(*MEMORY[0x1E0CFED28] == a1) << 32);
}

unint64_t SelectionBasedStorage.$action.getter(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = a2;
  if (*MEMORY[0x1E0CFED28] == a2)
    v2 = 0;
  return v2 | ((unint64_t)(*MEMORY[0x1E0CFED28] == a2) << 32);
}

unint64_t SelectionBasedStorage.$isSelectionEnabled.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = HIDWORD(a2);
  if (*MEMORY[0x1E0CFED28] == HIDWORD(a2))
    v2 = 0;
  return v2 | ((unint64_t)(*MEMORY[0x1E0CFED28] == HIDWORD(a2)) << 32);
}

uint64_t _GraphInputs.setSelectionStorage<A>(_:forType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v5 = type metadata accessor for _GraphInputs.SelectionBasedStorageKey(0, a4, a5, a4);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _GraphInputs.SelectionBasedStorageKey<A>, v5);
  return specialized _GraphInputs.subscript.setter((uint64_t)v7);
}

unint64_t WeakSelectionBasedStorage.$menu.getter()
{
  unsigned int Attribute;
  uint64_t v1;

  Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E0CFED28])
    v1 = 0;
  else
    v1 = Attribute;
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E0CFED28]) << 32);
}

uint64_t (*WeakSelectionBasedStorage.action.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  uint64_t *WeakValue;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
    return (uint64_t (*)())1;
  v9 = *WeakValue;
  if (!*WeakValue)
    return 0;
  v10 = WeakValue[1];
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = v9;
  v11[5] = v10;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ())partial apply;
}

unint64_t WeakSelectionBasedStorage.$isSelectionEnabled.getter()
{
  unsigned int Attribute;
  uint64_t v1;

  Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E0CFED28])
    v1 = 0;
  else
    v1 = Attribute;
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E0CFED28]) << 32);
}

unint64_t WeakSelectionBasedStorage.$action.getter()
{
  unsigned int Attribute;
  uint64_t v1;

  Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E0CFED28])
    v1 = 0;
  else
    v1 = Attribute;
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E0CFED28]) << 32);
}

void SelectionMenuModifier.body(content:)()
{
  swift_retain();
  type metadata accessor for SelectionMenuModifier();
}

void sub_187AA6E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionMenuModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  *(_QWORD *)(v5 - 240) = v4;
  *(_QWORD *)(v5 - 232) = v3;
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  type metadata accessor for SelectionMenuModifierCore();
}

uint64_t sub_187AA6EC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  uint64_t v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2);
  MEMORY[0x18D75B4AC](v44, &v42, v2, a1, v6);
  swift_release();
  v42 = v44[0];
  v7 = type metadata accessor for ModifiedContent();
  v41[0] = v6;
  v41[1] = &protocol witness table for SelectionMenuModifierCore<A, B>;
  v8 = MEMORY[0x1E0CE2E70];
  v9 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v7, v41);
  View.sharingPickerHost()(v7, v9);
  swift_release();
  v10 = *(_OWORD *)(v4 - 128);
  v49 = *(_OWORD *)(v4 - 144);
  v50 = v10;
  v51 = *(_OWORD *)(v4 - 112);
  v11 = *(_OWORD *)(v4 - 192);
  v45 = *(_OWORD *)(v4 - 208);
  v46 = v11;
  v12 = *(_OWORD *)(v4 - 160);
  v47 = *(_OWORD *)(v4 - 176);
  v48 = v12;
  v13 = *(_OWORD *)(v4 - 224);
  v44[0] = *(_OWORD *)(v4 - 240);
  v44[1] = v13;
  v37 = v49;
  v38 = v10;
  v39 = v51;
  v33 = v45;
  v34 = v11;
  v35 = v47;
  v36 = v12;
  v52 = *(_QWORD *)(v4 - 96);
  v40 = v52;
  v31 = v44[0];
  v32 = v13;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v14 = type metadata accessor for ModifiedContent();
  v30[0] = v9;
  v30[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v15 = MEMORY[0x18D75FFDC](v8, v14, v30);
  static ViewBuilder.buildExpression<A>(_:)(&v31, v14, v15);
  outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>((uint64_t)v44);
  v17 = v3[6];
  v16 = v3[7];
  v18 = v3[5];
  *(_OWORD *)(v4 - 144) = v17;
  *(_OWORD *)(v4 - 128) = v16;
  v19 = v3[7];
  *(_OWORD *)(v4 - 112) = v3[8];
  v21 = v3[2];
  v20 = v3[3];
  v22 = v3[1];
  *(_OWORD *)(v4 - 208) = v21;
  *(_OWORD *)(v4 - 192) = v20;
  v23 = v3[3];
  v25 = v3[4];
  v24 = v3[5];
  *(_OWORD *)(v4 - 176) = v25;
  *(_OWORD *)(v4 - 160) = v24;
  v26 = v3[1];
  v27 = *v3;
  *(_OWORD *)(v4 - 240) = *v3;
  *(_OWORD *)(v4 - 224) = v26;
  v37 = v17;
  v38 = v19;
  v39 = v3[8];
  v33 = v21;
  v34 = v23;
  v35 = v25;
  v36 = v18;
  v28 = v43;
  *(_QWORD *)(v4 - 96) = v43;
  v40 = v28;
  v31 = v27;
  v32 = v22;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v31, v14, v1);
  return outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>(v4 - 240);
}

void protocol witness for ViewModifier.body(content:) in conformance SelectionMenuModifier<A, B>()
{
  SelectionMenuModifier.body(content:)();
}

void static SelectionMenuModifierCore._makeInputs(modifier:inputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  type metadata accessor for SelectionMenuModifierCore();
}

void sub_187AA71C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for _GraphValue();
  v3 = _GraphValue.value.getter();
  v4 = *(_QWORD *)(v2 - 200);
  v5 = *(_DWORD *)(v2 - 192);
  *(_OWORD *)(v2 - 384) = *(_OWORD *)(v2 - 176);
  v6 = *(_QWORD *)(v2 - 184);
  v8 = *(_QWORD *)(v2 - 160);
  v7 = *(_QWORD *)(v2 - 152);
  *(_OWORD *)(v2 - 400) = *(_OWORD *)(v2 - 144);
  v9 = *(_QWORD *)(v2 - 128);
  v10 = *(_DWORD *)(v2 - 120);
  v11 = (id)AGSubgraphGetCurrent();
  if (v11)
  {
    *(_QWORD *)(v2 - 408) = &v13;
    *(_QWORD *)(v2 - 304) = v11;
    *(_DWORD *)(v2 - 296) = v3;
    *(_QWORD *)(v2 - 288) = v4;
    *(_DWORD *)(v2 - 280) = v5;
    *(_QWORD *)(v2 - 272) = v6;
    *(_OWORD *)(v2 - 264) = *(_OWORD *)(v2 - 384);
    *(_QWORD *)(v2 - 248) = v8;
    *(_QWORD *)(v2 - 240) = v7;
    *(_OWORD *)(v2 - 232) = *(_OWORD *)(v2 - 400);
    *(_QWORD *)(v2 - 216) = v9;
    *(_DWORD *)(v2 - 208) = v10;
    MEMORY[0x1E0C80A78](v11, v12);
    *(_QWORD *)(v2 - 384) = v7;
    type metadata accessor for Set();
    swift_getFunctionTypeMetadata1();
    *(_QWORD *)(v2 - 336) = v1;
    *(_QWORD *)(v2 - 328) = *(_QWORD *)(v2 - 360);
    *(_QWORD *)(v2 - 320) = v0;
    *(_QWORD *)(v2 - 312) = *(_QWORD *)(v2 - 352);
    type metadata accessor for SelectionMenuModifierCore.Child();
  }
  __break(1u);
  JUMPOUT(0x187AA74A8);
}

void (*SelectionMenuModifierCore.Child.value.getter(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[6];
  int v13;

  v3 = *(_OWORD *)(v1 + 80);
  v12[4] = *(_OWORD *)(v1 + 64);
  v12[5] = v3;
  v13 = *(_DWORD *)(v1 + 96);
  v4 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v12[2] = *(_OWORD *)(v1 + 32);
  v12[3] = v5;
  v6 = swift_allocObject();
  v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 32) = v7;
  v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 + 128) = v8;
  *(_DWORD *)(v6 + 144) = *(_DWORD *)(v1 + 96);
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 64) = v9;
  v10 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v6 + 96) = v10;
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)v12);
  return partial apply for closure #1 in SelectionMenuModifierCore.Child.value.getter;
}

void closure #1 in SelectionMenuModifierCore.Child.value.getter(uint64_t a1, uint64_t a2)
{
  id v4;

  AGGraphClearUpdate();
  v4 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in SelectionMenuModifierCore.Child.value.getter(a2, a1);
}

uint64_t sub_187AA75C8()
{
  void *v0;
  uint64_t v2;

  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v2;
}

void closure #1 in closure #1 in SelectionMenuModifierCore.Child.value.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for SelectionMenuModifierCore.Child();
}

void sub_187AA76A8()
{
  specialized SelectionMenuModifierCore.Child.modifier.getter();
}

uint64_t sub_187AA76B0(void (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t result;

  swift_retain();
  a1(v2);
  swift_release();
  *(_QWORD *)(v9 - 256) = v4;
  v11 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)partial apply for closure #1 in Attribute.init(value:), v9 - 272, v4, MEMORY[0x1E0DEDCE8], v11, MEMORY[0x1E0DEDD18], v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v4);
  _GraphValue.init(_:)();
  v13 = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v9 - 176) = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v9 - 160) = v13;
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(v5 + 80);
  *(_DWORD *)(v9 - 128) = *(_DWORD *)(v5 + 96);
  v14 = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v9 - 208) = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v9 - 192) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24))(v9 - 284, v9 - 208, v4, v3);
  v15 = *(_DWORD *)(v9 - 232);
  *(_QWORD *)(v9 - 208) = *(_QWORD *)(v9 - 240);
  *(_DWORD *)(v9 - 200) = v15;
  v16 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v16 & 0x100000000) != 0)
  {
    result = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    AGGraphGetValue();
    result = swift_bridgeObjectRetain();
  }
  *v1 = result;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance SelectionMenuModifierCore<A, B>.Child@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v4 = SelectionMenuModifierCore.Child.value.getter(a1);
  v6 = v5;
  v7 = swift_allocObject();
  result = *(__n128 *)(a1 + 16);
  v9 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v7 + 16) = result;
  *(_OWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> (@owned PlatformItemList);
  a2[1] = v7;
  return result;
}

void protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionMenuModifierCore<A, B>()
{
  static SelectionMenuModifierCore._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionMenuModifierCore<A, B>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionMenuModifierCore<A, B>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionMenuModifierCore<A, B>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static SelectionActionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v24 = *a2;
  LODWORD(KeyPath) = v6;
  v26 = v7;
  v27 = *(_OWORD *)(a2 + 3);
  v28 = v8;
  v9 = _GraphInputs.selectionStorage<A>(forType:)(a1, a3, a4, a4);
  v11 = v10 & 0xFFFFFFFF00000000;
  type metadata accessor for SelectionActionModifier(255, a3, a4, v12);
  type metadata accessor for _GraphValue();
  v22 = a3;
  v23 = a4;
  LODWORD(v24) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  v19 = type metadata accessor for Optional();
  v20 = type metadata accessor for Focus();
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v20);
  v13 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v18, v20, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  swift_release();
  swift_release();
  return _GraphInputs.setSelectionStorage<A>(_:forType:)(v9, v11 | v17, v15, a3, a4);
}

uint64_t key path getter for SelectionActionModifier.action : <A>SelectionActionModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a3 + a2;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> ();
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v9;
  a4[1] = v8;
  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t key path setter for SelectionActionModifier.action : <A>SelectionActionModifier<A>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  if (*a1)
  {
    v7 = a4 + a3;
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(_QWORD *)(v8 + 32) = v5;
    *(_QWORD *)(v8 + 40) = v6;
    v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ());
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = *a2;
  v11 = a2[1];
  outlined copy of AppIntentExecutor?(v5);
  result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v10, v11);
  *a2 = v9;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionActionModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionActionModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionActionModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionActionModifier<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static SelectionActionModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t static SelectionEnabledModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  _BYTE v18[16];
  uint64_t FunctionTypeMetadata1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 2);
  v7 = a2[2];
  v8 = a2[5];
  v24 = *a2;
  LODWORD(KeyPath) = v6;
  v26 = v7;
  v27 = *(_OWORD *)(a2 + 3);
  v28 = v8;
  v9 = _GraphInputs.selectionStorage<A>(forType:)(a1, a3, a4, a4);
  v11 = v10;
  type metadata accessor for SelectionEnabledModifier(255, a3, a4, v12);
  type metadata accessor for _GraphValue();
  v22 = a3;
  v23 = a4;
  LODWORD(v24) = _GraphValue.value.getter();
  KeyPath = swift_getKeyPath();
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v20 = type metadata accessor for Focus();
  v21 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CFECE8], v20);
  v13 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v18, v20, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  swift_release();
  swift_release();
  return _GraphInputs.setSelectionStorage<A>(_:forType:)(v9, v11 | ((unint64_t)v17 << 32), v15, a3, a4);
}

uint64_t key path getter for SelectionEnabledModifier.isEnabled : <A>SelectionEnabledModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 + a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed A) -> (@unowned Bool);
  a4[1] = v8;
  return swift_retain();
}

uint64_t key path setter for SelectionEnabledModifier.isEnabled : <A>SelectionEnabledModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = a4 + a3;
  v7 = *a1;
  v6 = a1[1];
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v6;
  swift_retain();
  result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool);
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionEnabledModifier<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionEnabledModifier<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionEnabledModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionEnabledModifier<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static SelectionEnabledModifier._makeInputs(modifier:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD v12[2];

  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v11 = type metadata accessor for ModifiedContent();
  v12[0] = a11;
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v11, v12);
  type metadata accessor for SelectionMenuModifier();
}

uint64_t sub_187AA7F8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v21 - v11;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v6;
  v13[3] = v4;
  v13[4] = v1;
  v13[5] = v3;
  v13[6] = v5;
  v13[7] = v2;
  v13[8] = *(_QWORD *)(v7 - 200);
  v13[9] = *(_QWORD *)(v7 - 192);
  *(_QWORD *)(v7 - 128) = partial apply for closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:);
  *(_QWORD *)(v7 - 120) = v13;
  swift_retain();
  MEMORY[0x18D75B4AC](v7 - 128, v6, a1, v3);
  swift_release();
  v15 = *(_QWORD *)(v7 - 168);
  v14 = *(_QWORD *)(v7 - 160);
  *(_QWORD *)(v7 - 128) = v15;
  *(_QWORD *)(v7 - 120) = v14;
  outlined copy of AppIntentExecutor?(v15);
  v17 = type metadata accessor for SelectionActionModifier(0, v4, v5, v16);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionMenuModifier<A, B>, a1);
  *(_QWORD *)(v7 - 144) = v3;
  *(_QWORD *)(v7 - 136) = v18;
  v19 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v7 - 144);
  MEMORY[0x18D75B4AC](v7 - 128, v9, v17, v19);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v15, v14);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 184) + 8))(v12, v9);
}

void type metadata accessor for SelectionMenuModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t sub_187AA80F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SelectionActionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionActionModifier);
}

void View.contextMenu<A, B>(forSelectionType:menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[2];

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a9;
  v16[8] = a2;
  v16[9] = a3;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v17 = type metadata accessor for ModifiedContent();
  v18[0] = a9;
  v18[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v17, v18);
  swift_retain();
  type metadata accessor for SelectionMenuModifier();
}

uint64_t sub_187AA8214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x18D75B4AC](&v4, v2, a1, v1);
  return swift_release();
}

uint64_t closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void (*v11)(double);
  uint64_t v13;

  v7 = *(_QWORD *)(a6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  View.styleContext<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a6);
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4]);
}

void View.contextMenu<A, B>(presenting:menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(a1, a2, a3, 0, 0, a4, a5, a6, a7, a8, a9);
}

uint64_t View.selectionDisabled<A>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a2;
  v13[7] = a3;
  v17[0] = partial apply for closure #1 in View.selectionDisabled<A>(for:_:);
  v17[1] = v13;
  v15 = type metadata accessor for SelectionEnabledModifier(0, a5, a7, v14);
  swift_retain();
  MEMORY[0x18D75B4AC](v17, a4, v15, a6);
  return swift_release();
}

BOOL partial apply for closure #1 in View.selectionDisabled<A>(for:_:)()
{
  uint64_t v0;

  return ((*(uint64_t (**)(void))(v0 + 48))() & 1) == 0;
}

uint64_t type metadata accessor for SelectionEnabledModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelectionEnabledModifier);
}

uint64_t View.contextAction<A>(forSelectionType:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v11 = type metadata accessor for SelectionActionModifier(0, a5, a7, a4);
  swift_retain();
  MEMORY[0x18D75B4AC](v13, a4, v11, a6);
  return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a2, a3);
}

void sub_187AA84FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for SelectionMenuModifier();
}

uint64_t sub_187AA8590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[18];

  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for SelectionActionModifier(255, v2, v3, v7);
  v8 = type metadata accessor for ModifiedContent();
  v11[0] = v4;
  v11[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionMenuModifier<A, B>, a1);
  v10[0] = MEMORY[0x18D75FFDC](v1, v6, v11);
  v10[1] = &protocol witness table for SelectionActionModifier<A>;
  return MEMORY[0x18D75FFDC](v1, v8, v10);
}

void sub_187AA8628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  v1 = *(_QWORD *)(a1 + 40);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v2 = type metadata accessor for ModifiedContent();
  v3[0] = v1;
  v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (uint64_t (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E0CE4530]);
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
  type metadata accessor for SelectionMenuModifier();
}

uint64_t sub_187AA86BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD v6[18];

  v4 = type metadata accessor for ModifiedContent();
  v6[0] = v2;
  v6[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionMenuModifier<A, B>, a1);
  return MEMORY[0x18D75FFDC](v1, v4, v6);
}

uint64_t sub_187AA8714(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for SelectionEnabledModifier, (uint64_t)&protocol witness table for SelectionEnabledModifier<A>);
}

uint64_t sub_187AA8728(_QWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, _QWORD, _QWORD))type metadata accessor for SelectionActionModifier, (uint64_t)&protocol witness table for SelectionActionModifier<A>);
}

uint64_t type metadata accessor for WeakSelectionBasedStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakSelectionBasedStorage);
}

void base witness table accessor for PropertyKey in _GraphInputs.SelectionBasedStorageKey<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionActionModifier<A>()
{
  return &protocol witness table for SelectionActionModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionEnabledModifier<A>()
{
  return &protocol witness table for SelectionEnabledModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SelectionMenuModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for SelectionMenuModifierCore()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v12 = *(_OWORD *)(a1 + 96);
  v13 = *(_OWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 136);
  swift_release();
  outlined consume of SharingPickerHostModifier.Model?(v15, v14, v2, v3, v4, v5, v6, v7, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9);
  swift_release();
  return a1;
}

uint64_t sub_187AA887C()
{
  return 16;
}

__n128 sub_187AA8888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized _GraphInputs.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v3);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v8 - v6, a1, v4);
  return PropertyList.subscript.setter();
}

uint64_t sub_187AA893C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t sub_187AA8998()
{
  return 16;
}

__n128 sub_187AA89A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ())(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 32);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1);
}

void sub_187AA8A04()
{
  type metadata accessor for SelectionMenuModifier();
}

void sub_187AA8A38(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for SelectionMenuModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for SelectionMenuModifierCore();
}

uint64_t sub_187AA8A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[14];

  v1 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v2 = type metadata accessor for ModifiedContent();
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v0);
  v6[1] = &protocol witness table for SelectionMenuModifierCore<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v6);
  v5[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionMenuModifierCore<A, B>()
{
  return &protocol witness table for SelectionMenuModifierCore<A, B>;
}

void type metadata accessor for SelectionMenuModifierCore.Child()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for _AttributeBody in SelectionMenuModifierCore<A, B>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in WeakSelectionBasedStorage.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WeakSelectionBasedStorage.init(_:)(a1);
}

{
  uint64_t result;

  result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t sub_187AA8B78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> (@owned PlatformItemList)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 48))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_187AA8BC8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in SelectionMenuModifierCore.Child.value.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SelectionMenuModifierCore.Child.value.getter(a1, v1 + 48);
}

void specialized SelectionMenuModifierCore.Child.modifier.getter()
{
  type metadata accessor for SelectionMenuModifierCore();
}

uint64_t sub_187AA8C44()
{
  return *(_QWORD *)AGGraphGetValue();
}

uint64_t SelectionContext.canSelect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *WeakValue;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for [Selectable], (unint64_t *)&lazy cache variable for type metadata for Selectable, (uint64_t)&protocol descriptor for Selectable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  WeakValue = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    v9 = *WeakValue;
    swift_bridgeObjectRetain();
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      goto LABEL_8;
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
    v10 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v10)
    {
LABEL_8:
      v15 = 2;
      goto LABEL_10;
    }
  }
  v11 = (_QWORD *)(v9 + 32);
  while (1)
  {
    v12 = v11[3];
    v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, a4, a5, v12, v13);
    if (v14 != 2)
      break;
    v11 += 5;
    if (!--v10)
      goto LABEL_8;
  }
  v15 = v14;
LABEL_10:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SelectionContext.isSelected<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t WeakValue;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[56];

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v9 = v8;
  WeakValue = AGGraphGetWeakValue();
  if (!WeakValue)
    return 2;
  outlined init with copy of Binding<Selection>(WeakValue, (uint64_t)v19);
  MEMORY[0x18D75B9C8](v16, v9);
  v11 = v17;
  v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a4, a5, v11, v12);
  outlined destroy of Binding<Selection>((uint64_t)v19);
  v14 = v13 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v14;
}

uint64_t View.optionalSelectionContainer<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  unint64_t v45;
  uint64_t v46;
  char *v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _BYTE v77[56];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];

  v64 = a5;
  v73 = a4;
  v67 = a1;
  v74 = a6;
  v8 = type metadata accessor for ModifiedContent();
  v61 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v66 = (char *)&v60 - v14;
  v69 = a2;
  v15 = type metadata accessor for ModifiedContent();
  v62 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v65 = (char *)&v60 - v21;
  v63 = a3;
  v22 = type metadata accessor for Binding();
  v23 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v60 - v26;
  v28 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v68 = (char *)&v60 - v35;
  v72 = type metadata accessor for _ConditionalContent();
  v71 = *(_QWORD *)(v72 - 8);
  v37 = MEMORY[0x1E0C80A78](v72, v36);
  v70 = (char *)&v60 - v38;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v27, v67, v23, v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v27, 1, v22) == 1)
  {
    v39 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    v40 = v73;
    MEMORY[0x18D75B4AC](v39, v69, MEMORY[0x1E0CE1E98], v73);
    v82[0] = v40;
    v82[1] = MEMORY[0x1E0CE1E88];
    v41 = MEMORY[0x1E0CE2E70];
    v42 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v8, v82);
    v43 = (uint64_t)v66;
    static ViewBuilder.buildExpression<A>(_:)(v11, v8, v42);
    v44 = *(void (**)(char *, uint64_t))(v61 + 8);
    v44(v11, v8);
    static ViewBuilder.buildBlock<A>(_:)(v43, v8, (uint64_t)v11);
    v45 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    v81[0] = v40;
    v81[1] = v45;
    MEMORY[0x18D75FFDC](v41, v15, v81);
    v46 = (uint64_t)v70;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v11, v15, v8);
    v44(v11, v8);
    v44((char *)v43, v8);
  }
  else
  {
    v47 = v68;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v68, v27, v22);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v32, v47, v22);
    v48 = SelectionContainerModifier.init<A>(_:)((uint64_t)v32, v63, v64, (uint64_t)v77);
    v40 = v73;
    MEMORY[0x18D75B4AC](v77, v69, &type metadata for SelectionContainerModifier, v73, v48);
    outlined destroy of SelectionContainerModifier((uint64_t)v77);
    v49 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    v76[0] = v40;
    v76[1] = v49;
    v50 = MEMORY[0x1E0CE2E70];
    v51 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v76);
    v52 = (uint64_t)v65;
    static ViewBuilder.buildExpression<A>(_:)(v18, v15, v51);
    v53 = *(void (**)(char *, uint64_t))(v62 + 8);
    v53(v18, v15);
    static ViewBuilder.buildBlock<A>(_:)(v52, v15, (uint64_t)v18);
    v75[0] = v40;
    v75[1] = MEMORY[0x1E0CE1E88];
    MEMORY[0x18D75FFDC](v50, v8, v75);
    v46 = (uint64_t)v70;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v18, v15);
    v53(v18, v15);
    v53((char *)v52, v15);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v68, v22);
  }
  v54 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  v80[0] = v40;
  v80[1] = v54;
  v55 = MEMORY[0x1E0CE2E70];
  v56 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v15, v80);
  v79[0] = v40;
  v79[1] = MEMORY[0x1E0CE1E88];
  v57 = MEMORY[0x18D75FFDC](v55, v8, v79);
  v78[0] = v56;
  v78[1] = v57;
  v58 = v72;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v72, v78);
  static ViewBuilder.buildBlock<A>(_:)(v46, v58, v74);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v46, v58);
}

uint64_t View.selectionContainer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  double v16;
  _BYTE v19[56];

  v10 = type metadata accessor for Binding();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = &v19[-v13 - 8];
  (*(void (**)(_BYTE *, uint64_t, double))(v15 + 16))(&v19[-v13 - 8], a1, v12);
  v16 = SelectionContainerModifier.init<A>(_:)((uint64_t)v14, a3, a5, (uint64_t)v19);
  MEMORY[0x18D75B4AC](v19, a2, &type metadata for SelectionContainerModifier, a4, v16);
  return outlined destroy of SelectionContainerModifier((uint64_t)v19);
}

double SelectionContainerModifier.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2);
  v8 = type metadata accessor for Binding();
  v10 = type metadata accessor for AsAnySelection(0, a2, a3, v9);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for AsAnySelection<A>, v10);
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  *(_OWORD *)a4 = v12;
  *(_OWORD *)(a4 + 16) = v13;
  result = *(double *)&v14;
  *(_OWORD *)(a4 + 32) = v14;
  *(_QWORD *)(a4 + 48) = v15;
  return result;
}

uint64_t outlined destroy of SelectionContainerModifier(uint64_t a1)
{
  destroy for SelectionContainerModifier(a1, &type metadata for SelectionContainerModifier);
  return a1;
}

void View.focusedSelectionContainer<A>(_:focusState:priority:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t sub_187AA95D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for _ConditionalContent();
  v10[0] = v1;
  v10[1] = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  v5 = MEMORY[0x1E0CE2E70];
  v6 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v10);
  v9[0] = v1;
  v9[1] = MEMORY[0x1E0CE1E88];
  v8[0] = v6;
  v8[1] = MEMORY[0x18D75FFDC](v5, v3, v9);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v4, v8);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA9SelectionRd__r__lAA15ModifiedContentVyxAA0D17ContainerModifier33_6368CFA25CABC3E0C4568665562C417FLLVGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

ValueMetadata *type metadata accessor for SelectionContainerModifier()
{
  return &type metadata for SelectionContainerModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SelectionContainerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SelectionContainerModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[56];

  outlined init with copy of Binding<Selection>(v1, (uint64_t)v4);
  outlined init with copy of PrimitiveSelectionContainerModifier((uint64_t)v4, a1);
  return outlined destroy of PrimitiveSelectionContainerModifier((uint64_t)v4);
}

uint64_t outlined init with copy of Binding<Selection>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PrimitiveSelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SelectionContainerModifier(a2, a1, &unk_1E1B058F0);
  return a2;
}

uint64_t outlined destroy of PrimitiveSelectionContainerModifier(uint64_t a1)
{
  destroy for SelectionContainerModifier(a1, &unk_1E1B058F0);
  return a1;
}

ValueMetadata *type metadata accessor for _GraphInputs.SelectionContextKey()
{
  return &type metadata for _GraphInputs.SelectionContextKey;
}

uint64_t destroy for SelectionContainerModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for SelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for SelectionContainerModifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  return a1;
}

uint64_t assignWithTake for SelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

void *type metadata accessor for PrimitiveSelectionContainerModifier()
{
  return &unk_1E1B058F0;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<SelectionContainerModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = &protocol witness table for PrimitiveSelectionContainerModifier;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>)
  {
    type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SelectionContainerModifier>, PrimitiveSelectionContainerModifier>);
  }
}

void type metadata accessor for _ViewModifier_Content<SelectionContainerModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<SelectionContainerModifier>)
  {
    lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SelectionContainerModifier>);
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in PrimitiveSelectionContainerModifier()
{
  return &protocol witness table for PrimitiveSelectionContainerModifier;
}

uint64_t static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t result;
  __int128 v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  char *v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v8 = a2[2];
  v10 = a2[5];
  v9 = a2[6];
  v11 = *((_DWORD *)a2 + 20);
  LODWORD(v40) = *a1;
  type metadata accessor for _GraphValue<PrimitiveSelectionContainerModifier>();
  v12 = a2[3];
  v13 = a2[4];
  v20 = *(_OWORD *)(a2 + 7);
  v14 = a2[9];
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext();
  Attribute.init<A>(body:value:flags:update:)();
  v40 = v6;
  v41 = v7;
  v42 = v8;
  *(_QWORD *)&v43 = v12;
  *((_QWORD *)&v43 + 1) = v13;
  v44 = v10;
  v45 = v9;
  v46 = v20;
  v47 = v14;
  v48 = v11;
  type metadata accessor for _AnyPreferenceKey<SelectableKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _AnyPreferenceKey<SelectableKey> and conformance _AnyPreferenceKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for _AnyPreferenceKey<SelectableKey>, MEMORY[0x1E0CE4078]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type _GraphInputs.SelectionContextKey and conformance _GraphInputs.SelectionContextKey();
  PropertyList.subscript.setter();
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v43;
  v35 = v10;
  v36 = v9;
  v37 = v20;
  v38 = v14;
  v39 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  a3(&v22, v15, &v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v16 = v22;
  v17 = v23;
  v18 = v24;
  v28 = v22;
  v29 = v23;
  v30 = v24;
  v25 = partial apply for closure #2 in static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:);
  v26 = &v27;
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  *(_QWORD *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 12) = v18;
  return result;
}

unint64_t protocol witness for Rule.value.getter in conformance PrimitiveSelectionContainerModifier.MakeSelectionContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;

  v3 = *(_DWORD *)(v1 + 4);
  v4 = AGCreateWeakAttribute();
  if (v3 == *MEMORY[0x1E0CFED28])
  {
    result = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    result = AGCreateWeakAttribute();
    v6 = HIDWORD(result);
  }
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 12) = v6;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PrimitiveSelectionContainerModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of Binding<Selection>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _GraphValue<PrimitiveSelectionContainerModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _GraphValue<PrimitiveSelectionContainerModifier>)
  {
    v0 = type metadata accessor for _GraphValue();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PrimitiveSelectionContainerModifier>);
  }
}

unint64_t lazy protocol witness table accessor for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext;
  if (!lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PrimitiveSelectionContainerModifier.MakeSelectionContext, &unk_1E1B05870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveSelectionContainerModifier.MakeSelectionContext and conformance PrimitiveSelectionContainerModifier.MakeSelectionContext);
  }
  return result;
}

void type metadata accessor for _AnyPreferenceKey<SelectableKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _AnyPreferenceKey<SelectableKey>)
  {
    v0 = type metadata accessor for _AnyPreferenceKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnyPreferenceKey<SelectableKey>);
  }
}

uint64_t partial apply for closure #2 in static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = _ViewOutputs.subscript.getter();
  v3 = *MEMORY[0x1E0CFED28];
  if ((result & 0x100000000) == 0)
    v3 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

void *type metadata accessor for PrimitiveSelectionContainerModifier.MakeSelectionContext()
{
  return &unk_1E1B05870;
}

ValueMetadata *type metadata accessor for SelectionContext()
{
  return &type metadata for SelectionContext;
}

uint64_t specialized NSTextAlignment.init(in:)()
{
  unsigned __int8 v0;
  char v2;
  char v3;

  v0 = EnvironmentValues.multilineTextAlignment.getter();
  EnvironmentValues.layoutDirection.getter();
  EnvironmentValues.writingMode.getter();
  swift_release();
  swift_release();
  if ((v2 & 1) != 0)
    return v0;
  if (v0)
  {
    if (v0 == 1)
      return v0;
    if ((v3 & 1) == 0)
      return 2;
    return 0;
  }
  if ((v3 & 1) == 0)
    return 0;
  return 2;
}

void UIGestureRecognizerRepresentable.makeCoordinator(proxy:)()
{
  UIGestureRecognizerRepresentable.makeCoordinator(proxy:)();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t UIGestureRecognizerRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t UIGestureRecognizerRepresentableContext.converter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v3 = v2 + *(int *)(a1 + 36);
  v4 = *(_DWORD *)(v3 + 56);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v3 + 40);
  *(_DWORD *)(a2 + 56) = v4;
  return swift_retain();
}

__n128 UIGestureRecognizerRepresentableContext.init(coordinator:converter:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  int v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __n128 v18;
  __int128 v19;

  v10 = *a2;
  v11 = *((_DWORD *)a2 + 14);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(__n128 *)(a2 + 3);
  v19 = *(_OWORD *)(a2 + 1);
  v13 = a2[5];
  v14 = a2[6];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  v16 = a5 + *(int *)(type metadata accessor for UIGestureRecognizerRepresentableContext(0, a3, a4, v15) + 36);
  *(_QWORD *)v16 = v10;
  *(_OWORD *)(v16 + 8) = v19;
  result = v18;
  *(__n128 *)(v16 + 24) = v18;
  *(_QWORD *)(v16 + 40) = v13;
  *(_QWORD *)(v16 + 48) = v14;
  *(_DWORD *)(v16 + 56) = v11;
  return result;
}

double UIGestureRecognizerRepresentableCoordinateSpaceConverter.location<A>(in:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  double v7;

  v1 = *v0;
  v2 = MEMORY[0x18D760234](*v0 + 24);
  if (!v2)
    return 0.0;
  v3 = (void *)v2;
  v4 = (void *)MEMORY[0x18D760234](v1 + 16);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_window);

  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v3, sel_locationInView_, v6);

  v7 = UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)();
  return v7;
}

double UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)()
{
  double v0;
  double v1;

  MEMORY[0x18D75B908]();
  GeometryProxy.convert<A>(globalPoint:to:)();
  v1 = v0;
  static Update.end()();
  return v1;
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(a1, a2, a3, &selRef_velocityInView_, (SEL *)&selRef__swiftui_globalVelocity);
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.translation<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(a1, a2, a3, &selRef_translationInView_, (SEL *)&selRef__swiftui_globalTranslation);
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, SEL *a5)
{
  _QWORD *v5;
  void *result;
  void *v9;
  double v10;

  result = (void *)MEMORY[0x18D760234](*v5 + 24);
  if (result)
  {
    v9 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a4))
    {
      objc_msgSend(v9, *a5);
      v10 = UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)();

      return *(void **)&v10;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

double UIGestureRecognizerRepresentableProxy.convert<A>(globalPoint:to:)()
{
  return 0.0;
}

double UIGestureRecognizerRepresentableProxy.location<A>(in:)()
{
  return 0.0;
}

uint64_t View.gesture<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GestureRecognizerModifier(0, v11, v13, v12);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v17);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v19, v10, a3);
  MEMORY[0x18D75B4AC](v19, a2, v14, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
}

uint64_t type metadata accessor for GestureRecognizerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureRecognizerModifier);
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeCoordinator(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeCoordinator(converter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeUIGestureRecognizer(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.updateUIGestureRecognizer(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.handleUIGestureRecognizerAction(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t type metadata completion function for UIGestureRecognizerRepresentableContext()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIGestureRecognizerRepresentableContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 60 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v12 = *(_OWORD *)(v11 + 8);
    v13 = *(_OWORD *)(v11 + 24);
    v14 = *(_OWORD *)(v11 + 40);
    *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 40) = v14;
    *(_OWORD *)(v10 + 24) = v13;
    *(_OWORD *)(v10 + 8) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for UIGestureRecognizerRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return swift_release();
}

uint64_t initializeWithCopy for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  v9 = *(_DWORD *)(v8 + 56);
  v10 = *(_OWORD *)(v8 + 40);
  v11 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v11;
  *(_OWORD *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 56) = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
  return a1;
}

uint64_t initializeWithTake for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (__int128 *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v10 = v8[1];
  v9 = v8[2];
  v11 = *v8;
  *(_OWORD *)((char *)v7 + 44) = *(__int128 *)((char *)v8 + 44);
  v7[1] = v10;
  v7[2] = v9;
  *v7 = v11;
  return a1;
}

uint64_t assignWithTake for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIGestureRecognizerRepresentableContext(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 < a2 && *((_BYTE *)a1 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 60))
    return v6 + *a1 + 1;
  if (v5 >= 0x7FFFFFFF)
    return (*(uint64_t (**)(_DWORD *))(v4 + 48))(a1);
  v9 = *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

void storeEnumTagSinglePayload for UIGestureRecognizerRepresentableContext(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(v6 + 64);
  v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 60;
  if (v8 >= a2)
  {
    if (v8 < a3)
      *((_BYTE *)a1 + v10) = 0;
    if ((_DWORD)a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        v11 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(v11 + 40) = 0u;
          v12 = a2 ^ 0x80000000;
          *(_OWORD *)(v11 + 24) = 0u;
          *(_OWORD *)(v11 + 8) = 0u;
          *(_DWORD *)(v11 + 56) = 0;
        }
        else
        {
          v12 = (a2 - 1);
        }
        *(_QWORD *)v11 = v12;
      }
      else
      {
        (*(void (**)(_DWORD *, uint64_t))(v6 + 56))(a1, a2);
      }
    }
  }
  else
  {
    bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 60);
    *a1 = ~v8 + a2;
    if (v8 < a3)
      *((_BYTE *)a1 + v10) = 1;
  }
}

uint64_t type metadata accessor for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIGestureRecognizerRepresentableContext);
}

uint64_t initializeWithCopy for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 60))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 60) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 60) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIGestureRecognizerRepresentableCoordinateSpaceConverter()
{
  return &type metadata for UIGestureRecognizerRepresentableCoordinateSpaceConverter;
}

uint64_t type metadata accessor for UIGestureRecognizerRepresentableProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UIGestureRecognizerRepresentableProxy);
}

uint64_t static GestureRecognizerModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[12];
  int v91;
  int v92;
  int v93;
  _BYTE *v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t AssociatedTypeWitness;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  _BYTE *v117;
  __int128 v118;
  __int128 v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BYTE v126[24];
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  __int128 v139;
  unint64_t v140;
  unint64_t v141;
  __int128 v142;
  unint64_t v143;
  int v144;
  uint64_t v145;

  v102 = a6;
  v145 = *MEMORY[0x1E0C80C00];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v11, v12);
  v107 = &v90[-v13];
  v108 = a4;
  v109 = a5;
  v15 = type metadata accessor for GestureRepresentableChild(0, a4, a5, v14);
  v100 = *(_QWORD *)(v15 - 8);
  v101 = v15;
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v99 = &v90[-v18];
  v97 = *a1;
  LODWORD(v18) = *(_DWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_DWORD *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v22 = *(_DWORD *)(a2 + 32);
  v23 = *(_DWORD *)(a2 + 36);
  v24 = *(_QWORD *)(a2 + 40);
  v25 = *(_QWORD *)(a2 + 48);
  LODWORD(a1) = *(_DWORD *)(a2 + 56);
  v26 = *(_DWORD *)(a2 + 60);
  v28 = *(_DWORD *)(a2 + 64);
  v27 = *(_DWORD *)(a2 + 68);
  v29 = *(_DWORD *)(a2 + 72);
  v30 = *(_DWORD *)(a2 + 76);
  v31 = *(_DWORD *)(a2 + 80);
  v32 = *(_QWORD *)a2;
  v123 = *(_QWORD *)a2;
  v115 = v23;
  v116 = v18;
  LODWORD(v124) = v18;
  v33 = v19;
  v125 = v19;
  v34 = v20;
  *(_DWORD *)v126 = v20;
  v35 = v21;
  *(_DWORD *)&v126[4] = v21;
  v36 = v22;
  *(_DWORD *)&v126[8] = v22;
  *(_DWORD *)&v126[12] = v23;
  *(_QWORD *)&v119 = v24;
  *(_QWORD *)&v126[16] = v24;
  v127 = v25;
  v128 = __PAIR64__(v26, a1);
  v113 = v28;
  v114 = v26;
  *(_QWORD *)&v129 = __PAIR64__(v27, v28);
  v111 = v29;
  v112 = v27;
  *((_QWORD *)&v129 + 1) = __PAIR64__(v30, v29);
  LODWORD(v118) = v30;
  LODWORD(v117) = v31;
  LODWORD(v130) = v31;
  a3(&v121, v17);
  v123 = v25;
  v37 = a1;
  LODWORD(v124) = (_DWORD)a1;
  result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) == 0)
    goto LABEL_4;
  v94 = v90;
  v40 = v32;
  v136 = v32;
  v137 = v116;
  v41 = v33;
  v138 = v33;
  v105 = v35;
  v106 = v34;
  *(_QWORD *)&v139 = __PAIR64__(v35, v34);
  *((_QWORD *)&v139 + 1) = __PAIR64__(v115, v36);
  v140 = v119;
  v141 = v25;
  v110 = v37;
  *(_QWORD *)&v142 = __PAIR64__(v114, v37);
  *((_QWORD *)&v142 + 1) = __PAIR64__(v112, v113);
  v143 = __PAIR64__(v118, v111);
  v144 = (int)v117;
  MEMORY[0x1E0C80A78](result, v39);
  v88 = v108;
  v89 = v109;
  LODWORD(v134) = v97;
  type metadata accessor for GestureRecognizerModifier(255, v108, v109, v42);
  type metadata accessor for _GraphValue();
  swift_retain();
  v104 = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter();
  v43 = v123;
  static DynamicPropertyCache.fields(of:)();
  v120 = v43;
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
  v44 = v134;
  type metadata accessor for _GraphValue();
  v45 = v135;
  LODWORD(v123) = v43;
  v97 = _GraphValue.value.getter();
  v123 = v136;
  LODWORD(v124) = v137;
  v125 = v138;
  *(_OWORD *)v126 = v139;
  *(_QWORD *)&v126[16] = v140;
  LODWORD(v94) = _GraphInputs.phase.getter();
  v134 = v44;
  v135 = v45;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v107, 1, 1);
  v46 = v40;
  v95 = v40;
  v123 = v40;
  LODWORD(v40) = v116;
  LODWORD(v124) = v116;
  v125 = v41;
  LODWORD(v44) = v105;
  v47 = v106;
  *(_DWORD *)v126 = v106;
  *(_DWORD *)&v126[4] = v105;
  v96 = v36;
  *(_DWORD *)&v126[8] = v36;
  *(_DWORD *)&v126[12] = v115;
  *(_QWORD *)&v126[16] = v119;
  v127 = v25;
  v128 = __PAIR64__(v114, v110);
  v48 = v113;
  LODWORD(v41) = v114;
  *(_QWORD *)&v129 = __PAIR64__(v112, v113);
  v103 = v25;
  v49 = v112;
  *((_QWORD *)&v129 + 1) = __PAIR64__(v118, v111);
  LODWORD(v130) = (_DWORD)v117;
  LODWORD(AssociatedTypeWitness) = _ViewInputs.size.getter();
  v123 = v46;
  LODWORD(v124) = v40;
  v125 = v104;
  *(_DWORD *)v126 = v47;
  *(_DWORD *)&v126[4] = v44;
  *(_DWORD *)&v126[8] = v36;
  v50 = v115;
  *(_DWORD *)&v126[12] = v115;
  v51 = v119;
  *(_QWORD *)&v126[16] = v119;
  v127 = v103;
  LODWORD(v46) = v111;
  v128 = __PAIR64__(v41, v110);
  *(_QWORD *)&v129 = __PAIR64__(v49, v48);
  *((_QWORD *)&v129 + 1) = __PAIR64__(v118, v111);
  LODWORD(v44) = v118;
  v52 = (int)v117;
  LODWORD(v130) = (_DWORD)v117;
  v93 = _ViewInputs.position.getter();
  v123 = v95;
  v53 = v116;
  LODWORD(v124) = v116;
  v54 = v104;
  v125 = v104;
  *(_DWORD *)v126 = v106;
  *(_DWORD *)&v126[4] = v105;
  *(_DWORD *)&v126[8] = v96;
  *(_DWORD *)&v126[12] = v50;
  *(_QWORD *)&v126[16] = v51;
  v55 = v103;
  v127 = v103;
  LODWORD(v41) = v110;
  v128 = __PAIR64__(v114, v110);
  *(_QWORD *)&v129 = __PAIR64__(v112, v113);
  *((_QWORD *)&v129 + 1) = __PAIR64__(v44, v46);
  LODWORD(v130) = v52;
  v92 = _ViewInputs.transform.getter();
  v56 = v95;
  v123 = v95;
  LODWORD(v124) = v53;
  v125 = v54;
  LODWORD(v54) = v105;
  v57 = v106;
  *(_DWORD *)v126 = v106;
  *(_DWORD *)&v126[4] = v105;
  LODWORD(v46) = v96;
  *(_DWORD *)&v126[8] = v96;
  *(_DWORD *)&v126[12] = v50;
  *(_QWORD *)&v126[16] = v119;
  v127 = v55;
  v128 = __PAIR64__(v114, v41);
  LODWORD(v55) = v113;
  LODWORD(v41) = v114;
  *(_QWORD *)&v129 = __PAIR64__(v112, v113);
  v59 = v111;
  v58 = v112;
  *((_QWORD *)&v129 + 1) = __PAIR64__(v118, v111);
  LODWORD(v130) = (_DWORD)v117;
  v91 = _ViewInputs.environment.getter();
  v123 = v56;
  LODWORD(v124) = v116;
  v125 = v104;
  *(_DWORD *)v126 = v57;
  *(_DWORD *)&v126[4] = v54;
  *(_DWORD *)&v126[8] = v46;
  *(_DWORD *)&v126[12] = v115;
  *(_QWORD *)&v126[16] = v119;
  v127 = v103;
  v128 = __PAIR64__(v41, v110);
  *(_QWORD *)&v129 = __PAIR64__(v58, v55);
  *((_QWORD *)&v129 + 1) = __PAIR64__(v118, v59);
  LODWORD(v130) = (_DWORD)v117;
  v60 = _ViewInputs.safeAreaInsets.getter();
  v61 = v109;
  v62 = v108;
  v63 = v99;
  v64 = GestureRepresentableChild.init(representable:phase:links:coordinator:defaultCoordinator:recognizer:recognizerBox:size:position:transform:environment:safeAreaInsets:)(v97, (int)v94, &v134, (uint64_t)v107, 0, 0, 0, AssociatedTypeWitness, (uint64_t)v99, v93, v92, v91, v60, v108, v109);
  MEMORY[0x1E0C80A78](v64, v65);
  v67 = type metadata accessor for ConcreteRecognizer(0, v62, v61, v66);
  v68 = v101;
  v87[0] = v67;
  v87[1] = v101;
  v88 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureRepresentableChild<A>, v101);
  v69 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v63, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v90[-48], v68, MEMORY[0x1E0DEDCE8], v69, MEMORY[0x1E0DEDD18], v70);
  (*(void (**)(_BYTE *, uint64_t))(v100 + 8))(v63, v68);
  v71 = v123;
  v123 = v121;
  v124 = v122;
  v72 = _ViewOutputs.viewResponders()();
  v73 = v136;
  v74 = v137;
  v75 = v138;
  v77 = v140;
  v76 = v141;
  v118 = v142;
  v119 = v139;
  v78 = v143;
  v79 = v144;
  result = (uint64_t)(id)AGSubgraphGetCurrent();
  if (result)
  {
    v117 = v90;
    v123 = __PAIR64__(v72, v71);
    v124 = v73;
    LODWORD(v125) = v74;
    *(_QWORD *)v126 = v75;
    *(_OWORD *)&v126[8] = v119;
    v127 = v77;
    v128 = v76;
    v129 = v118;
    v130 = v78;
    v131 = v79;
    v132 = 0;
    v133 = (id)result;
    MEMORY[0x1E0C80A78](result, v80);
    v82 = type metadata accessor for RepresentableGestureResponderFilter(0, v108, v109, v81);
    v88 = v82;
    v89 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentableGestureResponderFilter<A>, v82);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
    v84 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v123, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)v87, v82, MEMORY[0x1E0DEDCE8], v84, MEMORY[0x1E0DEDD18], v85);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v123) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
LABEL_4:
    v86 = v102;
    *v102 = v121;
    v86[1] = v122;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for GestureRecognizerModifier(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t GestureRepresentableChild.init(representable:phase:links:coordinator:defaultCoordinator:recognizer:recognizerBox:size:position:transform:environment:safeAreaInsets:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v19 = *a3;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_QWORD *)(a9 + 8) = v19;
  *(_QWORD *)(a9 + 16) = a3[1];
  v20 = (int *)type metadata accessor for GestureRepresentableChild(0, a14, a15, a4);
  v21 = a9 + v20[11];
  swift_getAssociatedTypeWitness();
  v22 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21, a4, v22);
  *(_QWORD *)(a9 + v20[12]) = a5;
  *(_QWORD *)(a9 + v20[13]) = a6;
  *(_QWORD *)(a9 + v20[14]) = a7;
  *(_DWORD *)(a9 + v20[15]) = a8;
  *(_DWORD *)(a9 + v20[16]) = a10;
  *(_DWORD *)(a9 + v20[17]) = a11;
  *(_DWORD *)(a9 + v20[18]) = a12;
  *(_DWORD *)(a9 + v20[19]) = a13;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GestureRecognizerModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static GestureRecognizerModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GestureRecognizerModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureRecognizerModifier<A>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t RecognizerBox.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RecognizerBox()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for DefaultGestureRecognizerRepresentableCoordinator(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t inited;

  v2 = swift_checkMetadataState();
  v4 = v2;
  if (v5 <= 0x3F)
  {
    v4 = type metadata accessor for UIGestureRecognizerRepresentableContext(319, v2, *(_QWORD *)(a1 + 88), v3);
    if (v6 <= 0x3F)
    {
      inited = swift_initClassMetadata2();
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return v4;
}

uint64_t *DefaultGestureRecognizerRepresentableCoordinator.__allocating_init(representable:context:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(a1, a2);
}

uint64_t *DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))((uint64_t)v2 + *(_QWORD *)(*v2 + 96), a1, v5);
  v6 = (uint64_t)v2 + *(_QWORD *)(*v2 + 104);
  v8 = type metadata accessor for UIGestureRecognizerRepresentableContext(0, v5, *(_QWORD *)(v4 + 88), v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, a2, v8);
  return v2;
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  id v22;
  _BYTE v24[24];

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = *(_QWORD *)(*v4 + 88);
  v9 = type metadata accessor for UIGestureRecognizerRepresentableContext(0, v7, v8, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v24[-v12];
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = (uint64_t)v4 + *(_QWORD *)(v6 + 96);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v18, v19, v7);
  v20 = (uint64_t)v4 + *(_QWORD *)(*v4 + 104);
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, v20, v9);
  v21 = *(void (**)(void))(v8 + 56);
  v22 = a1;
  v21();

  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v14 + 8))(v18, v7);
}

uint64_t @objc DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  swift_retain();
  DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(v3, v4, v5, v6);

  return swift_release();
}

uint64_t *DefaultGestureRecognizerRepresentableCoordinator.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 96), v2);
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v5 = type metadata accessor for UIGestureRecognizerRepresentableContext(0, v2, *(_QWORD *)(v1 + 88), v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  return v0;
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.__deallocating_deinit()
{
  DefaultGestureRecognizerRepresentableCoordinator.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultGestureRecognizerRepresentableCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DefaultGestureRecognizerRepresentableCoordinator);
}

uint64_t type metadata completion function for RepresentableGestureResponder()
{
  return swift_initClassMetadata2();
}

uint64_t GestureRepresentableChild.recognizerBox.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  void *v11;

  v2 = *(int *)(a1 + 56);
  if (*(_QWORD *)(v1 + v2))
  {
    v3 = *(_QWORD *)(v1 + v2);
  }
  else
  {
    v4 = v1;
    type metadata accessor for ViewGraph();
    v5 = MEMORY[0x18D75C5F8]();
    type metadata accessor for RecognizerBox();
    v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    v6 = (void *)MEMORY[0x18D760234](v5 + 200);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 208);
      ObjectType = swift_getObjectType();
      v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(&v11, v9, v9, ObjectType, v7);
      swift_unknownObjectRelease();
      swift_release();
      v6 = v11;
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectWeakAssign();

    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + v2) = v3;
  }
  swift_retain();
  return v3;
}

uint64_t *GestureRepresentableChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t Value;
  char v48;
  char v49;
  int *v50;
  char v51;
  char v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t OutputValue;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t, __n128);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *result;
  void *v98;
  uint64_t *v99;
  id v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(uint64_t, char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t);
  char *v125;
  char *v126;
  char *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t AssociatedTypeWitness;
  char *v150;
  uint64_t v151;
  char v152;
  _BYTE v153[60];
  char v154[16];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _OWORD v159[2];
  _BYTE v160[28];
  uint64_t v161;

  v5 = v4;
  v161 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for ConcreteRecognizer(0, v7, v8, a4);
  v129 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v128 = (uint64_t *)((char *)&v123 - v11);
  v144 = type metadata accessor for UIGestureRecognizerRepresentableContext(0, v7, v8, v12);
  v139 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144, v13);
  v126 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v148 = (uint64_t)&v123 - v17;
  v138 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v132 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v127 = (char *)&v123 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v134 = (char *)&v123 - v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v146 = type metadata accessor for Optional();
  v143 = *(_QWORD *)(v146 - 8);
  MEMORY[0x1E0C80A78](v146, v27);
  v131 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v136 = (char *)&v123 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v133 = (char *)&v123 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v123 - v37;
  v39 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v40, v41);
  v125 = (char *)&v123 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)&v123 - v45;
  Value = AGGraphGetValue();
  v49 = v48;
  v137 = v39;
  v124 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v124(v46, Value, v7);
  v50 = (int *)AGGraphGetValue();
  v52 = v51;
  v53 = *v50;
  v155 = v7;
  v156 = v8;
  v151 = v8;
  v157 = v5;
  v158 = v53;
  v150 = v46;
  v140 = v7;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v46, (uint64_t)partial apply for closure #1 in GestureRepresentableChild.updateValue(), (uint64_t)v154, v7, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEDD18], v54);
  v147 = 0;
  v130 = v9;
  if ((v152 & 1) != 0)
  {
    v55 = 1;
LABEL_3:
    v56 = AssociatedTypeWitness;
    v57 = v143;
    goto LABEL_8;
  }
  OutputValue = AGGraphGetOutputValue();
  v55 = 1;
  if (!OutputValue)
    goto LABEL_3;
  v56 = AssociatedTypeWitness;
  v57 = v143;
  if ((v49 & 1) == 0 && (v52 & 1) == 0)
    v55 = AGGraphCurrentAttributeWasModified();
LABEL_8:
  v152 = v55;
  v153[0] = *(_DWORD *)(v5 + *(int *)(a1 + 76)) == *MEMORY[0x1E0CFED28];
  GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
  v59 = *(_DWORD *)&v153[48];
  v142 = *(_OWORD *)v153;
  v141 = *(_OWORD *)&v153[16];
  v135 = *(_OWORD *)&v153[32];
  v145 = GestureRepresentableChild.recognizerBox.getter(a1);
  *(_QWORD *)v153 = v145;
  *(_OWORD *)&v153[8] = v142;
  *(_OWORD *)&v153[24] = v141;
  *(_OWORD *)&v153[40] = v135;
  *(_DWORD *)&v153[56] = v59;
  v60 = (char *)(v5 + *(int *)(a1 + 44));
  v61 = v146;
  *(_QWORD *)&v142 = *(_QWORD *)(v57 + 16);
  ((void (*)(char *, char *, uint64_t))v142)(v38, v60, v146);
  v62 = *(_QWORD *)(v56 - 8);
  *(_QWORD *)&v141 = *(_QWORD *)(v62 + 48);
  v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v141)(v38, 1, v56);
  v64 = v38;
  v65 = v61;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v61);
  if (v63 == 1)
  {
    v66 = v138;
    v67 = v134;
    v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v134, v5, a1);
    v70 = MEMORY[0x1E0C80A78](v68, v69);
    v71 = v151;
    *(&v123 - 4) = v140;
    *(&v123 - 3) = v71;
    *(&v123 - 2) = (uint64_t)v150;
    *(&v123 - 1) = (uint64_t)v153;
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureRepresentableChild<A>, a1, v70);
    v72 = v133;
    v73 = v147;
    StatefulRule.withObservation<A>(do:)();
    v147 = v73;
    v65 = v146;
    v74 = *(void (**)(char *, uint64_t))(v66 + 8);
    v56 = AssociatedTypeWitness;
    v74(v67, a1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v72, 0, 1, v56);
    v75 = v72;
    v76 = v151;
    (*(void (**)(char *, char *, uint64_t))(v143 + 40))(v60, v75, v65);
    v77 = v144;
  }
  else
  {
    v77 = v144;
    v76 = v151;
  }
  v78 = (uint64_t)v136;
  ((void (*)(char *, char *, uint64_t))v142)(v136, v60, v65);
  v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v141)(v78, 1, v56);
  v80 = v148;
  if (v79 == 1)
    __break(1u);
  v159[0] = *(_OWORD *)v153;
  v159[1] = *(_OWORD *)&v153[16];
  *(_OWORD *)v160 = *(_OWORD *)&v153[32];
  *(_OWORD *)&v160[12] = *(_OWORD *)&v153[44];
  v81 = v140;
  v82 = UIGestureRecognizerRepresentableContext.init(coordinator:converter:)(v78, (uint64_t *)v159, v140, v76, v148);
  v83 = *(int *)(a1 + 52);
  if (*(_QWORD *)(v5 + v83))
  {
    swift_retain();
  }
  else
  {
    v136 = v60;
    v84 = v138;
    v85 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v138 + 16);
    v143 = v83;
    v86 = v127;
    v87 = v85(v127, v5, a1, v82);
    MEMORY[0x1E0C80A78](v87, v76);
    *(&v123 - 4) = v81;
    *(&v123 - 3) = v88;
    *(&v123 - 2) = (uint64_t)v150;
    *(&v123 - 1) = v80;
    swift_getAssociatedTypeWitness();
    swift_retain();
    MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureRepresentableChild<A>, a1);
    v89 = v147;
    StatefulRule.withObservation<A>(do:)();
    v147 = v89;
    v90 = *(void (**)(char *, uint64_t))(v84 + 8);
    v77 = v144;
    v91 = v86;
    v83 = v143;
    v90(v91, a1);
    v92 = *(_QWORD *)&v159[0];

    *(_QWORD *)(v5 + v83) = v92;
    GestureRepresentableChild.recognizerBox.getter(a1);
    swift_unknownObjectWeakAssign();
    swift_release();
    v94 = *(int *)(a1 + 48);
    if (!*(_QWORD *)(v5 + v94))
    {
      type metadata accessor for DefaultGestureRecognizerRepresentableCoordinator(0, v81, v151, v93);
      v95 = (uint64_t)v125;
      v124(v125, (uint64_t)v150, v81);
      v96 = (uint64_t)v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v126, v148, v77);
      swift_allocObject();
      result = DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(v95, v96);
      v98 = *(void **)(v5 + v83);
      if (!v98)
        goto LABEL_29;
      v99 = result;
      v100 = v98;
      objc_msgSend(v100, sel_addTarget_action_, v99, sel_dispatchWithTarget_);

      *(_QWORD *)(v5 + v94) = v99;
    }
    v80 = v148;
    v76 = v151;
    v60 = v136;
  }
  if (v152 != 1)
  {
    swift_release();
    v122 = v150;
    goto LABEL_25;
  }
  v143 = v83;
  v136 = v60;
  v101 = *(_QWORD *)(v5 + *(int *)(a1 + 48));
  v102 = v150;
  if (v101)
  {
    v103 = v101 + *(_QWORD *)(*(_QWORD *)v101 + 96);
    swift_beginAccess();
    v104 = *(void (**)(uint64_t, char *, uint64_t))(v137 + 24);
    swift_retain();
    v104(v103, v102, v81);
    swift_endAccess();
    v105 = v101 + *(_QWORD *)(*(_QWORD *)v101 + 104);
    swift_beginAccess();
    v80 = v148;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 24))(v105, v148, v77);
    swift_endAccess();
    swift_release();
  }
  v106 = v138;
  v107 = v132;
  v108 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v132, v5, a1);
  v110 = MEMORY[0x1E0C80A78](v108, v109);
  *(&v123 - 6) = v81;
  *(&v123 - 5) = v76;
  *(&v123 - 4) = v111;
  *(&v123 - 3) = v5;
  *(&v123 - 2) = v80;
  v112 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GestureRepresentableChild<A>, a1, v110);
  v113 = MEMORY[0x1E0DEE9C0];
  StatefulRule.withObservation<A>(do:)();
  result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v107, a1);
  v114 = *(void **)(v5 + v143);
  if (v114)
  {
    v115 = (uint64_t)v131;
    ((void (*)(char *, char *, uint64_t))v142)(v131, v136, v146);
    result = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v141)(v115, 1, AssociatedTypeWitness);
    if ((_DWORD)result != 1)
    {
      v116 = v128;
      v117 = ConcreteRecognizer.init(recognizer:coordinator:)((uint64_t)v114, v115, v81, v151, v128);
      MEMORY[0x1E0C80A78](v117, v118);
      *(&v123 - 2) = a1;
      *(&v123 - 1) = v112;
      v119 = v114;
      v120 = v130;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v116, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v123 - 4), v130, MEMORY[0x1E0DEDCE8], v113 + 8, MEMORY[0x1E0DEDD18], v121);
      swift_release();
      (*(void (**)(_QWORD *, uint64_t))(v129 + 8))(v116, v120);
      v80 = v148;
      v122 = v150;
      v77 = v144;
LABEL_25:
      (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v80, v77);
      return (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v122, v81);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #2 in GestureRepresentableChild.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  _OWORD v13[2];

  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = a2[1];
  v12[0] = *a2;
  v12[1] = v10;
  v13[0] = a2[2];
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)a2 + 44);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(a4 + 32))(v12, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a3);
}

uint64_t closure #3 in GestureRepresentableChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(a2, a3, a4);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  *a5 = v12;
  return result;
}

uint64_t closure #4 in GestureRepresentableChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  void *v14;
  void (*v15)(void);
  id v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v11, v9);
  result = type metadata accessor for GestureRepresentableChild(0, a4, a5, v12);
  v14 = *(void **)(a2 + *(int *)(result + 52));
  if (v14)
  {
    v15 = *(void (**)(void))(a5 + 48);
    v16 = v14;
    v15();

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConcreteRecognizer.init(recognizer:coordinator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  uint64_t AssociatedTypeWitness;

  *a5 = a1;
  v6 = (char *)a5 + *(int *)(type metadata accessor for ConcreteRecognizer(0, a3, a4, a4) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v6, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GestureRepresentableChild<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ConcreteRecognizer(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a3, 1, 1, v4);
}

uint64_t RepresentableGestureResponderFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  int CurrentAttribute;
  int v15;
  id v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v5 = v4;
  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(v4 + 96);
  if (!v6)
  {
    type metadata accessor for RepresentableGestureResponder(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
    v7 = *(_DWORD *)v4;
    v8 = *(_DWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    v11 = *(_QWORD *)(v5 + 48);
    v10 = *(_QWORD *)(v5 + 56);
    v12 = *(_DWORD *)(v5 + 88);
    v13 = *(void **)(v5 + 104);
    v20 = *(_QWORD *)(v5 + 8);
    v21 = v8;
    v22 = v9;
    v23 = *(_OWORD *)(v5 + 32);
    v24 = v11;
    v25 = v10;
    v26 = *(_OWORD *)(v5 + 64);
    v27 = *(_QWORD *)(v5 + 80);
    v28 = v12;
    CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == *MEMORY[0x1E0CFED28])
      __break(1u);
    v15 = CurrentAttribute;
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v13;
    v6 = RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(v7, (uint64_t)&v20, v15);
    *(_QWORD *)(v5 + 96) = v6;
  }
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v19 + 32) = v6;
    v20 = v19;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RepresentableGestureResponder.__allocating_init(representable:inputs:context:viewSubgraph:)(int a1, uint64_t a2, int a3)
{
  swift_allocObject();
  return RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(a1, a2, a3);
}

uint64_t RepresentableGestureResponder.recognizerSource.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (v4[28])
  {
    v5 = v4[28];
  }
  else
  {
    type metadata accessor for ConcreteRecognizer(0, *(_QWORD *)(*v4 + class metadata base offset for RepresentableGestureResponder), *(_QWORD *)(*v4 + class metadata base offset for RepresentableGestureResponder + 8), a4);
    v6 = *(void **)AGGraphGetInputValue();
    type metadata accessor for EventBindingSourceAdaptor();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v6;
    v4[28] = v5;
    v7 = v6;
    swift_retain();
  }
  swift_retain();
  return v5;
}

uint64_t RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(int a1, uint64_t a2, int a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_DWORD *)(v3 + 208) = a1;
  *(_DWORD *)(v3 + 212) = a3;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t RepresentableGestureResponder.isValid.getter()
{
  uint64_t v0;
  id v1;
  uint64_t IsValid;

  if (!*(_QWORD *)(v0 + 216))
    return 0;
  v1 = (id)AGGraphGetAttributeSubgraph();
  IsValid = AGSubgraphIsValid();

  return IsValid;
}

uint64_t RepresentableGestureResponder.gestureContainer.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  int IsValid;
  uint64_t v5;
  uint64_t result;

  if (v0[27])
    return swift_unknownObjectRetain();
  v1 = v0;
  v2 = *v0;
  v3 = (void *)DefaultLayoutViewResponder.viewSubgraph.getter();
  IsValid = AGSubgraphIsValid();

  if (!IsValid)
    return 0;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for RepresentableGestureResponder<A>, v2);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = _ViewInputs.makeGestureContainer(responder:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v1[27] = v5;
  swift_unknownObjectRelease();
  result = v1[27];
  if (result)
    return swift_unknownObjectRetain();
  __break(1u);
  return result;
}

uint64_t RepresentableGestureResponder.eventSources.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>, (uint64_t (*)(uint64_t))type metadata accessor for EventBindingSource, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_187BF9830;
  v4 = RepresentableGestureResponder.recognizerSource.getter(v0, v1, v2, v3);
  v5 = lazy protocol witness table accessor for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor();
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = v5;
  return v0;
}

uint64_t RepresentableGestureResponder.detachContainer()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = 0;
  return swift_unknownObjectRelease();
}

void RepresentableGestureResponder.__allocating_init(inputs:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void RepresentableGestureResponder.__allocating_init(inputs:viewSubgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t RepresentableGestureResponder.__ivar_destroyer()
{
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t RepresentableGestureResponder.deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t RepresentableGestureResponder.__deallocating_deinit()
{
  RepresentableGestureResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RepresentableGestureResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepresentableGestureResponder);
}

uint64_t protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance RepresentableGestureResponder<A>(uint64_t a1)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(_QWORD *)(a1
                                                                                        + class metadata base offset for RepresentableGestureResponder));
}

uint64_t EventBindingSourceAdaptor.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  if (result != a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  v9 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(a2 - 8);
  if (*(_QWORD *)(v8 + 64) == 8)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v8 + 16))(a3, &v9, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a3, 0, 1, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for EventBindingSourceAdaptor()
{
  return objc_opt_self();
}

uint64_t sub_187AAD7B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for GestureRecognizerModifier(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for GestureRecognizerModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata completion function for ConcreteRecognizer()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for ConcreteRecognizer(void **a1, void **a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  char *v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = (char *)a1 + v6;
    v14 = (char *)a2 + v6;
    v15 = (unint64_t)(v13 + 8) & v12;
    v16 = (unint64_t)(v14 + 8) & v12;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v18 = v9;
    v17(v15, v16, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for ConcreteRecognizer(id *a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

void **initializeWithCopy for ConcreteRecognizer(void **a1, void **a2)
{
  void *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;

  v4 = *a2;
  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8, v9, AssociatedTypeWitness);
  return a1;
}

void **assignWithCopy for ConcreteRecognizer(void **a1, void **a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  v6 = v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *initializeWithTake for ConcreteRecognizer(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

void **assignWithTake for ConcreteRecognizer(void **a1, void **a2)
{
  void *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcreteRecognizer(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(_WORD *)((char *)a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return v6 + v13 + 1;
}

void storeEnumTagSinglePayload for ConcreteRecognizer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for ConcreteRecognizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConcreteRecognizer);
}

uint64_t getEnumTagSinglePayload for GestureRecognizerModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AAE040 + 4 * byte_187C87E9E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for GestureRecognizerModifier(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

_UNKNOWN **base witness table accessor for ViewModifier in GestureRecognizerModifier<A>()
{
  return &protocol witness table for GestureRecognizerModifier<A>;
}

unint64_t lazy protocol witness table accessor for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor;
  if (!lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor)
  {
    v1 = type metadata accessor for EventBindingSourceAdaptor();
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for EventBindingSourceAdaptor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor);
  }
  return result;
}

uint64_t type metadata accessor for GestureRepresentableChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GestureRepresentableChild);
}

uint64_t partial apply for closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t type metadata accessor for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RepresentableGestureResponderFilter);
}

void destroy for RepresentableGestureResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t initializeWithCopy for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  v4 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 104);
  v5 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  v6 = v4;

  return a1;
}

uint64_t assignWithTake for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  swift_release();
  v4 = *(void **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);

  return a1;
}

uint64_t type metadata completion function for GestureRepresentableChild()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  id v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  v10 = v7 <= 7 && v9 == 0;
  if (v10
    && (v11 = v8 + 7,
        ((((((((((((v8 + 7 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 11) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8 | 4) <= 0x18))
  {
    v12 = AssociatedTypeWitness;
    *a1 = *a2;
    v13 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v13 = *v14;
    v15 = (_OWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8);
    v16 = (_OWORD *)(((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v15 = *v16;
    v17 = (void *)(((unint64_t)v15 + v7 + 16) & ~v7);
    v18 = (const void *)(((unint64_t)v16 + v7 + 16) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v18, 1, AssociatedTypeWitness))
    {
      memcpy(v17, v18, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v17, v18, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v12);
    }
    v20 = (_QWORD *)(((unint64_t)v17 + v11) & 0xFFFFFFFFFFFFF8);
    v21 = (_QWORD *)(((unint64_t)v18 + v11) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = (_QWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    v23 = (void **)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    v24 = *v23;
    *v22 = *v23;
    v25 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v27[1] = v28[1];
    v29 = (_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v29[1] = v30[1];
    *(_DWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    v31 = v24;
  }
  else
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (_DWORD *)(v19 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for GestureRepresentableChild(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v5;
  v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();

  return swift_release();
}

_DWORD *initializeWithCopy for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  id v27;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_OWORD *)(((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 16) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (void **)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = *v19;
  *v18 = *v19;
  v21 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = (_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8);
  v25 = (unint64_t)v24 + 11;
  *v23 = *v24;
  v23[1] = v24[1];
  v26 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  v26[1] = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  v27 = v20;
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 16 + v5) & ~v9);
  v11 = (void *)((v9 + 16 + v6) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, AssociatedTypeWitness);
  v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = (uint64_t)v10 + v16 + 7;
  v18 = (uint64_t)v11 + v16 + 7;
  v19 = (v18 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v21 = v20 & 0xFFFFFFFFFFFFFFF8;
  v19 &= 0xFFFFFFFFFFFFF8uLL;
  v22 = *(void **)v19;
  v23 = *(void **)(v20 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v21 = *(_QWORD *)v19;
  v21 += 15;
  v24 = v22;

  v25 = (v19 + 15) & 0xFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v25 += 11;
  *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) = v26;
  v27 = (v21 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v27 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 4);
  v28 = (_DWORD *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_DWORD *)(((v27 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v28;
  v29[1] = v28[1];
  *(_DWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_OWORD *)(((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v5 + v9 + 16) & ~v9);
  v11 = (const void *)(((unint64_t)v6 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
    if (v12)
      v14 = v13;
    else
      v14 = v13 + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
    v12 = *(_DWORD *)(v8 + 84);
    v13 = *(_QWORD *)(v8 + 64);
  }
  if (v12)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (_QWORD *)(((unint64_t)v10 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_DWORD *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8);
  v24 = (unint64_t)v23 + 11;
  *v22 = *v23;
  v22[1] = v23[1];
  v25 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
  v25[1] = *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((v24 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  void **v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = ((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v9 + 16 + v5) & ~v9);
  v11 = (void *)((v9 + 16 + v6) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v12(v10, 1, AssociatedTypeWitness);
  v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v8 + 84))
    v15 = *(_QWORD *)(v8 + 64);
  else
    v15 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v10, v11, v15);
LABEL_10:
  if (*(_DWORD *)(v8 + 84))
    v16 = *(_QWORD *)(v8 + 64);
  else
    v16 = *(_QWORD *)(v8 + 64) + 1;
  v17 = (uint64_t)v10 + v16 + 7;
  v18 = (_QWORD *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v18;
  v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v19 &= 0xFFFFFFFFFFFFFFF8;
  v20 = (void **)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = *(void **)v19;
  *(_QWORD *)v19 = *v20;

  v22 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)v23;
  v23 += 11;
  *(_QWORD *)v22 = v24;
  v22 += 11;
  swift_release();
  *(_DWORD *)(v22 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 4);
  v25 = (_DWORD *)(((v23 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_DWORD *)(((v22 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v25;
  v26[1] = v25[1];
  *(_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureRepresentableChild(_DWORD *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2
    && *((_BYTE *)a1
       + ((((((((((((v10 + ((v9 + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 11) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  v12 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v14 = *(_QWORD *)((v10 + v12) & 0xFFFFFFFFFFFFF8);
    if (v14 >= 0xFFFFFFFF)
      LODWORD(v14) = -1;
    if ((v14 + 1) >= 2)
      return v14;
    else
      return 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v12);
    if (v13 >= 2)
      return v13 - 1;
    else
      return 0;
  }
}

void storeEnumTagSinglePayload for GestureRepresentableChild(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  void *v14;
  int v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 1;
  if (!v7)
    v8 = 0;
  if (v8 <= 0x7FFFFFFE)
    v9 = 2147483646;
  else
    v9 = v8;
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 24) & ~v10;
  if (v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  v13 = (((((((((((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8)
       + 11) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v9 >= a2)
  {
    if (v9 < a3)
      *((_BYTE *)a1 + v13) = 0;
    if (a2)
    {
      v14 = (void *)(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10);
      if (v8 < 0x7FFFFFFE)
      {
        v16 = (_QWORD *)(((unint64_t)v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *v16 = 0;
          *(_DWORD *)v16 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *v16 = a2;
        }
      }
      else if (v8 >= a2)
      {
        (*(void (**)(void *, _QWORD))(v6 + 56))(v14, a2 + 1);
      }
      else if ((_DWORD)v12)
      {
        if (v12 <= 3)
          v15 = v12;
        else
          v15 = 4;
        bzero(v14, v12);
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    bzero(a1, (((((((((((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8 | 4);
    *a1 = ~v9 + a2;
    if (v9 < a3)
      *((_BYTE *)a1 + v13) = 1;
  }
}

void sub_187AAF3B8()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x187AAF3A4);
}

void sub_187AAF3C0()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x187AAF3A4);
}

void sub_187AAF3D0()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x187AAF3A4);
}

void base witness table accessor for _AttributeBody in RepresentableGestureResponderFilter<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in GestureRepresentableChild<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t partial apply for closure #1 in GestureRepresentableChild.updateValue()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #2 in GestureRepresentableChild.updateValue()()
{
  uint64_t v0;

  return closure #2 in GestureRepresentableChild.updateValue()(*(_QWORD *)(v0 + 32), *(_OWORD **)(v0 + 40), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #3 in GestureRepresentableChild.updateValue()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return closure #3 in GestureRepresentableChild.updateValue()(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #4 in GestureRepresentableChild.updateValue()()
{
  uint64_t *v0;

  return closure #4 in GestureRepresentableChild.updateValue()(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t dispatch thunk of static ContainerValueKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata accessor for ContainerValueViewTraitKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContainerValueViewTraitKey);
}

uint64_t static ContainerValueViewTraitKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ContainerValueViewTraitKey<A>(uint64_t a1)
{
  return static ContainerValueViewTraitKey.defaultValue.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void __swiftcall _MenuButtonStyleConfiguration.init()()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _MenuButtonStyleConfiguration.label.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _MenuButtonStyleConfiguration.label.setter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _MenuButtonStyleConfiguration.label.modify()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void _MenuButtonStyleConfiguration.content.getter()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.menuButtonStyle<A>(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

unint64_t instantiation function for generic protocol witness table for _MenuButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _MenuButtonStyleConfiguration.Label()
{
  return &protocol witness table for _MenuButtonStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for _MenuButtonStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _MenuButtonStyleConfiguration.Content()
{
  return &protocol witness table for _MenuButtonStyleConfiguration.Content;
}

uint64_t dispatch thunk of MenuButtonStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration()
{
  return &type metadata for _MenuButtonStyleConfiguration;
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration.Label()
{
  return &type metadata for _MenuButtonStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration.Content()
{
  return &type metadata for _MenuButtonStyleConfiguration.Content;
}

uint64_t sub_187AAF67C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = a1[2];
  type metadata accessor for MenuButtonStyleWriter(255, a1[1], a1[3], a4);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = &protocol witness table for MenuButtonStyleWriter<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t type metadata accessor for MenuButtonStyleWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MenuButtonStyleWriter);
}

uint64_t getEnumTagSinglePayload for MenuButtonStyleWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AAF798 + 4 * byte_187C884A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for MenuButtonStyleWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for ResolvedMenuButton()
{
  return &type metadata for ResolvedMenuButton;
}

_UNKNOWN **base witness table accessor for View in ResolvedMenuButton()
{
  return &protocol witness table for ResolvedMenuButton;
}

_UNKNOWN **base witness table accessor for ViewModifier in MenuButtonStyleWriter<A>()
{
  return &protocol witness table for MenuButtonStyleWriter<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MenuButtonStyleWriter<A>()
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MenuButtonStyleWriter<A>()
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance MenuButtonStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void protocol witness for View.body.getter in conformance ResolvedMenuButton()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void _MenuButtonStyleConfiguration.content.setter()
{
  _MenuButtonStyleConfiguration.label.setter();
}

BOOL static NavigationSplitViewColumn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static NavigationSplitViewColumn.sidebar.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static NavigationSplitViewColumn.detail.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static NavigationSplitViewColumn.content.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void NavigationSplitViewColumn.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NavigationSplitViewColumn.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewColumn, &type metadata for NavigationSplitViewColumn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewColumn(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187AAFB5C + 4 * byte_187C88695[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187AAFB90 + 4 * byte_187C88690[v4]))();
}

uint64_t sub_187AAFB90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AAFB98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187AAFBA0);
  return result;
}

uint64_t sub_187AAFBAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187AAFBB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187AAFBB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AAFBC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for NavigationSplitViewColumn.Tag, &type metadata for NavigationSplitViewColumn.Tag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag);
  }
  return result;
}

uint64_t TupleCommandContent.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25[4];
  uint64_t v26;
  int v27;

  v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for TupleCommandContent(255, *(_QWORD *)(a2 + 16), a3, a4);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v8 = *(_DWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 64);
  v19 = *(_QWORD *)(v4 + 8);
  v20 = v8;
  v21 = v9;
  v11 = *(_OWORD *)(v4 + 48);
  v22 = *(_OWORD *)(v4 + 32);
  v23 = v11;
  v24 = v10;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v26, v25, &v19, a3, a4);
  v12 = v26;
  v13 = v27;
  v14 = *(_QWORD *)(v4 + 80);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (char *)v14);
    v14 = result;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    v14 = result;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  v18 = v14 + 16 * v17;
  *(_QWORD *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(_QWORD *)(v5 + 80) = v14;
  return result;
}

uint64_t protocol witness for CommandsTypeVisitor.visit<A>(type:) in conformance TupleCommandContent<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleCommandContent.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void TupleCommandContent.body.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static TupleCommandContent._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t List;
  uint64_t v21;
  uint64_t Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  _QWORD v39[2];
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = a2[5];
  v11 = a2[6];
  v12 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v13 = v39[0];
  LODWORD(v39[0]) = v6;
  v14 = v13;
  v39[1] = v7;
  v40 = v8;
  v41 = v9;
  v42 = *(_OWORD *)(a2 + 3);
  v43 = v10;
  v44 = v11;
  v45 = v12;
  v46 = 0;
  v47 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = (__int128 *)(v14 + 40);
    do
    {
      v17 = *v16;
      v16 = (__int128 *)((char *)v16 + 24);
      v46 = AGTupleElementOffset();
      v38 = v17;
      List = type metadata accessor for TupleCommandContent.MakeList(0, a3, v18, v19);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v39, List, (uint64_t)&protocol witness table for TupleCommandContent<A>.MakeList);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v21 = swift_bridgeObjectRetain();
  Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28NavigationDestinationOutputsVG_AF011PreferencesH0Vs5NeverOTg503_s7d9UI26Tuplefg69V17_makeDestinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n(v21);
  swift_bridgeObjectRelease();
  PreferencesOutputs.init()();
  v35 = Destinations7content6inputs8resolvedyAA11_GraphValueVyACyxGG_q40_ViewInputsVAA01_dE10CollectionVztFZAA18iH61VAA0deQ0Vcfu_33_52f1b6677f90efccc4a0b5c00fa35ed1AsQTf3nnnpk_nTf1cn_n;
  v36 = v38;
  v37 = DWORD2(v38);
  v34 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    v23 = MEMORY[0x1E0CE6550];
    v24 = MEMORY[0x1E0CE6548];
    do
    {
      v25 = (void (*)(__int128 *, _QWORD))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v27 = *v26;
      v28 = v26[1];
      v25(&v38, 0);
      v29 = v34;
      *(_QWORD *)&v38 = v11;
      swift_bridgeObjectRetain();
      v30 = PreferenceKeys.endIndex.getter();
      if (v34 < 0 || v34 >= v30)
        __break(1u);
      ++v34;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 16))(&v35, v23, v24, v27, v28);
    }
    while (v29 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  v31 = v37;
  *(_QWORD *)a4 = v36;
  *(_DWORD *)(a4 + 8) = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for TupleCommandContent.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleCommandContent.MakeList);
}

uint64_t TupleCommandContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t TupleCommandContent._resolve(into:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TupleCommandContent.Visitor(0, v4, v8, v9);
  v28 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - v12;
  lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v14 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v15 = *((_QWORD *)a1 + 2);
  v16 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v29 = *a1;
  v16(v13, v7, v4);
  v17 = &v13[*(int *)(v10 + 28)];
  *(_OWORD *)v17 = v29;
  *((_QWORD *)v17 + 2) = v15;
  *(_QWORD *)&v13[*(int *)(v10 + 32)] = 0;
  v18 = *(_QWORD *)(v14 + 16);
  if (v18)
  {
    v19 = *(int *)(v10 + 32);
    v20 = (__int128 *)(v14 + 40);
    do
    {
      v21 = *v20;
      v20 = (__int128 *)((char *)v20 + 24);
      v29 = v21;
      *(_QWORD *)&v13[v19] = AGTupleElementOffset();
      v30 = v29;
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v13, v10, (uint64_t)&protocol witness table for TupleCommandContent<A>.Visitor);
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  v22 = &v13[*(int *)(v10 + 28)];
  v23 = *((_QWORD *)v22 + 1);
  v24 = *((_QWORD *)v22 + 2);
  *(_QWORD *)a1 = *(_QWORD *)v22;
  *((_QWORD *)a1 + 1) = v23;
  *((_QWORD *)a1 + 2) = v24;
  v25 = *(uint64_t (**)(char *, uint64_t))(v28 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v25(v13, v10);
}

uint64_t type metadata accessor for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleCommandContent.Visitor);
}

uint64_t TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *(_QWORD *)(a2 + 16);
  v12 = a3;
  v13 = a4;
  v14 = a1;
  return _ss15withUnsafeBytes2of_q0_xz_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in TupleCommandContent.Visitor.visit<A>(type:), (uint64_t)&v10, v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

void closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
  {
    v18 = type metadata accessor for TupleCommandContent.Visitor(0, v14, v12, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a1 + *(_QWORD *)(a3 + *(int *)(v18 + 32)), a6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 40))(a3 + *(int *)(v18 + 28), a6, a7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, a6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _ss15withUnsafeBytes2of_q0_xz_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t protocol witness for CommandsTypeVisitor.visit<A>(type:) in conformance TupleCommandContent<A>.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TupleCommandContent.Visitor.visit<A>(type:)(a1, a4, a2, a3, a5, a6, a7, a8);
}

void protocol witness for Commands.body.getter in conformance TupleCommandContent<A>()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TupleCommandContent<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleCommandContent._makeCommands(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t static Group<A>._makeCommands(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _BYTE v22[4];

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 2);
  v9 = a2[2];
  v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  v14 = *(_OWORD *)(a2 + 5);
  v11 = a2[3];
  v12 = a2[4];
  _GraphValue.subscript.getter();
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18 = v11;
  v19 = v12;
  v20 = v14;
  v21 = v10;
  return (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v22, &v15, a3, a4);
}

uint64_t Group<A>._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 40))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeCommands(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for Commands._resolve(into:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Group<A>._resolve(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t getEnumTagSinglePayload for TupleCommandContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AB07CC + 4 * byte_187C887A0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleCommandContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TupleCommandContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleCommandContent);
}

uint64_t type metadata completion function for TupleCommandContent.Visitor()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TupleCommandContent.Visitor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    v10[2] = v11[2];
    *(_QWORD *)(((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  v7[2] = v8[2];
  *(_QWORD *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)((v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v7[2] = v8[2];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleCommandContent.Visitor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187AB0E84 + 4 * byte_187C887AE[v10]))();
  }
}

void storeEnumTagSinglePayload for TupleCommandContent.Visitor(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187AB1004()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AB107CLL);
}

void sub_187AB100C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AB1014);
  JUMPOUT(0x187AB107CLL);
}

void sub_187AB1054()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AB107CLL);
}

void sub_187AB105C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AB107CLL);
}

uint64_t sub_187AB1064(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187AB107CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187AB1078);
    JUMPOUT(0x187AB1070);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

void partial apply for closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

double MenuSectionStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[2];

  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(unsigned __int8 *)(v3 + 16);
  v8 = static VerticalAlignment.center.getter();
  *(_QWORD *)&v27[0] = 0;
  *((_QWORD *)&v27[0] + 1) = 0xE000000000000000;
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0xE000000000000000;
  v23[0] = v8;
  v23[1] = 0;
  v24 = 1;
  v25 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  v26 = v9;
  v18[0] = 2;
  memset(&v18[1], 0, 24);
  v18[4] = 0xC000000000000000;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  outlined copy of Environment<ControlSize>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, &v17);
  outlined consume of Environment<ControlSize>.Content(v6, v7);
  LOBYTE(v8) = v17;
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  specialized View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(v18, 0, 0, 0, v8, (uint64_t)v23, a1, a2, (uint64_t)v27);
  swift_release();
  v10 = v33;
  v11 = v35[0];
  a3[8] = v34;
  a3[9] = v11;
  *(_OWORD *)((char *)a3 + 153) = *(_OWORD *)((char *)v35 + 9);
  v12 = v29;
  v13 = v31;
  a3[4] = v30;
  a3[5] = v13;
  a3[6] = v32;
  a3[7] = v10;
  v14 = v27[1];
  *a3 = v27[0];
  a3[1] = v14;
  result = *(double *)&v28;
  a3[2] = v28;
  a3[3] = v12;
  return result;
}

uint64_t EnvironmentValues.menuSectionsControlSize.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.menuSectionsControlSize.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuSectionsControlSize(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.menuSectionsControlSize : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuSectionsControlSize : EnvironmentValues()
{
  return EnvironmentValues.menuSectionsControlSize.setter();
}

uint64_t sub_187AB1618()
{
  return EnvironmentValues.menuSectionsControlSize.setter();
}

uint64_t sub_187AB164C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<ControlSize>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ControlSize>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ControlSize>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.MenuSectionsControlSize()
{
  return &type metadata for EnvironmentValues.MenuSectionsControlSize;
}

uint64_t assignWithCopy for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  outlined copy of Environment<ControlSize>.Content(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of Environment<ControlSize>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of Environment<ControlSize>.Content(v4, v5);
  return a1;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in MenuSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187AB1864()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
  }
}

void type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for HStack<SectionStyleConfiguration.Header>, (uint64_t)&type metadata for SectionStyleConfiguration.Header, (uint64_t)&protocol witness table for SectionStyleConfiguration.Header, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

uint64_t type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>;
  if (!lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
    type metadata accessor for PlatformItemListGeneratingViewModifier();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E0CE7C38], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    type metadata accessor for SectionStyleModifier<MenuSectionStyle>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
  }
}

void type metadata accessor for SectionStyleModifier<MenuSectionStyle>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>)
  {
    v2 = lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle();
    v4 = type metadata accessor for SectionStyleModifier(a1, (uint64_t)&type metadata for MenuSectionStyle, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>);
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Rectangle, Color>, _MaskEffect<Image>>, _BlendModeEffect>, _FlexFrameLayout>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    v3[1] = &protocol witness table for SectionStyleModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, (uint64_t (*)(void))lazy protocol witness table accessor for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>);
    v3[1] = &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    v7[0] = a3();
    v7[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, (unint64_t *)&lazy cache variable for type metadata for HStack<SectionStyleConfiguration.Header>, (uint64_t)&type metadata for SectionStyleConfiguration.Header, (uint64_t)&protocol witness table for SectionStyleConfiguration.Header, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE73C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE73D0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>);
  }
  return result;
}

void static PresentationKind.sheet.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentValues.presentationKind.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.presentationKind : EnvironmentValues@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.presentationKind : EnvironmentValues()
{
  return EnvironmentValues.presentationKind.setter();
}

uint64_t EnvironmentValues.presentationKind.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static PresentationKind.popover.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static PresentationKind.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static PresentationKind.fullScreenCover.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static PresentationKind.blurOverFullScreen.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

BOOL static PresentationKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PresentationKind.description.getter()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationKind()
{
  return String.init<A>(describing:)();
}

uint64_t sub_187AB224C()
{
  return EnvironmentValues.presentationKind.setter();
}

ValueMetadata *type metadata accessor for PresentationKind()
{
  return &type metadata for PresentationKind;
}

uint64_t storeEnumTagSinglePayload for PresentationKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_187AB22E0 + 4 * byte_187C88975[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_187AB2314 + 4 * byte_187C88970[v4]))();
}

uint64_t sub_187AB2314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AB231C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187AB2324);
  return result;
}

uint64_t sub_187AB2330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187AB2338);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_187AB233C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AB2344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PresentationKind.Tag()
{
  return &type metadata for PresentationKind.Tag;
}

ValueMetadata *type metadata accessor for PresentationKind.Key()
{
  return &type metadata for PresentationKind.Key;
}

unint64_t lazy protocol witness table accessor for type PresentationKind.Tag and conformance PresentationKind.Tag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag;
  if (!lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PresentationKind.Tag, &type metadata for PresentationKind.Tag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag);
  }
  return result;
}

_QWORD *PasteButton.init(supportedContentTypes:payloadAction:)@<X0>(_BOOL8 a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BOOL8 *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  type metadata accessor for PasteboardEventObserver();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  result = PasteboardEventObserver.init(_:)(a1, (uint64_t)partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:), v8);
  *a4 = a1;
  a4[1] = (_BOOL8)partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:);
  a4[2] = v8;
  a4[3] = 0;
  a4[4] = (_BOOL8)result;
  return result;
}

uint64_t sub_187AB2458()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(uint64_t a1))()
{
  uint64_t v1;

  return closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for PasteboardEventObserver()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PasteboardEventObserver;
  if (!type metadata singleton initialization cache for PasteboardEventObserver)
    return swift_getSingletonMetadata();
  return result;
}

void PasteButton.init<A>(supportedContentTypes:validator:payloadAction:)()
{
  PasteButton.init<A>(supportedContentTypes:validator:payloadAction:)();
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t PasteButton.init<A>(payloadType:onPaste:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t result;

  swift_retain();
  v10 = PasteHelper.init<A>(onPaste:)(a1, a2, a3, a4);
  v12 = v11;
  v14 = v13;
  type metadata accessor for PasteboardEventObserver();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  v15 = PasteboardEventObserver.init(_:)(v10, v12, v14);
  result = swift_release();
  *a5 = v10;
  a5[1] = v12;
  a5[2] = v14;
  a5[3] = 0;
  a5[4] = (uint64_t)v15;
  return result;
}

uint64_t PasteButton.pasteButton.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  void (*(**v11)())(void);
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _BYTE v27[16];
  __int128 v28;
  _BYTE v29[24];
  __int128 v30;

  type metadata accessor for Button<Label<Text, Image>>(0);
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = v1[1];
  v28 = *v1;
  *(_OWORD *)v29 = v8;
  *(_QWORD *)&v29[16] = *((_QWORD *)v1 + 4);
  v9 = swift_allocObject();
  v10 = v1[1];
  *(_OWORD *)(v9 + 16) = *v1;
  *(_OWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 48) = *((_QWORD *)v1 + 4);
  *v7 = 256;
  v11 = (void (*(**)())(void))((char *)v7 + *(int *)(v4 + 36));
  *v11 = partial apply for closure #1 in PasteButton.pasteButton.getter;
  v11[1] = (void (*(*)())(void))v9;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v12 = (char *)v7 + *(int *)(v4 + 40);
  outlined retain of PasteButton((uint64_t)&v28);
  v13 = static Text.System.paste.getter();
  v15 = v14;
  v17 = v16;
  v19 = v18;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0xD000000000000010;
  *(_QWORD *)(v20 + 24) = 0x8000000187BF0130;
  *(_DWORD *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 36) = 1;
  *(_OWORD *)(v20 + 40) = xmmword_187BF9F90;
  *(_QWORD *)(v20 + 56) = 0xD000000000000010;
  *(_QWORD *)(v20 + 64) = 0x8000000187BF0130;
  *(_OWORD *)(v20 + 72) = xmmword_187BF9FB0;
  *(_BYTE *)(v20 + 88) = 0;
  *(_QWORD *)v12 = v13;
  *((_QWORD *)v12 + 1) = v15;
  v12[16] = v17 & 1;
  *((_QWORD *)v12 + 3) = v19;
  *((_QWORD *)v12 + 4) = v20;
  v30 = *(_OWORD *)&v29[8];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of AnyDynamicChild<A, B>((uint64_t)&v30);
  v21 = v27[15];
  KeyPath = swift_getKeyPath();
  v23 = swift_allocObject();
  *(_BYTE *)(v23 + 16) = (v21 & 1) == 0;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v7, a1, (uint64_t (*)(_QWORD))type metadata accessor for Button<Label<Text, Image>>);
  type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
  v25 = (uint64_t *)(a1 + *(int *)(v24 + 36));
  *v25 = KeyPath;
  v25[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v25[2] = v23;
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Button<Label<Text, Image>>);
}

void (*closure #1 in PasteButton.pasteButton.getter(uint64_t *a1))(void)
{
  void (*result)(void);
  uint64_t v2;

  result = (void (*)(void))PasteHelper.validatedPasteHandler.getter(*a1, a1[1], a1[2]);
  if (result)
  {
    v2 = (uint64_t)result;
    result();
    return (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  }
  return result;
}

uint64_t PasteButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)(uint64_t);
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[6];

  type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v28[0] = v1[1];
  v28[1] = v12;
  v14 = v1[2];
  v13 = v1[3];
  v15 = v1[4];
  v28[2] = v28[0];
  v28[3] = v14;
  v28[4] = v13;
  v28[5] = v15;
  PasteButton.pasteButton.getter((uint64_t)v6);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v6, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
  v20 = (uint64_t (**)(uint64_t))&v11[*(int *)(v8 + 36)];
  *v20 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  v20[1] = (uint64_t (*)(uint64_t))v19;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
  outlined init with take of ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>((uint64_t)v11, a1);
  v21 = a1
      + *(int *)(type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>()
               + 52);
  KeyPath = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  v25 = swift_getKeyPath();
  *(_QWORD *)v21 = KeyPath;
  *(_BYTE *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = v23;
  *(_WORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = v24;
  *(_BYTE *)(v21 + 40) = 0;
  *(_QWORD *)(v21 + 48) = v25;
  *(_BYTE *)(v21 + 56) = 0;
  v26 = v28[0];
  *(_QWORD *)(v21 + 64) = v12;
  *(_QWORD *)(v21 + 72) = v26;
  *(_QWORD *)(v21 + 80) = v14;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PasteButton()
{
  return specialized static View._viewListCount(inputs:)();
}

void PasteButton.init(supportedTypes:payloadAction:)()
{
  swift_bridgeObjectRelease();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PasteButton.init<A>(supportedTypes:validator:payloadAction:)()
{
  PasteButton.init<A>(supportedContentTypes:validator:payloadAction:)();
}

uint64_t PasteboardEventObserver.canPaste.getter()
{
  unsigned __int8 v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

_QWORD *PasteboardEventObserver.init(_:)(_BOOL8 a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  id v14;
  uint64_t v15;
  _BYTE v17[16];
  Swift::OpaquePointer_optional v18;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = &v17[-v11];
  v13 = (char *)v3 + OBJC_IVAR____TtC7SwiftUIP33_B62A21EA259929D05882C7658D395AEF23PasteboardEventObserver__canPaste;
  v17[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 32))(v13, v12, v8);
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v18.value._rawValue = 0;
  v18.is_nil = a1;
  LOBYTE(a2) = PasteHelper.canPaste(_:)(v18);
  swift_getKeyPath();
  swift_getKeyPath();
  v17[14] = a2 & 1;
  swift_retain();
  static Published.subscript.setter();
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v15 = one-time initialization token for uiPasteboardChangedSyncNotification;
  swift_retain();
  if (v15 != -1)
    swift_once();
  objc_msgSend(v14, sel_addObserver_selector_name_object_, v3, sel_invalidateEnabledState, static NSNotificationName.uiPasteboardChangedSyncNotification, 0);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE63C0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
  }
}

uint64_t sub_187AB2D4C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>;
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E0CE3238], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE6388]);
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    type metadata accessor for StaticIf();
  }
  return result;
}

uint64_t sub_187AB2E58()
{
  return EnvironmentValues.effectiveLabelStyle.setter();
}

uint64_t associated type witness table accessor for View.Body : View in PasteButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeWithCopy for PasteButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for PasteButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PasteButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PasteButton()
{
  return &type metadata for PasteButton;
}

uint64_t PasteboardEventObserver.__deallocating_deinit()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for uiPasteboardChangedSyncNotification != -1)
    swift_once();
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, static NSNotificationName.uiPasteboardChangedSyncNotification, 0);

  swift_release();
  swift_bridgeObjectRelease();
  v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B62A21EA259929D05882C7658D395AEF23PasteboardEventObserver__canPaste;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PasteboardEventObserver()
{
  return type metadata accessor for PasteboardEventObserver();
}

void type metadata completion function for PasteboardEventObserver()
{
  unint64_t v0;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>();
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    v2[1] = &protocol witness table for UIKitPasteControl;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    v3[1] = lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance PasteboardEventObserver@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for PasteboardEventObserver();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for uiPasteboardChangedSyncNotification()
{
  uint64_t result;

  result = MEMORY[0x18D75CC88](0xD000000000000024, 0x8000000187BF0100);
  static NSNotificationName.uiPasteboardChangedSyncNotification = result;
  return result;
}

uint64_t key path getter for PasteboardEventObserver.canPaste : PasteboardEventObserver@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PasteboardEventObserver.canPaste : PasteboardEventObserver()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_187AB344C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void (*partial apply for closure #1 in PasteButton.pasteButton.getter())(void)
{
  uint64_t v0;

  return closure #1 in PasteButton.pasteButton.getter((uint64_t *)(v0 + 16));
}

uint64_t outlined retain of PasteButton(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_187AB34D8()
{
  return swift_deallocObject();
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeHStack.init(width:alignment:spacing:content:));
}

double specialized FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  double v14;
  __int128 *Value;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  v8 = v7;
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    v14 = 0.0;
    if (*MEMORY[0x1E0CFED28] != HIDWORD(a7))
    {
      Value = (__int128 *)AGGraphGetValue();
      v16 = Value[1];
      v35 = *Value;
      v36 = v16;
      v14 = MEMORY[0x18D75BE3C]();
    }
  }
  else
  {
    v14 = *(double *)v7;
  }
  v37 = 0;
  v38 = 1;
  *(_QWORD *)&v35 = a1;
  BYTE8(v35) = a2 & 1;
  *(_QWORD *)&v36 = a3;
  BYTE8(v36) = a4 & 1;
  v17 = _ProposedSize.subscript.getter();
  v19 = v18;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)&v35);
  if ((v19 & 1) != 0)
    v20 = specialized getter of flexibleMinorLength #1 in FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:)(&v37, (uint64_t)&v35, specialized FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:));
  else
    v20 = *(double *)&v17;
  outlined destroy of _IncrementalLayout_Children((uint64_t)&v35);
  if (v14 <= 0.0 || v20 <= 0.0)
  {
    specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)((uint64_t)"from size that fits with 0.0 length", 35, 2);
    return 0.0;
  }
  v31 = 2;
  v21 = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(v21, 1))
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_13;
  }
  v14 = v14 * (double)v21 + *(double *)(v8 + 24) * (double)((v21 - 1) & ~((v21 - 1) >> 63));
  v31 = a1;
  v32 = a2 & 1;
  v33 = a3;
  v34 = a4 & 1;
  _ProposedSize.subscript.getter();
  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
    return v14;
  if (one-time initialization token for log != -1)
    goto LABEL_19;
LABEL_13:
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Log.LazyFixedSizeStack.log);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v30 = v26;
    *(_DWORD *)v25 = 136315650;
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x746E6F7A69726F68, 0xEA00000000006C61, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2048;
    v31 = *(_QWORD *)&v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 22) = 2080;
    v31 = a1;
    v32 = a2 & 1;
    v33 = a3;
    v34 = a4 & 1;
    v27 = ProposalLog.description.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_186E48000, v23, v24, "%s: Returning size that fits %f for proposal %s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x18D760108](v26, -1, -1);
    MEMORY[0x18D760108](v25, -1, -1);
  }

  return v14;
}

{
  uint64_t v7;
  uint64_t v8;
  double v14;
  __int128 *Value;
  __int128 v16;
  double v17;
  uint64_t v18;
  char v19;
  char v20;
  double v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  v8 = v7;
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    v14 = 0.0;
    if (*MEMORY[0x1E0CFED28] != HIDWORD(a7))
    {
      Value = (__int128 *)AGGraphGetValue();
      v16 = Value[1];
      v38 = *Value;
      v39 = v16;
      MEMORY[0x18D75BE3C]();
      v14 = v17;
    }
  }
  else
  {
    v14 = *(double *)v7;
  }
  v40 = 0;
  v41 = 1;
  *(_QWORD *)&v38 = a1;
  BYTE8(v38) = a2 & 1;
  *(_QWORD *)&v39 = a3;
  BYTE8(v39) = a4 & 1;
  *(double *)&v18 = COERCE_DOUBLE(_ProposedSize.subscript.getter());
  v20 = v19;
  outlined init with copy of _IncrementalLayout_Children(a5, (uint64_t)&v38);
  if ((v20 & 1) != 0)
    v21 = specialized getter of flexibleMinorLength #1 in FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:)(&v40, (uint64_t)&v38, specialized FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:));
  else
    v21 = *(double *)&v18;
  outlined destroy of _IncrementalLayout_Children((uint64_t)&v38);
  if (v14 <= 0.0 || v21 <= 0.0)
  {
    specialized FixedSizeIncrementalLayout<>.logEarlyReturn(_:)((uint64_t)"from size that fits with 0.0 length", 35, 2);
    return 0.0;
  }
  v34 = 2;
  v22 = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(v22, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  v14 = v14 * (double)v22 + *(double *)(v8 + 24) * (double)((v22 - 1) & ~((v22 - 1) >> 63));
  v34 = a1;
  v35 = a2 & 1;
  v36 = a3;
  v37 = a4 & 1;
  v23 = COERCE_DOUBLE(_ProposedSize.subscript.getter());
  if ((v24 & 1) != 0)
    v23 = 0.0;
  if (v23 > v21)
    v21 = v23;
  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for log == -1)
    {
LABEL_17:
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Log.LazyFixedSizeStack.log);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc();
        v29 = swift_slowAlloc();
        v33 = v29;
        *(_DWORD *)v28 = 136315650;
        v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C61636974726576, 0xE800000000000000, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2048;
        v34 = *(_QWORD *)&v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 22) = 2080;
        v34 = a1;
        v35 = a2 & 1;
        v36 = a3;
        v37 = a4 & 1;
        v30 = ProposalLog.description.getter();
        v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_186E48000, v26, v27, "%s: Returning size that fits %f for proposal %s", (uint8_t *)v28, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v29, -1, -1);
        MEMORY[0x18D760108](v28, -1, -1);
      }

      return v21;
    }
LABEL_23:
    swift_once();
    goto LABEL_17;
  }
  return v21;
}

unint64_t specialized FixedSizeIncrementalLayout<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, double (*a6)(uint64_t, double, double, double, double, double, double, double, double)@<X7>, uint64_t a7@<X8>, char a8)
{
  uint64_t v8;
  unint64_t v10;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  unint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v10 = result;
  if ((a4 & 1) == 0)
  {
    v20 = *(_QWORD *)(a5 + 280);
    v21 = *(_QWORD *)(a5 + 288);
    v22 = *(_BYTE *)(a5 + 296);
    v23 = *(_OWORD *)(a5 + 104);
    v24 = *(_OWORD *)(a5 + 136);
    v42 = *(_OWORD *)(a5 + 120);
    v43 = v24;
    v44 = *(_OWORD *)(a5 + 152);
    v25 = *(_OWORD *)(a5 + 72);
    v38 = *(_OWORD *)(a5 + 56);
    v39 = v25;
    v40 = *(_OWORD *)(a5 + 88);
    v41 = v23;
    if ((v22 & 1) != 0)
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v21, v20));
    ScrollGeometry.visibleRect.getter();
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v34 = swift_allocObject();
    v35 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v34 + 16) = *(_OWORD *)v8;
    *(_OWORD *)(v34 + 32) = v35;
    *(_OWORD *)(v34 + 48) = *(_OWORD *)(v8 + 32);
    *(_QWORD *)(v34 + 64) = *(_QWORD *)(v8 + 48);
    Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v10, a2, a6, a3, (uint64_t)&v38, v27, v29, v31, v33);
    result = swift_release();
    if ((v42 & 1) != 0)
      return Array<A>.externalPlacement(of:avoiding:in:)(v10, a8, a2, a7);
    v36 = BYTE8(v38);
    v37 = v39;
    v16 = v40;
    v17 = v41;
    *(_QWORD *)a7 = v38;
    *(_BYTE *)(a7 + 8) = v36 & 1;
    *(_QWORD *)(a7 + 16) = v37;
    *(_BYTE *)(a7 + 24) = BYTE8(v37) & 1;
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > result)
  {
    v12 = a2 + 72 * result;
    v13 = *(_BYTE *)(v12 + 48);
    v14 = *(_QWORD *)(v12 + 56);
    v15 = *(_BYTE *)(v12 + 64);
    *(_QWORD *)a7 = *(_QWORD *)(v12 + 40);
    *(_BYTE *)(a7 + 8) = v13;
    *(_QWORD *)(a7 + 16) = v14;
    *(_BYTE *)(a7 + 24) = v15;
    v16 = *(_OWORD *)(v12 + 72);
    v17 = *(_OWORD *)(v12 + 88);
LABEL_10:
    *(_OWORD *)(a7 + 32) = v16;
    *(_OWORD *)(a7 + 48) = v17;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized FixedSizeIncrementalLayout<>.boundingRect(at:children:context:state:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  double v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;

  v5 = result;
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    result = *(unsigned int *)(a2 + 12);
    v7 = 0.0;
    if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    {
      Value = AGGraphGetValue();
      result = MEMORY[0x18D75BE3C](Value, v9, v10, v11);
    }
  }
  else
  {
    v7 = *(double *)v3;
  }
  v12 = *(double *)(a2 + 40);
  if (v12 <= 0.0)
  {
    v13 = 0;
    v14 = 0.0;
    v7 = 0.0;
LABEL_9:
    *(double *)a3 = v14;
    *(_QWORD *)(a3 + 8) = 0;
    *(double *)(a3 + 16) = v7;
    *(_QWORD *)(a3 + 24) = v13;
    *(_BYTE *)(a3 + 32) = v12 <= 0.0;
    return result;
  }
  if (!__OFSUB__(v5, 1))
  {
    v14 = v7 * (double)v5 + *(double *)(v3 + 24) * (double)(v5 - 1);
    v13 = *(_QWORD *)(a2 + 40);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  double v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;

  v5 = result;
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    result = *(unsigned int *)(a2 + 12);
    v7 = 0.0;
    if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    {
      Value = AGGraphGetValue();
      result = MEMORY[0x18D75BE3C](Value, v9, v10, v11);
    }
  }
  else
  {
    v7 = *(double *)v3;
  }
  v12 = *(double *)(a2 + 32);
  if (v12 <= 0.0)
  {
    v13 = 0;
    v14 = 0.0;
    v7 = 0.0;
LABEL_9:
    *(_QWORD *)a3 = 0;
    *(double *)(a3 + 8) = v14;
    *(_QWORD *)(a3 + 16) = v13;
    *(double *)(a3 + 24) = v7;
    *(_BYTE *)(a3 + 32) = v12 <= 0.0;
    return result;
  }
  if (!__OFSUB__(v5, 1))
  {
    v14 = v7 * (double)v5 + *(double *)(v3 + 24) * (double)(v5 - 1);
    v13 = *(_QWORD *)(a2 + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:)(uint64_t a1, _BYTE *a2, char a3, double *a4)
{
  uint64_t result;
  double v8;
  double v9;

  IncrementalLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  _ProposedSize.init(_:)();
  result = LayoutProxy.size(in:)();
  if ((a3 & 1) == 0)
    v8 = v9;
  *a4 = v8;
  *a2 = 1;
  return result;
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyFixedSizeHStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:));
}

void protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v8;
  _BYTE v9[304];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  memcpy(v9, a2, 0x129uLL);
  v8 = v4[1];
  v10 = *v4;
  v11 = v8;
  v12 = v4[2];
  v13 = *((_QWORD *)v4 + 6);
  specialized FixedSizeIncrementalLayout<>.place(children:context:state:in:)(a1, (uint64_t)v9, a3, a4);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  __int128 *v6;
  __int128 v12;
  _BYTE __dst[304];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  memcpy(__dst, __src, 0x129uLL);
  v12 = v6[1];
  v15 = *v6;
  v16 = v12;
  v17 = v6[2];
  v18 = *((_QWORD *)v6 + 6);
  return specialized FixedSizeIncrementalLayout<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:), a6, 0);
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  __int128 *v6;
  __int128 v12;
  _BYTE __dst[304];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  memcpy(__dst, __src, 0x129uLL);
  v12 = v6[1];
  v15 = *v6;
  v16 = v12;
  v17 = v6[2];
  v18 = *((_QWORD *)v6 + 6);
  return specialized FixedSizeIncrementalLayout<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:), a6, 0);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *))specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyFixedSizeHStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyFixedSizeHStackLayout(a3, a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *))specialized FixedSizeIncrementalLayout<>.boundingRect(at:children:context:state:), a4);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyFixedSizeHStackLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeHStackLayout()
{
  protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeHStackLayout();
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  if ((a5 & 1) != 0)
    defaultSpacingValue.getter();
  else
    v13 = a4;
  *(_QWORD *)(a9 + 24) = v13;
  v14 = a9 + *(int *)(type metadata accessor for LazyFixedSizeHStack(0, a7, a8, a4) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v14, a6, a7);
}

uint64_t static LazyFixedSizeHStack._makeView(view:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v23;
  __int128 v24;
  int v25;
  __int128 v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t View;
  uint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v23 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v25 = *(_DWORD *)(a2 + 80);
  LODWORD(v32) = *a1;
  type metadata accessor for LazyFixedSizeHStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v26 = *(_OWORD *)(a2 + 40);
  v24 = *(_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = _GraphValue.value.getter();
  v14 = v6;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v11;
  v38 = v10;
  v15 = v11;
  *(_QWORD *)&v39 = v26;
  v16 = _GraphInputs.scrollPhaseState.getter();
  v17 = type metadata accessor for _VariadicView.Tree();
  v32 = __PAIR64__(v16, v13);
  v28 = v17;
  View = type metadata accessor for LazyFixedSizeHStack.MakeView(0, a3, a4, v18);
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStack<A>.MakeView, View);
  v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1, (uint64_t)v27, View, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  _GraphValue.init(_:)();
  v31[1] = a4;
  v32 = v23;
  v33 = v14;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v15;
  v38 = v10;
  v39 = v26;
  v40 = v24;
  v41 = v12;
  v42 = v25;
  v31[0] = &protocol witness table for LazyFixedSizeHStackLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v17, v31);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyFixedSizeHStack);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView(a1);
}

{
  uint64_t v2;

  v2 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance LazyFixedSizeHStack<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return LazyFixedSizeHStack.MakeView.value.getter(*v2, *(_QWORD *)(a1 + 16), (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t)&protocol witness table for LazyFixedSizeHStackLayout, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyFixedSizeHStack<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static LazyFixedSizeHStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyFixedSizeHStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyFixedSizeHStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for LazyFixedSizeHStack<A>);
}

void protocol witness for View.body.getter in conformance LazyFixedSizeHStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeHStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t LazyFixedSizeHStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeHStack.init(width:alignment:spacing:content:));
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyFixedSizeVStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(_QWORD))specialized FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.sizeThatFits(proposedSize:children:context:state:) in conformance LazyFixedSizeHStackLayout(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  return a7(*a1);
}

void protocol witness for IncrementalLayout.place(children:context:state:in:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v8;
  _BYTE v9[304];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  memcpy(v9, a2, 0x129uLL);
  v8 = v4[1];
  v10 = *v4;
  v11 = v8;
  v12 = v4[2];
  v13 = *((_QWORD *)v4 + 6);
  specialized FixedSizeIncrementalLayout<>.place(children:context:state:in:)(a1, (uint64_t)v9, a3, a4);
}

unint64_t protocol witness for IncrementalLayout.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:) in conformance LazyFixedSizeVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  __int128 *v6;
  __int128 v12;
  _BYTE __dst[304];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  memcpy(__dst, __src, 0x129uLL);
  v12 = v6[1];
  v15 = *v6;
  v16 = v12;
  v17 = v6[2];
  v18 = *((_QWORD *)v6 + 6);
  return specialized FixedSizeIncrementalLayout<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:), a6, 1);
}

unint64_t protocol witness for IncrementalLayout.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:) in conformance LazyFixedSizeVStackLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X8>)
{
  __int128 *v6;
  __int128 v12;
  _BYTE __dst[304];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  memcpy(__dst, __src, 0x129uLL);
  v12 = v6[1];
  v15 = *v6;
  v16 = v12;
  v17 = v6[2];
  v18 = *((_QWORD *)v6 + 6);
  return specialized FixedSizeIncrementalLayout<>.initialPlacement(newIndex:newPlacedChildren:oldPlacedChildren:wasInsertedToChildren:context:children:state:)(a2, a3, a4, a5, (uint64_t)__dst, (double (*)(uint64_t, double, double, double, double, double, double, double, double))partial apply for specialized implicit closure #2 in implicit closure #1 in IncrementalStack<>.finalPlacement(oldIndex:oldPlacedChildren:newPlacedChildren:wasRemovedFromChildren:context:children:state:), a6, 1);
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, _BYTE *))specialized FixedSizeIncrementalLayout<>.firstIndex(children:context:state:));
}

uint64_t protocol witness for IncrementalLayout.firstIndex(children:context:state:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BYTE *))
{
  __int128 *v6;
  __int128 v9;
  _BYTE v11[304];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  memcpy(v11, a2, 0x129uLL);
  v9 = v6[1];
  v12 = *v6;
  v13 = v9;
  v14 = v6[2];
  v15 = *((_QWORD *)v6 + 6);
  return a6(a1, v11);
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyFixedSizeVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyFixedSizeHStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
}

uint64_t protocol witness for IncrementalLayout.firstIndex<A>(of:children:context:) in conformance LazyFixedSizeHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t v13;

  v13 = a8();
  return specialized FixedSizeIncrementalLayout<>.firstIndex<A>(of:children:context:)(a1, a2, a3, a6, a4, v13);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyFixedSizeVStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyFixedSizeHStackLayout(a3, a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *))specialized FixedSizeIncrementalLayout<>.boundingRect(at:children:context:state:), a4);
}

uint64_t protocol witness for IncrementalLayout.boundingRect(at:children:context:state:) in conformance LazyFixedSizeHStackLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, void (*a4)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *)@<X6>, uint64_t a5@<X8>)
{
  __int128 *v5;
  __int128 v10;
  _QWORD v12[5];
  _BYTE __dst[304];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  memcpy(__dst, __src, 0x129uLL);
  v10 = v5[1];
  v14 = *v5;
  v15 = v10;
  v16 = v5[2];
  v17 = *((_QWORD *)v5 + 6);
  a4(v12, a2, a3, __dst);
  return outlined init with take of CGRect?((uint64_t)v12, a5);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyFixedSizeVStackLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeVStackLayout()
{
  protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyFixedSizeHStackLayout();
}

uint64_t LazyFixedSizeVStack.init(height:alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2 & 1;
  *(_QWORD *)(a9 + 16) = a3;
  if ((a5 & 1) != 0)
    defaultSpacingValue.getter();
  else
    v13 = a4;
  *(_QWORD *)(a9 + 24) = v13;
  v14 = a9 + *(int *)(type metadata accessor for LazyFixedSizeVStack(0, a7, a8, a4) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(v14, a6, a7);
}

uint64_t LazyFixedSizeVStack.init(height:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(width:alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeVStack.init(height:alignment:spacing:content:));
}

uint64_t LazyFixedSizeHStack.init(width:alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  double v17;
  void (*v18)(void);
  uint64_t v20;

  v13 = a3 & 1;
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v14;
  v18();
  return a8(*(_QWORD *)&v17, 0, a1, a2, v13, v16, a6, a7);
}

uint64_t static LazyFixedSizeVStack._makeView(view:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v23;
  __int128 v24;
  int v25;
  __int128 v26;
  _BYTE v27[16];
  uint64_t v28;
  uint64_t View;
  uint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v23 = *(_QWORD *)a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a2 + 28);
  v11 = *(_DWORD *)(a2 + 32);
  v10 = *(_DWORD *)(a2 + 36);
  v25 = *(_DWORD *)(a2 + 80);
  LODWORD(v32) = *a1;
  type metadata accessor for LazyFixedSizeVStack(255, a3, a4, a4);
  type metadata accessor for _GraphValue();
  v26 = *(_OWORD *)(a2 + 40);
  v24 = *(_OWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = _GraphValue.value.getter();
  v14 = v6;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v11;
  v38 = v10;
  v15 = v11;
  *(_QWORD *)&v39 = v26;
  v16 = _GraphInputs.scrollPhaseState.getter();
  v17 = type metadata accessor for _VariadicView.Tree();
  v32 = __PAIR64__(v16, v13);
  v28 = v17;
  View = type metadata accessor for LazyFixedSizeVStack.MakeView(0, a3, a4, v18);
  v30 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStack<A>.MakeView, View);
  v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v32, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v27, View, MEMORY[0x1E0DEDCE8], v19, MEMORY[0x1E0DEDD18], v20);
  _GraphValue.init(_:)();
  v31[1] = a4;
  v32 = v23;
  v33 = v14;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v15;
  v38 = v10;
  v39 = v26;
  v40 = v24;
  v41 = v12;
  v42 = v25;
  v31[0] = &protocol witness table for LazyFixedSizeVStackLayout;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2630], v17, v31);
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t LazyFixedSizeHStack.MakeView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v6;
  double v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t (*v10)(_QWORD, double);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t Value;
  void (*v29)(_BYTE *, uint64_t, uint64_t);
  void (*v30)(_BYTE *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v36;
  uint64_t *v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v41[12];
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;

  v46 = a3;
  v47 = a4;
  v6 = HIDWORD(a1);
  v45 = a5;
  v44 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v10(0, v7);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v41[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v41[-v18];
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v41[-v22];
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = &v41[-v26];
  Value = AGGraphGetValue();
  v29 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
  v29(v27, Value, v11);
  v43 = *(_QWORD *)v27;
  v42 = v27[8];
  v30 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v30(v27, v11);
  v31 = AGGraphGetValue();
  v29(v23, v31, v11);
  v32 = *((_QWORD *)v23 + 2);
  v30(v23, v11);
  v33 = AGGraphGetValue();
  v29(v19, v33, v11);
  v34 = *((_QWORD *)v19 + 3);
  v30(v19, v11);
  if (*MEMORY[0x1E0CFED28] == v6 || (v35 = (unsigned __int8 *)AGGraphGetValue(), v36 = *v35, v36 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    v37 = &v48;
    ScrollPhaseState.init(phase:velocity:)();
    LOBYTE(v36) = v48;
  }
  else
  {
    v37 = (uint64_t *)v35;
  }
  v38 = *(_OWORD *)(v37 + 1);
  v48 = v43;
  v49 = v42;
  v50 = v32;
  v51 = v34;
  v52 = v36;
  v53 = v38;
  v39 = AGGraphGetValue();
  v29(v15, v39, v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 32))(v9, &v15[*(int *)(v11 + 44)], a2);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeVStack<A>.MakeView@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance LazyFixedSizeHStack<A>.MakeView(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LazyFixedSizeVStack<A>.MakeView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return LazyFixedSizeHStack.MakeView.value.getter(*v2, *(_QWORD *)(a1 + 16), (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t)&protocol witness table for LazyFixedSizeVStackLayout, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyFixedSizeVStack<A>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return static LazyFixedSizeVStack._makeView(view:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyFixedSizeVStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStack<A>, a3);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyFixedSizeVStack<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for LazyFixedSizeVStack<A>);
}

void protocol witness for View.body.getter in conformance LazyFixedSizeVStack<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for LazyFixedSizeVStack<A>, a1);
  specialized PrimitiveView.body.getter();
}

uint64_t LazyFixedSizeVStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return LazyFixedSizeHStack.init(alignment:spacing:content:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))LazyFixedSizeVStack.init(height:alignment:spacing:content:));
}

uint64_t LazyFixedSizeHStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void (*v17)(double);
  uint64_t v19;

  v13 = a3 & 1;
  v14 = MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  return a8(0, 1, a1, a2, v13, v16, a6, a7);
}

uint64_t one-time initialization function for log()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.LazyFixedSizeStack.log);
  __swift_project_value_buffer(v0, (uint64_t)static Log.LazyFixedSizeStack.log);
  return Logger.init(subsystem:category:)();
}

unint64_t IndexRange.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x20646E65202CLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x206C61746F74202CLL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000013;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance IndexRange()
{
  return IndexRange.description.getter();
}

unint64_t ProposalLog.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  Swift::String v7;
  Swift::String v8;
  char v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  Swift::String v14;
  _QWORD v16[2];
  uint64_t v17;
  char v18;

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 8);
  v3 = v0[2];
  v4 = *((_BYTE *)v0 + 24);
  v16[0] = *v0;
  LOBYTE(v16[1]) = *((_BYTE *)v0 + 8);
  v17 = v0[2];
  v18 = *((_BYTE *)v0 + 24);
  _ProposedSize.width.getter();
  if ((v5 & 1) == 0)
  {
    v16[0] = v1;
    LOBYTE(v16[1]) = v2;
    v17 = v3;
    v18 = v4;
    _ProposedSize.height.getter();
    if ((v6 & 1) == 0)
    {
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      strcpy((char *)v16, "<Proposal: (");
      BYTE5(v16[1]) = 0;
      HIWORD(v16[1]) = -5120;
      v7._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 8236;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
LABEL_8:
      v14._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v11 = 15913;
      v12 = 0xE200000000000000;
      goto LABEL_9;
    }
  }
  v16[0] = v1;
  LOBYTE(v16[1]) = v2;
  v17 = v3;
  v18 = v4;
  _ProposedSize.width.getter();
  if ((v9 & 1) == 0)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    strcpy((char *)v16, "<Proposal: (");
    BYTE5(v16[1]) = 0;
    HIWORD(v16[1]) = -5120;
    v10._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11 = 0x3E296C696E202CLL;
    v12 = 0xE700000000000000;
LABEL_9:
    String.append(_:)(*(Swift::String *)&v11);
    return v16[0];
  }
  v16[0] = v1;
  LOBYTE(v16[1]) = v2;
  v17 = v3;
  v18 = v4;
  _ProposedSize.height.getter();
  if ((v13 & 1) == 0)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v16[0] = 0xD000000000000011;
    v16[1] = 0x8000000187BF02C0;
    goto LABEL_8;
  }
  return 0xD000000000000016;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableFixedSizeStackLogging()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableFixedSizeStackLogging()
{
  swift_beginAccess();
  return static EnableFixedSizeStackLogging.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableFixedSizeStackLogging(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static EnableFixedSizeStackLogging.cachedValue = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableFixedSizeStackLogging())()
{
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableFixedSizeStackLogging()
{
  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableFixedSizeStackLogging()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableFixedSizeStackLogging()
{
  lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableFixedSizeStackLogging@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v4;
  uint64_t result;

  v4 = lazy protocol witness table accessor for type EnableFixedSizeStackLogging and conformance EnableFixedSizeStackLogging();
  result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t type metadata accessor for LazyFixedSizeHStack.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyFixedSizeHStack.MakeView);
}

uint64_t type metadata accessor for LazyFixedSizeVStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyFixedSizeVStack);
}

uint64_t type metadata accessor for LazyFixedSizeVStack.MakeView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyFixedSizeVStack.MakeView);
}

_UNKNOWN **base witness table accessor for View in LazyFixedSizeHStack<A>()
{
  return &protocol witness table for LazyFixedSizeHStack<A>;
}

_UNKNOWN **base witness table accessor for View in LazyFixedSizeVStack<A>()
{
  return &protocol witness table for LazyFixedSizeVStack<A>;
}

uint64_t type metadata completion function for LazyFixedSizeHStack()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 32) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *(_QWORD *)a2;
    *v3 = *(_QWORD *)a2;
    v3 = (_QWORD *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    v9 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    v10 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithCopy for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v5 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t initializeWithTake for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for LazyFixedSizeHStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  v4 = (_QWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyFixedSizeHStack(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 32) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AB5E1C + 4 * byte_187C88C40[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for LazyFixedSizeHStack(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 32) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 32) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for LazyFixedSizeVStackLayout()
{
  return &type metadata for LazyFixedSizeVStackLayout;
}

uint64_t getEnumTagSinglePayload for LazyFixedSizeVStackLayout(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyFixedSizeVStackLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyFixedSizeHStackLayout()
{
  return &type metadata for LazyFixedSizeHStackLayout;
}

unint64_t instantiation function for generic protocol witness table for LazyFixedSizeHStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for LazyFixedSizeVStackLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for _AttributeBody in LazyFixedSizeVStack<A>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for _AttributeBody in LazyFixedSizeHStack<A>.MakeView()
{
  JUMPOUT(0x18D75FFDCLL);
}

double specialized FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:)(uint64_t a1)
{
  _BYTE v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  v4 = 0;
  v5 = 0.0;
  v3 = *(_QWORD *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  _BYTE v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  v4 = 0;
  v5 = 0.0;
  v3 = *(_QWORD *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

double specialized getter of flexibleMinorLength #1 in FixedSizeIncrementalLayout<>.sizeThatFits(proposedSize:children:context:state:)(_BYTE *a1, uint64_t a2, double (*a3)(uint64_t))
{
  double v4;

  if ((a1[8] & 1) == 0)
    return *(double *)a1;
  v4 = a3(a2);
  swift_beginAccess();
  *(double *)a1 = v4;
  a1[8] = 0;
  return v4;
}

uint64_t specialized FixedSizeIncrementalLayout<>.firstIndex<A>(of:children:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6;
  double v7;
  double v8;
  uint64_t v10;

  v6 = *(double *)(a3 + 32);
  v7 = *(double *)(a3 + 40);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6) & 1) != 0)
    v8 = v6;
  else
    v8 = v7;
  if (v8 <= 0.0)
    return 0;
  DragDropDefaultPreviewResponder.contentShapeKind.getter(&v10);
  return _IncrementalLayout_Children.firstIndex<A>(id:style:)();
}

uint64_t sub_187AB64FC()
{
  return swift_deallocObject();
}

uint64_t sub_187AB650C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  return closure #1 in FixedSizeIncrementalLayout<>.resolveFlexibleMinorLength(children:childLength:)(a1, a2, *(_BYTE *)(v2 + 24), *(double **)(v2 + 32));
}

uint64_t sub_187AB6570()
{
  return swift_deallocObject();
}

uint64_t sub_187AB6580()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for EnableFixedSizeStackLogging()
{
  return &type metadata for EnableFixedSizeStackLogging;
}

void *type metadata accessor for IndexRange()
{
  return &unk_1E1AAD950;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableFixedSizeStackLogging()
{
  return &protocol witness table for EnableFixedSizeStackLogging;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27UIAccessibilityCustomActionCG_SSs5NeverOTg5059_s7SwiftUI17AccessibilityNodeC11actionNamesSaySSGSgvgSSSo27deF54Ccfu_33_5e0b8d60cfc3e6e2a3f018f1bb98e0f4AHSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return (char *)v3;
    v15 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x18D75E3BC](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_name);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v15 + 16) = v13 + 1;
      v14 = v15 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      if (v2 == v5)
        return (char *)v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static AccessibilityNodeProxy.makeProxyForIdentifiedView(with:environment:)@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  Swift::UInt v18;
  Swift::Int v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  Swift::UInt v23;
  Swift::Int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *j;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _OWORD v60[11];
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  _BYTE v65[96];
  __int128 v66;
  __int128 v67;
  _OWORD v68[4];

  v4 = *a1;
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)&v64 = *a2;
  *((_QWORD *)&v64 + 1) = v6;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0 || !v4)
    goto LABEL_7;
  v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 == 1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v10 = (char *)MEMORY[0x18D75E3BC](0, v4);
      v9 = (char *)MEMORY[0x18D75E3BC](0, v4);
    }
    else
    {
      if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      v9 = (char *)*(id *)(v4 + 32);
      v10 = v9;
    }
    v11 = static AccessibilityCore.queryChildren(element:options:)((uint64_t)v9, 3);
    v12 = MEMORY[0x18D760234](&v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = (unint64_t *)(v12 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      v15 = *v14;
      swift_bridgeObjectRetain();

    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)&v64 = v11;
    specialized Array.append<A>(contentsOf:)(v15);

    static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(v10, (unint64_t)v11, 1, v60);
    swift_bridgeObjectRelease();

    v67 = v60[8];
    v68[0] = v60[9];
    v68[1] = v60[10];
    *(_QWORD *)&v68[2] = v61;
    *(_OWORD *)&v65[48] = v60[4];
    *(_OWORD *)&v65[64] = v60[5];
    *(_OWORD *)&v65[80] = v60[6];
    v66 = v60[7];
    v64 = v60[0];
    *(_OWORD *)v65 = v60[1];
    *(_OWORD *)&v65[16] = v60[2];
    *(_OWORD *)&v65[32] = v60[3];
LABEL_58:
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v64);
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)&v64, a3);
  }
  if (!v8)
  {
LABEL_7:
    _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_((uint64_t)&v64);
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)&v64, a3);
  }
  *(_QWORD *)&v60[0] = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  v56 = v6;
  v57 = v5;
  v55 = a3;
  v16 = *(_QWORD *)&v60[0];
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v8; ++i)
    {
      v18 = *(_QWORD *)(MEMORY[0x18D75E3BC](i, v4) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      v19 = Hasher._finalize()();
      swift_unknownObjectRelease();
      *(_QWORD *)&v60[0] = v16;
      v21 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
        v16 = *(_QWORD *)&v60[0];
      }
      *(_QWORD *)(v16 + 16) = v21 + 1;
      *(_QWORD *)(v16 + 8 * v21 + 32) = v19;
    }
  }
  else
  {
    v22 = (_QWORD *)(v4 + 32);
    do
    {
      v23 = *(_QWORD *)(*v22 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      v24 = Hasher._finalize()();
      *(_QWORD *)&v60[0] = v16;
      v26 = *(_QWORD *)(v16 + 16);
      v25 = *(_QWORD *)(v16 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
        v16 = *(_QWORD *)&v60[0];
      }
      *(_QWORD *)(v16 + 16) = v26 + 1;
      *(_QWORD *)(v16 + 8 * v26 + 32) = v24;
      ++v22;
      --v8;
    }
    while (v8);
  }
  v8 = Array<A>.hashValue.getter();
  swift_release();
  LODWORD(v6) = 2;
  *(_QWORD *)&v64 = v57;
  *((_QWORD *)&v64 + 1) = v56;
  EnvironmentValues.layoutDirection.getter();
  swift_bridgeObjectRetain();
  v27 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 >> 62)
  {
    v27 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v4);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v64 = v27;
  v4 = 0;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v64, 0, 4, v60[0]);
  v7 = v64;
  if ((v64 & 0x8000000000000000) != 0 || (v64 & 0x4000000000000000) != 0)
  {
LABEL_55:
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v28)
      goto LABEL_31;
    goto LABEL_56;
  }
  v28 = *(_QWORD *)(v64 + 16);
  if (!v28)
  {
LABEL_56:
    swift_release();
    v30 = MEMORY[0x1E0DEE9D8];
    a3 = v55;
LABEL_57:
    LOBYTE(v63) = 1;
    *(_QWORD *)&v64 = v8;
    WORD4(v64) = 1;
    HIDWORD(v64) = v6;
    *(_DWORD *)v65 = v6;
    memset(&v65[8], 0, 81);
    *(_QWORD *)&v66 = 0;
    BYTE8(v66) = 1;
    v67 = 0uLL;
    *(_QWORD *)&v68[0] = v30;
    memset((char *)v68 + 8, 0, 32);
    goto LABEL_58;
  }
LABEL_31:
  v58 = v6;
  v59 = v8;
  v63 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
  if (v28 < 0)
  {
    __break(1u);
  }
  else
  {
    v29 = 0;
    v30 = v63;
    v31 = v28 - 1;
    if ((v7 & 0xC000000000000001) == 0)
      goto LABEL_34;
LABEL_33:
    for (j = (char *)MEMORY[0x18D75E3BC](v29, v7); ; j = (char *)*(id *)(v7 + 8 * v29 + 32))
    {
      v33 = j;
      v34 = (unint64_t *)&j[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
      swift_beginAccess();
      v35 = *v34;
      if ((v35 & 0x8000000000000000) != 0 || (v35 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        v36 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v35);
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = v35 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
      }
      *(_QWORD *)&v64 = v36;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v64, 0, 2, 2);
      if (v4)
        break;
      swift_bridgeObjectRelease();
      v37 = v64;
      v38 = MEMORY[0x18D760234](&v33[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
      if (v38)
      {
        v39 = (void *)v38;
        v40 = (unint64_t *)(v38 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
        swift_beginAccess();
        v41 = *v40;
        swift_bridgeObjectRetain();

      }
      else
      {
        v41 = MEMORY[0x1E0DEE9D8];
      }
      v62 = v37;
      specialized Array.append<A>(contentsOf:)(v41);
      static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(v33, v37, 1, &v64);

      swift_bridgeObjectRelease();
      v63 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v30 = v63;
      }
      v43 = *(_QWORD *)(v30 + 16);
      v42 = *(_QWORD *)(v30 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1);
        v30 = v63;
      }
      *(_QWORD *)(v30 + 16) = v43 + 1;
      v44 = v30 + 184 * v43;
      v45 = v64;
      v46 = *(_OWORD *)v65;
      v47 = *(_OWORD *)&v65[32];
      *(_OWORD *)(v44 + 64) = *(_OWORD *)&v65[16];
      *(_OWORD *)(v44 + 80) = v47;
      *(_OWORD *)(v44 + 32) = v45;
      *(_OWORD *)(v44 + 48) = v46;
      v48 = *(_OWORD *)&v65[48];
      v49 = *(_OWORD *)&v65[64];
      v50 = v66;
      *(_OWORD *)(v44 + 128) = *(_OWORD *)&v65[80];
      *(_OWORD *)(v44 + 144) = v50;
      *(_OWORD *)(v44 + 96) = v48;
      *(_OWORD *)(v44 + 112) = v49;
      v51 = v67;
      v52 = v68[0];
      v53 = v68[1];
      *(_QWORD *)(v44 + 208) = *(_QWORD *)&v68[2];
      *(_OWORD *)(v44 + 176) = v52;
      *(_OWORD *)(v44 + 192) = v53;
      *(_OWORD *)(v44 + 160) = v51;
      if (v31 == v29)
      {
        swift_release();
        a3 = v55;
        v8 = v59;
        LODWORD(v6) = v58;
        goto LABEL_57;
      }
      ++v29;
      if ((v7 & 0xC000000000000001) != 0)
        goto LABEL_33;
LABEL_34:
      ;
    }
  }
  swift_release();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t AccessibilityNodeProxy.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t AccessibilityNodeProxy.id.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.id.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isOpaque.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AccessibilityNodeProxy.isOpaque.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isOpaque.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isPlatformNode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t AccessibilityNodeProxy.isPlatformNode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isPlatformNode.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double AccessibilityNodeProxy.visibility.getter@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 12);
  *a1 = result;
  return result;
}

double AccessibilityNodeProxy.visibility.setter(double *a1)
{
  uint64_t v1;
  double result;

  result = *a1;
  *(double *)(v1 + 12) = *a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.visibility.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.label.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.label.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.hint.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.hint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.hint.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.identifier.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 AccessibilityNodeProxy.traits.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 88);
  *a1 = result;
  return result;
}

__n128 AccessibilityNodeProxy.traits.setter(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.traits.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isDisabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AccessibilityNodeProxy.isDisabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isDisabled.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.sortPriority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t AccessibilityNodeProxy.sortPriority.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = result;
  *(_BYTE *)(v2 + 120) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.sortPriority.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.actions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.actions.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.customContent.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.customContent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.customContent.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.children.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.children.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.inputLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.inputLabels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 152) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.inputLabels.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.url.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.url.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.url.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.metadata.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 176) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.metadata.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.serializedData.getter()
{
  uint64_t v0;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy();
  v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy, &type metadata for AccessibilityNodeProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy, &type metadata for AccessibilityNodeProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy, &type metadata for AccessibilityNodeProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

uint64_t static AccessibilityNodeProxy.deserialize(_:)@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[11];
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  v3[8] = v13;
  v3[9] = v14;
  v3[10] = v15;
  v4 = v16;
  v3[4] = v9;
  v3[5] = v10;
  v3[6] = v11;
  v3[7] = v12;
  v3[0] = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v3);
  return outlined init with take of AccessibilityNodeProxy?((uint64_t)v3, a1);
}

__n128 AccessibilityNodeProxy.init(id:isOpaque:isPlatformNode:visibility:label:value:hint:identifier:traits:isDisabled:sortPriority:actions:customContent:children:inputLabels:url:metadata:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, uint64_t a12, _OWORD *a13, char a14, uint64_t a15, char a16, __int128 a17, __int128 a18, __n128 a19, uint64_t a20)
{
  __n128 result;

  result = a19;
  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 9) = a3;
  *(_QWORD *)(a9 + 12) = *a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = *a13;
  *(_BYTE *)(a9 + 104) = a14;
  *(_QWORD *)(a9 + 112) = a15;
  *(_BYTE *)(a9 + 120) = a16 & 1;
  *(_OWORD *)(a9 + 128) = a17;
  *(_OWORD *)(a9 + 144) = a18;
  *(__n128 *)(a9 + 160) = a19;
  *(_QWORD *)(a9 + 176) = a20;
  return result;
}

uint64_t static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  id v36;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  id v42;
  void *v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  unsigned __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  __int16 v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  __int16 v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  void (*v150)(uint64_t);
  uint64_t v151;
  _QWORD *v152;
  void *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  void (*v157)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unsigned int (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  unint64_t v169;
  uint64_t v170;
  _BOOL8 v171;
  uint64_t v172;
  char v173;
  unint64_t v174;
  char v175;
  id v176;
  _QWORD *v177;
  uint64_t *v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  id v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  Swift::UInt v200;
  void *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int128 v206;
  void *v207;
  uint64_t v208;
  char v209;
  char v210;
  id v211;
  char *v212;
  void *v213;
  uint64_t v214;
  id v215;
  void *v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  unint64_t v229;
  _QWORD *v230;
  BOOL v231;
  int v232;
  char *v233;
  uint64_t result;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  _QWORD *v252;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  unint64_t v259;
  id v260;
  uint64_t v261;
  unsigned __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  id v275;
  unsigned __int128 v276;
  __int128 v277;
  __int128 v278;
  unsigned __int128 v279;

  v259 = a2;
  v247 = a4;
  v6 = type metadata accessor for URL();
  v237 = *(_QWORD *)(v6 - 8);
  v238 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v236 = (char *)&v235 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, (void (*)(uint64_t))MEMORY[0x1E0CE2DE8]);
  MEMORY[0x1E0C80A78](v9, v10);
  v246 = (uint64_t)&v235 - v11;
  v249 = type metadata accessor for AccessibilityCustomAttributes.Value();
  v252 = *(_QWORD **)(v249 - 8);
  MEMORY[0x1E0C80A78](v249, v12);
  v253 = (uint64_t)&v235 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v251 = (char *)&v235 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v256 = (uint64_t)&v235 - v20;
  AccessibilityNode.attachment.getter((uint64_t *)&v262);
  v21 = v262;

  v22 = swift_bridgeObjectRetain();
  v23 = specialized AccessibilityProperties.subscript.getter(v22);
  v257 = v21;
  swift_bridgeObjectRelease();
  v255 = v23;
  v250 = a1;
  v248 = a3;
  if (v23)
  {
    v24 = *(_QWORD *)(v255 + 16);
    if (v24)
    {
      v258 = &a1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      v254 = a1;
      v25 = swift_bridgeObjectRetain() + 56;
      v26 = (char *)MEMORY[0x1E0DEE9D8];
      do
      {
        v27 = *(_BYTE *)(v25 - 8);
        v29 = *(_QWORD *)(v25 - 24);
        v28 = *(_QWORD *)(v25 - 16);
        v30 = *((_QWORD *)v258 + 1);
        *(_QWORD *)&v262 = *(_QWORD *)v258;
        *((_QWORD *)&v262 + 1) = v30;
        v276 = 0uLL;
        v274 = 0;
        outlined copy of Text.Storage(v29, v28, v27);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        v31 = Text.resolveString(in:with:idiom:)();
        v260 = v32;
        v261 = v31;
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v29, v28, v27);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
        v34 = *((_QWORD *)v26 + 2);
        v33 = *((_QWORD *)v26 + 3);
        if (v34 >= v33 >> 1)
          v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v26);
        *((_QWORD *)v26 + 2) = v34 + 1;
        v35 = &v26[16 * v34];
        v36 = v260;
        *((_QWORD *)v35 + 4) = v261;
        *((_QWORD *)v35 + 5) = v36;
        v25 += 32;
        --v24;
      }
      while (v24);

      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = (char *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0;
  }
  v245 = v26;
  *(_QWORD *)&v262 = v257;
  if (*(_QWORD *)(AccessibilityProperties.customContentList.getter() + 16))
  {
    isUniquelyReferenced_nonNull_native = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    v38 = (uint64_t)v250;
    v39 = *(_QWORD *)&v250[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
    *(_QWORD *)&v262 = *(_QWORD *)&v250[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    *((_QWORD *)&v262 + 1) = v39;
    swift_retain();
    swift_retain();
    v40 = Array<A>.resolve(in:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (v40 >> 62)
      goto LABEL_42;
    v41 = *(char **)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v41)
    {
      v258 = (char *)(v40 & 0xC000000000000001);
      v38 = 4;
      v254 = v41;
      v255 = v40;
      while (1)
      {
        v42 = v258 ? (id)MEMORY[0x18D75E3BC](v38 - 4, v40) : *(id *)(v40 + 8 * v38);
        v43 = v42;
        v44 = (char *)(v38 - 3);
        if (__OFADD__(v38 - 4, 1))
          break;
        if (isUniquelyReferenced_nonNull_native)
        {
          v261 = v38 - 3;
          v45 = objc_msgSend(v42, sel_label);
          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v48 = v47;

          v260 = v43;
          v49 = objc_msgSend(v43, sel_value);
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v52 = v51;

          v53 = isUniquelyReferenced_nonNull_native;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v262 = v53;
          v55 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          v56 = *(_QWORD *)(v53 + 16);
          v57 = (v54 & 1) == 0;
          v58 = v56 + v57;
          if (__OFADD__(v56, v57))
            goto LABEL_40;
          v40 = v54;
          if (*(_QWORD *)(v53 + 24) >= v58)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              isUniquelyReferenced_nonNull_native = v262;
              if ((v54 & 1) == 0)
                goto LABEL_33;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              isUniquelyReferenced_nonNull_native = v262;
              if ((v40 & 1) == 0)
                goto LABEL_33;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v58, isUniquelyReferenced_nonNull_native);
            v59 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
            if ((v40 & 1) != (v60 & 1))
              goto LABEL_169;
            v55 = v59;
            isUniquelyReferenced_nonNull_native = v262;
            if ((v40 & 1) == 0)
            {
LABEL_33:
              *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v55 >> 6) + 64) |= 1 << v55;
              v62 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v55);
              *v62 = v46;
              v62[1] = v48;
              v63 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v55);
              *v63 = v50;
              v63[1] = v52;
              v64 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
              v65 = __OFADD__(v64, 1);
              v66 = v64 + 1;
              if (v65)
                goto LABEL_41;
              *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v66;
              swift_bridgeObjectRetain();
              goto LABEL_35;
            }
          }
          v61 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v55);
          swift_bridgeObjectRelease();
          *v61 = v50;
          v61[1] = v52;
LABEL_35:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v41 = v254;
          v40 = v255;
          v44 = (char *)v261;
          goto LABEL_18;
        }

LABEL_18:
        ++v38;
        if (v44 == v41)
        {
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      swift_bridgeObjectRetain();
      v41 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = 0;
LABEL_38:
    v38 = (uint64_t)v250;
  }
  v255 = isUniquelyReferenced_nonNull_native;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v67 = swift_allocObject();
  LOBYTE(v262) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v262, (char *)&v276);
  AccessibilityVisibility.init(_:)();
  LODWORD(v254) = *(_DWORD *)(v67 + 32);
  swift_setDeallocating();
  swift_deallocClassInstance();
  v68 = v248 - 1;
  if (v248 < 1)
  {
    v261 = 0;
    v248 = MEMORY[0x1E0DEE9D8];
    goto LABEL_69;
  }
  v69 = v259;
  if (v259 >> 62)
    goto LABEL_166;
  v70 = *(_QWORD *)((v259 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_47:
  if (!v70)
  {
    v248 = MEMORY[0x1E0DEE9D8];
    v261 = 0;
LABEL_69:
    v98 = AccessibilityNode.resolvedPlainTextLabel.getter();
    v100 = v99;
    v101 = AccessibilityNode.resolvedPlainTextValue.getter();
    v243 = v100;
    v244 = v98;
    if (v102)
    {
      v241 = v102;
      v242 = v101;
      goto LABEL_78;
    }
    v103 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v103, &v262);
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v264 + 1))
    {
      outlined init with copy of AnyAccessibilityValue?((uint64_t)&v262, (uint64_t)&v276);
      outlined destroy of AccessibilityValueStorage((uint64_t)&v262);
      if (*((_QWORD *)&v277 + 1))
      {
        v104 = AnyAccessibilityValue.displayDescription.getter();
        v241 = v105;
        outlined destroy of AnyAccessibilityValue((uint64_t)&v276);
LABEL_77:
        v242 = v104;
LABEL_78:
        v109 = AccessibilityNode.resolvedPlainTextHint.getter();
        v239 = v110;
        v240 = v109;
        *(_QWORD *)&v262 = v257;
        AccessibilityProperties.traits.getter();
        v111 = swift_bridgeObjectRetain();
        v112 = (_QWORD *)specialized AccessibilityProperties.subscript.getter(v111);
        swift_bridgeObjectRelease();
        v113 = v112[2];
        if (v113)
        {
          v114 = (uint64_t)(v112 + 4);
          v260 = v112;
          swift_bridgeObjectRetain();
          v115 = (char *)MEMORY[0x1E0DEE9D8];
          do
          {
            outlined init with copy of AnyAccessibilityAction(v114, (uint64_t)&v262);
            v118 = *((_QWORD *)&v279 + 1);
            v117 = v279;
            v119 = *((_QWORD *)&v263 + 1);
            v120 = v264;
            __swift_project_boxed_opaque_existential_1(&v262, *((uint64_t *)&v263 + 1));
            v276 = __PAIR128__(v118, v117);
            v121 = (*(uint64_t (**)(unsigned __int128 *, uint64_t, uint64_t))(v120 + 48))(&v276, v119, v120);
            v123 = v122;
            v125 = v124;
            outlined destroy of AnyAccessibilityAction((uint64_t)&v262);
            if ((v125 & 0x100) == 0)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v115 + 2) + 1, 1, v115);
              v127 = *((_QWORD *)v115 + 2);
              v126 = *((_QWORD *)v115 + 3);
              if (v127 >= v126 >> 1)
                v115 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v126 > 1), v127 + 1, 1, v115);
              *((_QWORD *)v115 + 2) = v127 + 1;
              v116 = &v115[24 * v127];
              *((_QWORD *)v116 + 4) = v121;
              *((_QWORD *)v116 + 5) = v123;
              v116[48] = v125 & 1;
            }
            v114 += 48;
            --v113;
          }
          while (v113);
          swift_bridgeObjectRelease_n();
          v38 = (uint64_t)v250;
        }
        else
        {
          swift_bridgeObjectRelease();
          v115 = (char *)MEMORY[0x1E0DEE9D8];
        }
        v128 = *((_QWORD *)v115 + 2);
        v130 = v251;
        v129 = v252;
        if (v128)
        {
          v131 = (uint64_t *)(v115 + 32);
          v133 = *((_QWORD *)&v279 + 1);
          v132 = v279;
          do
          {
            v135 = *v131;
            v131 += 3;
            v134 = v135;
            if ((v135 & 1) != 0)
            {
              if ((v133 & 1) == 0)
              {
                v133 |= 1uLL;
                *((_QWORD *)&v279 + 1) = v133;
              }
              if ((v132 & 1) == 0)
              {
                v132 |= 1uLL;
                *(_QWORD *)&v279 = v132;
              }
            }
            if ((~v134 & 0x10000) == 0)
            {
              if ((v133 & 2) == 0)
              {
                v133 |= 2uLL;
                *((_QWORD *)&v279 + 1) = v133;
              }
              if ((v132 & 2) == 0)
              {
                v132 |= 2uLL;
                *(_QWORD *)&v279 = v132;
              }
            }
            --v128;
          }
          while (v128);
        }
        swift_bridgeObjectRelease();
        v136 = swift_bridgeObjectRetain();
        specialized AccessibilityProperties.subscript.getter(v136, &v262);
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v264 + 1))
        {
          v276 = v279;
          v137 = AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v276);
          v139 = v138;
          outlined destroy of AccessibilityValueStorage((uint64_t)&v262);
          if ((v139 & 0x100) == 0)
            AccessibilityRole.update(traits:)(&v279, v137);
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v262, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
        }
        v140 = MEMORY[0x1E0DEE9E0];
        if (_SwiftUIIsAppleInternalBuild())
        {
          *(_QWORD *)&v262 = objc_msgSend((id)v38, sel_accessibilityTraits);
          v141 = dispatch thunk of CustomStringConvertible.description.getter();
          v143 = v142;
          v144 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v262 = v140;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v141, v143, 0x737469617254, 0xE600000000000000, v144);
          v259 = v262;
          swift_bridgeObjectRelease();
          v145 = swift_bridgeObjectRetain();
          specialized AccessibilityProperties.subscript.getter(v145, &v262);
          swift_bridgeObjectRelease();
          v146 = (char *)v262;
          if ((_QWORD)v262)
          {
            v147 = AccessibilityCustomAttributes.attributeNames.getter();
            v69 = *(_QWORD *)(v147 + 16);
            if (v69)
            {
              v235 = v147;
              v148 = (uint64_t *)(v147 + 40);
              v68 = v249;
              v149 = v256;
              v258 = v146;
              while (1)
              {
                v151 = (uint64_t)v130;
                v152 = v129;
                v153 = (void *)*(v148 - 1);
                v38 = *v148;
                v154 = *((_QWORD *)v146 + 2);
                v260 = v153;
                if (v154)
                {
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRetain();
                  v155 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v153, v38);
                  if ((v156 & 1) != 0)
                  {
                    v149 = v256;
                    outlined init with copy of AccessibilityCustomAttributes.Value(*((_QWORD *)v146 + 7) + v152[9] * v155, v256);
                    v157 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v152[7];
                    v158 = v149;
                    v159 = 0;
                  }
                  else
                  {
                    v157 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v152[7];
                    v149 = v256;
                    v158 = v256;
                    v159 = 1;
                  }
                  v160 = v68;
                  v157(v158, v159, 1, v68);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v160 = v68;
                  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v152[7])(v149, 1, 1, v68);
                  swift_bridgeObjectRetain();
                }
                v161 = v151;
                outlined init with copy of AccessibilityCustomAttributes.Value?(v149, v151);
                v162 = v152;
                v163 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v152[6];
                v130 = (char *)v161;
                if (v163(v161, 1, v160) == 1)
                {
                  v68 = v160;
                  v129 = v162;
                  v150 = (void (*)(uint64_t))MEMORY[0x1E0CE63F8];
                }
                else
                {
                  outlined init with take of AccessibilityCustomAttributes.Value(v161, v253);
                  swift_bridgeObjectRetain();
                  v164 = AccessibilityCustomAttributes.Value.displayDescription.getter();
                  v166 = v165;
                  v167 = v259;
                  v68 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)&v262 = v167;
                  v169 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v260, v38);
                  v170 = *(_QWORD *)(v167 + 16);
                  v171 = (v168 & 1) == 0;
                  v172 = v170 + v171;
                  if (__OFADD__(v170, v171))
                  {
                    __break(1u);
LABEL_165:
                    __break(1u);
LABEL_166:
                    swift_bridgeObjectRetain();
                    v70 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    goto LABEL_47;
                  }
                  v173 = v168;
                  if (*(_QWORD *)(v167 + 24) >= v172)
                  {
                    if ((v68 & 1) == 0)
                      specialized _NativeDictionary.copy()();
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v172, v68);
                    v174 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v260, v38);
                    if ((v173 & 1) != (v175 & 1))
                      goto LABEL_169;
                    v169 = v174;
                  }
                  v68 = v249;
                  v176 = v260;
                  v177 = (_QWORD *)v262;
                  v259 = v262;
                  if ((v173 & 1) != 0)
                  {
                    v178 = (uint64_t *)(*(_QWORD *)(v262 + 56) + 16 * v169);
                    swift_bridgeObjectRelease();
                    *v178 = v164;
                    v178[1] = v166;
                  }
                  else
                  {
                    *(_QWORD *)(v262 + 8 * (v169 >> 6) + 64) |= 1 << v169;
                    v179 = (_QWORD *)(v177[6] + 16 * v169);
                    *v179 = v176;
                    v179[1] = v38;
                    v180 = (uint64_t *)(v177[7] + 16 * v169);
                    *v180 = v164;
                    v180[1] = v166;
                    v181 = v177[2];
                    v65 = __OFADD__(v181, 1);
                    v182 = v181 + 1;
                    if (v65)
                      goto LABEL_165;
                    v177[2] = v182;
                    swift_bridgeObjectRetain();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v150 = (void (*)(uint64_t))MEMORY[0x1E0CE63F8];
                  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v253, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE63F8]);
                  v130 = v251;
                  v129 = v252;
                  v149 = v256;
                  v146 = v258;
                }
                v148 += 2;
                outlined destroy of IntelligenceElement?(v149, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, v150);
                swift_bridgeObjectRelease();
                if (!--v69)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v38 = (uint64_t)v250;
                  goto LABEL_133;
                }
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v259 = v140;
        }
LABEL_133:
        v183 = swift_bridgeObjectRetain();
        specialized AccessibilityProperties.subscript.getter(v183, &v276);
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v278 + 1))
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v276, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
LABEL_148:
          v200 = *(_QWORD *)(v38 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v200);
          v201 = (void *)Hasher._finalize()();
          AccessibilityNode.platformElement.getter();
          v203 = v202;
          if (v202)

          v204 = swift_bridgeObjectRetain();
          specialized AccessibilityProperties.subscript.getter(v204, (uint64_t)&v262);
          swift_bridgeObjectRelease();
          v205 = *((_QWORD *)&v262 + 1);
          v260 = v201;
          if (*((_QWORD *)&v262 + 1))
          {
            if (v263 >= 2u)
            {
              swift_bridgeObjectRelease();
              v258 = 0;
              v205 = 0;
            }
            else
            {
              v258 = (char *)v262;
            }
          }
          else
          {
            v258 = 0;
          }
          v206 = v279;
          v207 = v250;
          v262 = *(_OWORD *)&v250[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
          LODWORD(v253) = EnvironmentValues.isEnabled.getter();
          v208 = swift_bridgeObjectRetain();
          v256 = specialized AccessibilityProperties.subscript.getter(v208);
          v210 = v209;
          swift_bridgeObjectRelease();
          v211 = v207;
          v212 = specialized Sequence.compactMap<A>(_:)((uint64_t)&outlined read-only object #0 of AccessibilityNode.actionNames.getter);

          swift_arrayDestroy();
          v213 = closure #2 in AccessibilityNode.actionNames.getter();
          *(_QWORD *)&v262 = v212;
          specialized Array.append<A>(contentsOf:)((uint64_t)v213);
          v214 = v262;
          v215 = objc_msgSend(v211, sel_accessibilityCustomActions);
          if (v215)
          {
            v216 = v215;
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
            v217 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v218 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27UIAccessibilityCustomActionCG_SSs5NeverOTg5059_s7SwiftUI17AccessibilityNodeC11actionNamesSaySSGSgvgSSSo27deF54Ccfu_33_5e0b8d60cfc3e6e2a3f018f1bb98e0f4AHSSTf3nnnpk_nTf1cn_n(v217);
            swift_bridgeObjectRelease();
          }
          else
          {
            v218 = (char *)MEMORY[0x1E0DEE9D8];
          }
          *(_QWORD *)&v262 = v214;
          specialized Array.append<A>(contentsOf:)((uint64_t)v218);
          v219 = v262;
          v220 = v255;
          swift_bridgeObjectRetain();
          v221 = swift_bridgeObjectRetain();
          v222 = v246;
          specialized AccessibilityProperties.subscript.getter(v221, v246);
          swift_bridgeObjectRelease_n();
          v223 = type metadata accessor for LinkDestination.Configuration();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v223 - 8) + 48))(v222, 1, v223) == 1)
          {
            outlined destroy of IntelligenceElement?(v222, &lazy cache variable for type metadata for LinkDestination.Configuration?, (void (*)(uint64_t))MEMORY[0x1E0CE2DE8]);
            v224 = 0;
            v225 = 0;
          }
          else
          {
            v226 = v236;
            LinkDestination.Configuration.url.getter();
            outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v222, (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2DE8]);
            v224 = URL.absoluteString.getter();
            v225 = v227;
            v228 = v226;
            v220 = v255;
            (*(void (**)(char *, uint64_t))(v237 + 8))(v228, v238);
          }
          v229 = v259;
          if (!*(_QWORD *)(v259 + 16))
          {
            swift_bridgeObjectRelease();
            v229 = 0;
          }
          LOBYTE(v262) = v210 & 1;
          v230 = v247;
          *v247 = v260;
          v231 = (v253 & 1) == 0;
          *((_BYTE *)v230 + 8) = 0;
          *((_BYTE *)v230 + 9) = v203 != 0;
          v232 = (int)v254;
          *((_DWORD *)v230 + 3) = (_DWORD)v254;
          *((_DWORD *)v230 + 4) = v232;
          v230[3] = v244;
          v230[4] = v243;
          v230[5] = v242;
          v230[6] = v241;
          v230[7] = v240;
          v230[8] = v239;
          v230[9] = v258;
          v230[10] = v205;
          *(_OWORD *)(v230 + 11) = v206;
          *((_BYTE *)v230 + 104) = v231;
          v230[14] = v256;
          *((_BYTE *)v230 + 120) = v210 & 1;
          v230[16] = v219;
          v230[17] = v220;
          v233 = v245;
          v230[18] = v248;
          v230[19] = v233;
          v230[20] = v224;
          v230[21] = v225;
          v230[22] = v229;
          return swift_bridgeObjectRelease();
        }
        v262 = v276;
        v263 = v277;
        v264 = v278;
        if ((AccessibilityValueStorage.isBounded.getter() & 1) == 0)
        {
LABEL_147:
          outlined destroy of AccessibilityValueStorage((uint64_t)&v262);
          goto LABEL_148;
        }
        AccessibilityValueStorage.platformMinValue.getter();
        v184 = MEMORY[0x1E0DEE9B8];
        if (*((_QWORD *)&v277 + 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v185 = v275;
            v186 = objc_msgSend(v275, sel_stringValue);
            v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v189 = v188;

            v190 = v259;
            goto LABEL_141;
          }
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v276, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8);
        }
        v190 = v259;
        v187 = 0;
        v189 = 0xE000000000000000;
LABEL_141:
        v191 = v190;
        v192 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v276 = v191;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v187, v189, 0x756C6156206E694DLL, 0xE900000000000065, v192);
        v193 = v276;
        swift_bridgeObjectRelease();
        AccessibilityValueStorage.platformMaxValue.getter();
        if (*((_QWORD *)&v277 + 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v194 = v275;
            v195 = objc_msgSend(v275, sel_stringValue);
            v196 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v198 = v197;

LABEL_146:
            v199 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v276 = v193;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v196, v198, 0x756C61562078614DLL, 0xE900000000000065, v199);
            v259 = v276;
            swift_bridgeObjectRelease();
            goto LABEL_147;
          }
        }
        else
        {
          outlined destroy of AccessibilityTableContext?((uint64_t)&v276, (unint64_t *)&lazy cache variable for type metadata for Any?, v184 + 8);
        }
        v196 = 0;
        v198 = 0xE000000000000000;
        goto LABEL_146;
      }
      v106 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
      v107 = MEMORY[0x1E0CE5030];
      v108 = &v276;
    }
    else
    {
      v106 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
      v107 = MEMORY[0x1E0CE5E40];
      v108 = &v262;
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v108, v106, v107);
    v104 = 0;
    v241 = 0;
    goto LABEL_77;
  }
  *(_QWORD *)&v276 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v70 & ~(v70 >> 63), 0);
  if (v70 < 0)
  {
    __break(1u);
  }
  else
  {
    v71 = 0;
    v261 = 0;
    v72 = v69 & 0xC000000000000001;
    v73 = v276;
    while (1)
    {
      v74 = v72 ? (char *)MEMORY[0x18D75E3BC](v71, v69) : (char *)*(id *)(v69 + 8 * v71 + 32);
      v75 = v74;
      v76 = (unint64_t *)&v74[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
      swift_beginAccess();
      v77 = *v76;
      if ((v77 & 0x8000000000000000) != 0 || (v77 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        v78 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v77);
        swift_bridgeObjectRelease();
      }
      else
      {
        v78 = v77 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
      }
      *(_QWORD *)&v262 = v78;
      v79 = v261;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v262, 0, 2, 2);
      v261 = v79;
      if (v79)
        break;
      swift_bridgeObjectRelease();
      v80 = v262;
      v81 = MEMORY[0x18D760234](&v75[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
      if (v81)
      {
        v82 = (void *)v81;
        v83 = (unint64_t *)(v81 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
        swift_beginAccess();
        v84 = *v83;
        swift_bridgeObjectRetain();

      }
      else
      {
        v84 = MEMORY[0x1E0DEE9D8];
      }
      *(_QWORD *)&v262 = v80;
      specialized Array.append<A>(contentsOf:)(v84);
      static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(&v262, v75, v262, v68);

      swift_bridgeObjectRelease();
      v85 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v276 = v73;
      if ((v85 & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v73 + 16) + 1, 1);
        v73 = v276;
      }
      v87 = *(_QWORD *)(v73 + 16);
      v86 = *(_QWORD *)(v73 + 24);
      if (v87 >= v86 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v87 + 1, 1);
        v73 = v276;
      }
      ++v71;
      *(_QWORD *)(v73 + 16) = v87 + 1;
      v88 = v73 + 184 * v87;
      v89 = v262;
      v90 = v263;
      v91 = v265;
      *(_OWORD *)(v88 + 64) = v264;
      *(_OWORD *)(v88 + 80) = v91;
      *(_OWORD *)(v88 + 32) = v89;
      *(_OWORD *)(v88 + 48) = v90;
      v92 = v266;
      v93 = v267;
      v94 = v269;
      *(_OWORD *)(v88 + 128) = v268;
      *(_OWORD *)(v88 + 144) = v94;
      *(_OWORD *)(v88 + 96) = v92;
      *(_OWORD *)(v88 + 112) = v93;
      v95 = v270;
      v96 = v271;
      v97 = v272;
      *(_QWORD *)(v88 + 208) = v273;
      *(_OWORD *)(v88 + 176) = v96;
      *(_OWORD *)(v88 + 192) = v97;
      *(_OWORD *)(v88 + 160) = v95;
      v69 = v259;
      if (v70 == v71)
      {
        v248 = v73;
        v38 = (uint64_t)v250;
        goto LABEL_69;
      }
    }
  }
  swift_release();
  __break(1u);
LABEL_169:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void AccessibilityNodeProxy.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  Swift::UInt v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  Swift::UInt64 v24;
  Swift::UInt64 v25;
  Swift::UInt8 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_BYTE *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 9);
  v6 = *(_DWORD *)(v1 + 12);
  v5 = *(_DWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 64);
  v23 = *(_QWORD *)(v1 + 80);
  v24 = *(_QWORD *)(v1 + 88);
  v25 = *(_QWORD *)(v1 + 96);
  v22 = *(_QWORD *)(v1 + 112);
  v26 = *(_BYTE *)(v1 + 104);
  v27 = *(unsigned __int8 *)(v1 + 120);
  v10 = *(_QWORD *)(v1 + 144);
  v28 = *(_QWORD *)(v1 + 128);
  v29 = *(_QWORD *)(v1 + 136);
  v30 = *(_QWORD *)(v1 + 152);
  v31 = *(_QWORD *)(v1 + 168);
  v32 = *(_QWORD *)(v1 + 176);
  Hasher._combine(_:)(*(_QWORD *)v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_6;
LABEL_9:
    Hasher._combine(_:)(0);
    v11 = v30;
    if (v23)
      goto LABEL_7;
    goto LABEL_10;
  }
  Hasher._combine(_:)(0);
  if (!v9)
    goto LABEL_9;
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v11 = v30;
  if (v23)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  Hasher._combine(_:)(0);
LABEL_11:
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  if (v27)
  {
    Hasher._combine(_:)(0);
    if (v28)
      goto LABEL_13;
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v15 = v22;
    else
      v15 = 0;
    Hasher._combine(_:)(v15);
    if (v28)
    {
LABEL_13:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(_QWORD *)(v28 + 16));
      v12 = *(_QWORD *)(v28 + 16);
      if (v12)
      {
        swift_bridgeObjectRetain();
        v13 = v28 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
      }
      v14 = v29;
      if (v29)
        goto LABEL_18;
      goto LABEL_24;
    }
  }
  Hasher._combine(_:)(0);
  v14 = v29;
  if (v29)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v14);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
LABEL_25:
  v16 = *(_QWORD *)(v10 + 16);
  Hasher._combine(_:)(v16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    AccessibilityNodeProxy.hash(into:)(a1);
    v17 = v16 - 1;
    if (v17)
    {
      v18 = v10 + 216;
      do
      {
        AccessibilityNodeProxy.hash(into:)(a1);
        v18 += 184;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
  }
  if (!v11)
  {
    Hasher._combine(_:)(0);
    if (v31)
      goto LABEL_36;
LABEL_39:
    Hasher._combine(_:)(0);
    v21 = v32;
    if (v32)
      goto LABEL_37;
    goto LABEL_40;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v19 = *(_QWORD *)(v11 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    v20 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v20 += 16;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  if (!v31)
    goto LABEL_39;
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v21 = v32;
  if (v32)
  {
LABEL_37:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_40:
  Hasher._combine(_:)(0);
}

uint64_t AccessibilityNodeProxy.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_187AB9214 + 4 * byte_187C892A0[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_187AB9214()
{
  return 0x65757161704F7369;
}

uint64_t sub_187AB922C()
{
  return 0x6F6674616C507369;
}

uint64_t sub_187AB9250()
{
  return 0x696C696269736976;
}

uint64_t sub_187AB926C()
{
  return 0x6C6562616CLL;
}

uint64_t sub_187AB9280()
{
  return 0x65756C6176;
}

uint64_t sub_187AB9294()
{
  return 1953393000;
}

uint64_t sub_187AB92A4()
{
  return 0x696669746E656469;
}

uint64_t sub_187AB92C4()
{
  return 0x737469617274;
}

uint64_t sub_187AB92D8()
{
  return 0x6C62617369447369;
}

uint64_t sub_187AB92F4()
{
  return 0x6F69725074726F73;
}

uint64_t sub_187AB9314()
{
  return 0x736E6F69746361;
}

uint64_t sub_187AB932C()
{
  return 0x6F436D6F74737563;
}

uint64_t sub_187AB9350()
{
  return 0x6E6572646C696863;
}

uint64_t sub_187AB9368()
{
  return 0x62614C7475706E69;
}

uint64_t sub_187AB9388()
{
  return 7107189;
}

uint64_t sub_187AB9398()
{
  return 0x617461646174656DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityNodeProxy.CodingKeys()
{
  unsigned __int8 *v0;

  return AccessibilityNodeProxy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityNodeProxy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized AccessibilityNodeProxy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityNodeProxy.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNodeProxy.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNodeProxy.CodingKeys()
{
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AccessibilityNodeProxy.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v21 - v7;
  v9 = *(unsigned __int8 *)(v1 + 8);
  v39 = *(unsigned __int8 *)(v1 + 9);
  v40 = v9;
  v10 = *(_QWORD *)(v1 + 12);
  v11 = *(_QWORD *)(v1 + 24);
  v37 = *(_QWORD *)(v1 + 32);
  v38 = v11;
  v12 = *(_QWORD *)(v1 + 48);
  v35 = *(_QWORD *)(v1 + 40);
  v36 = v12;
  v13 = *(_QWORD *)(v1 + 56);
  v33 = *(_QWORD *)(v1 + 64);
  v34 = v13;
  v14 = *(_QWORD *)(v1 + 72);
  v31 = *(_QWORD *)(v1 + 80);
  v32 = v14;
  v15 = *(_QWORD *)(v1 + 96);
  v29 = *(_QWORD *)(v1 + 88);
  v30 = v15;
  LODWORD(v14) = *(unsigned __int8 *)(v1 + 104);
  v16 = *(_QWORD *)(v1 + 112);
  v27 = *(unsigned __int8 *)(v1 + 120);
  v28 = v14;
  v25 = *(_QWORD *)(v1 + 128);
  v26 = v16;
  v17 = *(_QWORD *)(v1 + 136);
  v23 = *(_QWORD *)(v1 + 144);
  v24 = v17;
  v22 = *(_QWORD *)(v1 + 152);
  v21[0] = *(_QWORD *)(v1 + 160);
  v18 = *(_QWORD *)(v1 + 176);
  v21[1] = *(_QWORD *)(v1 + 168);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v42) = 0;
  v19 = v41;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v41 = v18;
  LOBYTE(v42) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v42) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v42 = v10;
  v44 = 3;
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v42) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v42) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v42) = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v42) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v42 = v29;
  v43 = v30;
  v44 = 8;
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v42) = 9;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v42) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v42 = v25;
  v44 = 11;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v42 = v24;
  v44 = 12;
  type metadata accessor for [String : String]();
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v42 = v23;
  v44 = 13;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityNodeProxy] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy, MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v42 = v22;
  v44 = 14;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v42) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v42 = v41;
  v44 = 16;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, _QWORD))(v5 + 8))(v8, 0);
}

Swift::Int AccessibilityNodeProxy.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityNodeProxy.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _BYTE v114[7];
  uint64_t v115;
  char v116;
  _BYTE v117[7];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _BYTE v127[7];
  char v128;
  _DWORD v129[3];
  uint64_t v130;

  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityNodeProxy.CodingKeys>, (uint64_t (*)(uint64_t, void *, unint64_t))MEMORY[0x1E0DED048]);
  v85 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v60 - v8;
  v128 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v86 = a1;
  if (v2)
  {
    v87 = v2;
    v130 = 0;
LABEL_4:
    v12 = 0;
    goto LABEL_5;
  }
  v84 = v6;
  v82 = a2;
  LOBYTE(v100) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v100) = 2;
  v81 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v88) = 3;
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v80 = v11;
  v14 = v100;
  v15 = HIDWORD(v100);
  LOBYTE(v100) = 4;
  v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v78 = v15;
  v79 = v14;
  LOBYTE(v100) = 5;
  v17 = v16;
  swift_bridgeObjectRetain();
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v130 = v17;
  v19 = v18;
  LOBYTE(v100) = 6;
  v21 = v20;
  swift_bridgeObjectRetain();
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v76 = v23;
  v73 = v22;
  v74 = v19;
  v24 = v79;
  v75 = v21;
  LOBYTE(v100) = 7;
  swift_bridgeObjectRetain();
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v27 = v26;
  v72 = v25;
  LOBYTE(v88) = 8;
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v87 = 0;
  v28 = v27;
  v70 = v101;
  v71 = v100;
  LOBYTE(v100) = 9;
  v69 = KeyedDecodingContainer.decode(_:forKey:)();
  v87 = 0;
  LOBYTE(v100) = 10;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v68 = v30;
  v87 = 0;
  v31 = v29;
  v128 = v68 & 1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  LOBYTE(v88) = 11;
  v67 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  v32 = v87;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v87 = v32;
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v33 = v100;
  type metadata accessor for [String : String]();
  v35 = v34;
  LOBYTE(v88) = 12;
  v36 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  v66 = v33;
  swift_bridgeObjectRetain();
  v64 = v36;
  v65 = v35;
  v37 = v87;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v87 = v37;
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  v38 = v100;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  LOBYTE(v88) = 13;
  lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityNodeProxy] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy, MEMORY[0x1E0DEAF40]);
  v63 = v38;
  swift_bridgeObjectRetain();
  v39 = v87;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v87 = v39;
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  LOBYTE(v88) = 14;
  v83 = v100;
  swift_bridgeObjectRetain();
  v40 = v87;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v87 = v40;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    v12 = 1;
    goto LABEL_5;
  }
  v41 = v100;
  LOBYTE(v100) = 15;
  v42 = v41;
  swift_bridgeObjectRetain();
  v43 = v87;
  v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v87 = v43;
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v45 = v44;
  v125 = 16;
  swift_bridgeObjectRetain();
  v46 = v87;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v87 = v46;
  if (!v46)
  {
    v47 = v80 & 1;
    LODWORD(v65) = v80 & 1;
    v80 = v81 & 1;
    v81 = v69 & 1;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
    v85 = v126;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v61 = v10;
    *(_QWORD *)&v88 = v10;
    BYTE8(v88) = v47;
    BYTE9(v88) = v80;
    HIDWORD(v88) = v24;
    LODWORD(v89) = v78;
    v48 = v76;
    *((_QWORD *)&v89 + 1) = v77;
    *(_QWORD *)&v90 = v130;
    *((_QWORD *)&v90 + 1) = v74;
    *(_QWORD *)&v91 = v75;
    *((_QWORD *)&v91 + 1) = v73;
    *(_QWORD *)&v92 = v76;
    *((_QWORD *)&v92 + 1) = v72;
    *(_QWORD *)&v93 = v28;
    v60 = v28;
    *((_QWORD *)&v93 + 1) = v71;
    *(_QWORD *)&v94 = v70;
    BYTE8(v94) = v81;
    v62 = v31;
    *(_QWORD *)&v95 = v31;
    BYTE8(v95) = v68 & 1;
    v49 = v66;
    v50 = v63;
    *(_QWORD *)&v96 = v66;
    *((_QWORD *)&v96 + 1) = v63;
    v51 = v83;
    *(_QWORD *)&v97 = v83;
    *((_QWORD *)&v97 + 1) = v42;
    *(_QWORD *)&v98 = v67;
    *((_QWORD *)&v98 + 1) = v45;
    v52 = v85;
    v99 = v85;
    outlined retain of AccessibilityNodeProxy((uint64_t)&v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 = v60;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54 = v97;
    v55 = v82;
    *(_OWORD *)(v82 + 128) = v96;
    *(_OWORD *)(v55 + 144) = v54;
    *(_OWORD *)(v55 + 160) = v98;
    *(_QWORD *)(v55 + 176) = v99;
    v56 = v93;
    *(_OWORD *)(v55 + 64) = v92;
    *(_OWORD *)(v55 + 80) = v56;
    v57 = v95;
    *(_OWORD *)(v55 + 96) = v94;
    *(_OWORD *)(v55 + 112) = v57;
    v58 = v89;
    *(_OWORD *)v55 = v88;
    *(_OWORD *)(v55 + 16) = v58;
    v59 = v91;
    *(_OWORD *)(v55 + 32) = v90;
    *(_OWORD *)(v55 + 48) = v59;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    v100 = v61;
    LOBYTE(v101) = v65;
    BYTE1(v101) = v80;
    HIDWORD(v101) = v79;
    v102 = v78;
    v103 = v77;
    v104 = v130;
    v105 = v74;
    v106 = v75;
    v107 = v73;
    v108 = v48;
    v109 = v72;
    v110 = v53;
    v111 = v71;
    v112 = v70;
    v113 = v81;
    *(_DWORD *)v114 = v129[0];
    *(_DWORD *)&v114[3] = *(_DWORD *)((char *)v129 + 3);
    v115 = v62;
    v116 = v128;
    *(_DWORD *)v117 = *(_DWORD *)v127;
    *(_DWORD *)&v117[3] = *(_DWORD *)&v127[3];
    v118 = v49;
    v119 = v50;
    v120 = v51;
    v121 = v42;
    v122 = v67;
    v123 = v45;
    v124 = v52;
    return outlined release of AccessibilityNodeProxy((uint64_t)&v100);
  }
  (*(void (**)(char *, uint64_t))(v84 + 8))(v9, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = 1;
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityNodeProxy()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNodeProxy()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNodeProxy@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityNodeProxy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNodeProxy(_QWORD *a1)
{
  return AccessibilityNodeProxy.encode(to:)(a1);
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  v11 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v5)
        goto LABEL_19;
      v9 = *(_QWORD *)(v11 + 8 * v7);
      if (!v9)
        break;
    }
LABEL_18:
    v4 = (v9 - 1) & v9;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
  }
  v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  v9 = *(_QWORD *)(v11 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

BOOL specialized static AccessibilityNodeProxy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;

  result = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) != 0
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return result;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v132 = *(_QWORD *)(a1 + 40);
  v138 = *(_QWORD *)(a1 + 48);
  v128 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v136 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(unsigned __int8 *)(a1 + 104);
  v10 = *(double *)(a1 + 112);
  v11 = *(_BYTE *)(a1 + 120);
  v12 = *(_QWORD **)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD **)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 168);
  v18 = *(_QWORD *)(a1 + 176);
  v19 = *(_QWORD *)(a2 + 32);
  v129 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v127 = *(_QWORD *)(a2 + 56);
  v135 = *(_QWORD *)(a2 + 64);
  v125 = *(_QWORD *)(a2 + 72);
  v126 = *(_QWORD *)(a2 + 80);
  v21 = *(unsigned __int8 *)(a2 + 104);
  v22 = *(double *)(a2 + 112);
  v23 = *(unsigned __int8 *)(a2 + 120);
  v25 = *(_QWORD **)(a2 + 128);
  v24 = *(_QWORD *)(a2 + 136);
  v27 = *(_QWORD *)(a2 + 144);
  v26 = *(_QWORD **)(a2 + 152);
  v29 = *(_QWORD *)(a2 + 160);
  v28 = *(_QWORD *)(a2 + 168);
  v30 = *(_QWORD *)(a2 + 176);
  if (!v4)
  {
    v123 = *(_QWORD *)(a2 + 96);
    v124 = *(_QWORD *)(a2 + 88);
    if (v19)
      return 0;
    goto LABEL_13;
  }
  if (!v19)
    return 0;
  v123 = *(_QWORD *)(a2 + 96);
  v124 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && v4 == v19)
    goto LABEL_13;
  v98 = *(unsigned __int8 *)(a2 + 120);
  v102 = *(unsigned __int8 *)(a1 + 104);
  v88 = *(_QWORD *)(a1 + 136);
  v91 = *(_QWORD *)(a1 + 144);
  v81 = *(_QWORD **)(a1 + 152);
  v82 = *(_QWORD **)(a2 + 152);
  v95 = *(_QWORD *)(a1 + 168);
  v97 = *(_QWORD *)(a1 + 160);
  v31 = *(_QWORD *)(a2 + 176);
  v32 = *(_QWORD *)(a1 + 176);
  v118 = *(_QWORD *)(a2 + 136);
  v106 = *(_QWORD **)(a2 + 128);
  v110 = *(_QWORD **)(a1 + 128);
  v85 = *(_BYTE *)(a1 + 120);
  v33 = *(_QWORD *)(a2 + 160);
  v34 = *(_QWORD *)(a2 + 168);
  v35 = *(_QWORD *)(a1 + 96);
  v36 = *(unsigned __int8 *)(a2 + 104);
  v37 = *(_QWORD *)(a1 + 88);
  v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v6 = v37;
  v21 = v36;
  v8 = v35;
  v23 = v98;
  v9 = v102;
  v28 = v34;
  v29 = v33;
  v15 = v81;
  v26 = v82;
  v12 = v110;
  v25 = v106;
  v11 = v85;
  v24 = v118;
  v18 = v32;
  v30 = v31;
  v17 = v95;
  v16 = v97;
  v13 = v88;
  v14 = v91;
  v39 = v38;
  result = 0;
  if ((v39 & 1) != 0)
  {
LABEL_13:
    if (v138)
    {
      if (!v20)
        return 0;
      if (v132 != v129 || v138 != v20)
      {
        v103 = v9;
        v96 = v17;
        v92 = v30;
        v114 = v27;
        v119 = v24;
        v40 = v18;
        v130 = v7;
        v41 = v14;
        v42 = v26;
        v133 = v29;
        v107 = v25;
        v111 = v12;
        v43 = v11;
        v99 = v23;
        v139 = v21;
        v44 = v13;
        v45 = v28;
        v46 = v8;
        v47 = v6;
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v6 = v47;
        v8 = v46;
        v23 = v99;
        v9 = v103;
        v28 = v45;
        v13 = v44;
        v21 = v139;
        v25 = v107;
        v12 = v111;
        v11 = v43;
        v29 = v133;
        v26 = v42;
        v14 = v41;
        v7 = v130;
        v18 = v40;
        v27 = v114;
        v24 = v119;
        v30 = v92;
        v17 = v96;
        v49 = v48;
        result = 0;
        if ((v49 & 1) == 0)
          return result;
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v136)
    {
      if (!v135)
        return 0;
      if (v128 != v127 || v136 != v135)
      {
        v104 = v9;
        v115 = v27;
        v120 = v24;
        v50 = v15;
        v51 = v18;
        v93 = v14;
        v52 = v26;
        v134 = v29;
        v108 = v25;
        v112 = v12;
        v86 = v11;
        v100 = v23;
        v89 = v13;
        v53 = v28;
        v54 = v8;
        v131 = v7;
        v55 = v6;
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v6 = v55;
        v7 = v131;
        v8 = v54;
        v23 = v100;
        v9 = v104;
        v28 = v53;
        v13 = v89;
        v14 = v93;
        v25 = v108;
        v12 = v112;
        v11 = v86;
        v29 = v134;
        v26 = v52;
        v18 = v51;
        v15 = v50;
        v27 = v115;
        v24 = v120;
        v57 = v56;
        result = 0;
        if ((v57 & 1) == 0)
          return result;
      }
    }
    else if (v135)
    {
      return 0;
    }
    if (v7)
    {
      v58 = v124;
      if (!v126)
        return 0;
      if (v5 != v125 || v7 != v126)
      {
        v140 = v21;
        v59 = v6;
        v101 = v23;
        v105 = v9;
        v60 = v8;
        v109 = v25;
        v113 = v12;
        v87 = v11;
        v116 = v27;
        v121 = v24;
        v90 = v13;
        v94 = v14;
        v83 = v26;
        v61 = v15;
        v62 = v28;
        v63 = v18;
        v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = 0;
        if ((v64 & 1) == 0)
          return result;
        if (v59 != v124)
          return result;
        if (v60 != v123)
          return result;
        v18 = v63;
        v28 = v62;
        v23 = v101;
        v15 = v61;
        v13 = v90;
        v14 = v94;
        v26 = v83;
        v27 = v116;
        v24 = v121;
        v25 = v109;
        v12 = v113;
        v11 = v87;
        if (((v105 ^ v140) & 1) != 0)
          return result;
LABEL_40:
        if ((v11 & 1) != 0)
        {
          if (!v23)
            return 0;
        }
        else
        {
          if (v10 == v22)
            v65 = v23;
          else
            v65 = 1;
          if ((v65 & 1) != 0)
            return 0;
        }
        if (v12)
        {
          if (!v25)
            return 0;
          v117 = v27;
          v122 = v24;
          v66 = v15;
          v67 = v18;
          v68 = v14;
          v69 = v26;
          v70 = v13;
          v71 = v28;
          v72 = specialized static Array<A>.== infix(_:_:)(v12, v25);
          v28 = v71;
          v13 = v70;
          v26 = v69;
          v14 = v68;
          v18 = v67;
          v15 = v66;
          v27 = v117;
          if ((v72 & 1) == 0)
            return 0;
        }
        else
        {
          v122 = v24;
          if (v25)
            return 0;
        }
        if (v13)
        {
          if (!v122)
            return 0;
          v84 = v26;
          v73 = v14;
          v74 = v15;
          v137 = v18;
          v141 = v28;
          swift_bridgeObjectRetain();
          v75 = swift_bridgeObjectRetain();
          v76 = specialized static Dictionary<>.== infix(_:_:)(v75, v122);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) == 0)
            return 0;
        }
        else
        {
          v84 = v26;
          v73 = v14;
          v74 = v15;
          v137 = v18;
          v141 = v28;
          if (v122)
            return 0;
        }
        if ((specialized static Array<A>.== infix(_:_:)(v73, v27) & 1) != 0)
        {
          if (v74)
          {
            if (!v84 || (specialized static Array<A>.== infix(_:_:)(v74, v84) & 1) == 0)
              return 0;
          }
          else if (v84)
          {
            return 0;
          }
          if (v17)
          {
            if (!v141)
              return 0;
            v77 = v137;
            if (v16 != v29 || v17 != v141)
            {
              v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
              result = 0;
              if ((v78 & 1) == 0)
                return result;
            }
          }
          else
          {
            v77 = v137;
            if (v141)
              return 0;
          }
          if (v77)
          {
            if (!v30)
              return 0;
            swift_bridgeObjectRetain();
            v79 = swift_bridgeObjectRetain();
            v80 = specialized static Dictionary<>.== infix(_:_:)(v79, v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (v80 & 1) != 0;
          }
          if (!v30)
            return 1;
        }
        return 0;
      }
    }
    else
    {
      v58 = v124;
      if (v126)
        return 0;
    }
    result = 0;
    if (v6 != v58 || v8 != v123 || ((v9 ^ v21) & 1) != 0)
      return result;
    goto LABEL_40;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy.CodingKeys, &unk_1E1ADA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy.CodingKeys, &unk_1E1ADA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy.CodingKeys, &unk_1E1ADA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityNodeProxy.CodingKeys, &unk_1E1ADA710);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitStorageProxy, &type metadata for AccessibilityTraitStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitStorageProxy, &type metadata for AccessibilityTraitStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityTraitStorageProxy, &type metadata for AccessibilityTraitStorageProxy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
    v7 = a3(a1, &unk_1E1ADA710, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = a2;
    result = MEMORY[0x18D75FFDC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x18D75FFDC](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of AccessibilityNodeProxy(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AccessibilityNodeProxy(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AccessibilityNodeProxy()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  v8 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v8;
  v9 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNodeProxy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNodeProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityNodeProxy.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNodeProxy.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_187ABB884 + 4 * byte_187C892B6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_187ABB8B8 + 4 * byte_187C892B1[v4]))();
}

uint64_t sub_187ABB8B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187ABB8C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187ABB8C8);
  return result;
}

uint64_t sub_187ABB8D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187ABB8DCLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_187ABB8E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187ABB8E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AccessibilityNodeProxy.CodingKeys()
{
  return &unk_1E1ADA710;
}

uint64_t specialized AccessibilityNodeProxy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65757161704F7369 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6674616C507369 && a2 == 0xEE0065646F4E6D72
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6C62617369447369 && a2 == 0xEA00000000006465
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F69725074726F73 && a2 == 0xEC00000079746972
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6F436D6F74737563 && a2 == 0xED0000746E65746ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x62614C7475706E69 && a2 == 0xEB00000000736C65
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t outlined init with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E0CE5030], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation3URLV_s5NeverO7SwiftUI19FileExportOperationVTg503_s7f158UI4ViewPAAE10_fileMover33_CF0E99507E0561E72608AD5A23D06699LL11isPresented0D012onCompletion0O12CancellationQrAA7BindingVySbG_10Foundation3URLVSgys6ResultOyAOs5b13_pGcyyctFAA19hiJ8VAOXEfU_AI7BindingVySbGs6ResultOyAFsAC_pGIegn_Ieg_Tf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v26;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a8;
  v30 = a7;
  v31 = a6;
  v29 = a5;
  v28 = a4;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = &v27[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v27[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v22, v23);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14) == 1)
  {
    v24 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a9, 1, 1, v24);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v18, v22, v14);
    closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)((uint64_t)v18, a2, a3, v28 & 1, v29, v31, v30, v32, a9);
    if (v9)
    {
      (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
    v26 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a9, 0, 1, v26);
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.fileMover(isPresented:file:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, a7, a8);
}

uint64_t View._fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v35 = a7;
  v36 = a8;
  v33 = a5;
  v34 = a6;
  v37 = a9;
  v39 = a11;
  v38 = a10;
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v42 = a2;
  v43 = a3;
  type metadata accessor for Binding<Bool>();
  v24 = v23;
  MEMORY[0x18D75B9C8](&v44);
  v25 = v44;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a4, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  if (v25 == 1)
  {
    v26 = type metadata accessor for URL();
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v22, 1, v26);
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
    if (v27 == 1)
    {
      static os_log_type_t.fault.getter();
      v28 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();

    }
  }
  else
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for URL?);
  }
  v41 = a1;
  v42 = a2;
  v43 = a3 & 1;
  MEMORY[0x18D75B9C8](&v40, v24);
  if (v40 == 1)
  {
    swift_retain();
    swift_retain();
    v29 = v34;
    swift_retain();
    v30 = v36;
    swift_retain();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation3URLV_s5NeverO7SwiftUI19FileExportOperationVTg503_s7f158UI4ViewPAAE10_fileMover33_CF0E99507E0561E72608AD5A23D0669911isPresented0D012onCompletion0O12CancellationQrAA7BindingVySbG_10Foundation3URLVSgys6ResultOyAOs5b13_pGcyyctFAA19hiJ8VAOXEfU_AI7BindingVySbGs6ResultOyAFsAC_pGIegn_Ieg_Tf1ncn_n(a4, a1, a2, a3 & 1, v33, v29, v35, v30, (uint64_t)v18);
  }
  else
  {
    v31 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v18, 1, 1, v31);
  }
  View.preference<A>(key:value:)();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FileExportOperation?);
}

uint64_t View.fileMover<A>(isPresented:files:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, a7, a8, a10, a11);
}

uint64_t View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t *v52;
  char *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v74 = a6;
  v75 = a8;
  v72 = a5;
  v73 = a7;
  v81 = a9;
  v76 = a13;
  v77 = a12;
  v80 = a10;
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v79 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (uint64_t *)((char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v71 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v71 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v71 - v34;
  v78 = a1;
  v86 = a1;
  v87 = a2;
  v84 = a2;
  v36 = a3 & 1;
  v88 = a3;
  type metadata accessor for Binding<Bool>();
  v38 = v37;
  MEMORY[0x18D75B9C8](&v89);
  LODWORD(a2) = v89;
  v82 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v83 = a4;
  v82(v35, a4, a11);
  if ((_DWORD)a2 == 1)
  {
    v39 = dispatch thunk of Collection.isEmpty.getter();
    v40 = *(void (**)(char *, uint64_t))(v24 + 8);
    v40(v35, a11);
    if ((v39 & 1) != 0)
    {
      static os_log_type_t.fault.getter();
      v41 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();

    }
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v24 + 8);
    v40(v35, a11);
  }
  v42 = v84;
  v43 = v78;
  v86 = v78;
  v87 = v84;
  v88 = v36;
  MEMORY[0x18D75B9C8](&v85, v38);
  v44 = v85;
  v82(v31, v83, a11);
  if (v44 != 1)
  {
    v40(v31, a11);
    v46 = v77;
    goto LABEL_9;
  }
  LODWORD(v78) = v36;
  v45 = dispatch thunk of Collection.isEmpty.getter();
  v40(v31, a11);
  v46 = v77;
  if ((v45 & 1) != 0)
  {
LABEL_9:
    v61 = type metadata accessor for FileExportOperation(0);
    v52 = (uint64_t *)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v79, 1, 1, v61);
    goto LABEL_10;
  }
  v82(v71, v83, a11);
  v47 = v43;
  v48 = type metadata accessor for URL();
  v83 = Array.init<A>(_:)();
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = v47;
  *(_QWORD *)(v49 + 24) = v42;
  *(_BYTE *)(v49 + 32) = v78;
  v50 = v74;
  *(_QWORD *)(v49 + 40) = v72;
  *(_QWORD *)(v49 + 48) = v50;
  v51 = (int *)type metadata accessor for FileExportOperation(0);
  v52 = (uint64_t *)v79;
  v53 = &v79[v51[5]];
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))((char *)v52 + v51[6], 1, 1, v48);
  v54 = (_OWORD *)((char *)v52 + v51[7]);
  *v54 = 0u;
  v54[1] = 0u;
  v55 = (_OWORD *)((char *)v52 + v51[8]);
  *v55 = 0u;
  v55[1] = 0u;
  v56 = (_OWORD *)((char *)v52 + v51[9]);
  *v56 = 0u;
  v56[1] = 0u;
  v57 = (char *)v52 + v51[10];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 1, 1, v58);
  *((_BYTE *)v52 + v51[11]) = 2;
  v59 = (char *)v52 + v51[12];
  *(_QWORD *)v59 = 0;
  v59[8] = 1;
  *v52 = v83;
  v52[1] = (uint64_t)partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
  v60 = v73;
  v52[2] = v49;
  v52[3] = v60;
  v52[4] = v75;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v51 - 1) + 56))(v52, 0, 1, v51);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_10:
  *v23 = swift_getKeyPath();
  v62 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  swift_storeEnumTagMultiPayload();
  v63 = (char *)v23 + v20[13];
  *(_QWORD *)v63 = swift_getKeyPath();
  *((_QWORD *)v63 + 1) = 0;
  v63[16] = 0;
  v64 = (char *)v23 + v20[14];
  *(_QWORD *)v64 = swift_getKeyPath();
  *((_QWORD *)v64 + 1) = 0;
  *((_QWORD *)v64 + 2) = 0;
  *((_QWORD *)v64 + 3) = 0;
  v64[32] = 0;
  v65 = (char *)v23 + v20[15];
  *(_QWORD *)v65 = swift_getKeyPath();
  *((_QWORD *)v65 + 1) = 0;
  *((_QWORD *)v65 + 2) = 0;
  *((_QWORD *)v65 + 3) = 0;
  v65[32] = 0;
  v66 = (char *)v23 + v20[16];
  *(_QWORD *)v66 = swift_getKeyPath();
  *((_QWORD *)v66 + 1) = 0;
  *((_QWORD *)v66 + 2) = 0;
  *((_QWORD *)v66 + 3) = 0;
  v66[32] = 0;
  v67 = (uint64_t *)((char *)v23 + v20[17]);
  *v67 = swift_getKeyPath();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, v62);
  swift_storeEnumTagMultiPayload();
  v68 = (char *)v23 + v20[18];
  *(_QWORD *)v68 = swift_getKeyPath();
  v68[8] = 0;
  v69 = (char *)v23 + v20[19];
  *(_QWORD *)v69 = swift_getKeyPath();
  *((_WORD *)v69 + 4) = 0;
  *(uint64_t *)((char *)v23 + v20[20]) = (uint64_t)&type metadata for FileExportOperation.Key;
  outlined init with take of TableCellFormula((uint64_t)v52, (uint64_t)v23 + v20[21], (uint64_t (*)(_QWORD))type metadata accessor for FileExportOperation?);
  MEMORY[0x18D75B4AC](v23, v80, v20, v46);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
}

uint64_t View.fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t View.fileMover<A>(isPresented:files:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_187ABD050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _PreferenceWritingModifier<FileExportOperation.Key>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<FileExportOperation.Key> and conformance _PreferenceWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceWritingModifier<FileExportOperation.Key>, MEMORY[0x1E0CE60F0]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

void type metadata accessor for _PreferenceWritingModifier<FileExportOperation.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<FileExportOperation.Key>)
  {
    v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<FileExportOperation.Key>);
  }
}

uint64_t sub_187ABD12C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 16);
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FileDialogConfiguration<FileExportOperation.Key, FileExportOperation> and conformance FileDialogConfiguration<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>, (uint64_t)&protocol conformance descriptor for FileDialogConfiguration<A, B>);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>;
  if (!lazy cache variable for type metadata for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>)
  {
    type metadata accessor for FileExportOperation(255);
    type metadata accessor for FileDialogConfiguration();
  }
  return result;
}

uint64_t closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (**v26)(uint64_t);
  uint64_t (**v27)();
  int *v28;
  _QWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a6;
  v42 = a8;
  v39 = a5;
  v40 = a7;
  v38 = a3;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, a1, v14, v17);
  v20 = swift_allocObject();
  v22 = v38;
  v21 = v39;
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = v22;
  *(_BYTE *)(v20 + 32) = a4;
  *(_QWORD *)(v20 + 40) = v21;
  *(_QWORD *)(v20 + 48) = a6;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = a2;
  *(_QWORD *)(v23 + 24) = v22;
  *(_BYTE *)(v23 + 32) = a4;
  v24 = v42;
  *(_QWORD *)(v23 + 40) = v40;
  *(_QWORD *)(v23 + 48) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a9, v19, v14);
  v25 = type metadata accessor for FileExportOperation.Move(0);
  v26 = (uint64_t (**)(uint64_t))(a9 + *(int *)(v25 + 20));
  *v26 = partial apply for closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:);
  v26[1] = (uint64_t (*)(uint64_t))v20;
  v27 = (uint64_t (**)())(a9 + *(int *)(v25 + 24));
  *v27 = partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
  v27[1] = (uint64_t (*)())v23;
  v28 = (int *)type metadata accessor for FileExportOperation(0);
  v29 = (_QWORD *)(a9 + v28[5]);
  *v29 = 0;
  v29[1] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a9 + v28[6], 1, 1, v14);
  v30 = (_OWORD *)(a9 + v28[7]);
  *v30 = 0u;
  v30[1] = 0u;
  v31 = (_OWORD *)(a9 + v28[8]);
  *v31 = 0u;
  v31[1] = 0u;
  v32 = (_OWORD *)(a9 + v28[9]);
  *v32 = 0u;
  v32[1] = 0u;
  v33 = a9 + v28[10];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  *(_BYTE *)(a9 + v28[11]) = 2;
  v35 = a9 + v28[12];
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_BYTE *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  _BYTE v20[16];

  type metadata accessor for Result<URL, Error>?(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Result<URL, Error>();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = &v20[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20[15] = 0;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Result<URL, Error>?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    v17 = (uint64_t (*)(_QWORD))type metadata accessor for Result<URL, Error>?;
    v18 = (uint64_t)v10;
  }
  else
  {
    outlined init with take of TableCellFormula((uint64_t)v10, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Result<URL, Error>);
    a5(v16);
    v18 = (uint64_t)v16;
    v17 = (uint64_t (*)(_QWORD))type metadata accessor for Result<URL, Error>;
  }
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v18, v17);
}

uint64_t partial apply for closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void (**)(_BYTE *))(v1 + 40));
}

void type metadata accessor for Result<URL, Error>?(uint64_t a1)
{
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(a1, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t initializeWithCopy for NavigationListState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationListState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NavigationListState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationListState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationListState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationListState()
{
  return &type metadata for NavigationListState;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = 0uLL;
  if (*(_QWORD *)(a2 + 16))
  {
    result = specialized __RawDictionaryStorage.find<A>(_:)(result);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(a2 + 56) + 40 * result;
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)(v7 + 8);
      v11 = *(_OWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 32);
      swift_retain();
      swift_retain();
      result = swift_retain();
      v4 = v11;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v4 = 0uLL;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_OWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 32) = v10;
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 32 * v4);
  swift_retain();
  swift_retain();
  swift_retain();
  return v6;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (v4)
  {
    v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v9 = v8 | (v7 << 6);
LABEL_21:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = v13 + 40;
      do
      {
        swift_retain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
        v15 += 24;
        --v14;
      }
      while (v14);
      result = swift_bridgeObjectRelease();
    }
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v10 >= v5)
    return swift_release();
  v11 = *(_QWORD *)(v16 + 8 * v10);
  ++v7;
  if (v11)
    goto LABEL_20;
  v7 = v10 + 1;
  if (v10 + 1 >= v5)
    return swift_release();
  v11 = *(_QWORD *)(v16 + 8 * v7);
  if (v11)
    goto LABEL_20;
  v7 = v10 + 2;
  if (v10 + 2 >= v5)
    return swift_release();
  v11 = *(_QWORD *)(v16 + 8 * v7);
  if (v11)
    goto LABEL_20;
  v7 = v10 + 3;
  if (v10 + 3 >= v5)
    return swift_release();
  v11 = *(_QWORD *)(v16 + 8 * v7);
  if (v11)
    goto LABEL_20;
  v12 = v10 + 4;
  if (v12 >= v5)
    return swift_release();
  v11 = *(_QWORD *)(v16 + 8 * v12);
  v7 = v12;
  if (v11)
  {
LABEL_20:
    v4 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v5)
      return swift_release();
    v11 = *(_QWORD *)(v16 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *NavigationListState.update(for:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  __int16 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  unint64_t v32;
  char v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  __int128 v38[4];
  __int16 v39;
  __int128 __src[18];
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v5 = v3;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (_DWORD *)(a1 + 65);
  v16 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v19 = (int *)(a1 + 105);
  v20 = *(_BYTE *)(a1 + 104);
  v21 = (__int128 *)(a1 + 120);
  v22 = *(_QWORD *)(a1 + 112);
  switch(*(_BYTE *)(a1 + 64))
  {
    case 2:
      v23 = *(_OWORD *)(a1 + 136);
      *(__int128 *)((char *)&__src[7] + 8) = *v21;
      *(_QWORD *)&__src[0] = v6;
      *((_QWORD *)&__src[0] + 1) = v7;
      *(_QWORD *)&__src[1] = v9;
      *((_QWORD *)&__src[1] + 1) = v8;
      *(_QWORD *)&__src[2] = v11;
      *((_QWORD *)&__src[2] + 1) = v10;
      *(_QWORD *)&__src[3] = v12;
      *((_QWORD *)&__src[3] + 1) = v13;
      LOBYTE(__src[4]) = 2;
      *(_DWORD *)((char *)&__src[4] + 1) = *v14;
      DWORD1(__src[4]) = *(_DWORD *)(a1 + 68);
      *((_QWORD *)&__src[4] + 1) = v16;
      *(_QWORD *)&__src[5] = v15;
      *((_QWORD *)&__src[5] + 1) = v18;
      *(_QWORD *)&__src[6] = v17;
      BYTE8(__src[6]) = v20;
      v24 = *v19;
      HIDWORD(__src[6]) = *(_DWORD *)(a1 + 108);
      *(_DWORD *)((char *)&__src[6] + 9) = v24;
      *(_QWORD *)&__src[7] = v22;
      *(__int128 *)((char *)&__src[8] + 8) = v23;
      swift_retain();
      swift_retain();
      swift_retain();
      NavigationListState.setSelection(_:locationID:metatypeID:request:)(v6, v7, v9, v8, v11, (uint64_t)__src, a3);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 7:
      v25 = *(_WORD *)(a2 + 64);
      *(_QWORD *)&__src[0] = v6;
      *((_QWORD *)&__src[0] + 1) = v7;
      *(_QWORD *)&__src[1] = v9;
      *((_QWORD *)&__src[1] + 1) = v8;
      *(_QWORD *)&__src[2] = v11;
      *((_QWORD *)&__src[2] + 1) = v10;
      *(_QWORD *)&__src[3] = v12;
      *((_QWORD *)&__src[3] + 1) = v13;
      LOBYTE(__src[4]) = 7;
      *(_DWORD *)((char *)&__src[4] + 1) = *v14;
      DWORD1(__src[4]) = *(_DWORD *)((char *)v14 + 3);
      *((_QWORD *)&__src[4] + 1) = v16;
      *(_QWORD *)&__src[5] = v15;
      *((_QWORD *)&__src[5] + 1) = v18;
      *(_QWORD *)&__src[6] = v17;
      BYTE8(__src[6]) = v20;
      v26 = *v19;
      HIDWORD(__src[6]) = *(int *)((char *)v19 + 3);
      *(_DWORD *)((char *)&__src[6] + 9) = v26;
      *(_QWORD *)&__src[7] = v22;
      v27 = v21[1];
      *(__int128 *)((char *)&__src[7] + 8) = *v21;
      *(__int128 *)((char *)&__src[8] + 8) = v27;
      v28 = *(_OWORD *)(a2 + 16);
      v38[0] = *(_OWORD *)a2;
      v38[1] = v28;
      v29 = *(_OWORD *)(a2 + 48);
      v38[2] = *(_OWORD *)(a2 + 32);
      v38[3] = v29;
      v39 = v25;
      return NavigationListState.boundSelectionChange(metatypeID:request:splitViewState:)(v6, (uint64_t)__src, (uint64_t)v38, a3);
    case 8:
      v31 = *(_QWORD *)(v5 + 8);
      if (*(_QWORD *)(v31 + 16)
        && (*(_QWORD *)&v41 = *(_QWORD *)(a1 + 72),
            *((_QWORD *)&v41 + 1) = v15,
            v42 = v18,
            v43 = v17,
            v44 = v20 & 1,
            v45 = v22,
            v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v41),
            (v33 & 1) != 0)
        && *(_QWORD *)(*(_QWORD *)(v31 + 56) + 40 * v32 + 32) == v7)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&__src[0] = *(_QWORD *)(v5 + 32);
        *(_QWORD *)(v5 + 32) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6 & 1, &v41, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v5 + 32) = *(_QWORD *)&__src[0];
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v38);
LABEL_4:
        __src[0] = xmmword_187BFE310;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult(v38, (__int128 *)((char *)&__src[1] + 8));
      }
      else
      {
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v38);
        __src[0] = xmmword_187BFE310;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult(v38, (__int128 *)((char *)&__src[1] + 8));
      }
      *(_QWORD *)((char *)&__src[17] + 4) = 0;
      return memcpy(a3, __src, 0x11CuLL);
    case 0xA:
      v34 = *(_OWORD *)(a1 + 136);
      *(__int128 *)((char *)&__src[7] + 8) = *v21;
      *(_QWORD *)&__src[0] = v6;
      *((_QWORD *)&__src[0] + 1) = v7;
      *(_QWORD *)&__src[1] = v9;
      *((_QWORD *)&__src[1] + 1) = v8;
      *(_QWORD *)&__src[2] = v11;
      *((_QWORD *)&__src[2] + 1) = v10;
      *(_QWORD *)&__src[3] = v12;
      *((_QWORD *)&__src[3] + 1) = v13;
      LOBYTE(__src[4]) = 10;
      *(_DWORD *)((char *)&__src[4] + 1) = *v14;
      DWORD1(__src[4]) = *(_DWORD *)(a1 + 68);
      *((_QWORD *)&__src[4] + 1) = v16;
      *(_QWORD *)&__src[5] = v15;
      *((_QWORD *)&__src[5] + 1) = v18;
      *(_QWORD *)&__src[6] = v17;
      BYTE8(__src[6]) = v20;
      v35 = *v19;
      HIDWORD(__src[6]) = *(_DWORD *)(a1 + 108);
      *(_DWORD *)((char *)&__src[6] + 9) = v35;
      *(_QWORD *)&__src[7] = v22;
      *(__int128 *)((char *)&__src[8] + 8) = v34;
      swift_retain();
      swift_retain();
      v36 = swift_retain();
      NavigationListState.presentValue(_:activeBinding:request:splitViewState:)(v36, v7, v9, v8 & 1, __src, a3);
      swift_release();
      swift_release();
      return (void *)swift_release();
    default:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v38);
      goto LABEL_4;
  }
}

uint64_t NavigationListState.hasNonEmptySelection.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v1 + 56) + 8 * i) + 80);
    v15 = swift_retain();
    if ((v14(v15) & 1) == 0)
    {
      v16 = 1;
LABEL_28:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v16;
    }
    result = swift_release();
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v11 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (v12)
      goto LABEL_22;
    v8 = v11 + 1;
    if (v11 + 1 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    if (v12)
      goto LABEL_22;
    v8 = v11 + 2;
    if (v11 + 2 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    if (v12)
      goto LABEL_22;
    v8 = v11 + 3;
    if (v11 + 3 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    if (v12)
      goto LABEL_22;
    v8 = v11 + 4;
    if (v11 + 4 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    if (v12)
      goto LABEL_22;
    v13 = v11 + 5;
    if (v13 >= v6)
    {
LABEL_27:
      v16 = 0;
      goto LABEL_28;
    }
    v12 = *(_QWORD *)(v2 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v8 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_30;
        if (v8 >= v6)
          goto LABEL_27;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        ++v13;
        if (v12)
          goto LABEL_22;
      }
    }
    v8 = v13;
LABEL_22:
    v5 = (v12 - 1) & v12;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall NavigationListState.isAnyEditing()()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Bool result;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v2 + 64;
  v6 = v4 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v3 + 63) >> 6;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v1 << 6);
LABEL_5:
    if (*(_BYTE *)(*(_QWORD *)(v2 + 56) + v9) == 1)
      return 1;
  }
  v10 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v10);
  ++v1;
  if (v11)
    goto LABEL_24;
  v1 = v10 + 1;
  if (v10 + 1 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v1);
  if (v11)
    goto LABEL_24;
  v1 = v10 + 2;
  if (v10 + 2 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v1);
  if (v11)
    goto LABEL_24;
  v1 = v10 + 3;
  if (v10 + 3 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v1);
  if (v11)
    goto LABEL_24;
  v1 = v10 + 4;
  if (v10 + 4 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v1);
  if (v11)
  {
LABEL_24:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v1 << 6);
    goto LABEL_5;
  }
  v12 = v10 + 5;
  if (v12 >= v7)
    return 0;
  v11 = *(_QWORD *)(v5 + 8 * v12);
  if (v11)
  {
    v1 = v12;
    goto LABEL_24;
  }
  while (1)
  {
    v1 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v1 >= v7)
      return 0;
    v11 = *(_QWORD *)(v5 + 8 * v1);
    ++v12;
    if (v11)
      goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall NavigationListState.clearAllSelections()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Bool result;
  int64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _OWORD v34[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (!*(_QWORD *)(v2 + 16) && !*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
    return 0;
  v31 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v32 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  if (v5)
    goto LABEL_9;
LABEL_10:
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    if (v10 >= v32)
      goto LABEL_37;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    ++v7;
    if (v11)
      goto LABEL_23;
    v7 = v10 + 1;
    if (v10 + 1 >= v32)
      goto LABEL_37;
    v11 = *(_QWORD *)(v31 + 8 * v7);
    if (v11)
      goto LABEL_23;
    v7 = v10 + 2;
    if (v10 + 2 >= v32)
      goto LABEL_37;
    v11 = *(_QWORD *)(v31 + 8 * v7);
    if (v11)
      goto LABEL_23;
    v12 = v10 + 3;
    if (v12 >= v32)
    {
LABEL_37:
      swift_release();
      v30 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v30);
      swift_bridgeObjectRelease_n();
      *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9E0];
      return 1;
    }
    v11 = *(_QWORD *)(v31 + 8 * v12);
    if (v11)
    {
      v7 = v12;
LABEL_23:
      v5 = (v11 - 1) & v11;
      for (i = __clz(__rbit64(v11)) + (v7 << 6); ; i = v8 | (v7 << 6))
      {
        v13 = (_OWORD *)(*(_QWORD *)(v2 + 48) + 48 * i);
        v14 = v13[1];
        v34[0] = *v13;
        v34[1] = v14;
        v34[2] = v13[2];
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
        v16 = v15;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        v17 = MEMORY[0x18D75B9C8](&v33, v16);
        v18 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v33 + 128))(v17);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if ((v18 & 1) == 0)
          break;
        v19 = *(unsigned int *)(v1 + 40);
        if ((_DWORD)v19 != -1)
        {
          v20 = ((v19 << 32) - 0x100000000) ^ ((unint64_t)((v19 << 32) - 0x100000000) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = (v22 >> 31) ^ v22;
          if ((_DWORD)v19)
            v24 = v23;
          else
            v24 = 1;
          *(_DWORD *)(v1 + 40) = v24;
        }
        v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
        if ((v26 & 1) != 0)
        {
          v27 = v25;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v29 = *(_QWORD *)(v1 + 24);
          *(_QWORD *)(v1 + 24) = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
          specialized _NativeDictionary._delete(at:)(v27, v29);
          *(_QWORD *)(v1 + 24) = v29;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          result = swift_bridgeObjectRelease();
          if (!v5)
            goto LABEL_10;
        }
        else
        {
          swift_release();
          swift_release();
          result = swift_release();
          if (!v5)
            goto LABEL_10;
        }
LABEL_9:
        v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    while (1)
    {
      v7 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      if (v7 >= v32)
        goto LABEL_37;
      v11 = *(_QWORD *)(v31 + 8 * v7);
      ++v12;
      if (v11)
        goto LABEL_23;
    }
  }
  __break(1u);
  return result;
}

void *NavigationListState.setSelection(_:locationID:metatypeID:request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  __int128 v22[16];
  _OWORD __src[18];
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[3];
  _QWORD v29[6];

  v8 = v7;
  v13 = *(_OWORD *)(a6 + 88);
  v28[0] = *(_OWORD *)(a6 + 72);
  v28[1] = v13;
  v28[2] = *(_OWORD *)(a6 + 104);
  specialized Dictionary.subscript.getter((uint64_t)v28, *(_QWORD *)(v7 + 8), (uint64_t)&v24);
  outlined init with take of Image.Resolved?((uint64_t)&v24, (uint64_t)__src, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  outlined init with take of Image.Resolved?((uint64_t)&v24, (uint64_t)v25, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  if (!v25[1])
  {
    v16 = a7;
    goto LABEL_5;
  }
  v14 = v25[2];
  v27 = v25[0];
  swift_retain();
  swift_retain();
  swift_retain();
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v27);
  swift_release();
  v26 = v14;
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v26);
  v15 = *((_QWORD *)&__src[1] + 1);
  outlined consume of Binding<AnyNavigationPath>?(*(uint64_t *)&__src[0], *((uint64_t *)&__src[0] + 1));
  v16 = a7;
  if (v15 != a4)
  {
LABEL_5:
    v29[0] = a1;
    v29[1] = a2;
    v29[2] = a3;
    v29[3] = a4;
    v29[4] = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&__src[0] = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v29, v28, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v8 + 8) = *(_QWORD *)&__src[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)&__src[0] = a1;
    *((_QWORD *)&__src[0] + 1) = a2;
    *(_QWORD *)&__src[1] = a3;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](v22);
    v18 = NavigationListState.updateSelection(_:for:)(*(uint64_t *)&v22[0], v28);
    swift_release();
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v22);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v22, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = v18 & 1;
    return memcpy(v16, __src, 0x11CuLL);
  }
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v22);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v22, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  return memcpy(v16, __src, 0x11CuLL);
}

void *NavigationListState.boundSelectionChange(metatypeID:request:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[3];
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  _OWORD __src[18];
  _OWORD v67[3];
  _BYTE v68[24];
  _BYTE v69[8];
  uint64_t v70;

  v6 = *(_OWORD *)(a2 + 104);
  v7 = *(_OWORD *)(a2 + 72);
  v67[1] = *(_OWORD *)(a2 + 88);
  v67[2] = v6;
  v67[0] = v7;
  v8 = *(_QWORD *)(v4 + 8);
  if (*(_QWORD *)(v8 + 16))
  {
    v29 = *(_BYTE *)(a2 + 120);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = *(_QWORD *)(a3 + 16);
    v30 = *(_QWORD *)(a3 + 24);
    v13 = *(_QWORD *)(a3 + 32);
    v12 = *(_QWORD *)(a3 + 40);
    v32 = *(_QWORD *)(a3 + 48);
    v33 = *(_QWORD *)a3;
    v34 = *(_QWORD *)(a3 + 56);
    v31 = *(_WORD *)(a3 + 64);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v67);
    if ((v15 & 1) != 0)
    {
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 40 * v14);
      if (v16[4] == a1)
      {
        v18 = v16[1];
        v19 = v16[2];
        *(_QWORD *)&__src[0] = *v16;
        *((_QWORD *)&__src[0] + 1) = v18;
        *(_QWORD *)&__src[1] = v19;
        type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
        v21 = v20;
        swift_retain();
        swift_retain();
        swift_retain();
        MEMORY[0x18D75B9C8](&v42, v21);
        v22 = NavigationListState.updateSelection(_:for:)(v42, v67);
        swift_release();
        if ((v22 & 1) == 0)
        {
          swift_release();
          swift_release();
          swift_release();
          v23 = 0;
LABEL_22:
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v42);
          __src[0] = xmmword_187BFE310;
          LOBYTE(__src[1]) = 2;
          outlined init with take of NavigationState.UpdateResult((__int128 *)&v42, (_OWORD *)((char *)&__src[1] + 8));
          *(_QWORD *)((char *)&__src[17] + 4) = v23;
          return memcpy(a4, __src, 0x11CuLL);
        }
        if (v11 == 1)
        {
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          if (v13)
          {
            v36 = 0;
            memset(v35, 0, sizeof(v35));
            v37 = 4;
            outlined init with take of Image.Resolved?((uint64_t)v67 + 8, (uint64_t)v68, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            outlined init with take of Image.Resolved?((uint64_t)v68, (uint64_t)v69, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            if (v70 >= 3u || v70 == 6)
              v25 = 3;
            else
              v25 = v70;
            outlined init with take of NavigationUpdateEvent.Action((uint64_t)v35, (uint64_t)&v38);
            v41 = v25;
            outlined init with copy of NavigationUpdateEvent((uint64_t)&v38, (uint64_t)__src);
            v26 = swift_allocObject();
            *(_QWORD *)(v26 + 16) = v13;
            *(_QWORD *)(v26 + 24) = v12;
            v27 = __src[1];
            *(_OWORD *)(v26 + 32) = __src[0];
            *(_OWORD *)(v26 + 48) = v27;
            *(_OWORD *)(v26 + 64) = __src[2];
            *(_OWORD *)(v26 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
            outlined copy of AppIntentExecutor?(v13);
            outlined copy of AppIntentExecutor?(v13);
            outlined copy of NavigationSplitViewState?(v33, v10, v11, v30, v13, v12, v32, v34, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            static Update.enqueueAction(_:)();
            swift_release();
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
            outlined destroy of NavigationUpdateEvent((uint64_t)&v38);
            swift_release();
            swift_release();
            swift_release();
            outlined copy of NavigationSplitViewState?(v33, v10, v11, v30, v13, v12, v32, v34, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v42);
            goto LABEL_29;
          }
          outlined copy of Binding<NavigationSplitViewColumn>?(v10, v11);
          outlined copy of AppIntentExecutor?(0);
          outlined copy of Binding<NavigationSplitViewColumn>?(v32, v34);
          swift_release();
          swift_release();
          swift_release();
          outlined copy of NavigationSplitViewState?(v33, v10, v11, v30, 0, v12, v32, v34, v31, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        }
        outlined init with take of Image.Resolved?((uint64_t)v67 + 8, (uint64_t)v35, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
        outlined init with take of Image.Resolved?((uint64_t)v35, (uint64_t)&v38, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
        if (v39 == 6 || v39 - 2 < 4)
        {
          v23 = 1;
          goto LABEL_22;
        }
        if (v39)
        {
          v28 = 2;
        }
        else
        {
          v28 = 1;
          if (v40 != 3)
            v28 = 2;
        }
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = (v22 >> 8) & 1;
        v46 = 0;
        v47 = 20;
        v48 = v38;
        v49 = v39;
        v50 = v40;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = v29;
        v55 = 0;
        v56 = v38;
        v57 = v28;
        v58 = v40;
        v59 = 0u;
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        v64 = 0;
        v65 = -1;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v42);
LABEL_29:
        __src[0] = xmmword_187BFE310;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult((__int128 *)&v42, (_OWORD *)((char *)&__src[1] + 8));
        *(_QWORD *)((char *)&__src[17] + 4) = 1;
        return memcpy(a4, __src, 0x11CuLL);
      }
    }
  }
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v42);
  __src[0] = xmmword_187BFE310;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult((__int128 *)&v42, (_OWORD *)((char *)&__src[1] + 8));
  *(_QWORD *)((char *)&__src[17] + 4) = 0;
  return memcpy(a4, __src, 0x11CuLL);
}

void *NavigationListState.presentValue(_:activeBinding:request:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, __int128 *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void *__dst;
  uint64_t v54;
  _BYTE v55[64];
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  _OWORD __src[18];
  _BYTE v74[40];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;

  v7 = v6;
  v9 = a5[7];
  v98 = a5[6];
  v99 = v9;
  v100 = a5[8];
  v101 = *((_QWORD *)a5 + 18);
  v10 = a5[3];
  v95 = a5[2];
  v96 = v10;
  v11 = a5[5];
  *(_OWORD *)v97 = a5[4];
  *(_OWORD *)&v97[16] = v11;
  v12 = a5[1];
  v93 = *a5;
  v94 = v12;
  v13 = *(_QWORD *)&v97[16];
  v14 = v97[24];
  if (BYTE8(v100) != 6)
  {
    __dst = a6;
    v83 = *(_OWORD *)&v97[8];
    v84 = *(_QWORD *)&v97[24];
    v85 = v98;
    v86 = BYTE8(v98);
    v87 = v99;
    swift_retain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&__src[0] = *(_QWORD *)(v7 + 16);
    v29 = *(_QWORD **)&__src[0];
    *(_QWORD *)(v7 + 16) = 0x8000000000000000;
    v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v83);
    v32 = v29[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
    {
      __break(1u);
    }
    else
    {
      v35 = v30;
      if (v29[3] >= v34)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v29 = *(_QWORD **)&__src[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
        v29 = *(_QWORD **)&__src[0];
        v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v83);
        if ((v35 & 1) != (v37 & 1))
        {
          result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v31 = v36;
      }
      *(_QWORD *)(v7 + 16) = v29;
      swift_bridgeObjectRelease();
      v38 = *(_QWORD **)(v7 + 16);
      swift_bridgeObjectRetain();
      if ((v35 & 1) == 0)
        specialized _NativeDictionary._insert(at:key:value:)(v31, &v83, MEMORY[0x1E0DEE9D8], v38);
      v7 = v38[7];
      swift_bridgeObjectRelease();
      v29 = *(_QWORD **)(v7 + 8 * v31);
      v39 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v7 + 8 * v31) = v29;
      if ((v39 & 1) != 0)
        goto LABEL_16;
    }
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    *(_QWORD *)(v7 + 8 * v31) = v29;
LABEL_16:
    v41 = v29[2];
    v40 = v29[3];
    if (v41 >= v40 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v29);
      *(_QWORD *)(v7 + 8 * v31) = v29;
    }
    v29[2] = v41 + 1;
    v42 = &v29[3 * v41];
    v42[4] = a2;
    v42[5] = a3;
    *((_BYTE *)v42 + 48) = a4 & 1;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v55);
    goto LABEL_19;
  }
  v88 = *(_OWORD *)&v97[8];
  v89 = *(_QWORD *)&v97[24];
  v52 = v98;
  v90 = v98;
  v91 = BYTE8(v98);
  v92 = v99;
  specialized Dictionary.subscript.getter((uint64_t)&v88, *(_QWORD *)(v7 + 8), (uint64_t)v74);
  v16 = outlined init with take of Image.Resolved?((uint64_t)v74, (uint64_t)&v75, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  v17 = v76;
  if (!v76)
    goto LABEL_5;
  __dst = a6;
  v18 = v75;
  v51 = v77;
  v19 = v78;
  if (v19 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(v16))
  {
    v50 = v19;
    v80 = v18;
    v79 = v51;
    *(_QWORD *)&__src[0] = v18;
    *((_QWORD *)&__src[0] + 1) = v17;
    *(_QWORD *)&__src[1] = v51;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
    MEMORY[0x18D75B9C8](&v54);
    v43 = v54;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 112))(a1) & 1) != 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 136))(a1);
      v44 = swift_retain();
      v45 = NavigationListState.updateSelection(_:for:)(v44, &v88);
      swift_release();
      if ((v45 & 1) != 0)
      {
        v47 = swift_allocObject();
        *(_QWORD *)(v47 + 16) = v18;
        *(_QWORD *)(v47 + 24) = v17;
        *(_OWORD *)(v47 + 32) = v51;
        *(_QWORD *)(v47 + 48) = v50;
        *(_QWORD *)(v47 + 56) = v43;
        swift_retain();
        swift_retain();
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v79);
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v80);
        static Update.enqueueAction(_:)();
        swift_release();
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v80);
        swift_release();
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v79);
        swift_release();
        if (v14 == 6)
        {
          v46 = 1;
        }
        else
        {
          if (v14 - 2 >= 4)
          {
            if (v14)
            {
              v49 = 2;
              v48 = v52;
            }
            else
            {
              v48 = v52;
              v49 = 1;
              if (v52 != 3)
                v49 = 2;
            }
            *(_QWORD *)v55 = 1;
            memset(&v55[8], 0, 56);
            v56 = 20;
            v57 = v13;
            v58 = v14;
            v59 = v48;
            v60 = 0;
            v61 = 0;
            v62 = 0;
            v63 = BYTE8(v99);
            *(_QWORD *)&v64 = 0;
            *((_QWORD *)&v64 + 1) = v13;
            *(_QWORD *)&v65 = v49;
            *((_QWORD *)&v65 + 1) = v48;
            v66 = 0u;
            v67 = 0u;
            v68 = 0u;
            v69 = 0u;
            v70 = 0u;
            v71 = 0;
            v72 = -1;
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v55);
            __src[0] = xmmword_187BFE310;
            LOBYTE(__src[1]) = 2;
            outlined init with take of NavigationState.UpdateResult((__int128 *)v55, (_OWORD *)((char *)&__src[1] + 8));
            *(_QWORD *)((char *)&__src[17] + 4) = 1;
            return memcpy(__dst, __src, 0x11CuLL);
          }
          v46 = 1;
        }
      }
      else
      {
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v80);
        swift_release();
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v79);
        swift_release();
        v46 = 0;
      }
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v55);
      __src[0] = xmmword_187BFE310;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult((__int128 *)v55, (_OWORD *)((char *)&__src[1] + 8));
      *(_QWORD *)((char *)&__src[17] + 4) = v46;
      return memcpy(__dst, __src, 0x11CuLL);
    }
    outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v80);
    swift_release();
    outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v79);
    swift_release();
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v55);
LABEL_19:
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult((__int128 *)v55, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    return memcpy(__dst, __src, 0x11CuLL);
  }
  v82 = v18;
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v82);
  swift_release();
  v81 = v51;
  v16 = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v81);
LABEL_5:
  if (v14 == 6)
  {
    *(_QWORD *)&__src[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(v16);
    type metadata accessor for Any.Type();
    v20 = String.init<A>(describing:)();
    v22 = v21;
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(_QWORD *)v23 = v20;
    *(_QWORD *)(v23 + 8) = v22;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 32) = 1;
    return (void *)swift_willThrow();
  }
  else
  {
    *(_OWORD *)v55 = v93;
    *(_OWORD *)&v55[16] = v94;
    *(_OWORD *)&v55[32] = v95;
    *(_OWORD *)&v55[48] = v96;
    v56 = v97[0];
    v57 = v13;
    v58 = v14;
    v59 = v52;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = BYTE8(v99);
    v64 = 0u;
    v65 = 0u;
    *(_QWORD *)&v66 = 0;
    *((_QWORD *)&v66 + 1) = 0x1FFFFFFFELL;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0;
    v72 = -1;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v55);
    __src[0] = xmmword_187BFE310;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult((__int128 *)v55, (_OWORD *)((char *)&__src[1] + 8));
    *(_QWORD *)((char *)&__src[17] + 4) = 0;
    memcpy(a6, __src, 0x11CuLL);
    return (void *)outlined retain of NavigationRequest.ListRequest((uint64_t)&v93);
  }
}

uint64_t NavigationListState.updateSelection(_:for:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  uint64_t v12;

  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0x8000000000000000;
  v6 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 24) = v12;
  v7 = swift_bridgeObjectRelease();
  if (v6)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(v6);
    v9 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 80))();
    swift_release();
    if ((v9 & 1) != 0)
      v10 = 256;
    else
      v10 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(v7);
    v10 = 256;
  }
  return v10 | ((v8 & 1) == 0);
}

uint64_t specialized closure #1 in NavigationListState.presentValue(_:activeBinding:request:splitViewState:)(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v2);
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v2);
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, _OWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = *(_QWORD *)(v17 + 8 * v10);
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return 0;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_187ABF6F4()
{
  uint64_t v0;

  swift_release();
  if (*(unsigned __int8 *)(v0 + 88) - 1 <= 2)
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t outlined retain of NavigationRequest.ListRequest(uint64_t a1)
{
  outlined copy of NavigationRequest.Action(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  return a1;
}

uint64_t sub_187ABF778()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NavigationListState.presentValue(_:activeBinding:request:splitViewState:)()
{
  uint64_t v0;

  return specialized closure #1 in NavigationListState.presentValue(_:activeBinding:request:splitViewState:)(v0 + 16);
}

uint64_t initializeWithCopy for NavigationListState.Selection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for NavigationListState.Selection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for NavigationListState.Selection(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationListState.Selection()
{
  return &type metadata for NavigationListState.Selection;
}

uint64_t UIKitDatePicker._resolvedUIKitDatePicker()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;

  v2 = v1;
  type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  v5 = v4;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v47 - v7;
  type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
  MEMORY[0x1E0C80A78](v9, v10);
  v58 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
  v56 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v57 = (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v59 = (uint64_t)&v47 - v17;
  v18 = type metadata accessor for UIKitDatePicker(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v47 - v24;
  v26 = (int *)type metadata accessor for UIKitDatePickerRepresentable(0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v47 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v1, (uint64_t)v29, type metadata accessor for DatePickerStyleConfiguration);
  specialized Environment.wrappedValue.getter((uint64_t)&v29[v26[5]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v29[v26[6]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v29[v26[7]]);
  v30 = *(_QWORD *)(v1 + *(int *)(v18 + 20));
  *(_QWORD *)&v29[v26[8]] = v30;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v21, type metadata accessor for UIKitDatePicker);
  if (v30 != 3)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for UIKitDatePicker);
LABEL_7:
    v45 = *(int *)(v5 + 40);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v8, type metadata accessor for UIKitDatePickerRepresentable);
    v8[v45] = 2;
    outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v8, (uint64_t)v25);
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v8);
    goto LABEL_8;
  }
  v31 = *(_QWORD *)&v21[*(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 32)];
  if (one-time initialization token for hourAndMinute != -1)
    swift_once();
  v32 = static DatePickerComponents.hourAndMinute;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v21, type metadata accessor for UIKitDatePicker);
  if (v31 == v32)
    goto LABEL_7;
  v33 = *(int *)(v5 + 40);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v29, (uint64_t)v8, type metadata accessor for UIKitDatePickerRepresentable);
  v8[v33] = 2;
  v34 = v58;
  outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v8, v58);
  outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v8);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v35 = v61;
  v36 = v62;
  v37 = v63;
  v38 = v64;
  v39 = v65;
  v53 = v66;
  v54 = v60;
  v55 = a1;
  v40 = v67;
  v52 = v68;
  v51 = v69;
  v50 = v70;
  v49 = v71;
  v48 = v72;
  v47 = v73;
  v41 = v57;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v34, v57, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
  v42 = v41 + *(int *)(v56 + 36);
  *(_QWORD *)v42 = v54;
  *(_BYTE *)(v42 + 8) = v35;
  *(_QWORD *)(v42 + 16) = v36;
  *(_BYTE *)(v42 + 24) = v37;
  *(_QWORD *)(v42 + 32) = v38;
  *(_BYTE *)(v42 + 40) = v39;
  *(_QWORD *)(v42 + 48) = v53;
  *(_BYTE *)(v42 + 56) = v40;
  a1 = v55;
  *(_QWORD *)(v42 + 64) = v52;
  *(_BYTE *)(v42 + 72) = v51;
  *(_QWORD *)(v42 + 80) = v50;
  *(_BYTE *)(v42 + 88) = v49;
  v43 = v47;
  *(_QWORD *)(v42 + 96) = v48;
  *(_QWORD *)(v42 + 104) = v43;
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v34, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
  v44 = v59;
  outlined init with take of ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>(v41, v59);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v44, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>.Storage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4B90]);
  swift_storeEnumTagMultiPayload();
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v44, (uint64_t (*)(_QWORD))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
LABEL_8:
  outlined init with take of _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>((uint64_t)v25, a1);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v29, type metadata accessor for UIKitDatePickerRepresentable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitDatePicker()
{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
  type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if (((v3 | v2) & 1) != 0)
      return 0;
  }
  return v0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GraphicalDatePickersFillWidth()
{
  char v0;

  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
    v0 = 1;
  else
    v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  return v0 & 1;
}

uint64_t UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  id v30;
  char *v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  char *v35;
  id v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v46;
  char *v47;
  char *v48;
  id v49;
  char *v50;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v46 - v9;
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v48 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v47 = (char *)&v46 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v46 = (char *)&v46 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v46 - v23;
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  v29 = (char *)&v46 - v28;
  v49 = a1;
  v30 = objc_msgSend(a1, sel_date, v27);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v50 = v1;
  v31 = &v1[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration];
  swift_beginAccess();
  v32 = type metadata accessor for DatePickerStyleConfiguration(0);
  outlined init with copy of Date?((uint64_t)&v31[*(int *)(v32 + 24)], (uint64_t)v10);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v33(v10, 1, v11) == 1)
  {
    outlined destroy of Binding<AttributedString>((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v24, v10, v11);
    lazy protocol witness table accessor for type Date and conformance Date();
    if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) != 0)
      v34 = v29;
    else
      v34 = v24;
    v35 = v46;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v46, v34, v11);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v24, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v29, v35, v11);
  }
  outlined init with copy of Date?((uint64_t)&v31[*(int *)(v32 + 28)], (uint64_t)v6);
  if (v33(v6, 1, v11) == 1)
  {
    v36 = (id)outlined destroy of Binding<AttributedString>((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  }
  else
  {
    v38 = v47;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v47, v6, v11);
    lazy protocol witness table accessor for type Date and conformance Date();
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) != 0)
      v39 = v29;
    else
      v39 = v38;
    v40 = v48;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v48, v39, v11);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v38, v11);
    v36 = (id)(*(uint64_t (**)(char *, char *, uint64_t))(v12 + 40))(v29, v40, v11);
  }
  v41 = v50;
  if (*(_QWORD *)&v50[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style] == 2)
  {
    v36 = objc_msgSend(v49, sel_window);
    if (v36)
    {

      v36 = objc_msgSend(v49, sel_layoutIfNeeded);
    }
  }
  MEMORY[0x1E0C80A78](v36, v37);
  *(&v46 - 2) = v41;
  *(&v46 - 1) = v29;
  MEMORY[0x1E0C80A78](v42, v43);
  *(&v46 - 2) = (char *)partial apply for closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:);
  *(&v46 - 1) = v44;
  static Update.dispatchImmediately<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v29, v11);
}

uint64_t closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1
      + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration;
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v13, (uint64_t)v12, type metadata accessor for DatePickerStyleConfiguration);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v12, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t UIKitDatePickerRepresentable.Coordinator.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v0+ OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration, type metadata accessor for DatePickerStyleConfiguration);
}

id UIKitDatePickerRepresentable.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for UIKitDatePickerRepresentable.Coordinator()
{
  return type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
}

uint64_t type metadata accessor for UIKitDatePickerRepresentable.Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePickerRepresentable.Coordinator);
}

uint64_t type metadata completion function for UIKitDatePickerRepresentable.Coordinator()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitDatePicker(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v12);
    v15 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    v16 = v15[6];
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v19((char *)a2 + v16, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v14(v17, v18, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    v21 = v15[7];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    if (v19((char *)a2 + v21, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v14(v22, v23, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v22, 0, 1, v12);
    }
    *(uint64_t *)((char *)v7 + v15[8]) = *(uint64_t *)((char *)a2 + v15[8]);
    v25 = a3[6];
    *(uint64_t *)((char *)v7 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v26 = (uint64_t *)((char *)v7 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v28 = type metadata accessor for Locale();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    }
    else
    {
      *v26 = *v27;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v29 = a3[7];
    v30 = (uint64_t *)((char *)v7 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v32 = type metadata accessor for Calendar();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    }
    else
    {
      *v30 = *v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v33 = a3[8];
    v34 = (uint64_t *)((char *)v7 + v33);
    v35 = (uint64_t *)((char *)a2 + v33);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v36 = type metadata accessor for TimeZone();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    }
    else
    {
      *v34 = *v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v7;
}

uint64_t destroy for UIKitDatePicker(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = type metadata accessor for DatePickerStyleConfiguration(0);
  v10 = a1 + *(int *)(v9 + 24);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6))
    v8(v10, v6);
  v12 = a1 + *(int *)(v9 + 28);
  if (!v11(v12, 1, v6))
    v8(v12, v6);
  v13 = a1 + a2[6];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  v15 = a1 + a2[7];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  v17 = a1 + a2[8];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v18 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

_QWORD *initializeWithCopy for UIKitDatePicker(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_retain();
  swift_retain();
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v15 = v14[6];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(&a2[v15], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v20 = v14[7];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  if (v18(&a2[v20], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v21, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)&a2[v14[8]];
  v24 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)&a2[a3[5]];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = &a2[v24];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v27 = type metadata accessor for Locale();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  }
  else
  {
    *v25 = *(_QWORD *)v26;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v28 = a3[7];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = &a2[v28];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v31 = type metadata accessor for Calendar();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  }
  else
  {
    *v29 = *(_QWORD *)v30;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v32 = a3[8];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = &a2[v32];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = type metadata accessor for TimeZone();
    (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  }
  else
  {
    *v33 = *(_QWORD *)v34;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithCopy for UIKitDatePicker(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v13 = v12[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v17 = v16(&a1[v13], 1, v9);
  v18 = v16(v15, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v15, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v11(v14, v15, v9);
LABEL_7:
  v20 = v12[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v16(&a1[v20], 1, v9);
  v24 = v16(v22, 1, v9);
  if (v23)
  {
    v25 = a3;
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v21, v22, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v25 = a3;
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  v11(v21, v22, v9);
LABEL_13:
  *(_QWORD *)&a1[v12[8]] = *(_QWORD *)&a2[v12[8]];
  *(_QWORD *)&a1[v25[5]] = *(_QWORD *)&a2[v25[5]];
  if (a1 != a2)
  {
    v27 = v25[6];
    v28 = &a1[v27];
    v29 = &a2[v27];
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v27], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v30, v31);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v32 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v28, v29, v32);
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v29;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v33 = v25[7];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v33], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v31);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v36, v31);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v37 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
    }
    else
    {
      *(_QWORD *)v34 = *(_QWORD *)v35;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v38 = v25[8];
    v39 = &a1[v38];
    v40 = &a2[v38];
    v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v38], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v41, v42);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v43 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v40, v43);
    }
    else
    {
      *(_QWORD *)v39 = *(_QWORD *)v40;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithTake for UIKitDatePicker(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v15 = v14[6];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(&a2[v15], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v20 = v14[7];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  if (v18(&a2[v20], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v21, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)&a2[v14[8]];
  v24 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)&a2[a3[5]];
  v25 = (char *)a1 + v24;
  v26 = &a2[v24];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v28 = v27;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v29 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v25, v26, v29);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v30 = a3[7];
  v31 = (char *)a1 + v30;
  v32 = &a2[v30];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v34 = v33;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v31, v32, v35);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  v36 = a3[8];
  v37 = (char *)a1 + v36;
  v38 = &a2[v36];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
  v40 = v39;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v41 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v37, v38, v41);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for UIKitDatePicker(char *a1, char *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t (*v45)(uint64_t);
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v6 = *(int *)(v5 + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v13 = v12[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v17 = v16(&a1[v13], 1, v9);
  v18 = v16(v15, 1, v9);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v11(v14, v15, v9);
LABEL_7:
  v20 = v12[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v16(&a1[v20], 1, v9);
  v24 = v16(v22, 1, v9);
  if (v23)
  {
    v25 = a3;
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v22, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v25 = a3;
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  v11(v21, v22, v9);
LABEL_13:
  *(_QWORD *)&a1[v12[8]] = *(_QWORD *)&a2[v12[8]];
  *(_QWORD *)&a1[v25[5]] = *(_QWORD *)&a2[v25[5]];
  if (a1 != a2)
  {
    v27 = v25[6];
    v28 = &a1[v27];
    v29 = &a2[v27];
    v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38];
    v31 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v27], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v30, v31);
    v33 = v32;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v34 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v28, v29, v34);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    v35 = v25[7];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v35], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v31);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v38, v31);
    v40 = v39;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v41 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v36, v37, v41);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    v42 = v25[8];
    v43 = &a1[v42];
    v44 = &a2[v42];
    v45 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470];
    v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158];
    outlined destroy of Binding<AttributedString>((uint64_t)&a1[v42], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v45, v46);
    v48 = v47;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v49 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v43, v44, v49);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitDatePicker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AC1C5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[6];
    }
    else
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[7];
      }
      else
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
        v8 = v15;
        v12 = *(_QWORD *)(v15 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UIKitDatePicker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AC1D6C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = type metadata accessor for DatePickerStyleConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Locale>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CE1160]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Environment<Calendar>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], MEMORY[0x1E0CE1160]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], MEMORY[0x1E0CE1160]);
        v10 = v17;
        v14 = *(_QWORD *)(v17 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for UIKitDatePicker(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePicker);
}

void type metadata completion function for UIKitDatePicker()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for DatePickerStyleConfiguration(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE1158]);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in UIKitDatePicker()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UIKitDatePickerRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePickerRepresentable);
}

void type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
    type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
  }
}

uint64_t type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>;
  if (!lazy cache variable for type metadata for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth();
    type metadata accessor for StaticIf();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth;
  if (!lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for GraphicalDatePickersFillWidth, &unk_1E1AF9AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth);
  }
  return result;
}

id UIKitDatePickerRepresentable.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  Class isa;
  void (*v24)(char *, uint64_t);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  Class v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class v31;
  Class v32;
  Class v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41[3];

  v3 = v2;
  v6 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v40 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v38 - v16;
  v18 = type metadata accessor for Date();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)(a2 + 40);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, v9, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8]();
  isa = Date._bridgeToObjectiveC()().super.isa;
  v24 = *(void (**)(char *, uint64_t))(v19 + 8);
  v24(v22, v18);
  objc_msgSend(a1, sel_setDate_, isa);

  outlined init with copy of Date?(v3 + v6[6], (uint64_t)v17);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v26 = 0;
  if (v25(v17, 1, v18) != 1)
  {
    v26 = Date._bridgeToObjectiveC()().super.isa;
    v24(v17, v18);
  }
  objc_msgSend(a1, sel_setMinimumDate_, v26);

  outlined init with copy of Date?(v3 + v6[7], (uint64_t)v13);
  if (v25(v13, 1, v18) == 1)
  {
    v27 = 0;
  }
  else
  {
    v27 = Date._bridgeToObjectiveC()().super.isa;
    v24(v13, v18);
  }
  v29 = v39;
  v28 = (uint64_t)v40;
  objc_msgSend(a1, sel_setMaximumDate_, v27);

  v30 = type metadata accessor for UIKitDatePickerRepresentable(0);
  v31 = Locale._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setLocale_, v31);

  v32 = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setCalendar_, v32);

  v33 = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setTimeZone_, v33);

  v34 = *(_QWORD *)(v3 + *(int *)(v30 + 32));
  objc_msgSend(a1, sel_setPreferredDatePickerStyle_, v34);
  v41[0] = *(_QWORD *)(v3 + v6[8]);
  objc_msgSend(a1, sel_setDatePickerMode_, specialized UIDatePickerMode.init(_:)(v41));
  v35 = OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style;
  *(_QWORD *)(v29
            + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style) = v34;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v3, v28, type metadata accessor for DatePickerStyleConfiguration);
  v36 = v29
      + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration;
  swift_beginAccess();
  outlined assign with take of DatePickerStyleConfiguration(v28, v36);
  result = (id)swift_endAccess();
  if (*(_QWORD *)(v29 + v35) == 2)
  {
    result = objc_msgSend(a1, sel_window);
    if (result)
    {

      return objc_msgSend(a1, sel_layoutIfNeeded);
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitDatePickerRepresentable(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36F0]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_dateChanged_, 4096);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitDatePickerRepresentable@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  id v12;
  uint64_t result;
  objc_super v14;

  v5 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v2, (uint64_t)v8, type metadata accessor for DatePickerStyleConfiguration);
  v9 = *(_QWORD *)(v2 + *(int *)(a1 + 32));
  v10 = (objc_class *)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
  v11 = (char *)objc_allocWithZone(v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, (uint64_t)&v11[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration], type metadata accessor for DatePickerStyleConfiguration);
  *(_QWORD *)&v11[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style] = v9;
  v14.receiver = v11;
  v14.super_class = v10;
  v12 = objc_msgSendSuper2(&v14, sel_init);
  result = outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v8, type metadata accessor for DatePickerStyleConfiguration);
  *a2 = v12;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance UIKitDatePickerRepresentable(_QWORD *a1, int a2, id a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t)objc_msgSend(a3, sel_datePickerStyle);
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    v6 = result;
    result = (uint64_t)objc_msgSend(a3, sel_sizeThatFits_, *MEMORY[0x1E0DC4FF8], *(double *)(MEMORY[0x1E0DC4FF8] + 8));
    a1[1] = v8;
    if (v6 == 2)
      *a1 = v7;
  }
  return result;
}

id protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitDatePickerRepresentable(int a1, id a2)
{
  id result;

  result = objc_msgSend(a2, sel_datePickerStyle);
  if (result == (id)3)
  {
    _LayoutTraits.Dimension.min.setter();
    return (id)_LayoutTraits.Dimension.max.setter();
  }
  return result;
}

uint64_t outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
    v7 = v6;
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
}

unint64_t lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    v2[0] = &protocol witness table for DatePickerStyleConfiguration.Label;
    v2[1] = &protocol witness table for UIKitDatePickerRepresentable;
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> LabeledContent<A, B>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    v1 = type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
    v2[0] = MEMORY[0x1E0CE35E0];
    v2[1] = MEMORY[0x1E0CE1E88];
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>)
  {
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

uint64_t type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>()
{
  uint64_t result;

  result = lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>;
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>)
  {
    type metadata accessor for UIKitDatePickerRepresentable(255);
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
    type metadata accessor for StaticSourceWriter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for ResolvedLabeledContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE2E48]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    v3[1] = &protocol witness table for StaticSourceWriter<A, B>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)()
{
  uint64_t v0;

  return closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void *type metadata accessor for GraphicalDatePickersFillWidth()
{
  return &unk_1E1AF9AA8;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitDatePickerRepresentable(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
    v9 = *(int *)(v8 + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v12);
    v15 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    v16 = v15[6];
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v19((char *)a2 + v16, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v14(v17, v18, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
    }
    v21 = v15[7];
    v22 = (char *)v7 + v21;
    v23 = (char *)a2 + v21;
    if (v19((char *)a2 + v21, 1, v12))
    {
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v14(v22, v23, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v22, 0, 1, v12);
    }
    *(uint64_t *)((char *)v7 + v15[8]) = *(uint64_t *)((char *)a2 + v15[8]);
    v25 = a3[5];
    v26 = (char *)v7 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[6];
    v30 = (char *)v7 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[7];
    v34 = (char *)v7 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  return v7;
}

uint64_t destroy for UIKitDatePickerRepresentable(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_release();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = type metadata accessor for DatePickerStyleConfiguration(0);
  v10 = a1 + *(int *)(v9 + 24);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6))
    v8(v10, v6);
  v12 = a1 + *(int *)(v9 + 28);
  if (!v11(v12, 1, v6))
    v8(v12, v6);
  v13 = a1 + a2[5];
  v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[6];
  v16 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = a1 + a2[7];
  v18 = type metadata accessor for TimeZone();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
}

_QWORD *initializeWithCopy for UIKitDatePickerRepresentable(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_retain();
  swift_retain();
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v15 = v14[6];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(&a2[v15], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v20 = v14[7];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  if (v18(&a2[v20], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v21, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)&a2[v14[8]];
  v24 = a3[5];
  v25 = (char *)a1 + v24;
  v26 = &a2[v24];
  v27 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[6];
  v29 = (char *)a1 + v28;
  v30 = &a2[v28];
  v31 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = a3[7];
  v33 = (char *)a1 + v32;
  v34 = &a2[v32];
  v35 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *assignWithCopy for UIKitDatePickerRepresentable(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v39 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v39(v8, v9, v10);
  v12 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v13 = v12[6];
  v14 = &a1[v13];
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16(&a1[v13], 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v39(v14, v15, v10);
LABEL_7:
  v20 = v12[7];
  v21 = &a1[v20];
  v22 = (char *)a2 + v20;
  v23 = v16(&a1[v20], 1, v10);
  v24 = v16(v22, 1, v10);
  if (!v23)
  {
    if (!v24)
    {
      v39(v21, v22, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v21, v22, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
LABEL_13:
  *(_QWORD *)&a1[v12[8]] = *(_QWORD *)((char *)a2 + v12[8]);
  v26 = a3[5];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[6];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  v34 = a3[7];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *initializeWithTake for UIKitDatePickerRepresentable(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v8 = *(int *)(v7 + 32);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v15 = v14[6];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(&a2[v15], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v13(v16, v17, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  v20 = v14[7];
  v21 = (char *)a1 + v20;
  v22 = &a2[v20];
  if (v18(&a2[v20], 1, v11))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v21, v22, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
  }
  *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)&a2[v14[8]];
  v24 = a3[5];
  v25 = (char *)a1 + v24;
  v26 = &a2[v24];
  v27 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[6];
  v29 = (char *)a1 + v28;
  v30 = &a2[v28];
  v31 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = a3[7];
  v33 = (char *)a1 + v32;
  v34 = &a2[v32];
  v35 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)&a2[a3[8]];
  return a1;
}

char *assignWithTake for UIKitDatePickerRepresentable(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v39)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *a2;
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_release();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Binding<Date>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE75A0]);
  v7 = *(int *)(v6 + 32);
  v8 = &a1[v7];
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v39 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v39(v8, v9, v10);
  v12 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  v13 = v12[6];
  v14 = &a1[v13];
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16(&a1[v13], 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v39(v14, v15, v10);
LABEL_7:
  v20 = v12[7];
  v21 = &a1[v20];
  v22 = (char *)a2 + v20;
  v23 = v16(&a1[v20], 1, v10);
  v24 = v16(v22, 1, v10);
  if (!v23)
  {
    if (!v24)
    {
      v39(v21, v22, v10);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v22, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
LABEL_13:
  *(_QWORD *)&a1[v12[8]] = *(_QWORD *)((char *)a2 + v12[8]);
  v26 = a3[5];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  v30 = a3[6];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v31, v32, v33);
  v34 = a3[7];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitDatePickerRepresentable()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AC3A30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Locale();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = type metadata accessor for Calendar();
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = type metadata accessor for TimeZone();
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for UIKitDatePickerRepresentable()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AC3AF8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for DatePickerStyleConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Locale();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = type metadata accessor for Calendar();
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for TimeZone();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for UIKitDatePickerRepresentable()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for DatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Calendar();
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CE4BC0]);
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PrimitiveButtonStyleContainerModifier<SidebarButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TableStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, EmptyModifier>>, S(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>, (uint64_t (*)(void))lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    v3[1] = lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>();
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4BD0], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t specialized UIDatePickerMode.init(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  Swift::String v4;

  v1 = *a1;
  if (one-time initialization token for hourAndMinute != -1)
    swift_once();
  if (v1 == static DatePickerComponents.hourAndMinute)
    return 0;
  if (one-time initialization token for date != -1)
    swift_once();
  v3 = static DatePickerComponents.date;
  if (v1 == static DatePickerComponents.date)
    return 1;
  if ((static DatePickerComponents.date & ~static DatePickerComponents.hourAndMinute) == 0)
    v3 = 0;
  if (v1 == (v3 | static DatePickerComponents.hourAndMinute))
    return 2;
  _StringGuts.grow(_:)(25);
  v4._object = (void *)0x8000000187BF0410;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of DatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ButtonDefaultRenderingModeModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

BOOL protocol witness for static Feature.isEnabled.getter in conformance ShouldRenderAsTemplate()
{
  static Semantics.v2.getter();
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ShouldRenderAsTemplate()
{
  lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate();
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ShouldRenderAsTemplate@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  static Semantics.v2.getter();
  result = isLinkedOnOrAfter(_:)();
  *a1 = (result & 1) == 0;
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ShouldRenderAsTemplate()
{
  return &protocol witness table for ShouldRenderAsTemplate;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonDefaultRenderingModeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187AC413C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.defaultRenderingMode.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187AC417C()
{
  return EnvironmentValues.defaultRenderingMode.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>();
    v2 = v1;
    v3[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonDefaultRenderingModeModifier> and conformance _ViewModifier_Content<A>, (uint64_t (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>, MEMORY[0x1E0CE5318]);
    v3[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>, MEMORY[0x1E0CE65C0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>)
  {
    type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>();
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>);
  }
}

void type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>)
  {
    lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier();
    v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>);
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>)
  {
    v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>);
  }
}

__n128 DocumentGroup.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[6];
  uint64_t v7;

  outlined init with copy of DocumentGroupConfiguration(v1, (uint64_t)v6);
  v3 = v6[5];
  *(_OWORD *)(a1 + 64) = v6[4];
  *(_OWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 96) = v7;
  v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in DocumentGroup<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t (*v6)(void);
  uint64_t result;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)(a1 + 44);
  type metadata accessor for DocumentGroup.DocumentContentScene(255, a2, a3, a4);
  type metadata accessor for _GraphValue();
  v6 = MEMORY[0x1E0CE1470];
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<DocumentGroupConfiguration>, (uint64_t)&type metadata for DocumentGroupConfiguration, (uint64_t (*)(_QWORD, uint64_t))v6);
  _GraphValue.value.getter();
  PreferencesOutputs.init()();
  v11 = *(_QWORD *)((char *)&v10 + 4);
  v12 = HIDWORD(v10);
  outlined retain of [Text.Modifier]((uint64_t)&v11);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v8;
  *(_DWORD *)(a5 + 8) = v9;
  return result;
}

uint64_t closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[6];

  v8[2] = type metadata accessor for DocumentGroup.DocumentContentScene(0, a2, a3, a4);
  v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_26, (uint64_t)v8, (uint64_t)&type metadata for DocumentGroupConfiguration, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v6);
  return v8[5];
}

uint64_t implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(int a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _BYTE v13[16];
  uint64_t List;
  uint64_t v15;
  _OWORD v16[3];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = a2[1];
  v16[0] = *a2;
  v16[1] = v8;
  v16[2] = a2[2];
  LODWORD(v16[0]) = a1;
  DWORD1(v16[0]) = _GraphInputs.environment.getter();
  List = type metadata accessor for DocumentGroup.MakeList(0, a3, a4, a5);
  v15 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for DocumentGroup<A, B>.MakeList, List);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v13, List, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v10);
  return v12;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance DocumentGroup<A, B>.DocumentContentScene@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  return static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t DocumentGroup.MakeList.value.getter()
{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD __src[34];
  _BYTE v13[104];
  uint64_t v14;
  uint64_t v15;
  char v16;

  Value = AGGraphGetValue();
  outlined init with copy of DocumentGroupConfiguration(Value, (uint64_t)__src);
  IdentifiedDocumentGroupConfiguration.init(_:)((uint64_t)__src, (uint64_t)v13);
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)__src);
  BYTE1(__src[15]) = 2;
  v1 = v14;
  v2 = v15;
  v3 = v16;
  outlined copy of SceneID(v14, v15, v16);
  DisplayList.Version.init(forUpdate:)();
  v4 = v11[2];
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v11);
  v5 = v11[0];
  v6 = v11[1];
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __src[16] = v1;
  __src[17] = v2;
  LOBYTE(__src[18]) = v3;
  __src[19] = v4;
  __src[20] = v5;
  __src[21] = v6;
  LOBYTE(__src[22]) = 0;
  memset(&__src[23], 0, 17);
  __src[26] = 0;
  __src[27] = 0;
  LOBYTE(__src[28]) = 1;
  __src[29] = 0;
  __src[30] = 0;
  LOBYTE(__src[31]) = 1;
  *(_WORD *)((char *)&__src[31] + 1) = 0;
  __src[32] = v7;
  __src[33] = v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_187BF9830;
  memcpy((void *)(v9 + 32), __src, 0x110uLL);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
  return v9;
}

uint64_t protocol witness for Rule.value.getter in conformance DocumentGroup<A, B>.MakeList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DocumentGroup.MakeList.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DocumentGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DocumentGroup);
}

_UNKNOWN **sub_187AC48C0()
{
  return &protocol witness table for DocumentGroup<A, B>.DocumentContentScene;
}

uint64_t type metadata accessor for DocumentGroup.DocumentContentScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DocumentGroup.DocumentContentScene);
}

uint64_t partial apply for closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)()
{
  uint64_t v0;

  return implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(*(_DWORD *)(v0 + 40), *(_OWORD **)(v0 + 48), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for DocumentGroup.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DocumentGroup.MakeList);
}

void base witness table accessor for _AttributeBody in DocumentGroup<A, B>.MakeList()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187AC4914()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for ButtonStyleAdaptorMenuStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 7) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187AC49C0 + 4 * byte_187C89B10[v12]))();
  }
}

void storeEnumTagSinglePayload for ButtonStyleAdaptorMenuStyle(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187AC4B68()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AC4BE4);
}

void sub_187AC4B70(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AC4B78);
  JUMPOUT(0x187AC4BE4);
}

void sub_187AC4BBC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AC4BE4);
}

void sub_187AC4BC4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AC4BE4);
}

uint64_t sub_187AC4BCC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x187AC4BD8);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x187AC4BE4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

ValueMetadata *type metadata accessor for CustomButtonMenuStyle()
{
  return &type metadata for CustomButtonMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonStyleAdaptorMenuStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance CustomButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  outlined copy of AppIntentExecutor?(v3);
  return outlined copy of AppIntentExecutor?(v4);
}

uint64_t CustomButtonMenuStyleWriter.styleBody(configuration:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t AssociatedConformanceWitness;
  void (*v18)(char *, uint64_t);
  _OWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v20 - v14;
  v16 = a1[1];
  v20[0] = *a1;
  v20[1] = v16;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v5 + 24))(v20, v6, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, AssociatedTypeWitness);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v15, AssociatedTypeWitness, a3);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
}

uint64_t ButtonStyleAdaptorMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a3;
  v6 = type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
  v7 = *(_QWORD *)(a2 + 24);
  v30 = *(_QWORD *)(a2 + 16);
  v28 = v6;
  v29 = v7;
  type metadata accessor for UIKitButtonStyleModifier(255, v30, v7, v8);
  v9 = type metadata accessor for ModifiedContent();
  v31 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v27 - v15;
  v17 = *a1;
  v18 = a1[1];
  v20 = a1[2];
  v19 = a1[3];
  v21 = v3 + *(int *)(a2 + 36);
  v22 = *(_QWORD *)v21;
  LOBYTE(a2) = *(_BYTE *)(v21 + 8);
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v20);
  outlined copy of Environment<Bool>.Content(v22, a2);
  v23 = specialized Environment.wrappedValue.getter(v22, a2);
  outlined consume of Environment<Bool>.Content(v22, a2);
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  v33[2] = v17;
  v33[3] = v18;
  v34 = 0;
  v35 = v23;
  v36 = 2;
  v37 = v20;
  v38 = v19;
  View.uikitButtonStyle<A>(_:)(v27[1], v28, v30, (uint64_t)&protocol witness table for UIKitMenuButton<A, B>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  v33[0] = &protocol witness table for UIKitMenuButton<A, B>;
  v33[1] = &protocol witness table for UIKitButtonStyleModifier<A>;
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v9, v33);
  static ViewBuilder.buildExpression<A>(_:)(v12, v9, v24);
  v25 = *(void (**)(char *, uint64_t))(v31 + 8);
  v25(v12, v9);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v16, v9, v32);
  return ((uint64_t (*)(char *, uint64_t))v25)(v16, v9);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in CustomButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CustomButtonMenuStyleWriter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AC509C + 4 * byte_187C89B1F[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for CustomButtonMenuStyleWriter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for ResolvedCustomButtonMenu()
{
  return &type metadata for ResolvedCustomButtonMenu;
}

uint64_t sub_187AC52B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = *a1;
  v2 = a1[1];
  type metadata accessor for UIKitMenuButton<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
  type metadata accessor for UIKitButtonStyleModifier(255, v1, v2, v3);
  v4 = type metadata accessor for ModifiedContent();
  v6[0] = &protocol witness table for UIKitMenuButton<A, B>;
  v6[1] = &protocol witness table for UIKitButtonStyleModifier<A>;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v6);
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedCustomButtonMenu()
{
  lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>;
  if (!lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>)
  {
    type metadata accessor for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>(255);
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>);
  }
  return result;
}

void type metadata accessor for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>)
  {
    v2 = lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic();
    v4 = type metadata accessor for CustomButtonMenuStyleWriter(a1, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>);
  }
}

unint64_t instantiation function for generic protocol witness table for ResolvedCustomButtonMenu(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in CustomButtonMenuStyleWriter<A>()
{
  return &protocol witness table for CustomButtonMenuStyleWriter<A>;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in CustomButtonMenuStyleWriter<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for CustomButtonMenuStyleWriter<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>);
  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for CustomButtonMenuStyleWriter<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_187AC54BC()
{
  swift_getAssociatedTypeWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t UIViewRepresentableContext.transaction.getter()
{
  specialized ReferenceFileDocumentConfiguration.document.getter();
  return swift_retain();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitButtonAdaptor<A>(_QWORD *a1@<X8>)
{
  static UIViewRepresentable._layoutOptions(_:)(a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitButtonAdaptor<A>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonAdaptor<A>, a2);
  static UIViewRepresentable._makeView(view:inputs:)(a1, a2, v6, a3);
}

void specialized static UIViewRepresentable._makeView(view:inputs:)(uint64_t a1@<X1>, double *a2@<X8>)
{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<SystemSlider>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitStepper>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for TextViewAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<TextViewAdaptor>, (void (*)(uint64_t))type metadata accessor for TextViewAdaptor);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitPagingView>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitTextViewAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitTextViewAdaptor>, (void (*)(uint64_t))type metadata accessor for UIKitTextViewAdaptor);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for KitRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<KitRepresentable>, (void (*)(uint64_t))type metadata accessor for KitRepresentable);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitPasteControl>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<BridgedColorPicker>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitRichTextEditor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitRichTextEditor>, (void (*)(uint64_t))type metadata accessor for UIKitRichTextEditor);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitToolbarAdaptor>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitSearchBarAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSearchBarAdaptor>, (void (*)(uint64_t))type metadata accessor for UIKitSearchBarAdaptor);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<SystemSegmentedControl>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<BackButtonActionableBar.KeyboardBackdropView>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<LinearUIKitProgressView.Base>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for PlatformTextFieldAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<PlatformTextFieldAdaptor>, (void (*)(uint64_t))type metadata accessor for PlatformTextFieldAdaptor);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CircularUIKitProgressView>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitDatePickerRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitDatePickerRepresentable>, (void (*)(uint64_t))type metadata accessor for UIKitDatePickerRepresentable);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSegmentedControlAdaptor>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitCalendarViewRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable);
    type metadata accessor for _GraphValue<ArchivablePlaybackButtonViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<UIKitCalendarViewRepresentable>, (void (*)(uint64_t))type metadata accessor for UIKitCalendarViewRepresentable);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch);
    type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<Switch>);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitButtonAdaptor<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonAdaptor<A>, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitButtonAdaptor<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitButtonAdaptor<A>, a1);
  specialized PrimitiveView.body.getter();
}

void UIViewRepresentable.body.getter()
{
  specialized PrimitiveView.body.getter();
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

double UIViewRepresentable._identifiedViewTree(in:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 160) = 2;
  return result;
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitSearchBarAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitSearchBarAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitSearchBarAdaptor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

double protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance UIKitWheelPicker<A>@<D0>(uint64_t a1@<X8>)
{
  return UIViewRepresentable._identifiedViewTree(in:)(a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitWheelPicker<A>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitWheelPicker<A>, a2);
  static UIViewRepresentable._makeView(view:inputs:)(a1, a2, v6, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitWheelPicker<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitWheelPicker<A>, a3);
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitWheelPicker<A>(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitWheelPicker<A>, a1);
  specialized PrimitiveView.body.getter();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitStepper(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitStepper(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitStepper()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitPagingView(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPagingView(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitPagingView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance SystemSegmentedControl(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance SystemSegmentedControl(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance SystemSegmentedControl()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitPasteControl(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPasteControl(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitPasteControl()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance PlatformTextFieldAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance PlatformTextFieldAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance PlatformTextFieldAdaptor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance TextViewAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance TextViewAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance TextViewAdaptor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitCalendarViewRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitCalendarViewRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitCalendarViewRepresentable()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitSegmentedControlAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitSegmentedControlAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitSegmentedControlAdaptor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance LinearUIKitProgressView.Base(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance LinearUIKitProgressView.Base(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance LinearUIKitProgressView.Base()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance CircularUIKitProgressView(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance CircularUIKitProgressView(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance CircularUIKitProgressView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitRichTextEditor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitRichTextEditor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitRichTextEditor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance BackButtonActionableBar.KeyboardBackdropView(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance BackButtonActionableBar.KeyboardBackdropView(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance BackButtonActionableBar.KeyboardBackdropView()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitToolbarAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitToolbarAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitToolbarAdaptor()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitTextViewAdaptor(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitTextViewAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitTextViewAdaptor()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPageIndexView<A>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  static UIViewRepresentable._makeView(view:inputs:)(a1, a2, (uint64_t)&protocol witness table for UIKitPageIndexView<A>, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitPageIndexView<A>()
{
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitPageIndexView<A>()
{
  specialized PrimitiveView.body.getter();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance KitRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance KitRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance KitRepresentable()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitDatePickerRepresentable(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitDatePickerRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitDatePickerRepresentable()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

uint64_t key path getter for UIViewRepresentableContext.transaction : <A>UIViewRepresentableContext<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  type metadata accessor for UIViewRepresentableContext(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  *a4 = specialized ReferenceFileDocumentConfiguration.document.getter();
  return swift_retain();
}

uint64_t key path setter for UIViewRepresentableContext.transaction : <A>UIViewRepresentableContext<A>()
{
  uint64_t v0;

  v0 = swift_retain();
  return UIViewRepresentableContext.transaction.setter(v0);
}

uint64_t UIViewRepresentableContext.transaction.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t UIViewRepresentableContext.animate(changes:completion:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[6];

  swift_retain();
  v8 = Transaction.animation.getter();
  v9 = swift_release();
  if (v8)
  {
    swift_retain();
    v10 = Transaction.disablesAnimations.getter();
    v11 = swift_release();
    if ((v10 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v11, v12);
      v15[2] = a1;
      v15[3] = a2;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = a3;
      *(_QWORD *)(v14 + 24) = a4;
      outlined copy of AppIntentExecutor?((uint64_t)a3);
      specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v8, partial apply for thunk for @callee_guaranteed () -> (@error @owned Error), (uint64_t)v15, (uint64_t)_sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0, v14);
      swift_release();
      return swift_release();
    }
    v9 = swift_release();
  }
  result = a1(v9);
  if (a3)
    return a3(result);
  return result;
}

uint64_t PlatformViewRepresentableAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 72))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return PlatformViewRepresentableAdaptor._identifiedViewTree(in:)(*a1, a2);
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance Switch(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance Switch(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance Switch()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance BridgedColorPicker(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance BridgedColorPicker(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance BridgedColorPicker()
{
  protocol witness for View.body.getter in conformance ListRowHeightTemplateContent();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance SystemSlider(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void protocol witness for static View._makeView(view:inputs:) in conformance SystemSlider(uint64_t a1@<X1>, double *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  _OWORD v4[5];
  int v5;

  v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance SystemSlider()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_187AC7BF0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_187AC7C24()
{
  return 16;
}

__n128 sub_187AC7C30(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of UIViewRepresentable.makeUIView(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIViewRepresentable.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of UIViewRepresentable._resetUIView(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of static UIViewRepresentable.dismantleUIView(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of UIViewRepresentable.makeCoordinator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of UIViewRepresentable._identifiedViewTree(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of UIViewRepresentable.sizeThatFits(_:uiView:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of UIViewRepresentable._overrideLayoutTraits(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of static UIViewRepresentable._modifyBridgedViewInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of static UIViewRepresentable._layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for UIViewRepresentableContext(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 33) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v12 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    v13 = a2[3];
    v14 = *((_BYTE *)a2 + 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 32) = v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))((a1 + v6 + 33) & ~v6, ((unint64_t)a2 + v6 + 33) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t initializeWithCopy for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIViewRepresentableContext(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((v7 + 33) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 > 3)
    goto LABEL_7;
  v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v12))
  {
    v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10)
      goto LABEL_15;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_24;
LABEL_7:
      v10 = *((unsigned __int8 *)a1 + v8);
      if (!*((_BYTE *)a1 + v8))
        goto LABEL_24;
LABEL_15:
      v13 = (v10 - 1) << v9;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = v8;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      v16 = v6 + v13;
      return (v16 + 1);
    }
    v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(_WORD *)((char *)a1 + v8))
      goto LABEL_15;
  }
LABEL_24:
  if (v5 > 0x7FFFFFFE)
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 33) & ~v7);
  v15 = *a1;
  if (*a1 >= 0xFFFFFFFFuLL)
    LODWORD(v15) = -1;
  v16 = v15 - 1;
  if (v16 < 0)
    v16 = -1;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for UIViewRepresentableContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFEu)
    v7 = 2147483646;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t getEnumTagSinglePayload for PlatformViewRepresentableAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AC8508 + 4 * byte_187C89D1E[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PlatformViewRepresentableAdaptor(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for PlatformViewRepresentableAdaptor(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = a3(255);
    v9 = type metadata accessor for PlatformViewRepresentableAdaptor(a1, v7, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void protocol witness for View.body.getter in conformance StyledView()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for static Rule.initialValue.getter in conformance SectionBody(_BYTE *a1@<X8>)
{
  *a1 = -1;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionBody@<X0>(char *a1@<X8>)
{
  uint64_t *Value;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  Value = (uint64_t *)AGGraphGetValue();
  v3 = *Value;
  v4 = Value[1];
  if (!v4)
  {
    result = outlined consume of Binding<NavigationSplitViewColumn>?(*Value, 0);
    goto LABEL_5;
  }
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE75A0]);
  MEMORY[0x18D75B9C8](&v7);
  swift_release();
  swift_release();
  result = outlined consume of Binding<NavigationSplitViewColumn>?(v3, v4);
  if ((v7 & 1) != 0)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  *a1 = v6;
  return result;
}

uint64_t static SectionContainer._makeViewList(root:inputs:body:)()
{
  uint64_t (*v0)(void);

  v0 = MEMORY[0x1E0CE1470];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SectionContainer>, (uint64_t)&type metadata for SectionContainer, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE1470]);
  _GraphValue.subscript.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _GraphValue<SectionStyleConfiguration.Footer>, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, (uint64_t (*)(_QWORD, uint64_t))v0);
  _GraphValue.value.getter();
  return static _ViewListOutputs.groupViewList<A, B>(parent:footer:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SectionContainer()
{
  return static _VariadicView_MultiViewRoot._makeView(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance SectionContainer()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for SectionContainer()
{
  return &type metadata for SectionContainer;
}

_UNKNOWN **sub_187AC8B50()
{
  return &protocol witness table for StyledView;
}

_UNKNOWN **base witness table accessor for View in StyledView()
{
  return &protocol witness table for StyledView;
}

void *type metadata accessor for SectionBody()
{
  return &unk_1E1AB02E8;
}

uint64_t TupleTableRowContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t TupleTableRowContent.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*TupleTableRowContent.value.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TupleTableRowContent.init(_:ofType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static TupleTableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t List;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[11];
  _BYTE v46[160];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  v11 = a2[7];
  v54 = a2[6];
  v55 = v11;
  v56 = a2[8];
  v57 = *((_QWORD *)a2 + 18);
  v12 = a2[3];
  v50 = a2[2];
  v51 = v12;
  v13 = a2[5];
  v52 = a2[4];
  v53 = v13;
  v14 = a2[1];
  v48 = *a2;
  v49 = v14;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  *(_OWORD *)&v46[104] = v54;
  *(_OWORD *)&v46[120] = v55;
  *(_OWORD *)&v46[136] = v56;
  *(_OWORD *)&v46[40] = v50;
  *(_OWORD *)&v46[56] = v51;
  *(_OWORD *)&v46[72] = v52;
  *(_OWORD *)&v46[88] = v53;
  *(_OWORD *)&v46[8] = v48;
  v15 = *(_QWORD *)v46;
  *(_OWORD *)&v46[24] = v49;
  *(_DWORD *)v46 = v10;
  *(_QWORD *)&v46[152] = v57;
  *(_QWORD *)&v47 = 0;
  *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DEE9D8];
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    outlined retain of _TableRowInputs((uint64_t)&v48);
    v17 = (__int128 *)(v15 + 40);
    do
    {
      v18 = *v17;
      v17 = (__int128 *)((char *)v17 + 24);
      v43 = v18;
      *(_QWORD *)&v47 = AGTupleElementOffset();
      v45[0] = v18;
      List = type metadata accessor for TupleTableRowContent.MakeList(0, a3, a4, a5);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v46, List, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.MakeList);
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v20 = *((_QWORD *)&v47 + 1);
  }
  else
  {
    outlined retain of _TableRowInputs((uint64_t)&v48);
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v43 = a3;
  v21 = *(_QWORD *)(v20 + 16);
  v22 = MEMORY[0x1E0DEE9D8];
  if (v21)
  {
    v41 = a5;
    v42 = a6;
    v44 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    v22 = v44;
    v40 = v20;
    v23 = (_DWORD *)(v20 + 40);
    do
    {
      v24 = *v23;
      *(_QWORD *)&v45[0] = *((_QWORD *)v23 - 1);
      DWORD2(v45[0]) = v24;
      v25 = PreferencesOutputs.subscript.getter();
      if ((v25 & 0x100000000) != 0)
        __break(1u);
      v26 = v25;
      v44 = v22;
      v28 = *(_QWORD *)(v22 + 16);
      v27 = *(_QWORD *)(v22 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1);
        v22 = v44;
      }
      *(_QWORD *)(v22 + 16) = v28 + 1;
      *(_DWORD *)(v22 + 4 * v28 + 32) = v26;
      v23 += 4;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a5 = v41;
  }
  v29 = PreferencesOutputs.init()();
  *(_QWORD *)&v45[0] = v22;
  MEMORY[0x1E0C80A78](v29, v30);
  v38 = type metadata accessor for TupleTableRowContent.MergeLists(0, v43, a4, a5);
  v39 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TupleTableRowContent<A, B>.MergeLists, v38);
  type metadata accessor for Attribute<TableRowList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v45, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v37, v38, MEMORY[0x1E0DEDCE8], v31, MEMORY[0x1E0DEDD18], v32);
  v33 = swift_bridgeObjectRelease();
  *(_QWORD *)&v45[0] = *((_QWORD *)&v56 + 1);
  DWORD2(v45[0]) = v57;
  MEMORY[0x1E0C80A78](v33, v34);
  LODWORD(v38) = v35;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v45[8] = *(_OWORD *)&v46[128];
  v45[9] = *(_OWORD *)&v46[144];
  v45[10] = v47;
  v45[4] = *(_OWORD *)&v46[64];
  v45[5] = *(_OWORD *)&v46[80];
  v45[6] = *(_OWORD *)&v46[96];
  v45[7] = *(_OWORD *)&v46[112];
  v45[0] = *(_OWORD *)v46;
  v45[1] = *(_OWORD *)&v46[16];
  v45[2] = *(_OWORD *)&v46[32];
  v45[3] = *(_OWORD *)&v46[48];
  return outlined release of TupleTableRowContent<A, B>.MakeList((uint64_t)v45);
}

uint64_t type metadata accessor for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTableRowContent.MakeList);
}

uint64_t static TupleTableRowContent._tableRowCount(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v17[9];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a1[7];
  v37 = a1[6];
  v38 = v7;
  v39 = a1[8];
  v40 = *((_QWORD *)a1 + 18);
  v8 = a1[3];
  v33 = a1[2];
  v34 = v8;
  v9 = a1[5];
  v35 = a1[4];
  v36 = v9;
  v10 = a1[1];
  v31 = *a1;
  v32 = v10;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v11 = v19;
  v25 = v37;
  v26 = v38;
  v27 = v39;
  v21 = v33;
  v22 = v34;
  v23 = v35;
  v24 = v36;
  v19 = v31;
  v20 = v32;
  v28 = v40;
  v29 = 0;
  v30 = 0;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    outlined retain of _TableRowInputs((uint64_t)&v31);
    v13 = type metadata accessor for TupleTableRowContent.CountRows(0, a2, a3, a4);
    v14 = 40;
    do
    {
      v17[0] = *(_OWORD *)(v11 + v14);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v19, v13, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CountRows);
      v14 += 24;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v15 = v29;
  }
  else
  {
    outlined retain of _TableRowInputs((uint64_t)&v31);
    swift_bridgeObjectRelease();
    v15 = 0;
  }
  v17[6] = v25;
  v17[7] = v26;
  v17[8] = v27;
  v18 = v28;
  v17[2] = v21;
  v17[3] = v22;
  v17[4] = v23;
  v17[5] = v24;
  v17[0] = v19;
  v17[1] = v20;
  outlined release of _TableRowInputs((uint64_t)v17);
  return v15;
}

uint64_t static TupleTableRowContent._containsOutlineSymbol(inputs:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[9];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = a1[7];
  v37 = a1[6];
  v38 = v7;
  v39 = a1[8];
  v40 = *((_QWORD *)a1 + 18);
  v8 = a1[3];
  v33 = a1[2];
  v34 = v8;
  v9 = a1[5];
  v35 = a1[4];
  v36 = v9;
  v10 = a1[1];
  v31 = *a1;
  v32 = v10;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  v11 = v20;
  v26 = v37;
  v27 = v38;
  v28 = v39;
  v29 = v40;
  v22 = v33;
  v23 = v34;
  v24 = v35;
  v25 = v36;
  v20 = v31;
  v21 = v32;
  v30 = 0;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    outlined retain of _TableRowInputs((uint64_t)&v31);
LABEL_8:
    swift_bridgeObjectRelease();
    v16 = 0;
    goto LABEL_9;
  }
  outlined retain of _TableRowInputs((uint64_t)&v31);
  v13 = type metadata accessor for TupleTableRowContent.CheckOutline(0, a2, a3, a4);
  v18[0] = *(_OWORD *)(v11 + 40);
  TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v20, v13, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CheckOutline);
  if ((v30 & 1) == 0)
  {
    v14 = 64;
    while (--v12)
    {
      v15 = v14 + 24;
      v18[0] = *(_OWORD *)(v11 + v14);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v20, v13, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CheckOutline);
      v14 = v15;
      if ((v30 & 1) != 0)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  v16 = 1;
LABEL_9:
  v18[6] = v26;
  v18[7] = v27;
  v18[8] = v28;
  v19 = v29;
  v18[2] = v22;
  v18[3] = v23;
  v18[4] = v24;
  v18[5] = v25;
  v18[0] = v20;
  v18[1] = v21;
  outlined release of _TableRowInputs((uint64_t)v18);
  return v16;
}

uint64_t TupleTableRowContent.MakeList.visit<A>(type:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[9];
  uint64_t v20;
  char v21[4];
  uint64_t v22;
  int v23;

  v5 = v4;
  LODWORD(v19[0]) = *(_DWORD *)v4;
  type metadata accessor for TupleTableRowContent(255, a2[2], a2[3], a2[4]);
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v8 = *(_OWORD *)(v4 + 120);
  v19[6] = *(_OWORD *)(v4 + 104);
  v19[7] = v8;
  v19[8] = *(_OWORD *)(v4 + 136);
  v20 = *(_QWORD *)(v4 + 152);
  v9 = *(_OWORD *)(v4 + 56);
  v19[2] = *(_OWORD *)(v4 + 40);
  v19[3] = v9;
  v10 = *(_OWORD *)(v4 + 88);
  v19[4] = *(_OWORD *)(v4 + 72);
  v19[5] = v10;
  v11 = *(_OWORD *)(v4 + 24);
  v19[0] = *(_OWORD *)(v4 + 8);
  v19[1] = v11;
  (*(void (**)(uint64_t *__return_ptr, char *, _OWORD *, uint64_t, uint64_t))(a4 + 48))(&v22, v21, v19, a3, a4);
  v12 = v22;
  v13 = v23;
  v14 = *(_QWORD *)(v4 + 168);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, (char *)v14);
    v14 = result;
  }
  v17 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    v14 = result;
  }
  *(_QWORD *)(v14 + 16) = v17 + 1;
  v18 = v14 + 16 * v17;
  *(_QWORD *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(_QWORD *)(v5 + 168) = v14;
  return result;
}

uint64_t protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return TupleTableRowContent.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void TupleTableRowContent.CountRows.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _OWORD v14[9];
  uint64_t v15;

  if ((*(_BYTE *)(v4 + 160) & 1) != 0)
    goto LABEL_5;
  v5 = *(_OWORD *)(v4 + 112);
  v14[6] = *(_OWORD *)(v4 + 96);
  v14[7] = v5;
  v14[8] = *(_OWORD *)(v4 + 128);
  v6 = *(_QWORD *)(v4 + 152);
  v15 = *(_QWORD *)(v4 + 144);
  v7 = *(_OWORD *)(v4 + 48);
  v14[2] = *(_OWORD *)(v4 + 32);
  v14[3] = v7;
  v8 = *(_OWORD *)(v4 + 80);
  v14[4] = *(_OWORD *)(v4 + 64);
  v14[5] = v8;
  v9 = *(_OWORD *)(v4 + 16);
  v14[0] = *(_OWORD *)v4;
  v14[1] = v9;
  v10 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a4 + 56))(v14, a3, a4);
  if ((v11 & 1) != 0)
  {
LABEL_5:
    v12 = 0;
    v13 = 1;
    goto LABEL_6;
  }
  v12 = v6 + v10;
  if (!__OFADD__(v6, v10))
  {
    v13 = 0;
LABEL_6:
    *(_QWORD *)(v4 + 152) = v12;
    *(_BYTE *)(v4 + 160) = v13;
    return;
  }
  __break(1u);
}

void protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.CountRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTableRowContent.CountRows.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleTableRowContent.CheckOutline.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[9];
  uint64_t v11;

  if ((*(_BYTE *)(v4 + 152) & 1) != 0)
  {
    result = 1;
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 112);
    v10[6] = *(_OWORD *)(v4 + 96);
    v10[7] = v6;
    v10[8] = *(_OWORD *)(v4 + 128);
    v11 = *(_QWORD *)(v4 + 144);
    v7 = *(_OWORD *)(v4 + 48);
    v10[2] = *(_OWORD *)(v4 + 32);
    v10[3] = v7;
    v8 = *(_OWORD *)(v4 + 80);
    v10[4] = *(_OWORD *)(v4 + 64);
    v10[5] = v8;
    v9 = *(_OWORD *)(v4 + 16);
    v10[0] = *(_OWORD *)v4;
    v10[1] = v9;
    result = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a4 + 64))(v10, a3, a4);
  }
  *(_BYTE *)(v4 + 152) = result & 1;
  return result;
}

uint64_t protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.CheckOutline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleTableRowContent.CheckOutline.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleTableRowContent.MergeLists.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _UNKNOWN **v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v5 = 0;
    v4 = v13;
    do
    {
      Value = AGGraphGetValue();
      outlined init with copy of TableRowList(Value, (uint64_t)&v14);
      v8 = *(_QWORD *)(v13 + 16);
      v7 = *(_QWORD *)(v13 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      ++v5;
      *(_QWORD *)(v13 + 16) = v8 + 1;
      v9 = v13 + 40 * v8;
      v10 = v14;
      v11 = v15;
      *(_QWORD *)(v9 + 64) = v16;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *((_QWORD *)&v15 + 1) = &type metadata for MergedTableRowGenerator;
  v16 = &protocol witness table for MergedTableRowGenerator;
  *(_QWORD *)&v14 = v4;
  return outlined init with take of OptionalBinaryInteger(&v14, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance TupleTableRowContent<A, B>.MergeLists@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return TupleTableRowContent.MergeLists.value.getter(*v1, a1);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance TupleTableRowContent<A, B>@<X0>(int *a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleTableRowContent._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance TupleTableRowContent<A, B>(__int128 *a1, uint64_t *a2)
{
  return static TupleTableRowContent._tableRowCount(inputs:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance TupleTableRowContent<A, B>(__int128 *a1, uint64_t *a2)
{
  return static TupleTableRowContent._containsOutlineSymbol(inputs:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t static Group<A>._makeRows(content:inputs:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  uint64_t v12;
  _BYTE v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v6 = a2[7];
  v20 = a2[6];
  v21 = v6;
  v22 = a2[8];
  v23 = *((_QWORD *)a2 + 18);
  v7 = a2[3];
  v16 = a2[2];
  v17 = v7;
  v8 = a2[5];
  v18 = a2[4];
  v19 = v8;
  v9 = a2[1];
  v14 = *a2;
  v15 = v9;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v11[6] = v20;
  v11[7] = v21;
  v11[8] = v22;
  v12 = v23;
  v11[2] = v16;
  v11[3] = v17;
  v11[4] = v18;
  v11[5] = v19;
  v11[0] = v14;
  v11[1] = v15;
  return (*(uint64_t (**)(_BYTE *, _OWORD *, uint64_t, uint64_t))(a4 + 48))(v13, v11, a3, a4);
}

uint64_t static Group<A>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
}

uint64_t static Group<A>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[9];
  uint64_t v9;

  v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <A> Group<A>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeRows(content:inputs:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._tableRowCount(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._containsOutlineSymbol(inputs:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

uint64_t type metadata accessor for TupleTableRowContent.MergeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTableRowContent.MergeLists);
}

void type metadata accessor for Attribute<TableRowList>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<TableRowList>)
  {
    v0 = type metadata accessor for Attribute();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>);
  }
}

uint64_t outlined release of TupleTableRowContent<A, B>.MakeList(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTableRowContent.CountRows);
}

uint64_t type metadata accessor for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTableRowContent.CheckOutline);
}

uint64_t instantiation function for generic protocol witness table for TupleTableRowContent<A, B>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TupleTableRowContent<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_187AC9CBC + 4 * byte_187C89FC0[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for TupleTableRowContent(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for TupleTableRowContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TupleTableRowContent);
}

uint64_t initializeWithCopy for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.CheckOutline(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 153))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.CheckOutline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 153) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 153) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t initializeWithCopy for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  v4 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v4;
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.CountRows(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 161))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.CountRows(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 161) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 161) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t destroy for TupleTableRowContent.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.MakeList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void base witness table accessor for _AttributeBody in TupleTableRowContent<A, B>.MergeLists()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t TitleOnlyLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TitleOnlyLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance TitleOnlyLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = swift_getKeyPath();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

ValueMetadata *type metadata accessor for TitleOnlyLabelStyle()
{
  return &type metadata for TitleOnlyLabelStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>();
    v2[0] = &protocol witness table for LabelStyleConfiguration.Title;
    v2[1] = &protocol witness table for _ContainerValueWritingModifier<A>;
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>(255);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>);
  }
}

id PlatformItemList.Item.configurationIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  int8x16_t *v1;
  unint64_t v3;
  char v4;
  int8x16_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  id v16;
  _BYTE v17[184];

  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v1[4].i64, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  v3 = v1[20].u64[1];
  if (v3 >> 2 == 0xFFFFFFFF)
  {
    v4 = 0;
  }
  else
  {
    v7 = v3 == 0xC000000000000000;
    v5 = vorrq_s8(vorrq_s8(v1[21], v1[23]), vorrq_s8(v1[22], v1[24]));
    v6 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v1[20].i64[0] | v1[19].i64[1] | v1[19].i64[0] | v1[18].i64[1];
    v7 = v7 && v6 == 0;
    v4 = v7;
  }
  v8 = v1[38].i64[1];
  v10 = v1[1].i64[0];
  v9 = v1[1].i64[1];
  v11 = (void *)v1->i64[0];
  v12 = (_QWORD *)v1[39].i64[0];
  v16 = v11;
  if (v12)
  {
    if (v12[2])
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlatformItemList.Item() - 8) + 80);
      v12 = *(_QWORD **)((char *)v12 + ((v13 + 32) & ~v13));
      v14 = v12;
    }
    else
    {
      v12 = 0;
    }
  }
  *(_BYTE *)a1 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v17) == 0;
  *(_BYTE *)(a1 + 1) = v8 != 0;
  *(_BYTE *)(a1 + 2) = v4;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v12;
  swift_bridgeObjectRetain();
  return v16;
}

unint64_t PlatformItemList.Item.ConfigurationIdentifier.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE v32[16];
  _QWORD v33[2];

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 8, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for String?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v32, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for String?);
  if (v33[1])
  {
    v7 = v33[0];
  }
  else
  {
    v30 = 0;
    v31 = 0xE000000000000000;
    v8 = *(void **)(v0 + 24);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v9, sel_string);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v13 = v12;

      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease();
    }
    v15 = *(void **)(v1 + 32);
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v16, sel_string);
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v19;

      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);

      swift_bridgeObjectRelease();
    }
    v7 = v30;
    v22 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v22 = v30 & 0xFFFFFFFFFFFFLL;
    if (!v22)
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v28 = 0xD00000000000001FLL;
      v29 = 0x8000000187BF1390;
      UUID.init()();
      v23 = UUID.uuidString.getter();
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v26._countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v7 = v28;
    }
  }
  outlined retain of String?((uint64_t)v32);
  return v7;
}

uint64_t View.scrollPosition(_:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _BYTE v12[96];
  uint64_t v13;
  uint64_t v14;
  char v15;

  outlined init with copy of Binding<ScrollPosition>(a1, (uint64_t)v12);
  v13 = a2;
  v14 = a3;
  v15 = a4 & 1;
  MEMORY[0x18D75B4AC](v12, a5, MEMORY[0x1E0CE6470], a6);
  return outlined destroy of ScrollPositionBindingModifier((uint64_t)v12);
}

uint64_t outlined destroy of ScrollPositionBindingModifier(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE6470] - 8) + 8))();
  return a1;
}

uint64_t View.scrollPosition<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[104];

  type metadata accessor for Optional();
  v7 = type metadata accessor for Binding();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)v21 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v21 - v11, a1, v7, v10);
  static UnitPoint.topLeading.getter();
  v14 = v13;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  v21[0] = v14;
  v21[1] = v16;
  v22 = 0;
  v17 = type metadata accessor for ValueToScrollPosition();
  MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5248], v17);
  Binding.projecting<A>(_:)();
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v26, (uint64_t)v21);
  static UnitPoint.topLeading.getter();
  v23 = v18;
  v24 = v19;
  v25 = 0;
  MEMORY[0x18D75B4AC](v21, a2, MEMORY[0x1E0CE6470], a4);
  outlined destroy of ScrollPositionBindingModifier((uint64_t)v21);
  return outlined destroy of Binding<ScrollPosition>((uint64_t)v26);
}

uint64_t View.scrollPosition<A>(initialID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[80];

  v9 = type metadata accessor for Optional();
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v15 - v13, a1, v9, v11);
  v16 = a5;
  MEMORY[0x18D75FFDC](MEMORY[0x1E0DEE990], v9, &v16);
  ScrollPosition.init<A>(id:anchor:)();
  MEMORY[0x18D75B4AC](v17, a2, MEMORY[0x1E0CE49A0], a4);
  return outlined destroy of ScrollValueModifier((uint64_t)v17);
}

uint64_t outlined destroy of ScrollValueModifier(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CE49A0] - 8) + 8))();
  return a1;
}

uint64_t View.scrollPosition(initialAnchor:)(uint64_t a1, uint64_t a2, char a3)
{
  return View.defaultScrollAnchor(_:)(a1, a2, a3 & 1);
}

uint64_t View.scrolled<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return View.scrollPosition<A>(id:anchor:)(a1, 0, 0, 1, a2, a3, a4);
}

uint64_t sub_187ACB3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CE6460];
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187ACB428(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm(a1, MEMORY[0x1E0CE6470], MEMORY[0x1E0CE6460]);
}

uint64_t sub_187ACB43C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm(a1, MEMORY[0x1E0CE49A0], MEMORY[0x1E0CE4990]);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 16);
  v5 = type metadata accessor for ModifiedContent();
  v7[0] = v4;
  v7[1] = a3;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v7);
}

uint64_t View.tabViewCustomization(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for TabViewCustomizationModifier();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)v9);
  MEMORY[0x18D75B4AC](v9, a2, v6, a3);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TabViewCustomizationModifier);
}

uint64_t type metadata accessor for TabViewCustomizationModifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TabViewCustomizationModifier;
  if (!type metadata singleton initialization cache for TabViewCustomizationModifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_187ACB590(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TabViewCustomizationModifier();
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for TabViewCustomizationModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewCustomizationModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t *, _QWORD, uint64_t, uint64_t);

  type metadata accessor for Binding<TabViewCustomization>?(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    type metadata accessor for Binding<TabViewCustomization>(0);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *(int *)(v8 + 32);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for UUID();
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_retain();
      swift_retain();
      v16(v13, v14, v15);
      v17 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v13[*(int *)(v17 + 20)] = *(_QWORD *)&v14[*(int *)(v17 + 20)];
      *(_QWORD *)&v13[*(int *)(v17 + 24)] = *(_QWORD *)&v14[*(int *)(v17 + 24)];
      v18 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TabViewCustomizationModifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  type metadata accessor for Binding<TabViewCustomization>(0);
  v3 = v2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    swift_release();
    swift_release();
    v5 = a1 + *(int *)(v3 + 32);
    v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    type metadata accessor for TabViewCustomization();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for TabViewCustomizationModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD, uint64_t, uint64_t);

  type metadata accessor for Binding<TabViewCustomization>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = *(int *)(v5 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    v14 = type metadata accessor for TabViewCustomization();
    *(_QWORD *)&v10[*(int *)(v14 + 20)] = *(_QWORD *)&v11[*(int *)(v14 + 20)];
    *(_QWORD *)&v10[*(int *)(v14 + 24)] = *(_QWORD *)&v11[*(int *)(v14 + 24)];
    v15 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(a1, 0, 1, v5);
  }
  return a1;
}

_QWORD *assignWithCopy for TabViewCustomizationModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  type metadata accessor for Binding<TabViewCustomization>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      v19 = *(int *)(v5 + 32);
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
      v23 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v20[*(int *)(v23 + 20)] = *(_QWORD *)&v21[*(int *)(v23 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v20[*(int *)(v23 + 24)] = *(_QWORD *)&v21[*(int *)(v23 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  v10 = *(int *)(v5 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v15 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)&v11[*(int *)(v15 + 20)] = *(_QWORD *)&v12[*(int *)(v15 + 20)];
  *(_QWORD *)&v11[*(int *)(v15 + 24)] = *(_QWORD *)&v12[*(int *)(v15 + 24)];
  v16 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(a1, 0, 1, v5);
  return a1;
}

_QWORD *initializeWithTake for TabViewCustomizationModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  type metadata accessor for Binding<TabViewCustomization>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = *(int *)(v5 + 32);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    v13 = type metadata accessor for TabViewCustomization();
    *(_QWORD *)&v10[*(int *)(v13 + 20)] = *(_QWORD *)&v11[*(int *)(v13 + 20)];
    *(_QWORD *)&v10[*(int *)(v13 + 24)] = *(_QWORD *)&v11[*(int *)(v13 + 24)];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

_QWORD *assignWithTake for TabViewCustomizationModifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  type metadata accessor for Binding<TabViewCustomization>(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_release();
      a1[1] = a2[1];
      swift_release();
      v18 = *(int *)(v5 + 32);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
      v22 = type metadata accessor for TabViewCustomization();
      *(_QWORD *)&v19[*(int *)(v22 + 20)] = *(_QWORD *)&v20[*(int *)(v22 + 20)];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v19[*(int *)(v22 + 24)] = *(_QWORD *)&v20[*(int *)(v22 + 24)];
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  v11 = *(int *)(v5 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = type metadata accessor for TabViewCustomization();
  *(_QWORD *)&v12[*(int *)(v15 + 20)] = *(_QWORD *)&v13[*(int *)(v15 + 20)];
  *(_QWORD *)&v12[*(int *)(v15 + 24)] = *(_QWORD *)&v13[*(int *)(v15 + 24)];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewCustomizationModifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187ACBD70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabViewCustomizationModifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187ACBDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void type metadata completion function for TabViewCustomizationModifier()
{
  unint64_t v0;

  type metadata accessor for Binding<TabViewCustomization>?(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t EnvironmentValues.tabViewCustomization.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TabViewCustomizationModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  int v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TabViewCustomizationModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  char v9;

  v4 = *a1;
  v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  v9 = *(_BYTE *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance TabViewCustomizationModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TabViewCustomizationModifier()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomizationModifier and conformance TabViewCustomizationModifier, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomizationModifier, (uint64_t)&protocol conformance descriptor for TabViewCustomizationModifier);
  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TabViewCustomizationModifier()
{
  return &protocol witness table for TabViewCustomizationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in TabViewCustomizationModifier()
{
  return &protocol witness table for TabViewCustomizationModifier;
}

void type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>);
  }
}

uint64_t EnvironmentValues.tabViewCustomization.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t specialized static TabViewCustomizationModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t Value;
  uint64_t v13;

  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v13 - v9;
  type metadata accessor for TabViewCustomizationModifier();
  Value = AGGraphGetValue();
  outlined init with copy of Binding<TabViewCustomization>?(Value, (uint64_t)v10);
  outlined init with copy of Binding<TabViewCustomization>?((uint64_t)v10, (uint64_t)v6);
  type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t View.focusable(_:)(char a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  _BYTE v9[8];
  _QWORD v10[7];

  v9[0] = a1;
  v7 = &type metadata for FocusInteractions;
  v8 = &protocol witness table for FocusInteractions;
  *(_QWORD *)&v6 = 3;
  outlined init with take of OptionalBinaryInteger(&v6, (uint64_t)v10);
  v10[5] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v10[6] = 0;
  MEMORY[0x18D75B4AC](v9, a2, &type metadata for _FocusableModifier, a3);
  return outlined destroy of _FocusableModifier((uint64_t)v9);
}

uint64_t View.focusable(_:interactions:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return View.focusable(_:interactions:)(a1, a2, a3, a4, (uint64_t)&type metadata for FocusInteractions, (uint64_t)&protocol witness table for FocusInteractions);
}

uint64_t View.focusEffect(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

uint64_t EnvironmentValues.focusEffect.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  *a1 = (v4 & 1) == 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.focusEffect : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  BOOL v3;

  result = EnvironmentValues.focusEffect.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.focusEffect : EnvironmentValues()
{
  return EnvironmentValues.focusEffect.setter();
}

uint64_t EnvironmentValues.focusEffect.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.focusEffectDisabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  KeyPath = swift_getKeyPath();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = a1;
  v10[0] = KeyPath;
  v10[1] = partial apply for closure #1 in View.hoverEffectDisabled(_:);
  v10[2] = v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  MEMORY[0x18D75B4AC](v10, a2, v8, a3);
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.isFocusEffectEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.isFocusEffectEnabled : EnvironmentValues@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isFocusEffectEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isFocusEffectEnabled : EnvironmentValues()
{
  return EnvironmentValues.isFocusEffectEnabled.setter();
}

uint64_t EnvironmentValues.isFocusEffectEnabled.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static FocusInteractions.automatic.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t FocusInteractions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FocusInteractions.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*FocusInteractions.rawValue.modify())(_QWORD)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FocusInteractions.resolve(in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *v2;
  if (!*v2)
  {
    v6 = 32;
    goto LABEL_18;
  }
  if ((v5 & 1) == 0)
    goto LABEL_10;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1E1AC3990, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
  swift_retain_n();
  if (v4)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v11 != 1)
  {
LABEL_10:
    v6 = 0;
    if ((v5 & 2) == 0)
      goto LABEL_14;
LABEL_11:
    v7 = 35;
    if ((~v6 & 0x23) == 0)
      v7 = 0;
    v6 |= v7;
    goto LABEL_14;
  }
  v6 = 34;
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_14:
  if ((v5 & 4) != 0)
  {
    v8 = 34;
    if ((~v6 & 0x22) == 0)
      v8 = 0;
    v6 |= v8;
  }
LABEL_18:
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v4)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  result = swift_release_n();
  if ((v6 >> 2) & 1 | v12 & 1)
    v10 = v6;
  else
    v10 = v6 | 4;
  *a2 = v10;
  return result;
}

void static FocusEffect.automatic.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static FocusEffect.disabled.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static FocusEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t (*EnvironmentValues.isFocusEffectEnabled.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.isFocusEffectEnabled.modify;
}

uint64_t EnvironmentValues.isFocusEffectEnabled.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187ACCF9C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  BOOL v3;

  result = EnvironmentValues.focusEffect.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_187ACCFDC()
{
  return EnvironmentValues.focusEffect.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1E1AC39D0, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE53E0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE53F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_187ACD078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isFocusEffectEnabled.getter, a3);
}

uint64_t sub_187ACD084()
{
  return EnvironmentValues.isFocusEffectEnabled.setter();
}

uint64_t sub_187ACD0A8()
{
  return swift_deallocObject();
}

uint64_t FocusableViewResponder.__allocating_init(inputs:)()
{
  swift_allocObject();
  return FocusableViewResponder.init(inputs:)();
}

uint64_t implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  uint64_t v0;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  lazy protocol witness table accessor for type FocusDelegationPreferenceProvider and conformance FocusDelegationPreferenceProvider();
  swift_retain();
  v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  _ViewInputs.transform.getter();
  _ViewInputs.animatedPosition()();
  _ViewInputs.animatedSize()();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type FocusableBoundsTransform and conformance FocusableBoundsTransform();
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _FocusableModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IOSFocusEnabledFlag()
{
  lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag();
  return PropertyList.subscript.setter();
}

SwiftUI::FocusableOptions __swiftcall FocusableOptions.init(rawValue:)(SwiftUI::FocusableOptions rawValue)
{
  SwiftUI::FocusableOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FocusableOptions.fromMouse.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FocusableOptions.fromKeyboard.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FocusableOptions.platformItemDrawsFocusRingMask.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static FocusableOptions.platformContainerHandlesFocus.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static FocusableOptions.preventNavigationToSubviews.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static FocusableOptions.all.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static FocusableOptions.all;
  return result;
}

uint64_t FocusableOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t EnvironmentValues.focusDisabled.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey>, (uint64_t)&unk_1E1AC3538, (uint64_t)&protocol witness table for EnvironmentValues.FocusDisabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey> and conformance EnvironmentPropertyKey<A>);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance UpdateViewGeometry@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double protocol witness for Rule.value.getter in conformance IsFocusedEnvironmentChild@<D0>(_OWORD *a1@<X8>)
{
  return IsFocusedEnvironmentChild.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedOptions()
{
  return ResolvedOptions.value.getter();
}

void FocusableViewResponder.focusItem.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _UNKNOWN **v17;
  int v18;

  v3 = *(_QWORD *)(v1 + 240);
  if (!v3)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 56) = 0;
    return;
  }
  if (*(_BYTE *)(v1 + 401) == 1)
  {
    if (FocusableViewResponder.hostedItem.getter())
    {
      v17 = 0;
      swift_weakInit();
      v18 = 0;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v9, (uint64_t)&v10);
      swift_retain();
      swift_unknownObjectRelease();
      v15 = 1;
      v17 = &protocol witness table for FocusableViewResponder;
      swift_weakAssign();
      swift_release();
      v16 = 0;
      outlined init with take of FocusItem((uint64_t)&v10, a1);
      return;
    }
    v3 = *(_QWORD *)(v1 + 240);
    if (!v3)
    {
      __break(1u);
      return;
    }
    v6 = *(_QWORD *)(v1 + 248);
    v8 = *(_QWORD *)(v1 + 224);
    v7 = *(_QWORD *)(v1 + 232);
    v17 = 0;
    swift_weakInit();
    v18 = 0;
    v10 = v8;
    v11 = BYTE4(v8) & 1;
    v12 = v7;
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 224);
    v5 = *(_QWORD *)(v1 + 232);
    v6 = *(_QWORD *)(v1 + 248);
    v17 = 0;
    swift_weakInit();
    v18 = 0;
    v10 = v4;
    v11 = BYTE4(v4) & 1;
    v12 = v5;
  }
  v13 = v3;
  v14 = v6;
  v15 = 0;
  v17 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  v16 = 0;
  outlined init with take of FocusItem((uint64_t)&v10, a1);
  swift_retain();
}

uint64_t FocusableViewResponder.bindEvent(_:)(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  type metadata accessor for DefaultLayoutViewResponder();
  v2 = (uint64_t (*)(uint64_t))method lookup function for ResponderNode();
  v3 = v2(a1);
  outlined init with copy of TableColumnList(a1, (uint64_t)v8);
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    v4 = EventType.isFocusEvent.getter();
    v5 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if ((v4 & 1) != 0)
    {
      MEMORY[0x1E0C80A78](v5, v6);
      MultiViewResponder.visit(applying:)();
    }
    return 0;
  }
  return v3;
}

uint64_t closure #1 in FocusableViewResponder.focusProxyResponder.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, char *a3@<X8>)
{
  uint64_t result;
  char v7;

  type metadata accessor for FocusEventProxyResponder();
  result = swift_dynamicCastClass();
  if (result)
  {
    *a2 = a1;
    swift_retain();
    result = swift_release();
    v7 = 2;
  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
  return result;
}

uint64_t FocusableViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  swift_allocObject();
  return FocusableViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusableViewResponder.init(inputs:viewSubgraph:)()
{
  uint64_t v0;

  swift_unknownObjectWeakInit();
  *(_QWORD *)(v0 + 216) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_WORD *)(v0 + 288) = 257;
  swift_retain();
  ContentResponderHelper.init()();
  *(_QWORD *)(v0 + 392) = 0;
  *(_WORD *)(v0 + 400) = 1;
  *(_QWORD *)(v0 + 408) = 0;
  *(_WORD *)(v0 + 416) = 256;
  *(_QWORD *)(v0 + 424) = 0;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

void FocusableViewResponder.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  outlined consume of FocusItem.ViewItem?(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t FocusableViewResponder.__deallocating_deinit()
{
  uint64_t v0;

  v0 = DefaultLayoutViewResponder.deinit();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  outlined consume of FocusItem.ViewItem?(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for FocusResponder.keyPressHandlers.getter in conformance FocusableViewResponder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusableViewResponder()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 289);
}

uint64_t UIKitFocusableViewResponderItem.next.getter()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD v11[7];

  if ((MEMORY[0x18D75A3D8]() & 1) == 0)
    return MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v3 = Strong;
  v11[4] = 0;
  MEMORY[0x1E0C80A78](Strong, v2);
  MultiViewResponder.visit(applying:)();
  swift_retain_n();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      v5 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v5)
        break;
      type metadata accessor for UIViewResponder();
      v6 = swift_dynamicCastClass();
      if (v6)
      {
        v5 = MEMORY[0x18D760234](v6 + 48);
        if (v5)
          break;
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong())
        goto LABEL_13;
    }
    v4 = v5;
    swift_release_n();
    swift_release();
  }
  else
  {
LABEL_13:
    swift_beginAccess();
    v4 = MEMORY[0x18D760234](v3 + 16);
    if (v4)
    {
      v7 = *(_QWORD *)(v3 + 24);
      ObjectType = swift_getObjectType();
      v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v9, v9, ObjectType, v7);
      swift_unknownObjectRelease();
      v4 = v11[0];
    }
    swift_release_n();
  }
  swift_release();
  return v4;
}

uint64_t UIKitFocusableViewResponderItem.defaultFocusGroupIdentifier.getter()
{
  uint64_t v0;
  _WORD *v1;
  uint64_t result;

  v1 = (_WORD *)(v0
               + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier);
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem____lazy_storage___defaultFocusGroupIdentifier
                 + 9) & 1) == 0)
    return *(_QWORD *)v1;
  result = AGMakeUniqueID();
  *(_QWORD *)v1 = result;
  v1[4] = 0;
  return result;
}

unint64_t UIKitFocusableViewResponderItem.swiftui_focusGroupIdentifier.getter()
{
  uint64_t Strong;
  char v1;
  char v2;
  char v3;
  Swift::String v4;

  Strong = swift_weakLoadStrong();
  if (Strong && (v1 = *(_BYTE *)(Strong + 416), v2 = *(_BYTE *)(Strong + 417), swift_release(), (v2 & 1) == 0))
  {
    if ((v1 & 1) == 0)
    {
LABEL_6:
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      return 0xD00000000000001DLL;
    }
  }
  else
  {
    UIKitFocusableViewResponderItem.defaultFocusGroupIdentifier.getter();
    if ((v3 & 1) == 0)
      goto LABEL_6;
  }
  return 0;
}

uint64_t UIKitFocusableViewResponderItem.shouldUpdateFocus(in:)(void *a1)
{
  id v1;
  id v3;
  id v4;
  _QWORD *Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(a1, sel_nextFocusedItem);
  if (!v3)
    return 1;
  v4 = v3;
  swift_unknownObjectRelease();
  if (v4 != v1)
    return 1;
  if (!objc_msgSend(a1, sel_previouslyFocusedItem))
    return 1;
  swift_unknownObjectRelease();
  Strong = (_QWORD *)swift_weakLoadStrong();
  if (!Strong)
    return 1;
  v8 = Strong[28];
  v7 = Strong[29];
  v9 = Strong[30];
  outlined copy of FocusItem.ViewItem?(v8, v7, v9);
  swift_release();
  if (!v9)
    return 1;
  outlined consume of FocusItem.ViewItem?(v8, v7, v9);
  return BYTE4(v8) & ((v7 & 2) != 0);
}

uint64_t UIKitFocusableViewResponderItem.updateFocusedState()()
{
  uint64_t result;
  char v1;
  id v2;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(_BYTE *)(result + 400);
    result = swift_release();
    if ((v1 & 1) == 0)
    {
      result = AGWeakAttributeGetAttribute();
      if ((_DWORD)result != *MEMORY[0x1E0CFED28])
      {
        v2 = (id)AGGraphGetAttributeGraph();
        AGGraphRef.viewGraph()();

        type metadata accessor for UIKitFocusableViewResponderItem();
        UIFocusItem.isFocused.getter();
        lazy protocol witness table accessor for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation();
        default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
        GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t UIKitFocusableViewResponderItem.FocusedStateCommitMutation.combine<A>(with:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;
  int v7;
  int v8;
  _BYTE v9[8];
  int v10;
  int v11;

  v2 = MEMORY[0x1E0C80A78](a1, a1);
  (*(void (**)(_BYTE *, double))(v4 + 16))(&v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v6 = v9[4];
    v7 = v10;
    v8 = v11;
    if ((static WeakAttribute.== infix(_:_:)() & 1) != 0)
    {
      *(_BYTE *)v1 = v6;
      result = 1;
      *(_DWORD *)(v1 + 4) = v7;
      *(_DWORD *)(v1 + 8) = v8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  uint64_t result;

  result = AGWeakAttributeGetAttribute();
  if ((_DWORD)result != *MEMORY[0x1E0CFED28])
    return AGGraphSetValue();
  return result;
}

uint64_t UIKitFocusableViewResponderItem.focusEffect.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  char v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath;
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath);
  v4 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 8);
  v6 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 16);
  v5 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 24);
  v7 = v3;
  v27 = v6;
  v28 = v4;
  v26 = v5;
  v8 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                          + 32);
  v25 = *(_BYTE *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 32);
  if (v8 == 255)
  {
    v33 = 0u;
    v34 = 0u;
    v35 = 6;
    v9 = MEMORY[0x18D760234](v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
    v23 = v3;
    if (v9)
    {
      v10 = (void *)v9;
      type metadata accessor for HostingScrollView.PlatformGroupContainer();
      if (swift_dynamicCastClass())
      {
        if (!swift_weakLoadStrong())
        {

          goto LABEL_10;
        }
        v32 = 16;
        static CoordinateSpace.scrollViewContent.getter();
        MultiViewResponder.addContentPath(to:kind:in:observer:)();

        goto LABEL_9;
      }

    }
    if (!swift_weakLoadStrong())
    {
LABEL_10:
      v4 = *((_QWORD *)&v33 + 1);
      v7 = v33;
      v5 = *((_QWORD *)&v34 + 1);
      v6 = v34;
      LOBYTE(v8) = v35;
      v24 = v0;
      v11 = *(_QWORD *)v2;
      v12 = *(_QWORD *)(v2 + 8);
      v13 = *(_QWORD *)(v2 + 16);
      v22 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)v2 = v33;
      *(_QWORD *)(v2 + 8) = v4;
      *(_OWORD *)(v2 + 16) = __PAIR128__(v5, v6);
      v14 = *(_BYTE *)(v2 + 32);
      *(_BYTE *)(v2 + 32) = v8;
      outlined copy of Path.Storage(v7, v4, v6, v5, v8);
      v15 = v12;
      v1 = v24;
      outlined consume of Path?(v11, v15, v13, v22, v14);
      v3 = v23;
      goto LABEL_11;
    }
    v32 = 16;
    hostingViewCoordinateSpace.getter();
    v31 = 1;
    MultiViewResponder.addContentPath(to:kind:in:observer:)();
LABEL_9:
    swift_release();
    outlined destroy of CoordinateSpace((uint64_t)v29);
    goto LABEL_10;
  }
LABEL_11:
  v29[0] = v7;
  v29[1] = v4;
  v29[2] = v6;
  v29[3] = v5;
  v30 = v8;
  result = swift_weakLoadStrong();
  if (!result)
  {
    outlined copy of Path?(v3, v28, v27, v26, v25);
    goto LABEL_16;
  }
  if (*(_QWORD *)(result + 240))
  {
    v17 = *(_QWORD *)(result + 232);
    outlined copy of Path?(v3, v28, v27, v26, v25);
    swift_release();
    if ((v17 & 4) != 0)
    {
      outlined consume of Path.Storage(v7, v4, v6, v5, v8);
      return 0;
    }
LABEL_16:
    if ((Path.isEmpty.getter() & 1) != 0)
    {
      v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37D8]), sel_init);
    }
    else
    {
      v19 = (void *)Path.cgPath.getter();
      v20 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v19);

      v18 = objc_msgSend((id)objc_opt_self(), sel_effectWithPath_, v20);
    }
    v21 = (void *)MEMORY[0x18D760234](v1+ OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_host);
    objc_msgSend(v18, sel_setContainerView_, v21);
    outlined consume of Path.Storage(v7, v4, v6, v5, v8);

    return (uint64_t)v18;
  }
  __break(1u);
  return result;
}

id UIKitFocusableViewResponderItem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitFocusableViewResponderItem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for TrivialContentPathObserver.contentPathDidChange(for:) in conformance UIKitFocusableViewResponderItem()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath);
  v3 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 8);
  v4 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 16);
  v5 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_contentPath
                 + 24);
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v6 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v1 + 32) = -1;
  return outlined consume of Path?(v2, v3, v4, v5, v6);
}

void protocol witness for AnyUIKitHostedFocusItem.host.getter in conformance UIKitFocusableViewResponderItem()
{
  JUMPOUT(0x18D760234);
}

void protocol witness for AnyUIKitHostedFocusItem.host.setter in conformance UIKitFocusableViewResponderItem(void *a1)
{
  swift_unknownObjectWeakAssign();

}

void protocol witness for AnyUIKitHostedFocusItem.frame.setter in conformance UIKitFocusableViewResponderItem(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v5;

  v5 = (double *)(v4
                + OBJC_IVAR____TtC7SwiftUIP33_B6A2D4E72E5722B5103497ADB7778B5F31UIKitFocusableViewResponderItem_frame);
  *v5 = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
}

uint64_t protocol witness for AnyUIKitHostedFocusItem.responder.getter in conformance UIKitFocusableViewResponderItem()
{
  return swift_weakLoadStrong();
}

uint64_t protocol witness for ContentPathObserver.respondersDidChange(for:) in conformance UIKitFocusableViewResponderItem()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitFocusableViewResponderItem);
  return TrivialContentPathObserver.respondersDidChange(for:)();
}

uint64_t protocol witness for ContentPathObserver.contentPathDidChange(for:changes:transform:finished:) in conformance UIKitFocusableViewResponderItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitFocusableViewResponderItem, a6);
  return TrivialContentPathObserver.contentPathDidChange(for:changes:transform:finished:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusDelegationPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1)
    swift_once();
  return outlined init with copy of FocusItem?((uint64_t)&static FocusDelegationPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusDelegationPreferenceKey(uint64_t a1, void (*a2)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  BOOL v5;
  _QWORD v7[8];
  _QWORD v8[8];

  v4 = outlined init with take of FocusItem?(a1, (uint64_t)v7);
  if (v7[5])
    v5 = 0;
  else
    v5 = v7[6] == 1;
  if (v5)
  {
    a2(v8, v4);
    outlined destroy of TableRowID?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for _EnvironmentKeyWritingModifier<Bool>);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v8);
  }
  return outlined init with take of FocusItem?((uint64_t)v8, a1);
}

int64x2_t protocol witness for static Rule.initialValue.getter in conformance FocusDelegationPreferenceProvider@<Q0>(uint64_t a1@<X8>)
{
  int64x2_t result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance FocusDelegationPreferenceProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _UNKNOWN **v16;
  int v17;

  Value = AGGraphGetValue();
  v3 = *(_DWORD *)Value;
  v4 = *(_BYTE *)(Value + 4);
  v5 = *(_QWORD *)(Value + 8);
  v6 = *(_QWORD *)(Value + 16);
  v7 = *(_QWORD *)(Value + 24);
  swift_weakInit();
  v17 = 0;
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = 0;
  v16 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  v15 = 0;
  outlined init with take of FocusItem((uint64_t)&v9, a1);
  return swift_retain();
}

_QWORD *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FocusableOptionsKey(_QWORD *a1, _QWORD *(*a2)(uint64_t *__return_ptr))
{
  _QWORD *result;
  uint64_t v4;

  result = a2(&v4);
  *a1 |= v4;
  return result;
}

void View.focusable(_:onFocusChange:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t View.focusable(_:options:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return View.focusable(_:interactions:)(a1, a2, a3, a4, (uint64_t)&type metadata for FocusableOptions, (uint64_t)&protocol witness table for FocusableOptions);
}

uint64_t View.focusable(_:interactions:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;

  v6 = *a2;
  v10 = a5;
  v11 = a6;
  v9 = v6;
  v8[0] = a1;
  v12 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v13 = 0;
  MEMORY[0x18D75B4AC](v8, a3, &type metadata for _FocusableModifier);
  return outlined destroy of _FocusableModifier((uint64_t)v8);
}

uint64_t sub_187ACECB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.focusDisabled.getter, a3);
}

uint64_t sub_187ACECC0(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey>, (uint64_t)&unk_1E1AC3538, (uint64_t)&protocol witness table for EnvironmentValues.FocusDisabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IOSFocusEnabledFlag, &type metadata for IOSFocusEnabledFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IOSFocusEnabledFlag, &type metadata for IOSFocusEnabledFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IOSFocusEnabledFlag, &type metadata for IOSFocusEnabledFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IOSFocusEnabledFlag, &type metadata for IOSFocusEnabledFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag;
  if (!lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for IOSFocusEnabledFlag, &type metadata for IOSFocusEnabledFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnyPreferenceKey<FocusableOptionsKey> and conformance _AnyPreferenceKey<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _AnyPreferenceKey<FocusableOptionsKey> and conformance _AnyPreferenceKey<A>;
  if (!lazy protocol witness table cache variable for type _AnyPreferenceKey<FocusableOptionsKey> and conformance _AnyPreferenceKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _AnyPreferenceKey<FocusableOptionsKey>, (uint64_t)&type metadata for FocusableOptionsKey, (uint64_t)&protocol witness table for FocusableOptionsKey, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE4070]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE4078], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnyPreferenceKey<FocusableOptionsKey> and conformance _AnyPreferenceKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusInteractions and conformance FocusInteractions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusInteractions, &type metadata for FocusInteractions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusInteractions, &type metadata for FocusInteractions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusInteractions, &type metadata for FocusInteractions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions;
  if (!lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusInteractions, &type metadata for FocusInteractions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusInteractions and conformance FocusInteractions);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FocusableModifier()
{
  return &protocol witness table for _FocusableModifier;
}

unint64_t lazy protocol witness table accessor for type FocusableOptions and conformance FocusableOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableOptions, &type metadata for FocusableOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableOptions, &type metadata for FocusableOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableOptions, &type metadata for FocusableOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions;
  if (!lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusableOptions, &type metadata for FocusableOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableOptions and conformance FocusableOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusInteractions()
{
  return &type metadata for FocusInteractions;
}

ValueMetadata *type metadata accessor for FocusEffect()
{
  return &type metadata for FocusEffect;
}

uint64_t assignWithTake for _FocusableModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _FocusableModifier()
{
  return &type metadata for _FocusableModifier;
}

uint64_t type metadata completion function for FocusableViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for FocusableViewResponder()
{
  return type metadata accessor for FocusableViewResponder();
}

uint64_t type metadata accessor for UIKitFocusableViewResponderItem()
{
  return objc_opt_self();
}

uint64_t sub_187ACF158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = &protocol witness table for _FocusableModifier;
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

uint64_t sub_187ACF1AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FocusEffect>, (uint64_t)&type metadata for FocusEffect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>();
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v4);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FocusEffect>, (uint64_t)&type metadata for FocusEffect, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE65A8]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE65C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FocusEffect> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187ACF280(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = MEMORY[0x1E0CE66C0];
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE66C0]);
  v3 = type metadata accessor for ModifiedContent();
  v5[0] = v1;
  v5[1] = lazy protocol witness table accessor for type External<Bool> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, (uint64_t (*)(_QWORD, uint64_t))v2, MEMORY[0x1E0CE66D8]);
  return MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v3, v5);
}

uint64_t storeEnumTagSinglePayload for FocusEffect(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_187ACF368 + 4 * byte_187C8A315[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_187ACF39C + 4 * byte_187C8A310[v4]))();
}

uint64_t sub_187ACF39C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187ACF3A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187ACF3ACLL);
  return result;
}

uint64_t sub_187ACF3B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187ACF3C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_187ACF3C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187ACF3CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FocusEffect.Kind()
{
  return &type metadata for FocusEffect.Kind;
}

ValueMetadata *type metadata accessor for FocusableOptionsKey()
{
  return &type metadata for FocusableOptionsKey;
}

ValueMetadata *type metadata accessor for IsFocusedEnvironmentChild()
{
  return &type metadata for IsFocusedEnvironmentChild;
}

ValueMetadata *type metadata accessor for IOSFocusEnabledFlag()
{
  return &type metadata for IOSFocusEnabledFlag;
}

uint64_t assignWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for UpdateViewFocusItem(a1, a2, a3, (void (*)(uint64_t, uint64_t))MEMORY[0x1E0DEEFB8]);
}

uint64_t assignWithTake for UpdateViewFocusItem(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

void *type metadata accessor for UpdateViewFocusItem()
{
  return &unk_1E1AD0FE0;
}

void *type metadata accessor for ResolvedOptions()
{
  return &unk_1E1ABC898;
}

void *type metadata accessor for EnvironmentValues.IsFocusEffectEnabledKey()
{
  return &unk_1E1AC39D0;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsFocusedKey()
{
  return &type metadata for EnvironmentValues.IsFocusedKey;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IOSFocusEnabledFlag()
{
  return &protocol witness table for IOSFocusEnabledFlag;
}

unint64_t lazy protocol witness table accessor for type FocusEffect.Kind and conformance FocusEffect.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind;
  if (!lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for FocusEffect.Kind, &type metadata for FocusEffect.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusEffect.Kind and conformance FocusEffect.Kind);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ContentPathObserver in UIKitFocusableViewResponderItem()
{
  return &protocol witness table for UIKitFocusableViewResponderItem;
}

uint64_t specialized static IOSFocusEnabledFlag.evaluate(inputs:)()
{
  char v0;
  char v2;

  lazy protocol witness table accessor for type IOSFocusEnabledFlag and conformance IOSFocusEnabledFlag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v2 == 1)
  {
    _GraphInputs.interfaceIdiom.getter();
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0)
    {
      v0 = 1;
    }
    else
    {
      _GraphInputs.interfaceIdiom.getter();
      v0 = AnyInterfaceIdiom.accepts<A>(_:)();
    }
  }
  else
  {
    v0 = 0;
  }
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation;
  if (!lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for UIKitFocusableViewResponderItem.FocusedStateCommitMutation, &unk_1E1B00018);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitFocusableViewResponderItem.FocusedStateCommitMutation and conformance UIKitFocusableViewResponderItem.FocusedStateCommitMutation);
  }
  return result;
}

uint64_t specialized UpdateFocusableViewResponder.init(inputs:outputs:item:geometry:responder:)@<X0>(int a1@<W2>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;

  v15 = _ViewOutputs.viewResponders()();
  swift_getKeyPath();
  v13 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v12 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v10 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v4 = _ViewOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  v5 = *MEMORY[0x1E0CFED28];
  if ((v4 & 0x100000000) == 0)
    v5 = v4;
  v11 = v5;
  swift_getKeyPath();
  swift_retain();
  v6 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  result = swift_release();
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = a2;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v13;
  *(_DWORD *)(a4 + 16) = v12;
  *(_DWORD *)(a4 + 20) = v10;
  *(_DWORD *)(a4 + 24) = v8;
  *(_DWORD *)(a4 + 28) = v11;
  *(_DWORD *)(a4 + 32) = v6;
  *(_QWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t specialized UIKitFocusableViewResponderItem.didUpdateFocus(in:with:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(void);
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2258], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - v6;
  static Log.focus.getter();
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TableRowID?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Logger?, (uint64_t)MEMORY[0x1E0DF2258], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>);
  }
  else
  {
    v10 = v2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v28 = a1;
      v13 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v30 = v27;
      *(_DWORD *)v13 = 136315138;
      v25 = v13 + 4;
      v26 = v13;
      v14 = v10;
      specialized UIKitFocusItemDescription.init(_:)(v14);
      v16 = v15;
      v18 = v17;

      v19 = v16;
      a1 = v28;
      v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v20 = v12;
      v21 = v26;
      _os_log_impl(&dword_186E48000, v11, v20, "focus changed for: %s", v26, 0xCu);
      v22 = v27;
      swift_arrayDestroy();
      MEMORY[0x18D760108](v22, -1, -1);
      MEMORY[0x18D760108](v21, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  result = swift_weakLoadStrong();
  if (!result)
    return UIKitFocusableViewResponderItem.updateFocusedState()();
  v24 = *(void (**)(void))(result + 240);
  if (v24)
  {
    swift_retain();
    swift_release();
    if (objc_msgSend(a1, sel_nextFocusedItem))
      swift_unknownObjectRelease();
    v24();
    swift_release();
    return UIKitFocusableViewResponderItem.updateFocusedState()();
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in FocusableViewResponder.focusProxyResponder.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in FocusableViewResponder.focusProxyResponder.getter(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t partial apply for implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)();
}

uint64_t partial apply for implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_187ACFEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return keypath_getTm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isPlatformFocusSystemEnabled.getter, a3);
}

uint64_t sub_187ACFEE8(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocused.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsPlatformFocusSystemEnabled, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187ACFF30@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  result = EnvironmentValues.focusGroupID.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_187ACFF74()
{
  return EnvironmentValues.focusGroupID.setter();
}

void *type metadata accessor for EnvironmentValues.FocusDisabledKey()
{
  return &unk_1E1AC3538;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsPlatformFocusSystemEnabled()
{
  return &type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled;
}

ValueMetadata *type metadata accessor for PreferredDisabledFocusEffectKey()
{
  return &type metadata for PreferredDisabledFocusEffectKey;
}

void *type metadata accessor for FocusDelegationPreferenceProvider()
{
  return &unk_1E1B02BF0;
}

uint64_t assignWithCopy for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

void *type metadata accessor for UpdateFocusableViewResponder()
{
  return &unk_1E1AF8B78;
}

uint64_t destroy for UpdateViewGeometry()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t assignWithCopy for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UpdateViewGeometry(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewGeometry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewGeometry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for UpdateViewGeometry()
{
  return &unk_1E1B179D0;
}

void *type metadata accessor for EnvironmentValues.AllControlsNavigableKey()
{
  return &unk_1E1AC3990;
}

uint64_t getEnumTagSinglePayload for UIKitFocusableViewResponderItem.FocusedStateCommitMutation(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[12])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitFocusableViewResponderItem.FocusedStateCommitMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for UIKitFocusableViewResponderItem.FocusedStateCommitMutation()
{
  return &unk_1E1B00018;
}

ValueMetadata *type metadata accessor for FocusDelegationPreferenceKey()
{
  return &type metadata for FocusDelegationPreferenceKey;
}

uint64_t EnvironmentValues.labelsVisibility.getter()
{
  uint64_t v0;
  unsigned __int8 v2;

  if (*(_QWORD *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<LabelsVisibilityKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelsVisibilityKey>);
  }
}

uint64_t EnvironmentValues.labelsVisibility.setter()
{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.labels(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v15[2];
  char v16;

  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
  v5 = type metadata accessor for ModifiedContent();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15[-1] - v8;
  swift_getKeyPath();
  v16 = a1;
  View.environment<A>(_:_:)();
  swift_release();
  v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E0CE65C0]);
  v15[0] = a3;
  v15[1] = v10;
  v11 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v15);
  v12 = lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
  View.input<A>(_:)((uint64_t)&type metadata for LabelVisibilityConfigured, v5, (uint64_t)&type metadata for LabelVisibilityConfigured, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t (*EnvironmentValues.labelsVisibility.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;

  v2 = a1 + 1;
  *a1 = v1;
  v3 = (char *)a1 + 9;
  if (*(_QWORD *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *v2 = *v3;
  return EnvironmentValues.labelsVisibility.modify;
}

uint64_t EnvironmentValues.labelsVisibility.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *((_BYTE *)a1 + 9) = *((_BYTE *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>, MEMORY[0x1E0CE53F0]);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(_QWORD *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_187AD09D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<LabelVisibilityConfigured>(255);
  v3 = type metadata accessor for ModifiedContent();
  v7[0] = v1;
  v7[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>, MEMORY[0x1E0CE65C0]);
  v4 = MEMORY[0x1E0CE2E70];
  v6[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v7);
  v6[1] = &protocol witness table for ViewInputFlagModifier<A>;
  return MEMORY[0x18D75FFDC](v4, v3, v6);
}

void type metadata accessor for ViewInputFlagModifier<LabelVisibilityConfigured>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for ViewInputFlagModifier<LabelVisibilityConfigured>)
  {
    v2 = lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
    v4 = type metadata accessor for ViewInputFlagModifier(a1, (uint64_t)&type metadata for LabelVisibilityConfigured, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<LabelVisibilityConfigured>);
  }
}

ValueMetadata *type metadata accessor for LabelVisibilityConfigured()
{
  return &type metadata for LabelVisibilityConfigured;
}

void *type metadata accessor for LabelsVisibilityKey()
{
  return &unk_1E1ACE528;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance LabelVisibilityConfigured()
{
  unsigned __int8 v1;

  lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance LabelVisibilityConfigured()
{
  lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in LabelVisibilityConfigured()
{
  return &protocol witness table for LabelVisibilityConfigured;
}

double _CircleLayout.radius.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void _CircleLayout.init(radius:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

uint64_t static _CircleLayout._makeView(root:inputs:body:)()
{
  lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout();
  return static Layout.makeLayoutView(root:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout;
  if (!lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CircleLayout, &type metadata for _CircleLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout;
  if (!lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for _CircleLayout, &type metadata for _CircleLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CircleLayout and conformance _CircleLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _CircleLayout()
{
  lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout();
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _CircleLayout()
{
  return static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)();
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _CircleLayout()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

double _CircleLayout.sizeThatFits(proposal:subviews:cache:)()
{
  double *v0;

  return *v0 + *v0;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance _CircleLayout()
{
  double *v0;

  return *v0 + *v0;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance _CircleLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

uint64_t specialized _CircleLayout.placeSubviews(in:proposal:subviews:cache:)(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double *v5;
  int v10;
  CGFloat v11;
  char v12;
  char v13;
  double v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t i;
  __int128 v19;
  char v20;
  CGAffineTransform v21;
  CGAffineTransform v22;
  CGPoint v23;
  CGRect v24;

  v10 = *(_DWORD *)a1;
  v11 = a1[1];
  v12 = *((_BYTE *)a1 + 16);
  v13 = *((_BYTE *)a1 + 17);
  v14 = *v5;
  CGRectGetMidX(*(CGRect *)&a2);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  CGRectGetMidY(v24);
  LODWORD(v22.a) = v10;
  v22.b = v11;
  LOBYTE(v22.c) = v12;
  BYTE1(v22.c) = v13;
  swift_bridgeObjectRetain();
  v15 = LayoutSubviews.endIndex.getter();
  result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  v17 = LayoutSubviews.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v15 < 0 || v17 < v15)
    goto LABEL_9;
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      CGAffineTransform.init(rotation:)();
      v21 = v22;
      v23.x = 0.0;
      v23.y = -v14;
      CGPointApplyAffineTransform(v23, &v21);
      LODWORD(v21.a) = v10;
      v21.b = v11;
      LOBYTE(v21.c) = v12;
      BYTE1(v21.c) = v13;
      LayoutSubviews.subscript.getter();
      *(_OWORD *)&v21.a = v19;
      LOBYTE(v21.c) = v20;
      static UnitPoint.center.getter();
      result = LayoutSubview.place(at:anchor:proposal:)();
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _CircleLayout(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type _CircleLayout and conformance _CircleLayout();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for _CircleLayout()
{
  return &type metadata for _CircleLayout;
}

uint64_t getEnumTagSinglePayload for InitialSceneSizeState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InitialSceneSizeState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 26) = v3;
  return result;
}

uint64_t getEnumTag for InitialSceneSizeState(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for InitialSceneSizeState(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    *(_BYTE *)(result + 25) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitialSceneSizeState()
{
  return &type metadata for InitialSceneSizeState;
}

Swift::Void __swiftcall SceneBridge.updateWindowSizeRestrictions(min:max:)(CGSize_optional min, CGSize_optional max)
{
  char v2;
  double v3;
  double v4;
  char v5;
  uint64_t v6;
  char v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  double v14;
  id v15;
  void *v16;
  void *v17;
  id v18;

  v7 = v5;
  v8 = v4;
  v9 = v3;
  if ((v2 & 1) == 0)
  {
    v10 = *(double *)&max.is_nil;
    v11 = *(double *)&min.is_nil;
    v12 = (void *)MEMORY[0x18D760234](v6 + 32, (__n128)min.value, *(__n128 *)&min.value.height, (__n128)max.value, *(__n128 *)&max.value.height);
    if (v12)
    {
      v13 = v12;
      v14 = v11;
      v15 = objc_msgSend(v12, sel_sizeRestrictions);

      objc_msgSend(v15, sel_setMinimumSize_, v14, v10);
    }
  }
  if ((v7 & 1) == 0)
  {
    v16 = (void *)MEMORY[0x18D760234](v6 + 32, *(_QWORD *)&max.is_nil, (__n128)min.value, *(__n128 *)&min.value.height, (__n128)max.value, *(__n128 *)&max.value.height);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, sel_sizeRestrictions);

      objc_msgSend(v18, sel_setMaximumSize_, v9, v8);
    }
  }
}

uint64_t closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  void *v11;
  id v12;
  double v13;
  double v14;

  v2 = *a2;
  v3 = a2[1];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_BYTE *)(result + 161) != 1
      || ((v5 = *(_QWORD *)(result + 136), !*(_BYTE *)(result + 160))
        ? (v6 = (*(_QWORD *)(result + 144) | *(_QWORD *)(result + 152) | v5) == 0)
        : (v6 = 0),
          !v6 ? (v7 = *(_BYTE *)(result + 160) == 0) : (v7 = 0),
          v7 ? (v8 = v5 == 1) : (v8 = 0),
          v8 ? (v9 = *(_OWORD *)(result + 144) == 0) : (v9 = 0),
          !v9))
    {
      v10 = (void *)MEMORY[0x18D760234](result + 32);
      if (v10)
      {
        v11 = v10;
        v12 = objc_msgSend(v10, sel_sizeRestrictions);

        if (v12)
        {
          objc_msgSend(v12, sel_minimumSize);
          if (v14 != v2 || v13 != v3)
            objc_msgSend(v12, sel_setMinimumSize_, v2, v3);
          objc_msgSend(v12, sel_maximumSize);

        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  void *v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;

  v2 = *a2;
  v3 = a2[1];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_BYTE *)(result + 161) != 1
      || ((v5 = *(_QWORD *)(result + 136), !*(_BYTE *)(result + 160))
        ? (v6 = (*(_QWORD *)(result + 144) | *(_QWORD *)(result + 152) | v5) == 0)
        : (v6 = 0),
          !v6 ? (v7 = *(_BYTE *)(result + 160) == 0) : (v7 = 0),
          v7 ? (v8 = v5 == 1) : (v8 = 0),
          v8 ? (v9 = *(_OWORD *)(result + 144) == 0) : (v9 = 0),
          !v9))
    {
      v10 = (void *)MEMORY[0x18D760234](result + 32);
      if (v10)
      {
        v11 = v10;
        v12 = objc_msgSend(v10, sel_sizeRestrictions);

        if (v12)
        {
          objc_msgSend(v12, sel_minimumSize);
          if (v14 != 0.0 || v13 != 0.0)
            objc_msgSend(v12, sel_setMinimumSize_, 0.0, 0.0);
          objc_msgSend(v12, sel_maximumSize);
          v17 = v16 == INFINITY && v15 == INFINITY;
          if (!v17 && v2 < 2777777.0 && v3 < 2777777.0)
            objc_msgSend(v12, sel_setMaximumSize_, v2, v3);

        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t specialized static InitialSceneSizeState.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((unsigned __int8 *)a1 + 24);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = *((unsigned __int8 *)a2 + 24);
  if (*((_BYTE *)a1 + 25) == 1)
  {
    v10 = v4 | v3;
    if (v10 | v2)
      v11 = 0;
    else
      v11 = v5 == 0;
    if (v11)
    {
      if (v8 | v7 | v6)
        v15 = 0;
      else
        v15 = v9 == 0;
      v16 = v15;
      if (*((_BYTE *)a2 + 25))
        v14 = v16;
      else
        v14 = 0;
    }
    else if (!*((_BYTE *)a1 + 24) && (v2 == 1 ? (v12 = v10 == 0) : (v12 = 0), v12))
    {
      v14 = *((_BYTE *)a2 + 25) && ((v13 = v8 | v7, v13 | v6) || *((_BYTE *)a2 + 24)) && v6 == 1 && v13 == 0 && v9 == 0;
    }
    else
    {
      v17 = v8 | v7;
      v18 = v17 | v6;
      v21 = v6 != 1 || v17 != 0 || v9 != 0;
      if (v18)
        v22 = 0;
      else
        v22 = v9 == 0;
      v23 = !v22 && v21;
      v14 = (*((_BYTE *)a2 + 25) & 1) != 0 && v23;
    }
  }
  else if ((*((_BYTE *)a2 + 25) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v31 = *a1;
    v32 = v3 & 1;
    v33 = v4;
    v34 = v5 & 1;
    v27 = v6;
    v28 = v7 & 1;
    v29 = v8;
    v30 = v9 & 1;
    v14 = MEMORY[0x18D757594](&v31, &v27);
  }
  return v14 & 1;
}

id specialized static SceneBridge.applySizes(min:max:toRestrictions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, id a7)
{
  double v12;
  double v13;
  double v14;
  double v16;
  double v17;
  id result;
  double v19;
  double v20;
  BOOL v21;

  if ((a3 & 1) != 0)
    *(double *)&a2 = 0.0;
  if ((a3 & 1) != 0)
    v12 = 0.0;
  else
    v12 = *(double *)&a1;
  objc_msgSend(a7, sel_minimumSize, *(double *)&a1);
  if (v14 != v12 || v13 != *(double *)&a2)
    objc_msgSend(a7, sel_setMinimumSize_, v12, *(double *)&a2);
  if ((a6 & 1) != 0)
    v16 = 2777777.0;
  else
    v16 = *(double *)&a5;
  if ((a6 & 1) != 0)
    v17 = 2777777.0;
  else
    v17 = *(double *)&a4;
  result = objc_msgSend(a7, sel_maximumSize, *(double *)&a4);
  v21 = v20 == INFINITY && v19 == INFINITY;
  if (!v21 && v17 < 2777777.0 && v16 < 2777777.0)
    return objc_msgSend(a7, sel_setMaximumSize_, v17, v16);
  return result;
}

uint64_t TimelineView.Context.init(date:cadence:invalidationAction:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *a2;
  v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  v15 = type metadata accessor for TimelineView.Context(0, a4, a5, a6);
  *(_BYTE *)(a7 + *(int *)(v15 + 44)) = v13;
  return outlined init with take of TimelineInvalidationAction(a3, a7 + *(int *)(v15 + 48));
}

BOOL static TimelineView.Context.Cadence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TimelineView.Context.Cadence.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static TimelineView.Context.Cadence.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int TimelineView.Context.Cadence.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimelineView<A, B>.Context.Cadence()
{
  Hasher.init(_seed:)();
  TimelineView.Context.Cadence.hash(into:)();
  return Hasher._finalize()();
}

uint64_t TimelineView.Context.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TimelineView.Context.cadence.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 44));
  return result;
}

uint64_t closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[2];

  v21[1] = a3;
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimelineView.Context(0, a4, a5, a6);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v21 - v18;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  TimelineView.Context.init(_:)((uint64_t)v14, a4, a5, a6, (uint64_t)v19);
  a2(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t sub_187AD1DF0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)(uint64_t a1)
{
  return partial apply for closure #1 in TimelineView<>.init(_:content:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TimelineView<>.init(_:content:));
}

{
  return partial apply for closure #1 in TimelineView<>.init(_:content:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in TimelineView<>.init(_:content:));
}

uint64_t type metadata accessor for TimelineView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineView);
}

void static TimelineView<>._makeView(view:inputs:)(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[41];

  v12[13] = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v12[9] = (char *)v12 - v11;
  v12[32] = a1;
  v12[33] = a2;
  v12[34] = a3;
  v12[35] = a4;
  v12[15] = a4;
  type metadata accessor for TimelineView<>.UpdateFilter();
}

void sub_187AD1F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;

  *(_QWORD *)(v14 - 336) = a1;
  *(_QWORD *)(v14 - 272) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v14 - 352) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)(v14 - 280) = (char *)&a9 - v18;
  v19 = *v9;
  *(_QWORD *)(v14 - 296) = *(_QWORD *)v10;
  v20 = *(_DWORD *)(v10 + 8);
  v21 = *(_QWORD *)(v10 + 16);
  *(_DWORD *)(v14 - 204) = *(_DWORD *)(v10 + 24);
  *(_DWORD *)(v14 - 284) = *(_DWORD *)(v10 + 28);
  v22 = *(_DWORD *)(v10 + 32);
  v23 = *(_DWORD *)(v10 + 36);
  v24 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v14 - 224) = *(_QWORD *)(v10 + 48);
  *(_DWORD *)(v14 - 200) = *(_DWORD *)(v10 + 56);
  *(_DWORD *)(v14 - 244) = *(_DWORD *)(v10 + 60);
  *(_DWORD *)(v14 - 240) = v22;
  v25 = *(_DWORD *)(v10 + 64);
  *(_DWORD *)(v14 - 232) = *(_DWORD *)(v10 + 68);
  *(_DWORD *)(v14 - 228) = v25;
  *(_DWORD *)(v14 - 236) = *(_DWORD *)(v10 + 72);
  *(_DWORD *)(v14 - 248) = *(_DWORD *)(v10 + 76);
  *(_DWORD *)(v14 - 212) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v14 - 208) = v23;
  *(_QWORD *)(v14 - 408) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimelineIdentifier()), sel_init);
  *(_DWORD *)(v14 - 176) = v19;
  *(_QWORD *)(v14 - 320) = v11;
  type metadata accessor for TimelineView(255, v12, v13, v11);
  type metadata accessor for _GraphValue();
  *(_DWORD *)(v14 - 372) = _GraphValue.value.getter();
  *(_DWORD *)(v14 - 340) = v19;
  *(_DWORD *)(v14 - 176) = v19;
  _GraphValue.value.getter();
  v26 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  *(_QWORD *)(v14 - 368) = v12;
  *(_QWORD *)(v14 - 392) = v13;
  if (v26)
    closure #1 in static TimelineView<>._makeView(view:inputs:)(1, v12, v13, *(_QWORD *)(v14 - 320));
  *(_DWORD *)(v14 - 376) = AGGraphCreateOffsetAttribute2();
  v27 = *(_QWORD *)(v14 - 296);
  *(_QWORD *)(v14 - 176) = v27;
  v28 = v20;
  *(_DWORD *)(v14 - 168) = v20;
  *(_DWORD *)(v14 - 252) = v20;
  v29 = v21;
  *(_QWORD *)(v14 - 160) = v21;
  v30 = *(_DWORD *)(v14 - 284);
  *(_DWORD *)(v14 - 152) = *(_DWORD *)(v14 - 204);
  *(_DWORD *)(v14 - 148) = v30;
  v31 = v30;
  v32 = *(_DWORD *)(v14 - 240);
  *(_DWORD *)(v14 - 144) = v32;
  v33 = v32;
  *(_DWORD *)(v14 - 140) = *(_DWORD *)(v14 - 208);
  *(_QWORD *)(v14 - 264) = v24;
  v34 = *(_QWORD *)(v14 - 224);
  *(_QWORD *)(v14 - 136) = v24;
  *(_QWORD *)(v14 - 128) = v34;
  v35 = *(_DWORD *)(v14 - 244);
  *(_DWORD *)(v14 - 120) = *(_DWORD *)(v14 - 200);
  *(_DWORD *)(v14 - 116) = v35;
  v37 = *(_DWORD *)(v14 - 232);
  v36 = *(_DWORD *)(v14 - 228);
  *(_DWORD *)(v14 - 112) = v36;
  *(_DWORD *)(v14 - 108) = v37;
  v38 = *(_DWORD *)(v14 - 236);
  LODWORD(v34) = *(_DWORD *)(v14 - 248);
  *(_DWORD *)(v14 - 104) = v38;
  *(_DWORD *)(v14 - 100) = v34;
  *(_DWORD *)(v14 - 96) = *(_DWORD *)(v14 - 212);
  *(_DWORD *)(v14 - 380) = _ViewInputs.viewPhase.getter();
  *(_QWORD *)(v14 - 176) = v27;
  *(_DWORD *)(v14 - 168) = v28;
  *(_QWORD *)(v14 - 160) = v29;
  *(_DWORD *)(v14 - 152) = *(_DWORD *)(v14 - 204);
  *(_DWORD *)(v14 - 148) = v31;
  v39 = *(_DWORD *)(v14 - 208);
  *(_DWORD *)(v14 - 144) = v33;
  *(_DWORD *)(v14 - 140) = v39;
  v40 = *(_QWORD *)(v14 - 264);
  v41 = *(_QWORD *)(v14 - 224);
  *(_QWORD *)(v14 - 136) = v40;
  *(_QWORD *)(v14 - 128) = v41;
  *(_DWORD *)(v14 - 120) = *(_DWORD *)(v14 - 200);
  *(_DWORD *)(v14 - 116) = v35;
  *(_DWORD *)(v14 - 112) = v36;
  *(_DWORD *)(v14 - 108) = v37;
  v42 = *(_DWORD *)(v14 - 248);
  *(_DWORD *)(v14 - 104) = v38;
  *(_DWORD *)(v14 - 100) = v42;
  *(_DWORD *)(v14 - 96) = *(_DWORD *)(v14 - 212);
  *(_DWORD *)(v14 - 396) = _ViewInputs.time.getter();
  swift_retain();
  swift_retain();
  v43 = v40;
  swift_bridgeObjectRetain();
  v44 = v41;
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_QWORD *)(v14 - 416) = *(_QWORD *)(v14 - 176);
  *(_QWORD *)(v14 - 176) = v27;
  v45 = v27;
  *(_DWORD *)(v14 - 168) = *(_DWORD *)(v14 - 252);
  *(_QWORD *)(v14 - 160) = v29;
  *(_QWORD *)(v14 - 304) = v29;
  v46 = *(_DWORD *)(v14 - 208);
  LODWORD(v41) = *(_DWORD *)(v14 - 204);
  *(_DWORD *)(v14 - 152) = v41;
  *(_DWORD *)(v14 - 148) = v31;
  LODWORD(v27) = v31;
  v47 = *(_DWORD *)(v14 - 240);
  *(_DWORD *)(v14 - 144) = v47;
  *(_DWORD *)(v14 - 140) = v46;
  *(_QWORD *)(v14 - 136) = v43;
  *(_QWORD *)(v14 - 128) = v44;
  *(_DWORD *)(v14 - 120) = *(_DWORD *)(v14 - 200);
  *(_DWORD *)(v14 - 116) = v35;
  LODWORD(v44) = v35;
  v48 = *(_DWORD *)(v14 - 232);
  LODWORD(v43) = *(_DWORD *)(v14 - 228);
  *(_DWORD *)(v14 - 112) = v43;
  *(_DWORD *)(v14 - 108) = v48;
  *(_DWORD *)(v14 - 104) = *(_DWORD *)(v14 - 236);
  *(_DWORD *)(v14 - 100) = v42;
  *(_DWORD *)(v14 - 96) = *(_DWORD *)(v14 - 212);
  swift_getKeyPath();
  *(_QWORD *)(v14 - 408) = *(id *)(v14 - 408);
  *(_DWORD *)(v14 - 420) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v14 - 176) = v45;
  v49 = *(_DWORD *)(v14 - 252);
  *(_DWORD *)(v14 - 168) = v49;
  *(_QWORD *)(v14 - 160) = v29;
  *(_DWORD *)(v14 - 152) = v41;
  *(_DWORD *)(v14 - 148) = v27;
  LODWORD(v41) = *(_DWORD *)(v14 - 208);
  *(_DWORD *)(v14 - 144) = v47;
  *(_DWORD *)(v14 - 140) = v41;
  v50 = *(_QWORD *)(v14 - 224);
  *(_QWORD *)(v14 - 136) = *(_QWORD *)(v14 - 264);
  *(_QWORD *)(v14 - 128) = v50;
  *(_DWORD *)(v14 - 120) = *(_DWORD *)(v14 - 200);
  *(_DWORD *)(v14 - 116) = v44;
  *(_DWORD *)(v14 - 112) = v43;
  *(_DWORD *)(v14 - 108) = v48;
  v51 = *(_DWORD *)(v14 - 236);
  LODWORD(v29) = *(_DWORD *)(v14 - 248);
  *(_DWORD *)(v14 - 104) = v51;
  *(_DWORD *)(v14 - 100) = v29;
  LODWORD(v44) = *(_DWORD *)(v14 - 212);
  *(_DWORD *)(v14 - 96) = v44;
  swift_getKeyPath();
  *(_DWORD *)(v14 - 424) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_QWORD *)(v14 - 176) = v45;
  *(_DWORD *)(v14 - 168) = v49;
  *(_QWORD *)(v14 - 160) = *(_QWORD *)(v14 - 304);
  *(_DWORD *)(v14 - 152) = *(_DWORD *)(v14 - 204);
  *(_DWORD *)(v14 - 148) = v27;
  *(_DWORD *)(v14 - 144) = v47;
  *(_DWORD *)(v14 - 140) = v41;
  v52 = *(_QWORD *)(v14 - 224);
  *(_QWORD *)(v14 - 136) = *(_QWORD *)(v14 - 264);
  *(_QWORD *)(v14 - 128) = v52;
  LODWORD(v52) = *(_DWORD *)(v14 - 244);
  *(_DWORD *)(v14 - 120) = *(_DWORD *)(v14 - 200);
  *(_DWORD *)(v14 - 116) = v52;
  LODWORD(v52) = *(_DWORD *)(v14 - 232);
  *(_DWORD *)(v14 - 112) = *(_DWORD *)(v14 - 228);
  *(_DWORD *)(v14 - 108) = v52;
  *(_DWORD *)(v14 - 104) = v51;
  *(_DWORD *)(v14 - 100) = v29;
  *(_DWORD *)(v14 - 96) = v44;
  swift_getKeyPath();
  v53 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  default argument 11 of TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)(*(_QWORD *)(v14 - 360));
  *(_BYTE *)(v14 - 176) = 0;
  TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)(*(_DWORD *)(v14 - 372), *(_DWORD *)(v14 - 376), *(_DWORD *)(v14 - 380), *(_DWORD *)(v14 - 396), *(_QWORD *)(v14 - 416), *(_QWORD *)(v14 - 408), *(_DWORD *)(v14 - 420), *(_DWORD *)(v14 - 424), *(_QWORD *)(v14 - 280), v53, 0, 0);
}

double sub_187AD2464()
{
  uint64_t v0;
  void *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v5 = *(_QWORD *)(v4 - 336);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 272) + 16))(*(_QWORD *)(v4 - 352), v0, v5);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineView<A, B><>.UpdateFilter, v5);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v4 - 296);
  *(_DWORD *)(v4 - 168) = *(_DWORD *)(v4 - 252);
  *(_QWORD *)(v4 - 160) = *(_QWORD *)(v4 - 304);
  v6 = *(_DWORD *)(v4 - 200);
  v7 = *(_DWORD *)(v4 - 284);
  *(_DWORD *)(v4 - 152) = *(_DWORD *)(v4 - 204);
  *(_DWORD *)(v4 - 148) = v7;
  v8 = *(_DWORD *)(v4 - 208);
  *(_DWORD *)(v4 - 144) = *(_DWORD *)(v4 - 240);
  *(_DWORD *)(v4 - 140) = v8;
  *(_QWORD *)(v4 - 136) = v3;
  v9 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 128) = v9;
  v10 = *(_DWORD *)(v4 - 244);
  *(_DWORD *)(v4 - 120) = v6;
  *(_DWORD *)(v4 - 116) = v10;
  v11 = *(_DWORD *)(v4 - 232);
  *(_DWORD *)(v4 - 112) = *(_DWORD *)(v4 - 228);
  *(_DWORD *)(v4 - 108) = v11;
  *(_DWORD *)(v4 - 104) = *(_DWORD *)(v4 - 236);
  *(_DWORD *)(v4 - 100) = v2;
  *(_DWORD *)(v4 - 96) = *(_DWORD *)(v4 - 212);
  static View.makeDebuggableView(view:inputs:)();
  *(_QWORD *)(v4 - 176) = v9;
  *(_DWORD *)(v4 - 168) = v6;
  MEMORY[0x1E0C80A78](v9, v12);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();

  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 272) + 8))(*(_QWORD *)(v4 - 280), v5);
  v13 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)v13 = *(_QWORD *)(v4 - 192);
  result = *(double *)(v4 - 184);
  *(double *)(v13 + 8) = result;
  return result;
}

void type metadata accessor for TimelineView<>.UpdateFilter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t closure #1 in static TimelineView<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = type metadata accessor for TimelineView(0, a2, a3, a4);
  v9[3] = a2;
  v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return v9[5];
}

uint64_t sub_187AD26B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.alwaysOnFrameSpecifier.getter();
  *a1 = result;
  return result;
}

void sub_187AD26E8(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);

}

uint64_t sub_187AD2724@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.updateFidelity.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AD275C()
{
  return EnvironmentValues.updateFidelity.setter();
}

uint64_t key path getter for EnvironmentValues.alwaysOnInvalidationHandler : EnvironmentValues(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (uint64_t (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>, MEMORY[0x1E0CE53F0]);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187AD2884(uint64_t a1)
{
  _BYTE v2[8];

  outlined init with copy of TimelineInvalidationAction(a1, (uint64_t)v2);
  return EnvironmentValues.alwaysOnInvalidationHandler.setter((uint64_t)v2);
}

uint64_t default argument 11 of TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

void TimelineView<>.UpdateFilter.init(view:schedule:phase:time:referenceDate:id:frameSpecifier:fidelity:invalidationHandler:hadFrameSpecifier:resetSeed:iterator:currentTime:nextTime:cadence:)(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int a10, char a11, int a12)
{
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_QWORD *)(a9 + 16) = a5;
  *(_QWORD *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 32) = a7;
  *(_DWORD *)(a9 + 36) = a8;
  *(_DWORD *)(a9 + 40) = a10;
  *(_BYTE *)(a9 + 44) = a11;
  *(_DWORD *)(a9 + 48) = a12;
  type metadata accessor for TimelineView<>.UpdateFilter();
}

uint64_t sub_187AD29EC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = v1 + a1[23];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v8 = type metadata accessor for Optional();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, v2, v8);
  *(_QWORD *)(v1 + a1[24]) = v5;
  *(_QWORD *)(v1 + a1[25]) = v4;
  *(_BYTE *)(v1 + a1[26]) = v3;
  return result;
}

void implicit closure #1 in static TimelineView<>._makeView(view:inputs:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  type metadata accessor for TimelineView(255, a3, a4, a5);
  type metadata accessor for _GraphValue();
  v6 = a1;
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v6);
  type metadata accessor for TimelineView<>.AlwaysOnTimelinePreferenceWriter();
}

uint64_t sub_187AD2B80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  _QWORD v6[5];
  unsigned int v7;

  v6[2] = a1;
  v6[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineView<A, B><>.AlwaysOnTimelinePreferenceWriter, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_34, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);

  return v7;
}

void partial apply for implicit closure #1 in static TimelineView<>._makeView(view:inputs:)()
{
  uint64_t v0;

  implicit closure #1 in static TimelineView<>._makeView(view:inputs:)(*(void **)(v0 + 48), *(unsigned int *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void base witness table accessor for Equatable in TimelineView<A, B>.Context.Cadence()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t TimelineView<>.UpdateFilter.view.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t Value;

  v3 = type metadata accessor for TimelineView(0, a1[2], a1[3], a1[4]);
  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a2, Value, v3);
}

uint64_t TimelineView<>.UpdateFilter.updateValue()(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  char *v82;
  double v83;
  unsigned int v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  char *v88;
  unsigned int v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t Value;
  char v94;
  char v95;
  void (*v96)(char *, uint64_t, char *);
  char *v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int Attribute;
  int v103;
  uint64_t v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  void **v111;
  char v112;
  char v113;
  void *v114;
  unint64_t *v115;
  char v116;
  char v117;
  char *v118;
  void (*v119)(char *, uint64_t);
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  char *v128;
  uint64_t v129;
  double v130;
  double v131;
  _BOOL4 v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unsigned int (*v153)(char *, uint64_t, uint64_t);
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  char v160;
  double v161;
  char *v162;
  unsigned int (*v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  double v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  double v173;
  char v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char v178;
  char *v179;
  char *v180;
  uint64_t (*v181)(char *, char *, uint64_t);
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  double v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  double v203;
  double v204;
  double v205;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, uint64_t);
  void (*v211)(char *, uint64_t);
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  void (*v216)(char *, uint64_t, char *);
  char *v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t TupleTypeMetadata2;
  char *v244;
  uint64_t v245;
  char *v246;
  void (*v247)(char *, char *, uint64_t);
  uint64_t v248;
  uint64_t (*v249)(uint64_t, uint64_t, uint64_t);
  void (*v250)(char *, char *, uint64_t, double);
  char *v251;
  uint64_t AssociatedConformanceWitness;
  uint64_t v253;
  id v254;
  uint64_t v255;
  void (*v256)(char *, uint64_t);
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  BOOL v261[8];
  uint64_t v262;

  v3 = v2;
  v262 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 24);
  v228 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v227 = (char *)&v212 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context(0);
  v225 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v226 = (char *)&v212 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v239 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v222 = (char *)&v212 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 32);
  v236 = v5;
  v238 = type metadata accessor for TimelineView(0, v10, v5, v14);
  v221 = *(_QWORD *)(v238 - 8);
  MEMORY[0x1E0C80A78](v238, v15);
  v219 = (uint64_t)&v212 - v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v18);
  v220 = (char *)&v212 - v19;
  v234 = v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v253 = AssociatedTypeWitness;
  v20 = swift_getAssociatedTypeWitness();
  v21 = type metadata accessor for Optional();
  v22 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v248 = v21;
  v247 = *(void (**)(char *, char *, uint64_t))(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v218 = (char *)&v212 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v215 = (char *)&v212 - v27;
  v259 = type metadata accessor for Date();
  v28 = *(_QWORD *)(v259 - 8);
  MEMORY[0x1E0C80A78](v259, v29);
  v224 = (char *)&v212 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v237 = (char *)&v212 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v241 = (char *)&v212 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v212 = (char *)&v212 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v214 = (char *)&v212 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v244 = (char *)&v212 - v45;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, v46, v22);
  v254 = v47;
  MEMORY[0x1E0C80A78](v47, v48);
  v246 = (char *)&v212 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50, v51);
  v213 = (char *)&v212 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v217 = (char *)&v212 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v229 = (char *)&v212 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v245 = (uint64_t)&v212 - v61;
  type metadata accessor for (value: Date?, changed: Bool)();
  v242 = v62;
  MEMORY[0x1E0C80A78](v62, v63);
  v230 = (char *)&v212 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v65, v66);
  v232 = (uint64_t)&v212 - v67;
  MEMORY[0x1E0C80A78](v68, v69);
  v71 = (char *)&v212 - v70;
  MEMORY[0x1E0C80A78](v72, v73);
  v255 = (uint64_t)&v212 - v74;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v231 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v75);
  v258 = (char *)&v212 - v76;
  v77 = *(_QWORD *)(a1 - 8);
  v80 = MEMORY[0x1E0C80A78](v78, v79);
  v82 = (char *)&v212 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = *(int *)(a1 + 96);
  v83 = *(double *)&v3[v257];
  v250 = *(void (**)(char *, char *, uint64_t, double))(v77 + 16);
  v250(v82, v3, a1, v80);
  v84 = *(_DWORD *)AGGraphGetValue();
  v85 = *(void (**)(char *, uint64_t))(v77 + 8);
  v251 = v82;
  v86 = v82;
  v87 = a1;
  v256 = v85;
  v85(v86, a1);
  if (*((_DWORD *)v3 + 12) != v84 >> 1)
  {
    v88 = v251;
    ((void (*)(char *, char *, uint64_t))v250)(v251, v3, a1);
    v89 = *(_DWORD *)AGGraphGetValue();
    v90 = v88;
    v87 = a1;
    v256(v90, a1);
    *((_DWORD *)v3 + 12) = v89 >> 1;
    v91 = &v3[*(int *)(a1 + 92)];
    (*((void (**)(char *, uint64_t))v247 + 1))(v91, v248);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v91, 1, 1, v20);
    *(_QWORD *)&v3[v257] = 0xFFF0000000000000;
    *(_QWORD *)&v3[*(int *)(a1 + 100)] = 0x7FF0000000000000;
    v3[44] = 0;
  }
  v92 = *(int *)(TupleTypeMetadata2 + 48);
  Value = AGGraphGetValue();
  v95 = v94;
  v96 = *(void (**)(char *, uint64_t, char *))(v239 + 16);
  v97 = v258;
  v235 = (char *)v10;
  v216 = v96;
  v96(v258, Value, (char *)v10);
  v240 = v92;
  v97[v92] = v95 & 1;
  AGGraphGetValue();
  v99 = v98;
  v100 = v242;
  v101 = *(int *)(v242 + 48);
  Attribute = AGWeakAttributeGetAttribute();
  v103 = *MEMORY[0x1E0CFED28];
  v260 = v28;
  if (Attribute == v103)
  {
    v109 = v255;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v255, 1, 1, v259);
    v110 = 0;
  }
  else
  {
    v104 = AGGraphGetValue();
    v106 = v105;
    outlined init with copy of Date?(v104, (uint64_t)v71);
    v107 = v106 & 1;
    v28 = v260;
    v71[v101] = v107;
    v108 = *(int *)(v100 + 48);
    v109 = v255;
    outlined init with take of Date?((uint64_t)v71, v255);
    v110 = v71[v108];
  }
  v233 = v99 & 1;
  *(_BYTE *)(v109 + v101) = v110;
  type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier?, &lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier, 0x1E0D00F30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v111 = (void **)AGGraphGetValue();
  v113 = v112;
  v114 = *v111;
  type metadata accessor for BLSUpdateFidelity(0);
  v115 = (unint64_t *)AGGraphGetValue();
  v117 = v116;
  v223 = *v115;
  if ((v113 & 1) == 0 && AGGraphGetOutputValue() || (v114 != 0) == v3[44])
  {
    v121 = v114;
  }
  else
  {
    v118 = &v3[*(int *)(v87 + 92)];
    v119 = (void (*)(char *, uint64_t))*((_QWORD *)v247 + 1);
    v120 = v114;
    v119(v118, v248);
    v28 = v260;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v118, 1, 1, v20);
    v3[44] = v114 != 0;
    v109 = v255;
  }
  v122 = (uint64_t)v229;
  if ((v117 & 1) != 0)
  {
    v233 = 1;
    v258[v240] = 1;
  }
  v123 = v232;
  outlined init with copy of Date?(v109, v232);
  v124 = v123;
  v125 = v245;
  outlined init with take of Date?(v124, v245);
  outlined init with copy of Date?(v125, v122);
  v126 = v259;
  v249 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v127 = v249(v122, 1, v259);
  v254 = v114;
  v128 = v244;
  if (v127 == 1)
  {
    Date.init()();
    outlined destroy of Date?(v122);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v244, v122, v126);
  }
  v129 = (uint64_t)v230;
  Date.timeIntervalSinceReferenceDate.getter();
  v131 = v130;
  if ((v258[v240] & 1) != 0)
  {
    v132 = 1;
  }
  else
  {
    v133 = v247;
    v134 = v215;
    v135 = v248;
    (*((void (**)(char *, char *, uint64_t))v247 + 2))(v215, &v3[*(int *)(v87 + 92)], v248);
    v132 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v134, 1, v20) == 1;
    (*((void (**)(char *, uint64_t))v133 + 1))(v134, v135);
  }
  v136 = v242;
  v137 = *(int *)(v242 + 48);
  v138 = v255;
  outlined init with copy of Date?(v255, v129);
  v139 = *(unsigned __int8 *)(v138 + v101);
  *(_BYTE *)(v129 + v137) = v139;
  if (v132)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v129, (uint64_t (*)(_QWORD))type metadata accessor for (value: Date?, changed: Bool));
    v140 = v259;
    v141 = v254;
  }
  else
  {
    v142 = *(int *)(v136 + 48);
    v143 = v232;
    outlined init with take of Date?(v129, v232);
    *(_BYTE *)(v143 + v142) = v139;
    outlined destroy of Date?(v143);
    v140 = v259;
    v141 = v254;
    if (!v139)
      goto LABEL_28;
  }
  v144 = v141 != 0;
  v145 = v251;
  ((void (*)(char *, char *, uint64_t))v250)(v251, v3, v87);
  v146 = v219;
  TimelineView<>.UpdateFilter.view.getter((uint64_t *)v87, v219);
  v256(v145, v87);
  v147 = v222;
  v148 = v235;
  v216(v222, v146, v235);
  (*(void (**)(uint64_t, uint64_t))(v221 + 8))(v146, v238);
  v261[0] = v144;
  (*(void (**)(char *, BOOL *, char *))(v234 + 24))(v128, v261, v148);
  (*(void (**)(char *, char *))(v239 + 8))(v147, v148);
  v149 = v218;
  dispatch thunk of Sequence.makeIterator()();
  v150 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v149, 0, 1, v20);
  v151 = &v3[*(int *)(v87 + 92)];
  (*((void (**)(char *, char *, uint64_t))v247 + 5))(v151, v149, v248);
  v152 = *(int *)(v87 + 100);
  *(_QWORD *)&v3[v152] = 0x7FF0000000000000;
  v153 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48);
  if (v153(v151, 1, v20))
  {
    v154 = v217;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v260 + 56))(v217, 1, 1, v140);
LABEL_25:
    v157 = (uint64_t)v154;
    goto LABEL_26;
  }
  v155 = swift_getAssociatedConformanceWitness();
  v156 = v217;
  dispatch thunk of IteratorProtocol.next()();
  v154 = v156;
  if (v249((uint64_t)v156, 1, v140) == 1)
    goto LABEL_25;
  v248 = v155;
  v169 = v260;
  v170 = *(void (**)(char *, char *, uint64_t))(v260 + 32);
  v170(v214, v154, v140);
  Date.timeIntervalSinceReferenceDate.getter();
  *(_QWORD *)&v3[v257] = v171;
  if (v153(v151, 1, v20))
  {
    v172 = v213;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56))(v213, 1, 1, v140);
  }
  else
  {
    v247 = v170;
    v172 = v213;
    dispatch thunk of IteratorProtocol.next()();
    if (v249((uint64_t)v172, 1, v140) != 1)
    {
      v207 = v212;
      v247(v212, v172, v140);
      if (v249(v245, 1, v140) == 1)
      {
        Date.timeIntervalSinceReferenceDate.getter();
        v209 = v208;
        v210 = *(void (**)(char *, uint64_t))(v260 + 8);
        v210(v207, v140);
        v210(v214, v140);
        *(_QWORD *)&v3[v152] = v209;
      }
      else
      {
        v211 = *(void (**)(char *, uint64_t))(v260 + 8);
        v211(v207, v140);
        v211(v214, v140);
      }
      goto LABEL_27;
    }
  }
  (*(void (**)(char *, uint64_t))(v169 + 8))(v214, v140);
  v157 = (uint64_t)v172;
LABEL_26:
  outlined destroy of Date?(v157);
LABEL_27:
  v141 = v254;
LABEL_28:
  v158 = *(int *)(v87 + 100);
  if (v141)
  {
    v159 = v141;
    v160 = TimelineView<>.UpdateFilter.updateFromBacklightServices(frameSpecifier:)(v159, v87);

    if ((v160 & 1) != 0)
      v258[v240] = 1;
  }
  else
  {
    v161 = *(double *)&v3[v158];
    if (v161 <= v131)
    {
      v162 = &v3[*(int *)(v87 + 92)];
      v163 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
      while (!v163(v162, 1, v20))
      {
        swift_getAssociatedConformanceWitness();
        v164 = (uint64_t)v246;
        dispatch thunk of IteratorProtocol.next()();
        if (v249(v164, 1, v140) == 1)
          goto LABEL_40;
        v165 = v164;
        v166 = v260;
        v167 = v241;
        (*(void (**)(char *, uint64_t, uint64_t))(v260 + 32))(v241, v165, v140);
        *(double *)&v3[v257] = v161;
        Date.timeIntervalSinceReferenceDate.getter();
        v161 = v168;
        (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v140);
        *(double *)&v3[v158] = v161;
        if (v131 < v161)
          goto LABEL_41;
      }
      v164 = (uint64_t)v246;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v260 + 56))(v246, 1, 1, v140);
LABEL_40:
      outlined destroy of Date?(v164);
    }
  }
LABEL_41:
  v173 = *(double *)&v3[v257];
  if ((~*(_QWORD *)&v173 & 0x7FF0000000000000) == 0)
  {
    *(double *)&v3[v257] = v131;
    v173 = v131;
  }
  v174 = v233;
  if (v173 != v83)
    v174 = 1;
  v175 = v260;
  if ((v174 & 1) != 0 || (AGGraphCurrentAttributeWasModified() & 1) != 0 || !AGGraphGetOutputValue())
  {
    v176 = v237;
    Date.init(timeIntervalSinceReferenceDate:)();
    v177 = v224;
    (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v224, v176, v140);
    if (v223 >= 4)
      v178 = 2;
    else
      v178 = 0x10202u >> (8 * v223);
    v257 = v158;
    v179 = v3;
    v181 = (uint64_t (*)(char *, char *, uint64_t))v250;
    v180 = v251;
    ((void (*)(char *, char *, uint64_t))v250)(v251, v179, v87);
    v182 = AGGraphGetValue();
    outlined init with copy of TimelineInvalidationAction(v182, (uint64_t)v261);
    v256(v180, v87);
    v183 = v226;
    (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v226, v177, v259);
    v184 = v225;
    v183[*(int *)(v225 + 44)] = v178;
    outlined init with take of TimelineInvalidationAction((uint64_t)v261, (uint64_t)&v183[*(int *)(v184 + 48)]);
    v185 = v181(v180, v179, v87);
    v187 = MEMORY[0x1E0C80A78](v185, v186);
    v188 = v236;
    *(&v212 - 6) = v235;
    *(&v212 - 5) = (char *)v188;
    v189 = *(char **)(v87 + 40);
    *(&v212 - 4) = (char *)v234;
    *(&v212 - 3) = v189;
    *(&v212 - 2) = v179;
    *(&v212 - 1) = v183;
    v190 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineView<A, B><>.UpdateFilter, v87, v187);
    v191 = (uint64_t)v227;
    StatefulRule.withObservation<A>(do:)();
    v192 = v180;
    v3 = v179;
    v158 = v257;
    v193 = ((uint64_t (*)(char *, uint64_t))v256)(v192, v87);
    MEMORY[0x1E0C80A78](v193, v194);
    *(&v212 - 2) = (char *)v87;
    *(&v212 - 1) = (char *)v190;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v191, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v212 - 4), v188, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v195);
    v175 = v260;
    (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v191, v188);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v237, v259);
    v196 = (uint64_t)v183;
    v140 = v259;
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v196, (uint64_t (*)(_QWORD))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  }
  v197 = *(double *)&v3[v158];
  if (v197 < INFINITY)
  {
    v198 = v197 - v131;
    type metadata accessor for ViewGraph();
    v199 = MEMORY[0x18D75C5F8]();
    v200 = v3;
    v201 = v87;
    v202 = v251;
    ((void (*)(char *, char *, uint64_t))v250)(v251, v200, v201);
    v203 = *(double *)AGGraphGetValue();
    v256(v202, v201);
    v204 = v198 + v203;
    swift_beginAccess();
    v205 = *(double *)(v199 + 376);
    if (v204 < v205)
      v205 = v204;
    *(double *)(v199 + 376) = v205;
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v175 + 8))(v244, v140);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(v255, (uint64_t (*)(_QWORD))type metadata accessor for (value: Date?, changed: Bool));
  (*(void (**)(char *, uint64_t))(v231 + 8))(v258, TupleTypeMetadata2);
  return outlined destroy of Date?(v245);
}

uint64_t TimelineView<>.UpdateFilter.updateFromBacklightServices(frameSpecifier:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)&v28 - v18;
  v20 = objc_msgSend(a1, sel_entrySpecifierForTimelineIdentifier_, *(_QWORD *)(v3 + 24), v17);
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_5;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, sel_timelineEntry);
  v23 = objc_msgSend(v22, sel_presentationTime);

  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v24(v9, v14, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {

LABEL_5:
    outlined destroy of Date?((uint64_t)v9);
    return 0;
  }
  v24(v19, v9, v10);
  Date.timeIntervalSinceReferenceDate.getter();
  v27 = v26;

  *(_QWORD *)(v3 + *(int *)(a2 + 96)) = v27;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
  *(_QWORD *)(v3 + *(int *)(a2 + 100)) = 0x7FF0000000000000;
  return 1;
}

void closure #1 in TimelineView<>.UpdateFilter.updateValue()()
{
  type metadata accessor for TimelineView<>.UpdateFilter();
}

uint64_t sub_187AD41DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for TimelineView(0, v2, v1, v0);
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TimelineView<A, B><>.UpdateFilter(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for TimelineView<A, B><>.UpdateFilter, a1);
  return static AsyncAttribute.flags.getter();
}

void protocol witness for static View._makeView(view:inputs:) in conformance <> TimelineView<A, B>(uint64_t *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  static TimelineView<>._makeView(view:inputs:)(a1[2], a1[3], a1[4], *(_QWORD *)(a2 - 8), a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> TimelineView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, a3, &v5);
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> TimelineView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>);
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance <> TimelineView<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 - 8);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, a1, &v2);
  specialized PrimitiveView.body.getter();
}

uint64_t base witness table accessor for View in <> TimelineView<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> TimelineView<A, B>, a1, &v4);
}

uint64_t getEnumTagSinglePayload for TimelineView(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187AD444C + 4 * byte_187C8B518[v10]))();
  }
}

void storeEnumTagSinglePayload for TimelineView(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_187AD45C4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AD463CLL);
}

void sub_187AD45CC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AD45D4);
  JUMPOUT(0x187AD463CLL);
}

void sub_187AD4614()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AD463CLL);
}

void sub_187AD461C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AD463CLL);
}

uint64_t sub_187AD4624(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x187AD463CLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x187AD4638);
    JUMPOUT(0x187AD4630);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for TimelineView.Context()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TimelineView.Context(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 44)) = *((_BYTE *)a2 + *(int *)(a3 + 44));
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t destroy for TimelineView.Context(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 44)) = *(_BYTE *)(a2 + *(int *)(a3 + 44));
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 44)) = *(_BYTE *)(a2 + *(int *)(a3 + 44));
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 44)) = *(_BYTE *)(a2 + *(int *)(a3 + 44));
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 44)) = *(_BYTE *)(a2 + *(int *)(a3 + 44));
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineView.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AD4958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimelineView.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_187AD49DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineView.Context);
}

uint64_t storeEnumTagSinglePayload for TimelineView.Context.Cadence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_187AD4AAC + 4 * byte_187C8B52C[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_187AD4AE0 + 4 * byte_187C8B527[v4]))();
}

uint64_t sub_187AD4AE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AD4AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x187AD4AF0);
  return result;
}

uint64_t sub_187AD4AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x187AD4B04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_187AD4B08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_187AD4B10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for TimelineView.Context.Cadence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineView.Context.Cadence);
}

uint64_t type metadata completion function for TimelineView<>.UpdateFilter()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimelineView<>.UpdateFilter(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  void *v25;
  _DWORD *v26;
  _DWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  const void *v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  id v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((v8 + 7 + ((v7 + 52) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
    v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v15 = *v16;
    v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v17 = *v18;
    v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFCLL);
    v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFCLL);
    *v19 = *v20;
    v21 = (_QWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    v22 = (_QWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *v21 = *v22;
    v23 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFF8);
    v24 = (void **)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
    v25 = *v24;
    *v23 = *v24;
    v26 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
    v27 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
    v28 = (unint64_t)v27 + 19;
    *v26 = *v27;
    v29 = (unint64_t)v26 + 19;
    v26[1] = v27[1];
    v30 = ((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8;
    v31 = ((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)v30 = *(_DWORD *)v31;
    *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
    *(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
    v32 = (void *)((v7 + (v29 & 0xFFFFFFFFFFFFFFF8) + 4) & ~v7);
    v33 = (const void *)((v7 + (v28 & 0xFFFFFFFFFFFFFFF8) + 4) & ~v7);
    v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    v35 = v25;
    if (v34(v33, 1, v14))
    {
      memcpy(v32, v33, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v32, v33, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v32, 0, 1, v14);
    }
    v36 = (_QWORD *)(((unint64_t)v32 + v9) & 0xFFFFFFFFFFFFF8);
    v37 = (_QWORD *)(((unint64_t)v33 + v9) & 0xFFFFFFFFFFFFFFF8);
    *v36 = *v37;
    v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  }
  return a1;
}

uint64_t destroy for TimelineView<>.UpdateFilter(uint64_t a1)
{
  id *v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (id *)((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
             + 15) & 0xFFFFFFFFFFFFFFF8);

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80)
      + (((((unint64_t)v1 + 11) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
      + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

_DWORD *initializeWithCopy for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  void *v13;
  _DWORD *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t);
  id v28;
  int v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_QWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  v13 = *v12;
  *v11 = *v12;
  v14 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_DWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
  v16 = (unint64_t)v15 + 19;
  *v14 = *v15;
  v17 = (unint64_t)v14 + 19;
  v14[1] = v15[1];
  v18 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = v17 & 0xFFFFFFFFFFFFFFF8;
  v21 = v16 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = (void *)((v24 + v20 + 4) & ~v24);
  v26 = (const void *)((v24 + v21 + 4) & ~v24);
  v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  v28 = v13;
  if (v27(v26, 1, AssociatedTypeWitness))
  {
    v29 = *(_DWORD *)(v23 + 84);
    v30 = *(_QWORD *)(v23 + 64);
    if (v29)
      v31 = v30;
    else
      v31 = v30 + 1;
    memcpy(v25, v26, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, AssociatedTypeWitness);
    v29 = *(_DWORD *)(v23 + 84);
    v30 = *(_QWORD *)(v23 + 64);
  }
  if (v29)
    v32 = v30;
  else
    v32 = v30 + 1;
  v33 = (_QWORD *)(((unint64_t)v25 + v32 + 7) & 0xFFFFFFFFFFFFF8);
  v34 = (_QWORD *)(((unint64_t)v26 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  return a1;
}

_DWORD *assignWithCopy for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v3;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v5;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v8 = *v7;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8;
  v13 = *(void **)v12;
  v12 += 11;
  v14 = *(void **)v11;
  *(_QWORD *)v11 = v13;
  v11 += 11;
  v15 = v13;

  *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 4);
  v16 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((v12 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  v18 = (_DWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (void *)(((unint64_t)v18 + v22 + 4) & ~v22);
  v24 = (void *)(((unint64_t)v19 + v22 + 4) & ~v22);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v14) = v25(v23, 1, AssociatedTypeWitness);
  v26 = v25(v24, 1, AssociatedTypeWitness);
  if ((_DWORD)v14)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v23, v24, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v23, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v23, v24, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v23, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v21 + 84))
    v27 = *(_QWORD *)(v21 + 64);
  else
    v27 = *(_QWORD *)(v21 + 64) + 1;
  memcpy(v23, v24, v27);
LABEL_10:
  if (*(_DWORD *)(v21 + 84))
    v28 = *(_QWORD *)(v21 + 64);
  else
    v28 = *(_QWORD *)(v21 + 64) + 1;
  v29 = (_QWORD *)(((unint64_t)v23 + v28 + 7) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v24 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  return a1;
}

_DWORD *initializeWithTake for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  int v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v3 = *v4;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v5 = *v6;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v7 = *v8;
  v9 = (_QWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_QWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v11 = (_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  v12 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8);
  *v11 = *v12;
  v13 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_DWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (unint64_t)v14 + 19;
  *v13 = *v14;
  v16 = (unint64_t)v13 + 19;
  v13[1] = v14[1];
  v17 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = v16 & 0xFFFFFFFFFFFFFFF8;
  v20 = v15 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (void *)((v23 + v19 + 4) & ~v23);
  v25 = (const void *)((v23 + v20 + 4) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v25, 1, AssociatedTypeWitness))
  {
    v26 = *(_DWORD *)(v22 + 84);
    v27 = *(_QWORD *)(v22 + 64);
    if (v26)
      v28 = v27;
    else
      v28 = v27 + 1;
    memcpy(v24, v25, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v24, v25, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, AssociatedTypeWitness);
    v26 = *(_DWORD *)(v22 + 84);
    v27 = *(_QWORD *)(v22 + 64);
  }
  if (v26)
    v29 = v27;
  else
    v29 = v27 + 1;
  v30 = (_QWORD *)(((unint64_t)v24 + v29 + 7) & 0xFFFFFFFFFFFFF8);
  v31 = (_QWORD *)(((unint64_t)v25 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  return a1;
}

_DWORD *assignWithTake for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;

  *a1 = *a2;
  v3 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v4 = *v3;
  v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v6 = *v5;
  v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFCLL);
  v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFCLL);
  *v8 = *v7;
  v9 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *v9 = *v10;
  v9[1] = v10[1];
  v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)v12;
  v12 += 11;
  v14 = *(void **)v11;
  *(_QWORD *)v11 = v13;
  v11 += 11;

  *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 4);
  v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((v12 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = (_DWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_DWORD *)(((v12 & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = (void *)(((unint64_t)v17 + v21 + 4) & ~v21);
  v23 = (void *)(((unint64_t)v18 + v21 + 4) & ~v21);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v25 = v24(v22, 1, AssociatedTypeWitness);
  v26 = v24(v23, 1, AssociatedTypeWitness);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v22, v23, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v22, v23, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v22, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v20 + 84))
    v27 = *(_QWORD *)(v20 + 64);
  else
    v27 = *(_QWORD *)(v20 + 64) + 1;
  memcpy(v22, v23, v27);
LABEL_10:
  if (*(_DWORD *)(v20 + 84))
    v28 = *(_QWORD *)(v20 + 64);
  else
    v28 = *(_QWORD *)(v20 + 64) + 1;
  v29 = (_QWORD *)(((unint64_t)v22 + v28 + 7) & 0xFFFFFFFFFFFFF8);
  v30 = (_QWORD *)(((unint64_t)v23 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineView<>.UpdateFilter(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = 7;
  else
    v8 = 8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (v7 < a2)
  {
    v10 = ((((v8 + *(_QWORD *)(v4 + 64) + ((v9 + 52) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v10 < 4)
      v11 = ((a2 - v7 + 255) >> (8 * v10)) + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X16 }
  }
  v15 = (uint64_t *)((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0x80000000) != 0)
  {
    v17 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8)
                                                                   + 11) & 0xFFFFFFFFFFFFFFF8)
                                                                 + v9
                                                                 + 12) & ~v9);
    if (v17 >= 2)
      return v17 - 1;
    else
      return 0;
  }
  else
  {
    v16 = *v15;
    if ((unint64_t)*v15 >= 0xFFFFFFFF)
      LODWORD(v16) = -1;
    return (v16 + 1);
  }
}

void storeEnumTagSinglePayload for TimelineView<>.UpdateFilter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  int v14;
  int v15;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = 0u;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  if (v8)
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = *(_QWORD *)(v7 + 64) + 1;
  v12 = ((((v11 + ((*(unsigned __int8 *)(v7 + 80) + 52) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v10 < a3)
  {
    if (v12 <= 3)
      v13 = ((a3 - v10 + 255) >> (8 * v12)) + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (v10 < a2)
  {
    if (v12 >= 4)
      v15 = ~v10 + a2;
    else
      v15 = (~(_BYTE)v10 + a2);
    bzero(a1, v12);
    if ((_DWORD)v12 == 1)
      *a1 = v15;
    else
      *(_DWORD *)a1 = v15;
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_187AD5D18()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5D20()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x187AD5D28);
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5D60()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5D68()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = v0;
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5D70(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (v1)
  {
    if ((a1 & 0x80000000) == 0)
    {
      if ((v1 & 0x80000000) == 0)
        JUMPOUT(0x187AD5E00);
      JUMPOUT(0x187AD5DFCLL);
    }
    JUMPOUT(0x187AD5D7CLL);
  }
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5DF4()
{
  char v0;
  _BYTE *v1;

  *v1 = v0;
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5E40()
{
  __int16 v0;
  _WORD *v1;

  *v1 = v0;
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5E48()
{
  int v0;
  uint64_t v1;

  *(_WORD *)v1 = v0;
  *(_BYTE *)(v1 + 2) = BYTE2(v0);
  JUMPOUT(0x187AD5E04);
}

void sub_187AD5E58()
{
  int v0;
  _DWORD *v1;

  *v1 = v0;
  JUMPOUT(0x187AD5E04);
}

void base witness table accessor for _AttributeBody in TimelineView<A, B><>.UpdateFilter()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for (value: Date?, changed: Bool)()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (value: Date?, changed: Bool))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for Date?, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: Date?, changed: Bool));
  }
}

void partial apply for closure #1 in TimelineView<>.UpdateFilter.updateValue()()
{
  closure #1 in TimelineView<>.UpdateFilter.updateValue()();
}

uint64_t partial apply for closure #1 in closure #1 in TimelineView<>.UpdateFilter.updateValue()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[6];
  v4 = type metadata accessor for TimelineView(0, v1[2], v1[3], v1[4]);
  return (*(uint64_t (**)(uint64_t))(a1 + *(int *)(v4 + 44)))(v3);
}

void type metadata accessor for EnvironmentPropertyKey<AlwaysOnInvalidationKey>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>)
  {
    v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  }
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t IncrementalScrollable.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = AGGraphGetWeakValue();
  if (result)
  {
    v6 = *(_OWORD *)result;
    v7 = *(_OWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 32);
    result = swift_retain();
    v4 = v6;
    v5 = v7;
  }
  else
  {
    v3 = 0;
    v4 = xmmword_187BFE310;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t IncrementalScrollable.children.getter()
{
  uint64_t result;

  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (uint64_t (*)(uint64_t))type metadata accessor for Scrollable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetWeakValue();
  if (result)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t IncrementalScrollable.allowsContentOffsetAdjustments.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  IncrementalScrollable.parent.getter((uint64_t)v4);
  v0 = v5;
  if (v5)
  {
    v1 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v4);
    v2 = 1;
  }
  return v2 & 1;
}

double (*IncrementalScrollable.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<D0>(uint64_t a1@<X8>)
{
  uint64_t Strong;
  uint64_t v9;
  uint64_t IsValid;
  uint64_t v11;
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD v20[6];
  uint64_t v21;
  char v22;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v9 = Strong;
    IsValid = AGSubgraphIsValid();
    if ((_DWORD)IsValid)
    {
      MEMORY[0x1E0C80A78](IsValid, v11);
      v20[2] = a3;
      v20[3] = a4;
      v20[4] = v9;
      v20[5] = a1;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      _IncrementalLayoutViewCache.withPlacementData<A>(_:)((void (*)(char *, uint64_t *, double))partial apply for closure #1 in IncrementalScrollable.makeTarget<A>(for:), (uint64_t)v20, (uint64_t)&v21);
      if ((v22 & 1) == 0)
      {
        v14 = v21;
        static Transaction.current.getter();
        v15 = Transaction.scrollTargetAnchor.getter();
        v17 = v16;
        v19 = v18 & 1;
        swift_release();
        v12 = IncrementalScrollable.makeTarget(at:anchor:)(v14, v15, v17, v19, a2);
        swift_release();
        return v12;
      }
    }
    swift_release();
  }
  return 0;
}

uint64_t closure #1 in IncrementalScrollable.makeTarget<A>(for:)@<X0>(const void *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  _BYTE __dst[304];
  _BYTE v16[120];

  v10 = *a2;
  memcpy(__dst, a1, 0x129uLL);
  IncrementalLayoutViewCache.children(context:)(*MEMORY[0x1E0CFED28], (uint64_t)v16);
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 + 328) + 96))(a3, v16, __dst, a4, a5, *(_QWORD *)(v10 + 320));
  v13 = v12;
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v16);
  *(_QWORD *)a6 = v11;
  *(_BYTE *)(a6 + 8) = v13 & 1;
  return result;
}

double (*IncrementalScrollable.makeTarget(at:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5))@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = swift_allocObject();
  v13 = *v5;
  v12 = v5[1];
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a5 + 16);
  *(_QWORD *)(v14 + 32) = v11;
  *(_QWORD *)(v14 + 40) = a1;
  *(_QWORD *)(v14 + 48) = v12;
  *(_QWORD *)(v14 + 56) = v13;
  *(_QWORD *)(v14 + 64) = a2;
  *(_QWORD *)(v14 + 72) = a3;
  *(_BYTE *)(v14 + 80) = a4 & 1;
  return partial apply for closure #1 in IncrementalScrollable.makeTarget(at:anchor:);
}

double closure #1 in IncrementalScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t Strong;
  uint64_t v5;
  uint64_t IsValid;
  uint64_t v7;
  uint64_t WeakValue;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  double result;
  _QWORD v16[4];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    IsValid = AGSubgraphIsValid();
    if ((_DWORD)IsValid)
    {
      MEMORY[0x1E0C80A78](IsValid, v7);
      v16[2] = v5;
      v16[3] = a1;
      type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      _IncrementalLayoutViewCache.withPlacementData<A>(_:)((void (*)(char *, uint64_t *, double))partial apply for closure #1 in closure #1 in IncrementalScrollable.makeTarget(at:anchor:), (uint64_t)v16, (uint64_t)&v17);
      if ((v19 & 1) == 0)
      {
        v27 = v17;
        v28 = v18;
        WeakValue = AGGraphGetWeakValue();
        if (WeakValue)
        {
          v24 = *(_QWORD *)WeakValue;
          v25 = *(_OWORD *)(WeakValue + 8);
          v26 = *(_OWORD *)(WeakValue + 24);
          v9 = (__int128 *)AGGraphGetWeakValue();
          if (v9)
          {
            v17 = *v9;
            v10 = swift_retain();
            *(double *)&v11 = MEMORY[0x18D755E9C](v10);
            ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v12, v11));
            static CoordinateSpace.scrollViewContent.getter();
            v21 = v24;
            v22 = v25;
            v23 = v26;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v17);
            ScrollTarget.init(rect:anchor:)();
            swift_release();
            swift_release();
            v13 = v20;
            v14 = v18;
            *(_OWORD *)a2 = v17;
            *(_OWORD *)(a2 + 16) = v14;
            result = *(double *)&v19;
            *(_OWORD *)(a2 + 32) = v19;
            *(_WORD *)(a2 + 48) = v13;
            return result;
          }
        }
      }
    }
    swift_release();
  }
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_WORD *)(a2 + 48) = 256;
  return result;
}

CGFloat closure #1 in closure #1 in IncrementalScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  CGFloat result;
  CGSize size;
  _QWORD v27[2];
  _OWORD v28[2];
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  CGRect v46;
  char v47;
  _BYTE v48[120];
  _QWORD v49[5];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;

  v27[0] = a4;
  v27[1] = a1;
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 320);
  v7 = *(_QWORD *)(*(_QWORD *)a3 + 328);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v13 = (char *)v27 - v12;
  v14 = a2[1];
  v65 = *a2;
  v66 = v14;
  v15 = *((double *)a2 + 4);
  v16 = *((_QWORD *)a2 + 5);
  v17 = a2[16];
  v62 = a2[15];
  v63 = v17;
  v64[0] = a2[17];
  *(_OWORD *)((char *)v64 + 9) = *(__int128 *)((char *)a2 + 281);
  v18 = a2[12];
  v58 = a2[11];
  v59 = v18;
  v19 = a2[14];
  v60 = a2[13];
  v61 = v19;
  v20 = a2[8];
  v54 = a2[7];
  v55 = v20;
  v21 = a2[10];
  v56 = a2[9];
  v57 = v21;
  v22 = a2[4];
  v50 = a2[3];
  v51 = v22;
  v23 = a2[6];
  v52 = a2[5];
  v53 = v23;
  IncrementalLayoutViewCache.children(context:)(*MEMORY[0x1E0CFED28], (uint64_t)v48);
  _IncrementalLayoutViewCache.copyState<A>(type:)(AssociatedTypeWitness, AssociatedTypeWitness);
  v28[0] = v65;
  v28[1] = v66;
  v29 = v15;
  v30 = v16;
  *(_OWORD *)((char *)v45 + 9) = *(_OWORD *)((char *)v64 + 9);
  v43 = v62;
  v44 = v63;
  v45[0] = v64[0];
  v39 = v58;
  v40 = v59;
  v41 = v60;
  v42 = v61;
  v35 = v54;
  v36 = v55;
  v37 = v56;
  v38 = v57;
  v31 = v50;
  v32 = v51;
  v33 = v52;
  v34 = v53;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _BYTE *, _OWORD *, char *, uint64_t, uint64_t))(v7 + 104))(v49, v27[0], v48, v28, v13, v8, v7);
  outlined init with take of CGRect?((uint64_t)v49, (uint64_t)&v46);
  outlined init with take of CGRect?((uint64_t)v49, (uint64_t)v28);
  if ((LOBYTE(v29) & 1) == 0 && *(_BYTE *)AGGraphGetValue() == 1)
    v46.origin.x = v15 - CGRectGetMaxX(v46);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  outlined destroy of _IncrementalLayout_Children((uint64_t)v48);
  v24 = v47;
  result = v46.origin.x;
  size = v46.size;
  *(CGPoint *)a5 = v46.origin;
  *(CGSize *)(a5 + 16) = size;
  *(_BYTE *)(a5 + 32) = v24;
  return result;
}

uint64_t IncrementalScrollable.forEachVisibleSubview(_:)(void (*a1)(__int128 *, char *))
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t *WeakValue;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  __int128 *Value;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  CGPoint v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _BYTE v46[56];
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  CGRect v55;

  result = swift_weakLoadStrong();
  if (result)
  {
    v2 = result;
    if (AGSubgraphIsValid())
    {
      IncrementalScrollable.transform.getter((uint64_t)&v45);
      v3 = v45;
      if ((_QWORD)v45 != 1)
      {
        v52 = v45;
        v53 = *(_OWORD *)v46;
        v54 = *(_QWORD *)&v46[16];
        WeakValue = (uint64_t *)AGGraphGetWeakValue();
        if (WeakValue)
        {
          v5 = *WeakValue;
          v6 = WeakValue[1];
          v41 = *(unsigned __int8 *)AGGraphGetValue();
          v7 = *(_DWORD *)(v2 + 40);
          v8 = *(_QWORD *)(v2 + 48);
          v9 = *(_DWORD *)(v2 + 112);
          *(_QWORD *)&v45 = *(_QWORD *)(v2 + 32);
          DWORD2(v45) = v7;
          *(_QWORD *)v46 = v8;
          *(_OWORD *)&v46[8] = *(_OWORD *)(v2 + 56);
          *(_OWORD *)&v46[24] = *(_OWORD *)(v2 + 72);
          *(_OWORD *)&v46[40] = *(_OWORD *)(v2 + 88);
          v47 = *(_QWORD *)(v2 + 104);
          v48 = v9;
          _ViewInputs.size.getter();
          Value = (__int128 *)AGGraphGetValue();
          v11 = Value[1];
          v45 = *Value;
          *(_OWORD *)v46 = v11;
          MEMORY[0x18D75BE3C]();
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          v12 = *(_QWORD *)AGGraphGetValue();
          *(_QWORD *)&v45 = v5;
          *((_QWORD *)&v45 + 1) = v6;
          v13 = swift_bridgeObjectRetain();
          *(double *)&v14 = MEMORY[0x18D755E9C](v13);
          ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v15, v14));
          v51 = 0;
          v16 = *(_QWORD *)(v12 + 16);
          if (v16)
          {
            v17 = v16 - 1;
            v18 = (char *)(v12 + 48);
            do
            {
              v19 = v17;
              v20 = *((_QWORD *)v18 - 2);
              v21 = *((_QWORD *)v18 - 1);
              v22 = *v18;
              v23 = *((_QWORD *)v18 + 1);
              v24 = v18[16];
              *(_QWORD *)&v45 = v21;
              BYTE8(v45) = v22;
              *(_QWORD *)v46 = v23;
              v46[8] = v24;
              *(_OWORD *)&v46[16] = *(_OWORD *)(v18 + 24);
              *(_OWORD *)&v46[32] = *(_OWORD *)(v18 + 40);
              v43 = *(_QWORD *)(v20 + 32);
              v44 = *(_QWORD *)(v20 + 40);
              swift_retain_n();
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
                v27 = v43;
                v26 = v44;
              }
              else
              {
                v25 = (uint64_t *)AGGraphGetValue();
                v27 = *v25;
                v26 = v25[1];
                swift_retain();
              }
              v49 = v27;
              v50 = v26;
              LayoutComputer.sizeThatFits(_:)();
              v29 = v28;
              v31 = v30;
              swift_release();
              v32 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v31, v29));
              v45 = *(_OWORD *)(v20 + 32);
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                v33 = (_QWORD *)AGGraphGetValue();
                v34 = v33[1];
                *(_QWORD *)&v45 = *v33;
                *((_QWORD *)&v45 + 1) = v34;
                swift_retain();
              }
              *(_QWORD *)&v45 = v21;
              BYTE8(v45) = v22;
              *(_QWORD *)v46 = v23;
              v46[8] = v24;
              LayoutComputer.sizeThatFits(_:)();
              v36 = v35;
              v38 = v37;
              swift_release_n();
              swift_release();
              if (v41)
              {
                v55.origin.x = v32.x;
                v55.origin.y = v32.y;
                v55.size.width = v36;
                v55.size.height = v38;
                CGRectGetMaxX(v55);
              }
              v39 = *((_QWORD *)v18 - 2);
              v40 = *(_QWORD *)(v39 + 144);
              v49 = *(_QWORD *)(v39 + 136);
              v50 = v40;
              swift_bridgeObjectRetain();
              swift_retain();
              ScrollableCollectionSubview.init(id:frame:transform:)();
              a1(&v45, &v51);
              swift_bridgeObjectRelease();
              swift_release();
              if ((v51 & 1) != 0)
                break;
              v17 = v19 - 1;
              v18 += 72;
            }
            while (v19);
          }
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          outlined consume of Transaction?(v3);
        }
      }
      return swift_release();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t IncrementalScrollable.visibleCollectionViewIDs.getter()
{
  uint64_t Strong;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  Strong = swift_weakLoadStrong();
  v1 = MEMORY[0x1E0DEE9D8];
  if (Strong)
  {
    if (AGSubgraphIsValid())
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v2 = *(_QWORD *)(*(_QWORD *)AGGraphGetValue() + 16);
      if (v2)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
        v3 = 32;
        do
        {
          _ViewList_ID.canonicalID.getter();
          v5 = *(_QWORD *)(v1 + 16);
          v4 = *(_QWORD *)(v1 + 24);
          if (v5 >= v4 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
          *(_QWORD *)(v1 + 16) = v5 + 1;
          v6 = v1 + 16 * v5;
          *(_QWORD *)(v6 + 32) = v8;
          *(_QWORD *)(v6 + 40) = v9;
          v3 += 72;
          --v2;
        }
        while (v2);
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
  return v1;
}

uint64_t static IncrementalScrollable.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 112))(a1 & 1) & 1;
}

uint64_t IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  CGPoint v30;
  double v31;
  double v32;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  __C::CGRect v57;
  CGRect v58;

  v8 = *a1;
  v9 = a1[1];
  v10 = *a2;
  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_13;
  if (!AGSubgraphIsValid())
    goto LABEL_12;
  v38 = v10;
  v57.origin.x = -1.0;
  v57.origin.y = -1.0;
  v57.size.width = 2.0;
  v57.size.height = 2.0;
  UnitPoint.in(_:)(v57);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v12 = *(_QWORD *)(*(_QWORD *)AGGraphGetValue() + 16);
  if (!v12)
  {
LABEL_12:
    result = swift_release();
LABEL_13:
    *a3 = xmmword_187BF9840;
    return result;
  }
  v13 = 0;
  v14 = 96;
  while (1)
  {
    result = AGGraphGetValue();
    if (v13 >= *(_QWORD *)(*(_QWORD *)result + 16))
    {
      __break(1u);
      goto LABEL_15;
    }
    v15 = *(_QWORD *)(*(_QWORD *)result + v14 - 64);
    v16 = *(_QWORD *)(v15 + 144);
    v48 = *(_QWORD *)(v15 + 136);
    v49 = v16;
    _ViewList_ID.canonicalID.getter();
    v48 = v39;
    v49 = v40;
    v56[0] = v8;
    v56[1] = v9;
    v17 = MEMORY[0x18D756E68](&v48, v56);
    swift_release();
    if ((v17 & 1) != 0)
      break;
    ++v13;
    v14 += 72;
    if (v12 == v13)
      goto LABEL_12;
  }
  result = AGGraphGetValue();
  if (v13 >= *(_QWORD *)(*(_QWORD *)result + 16))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v18 = (_QWORD *)(*(_QWORD *)result + v14);
  v20 = *(v18 - 8);
  v21 = *((_BYTE *)v18 - 48);
  v22 = *(v18 - 5);
  v23 = *((_BYTE *)v18 - 32);
  v24 = *(v18 - 3);
  v25 = *(v18 - 2);
  v26 = *(v18 - 1);
  v27 = *v18;
  v48 = *(v18 - 7);
  v19 = v48;
  LOBYTE(v49) = v21;
  v50 = v22;
  v51 = v23;
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v55 = v27;
  swift_retain();
  v28 = _IncrementalLayout_PlacedChild.size.getter();
  v30 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v29, *(unint64_t *)&v28));
  v40 = v19;
  v41 = v21;
  v42 = v22;
  v43 = v23;
  v44 = v24;
  v45 = v25;
  v46 = v26;
  v47 = v27;
  v31 = _IncrementalLayout_PlacedChild.size.getter();
  v33 = v32;
  swift_release();
  v58.origin.x = v30.x;
  v58.origin.y = v30.y;
  v58.size.width = v31;
  v58.size.height = v33;
  CGRectInset(v58, -a4, -a5);
  v39 = __PAIR64__(HIDWORD(v20), v38);
  MEMORY[0x1E0C80A78](v34, v35);
  v36 = specialized IncrementalScrollable.bestIndex(target:border:fromIndex:ignoredViews:distance:)(v13, 0, (int *)&v39, (uint64_t (*)(__n128, __n128, __n128, __n128))partial apply for closure #1 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:), a4, a5);
  if ((v37 & 1) != 0)
    goto LABEL_12;
  v39 = v36;
  closure #2 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(&v39);
  return swift_release();
}

uint64_t closure #1 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10)
{
  CGFloat v18;
  CGFloat v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double MidX;
  double v34;
  uint64_t result;
  CGFloat rect;
  CGFloat rect_16;
  double rect_24;
  CGRect v39;
  CGRect v40;

  v18 = a7;
  v20 = a3;
  v21 = a1;
  v22 = a10;
  if (a10 == 0.0)
  {
    v22 = a9;
    v23 = a3;
    v20 = a4;
    v24 = a1;
    v21 = a2;
    v25 = a7;
    v18 = a8;
    v26 = a5;
    a5 = a6;
  }
  else
  {
    v23 = a4;
    v24 = a2;
    v25 = a8;
    v26 = a6;
    if (a9 != 0.0)
      return 0;
  }
  rect_16 = v25;
  rect_24 = v22;
  rect = v26;
  CGRect.subscript.getter();
  v28 = v27;
  v30 = v29;
  result = CGRect.subscript.getter();
  if (v28 > v31)
    v31 = v28;
  if (v32 >= v30)
    v32 = v30;
  if (v31 >= v32)
    return 0;
  if (v31 > v32)
  {
    __break(1u);
  }
  else
  {
    v39.origin.x = v24;
    v39.origin.y = v21;
    v39.size.width = v23;
    v39.size.height = v20;
    MidX = CGRectGetMidX(v39);
    v40.origin.x = rect;
    v40.origin.y = a5;
    v40.size.width = rect_16;
    v40.size.height = v18;
    v34 = MidX - CGRectGetMidX(v40);
    if (rect_24 < 0.0)
      v34 = -v34;
    if (v34 < 0.0)
      return 0;
    return *(_QWORD *)&v34;
  }
  return result;
}

uint64_t closure #2 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(unint64_t *a1)
{
  unint64_t v1;
  uint64_t result;

  v1 = *a1;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  result = AGGraphGetValue();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v1 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    return _ViewList_ID.canonicalID.getter();
  }
  __break(1u);
  return result;
}

uint64_t IncrementalScrollable.applyCollectionViewIDs(from:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BYTE v6[88];
  uint64_t v7;
  _BYTE v8[16];
  _QWORD v9[13];

  if (!swift_weakLoadStrong())
    goto LABEL_5;
  if (!AGSubgraphIsValid())
  {
    swift_release();
LABEL_5:
    v4 = 1;
    return v4 & 1;
  }
  v0 = IncrementalLayoutViewCache.children(context:)(*MEMORY[0x1E0CFED28], (uint64_t)v8);
  MEMORY[0x1E0C80A78](v0, v1);
  v7 = v9[11];
  v2 = outlined init with copy of _ViewList_Node((uint64_t)v9, (uint64_t)v6);
  MEMORY[0x1E0C80A78](v2, v3);
  swift_bridgeObjectRetain();
  v4 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v8);
  return v4 & 1;
}

uint64_t closure #1 in IncrementalScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  _QWORD v6[4];

  _ViewList_ID.canonicalID.getter();
  v6[0] = v6[2];
  v6[1] = v6[3];
  a3(v6, a2);
  return swift_release();
}

uint64_t IncrementalScrollable.collectionViewID(for:)@<X0>(__int128 *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;

  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_6;
  if (!AGSubgraphIsValid() || !IncrementalLayoutViewCache.item(for:)())
  {
    result = swift_release();
LABEL_6:
    v3 = xmmword_187BF9840;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_release();
  _ViewList_ID.canonicalID.getter();
  swift_bridgeObjectRelease();
  result = swift_release();
  v3 = v4;
LABEL_7:
  *a1 = v3;
  return result;
}

uint64_t IncrementalScrollable.firstCollectionViewIndex(of:)()
{
  uint64_t v0;
  _BYTE v2[120];

  if (!swift_weakLoadStrong())
    return 0;
  if (!AGSubgraphIsValid())
  {
    swift_release();
    return 0;
  }
  IncrementalLayoutViewCache.children(context:)(*MEMORY[0x1E0CFED28], (uint64_t)v2);
  v0 = _IncrementalLayout_Children.firstIndex(of:style:)();
  swift_release();
  outlined destroy of _IncrementalLayout_Children((uint64_t)v2);
  return v0;
}

uint64_t IncrementalScrollable.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  char v10;
  double (*v11)@<D0>(uint64_t@<X8>);
  uint64_t v12;
  char v13;
  _BYTE v15[120];

  if (swift_weakLoadStrong())
  {
    if (AGSubgraphIsValid())
    {
      IncrementalLayoutViewCache.children(context:)(*MEMORY[0x1E0CFED28], (uint64_t)v15);
      v9 = _IncrementalLayout_Children.firstIndex(of:style:)();
      if ((v10 & 1) == 0)
      {
        v11 = IncrementalScrollable.makeTarget(at:anchor:)(v9, a2, a3, a4 & 1, a5);
        if (v11)
        {
          v12 = (uint64_t)v11;
          MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalScrollable<A>, a5);
          v13 = ScrollableContainer.setParentTarget(_:)();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
          swift_release();
          outlined destroy of _IncrementalLayout_Children((uint64_t)v15);
          return v13 & 1;
        }
      }
      outlined destroy of _IncrementalLayout_Children((uint64_t)v15);
    }
    swift_release();
  }
  return 0;
}

uint64_t static IncrementalScrollable.accessibilityRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

double (*protocol witness for ScrollableContainer.makeTarget<A>(for:) in conformance IncrementalScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<D0>(uint64_t a1@<X8>)
{
  return IncrementalScrollable.makeTarget<A>(for:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance IncrementalScrollable<A>(char a1, uint64_t a2)
{
  return static IncrementalScrollable.hasMultipleViewsInAxis(_:)(a1 & 1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance IncrementalScrollable<A>()
{
  return IncrementalScrollable.firstCollectionViewIndex(of:)();
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance IncrementalScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return IncrementalScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1, a5);
}

uint64_t protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance IncrementalScrollable<A>(uint64_t a1)
{
  return static IncrementalScrollable.accessibilityRole.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance IncrementalScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalScrollable<A>, a3);
  return ScrollableContainer.setContentTarget(_:)();
}

BOOL protocol witness for Scrollable.adjustContentOffset(by:) in conformance IncrementalScrollable<A>(uint64_t a1, double a2, double a3)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalScrollable<A>, a1);
  return ScrollableContainer.adjustContentOffset(by:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance IncrementalScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for IncrementalScrollable<A>, a6);
  return ScrollableContainer.mapFirstChild<A, B>(ofType:body:)();
}

uint64_t IncrementalChildPrefetcher.Phase.description.getter(uint64_t a1, char a2)
{
  Swift::String v3;

  if (a2)
  {
    if (a2 == 1)
      return 0x6863746566657270;
    else
      return 0x6574656C706D6F63;
  }
  else
  {
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0x77656956656B616DLL;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IncrementalChildPrefetcher<A>.Phase()
{
  uint64_t v0;

  return IncrementalChildPrefetcher.Phase.description.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

Swift::Void __swiftcall IncrementalChildPrefetcher.updateValue()()
{
  uint64_t v0;
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v3 = v0;
  v4 = *v1;
  v5 = *((_QWORD *)v1 + 4);
  Value = AGGraphGetValue();
  v7 = *(_QWORD *)Value;
  if (v5 != *(_QWORD *)Value)
  {
    v8 = *(_QWORD *)(Value + 8);
    v9 = *(unsigned __int8 *)(Value + 16);
    *((_QWORD *)v1 + 4) = v7;
    type metadata accessor for IncrementalLayoutViewCache();
    if ((*(_BYTE *)(*(_QWORD *)AGGraphGetValue() + 216) & v9) != 0)
    {
      lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
        goto LABEL_9;
      if (one-time initialization token for log != -1)
        goto LABEL_18;
      while (1)
      {
        v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v11 = Logger.logObject.getter();
        v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = swift_slowAlloc();
          v33 = swift_slowAlloc();
          v36 = v33;
          *(_DWORD *)v13 = 136446466;
          v34 = v4;
          v14 = *(_QWORD *)(v3 + 16);
          v15 = _typeName(_:qualified:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v13 + 12) = 2082;
          v17 = MEMORY[0x18D754CF0](v34, v14);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v4 = v34;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v11, v12, "%{public}s %{public}s start prefetch", (uint8_t *)v13, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v33, -1, -1);
          MEMORY[0x18D760108](v13, -1, -1);
        }

LABEL_9:
        if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E0CFED28])
          break;
        __break(1u);
LABEL_18:
        swift_once();
      }
      v19 = (id)AGGraphGetAttributeGraph();
      AGGraphGetDeadline();
      AGGraphSetDeadline();
      v20 = *(_QWORD *)(v3 + 16);
      closure #1 in IncrementalChildPrefetcher.updateValue()((__int128 *)v2, v7, v8, v9, v20, *(_QWORD *)(v3 + 24));
      AGGraphSetDeadline();

      v21 = *((_QWORD *)v2 + 6);
      v22 = *((_BYTE *)v2 + 56);
      if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0)
      {
        if (one-time initialization token for log != -1)
          swift_once();
        v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Log.LazyLayoutPrefetch.log);
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc();
          v35 = swift_slowAlloc();
          v36 = v35;
          *(_DWORD *)v26 = 136446722;
          v27 = _typeName(_:qualified:)();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 12) = 2082;
          v29 = MEMORY[0x18D754CF0](v4, v20);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 22) = 2082;
          v31 = IncrementalChildPrefetcher.Phase.description.getter(v21, v22);
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_186E48000, v24, v25, "%{public}s %{public}s end prefetch, phase=%{public}s", (uint8_t *)v26, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x18D760108](v35, -1, -1);
          MEMORY[0x18D760108](v26, -1, -1);
        }

      }
    }
  }
}

uint64_t closure #1 in IncrementalChildPrefetcher.updateValue()(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  char v19;
  _QWORD v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;

  v6 = a4;
  v10 = *((_DWORD *)a1 + 10);
  v11 = type metadata accessor for IncrementalChildPrefetcher(0, a5, a6, a4);
  type metadata accessor for IncrementalLayoutViewCache();
  result = AGGraphGetValue();
  v13 = *(_DWORD *)(*(_QWORD *)result + 212);
  if (v10 == v13)
  {
    v14 = *((unsigned __int8 *)a1 + 56);
    if (v14 > 1)
      return result;
    v15 = *((_QWORD *)a1 + 6);
  }
  else
  {
    LOBYTE(v14) = 0;
    v15 = 0;
    *((_DWORD *)a1 + 10) = v13;
    *((_QWORD *)a1 + 6) = 0;
    *((_BYTE *)a1 + 56) = 0;
  }
  do
  {
    v16 = *((_QWORD *)a1 + 4);
    v17 = *((_DWORD *)a1 + 10);
    v18 = a1[1];
    v22 = *a1;
    v23 = v18;
    v24 = v16;
    v25 = v17;
    v26 = v15;
    v27 = v14;
    v20[0] = a2;
    v20[1] = a3;
    v21 = v6;
    result = IncrementalChildPrefetcher.step(info:)((uint64_t)v20, v11);
    *((_QWORD *)a1 + 6) = result;
    *((_BYTE *)a1 + 56) = v19;
    if (!v19)
      break;
    result = AGGraphHasDeadlinePassed();
    if ((result & 1) != 0)
      break;
    v15 = *((_QWORD *)a1 + 6);
    v14 = *((unsigned __int8 *)a1 + 56);
  }
  while (v14 < 2);
  return result;
}

uint64_t IncrementalChildPrefetcher.step(info:)(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v20;
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  _BYTE v25[25];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)&v25[9] = *(_OWORD *)((char *)v2 + 41);
  v5 = v2[1];
  v24[0] = *v2;
  v24[1] = v5;
  *(_OWORD *)v25 = v2[2];
  v6 = *(_QWORD *)&v25[16];
  if (v25[24])
  {
    if (v25[24] == 1)
    {
      type metadata accessor for IncrementalLayoutViewCache();
      AGGraphGetValue();
      swift_retain();
      v7 = IncrementalLayoutViewCache.prefetchOutputs()();
      swift_release();
      if (!v7)
        return v7;
    }
  }
  else
  {
    v8 = v24[0];
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0)
      goto LABEL_12;
    if (one-time initialization token for log != -1)
      goto LABEL_21;
    while (1)
    {
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutPrefetch.log);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        type = v11;
        v12 = swift_slowAlloc();
        v22 = swift_slowAlloc();
        v23 = v22;
        *(_DWORD *)v12 = 136446722;
        v20 = v8;
        v13 = *(_QWORD *)(a2 + 16);
        v14 = _typeName(_:qualified:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2082;
        v16 = MEMORY[0x18D754CF0](v20, v13);
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 22) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v8 = v10;
        _os_log_impl(&dword_186E48000, v10, type, "%{public}s %{public}s making item %ld", (uint8_t *)v12, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x18D760108](v22, -1, -1);
        MEMORY[0x18D760108](v12, -1, -1);
      }

LABEL_12:
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x1E0CFED28])
        break;
      __break(1u);
LABEL_21:
      swift_once();
    }
    AGGraphClearUpdate();
    closure #1 in IncrementalChildPrefetcher.step(info:)((uint64_t)v24, v4, v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), &v23);
    AGGraphSetUpdate();
    if (v23 == 1)
      v18 = v6;
    else
      v18 = v6 + 1;
    if ((_BYTE)v23)
      return v18;
    else
      return 0;
  }
  return v6;
}

uint64_t closure #1 in IncrementalChildPrefetcher.step(info:)@<X0>(uint64_t a1@<X1>, unsigned int a2@<W4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *Value;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  __int128 v37;
  int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD v45[38];
  __int128 v46[7];
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD v52[39];

  v43 = a3;
  v44 = a6;
  v42 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v40 = AssociatedTypeWitness;
  v41 = v10;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v11);
  v39 = (char *)&v35 - v12;
  v13 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *MEMORY[0x1E0CFED28];
  v18 = *(_DWORD *)(a1 + 28);
  LOBYTE(v52[0]) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  v49 = v52[0];
  v50 = v52[1];
  v51 = v18;
  v20 = type metadata accessor for IncrementalChildPrefetcher(0, a4, a5, v19);
  v48 = *(_OWORD *)AGGraphGetValue();
  Value = (__int128 *)AGGraphGetValue();
  v22 = Value[1];
  v46[0] = *Value;
  v46[1] = v22;
  v23 = AGGraphGetValue();
  v24 = *(_QWORD *)v23;
  v37 = *(_OWORD *)(v23 + 8);
  v25 = *(_QWORD *)(v23 + 24);
  v26 = *(_QWORD *)(v23 + 32);
  swift_retain();
  v45[0] = v24;
  *(_OWORD *)&v45[1] = v37;
  v45[3] = v25;
  v45[4] = v26;
  type metadata accessor for IncrementalLayoutViewCache();
  AGGraphGetValue();
  HIBYTE(v47) = *(_BYTE *)AGGraphGetValue();
  v27 = *(_QWORD *)(v20 + 16);
  v28 = AGGraphGetValue();
  v36 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v36(v17, v28, v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 120))(&v47, a4, a5);
  *(_QWORD *)&v37 = *(_QWORD *)(v13 + 8);
  ((void (*)(char *, uint64_t))v37)(v17, a4);
  AGGraphGetValue();
  v29 = (char *)AGGraphGetValue();
  _IncrementalLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v49, v46, (uint64_t)v45, (char *)&v47 + 7, (int *)&v47, *v29, (uint64_t)v52);
  AGGraphGetValue();
  swift_retain();
  IncrementalLayoutViewCache.children(context:)(v38, (uint64_t)v46);
  swift_release();
  v30 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)AGGraphGetValue() + 280);
  swift_retain();
  v31 = v39;
  v32 = v40;
  v30(v40, v40);
  swift_release();
  v33 = AGGraphGetValue();
  v36(v17, v33, v27);
  memcpy(v45, v52, 0x129uLL);
  LOBYTE(v20) = (*(uint64_t (**)(__int128 *, _QWORD, _QWORD *, char *, uint64_t, uint64_t, uint64_t))(a5 + 64))(v46, v42, v45, v31, v43, a4, a5);
  ((void (*)(char *, uint64_t))v37)(v17, a4);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v32);
  result = outlined destroy of _IncrementalLayout_Children((uint64_t)v46);
  *v44 = v20;
  return result;
}

uint64_t specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  a4(&v7);
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t specialized IncrementalScrollable.bestIndex(target:border:fromIndex:ignoredViews:distance:)(uint64_t a1, char a2, int *a3, uint64_t (*a4)(__n128, __n128, __n128, __n128), double a5, double a6)
{
  int v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  CGPoint v26;
  double x;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  int v32;
  double v33;
  double v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t (*v40)(__n128, __n128, __n128, __n128);
  unint64_t v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v11 = *a3;
  result = swift_weakLoadStrong();
  if (result)
  {
    if (AGSubgraphIsValid())
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v13 = *(_QWORD *)(*(_QWORD *)AGGraphGetValue() + 16);
      if (v13)
      {
        v41 = 0;
        v14 = 0;
        v15 = -a5;
        v16 = -a6;
        v17 = INFINITY;
        v18 = 88;
        v40 = a4;
        v39 = a2;
        v38 = a1;
        v37 = v11;
        while (1)
        {
          if ((a2 & 1) != 0 || a1 != v14)
          {
            result = AGGraphGetValue();
            if (v14 >= *(_QWORD *)(*(_QWORD *)result + 16))
            {
              __break(1u);
              return result;
            }
            v19 = *(_QWORD *)(*(_QWORD *)result + v18 - 56);
            if ((*(_BYTE *)(v19 + 165) != 1 || (v11 & 1) == 0) && (*(_BYTE *)(v19 + 166) != 1 || (v11 & 2) == 0))
            {
              swift_retain_n();
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                AGGraphGetValue();
                swift_retain();
              }
              LayoutComputer.sizeThatFits(_:)();
              v23 = v22;
              v25 = v24;
              swift_release();
              v26 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v25, v23));
              x = v26.x;
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                AGGraphGetValue();
                swift_retain();
              }
              LayoutComputer.sizeThatFits(_:)();
              v29 = v28;
              v31 = v30;
              swift_release_n();
              swift_release();
              v32 = *(unsigned __int8 *)AGGraphGetValue();
              _ViewInputs.size.getter();
              AGGraphGetValue();
              MEMORY[0x18D75BE3C]();
              if (v32 == 1)
              {
                v34 = v33;
                v42.origin.x = v26.x;
                v42.origin.y = v26.y;
                v42.size.width = v29;
                v42.size.height = v31;
                x = v34 - CGRectGetMaxX(v42);
              }
              a2 = v39;
              a1 = v38;
              LOBYTE(v11) = v37;
              v43.origin.x = x;
              v43.origin.y = v26.y;
              v43.size.width = v29;
              v43.size.height = v31;
              v44 = CGRectInset(v43, v15, v16);
              v35 = v40((__n128)v44.origin, *(__n128 *)&v44.origin.y, (__n128)v44.size, *(__n128 *)&v44.size.height);
              if ((v36 & 1) == 0 && COERCE_DOUBLE(v35 & 0x7FFFFFFFFFFFFFFFLL) < v17)
              {
                *(_QWORD *)&v17 = v35 & 0x7FFFFFFFFFFFFFFFLL;
                v41 = v14;
              }
            }
          }
          ++v14;
          v18 += 72;
          if (v13 == v14)
            goto LABEL_6;
        }
      }
    }
    v41 = 0;
LABEL_6:
    swift_release();
    return v41;
  }
  return result;
}

_DWORD *assignWithCopy for IncrementalScrollable(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_weakCopyAssign();
  return a1;
}

_OWORD *initializeWithTake for IncrementalScrollable(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakTakeInit();
  return a1;
}

_OWORD *assignWithTake for IncrementalScrollable(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakTakeAssign();
  return a1;
}

void base witness table accessor for _AttributeBody in IncrementalChildPrefetcher<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

void base witness table accessor for Scrollable in IncrementalScrollable<A>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187AD8D84()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_187AD8DA8()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for closure #1 in IncrementalScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in IncrementalScrollable.makeTarget(at:anchor:)(*(_QWORD *)(v1 + 40), a1);
}

CGFloat partial apply for closure #1 in closure #1 in IncrementalScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in IncrementalScrollable.makeTarget(at:anchor:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

uint64_t partial apply for closure #1 in IncrementalScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in IncrementalScrollable.applyCollectionViewIDs(from:to:)(a1, a2, *(void (**)(_QWORD *, uint64_t))(v2 + 16));
}

uint64_t partial apply for closure #1 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat *v4;

  return closure #1 in IncrementalScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t partial apply for closure #1 in IncrementalScrollable.makeTarget<A>(for:)@<X0>(const void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in IncrementalScrollable.makeTarget<A>(for:)(a1, *(uint64_t **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for IncrementalChildPrefetcher.Phase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IncrementalChildPrefetcher.Phase);
}

ValueMetadata *type metadata accessor for ListBadgedViewStyle()
{
  return &type metadata for ListBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in ListBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *ListBadgedViewStyle.makeBody(configuration:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD v6[8];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  static VerticalAlignment.center.getter();
  closure #1 in ListBadgedViewStyle.makeBody(configuration:)(v1, v2, v3, v4, (uint64_t)v6);
  v14 = v6[6];
  v13 = v6[5];
  v10 = v6[2];
  v9 = v6[1];
  v15 = v6[7];
  v16 = v7;
  v11 = v6[3];
  v12 = v6[4];
  v8 = v6[0];
  v17 = 0;
  Spacing.init()();
  type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, MEMORY[0x1E0CE73D0]);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined release of TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(v6);
}

uint64_t closure #1 in ListBadgedViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;

  if (a3 >> 1 == 0xFFFFFFFF)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v23 = 0;
    KeyPath = 0;
    v21 = 0;
    v22 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0x1FFFFFFFELL;
  }
  else
  {
    v13 = a1;
    v15 = a3;
    v16 = a2;
    KeyPath = swift_getKeyPath();
    v23 = swift_getKeyPath();
    v22 = swift_getKeyPath();
    v21 = swift_getKeyPath();
    v17 = swift_getKeyPath();
    a2 = v16;
    a3 = v15;
    v18 = a4;
    v9 = v17;
    a1 = v13;
    v11 = 0x4024000000000000;
    v10 = 0x3FF0000000000000;
    v6 = v13;
    v7 = v16;
    v12 = v15;
    v8 = v18;
  }
  *(_QWORD *)a5 = v11;
  *(_BYTE *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = v6;
  *(_QWORD *)(a5 + 24) = v7;
  *(_QWORD *)(a5 + 32) = v12;
  *(_QWORD *)(a5 + 40) = v8;
  *(_QWORD *)(a5 + 48) = KeyPath;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = v23;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 80) = v22;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = v21;
  *(_QWORD *)(a5 + 104) = 0;
  *(_QWORD *)(a5 + 112) = v9;
  *(_QWORD *)(a5 + 120) = 0;
  *(_QWORD *)(a5 + 128) = v10;
  v19 = v6;
  outlined copy of BadgeLabel?(a1, a2, a3);
  outlined copy of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(v19, v7, v12, v8, KeyPath, 0, v23, 0, v22, 0, v21, 0, v9, 0);
  return outlined consume of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(v19, v7, v12, v8, KeyPath, 0, v23, 0, v22, 0, v21, 0, v9, 0);
}

void type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    lazy protocol witness table accessor for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>();
    v0 = type metadata accessor for HStack();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
  }
}

void type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!lazy cache variable for type metadata for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?))
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?));
  }
}

void type metadata accessor for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for Badge<BadgeLabel>(255);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E0CE5460], MEMORY[0x1E0CE5450], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CE52D0]);
    v0 = type metadata accessor for ModifiedContent();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
  }
}

void type metadata accessor for Badge<BadgeLabel>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!lazy cache variable for type metadata for Badge<BadgeLabel>)
  {
    v2 = lazy protocol witness table accessor for type BadgeLabel and conformance BadgeLabel();
    v4 = type metadata accessor for Badge(a1, (uint64_t)&type metadata for BadgeLabel, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&lazy cache variable for type metadata for Badge<BadgeLabel>);
  }
}

uint64_t type metadata accessor for Badge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Badge);
}

unint64_t lazy protocol witness table accessor for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, &lazy cache variable for type metadata for TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE7EA0]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE7EB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>);
  }
  return result;
}

_QWORD *outlined release of TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(_QWORD *a1)
{
  outlined consume of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t outlined consume of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  char v16;
  char v17;

  if (a3 >> 1 != 0xFFFFFFFF)
  {
    v16 = a6 & 1;
    v17 = a8 & 1;
    outlined consume of BadgeLabel(result, a2, a3);
    outlined consume of Environment<Bool>.Content(a5, v16);
    outlined consume of Environment<Bool>.Content(a7, v17);
    outlined consume of Environment<Bool>.Content(a9, a10 & 1);
    outlined consume of Environment<Bool>.Content(a11, a12 & 1);
    return outlined consume of Environment<Bool>.Content(a13, a14 & 1);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  char v16;
  char v17;

  if (a3 >> 1 != 0xFFFFFFFF)
  {
    v16 = a6 & 1;
    v17 = a8 & 1;
    outlined copy of BadgeLabel(result, a2, a3);
    outlined copy of Environment<Bool>.Content(a5, v16);
    outlined copy of Environment<Bool>.Content(a7, v17);
    outlined copy of Environment<Bool>.Content(a9, a10 & 1);
    outlined copy of Environment<Bool>.Content(a11, a12 & 1);
    return outlined copy of Environment<Bool>.Content(a13, a14 & 1);
  }
  return result;
}

uint64_t Badge.style.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;

  v2 = v1 + *(int *)(a1 + 36);
  v3 = *(_QWORD *)v2;
  v4 = *(_BYTE *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v2, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v7);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v7 == 2)
  {
    outlined copy of Environment<Bool>.Content(v3, v4);
    specialized Environment.wrappedValue.getter(v3, v4, &v7);
    outlined consume of Environment<Bool>.Content(v3, v4);
    if (v7 == 2)
    {
      v7 = static Color.white.getter();
      AnyShapeStyle.init<A>(_:)();
      v7 = static Color.red.getter();
    }
    else
    {
      LODWORD(v7) = 1;
      AnyShapeStyle.init<A>(_:)();
      LODWORD(v7) = 4;
    }
    AnyShapeStyle.init<A>(_:)();
    return static Font.body.getter();
  }
  else
  {
    v5 = static Font.body.getter();
    LODWORD(v7) = 1;
    AnyShapeStyle.init<A>(_:)();
  }
  return v5;
}

uint64_t Badge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];
  _QWORD v94[2];
  uint64_t v95;

  v83 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t))type metadata accessor for Font?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v84 = v4;
  v5 = type metadata accessor for ModifiedContent();
  v67 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v63 - v7;
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE5D58]);
  v9 = type metadata accessor for ModifiedContent();
  v68 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v63 - v11;
  v13 = type metadata accessor for ModifiedContent();
  v70 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v69 = (char *)&v63 - v15;
  v16 = type metadata accessor for ModifiedContent();
  v72 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v16);
  v71 = (char *)&v63 - v17;
  v65 = v18;
  v19 = type metadata accessor for ModifiedContent();
  v74 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v73 = (char *)&v63 - v21;
  type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>();
  v75 = v19;
  v22 = type metadata accessor for ModifiedContent();
  v80 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v22);
  v79 = (char *)&v63 - v23;
  v81 = v24;
  v82 = type metadata accessor for ModifiedContent();
  v78 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82, v25);
  v76 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v77 = (char *)&v63 - v29;
  v30 = Badge.style.getter(a1);
  v85 = v31;
  v86 = v30;
  v33 = v32;
  v34 = *(_QWORD *)(a1 + 24);
  v66 = v32 == 0;
  if (v32)
  {
    v95 = 0x4038000000000000;
    closure #1 in Badge.body.getter((double *)&v95, v2, v84, v34, (double *)&v87);
    v64 = v87;
  }
  else
  {
    v64 = 0;
  }
  View.font(_:)();
  v95 = v85;
  v35 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
  v94[0] = v34;
  v94[1] = v35;
  v36 = MEMORY[0x1E0CE2E70];
  v37 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v94);
  View.foregroundStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v8, v5);
  static Edge.Set.horizontal.getter();
  v38 = lazy protocol witness table accessor for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>();
  v93[0] = v37;
  v93[1] = v38;
  v39 = MEMORY[0x18D75FFDC](v36, v9, v93);
  v40 = v69;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v12, v9);
  static Alignment.center.getter();
  v92[0] = v39;
  v92[1] = MEMORY[0x1E0CE2BC0];
  v62 = MEMORY[0x18D75FFDC](v36, v13, v92);
  v41 = v71;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v13);
  static Alignment.center.getter();
  v91[0] = v62;
  v91[1] = MEMORY[0x1E0CE35E0];
  v42 = v65;
  v43 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v65, v91);
  v44 = v73;
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v42);
  if (v33)
  {
    v45 = v33;
  }
  else
  {
    v95 = static Color.clear.getter();
    v45 = AnyShapeStyle.init<A>(_:)();
  }
  v95 = v45;
  LOBYTE(v87) = 1;
  v90[0] = v43;
  v90[1] = MEMORY[0x1E0CE1A80];
  swift_retain();
  v46 = MEMORY[0x1E0CE2E70];
  v47 = v75;
  v48 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v75, v90);
  lazy protocol witness table accessor for type Capsule and conformance Capsule();
  v49 = v79;
  View.background<A, B>(_:in:fillStyle:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v47);
  v50 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>, MEMORY[0x1E0CE6778]);
  v89[0] = v48;
  v89[1] = v50;
  v51 = v81;
  v52 = MEMORY[0x18D75FFDC](v46, v81, v89);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v51);
  v54 = type metadata accessor for AccessibilityBadgedViewModifier.Badge(0, v51, v52, v53);
  v55 = MEMORY[0x18D75FFDC]("X7\t", v54);
  v88[0] = v52;
  v88[1] = &protocol witness table for AccessibilityAttachmentModifier;
  v56 = v82;
  v57 = MEMORY[0x18D75FFDC](v46, v82, v88);
  v58 = v76;
  View.accessibilityConfiguration<A>(_:)(v57, v51, v54, v52, v55);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v49, v51);
  v59 = (uint64_t)v77;
  static ViewBuilder.buildExpression<A>(_:)(v58, v56, v57);
  v60 = *(void (**)(char *, uint64_t))(v78 + 8);
  v60(v58, v56);
  static ViewBuilder.buildBlock<A>(_:)(v59, v56, v83);
  return ((uint64_t (*)(uint64_t, uint64_t))v60)(v59, v56);
}

uint64_t closure #1 in Badge.body.getter@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t result;
  uint64_t v26;
  double v27;
  char v28;
  char v29;

  v10 = type metadata accessor for FloatingPointRoundingRule();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v29 = 6;
  v17 = type metadata accessor for Badge(0, a3, a4, v16);
  v18 = a2 + *(int *)(v17 + 48);
  v19 = *(_QWORD *)v18;
  LOBYTE(a1) = *(_BYTE *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v18, (char)a1);
  specialized Environment.wrappedValue.getter(v19, (char)a1, &v28);
  outlined consume of Environment<Bool>.Content(v19, (char)a1);
  v20 = v15 * MEMORY[0x18D75AD8C](&v29, &v28);
  v21 = a2 + *(int *)(v17 + 52);
  v22 = *(_QWORD *)v21;
  LOBYTE(v17) = *(_BYTE *)(v21 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v17);
  v23 = specialized Environment.wrappedValue.getter(v22, v17);
  outlined consume of Environment<Bool>.Content(v22, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E0DED4F0], v10);
  v27 = v20;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, v23);
  v24 = v27;
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  *a5 = v24;
  return result;
}

uint64_t sub_187AD9FF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.appearsActive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187ADA034()
{
  return EnvironmentValues.appearsActive.setter();
}

uint64_t type metadata completion function for Badge()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Badge(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 71) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (char *)v4 + v6;
    v11 = (char *)a2 + v6;
    v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = *(_QWORD *)v13;
    v15 = *(_BYTE *)(v13 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v13, v15);
    *(_QWORD *)v12 = v14;
    *(_BYTE *)(v12 + 8) = v15;
    v16 = (unint64_t)(v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = (unint64_t)(v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 8) = v19;
    v20 = (unint64_t)(v10 + 39) & 0xFFFFFFFFFFFFFFF8;
    v21 = (unint64_t)(v11 + 39) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v21, v23);
    *(_QWORD *)v20 = v22;
    *(_BYTE *)(v20 + 8) = v23;
    v24 = (unint64_t)(v10 + 55) & 0xFFFFFFFFFFFFFFF8;
    v25 = (unint64_t)(v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    *(_BYTE *)(v24 + 8) = v27;
    v28 = (unint64_t)(v10 + 71) & 0xFFFFFFFFFFFFFFF8;
    v29 = (unint64_t)(v11 + 71) & 0xFFFFFFFFFFFFFFF8;
    v30 = *(_QWORD *)v29;
    v31 = *(_BYTE *)(v29 + 8);
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v29, v31);
    *(_QWORD *)v28 = v30;
    *(_BYTE *)(v28 + 8) = v31;
  }
  return v4;
}

uint64_t destroy for Badge(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64) + a1;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 23) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
  outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 55) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 8));
  return outlined consume of Environment<Bool>.Content(*(_QWORD *)((v4 + 71) & 0xFFFFFFFFFFFFFFF8), *(_BYTE *)(((v4 + 71) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t initializeWithCopy for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v5);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  LOBYTE(v5) = *(_BYTE *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v13, v5);
  *(_QWORD *)v12 = v14;
  *(_BYTE *)(v12 + 8) = v5;
  v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  LOBYTE(v5) = *(_BYTE *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v16, v5);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = v5;
  v18 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_QWORD *)v19;
  LOBYTE(v5) = *(_BYTE *)(v19 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v19, v5);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = v5;
  v21 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)v22;
  LOBYTE(v5) = *(_BYTE *)(v22 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v22, v5);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v5) = *(_BYTE *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v10, v5);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v5) = *(_BYTE *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v15, v5);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v5) = *(_BYTE *)(v20 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v20, v5);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  LOBYTE(v5) = *(_BYTE *)(v25 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v25, v5);
  v27 = *(_QWORD *)v24;
  v28 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v27, v28);
  v29 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  LOBYTE(v5) = *(_BYTE *)(v30 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v30, v5);
  v32 = *(_QWORD *)v29;
  v33 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t initializeWithTake for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = v11;
  v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = v14;
  v15 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v14;
  v17 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v14;
  v19 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v17) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v17;
  return a1;
}

uint64_t assignWithTake for Badge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = v6 + a1;
  v8 = v6 + a2;
  v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = *(_BYTE *)(v10 + 8);
  v12 = *(_QWORD *)v9;
  v13 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v9 = v11;
  *(_BYTE *)(v9 + 8) = v10;
  outlined consume of Environment<Bool>.Content(v12, v13);
  v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = *(_BYTE *)(v15 + 8);
  v17 = *(_QWORD *)v14;
  v18 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(v14 + 8) = v15;
  outlined consume of Environment<Bool>.Content(v17, v18);
  v19 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_QWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 8);
  v22 = *(_QWORD *)v19;
  v23 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(v19 + 8) = v20;
  outlined consume of Environment<Bool>.Content(v22, v23);
  v24 = (v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 8);
  v27 = *(_QWORD *)v24;
  v28 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = v25;
  outlined consume of Environment<Bool>.Content(v27, v28);
  v29 = (v7 + 71) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v8 + 71) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  LOBYTE(v30) = *(_BYTE *)(v30 + 8);
  v32 = *(_QWORD *)v29;
  v33 = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v29 = v31;
  *(_BYTE *)(v29 + 8) = v30;
  outlined consume of Environment<Bool>.Content(v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for Badge(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xFE)
    {
      v14 = *(unsigned __int8 *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v14 > 1)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    v8 = ((v7 + 71) & 0xFFFFFFF8) + 9;
    v9 = (a2 - v6 + 255) >> (8 * v8);
    if (v8 < 4)
      v10 = v9 + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187ADA818 + 4 * byte_187C8BB50[v12]))();
  }
}

void storeEnumTagSinglePayload for Badge(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + 71) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v6 >= a3)
  {
    v10 = 0u;
    if (v6 >= a2)
      goto LABEL_17;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (v6 >= a2)
LABEL_17:
      __asm { BR              X12 }
  }
  if (v7 >= 4)
    v11 = ~v6 + a2;
  else
    v11 = (~(_BYTE)v6 + a2);
  bzero(a1, v7);
  if ((_DWORD)v7 == 1)
    *a1 = v11;
  else
    *(_DWORD *)a1 = v11;
  __asm { BR              X10 }
}

void sub_187ADA9C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187ADAA3CLL);
}

void sub_187ADA9C8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187ADA9D0);
  JUMPOUT(0x187ADAA3CLL);
}

void sub_187ADAA14()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187ADAA3CLL);
}

void sub_187ADAA1C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187ADAA3CLL);
}

uint64_t sub_187ADAA24(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xFE)
  {
    if (a2 > 0xFE)
      JUMPOUT(0x187ADAA30);
    *(_BYTE *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
LABEL_6:
    JUMPOUT(0x187ADAA3CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t sub_187ADAA54()
{
  type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(BadgeViewStyleConfiguration.Content, Spacer, ModifiedContent<Badge<BadgeLabel>, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, MEMORY[0x1E0CE73D0]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in Badge<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    v0 = type metadata accessor for _InsettableBackgroundShapeModifier();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>);
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE5D58]);
    result = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5D68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>);
  }
  return result;
}

uint64_t sub_187ADAC10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v1 = *(_QWORD *)(a1 + 8);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t))type metadata accessor for Font?, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE65A8]);
  v2 = type metadata accessor for ModifiedContent();
  type metadata accessor for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>(255, &lazy cache variable for type metadata for _ForegroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E0CE1D58], MEMORY[0x1E0CE1D48], MEMORY[0x1E0CE5D58]);
  v3 = type metadata accessor for ModifiedContent();
  v4 = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>();
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v17[0] = v1;
  v17[1] = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>();
  v9 = MEMORY[0x1E0CE2E70];
  v16[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v2, v17);
  v16[1] = lazy protocol witness table accessor for type _ForegroundStyleModifier<AnyShapeStyle> and conformance _ForegroundStyleModifier<A>();
  v15[0] = MEMORY[0x18D75FFDC](v9, v3, v16);
  v15[1] = MEMORY[0x1E0CE2BC0];
  v14[0] = MEMORY[0x18D75FFDC](v9, v4, v15);
  v14[1] = MEMORY[0x1E0CE35E0];
  v13[0] = MEMORY[0x18D75FFDC](v9, v5, v14);
  v13[1] = MEMORY[0x1E0CE1A80];
  v12[0] = MEMORY[0x18D75FFDC](v9, v6, v13);
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule> and conformance _InsettableBackgroundShapeModifier<A, B>, (uint64_t (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<AnyShapeStyle, Capsule>, MEMORY[0x1E0CE6778]);
  v11[0] = MEMORY[0x18D75FFDC](v9, v7, v12);
  v11[1] = &protocol witness table for AccessibilityAttachmentModifier;
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

uint64_t specialized AccessibilityProperties.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[5];
  uint64_t v7;

  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  v7 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
  v6[3] = v4;
  v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>();
  v6[0] = swift_allocObject();
  outlined init with copy of AccessibilityScrollableContext?(a1, v6[0] + 16);
  specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
  result = outlined destroy of AccessibilityScrollableContext?(a1);
  *a2 = v7;
  return result;
}

unint64_t makeAccessibilityLayoutScrollableTransform(isIncremental:role:placedChildren:inputs:outputs:)()
{
  unint64_t v0;
  uint64_t v1;

  if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0 || (_ViewOutputs.subscript.getter() & 0x100000000) != 0)
  {
    v0 = _ViewOutputs.subscript.getter();
    v1 = HIDWORD(v0) & 1;
  }
  else
  {
    swift_getKeyPath();
    _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type LayoutScrollableTransform and conformance LayoutScrollableTransform();
    LODWORD(v0) = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v1) = 0;
  }
  return v0 | ((unint64_t)v1 << 32);
}

Swift::Bool __swiftcall AccessibilityNode.scrollToVisible()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  void *v18;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  NSString *v23;
  Class v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  NSString *v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  void *v47;
  char *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  id v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  char v60;
  _BYTE v61[40];
  __int128 v62;
  uint64_t v63;
  unsigned __int8 v64;
  _BYTE v65[80];
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  v1 = v0;
  AccessibilityNode.enclosingScrollableContext.getter((uint64_t)&v62);
  if (v64 == 255)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v62);
LABEL_21:
    v17 = 0;
    goto LABEL_22;
  }
  outlined init with take of AccessibilityScrollableContext((uint64_t)&v62, (uint64_t)v65);
  AccessibilityScrollableContext.scrollableCollection.getter((uint64_t)&v62);
  if (!v63)
  {
    outlined destroy of AccessibilityScrollableContext((uint64_t)v65);
    outlined destroy of ScrollableCollection?((uint64_t)&v62);
    goto LABEL_21;
  }
  outlined init with take of OptionalBinaryInteger(&v62, (uint64_t)v61);
  v2 = MEMORY[0x18D760234](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (!v2)
  {
LABEL_19:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v65);
    goto LABEL_21;
  }
  v3 = (char *)v2;
  while (1)
  {
    v6 = &v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(*(_QWORD *)v6 + 16);
    if (v8)
      break;
    v4 = v3;
    swift_bridgeObjectRetain();
LABEL_7:
    swift_bridgeObjectRelease();
LABEL_8:
    v5 = MEMORY[0x18D760234](&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

    v3 = (char *)v5;
    if (!v5)
      goto LABEL_19;
  }
  v9 = v3;
  swift_bridgeObjectRetain();
  v10 = (uint64_t *)(v7 + 40 * v8);
  while (1)
  {
    if (v8 > *(_QWORD *)(v7 + 16))
    {
      __break(1u);
      goto LABEL_31;
    }
    v11 = *v10;
    *(_QWORD *)&v62 = *(v10 - 1);
    *((_QWORD *)&v62 + 1) = v11;
    v12 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v12)
      break;
    v10 -= 5;
    if (!--v8)
      goto LABEL_7;
  }
  if (v8 > *(_QWORD *)(v7 + 16))
  {
    __break(1u);
    goto LABEL_48;
  }
  v14 = *v10;
  *(_QWORD *)&v62 = *(v10 - 1);
  *((_QWORD *)&v62 + 1) = v14;
  v13 = AccessibilityAttachment.platformElement.getter();
  if (!v13)
  {
LABEL_48:
    __break(1u);
    return v13;
  }
  v15 = (void *)v13;
  swift_bridgeObjectRelease();
  type metadata accessor for HostingScrollView();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {

    goto LABEL_8;
  }
  v18 = (void *)v16;

  MEMORY[0x18D75B908]();
  v9 = v15;
  objc_msgSend(v18, sel_accessibilityFrame);
  x = v66.origin.x;
  y = v66.origin.y;
  width = v66.size.width;
  height = v66.size.height;
  if (!CGRectIsEmpty(v66))
    goto LABEL_25;
  v23 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
  v24 = NSClassFromString(v23);

  if (v24)
    goto LABEL_25;
  objc_opt_self();
  v33 = swift_dynamicCastObjCClass();
  if (!v33)
    goto LABEL_25;
  v34 = (void *)v33;
  v35 = v18;
  objc_msgSend(v34, sel_frame);
  x = v36;
  y = v37;
  width = v38;
  height = v39;
  v40 = objc_msgSend(v34, sel_window);
  if (!v40)
  {

LABEL_25:
    goto LABEL_26;
  }
  v41 = v40;
  objc_msgSend(v34, sel_bounds);
  objc_msgSend(v41, sel_convertRect_fromCoordinateSpace_, v34);
  x = v42;
  y = v43;
  width = v44;
  height = v45;

LABEL_26:
  objc_msgSend(v1, sel_accessibilityFrame);
  v25 = v67.origin.x;
  v26 = v67.origin.y;
  v27 = v67.size.width;
  v28 = v67.size.height;
  if (CGRectIsEmpty(v67))
  {
    v29 = (NSString *)MEMORY[0x18D75CC88](0x4774694B49555841, 0xEB0000000065756CLL);
    v30 = NSClassFromString(v29);

    if (!v30)
    {
      objc_opt_self();
      v46 = swift_dynamicCastObjCClass();
      if (v46)
      {
        v47 = (void *)v46;
        v48 = v1;
        objc_msgSend(v47, sel_frame);
        v25 = v49;
        v26 = v50;
        v27 = v51;
        v28 = v52;
        v53 = objc_msgSend(v47, sel_window);
        if (v53)
        {
          v54 = v53;
          objc_msgSend(v47, sel_bounds);
          objc_msgSend(v54, sel_convertRect_fromCoordinateSpace_, v47);
          v25 = v55;
          v26 = v56;
          v27 = v57;
          v28 = v58;

        }
        else
        {

        }
      }
    }
  }
  v68.origin.x = x;
  v68.origin.y = y;
  v68.size.width = width;
  v68.size.height = height;
  v70.origin.x = v25;
  v70.origin.y = v26;
  v70.size.width = v27;
  v70.size.height = v28;
  v69 = CGRectIntersection(v68, v70);
  v71.origin.x = v25;
  v71.origin.y = v26;
  v71.size.width = v27;
  v71.size.height = v28;
  if (CGRectEqualToRect(v69, v71))
  {
    static Update.end()();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v65);
    v17 = 1;
    goto LABEL_22;
  }
LABEL_31:
  v31 = outlined init with copy of AccessibilityScrollableContext((uint64_t)v65, (uint64_t)&v62);
  if (!v64 || v64 != 1)
    v31 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
  MEMORY[0x1E0C80A78](v31, v32);
  static Update.ensure<A>(_:)();
  v17 = v60;
  if (v60 == 1 && MEMORY[0x18D760234](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
  {
    swift_getObjectType();
    *(_QWORD *)&v62 = 0;
    BYTE8(v62) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_unknownObjectRelease();
  }
  swift_release();
  static Update.end()();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v65);
LABEL_22:
  LOBYTE(v13) = v17;
  return v13;
}

double AccessibilityScrollableModifier.scrollableCollection.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value;
  double result;
  __int128 v4[2];
  uint64_t v5;
  _BYTE v6[40];

  type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  Value = AGGraphGetValue();
  if (*(_QWORD *)(*(_QWORD *)Value + 16))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)Value + 32, (uint64_t)v6);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of OptionalBinaryInteger(v4, a1);
      return result;
    }
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of ScrollableCollection?((uint64_t)v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

id AccessibilityScrollableModifier.createOrUpdateNode(viewRendererHost:existingNode:)(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 *v3;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  objc_class *v12;
  id v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;

  v6 = *v3;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)v16);
  if (v17)
    v7 = v6;
  else
    v7 = 0;
  if (!a3)
  {
    if (v7)
    {
      v12 = (objc_class *)type metadata accessor for AccessibilityIncrementalLayoutNode();
LABEL_13:
      v13 = objc_allocWithZone(v12);
      v14 = swift_unknownObjectRetain();
      v10 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v14, a2, 0);
      swift_unknownObjectRelease();
      goto LABEL_14;
    }
LABEL_10:
    v12 = (objc_class *)type metadata accessor for AccessibilityNode();
    goto LABEL_13;
  }
  v8 = type metadata accessor for AccessibilityIncrementalLayoutNode();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    if (!v7)
    {
      v10 = a3;
      goto LABEL_14;
    }
    v12 = (objc_class *)v8;
    goto LABEL_13;
  }
  if (!v7)
    goto LABEL_10;
  v10 = (id)v9;
  v11 = a3;
LABEL_14:
  outlined destroy of ScrollableCollection?((uint64_t)v16);
  return v10;
}

uint64_t AccessibilityScrollableModifier.initialAttachment(for:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v4;
  _BYTE v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[5];

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(_QWORD *)(v0 + 8);
  v5[0] = *(_BYTE *)v0;
  v6 = v1;
  v7 = v2;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)&v9);
  if (v10)
  {
    outlined init with take of OptionalBinaryInteger(&v9, (uint64_t)v11);
    v8 = v2;
    outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)&v9);
    outlined init with copy of ScrollableCollection?((uint64_t)&v9, (uint64_t)v5);
    swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v5);
    outlined destroy of ScrollableCollection?((uint64_t)&v9);
    static AccessibilityVisibility.containerElement.getter();
    LODWORD(v9) = v4;
    DWORD1(v9) = v4;
    AccessibilityProperties.visibility.setter();
    *(_QWORD *)&v9 = v8;
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    outlined destroy of ScrollableCollection?((uint64_t)&v9);
    v11[0] = v2;
    return static AccessibilityAttachment.properties(_:)();
  }
}

uint64_t protocol witness for AccessibilityViewModifier.willCreateNode(for:) in conformance AccessibilityScrollableModifier()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  LODWORD(v1) = *v0;
  AccessibilityScrollableModifier.scrollableCollection.getter((uint64_t)v3);
  if (v4)
    v1 = v1;
  else
    v1 = 0;
  outlined destroy of ScrollableCollection?((uint64_t)v3);
  return v1;
}

uint64_t protocol witness for AccessibilityViewModifier.updatedAttachment(for:nodes:atIndex:) in conformance AccessibilityScrollableModifier()
{
  return AccessibilityScrollableModifier.initialAttachment(for:)();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityScrollableModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityScrollableContextModifier()
{
  uint64_t v0;
  _QWORD v2[9];
  uint64_t v3;

  outlined init with copy of AccessibilityScrollableContext(v0, (uint64_t)v2);
  specialized AccessibilityProperties.init<A>(_:_:)((uint64_t)v2, &v3);
  v2[0] = v3;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityScrollableContextModifier()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for AccessibilityIncrementalLayoutNode()
{
  return objc_opt_self();
}

uint64_t assignWithCopy for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 70);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    v5 = *(unsigned __int8 *)(a2 + 70);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v6 = 1;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      v6 = 0;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v9 = *(_DWORD *)(a2 + 64);
      *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v9;
    }
    *(_BYTE *)(a1 + 70) = v6;
    swift_retain();
  }
  return a1;
}

__n128 __swift_memcpy71_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 63) = *(_QWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 70);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 != 1)
      __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    v5 = *(unsigned __int8 *)(a2 + 70);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      LOBYTE(v5) = 2;
    }
    else if (v5 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      LOBYTE(v5) = 0;
      v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 62);
      v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
    }
    *(_BYTE *)(a1 + 70) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScrollableContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 71))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 70);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccessibilityScrollableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 63) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 71) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 71) = 0;
    if (a2)
      *(_BYTE *)(result + 70) = -(char)a2;
  }
  return result;
}

uint64_t LayoutScrollableTransform.updateValue()()
{
  unsigned __int8 *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int CurrentAttribute;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  char *v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  char *v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  char **v69;
  char *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  char v74;
  int v75;
  char v76;
  char *v77;
  id v78;
  id v79;
  char v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  void *v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  id v102;
  char v103;
  id v104;
  char v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131[4];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  __int16 v140;
  char v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;

  v4 = (unint64_t)v0;
  v145 = *MEMORY[0x1E0C80C00];
  CurrentAttribute = AGGraphGetCurrentAttribute();
  v6 = *MEMORY[0x1E0CFED28];
  if (CurrentAttribute == *MEMORY[0x1E0CFED28])
    goto LABEL_113;
  AccessibilityAttachmentToken.init<A>(_:)();
  v3 = v132;
  v2 = BYTE8(v132);
  if (*(_BYTE *)AGGraphGetValue() == 1 && *((_DWORD *)v0 + 2) != v6)
  {
    v124 = BYTE8(v132);
    Value = AGGraphGetValue();
    v1 = *(_QWORD *)Value;
    v109 = *(_QWORD *)(Value + 8);
    v112 = v0;
    type metadata accessor for _ContiguousArrayStorage<CVarArg>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E0CE0CA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v12 = AGGraphGetValue();
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
    v122 = v132;
    v123 = v1;
    if (v13)
    {
      v4 = *(_QWORD *)v12 + 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        outlined init with copy of TableColumnList(v4, (uint64_t)&v132);
        outlined init with copy of TableColumnList((uint64_t)&v132, (uint64_t)v131);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
        if ((swift_dynamicCast() & 1) == 0)
        {
          v144 = 0;
          v142 = 0u;
          v143 = 0u;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
        if (*((_QWORD *)&v143 + 1))
        {
          outlined init with take of OptionalBinaryInteger(&v142, (uint64_t)v131);
          outlined init with take of OptionalBinaryInteger(v131, (uint64_t)&v142);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
          v1 = v14[2];
          v15 = v14[3];
          if (v1 >= v15 >> 1)
            v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v1 + 1, 1, v14);
          v14[2] = v1 + 1;
          outlined init with take of OptionalBinaryInteger(&v142, (uint64_t)&v14[5 * v1 + 4]);
        }
        else
        {
          outlined destroy of ScrollableCollection?((uint64_t)&v142);
        }
        v4 += 40;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      if (v14[2])
        goto LABEL_25;
    }
    else
    {
      swift_bridgeObjectRetain();
      v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      {
LABEL_25:
        outlined init with copy of TableColumnList((uint64_t)(v14 + 4), (uint64_t)&v132);
LABEL_28:
        v2 = (unint64_t)v0;
        swift_bridgeObjectRelease();
        if (!*((_QWORD *)&v133 + 1))
        {
          outlined destroy of ScrollableCollection?((uint64_t)&v132);
          *(_QWORD *)&v132 = v123;
          *((_QWORD *)&v132 + 1) = v109;
          AGGraphSetOutputValue();
          return swift_bridgeObjectRelease();
        }
        outlined init with take of OptionalBinaryInteger(&v132, (uint64_t)&v142);
        AGGraphGetValue();
        v17 = v16;
        v18 = *((_QWORD *)v112 + 3);
        v7 = v123;
        v19 = swift_bridgeObjectRetain();
        v20 = specialized static Array<A>.== infix(_:_:)(v19, v18);
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0 && (v20 & 1) != 0)
        {
          v21 = v109;
LABEL_168:
          *(_QWORD *)&v132 = v7;
          *((_QWORD *)&v132 + 1) = v21;
          AGGraphSetOutputValue();
          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
        }
        v126 = MEMORY[0x1E0DEE9E8];
        if (*((_DWORD *)v112 + 4) == v6)
        {
          v110 = 0;
        }
        else
        {
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for [_IncrementalLayout_PlacedChild], (uint64_t)&type metadata for _IncrementalLayout_PlacedChild, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          v110 = *(_QWORD *)AGGraphGetValue();
          swift_bridgeObjectRetain();
        }
        if (v123 >> 62)
          goto LABEL_119;
        v23 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v23)
        {
LABEL_38:
          v2 = 0;
          v120 = v7 & 0xC000000000000001;
          v117 = v7 & 0xFFFFFFFFFFFFFF8;
          v119 = (unsigned __int8 *)MEMORY[0x1E0DEE9E0];
          v115 = v7 + 32;
          while (1)
          {
            if (v120)
            {
              v24 = (char *)MEMORY[0x18D75E3BC](v2, v7);
            }
            else
            {
              if (v2 >= *(_QWORD *)(v117 + 16))
              {
                __break(1u);
                goto LABEL_117;
              }
              v24 = (char *)*(id *)(v115 + 8 * v2);
            }
            v25 = v24;
            v26 = __OFADD__(v2++, 1);
            if (v26)
            {
              __break(1u);
              goto LABEL_112;
            }
            v27 = &v24[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            v28 = *(_QWORD *)v27;
            v1 = *(_QWORD *)(*(_QWORD *)v27 + 16);
            if (!v1)
            {

              goto LABEL_52;
            }
            swift_bridgeObjectRetain();
            v29 = (unsigned __int8 *)(v28 + 64);
            while (1)
            {
              v30 = *v29;
              if (v30 != 255)
                break;
LABEL_46:
              v29 += 40;
              if (!--v1)
              {

                swift_bridgeObjectRelease();
                v3 = v122;
                goto LABEL_52;
              }
            }
            v4 = *((_QWORD *)v29 - 4);
            v31 = (void *)*((_QWORD *)v29 - 3);
            *(_QWORD *)&v132 = *((_QWORD *)v29 - 1);
            BYTE8(v132) = v30 & 1;
            swift_retain();
            swift_bridgeObjectRetain();
            v32 = v31;
            if ((AccessibilityAttachmentToken.attribute.getter() & 0x100000000) != 0)
              break;
            swift_bridgeObjectRelease();
            v1 = (unint64_t)(id)AGGraphGetAttributeSubgraph();
            swift_release();

            swift_bridgeObjectRelease();
            if (!v1)
            {

              v3 = v122;
LABEL_52:
              v7 = v123;
              if (v2 == v23)
                goto LABEL_74;
              continue;
            }
            v33 = *((_QWORD *)&v143 + 1);
            v34 = v144;
            __swift_project_boxed_opaque_existential_1(&v142, *((uint64_t *)&v143 + 1));
            (*(void (**)(__int128 *__return_ptr, unint64_t, uint64_t, uint64_t))(v34 + 64))(&v132, v1, v33, v34);
            v35 = *((_QWORD *)&v132 + 1);
            v3 = v122;
            if (*((_QWORD *)&v132 + 1) == 1)
            {

              goto LABEL_52;
            }
            v107 = (void *)v1;
            v113 = v132;
            if (v110)
            {
              v36 = *(_QWORD *)(v110 + 16);
              v7 = v123;
              if (v36)
              {
                v37 = DWORD1(v132);
                swift_bridgeObjectRetain_n();
                v38 = 32;
                while (1)
                {
                  v4 = *(_QWORD *)(v110 + v38);
                  v39 = *(_QWORD *)(v4 + 144);
                  *(_QWORD *)&v131[0] = *(_QWORD *)(v4 + 136);
                  *((_QWORD *)&v131[0] + 1) = v39;
                  swift_retain();
                  _ViewList_ID.canonicalID.getter();
                  v131[0] = v132;
                  v127 = __PAIR64__(v37, v113);
                  v128 = v35;
                  v40 = MEMORY[0x18D756E68](v131, &v127);
                  swift_release();
                  if ((v40 & 1) != 0)
                    break;
                  swift_release();
                  v38 += 72;
                  if (!--v36)
                  {
                    swift_bridgeObjectRelease_n();
                    v3 = v122;
                    v7 = v123;
                    goto LABEL_64;
                  }
                }
                swift_bridgeObjectRelease_n();
                v41 = (uint64_t *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
                v43 = *(unsigned int *)(v4 + 160);
                if (*(_BYTE *)(v4 + 164))
                  v43 = 0;
                v44 = 0x100000000;
                if (!*(_BYTE *)(v4 + 165))
                  v44 = 0;
                v45 = v44 | v43;
                v46 = 0x10000000000;
                if (!*(_BYTE *)(v4 + 166))
                  v46 = 0;
                v42 = v45 | v46;
                v3 = v122;
                v7 = v123;
              }
              else
              {
LABEL_64:
                v4 = 0;
                v41 = (uint64_t *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
                v42 = 0x200000000;
              }
            }
            else
            {
              v4 = 0;
              v41 = (uint64_t *)&v25[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
              v42 = 0x200000000;
              v7 = v123;
            }
            v106 = *v41;
            outlined copy of _ViewList_ID.Canonical?(v113, v35);
            v1 = (unint64_t)v119;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v132 = v119;
            v108 = v42 | v108 & 0xFFFF000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v35, v108, v106, isUniquelyReferenced_nonNull_native);
            v119 = (unsigned __int8 *)v132;
            swift_bridgeObjectRelease();
            outlined copy of _ViewList_ID.Canonical?(v113, v35);
            specialized Set._Variant.insert(_:)((uint64_t)&v132, v113, v35);

            outlined consume of Text.LineStyle?(v113, v35);
            swift_release();
            swift_release();
            if (v2 == v23)
            {
LABEL_74:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v2 = (unint64_t)v112;
              if ((*v112 & 1) == 0 && *(_QWORD *)(v126 + 16) < 2uLL)
              {
                v114 = 0;
                goto LABEL_122;
              }
              swift_bridgeObjectRetain();
              v114 = 0;
              v4 = 0;
              while (1)
              {
                if (v120)
                {
                  v48 = (char *)MEMORY[0x18D75E3BC](v4, v7);
                }
                else
                {
                  if (v4 >= *(_QWORD *)(v117 + 16))
                    goto LABEL_118;
                  v48 = (char *)*(id *)(v115 + 8 * v4);
                }
                v49 = v48;
                v26 = __OFADD__(v4++, 1);
                if (v26)
                  break;
                if (*((_QWORD *)v119 + 2)
                  && (v50 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&v48[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id]),
                      (v51 & 1) != 0))
                {
                  v52 = *((_QWORD *)v119 + 7) + 24 * v50;
                  v54 = *(_DWORD *)v52;
                  v53 = *(_DWORD *)(v52 + 4);
                  v55 = *(_QWORD *)(v52 + 8);
                  v56 = *(unsigned __int16 *)(v52 + 20);
                  v57 = *(unsigned int *)(v52 + 16);
                  v58 = v2;
                  v59 = *(unsigned __int8 *)v2;
                  outlined init with copy of TableColumnList((uint64_t)&v142, (uint64_t)&v132);
                  if (v59 == 1)
                  {
                    v60 = 0;
                    LOBYTE(v135) = *(_BYTE *)(v58 + 1);
                    v137 = __PAIR64__(v53, v54);
                    v138 = v55;
                    v139 = v57;
                    v140 = (v57 | (unint64_t)(v56 << 32)) >> 32;
                  }
                  else
                  {
                    v135 = v54;
                    v136 = v53;
                    v60 = 2;
                    v137 = v55;
                  }
                  v141 = v60;
                  outlined init with copy of AccessibilityScrollableContext((uint64_t)&v132, (uint64_t)v131);
                  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
                  v110 = v55;
                  swift_retain_n();
                  v125 = Dictionary.init(minimumCapacity:)();
                  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
                  v129 = v67;
                  v130 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>();
                  v127 = swift_allocObject();
                  outlined init with copy of AccessibilityScrollableContext?((uint64_t)v131, v127 + 16);
                  specialized Dictionary.subscript.setter((uint64_t)&v127, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
                  outlined destroy of AccessibilityScrollableContext?((uint64_t)v131);
                  v127 = v125;
                  static AccessibilityAttachment.properties(_:)();
                  swift_bridgeObjectRelease();
                  v68 = v131[0];
                  v69 = (char **)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                  swift_beginAccess();
                  v70 = *v69;
                  v71 = *((_QWORD *)*v69 + 2);
                  if (v71)
                  {
                    swift_bridgeObjectRetain();
                    v72 = (unsigned __int8 *)(v70 + 64);
                    v73 = (unsigned __int8 *)(v70 + 64);
                    do
                    {
                      v75 = *v73;
                      v73 += 40;
                      v74 = v75;
                      if (v75 != 255)
                      {
                        *(_QWORD *)&v131[0] = *((_QWORD *)v72 - 1);
                        BYTE8(v131[0]) = v74;
                        v127 = v122;
                        LOBYTE(v128) = v124;
                        if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          v131[0] = v68;
                          v1 = v122;
                          v127 = v122;
                          LOBYTE(v128) = v124;
                          v76 = specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)((char **)v131, &v127, 0);
                          swift_release();

                          outlined destroy of AccessibilityScrollableContext((uint64_t)&v132);
                          swift_bridgeObjectRelease();

                          v3 = v122;
                          v114 |= v76;
                          v7 = v123;
                          goto LABEL_109;
                        }
                      }
                      v72 = v73;
                      --v71;
                    }
                    while (v71);
                    swift_bridgeObjectRelease();
                  }
                  v131[0] = v68;
                  AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(v131);
                  v77 = *v69;
                  v78 = *((id *)&v68 + 1);
                  swift_bridgeObjectRetain_n();
                  v79 = v78;
                  v80 = swift_isUniquelyReferenced_nonNull_native();
                  *v69 = v77;
                  if ((v80 & 1) == 0)
                  {
                    v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v77 + 2) + 1, 1, v77);
                    *v69 = v77;
                  }
                  v1 = *((_QWORD *)v77 + 2);
                  v81 = *((_QWORD *)v77 + 3);
                  if (v1 >= v81 >> 1)
                  {
                    v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v1 + 1, 1, v77);
                    *v69 = v77;
                  }
                  *((_QWORD *)v77 + 2) = v1 + 1;
                  v82 = &v77[40 * v1];
                  *((_OWORD *)v82 + 2) = v68;
                  v3 = v122;
                  v7 = v123;
                  *((_QWORD *)v82 + 6) = 0;
                  *((_QWORD *)v82 + 7) = v122;
                  v82[64] = v124;
                  v83 = &v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                  v84 = *(_QWORD *)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
                  v85 = *(void **)&v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
                  *(_QWORD *)v83 = 0;
                  *((_QWORD *)v83 + 1) = 0;
                  outlined consume of AccessibilityAttachment?(v84, v85);
                  v114 = 1;
                  v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
                  swift_release();

                  swift_bridgeObjectRelease();
                  outlined destroy of AccessibilityScrollableContext((uint64_t)&v132);

                  swift_bridgeObjectRelease();
LABEL_109:
                  v2 = (unint64_t)v112;
                }
                else
                {
                  v61 = &v49[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
                  swift_beginAccess();
                  v62 = *(_QWORD *)v61;
                  v63 = *(_QWORD *)(*(_QWORD *)v61 + 16);
                  if (v63)
                  {
                    swift_bridgeObjectRetain();
                    v64 = v62 + 64;
                    v1 = v62 + 64;
                    while (1)
                    {
                      v66 = *(unsigned __int8 *)v1;
                      v1 += 40;
                      v65 = v66;
                      if (v66 != 255)
                      {
                        *(_QWORD *)&v132 = *(_QWORD *)(v64 - 8);
                        BYTE8(v132) = v65;
                        *(_QWORD *)&v131[0] = v3;
                        BYTE8(v131[0]) = v124;
                        if ((static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
                          break;
                      }
                      v64 = v1;
                      if (!--v63)
                      {

                        swift_bridgeObjectRelease();
                        goto LABEL_79;
                      }
                    }
                    swift_bridgeObjectRelease();
                    *(_QWORD *)&v132 = v3;
                    BYTE8(v132) = v124;
                    specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v132);

                    v114 = 1;
                  }
                  else
                  {

                  }
                }
LABEL_79:
                if (v4 == v23)
                  goto LABEL_121;
              }
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              swift_bridgeObjectRetain();
              v7 = _CocoaArrayWrapper.endIndex.getter();
              if (!v7)
                goto LABEL_115;
LABEL_6:
              if (v7 >= 1)
              {
                v8 = 0;
                do
                {
                  if ((v1 & 0xC000000000000001) != 0)
                    v9 = (id)MEMORY[0x18D75E3BC](v8, v1);
                  else
                    v9 = *(id *)(v1 + 8 * v8 + 32);
                  v10 = v9;
                  ++v8;
                  *(_QWORD *)&v132 = v3;
                  BYTE8(v132) = v2;
                  specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v132);

                }
                while (v7 != v8);
                goto LABEL_115;
              }
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              swift_bridgeObjectRetain_n();
              v23 = _CocoaArrayWrapper.endIndex.getter();
              if (!v23)
                goto LABEL_120;
              goto LABEL_38;
            }
          }
          swift_release();

          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
LABEL_120:
        swift_bridgeObjectRelease();
        v114 = 0;
LABEL_121:
        swift_bridgeObjectRelease();
LABEL_122:
        v87 = *(_QWORD *)(v2 + 24);
        if (v87 >> 62)
          goto LABEL_165;
        v88 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v88)
        {
LABEL_166:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *((_QWORD *)v112 + 3) = v7;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v21 = v109;
          if ((v114 & 1) != 0)
          {
LABEL_167:
            DisplayList.Version.init(forUpdate:)();
            v21 = v132;
          }
          goto LABEL_168;
        }
LABEL_124:
        v89 = 0;
        v90 = v87 & 0xC000000000000001;
        v116 = v87 & 0xFFFFFFFFFFFFFF8;
        v118 = v87 & 0xC000000000000001;
        v111 = v87 + 32;
        v121 = v7 & 0xC000000000000001;
        while (1)
        {
          while (1)
          {
            if (v90)
            {
              v91 = (id)MEMORY[0x18D75E3BC](v89, v87);
            }
            else
            {
              if (v89 >= *(_QWORD *)(v116 + 16))
                goto LABEL_164;
              v91 = *(id *)(v111 + 8 * v89);
            }
            v92 = v91;
            v26 = __OFADD__(v89++, 1);
            if (v26)
            {
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              swift_bridgeObjectRetain();
              v88 = _CocoaArrayWrapper.endIndex.getter();
              if (!v88)
                goto LABEL_166;
              goto LABEL_124;
            }
            if (v23)
              break;
LABEL_153:
            *(_QWORD *)&v132 = v3;
            BYTE8(v132) = v124;
            specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)((uint64_t *)&v132);

            v114 = 1;
            if (v89 == v88)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *((_QWORD *)v112 + 3) = v7;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_167;
            }
          }
          if (v121)
          {
            swift_bridgeObjectRetain();
            v94 = (id)MEMORY[0x18D75E3BC](0, v7);
          }
          else
          {
            v93 = *(void **)(v7 + 32);
            swift_bridgeObjectRetain();
            v94 = v93;
          }
          v95 = v94;
          type metadata accessor for AccessibilityNode();
          v96 = static NSObject.== infix(_:_:)();

          if ((v96 & 1) != 0)
          {

            v7 = v123;
            swift_bridgeObjectRelease();
            if (v89 == v88)
              goto LABEL_166;
          }
          else
          {
            if (v23 == 1)
            {
              v7 = v123;
              swift_bridgeObjectRelease();
              goto LABEL_153;
            }
            v97 = v88;
            v98 = v87;
            if (v121)
            {
              MEMORY[0x18D75E3BC](1, v123);
              v99 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v99 & 1) == 0)
              {
                if (v23 != 2)
                {
                  v100 = 2;
                  v7 = v123;
                  while (1)
                  {
                    MEMORY[0x18D75E3BC](v100, v7);
                    v87 = v100 + 1;
                    if (__OFADD__(v100, 1))
                      break;
                    v101 = static NSObject.== infix(_:_:)();
                    swift_unknownObjectRelease();
                    if ((v101 & 1) != 0)
                      goto LABEL_155;
                    ++v100;
                    v3 = v122;
                    v7 = v123;
                    if (v87 == v23)
                      goto LABEL_143;
                  }
                  __break(1u);
LABEL_162:
                  __break(1u);
                  goto LABEL_163;
                }
LABEL_159:
                v7 = v123;
LABEL_143:
                swift_bridgeObjectRelease();
LABEL_152:
                v87 = v98;
                v88 = v97;
                v90 = v118;
                goto LABEL_153;
              }
            }
            else
            {
              v102 = *(id *)(v123 + 40);
              v103 = static NSObject.== infix(_:_:)();

              if ((v103 & 1) == 0)
              {
                if (v23 != 2)
                {
                  v87 = 6;
                  v7 = v123;
                  while (1)
                  {
                    v3 = v87 - 3;
                    if (__OFADD__(v87 - 4, 1))
                      goto LABEL_162;
                    v104 = *(id *)(v7 + 8 * v87);
                    v105 = static NSObject.== infix(_:_:)();

                    if ((v105 & 1) != 0)
                    {
LABEL_155:

                      v7 = v123;
                      swift_bridgeObjectRelease();
                      v3 = v122;
                      goto LABEL_156;
                    }
                    ++v87;
                    v7 = v123;
                    if (v3 == v23)
                    {
                      swift_bridgeObjectRelease();
                      v3 = v122;
                      goto LABEL_152;
                    }
                  }
                }
                goto LABEL_159;
              }
            }

            swift_bridgeObjectRelease();
            v7 = v123;
LABEL_156:
            v87 = v98;
            v88 = v97;
            v90 = v118;
            if (v89 == v88)
              goto LABEL_166;
          }
        }
      }
    }
    v134 = 0;
    v132 = 0u;
    v133 = 0u;
    goto LABEL_28;
  }
  v1 = *((_QWORD *)v0 + 3);
  if (v1 >> 62)
    goto LABEL_114;
  v7 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7)
    goto LABEL_6;
LABEL_115:
  swift_bridgeObjectRelease_n();
  v86 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v4 + 24) = MEMORY[0x1E0DEE9D8];
  v132 = v86;
  return AGGraphSetOutputValue();
}

uint64_t LayoutScrollableTransform.description.getter()
{
  unsigned __int8 *v0;
  int v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  _StringGuts.grow(_:)(75);
  v2._object = (void *)0x8000000187BF16A0;
  v2._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v2);
  if (v1)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6C6F722020202020;
  v6._object = (void *)0xEA00000000002065;
  String.append(_:)(v6);
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLayoutRole?, MEMORY[0x1E0CE56D8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilitySectionContext(uint64_t a1, uint64_t a2)
{
  return ((*(_DWORD *)a1 != *(_DWORD *)a2) | ((*(_BYTE *)(a1 + 4) ^ *(_BYTE *)(a2 + 4)) | (*(_BYTE *)(a2 + 5) ^ *(_BYTE *)(a1 + 5))) & 1) == 0;
}

uint64_t AccessibilityScrollableContext.scrollableCollection.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v4[3];
  char v5;

  outlined init with copy of AccessibilityScrollableContext(v1, (uint64_t)v4);
  if (v5 && v5 == 1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return outlined destroy of AccessibilityScrollableContext((uint64_t)v4);
  }
  else
  {
    swift_release();
    return outlined init with take of OptionalBinaryInteger(v4, a1);
  }
}

double AccessibilityNode.enclosingScrollableContext.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  double result;
  uint64_t v7[2];
  _BYTE v8[72];

  AccessibilityNode.attachment.getter(v7);

  v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v8);
  swift_bridgeObjectRelease_n();
  if (v8[70] == 255)
  {
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v8);
    v4 = MEMORY[0x18D760234](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
    if (v4)
    {
      v5 = (void *)v4;
      AccessibilityNode.enclosingScrollableContext.getter();

    }
    else
    {
      result = 0.0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 68) = 0;
      *(_DWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 70) = -1;
    }
  }
  else
  {
    outlined init with take of AccessibilityScrollableContext((uint64_t)v8, a1);
  }
  return result;
}

uint64_t sub_187ADD28C()
{
  uint64_t v0;
  unint64_t v1;

  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    switch((_DWORD)v1)
    {
      case 2:
        goto LABEL_5;
      case 1:
LABEL_6:
        swift_release();
        return swift_deallocObject();
      case 0:
LABEL_5:
        __swift_destroy_boxed_opaque_existential_1(v0 + 16);
        goto LABEL_6;
    }
  }
  return swift_deallocObject();
}

uint64_t outlined init with copy of AccessibilityScrollableContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in scroll #1 () in AccessibilityNode.scroll(toCollectionViewID:in:)@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v3 = (_QWORD *)v1[2];
  v4 = v1[4];
  v5 = v3[3];
  v6 = v3[4];
  v7 = v1[3];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  v9[0] = v7;
  v9[1] = v4;
  result = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v6 + 72))(v9, 0, 0, 1, v5, v6);
  *a1 = result & 1;
  return result;
}

uint64_t assignWithCopy for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutScrollableTransform(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for LayoutScrollableTransform()
{
  return &unk_1E1AEA0C0;
}

uint64_t assignWithCopy for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityScrollableModifier()
{
  return &type metadata for AccessibilityScrollableModifier;
}

uint64_t assignWithCopy for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1);
    v4 = *(unsigned __int8 *)(a2 + 70);
    if (v4 == 2)
    {
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    }
    else if (v4 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v7 = *(_DWORD *)(a2 + 64);
      *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v7;
    }
    *(_BYTE *)(a1 + 70) = v4;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1);
    v4 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 63) = *(_QWORD *)(a2 + 63);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScrollableContextModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 71))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 70);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityScrollableContextModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 70) = 0;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 71) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 71) = 0;
    if (a2)
      *(_BYTE *)(result + 70) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityScrollableContextModifier()
{
  return &type metadata for AccessibilityScrollableContextModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityScrollableContextModifier()
{
  return &protocol witness table for AccessibilityScrollableContextModifier;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityScrollableModifier()
{
  return &protocol witness table for AccessibilityScrollableModifier;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityScrollableModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
}

uint64_t DefaultGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_BYTE *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in DefaultGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance DefaultGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t KeyPath;
  uint64_t result;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = *((_BYTE *)a1 + 9);
  v6 = *((_BYTE *)a1 + 10);
  KeyPath = swift_getKeyPath();
  result = swift_getKeyPath();
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 9) = v5;
  *(_BYTE *)(a2 + 10) = v6;
  *(_QWORD *)(a2 + 16) = KeyPath;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  return result;
}

ValueMetadata *type metadata accessor for DefaultGaugeStyle()
{
  return &type metadata for DefaultGaugeStyle;
}

uint64_t type metadata completion function for ContextMenuPreviewResponder()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = swift_getKeyPath();
  *(_BYTE *)(a1 + 16) = 0;
  type metadata accessor for ContextMenuPreviewModifier();
}

uint64_t sub_187ADDAD8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  char v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v8 + a1[14], v7, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v8 + a1[15], v6, v1);
  *(_BYTE *)(v8 + a1[16]) = v5;
  v11 = v8 + a1[17];
  *(_QWORD *)v11 = v4;
  *(_QWORD *)(v11 + 8) = v3;
  *(_BYTE *)(v11 + 16) = v12;
  return result;
}

void ContextMenuPreviewDestinationModifier.init(menuView:preview:destination:)(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t sub_187ADDBC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v5 + *(int *)(a1 + 68), v4, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v5 + *(int *)(a1 + 72), v3, v1);
}

void ContextMenuPreviewModifier.body(content:)()
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuPreviewModifierCore();
}

void sub_187ADDC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)(v1 - 344) = v0;
  v2 = type metadata accessor for ModifiedContent();
  v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  *(_QWORD *)(v1 - 320) = v3;
  v4 = type metadata accessor for ModifiedContent();
  v5 = lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  *(_QWORD *)(v1 - 120) = &type metadata for ProvidesContextMenuInteraction;
  *(_QWORD *)(v1 - 112) = v2;
  *(_QWORD *)(v1 - 272) = v4;
  *(_QWORD *)(v1 - 104) = v4;
  *(_QWORD *)(v1 - 96) = v5;
  *(_QWORD *)(v1 - 288) = v5;
  type metadata accessor for StaticIf();
}

void sub_187ADDD20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(_BYTE *, char *, uint64_t, double);
  _BYTE v37[64];

  *(_QWORD *)(v8 - 256) = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  *(_QWORD *)(v8 - 280) = &v37[-v10];
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  *(_QWORD *)(v8 - 232) = a1;
  v11 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v8 - 224) = v11;
  *(_QWORD *)(v8 - 240) = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)(v8 - 264) = &v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14, v15);
  *(_QWORD *)(v8 - 248) = &v37[-v16];
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v37[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v37[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v8 - 352) = v7;
  *(_QWORD *)(v8 - 360) = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = &v37[-v28];
  *(_QWORD *)(v8 - 216) = v4;
  *(_QWORD *)(v8 - 328) = *(_QWORD *)(v4 - 8);
  v32 = MEMORY[0x1E0C80A78](v30, v31);
  *(_QWORD *)(v8 - 336) = &v37[-v33];
  v34 = &v3[*(int *)(v5 + 56)];
  v36 = *(void (**)(_BYTE *, char *, uint64_t, double))(v35 + 16);
  *(_QWORD *)(v8 - 312) = v2;
  v36(v25, v34, v2, v32);
  (*(void (**)(_BYTE *, char *, uint64_t))(v17 + 16))(v21, &v3[*(int *)(v5 + 60)], v6);
  if (*(_DWORD *)v3)
  {
    *(_QWORD *)(v8 - 368) = v3;
    ContextMenuPreviewModifierCore.init(menuView:preview:hidePreview:id:previewAction:)((uint64_t)v25, *(_QWORD *)(v8 - 312), (uint64_t)v29);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ContextMenuPreviewModifierCore.init(menuView:preview:hidePreview:id:previewAction:)(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for ContextMenuPreviewModifierCore();
}

uint64_t sub_187ADE2AC(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  char v11;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6 + a1[13], v5, v7);
  *(_BYTE *)(v6 + a1[14]) = v4;
  *(_DWORD *)(v6 + a1[15]) = v3;
  v10 = v6 + a1[16];
  *(_QWORD *)v10 = v2;
  *(_QWORD *)(v10 + 8) = v1;
  *(_BYTE *)(v10 + 16) = v11;
  return result;
}

void closure #1 in ContextMenuPreviewModifier.body(content:)()
{
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_187ADE358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  *(_QWORD *)(v5 - 96) = v4;
  *(_QWORD *)(v5 - 88) = v3;
  *(_QWORD *)(v5 - 80) = v2;
  *(_QWORD *)(v5 - 72) = v1;
  type metadata accessor for ContextMenuPreviewModifierCore();
}

uint64_t sub_187ADE394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for ModifiedContent();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v12 - v8;
  *(_QWORD *)(v3 - 112) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v2, v7);
  *(_QWORD *)(v3 - 104) = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
  v10 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v3 - 112);
  static ViewBuilder.buildExpression<A>(_:)(v1, v4, v10);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v9, v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

void closure #2 in ContextMenuPreviewModifier.body(content:)()
{
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_187ADE4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v8;

  *(_QWORD *)(v6 - 176) = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a1, v8);
  type metadata accessor for _ViewModifier_Content();
  *(_QWORD *)(v6 - 120) = v5;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for ContextMenuPreviewModifierCore();
}

uint64_t sub_187ADE50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t result;
  _BYTE v35[80];

  *(_QWORD *)(v4 - 240) = v0;
  *(_QWORD *)(v4 - 232) = type metadata accessor for ModifiedContent();
  v5 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 216) = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v35[-v7];
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  v9 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v4 - 200) = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v4 - 224) = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)(v4 - 208) = &v35[-v14];
  v15 = *(_DWORD *)v2;
  if (!*(_DWORD *)v2)
    goto LABEL_9;
  v16 = *(_QWORD *)(v2 + 8);
  v17 = *(_BYTE *)(v2 + 16);
  outlined copy of Environment<Bool>.Content(v16, v17);
  v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 16))(v1, v2, v3);
  if (v15 != v18)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(v1, v3);
    goto LABEL_6;
  }
  v19 = *(_QWORD *)(v1 + 8);
  v20 = *(_BYTE *)(v1 + 16);
  outlined copy of Environment<Bool>.Content(v19, v20);
  v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool>.Content(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 176) + 8))(v1, v3);
  v22 = 0.0;
  if ((v21 & 0x100000000) != 0)
LABEL_6:
    v22 = 1.0;
  *(double *)(v4 - 120) = v22;
  *(_QWORD *)(v4 - 136) = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], *(_QWORD *)(v4 - 240));
  *(_QWORD *)(v4 - 128) = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
  v23 = *(_QWORD *)(v4 - 232);
  v24 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v23, v4 - 136);
  MEMORY[0x18D75B4AC](v4 - 120, v23, MEMORY[0x1E0CE5148], v24);
  v25 = *(_DWORD *)v2;
  if (*(_DWORD *)v2)
  {
    v26 = MEMORY[0x1E0CE5138];
    *(_QWORD *)(v4 - 152) = v24;
    *(_QWORD *)(v4 - 144) = v26;
    v27 = MEMORY[0x1E0CE2E70];
    v28 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v4 - 152);
    v29 = *(_QWORD *)(v4 - 224);
    View.liftPreviewMarker(kind:viewIdentity:)(1, v25, v5, v28);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v4 - 216) + 8))(v8, v5);
    v30 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    *(_QWORD *)(v4 - 168) = v28;
    *(_QWORD *)(v4 - 160) = v30;
    v31 = MEMORY[0x18D75FFDC](v27, v9, v4 - 168);
    v32 = *(_QWORD *)(v4 - 208);
    static ViewBuilder.buildExpression<A>(_:)(v29, v9, v31);
    v33 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 200) + 8);
    v33(v29, v9);
    static ViewBuilder.buildBlock<A>(_:)(v32, v9, *(_QWORD *)(v4 - 184));
    return ((uint64_t (*)(uint64_t, uint64_t))v33)(v32, v9);
  }
LABEL_9:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t static ContextMenuPreviewModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  __int128 v4;
  __int128 v5;
  char v6;
  char v7;
  uint64_t v9;
  _OWORD v10[5];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 48);
  v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v4;
  v10[4] = *(_OWORD *)(a2 + 64);
  v11 = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9 = v4;
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v6 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v7 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((v6 & 1) != 0 || (v7 & 1) != 0)
  {
    UniqueID.init()();
    closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)v10, v6 & 1, v9, a3);
    type metadata accessor for ContextMenuPreviewModifierCore();
  }
  return ((uint64_t (*)(void))a3)();
}

uint64_t ContextMenuPreviewResponder.__allocating_init(inputs:space:itemList:displayList:)(uint64_t *a1, uint64_t *a2)
{
  swift_allocObject();
  return ContextMenuPreviewResponder.init(inputs:space:itemList:displayList:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuPreviewModifierCore<A, B>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __int128 *))
{
  return static ContextMenuPreviewModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifierCore<A, B>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t ContextMenuPreviewResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t *Value;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t OutputValue;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v33 - v6;
  v8 = *(_OWORD *)(v1 + 16);
  v37[0] = *(_OWORD *)v1;
  v37[1] = v8;
  v37[2] = *(_OWORD *)(v1 + 32);
  v38 = *(_QWORD *)(v1 + 48);
  Value = (uint64_t *)AGGraphGetValue();
  v11 = v10;
  v12 = *Value;
  v13 = Value[1];
  v14 = v38;
  v15 = (__int128 *)AGGraphGetValue();
  v16 = *v15;
  v17 = v15[1];
  if (((v11 | v18) & 1) != 0
    || (v33 = v15[1],
        v34 = v16,
        type metadata accessor for [ViewResponder](),
        OutputValue = AGGraphGetOutputValue(),
        v17 = v33,
        v16 = v34,
        !OutputValue))
  {
    v35 = v16;
    v36 = v17;
    *(double *)(v14 + 216) = MEMORY[0x18D75BE3C]();
    *(_QWORD *)(v14 + 224) = v20;
    *(_QWORD *)&v35 = v12;
    *((_QWORD *)&v35 + 1) = v13;
    *(double *)(v14 + 232) = MEMORY[0x18D755E9C]();
    *(_QWORD *)(v14 + 240) = v21;
  }
  *(_DWORD *)(v14 + 296) = *(_DWORD *)AGGraphGetValue();
  *(_QWORD *)(v14 + 248) = AGCreateWeakAttribute();
  *(_BYTE *)(v14 + 256) = *(_BYTE *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  v22 = AGGraphGetValue();
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    v22 = swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v35 = v12;
  *((_QWORD *)&v35 + 1) = v13;
  v24 = MEMORY[0x18D755E9C](v22);
  v26 = v25;
  v35 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v14 + 272) = v24 - MEMORY[0x18D755E9C]();
  *(double *)(v14 + 280) = v26 - v27;
  if (*(_BYTE *)AGGraphGetValue() == 1)
  {
    v28 = *(_QWORD *)(v2 - 8);
    v29 = 1;
  }
  else
  {
    v30 = AGGraphGetValue();
    v28 = *(_QWORD *)(v2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v30, v2);
    v29 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v7, v29, 1, v2);
  specialized ContextMenuPreviewResponder.preview.setter((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  AGWeakAttributeGetAttribute();
  *(_QWORD *)(v14 + 300) = AGCreateWeakAttribute();
  *(_BYTE *)(v14 + 308) = 0;
  result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_187BFF9C0;
    *(_QWORD *)(v32 + 32) = v14;
    *(_QWORD *)&v35 = v32;
    specialized Array._endMutation()();
    outlined retain of ContextMenuPreviewResponderFilter<A, B>((uint64_t)v37);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static ContextMenuPreviewDestinationModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

void sub_187ADF3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,char a32)
{
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;

  type metadata accessor for _GraphValue();
  v42 = _GraphValue.value.getter();
  *(_QWORD *)(v41 - 176) = v37;
  *(_DWORD *)(v41 - 168) = v36;
  *(_QWORD *)(v41 - 160) = a11;
  *(_DWORD *)(v41 - 152) = v38;
  *(_DWORD *)(v41 - 148) = a27;
  *(_DWORD *)(v41 - 144) = a30;
  *(_DWORD *)(v41 - 140) = v39;
  *(_QWORD *)(v41 - 136) = a10;
  *(_QWORD *)(v41 - 128) = a9;
  *(_DWORD *)(v41 - 120) = v40;
  *(_DWORD *)(v41 - 116) = a26;
  *(_DWORD *)(v41 - 112) = v32;
  *(_DWORD *)(v41 - 108) = v33;
  *(_DWORD *)(v41 - 104) = a29;
  *(_DWORD *)(v41 - 100) = v34;
  *(_DWORD *)(v41 - 96) = a28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ContextMenuPreviewDestinationModifier.Child.init(modifier:inputs:)(v42, (uint64_t)&a32);
  *(_QWORD *)(v41 - 176) = a16;
  *(_QWORD *)(v41 - 168) = a13;
  *(_QWORD *)(v41 - 160) = a14;
  *(_QWORD *)(v41 - 152) = a15;
  *(_QWORD *)(v41 - 144) = v35;
  *(_QWORD *)(v41 - 136) = a12;
  type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
}

void sub_187ADF474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 176) = v4;
  *(_QWORD *)(v6 - 168) = v2;
  *(_QWORD *)(v6 - 160) = v1;
  *(_QWORD *)(v6 - 152) = v0;
  *(_QWORD *)(v6 - 144) = v3;
  *(_QWORD *)(v6 - 136) = v5;
  type metadata accessor for ContextMenuPreviewDestinationModifier.Child();
}

uint64_t sub_187ADF490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewDestinationModifier<A, B, C>.Child, a1);
  _GraphValue.init<A>(_:)();
  *(_QWORD *)(v5 - 176) = v7;
  *(_DWORD *)(v5 - 168) = v14;
  *(_QWORD *)(v5 - 160) = v2;
  *(_DWORD *)(v5 - 152) = v13;
  *(_DWORD *)(v5 - 148) = v16;
  *(_DWORD *)(v5 - 144) = v19;
  *(_DWORD *)(v5 - 140) = v12;
  *(_QWORD *)(v5 - 136) = v4;
  *(_QWORD *)(v5 - 128) = v3;
  *(_DWORD *)(v5 - 120) = v11;
  *(_DWORD *)(v5 - 116) = v15;
  *(_DWORD *)(v5 - 112) = v10;
  *(_DWORD *)(v5 - 108) = v9;
  *(_DWORD *)(v5 - 104) = v18;
  *(_DWORD *)(v5 - 100) = v8;
  *(_DWORD *)(v5 - 96) = v17;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewDestinationModifier<A, B, C>.Transform, v1);
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

__n128 ContextMenuPreviewDestinationModifier.Child.init(modifier:inputs:)@<Q0>(int a1@<W0>, uint64_t a2@<X8>)
{
  __n128 v4;
  __n128 result;
  __n128 v6;
  unint64_t v7;

  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  v4.n128_u64[0] = v7;
  v4.n128_u64[1] = v7;
  v6 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  *(_DWORD *)a2 = a1;
  *(_DWORD *)(a2 + 4) = v7;
  result = v6;
  *(__n128 *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

void ContextMenuPreviewDestinationModifier.Child.modifier.getter()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t sub_187ADF890(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;

  Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, Value, a1);
}

uint64_t ContextMenuPreviewDestinationModifier.Child.stackKey.getter()
{
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = AGGraphGetWeakValue();
  if (result)
    return *(_QWORD *)result;
  return result;
}

void ContextMenuPreviewDestinationModifier.Child.value.getter()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

void sub_187ADF990(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  ContextMenuPreviewDestinationModifier.Child.modifier.getter();
}

void sub_187ADF9C4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 200) = *(_QWORD *)AGGraphGetValue();
  ContextMenuPreviewDestinationModifier.Child.stackKey.getter();
  NavigableListModifier.BoundListSelectionDetector.navigationAuthority.getter(v1 - 152);
  outlined init with copy of NavigationAuthority??(v1 - 152, v1 - 176);
  if (*(_QWORD *)(v1 - 168) == 2)
  {
    *(_OWORD *)(v1 - 128) = xmmword_187BF9840;
    *(_QWORD *)(v1 - 112) = 0;
  }
  else
  {
    outlined init with take of NavigationAuthority?(v1 - 176, v1 - 128);
  }
  outlined destroy of NavigationAuthority??(v1 - 152);
  AGGraphGetWeakValue();
  ContextMenuPreviewDestinationModifier.Transform.init(modifier:depth:stackKey:navigationAuthority:navigationStateSeeds:isExtracting:)(v0);
}

void ContextMenuPreviewDestinationModifier.Transform.init(modifier:depth:stackKey:navigationAuthority:navigationStateSeeds:isExtracting:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
}

void sub_187ADFB40()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t sub_187ADFB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v3, a1);
  *(_QWORD *)(v2 + v4[19]) = v7;
  v5 = (_QWORD *)(v2 + v4[20]);
  *v5 = v8;
  v5[1] = v9;
  v5[2] = v10;
  result = outlined init with take of NavigationAuthority?(v11, v2 + v4[21]);
  *(_QWORD *)(v2 + v4[22]) = v12;
  *(_BYTE *)(v2 + v4[23]) = v13;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance ContextMenuPreviewDestinationModifier<A, B, C>.Child()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
}

uint64_t sub_187ADFC18(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void protocol witness for Rule.value.getter in conformance ContextMenuPreviewDestinationModifier<A, B, C>.Child()
{
  ContextMenuPreviewDestinationModifier.Child.value.getter();
}

void ContextMenuPreviewDestinationModifier.Transform.body(content:)()
{
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_187ADFCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v10 - 312) = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](a1, a2);
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewDestinationModifier<A, B, C>.Transform, v9, v11);
  type metadata accessor for _ViewModifier_Content();
  v12 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 216) = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = *(_QWORD *)(v9 + 32);
  type metadata accessor for UpdateViewDestinationViewModifier(255, v14, *(_QWORD *)(v9 + 56), v15);
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, v14, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0]);
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 224) = v12;
  *(_QWORD *)(v10 - 264) = v16;
  v17 = type metadata accessor for ModifiedContent();
  *(_QWORD *)(v10 - 288) = v17;
  *(_QWORD *)(v10 - 240) = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  *(_QWORD *)(v10 - 256) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  *(_QWORD *)(v10 - 248) = (char *)&a9 - v22;
  ContextMenuPreviewDestinationModifier.Transform.contextMenuModifier.getter(v9, v23);
}

void sub_187ADFE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v6);
  *(_QWORD *)(v7 - 232) = v0;
  MEMORY[0x18D75B4AC](v2, v6, v1, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 312) + 8))(v2, v1);
  v9 = *(_QWORD *)(v3 + 16);
  *(_BYTE *)(v7 - 152) = *(_BYTE *)(v3 + 8);
  *(_QWORD *)(v7 - 144) = v9;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
  State.projectedValue.getter();
  *(_QWORD *)(v7 - 312) = *(_QWORD *)(v7 - 136);
  *(_QWORD *)(v7 - 320) = *(_QWORD *)(v7 - 128);
  *(_DWORD *)(v7 - 324) = *(unsigned __int8 *)(v7 - 120);
  v10 = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 272);
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 272) = v5;
  v11 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v11;
  *(_QWORD *)(v7 - 104) = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 96) = v4;
  *(_QWORD *)(v7 - 280) = v4;
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t sub_187ADFF44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  unsigned __int8 v29;

  v7 = (uint64_t *)(v4 + v5[20]);
  v8 = *((unsigned __int8 *)v7 + 8);
  if (v8 == 6)
  {
    v9 = 0;
    v8 = 0;
    v10 = 0;
    v11 = 0x1FFFFFFFELL;
  }
  else
  {
    v11 = 0;
    v10 = v7[2];
    v9 = *v7;
  }
  v12 = v4 + v2 + *(int *)(a1 + 72);
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = v8;
  *(_QWORD *)(v6 - 120) = v10;
  *(_QWORD *)(v6 - 112) = 0;
  *(_QWORD *)(v6 - 104) = v11;
  *(_QWORD *)(v6 - 96) = 0;
  v13 = *(_QWORD *)(v4 + v5[19]);
  v14 = Namespace.wrappedValue.getter();
  v15 = v4 + v5[21];
  v16 = *(_BYTE *)(v4 + v5[23]);
  *(_QWORD *)(v6 - 152) = 0;
  Transaction.disablesAnimations.setter();
  v17 = *(_QWORD *)(v6 - 152);
  v18 = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, v3);
  *(_QWORD *)(v6 - 168) = v1;
  *(_QWORD *)(v6 - 160) = v18;
  v19 = *(_QWORD *)(v6 - 224);
  v20 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v19, v6 - 168);
  v29 = v16;
  v21 = *(_QWORD *)(v6 - 256);
  v22 = *(_QWORD *)(v6 - 232);
  View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(*(_QWORD *)(v6 - 312), *(_QWORD *)(v6 - 320), *(_DWORD *)(v6 - 324), v12, v6 - 136, v13, 0, v14, v21, 0, v15, v29, v17, v19, *(_QWORD *)(v6 - 272), v20, *(_QWORD *)(v6 - 280));
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v22, v19);
  *(_QWORD *)(v6 - 184) = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  *(_QWORD *)(v6 - 176) = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v23 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], *(_QWORD *)(v6 - 264), v6 - 184);
  *(_QWORD *)(v6 - 200) = v20;
  *(_QWORD *)(v6 - 192) = v23;
  v24 = *(_QWORD *)(v6 - 288);
  v25 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v24, v6 - 200);
  v26 = *(_QWORD *)(v6 - 248);
  static ViewBuilder.buildExpression<A>(_:)(v21, v24, v25);
  v27 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 240) + 8);
  v27(v21, v24);
  static ViewBuilder.buildBlock<A>(_:)(v26, v24, *(_QWORD *)(v6 - 208));
  return ((uint64_t (*)(uint64_t, uint64_t))v27)(v26, v24);
}

void ContextMenuPreviewDestinationModifier.Transform.contextMenuModifier.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = *(_QWORD *)(a1 + 24);
  MEMORY[0x1E0C80A78](a1, a2);
  v6 = *(_QWORD *)(v5 + 16);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + *(int *)(v10 + 72), v6, v8);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v15 = v6;
  v16 = v4;
  v17 = v12;
  v18 = v13;
  v14 = *(_OWORD *)(a1 + 48);
  v19 = v14;
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

void sub_187AE021C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v6 + *(int *)(a1 + 68), v1);
  if (!ContextMenuPreviewDestinationModifier.Transform.isDisabled.getter(v5, v9))
  {
    v10 = *(_QWORD *)(v2 + 16);
    *(_BYTE *)(v8 - 144) = *(_BYTE *)(v2 + 8);
    *(_QWORD *)(v8 - 136) = v10;
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CE7320]);
    State.projectedValue.getter();
  }
  ContextMenuPreviewModifier.init(menuView:preview:hidePreview:previewAction:)(v3);
}

BOOL ContextMenuPreviewDestinationModifier.Transform.isDisabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  _BYTE v13[8];
  uint64_t v14;

  v3 = v2;
  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of NavigationAuthority?(v3 + *(int *)(v8 + 84), (uint64_t)v13);
  v9 = v14;
  outlined destroy of NavigationAuthority?((uint64_t)v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, a1);
  v10 = v9 == 1 || v7[*(int *)(a1 + 80) + 8] == 6;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  return v10;
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuPreviewDestinationModifier<A, B, C>()
{
  static ContextMenuPreviewDestinationModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContextMenuPreviewDestinationModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewDestinationModifier<A, B, C>, a5);
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)();
}

void ContextMenuPreviewResponder.preview.didset(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v2 = *v1;
  v3 = class metadata base offset for ContextMenuPreviewResponder;
  v4 = (uint64_t *)(*v1 + class metadata base offset for ContextMenuPreviewResponder);
  v5 = *v4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v22 - v14;
  v16 = *(void **)((char *)v1 + v4[3]);
  if (v16)
  {
    v17 = (char *)v1 + *(_QWORD *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v17, v6);
    v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v18((uint64_t)v10, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, v5);
      if (v18(v23, 1, v5) != 1)
      {
        v19 = v16;
        specialized UIHostingController.rootView.setter((uint64_t)v15);
        MEMORY[0x1E0C80A78](v20, v21);
        *(&v22 - 2) = (uint64_t)v19;
        static Update.ensure<A>(_:)();

      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v5);
    }
  }
}

void closure #1 in ContextMenuPreviewResponder.preview.didset(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  CGSize v10;

  v1 = *MEMORY[0x1E0DEEDD8] & *a1;
  objc_msgSend(a1, sel_preferredContentSize);
  v3 = v2;
  v5 = v4;
  v6 = (void *)specialized UIHostingController.host.getter();
  v8 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v7);
  v9 = v6;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v8);
  v10 = ViewRendererHost.idealSize()();

  UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v5, v3), v10);
}

uint64_t ContextMenuPreviewResponder.previewHost.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v1 = v0;
  v2 = *v0;
  v3 = class metadata base offset for ContextMenuPreviewResponder;
  v4 = (uint64_t *)(*v0 + class metadata base offset for ContextMenuPreviewResponder);
  v5 = *v4;
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - v9;
  v11 = *(void **)((char *)v1 + v4[3]);
  if (v11)
  {
    v18 = v11;
    return (uint64_t)v11;
  }
  else
  {
    v12 = (char *)v1 + *(_QWORD *)(v3 + v2 + 16);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v10, 1, v5);
    if ((_DWORD)result != 1)
    {
      type metadata accessor for UIHostingController(0, v5, *(_QWORD *)(class metadata base offset for ContextMenuPreviewResponder + v2 + 8), v14);
      specialized UIHostingController.__allocating_init(rootView:)((uint64_t)v10, v15, v16, v17);
    }
    __break(1u);
  }
  return result;
}

void closure #1 in ContextMenuPreviewResponder.previewHost.getter(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  CGSize v6;

  v1 = *MEMORY[0x1E0DEEDD8] & *a1;
  v2 = (void *)specialized UIHostingController.host.getter();
  v4 = type metadata accessor for _UIHostingView(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = v2;
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for _UIHostingView<A>, v4);
  v6 = ViewRendererHost.idealSize()();

  UIHostingController.idealSizeDidChange(from:to:)((CGSize)0, v6);
}

uint64_t (*ContextMenuPreviewResponder.previewProvider.getter())()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t (*result)();
  uint64_t v10;

  v1 = (uint64_t *)(*v0 + class metadata base offset for ContextMenuPreviewResponder);
  v2 = *v1;
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v10 - v6;
  v8 = (char *)v0 + v1[2];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v8, v3);
  LODWORD(v2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v7, 1, v2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  result = 0;
  if ((_DWORD)v2 != 1)
  {
    swift_retain();
    return partial apply for closure #1 in ContextMenuPreviewResponder.previewProvider.getter;
  }
  return result;
}

Swift::Void __swiftcall ContextMenuPreviewResponder.extendPrintTree(string:)(Swift::String *string)
{
  Swift::String v1;

  v1._object = (void *)0x8000000187BF1780;
  v1._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v1);
}

uint64_t ContextMenuPreviewResponder.init(inputs:space:itemList:displayList:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = a1[2];
  v7 = *((_DWORD *)a1 + 20);
  v11 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2
                                                                            + class metadata base offset for ContextMenuPreviewResponder)
                                                                - 8)
                                                    + 56))(v2 + *(_QWORD *)(*(_QWORD *)v2 + class metadata base offset for ContextMenuPreviewResponder + 16), 1, 1);
  *(_QWORD *)(v2 + *(_QWORD *)(class metadata base offset for ContextMenuPreviewResponder + *(_QWORD *)v2 + 24)) = 0;
  *(_QWORD *)(v2 + 300) = 0;
  *(_BYTE *)(v2 + 308) = 1;
  *(_DWORD *)(v2 + 312) = 0;
  *(_BYTE *)(v2 + 316) = 1;
  *(_QWORD *)(v2 + 288) = 0;
  *(_DWORD *)(v2 + 296) = 0;
  swift_retain();
  *(_QWORD *)(v2 + 288) = AGCreateWeakAttribute();
  swift_release();
  v14 = v5;
  v15 = v6;
  v8 = a1[4];
  v16 = a1[3];
  v17 = v8;
  v9 = *(_OWORD *)(a1 + 7);
  v18 = *(_OWORD *)(a1 + 5);
  v19 = v9;
  v20 = a1[9];
  v21 = v7;
  v12 = v11;
  v13 = v4;
  return UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v13, &v12);
}

void ContextMenuPreviewResponder.__ivar_destroyer()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + *(_QWORD *)(*v0 + class metadata base offset for ContextMenuPreviewResponder + 16);
  v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

_QWORD *ContextMenuPreviewResponder.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  v0 = (_QWORD *)DefaultLayoutViewResponder.deinit();
  v1 = (char *)v0 + *(_QWORD *)(class metadata base offset for ContextMenuPreviewResponder + *v0 + 16);
  v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t ContextMenuPreviewResponder.__deallocating_deinit()
{
  ContextMenuPreviewResponder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContextMenuPreviewResponder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContextMenuPreviewResponder);
}

uint64_t destroy for ContextMenuPreviewAction(uint64_t a1)
{
  return outlined consume of ContextMenuPreviewAction(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ContextMenuPreviewAction(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ContextMenuPreviewAction(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ContextMenuPreviewAction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContextMenuPreviewAction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ContextMenuPreviewAction(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ContextMenuPreviewAction()
{
  return &type metadata for ContextMenuPreviewAction;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewDestinationModifier(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(a3[3] - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = a3[4];
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) > v8)
    v8 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = *(_QWORD *)(v4 + 64) + v11;
  v13 = *(_QWORD *)(v6 + 64);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_25;
  v16 = ((v13 + v14 + (v12 & ~v11)) & ~v14) + *(_QWORD *)(v10 + 64);
  v17 = 8 * v16;
  if (v16 <= 3)
  {
    v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      v18 = *(_DWORD *)(a1 + v16);
      if (!v18)
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 > 0xFF)
    {
      v18 = *(unsigned __int16 *)(a1 + v16);
      if (!*(_WORD *)(a1 + v16))
        goto LABEL_25;
      goto LABEL_16;
    }
    if (v19 < 2)
    {
LABEL_25:
      if (v8)
      {
        if (v5 == v8)
          return (*(uint64_t (**)(void))(v4 + 48))();
        v22 = (v12 + a1) & ~v11;
        if (v7 == v8)
          return (*(uint64_t (**)(uint64_t))(v6 + 48))(v22);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v22 + v13 + v14) & ~v14, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + v16);
  if (!*(_BYTE *)(a1 + v16))
    goto LABEL_25;
LABEL_16:
  v20 = (v18 - 1) << v17;
  if (v16 > 3)
    v20 = 0;
  if ((_DWORD)v16)
  {
    if (v16 <= 3)
      v21 = ((v13 + v14 + (v12 & ~(_DWORD)v11)) & ~(_DWORD)v14) + *(_DWORD *)(v10 + 64);
    else
      v21 = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for ContextMenuPreviewDestinationModifier(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(a4[4] - 8);
  if (*(_DWORD *)(v8 + 84) > v7)
    v7 = *(_DWORD *)(v8 + 84);
  v9 = ((*(_QWORD *)(v6 + 64)
       + *(unsigned __int8 *)(v8 + 80)
       + ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
     + *(_QWORD *)(v8 + 64);
  if (a3 > v7)
  {
    if (v9 <= 3)
    {
      v12 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        v10 = 4u;
      }
      else if (v12 >= 0x100)
      {
        v10 = 2;
      }
      else
      {
        v10 = v12 > 1;
      }
    }
    else
    {
      v10 = 1u;
    }
  }
  else
  {
    v10 = 0u;
  }
  if (v7 < a2)
  {
    v11 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }
        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X21 }
}

void type metadata accessor for ContextMenuPreviewDestinationModifier()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t type metadata completion function for ContextMenuPreviewModifier()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v6 + 64) + v9;
  v11 = *(_QWORD *)(v8 + 64);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((((v10 + ((v7 + 17) & ~v7)) & ~v9) + v11) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    v33 = ~v9;
    *a1 = *a2;
    v16 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    v18 = *(_QWORD *)v17;
    v19 = *(_BYTE *)(v17 + 8);
    v31 = v5;
    v32 = v4;
    outlined copy of Environment<Bool>.Content(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    *(_BYTE *)(v16 + 8) = v19;
    v20 = (v17 + v7 + 9) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))((v16 + v7 + 9) & ~v7, v20, v31);
    v21 = (((v16 + v7 + 9) & ~v7) + v10) & v33;
    v22 = (v20 + v10) & v33;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v21, v22, v32);
    *(_BYTE *)(v21 + v11) = *(_BYTE *)(v22 + v11);
    v23 = ((v21 + v11) & 0xFFFFFFFFFFFFFFF8) + 8;
    v24 = (v22 + v11) & 0xFFFFFFFFFFFFFFF8;
    v25 = (uint64_t *)(v24 + 8);
    v26 = *(_BYTE *)(v24 + 24);
    if ((v26 & 0x7E) != 0)
    {
      v27 = *(_OWORD *)v25;
      *(_BYTE *)(((v21 + v11) & 0xFFFFFFFFFFFFFFF8) + 24) = *(_BYTE *)(v24 + 24);
      *(_OWORD *)v23 = v27;
    }
    else
    {
      v28 = *v25;
      v29 = *(_QWORD *)(v24 + 16);
      outlined copy of ContextMenuPreviewAction(*v25, v29, *(_BYTE *)(v24 + 24));
      *(_QWORD *)v23 = v28;
      *(_QWORD *)(v23 + 8) = v29;
      *(_BYTE *)(v23 + 16) = v26;
    }
    return a1;
  }
  else
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v15 = v14 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
    swift_retain();
  }
  return (_DWORD *)v15;
}

uint64_t destroy for ContextMenuPreviewModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;

  v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(_QWORD *)v3, *(_BYTE *)(v3 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = (*(uint64_t (**)(unint64_t))(v7 + 8))(v8);
  v10 = (v8 + *(_QWORD *)(v7 + 64)) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v10 + 24) & 0x7E) == 0)
    return outlined consume of ContextMenuPreviewAction(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_BYTE *)(v10 + 24));
  return result;
}

_DWORD *initializeWithCopy for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  v8 = *(_BYTE *)(v6 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v6, v8);
  *(_QWORD *)v5 = v7;
  *(_BYTE *)(v5 + 8) = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 9 + v5) & ~v10;
  v12 = (v10 + 9 + v6) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v9 + 64) + v14;
  v16 = (v15 + v11) & ~v14;
  v17 = (v15 + v12) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = v16 + v18;
  v20 = v17 + v18;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  v22 = v20 & 0xFFFFFFFFFFFFFFF8;
  v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  v24 = *(_BYTE *)(v22 + 24);
  if ((v24 & 0x7E) != 0)
  {
    v25 = *(_OWORD *)v23;
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(v23 + 16);
    *(_OWORD *)v21 = v25;
  }
  else
  {
    v26 = *(_QWORD *)v23;
    v27 = *(_QWORD *)(v23 + 8);
    outlined copy of ContextMenuPreviewAction(*(_QWORD *)v23, v27, *(_BYTE *)(v22 + 24));
    *(_QWORD *)v21 = v26;
    *(_QWORD *)(v21 + 8) = v27;
    *(_BYTE *)(v21 + 16) = v24;
  }
  return a1;
}

_DWORD *assignWithCopy for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  v8 = *(_BYTE *)(v6 + 8);
  outlined copy of Environment<Bool>.Content(*(_QWORD *)v6, v8);
  v9 = *(_QWORD *)v5;
  v10 = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v5 = v7;
  *(_BYTE *)(v5 + 8) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 9 + v5) & ~v12;
  v14 = (v12 + 9 + v6) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v13, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v11 + 64) + v16;
  v18 = (v17 + v13) & ~v16;
  v19 = (v17 + v14) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v18 + v20;
  v22 = v19 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = v21 & 0xFFFFFFFFFFFFFFF8;
  v24 = v23 + 8;
  v25 = v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 8;
  v27 = *(_BYTE *)(v25 + 24);
  if ((*(_BYTE *)(v23 + 24) & 0x7E) == 0)
  {
    if ((v27 & 0x7E) == 0)
    {
      v32 = *(_QWORD *)v26;
      v33 = *(_QWORD *)(v25 + 16);
      outlined copy of ContextMenuPreviewAction(v32, v33, v27);
      v34 = *(_QWORD *)v24;
      v35 = *(_QWORD *)(v24 + 8);
      *(_QWORD *)v24 = v32;
      *(_QWORD *)(v24 + 8) = v33;
      v36 = *(_BYTE *)(v24 + 16);
      *(_BYTE *)(v24 + 16) = v27;
      outlined consume of ContextMenuPreviewAction(v34, v35, v36);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(*(_QWORD *)v24, *(_QWORD *)(v23 + 16), *(_BYTE *)(v23 + 24));
    goto LABEL_6;
  }
  if ((v27 & 0x7E) != 0)
  {
LABEL_6:
    v30 = *(_OWORD *)v26;
    *(_BYTE *)(v24 + 16) = *(_BYTE *)(v26 + 16);
    *(_OWORD *)v24 = v30;
    return a1;
  }
  v28 = *(_QWORD *)v26;
  v29 = *(_QWORD *)(v25 + 16);
  outlined copy of ContextMenuPreviewAction(v28, v29, v27);
  *(_QWORD *)v24 = v28;
  *(_QWORD *)(v24 + 8) = v29;
  *(_BYTE *)(v24 + 16) = v27;
  return a1;
}

_DWORD *initializeWithTake for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(v6 + 8);
  *(_QWORD *)v5 = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 9 + v5) & ~v9;
  v11 = (v9 + 9 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v12 + v14;
  v16 = (v15 + v10) & ~v14;
  v17 = (v15 + v11) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  v18 = *(_QWORD *)(v13 + 64);
  v19 = v16 + v18;
  v20 = v17 + v18;
  *(_BYTE *)v19 = *(_BYTE *)v20;
  v19 &= 0xFFFFFFFFFFFFFFF8;
  v20 &= 0xFFFFFFFFFFFFFFF8;
  v21 = *(_BYTE *)(v20 + 24);
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
  *(_BYTE *)(v19 + 24) = v21;
  return a1;
}

_DWORD *assignWithTake for ContextMenuPreviewModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  *a1 = *a2;
  v5 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  v6 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_BYTE *)(v6 + 8);
  v8 = *(_QWORD *)v5;
  v9 = *(_BYTE *)(v5 + 8);
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *(_BYTE *)(v5 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + 9 + v5) & ~v11;
  v13 = (v11 + 9 + v6) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v18, v19);
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v18 + v20;
  v22 = v19 + v20;
  *(_BYTE *)v21 = *(_BYTE *)v22;
  v23 = v21 & 0xFFFFFFFFFFFFFFF8;
  v24 = v23 + 8;
  v25 = v22 & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 8;
  v27 = *(_BYTE *)(v23 + 24);
  if ((v27 & 0x7E) == 0)
  {
    v28 = *(_BYTE *)(v25 + 24);
    v29 = *(_QWORD *)v24;
    v30 = *(_QWORD *)(v23 + 16);
    if ((v28 & 0x7E) == 0)
    {
      *(_OWORD *)v24 = *(_OWORD *)v26;
      *(_BYTE *)(v23 + 24) = v28;
      outlined consume of ContextMenuPreviewAction(v29, v30, v27);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(v29, v30, v27);
  }
  v31 = *(_OWORD *)v26;
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v26 + 16);
  *(_OWORD *)v24 = v31;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_DWORD *)(v3 + 84);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (v4 <= *(_DWORD *)(v5 + 84))
    v6 = *(_DWORD *)(v5 + 84);
  else
    v6 = *(_DWORD *)(v3 + 84);
  if (v6 <= 0xFE)
    v7 = 254;
  else
    v7 = v6;
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = *(_QWORD *)(v3 + 64);
  v10 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    v16 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    if (v6 > 0xFE)
    {
      v18 = (v16 + v8 + 9) & ~v8;
      if (v4 == v7)
        return (*(uint64_t (**)(uint64_t, _QWORD))(v3 + 48))(v18, *(unsigned int *)(v3 + 84));
      else
        return (*(uint64_t (**)(uint64_t))(v5 + 48))((v18 + v9 + v10) & ~v10);
    }
    else
    {
      v17 = *(unsigned __int8 *)(v16 + 8);
      if (v17 > 1)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  else
  {
    v11 = ((((v9 + v10 + ((v8 + 17) & ~v8)) & ~v10) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + 25;
    if (v11 < 4)
      v12 = ((a2 - v7 + 255) >> (8 * v11)) + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    return ((uint64_t (*)(void))((char *)&loc_187AE1A90 + 4 * byte_187C8C05E[v14]))();
  }
}

void storeEnumTagSinglePayload for ContextMenuPreviewModifier(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84))
    v7 = *(_DWORD *)(v6 + 84);
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = ((((*(_QWORD *)(v5 + 64)
         + *(unsigned __int8 *)(v6 + 80)
         + ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8)
     + 25;
  if (v8 >= a3)
  {
    v12 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v8 + 255) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X6 }
  }
  if (v9 >= 4)
    v13 = ~v8 + a2;
  else
    v13 = (~(_BYTE)v8 + a2);
  bzero(a1, v9);
  if ((_DWORD)v9 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_187AE1CAC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AE1D28);
}

void sub_187AE1CB4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AE1CBCLL);
  JUMPOUT(0x187AE1D28);
}

void sub_187AE1D00()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE1D28);
}

void sub_187AE1D08()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE1D28);
}

void sub_187AE1D10(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (a2)
  {
    if (v4 > 0xFE)
    {
      if (v2 == v3)
        JUMPOUT(0x187AE1D50);
      JUMPOUT(0x187AE1D3CLL);
    }
    if (a2 > 0xFE)
      JUMPOUT(0x187AE1D1CLL);
    *(_BYTE *)(((v5 + 11) & 0xFFFFFFFFFFFFFFF8) + 8) = -(char)a2;
  }
  JUMPOUT(0x187AE1D28);
}

void type metadata accessor for ContextMenuPreviewModifier()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for ViewModifier in ContextMenuPreviewModifier<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuPreviewDestinationModifier<A, B, C>()
{
  return &protocol witness table for ContextMenuPreviewDestinationModifier<A, B, C>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuPreviewModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ContextMenuPreviewModifierCore()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in ContextMenuPreviewModifier.body(content:)()
{
  closure #1 in ContextMenuPreviewModifier.body(content:)();
}

void partial apply for closure #2 in ContextMenuPreviewModifier.body(content:)()
{
  closure #2 in ContextMenuPreviewModifier.body(content:)();
}

void type metadata accessor for ContextMenuPreviewDestinationModifier.Transform()
{
  JUMPOUT(0x18D75FF28);
}

void type metadata accessor for ContextMenuPreviewDestinationModifier.Child()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for closure #1 in ContextMenuPreviewResponder.previewHost.getter()
{
  uint64_t v0;

  closure #1 in ContextMenuPreviewResponder.previewHost.getter(*(_QWORD **)(v0 + 16));
}

void type metadata completion function for ContextMenuPreviewDestinationModifier.Transform()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier();
}

uint64_t initializeBufferWithCopyOfBuffer for ContextMenuPreviewDestinationModifier.Transform(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  char v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(*(_QWORD *)(a3[4] - 8) + 80);
  v4 = *(_DWORD *)(*(_QWORD *)(a3[3] - 8) + 80);
  v5 = *(_DWORD *)(*(_QWORD *)(a3[2] - 8) + 80);
  v6 = *a2;
  *a1 = *a2;
  v7 = ((v4 | v3) | v5) & 0xF8 | 7u;
  v8 = v6 + ((v7 + 16) & ~v7);
  swift_retain();
  return v8;
}

uint64_t destroy for ContextMenuPreviewDestinationModifier.Transform(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;

  v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v4 = a2[3];
  v5 = *(_QWORD *)(a2[2] - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(_DWORD *)(v6 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80));
  v10 = *(_DWORD *)(v6 + 80);
  v11 = *(_DWORD *)(v8 + 80);
  v12 = (v3 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t))(v5 + 8))(v12);
  v13 = *(_QWORD *)(v5 + 64) + v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v13 + v12) & ~v10, v4);
  v14 = *(_QWORD *)(v6 + 64) + v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))((v14 + ((v13 + v12) & ~v10)) & ~v11, v7);
  v16 = *(_QWORD *)(((((((v12 + *(_QWORD *)(v8 + 64) + ((v14 + (v13 & ~v10)) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 31) & 0xFFFFFFFFFFFFFFF8)
                  + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  if ((int)v16 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for ContextMenuPreviewDestinationModifier.Transform(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;

  v4 = *a2;
  v3 = (unint64_t)a2 + 15;
  *a1 = v4;
  v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v5 = *(_BYTE *)(v3 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 8);
  v6 = a3[2];
  v7 = a3[3];
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v32 = a3[4];
  v11 = *(_QWORD *)(v32 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v11 + 80));
  v14 = (v13 + 16 + v5) & ~v13;
  v15 = (v13 + 16 + (v3 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v16(v14, v15, v6);
  v17 = *(_QWORD *)(v8 + 64) + v10;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))((v17 + v14) & ~v10, (v17 + v15) & ~v10, v7);
  v18 = *(_QWORD *)(v9 + 64) + v12;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))((v18 + ((v17 + v14) & ~v10)) & ~v12, (v18 + ((v17 + v15) & ~v10)) & ~v12, v32);
  v19 = ((v18 + (v17 & ~v10)) & ~v12) + *(_QWORD *)(v11 + 64) + 7;
  v20 = v19 + v14;
  v21 = (_QWORD *)((v19 + v15) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v20 = *v21;
  v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_OWORD *)v23;
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_OWORD *)v22 = v24;
  v25 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)(v26 + 8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  if ((int)v27 - 1 < 0)
  {
    swift_weakCopyInit();
    *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    v28 = *(_OWORD *)v26;
    *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v25 = v28;
  }
  v29 = (v25 + 27) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v26 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  return a1;
}

_QWORD *assignWithCopy for ContextMenuPreviewDestinationModifier.Transform(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v4 = *(_BYTE *)v5;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 8);
  swift_retain();
  swift_release();
  v6 = a3[3];
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v33 = a3[4];
  v10 = *(_QWORD *)(v33 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80));
  v13 = (v12 + 16 + v4) & ~v12;
  v14 = (v12 + 16 + v5) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v13, v14);
  v15 = *(_QWORD *)(v7 + 64) + v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))((v15 + v13) & ~v9, (v15 + v14) & ~v9, v6);
  v16 = *(_QWORD *)(v8 + 64) + v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))((v16 + ((v15 + v13) & ~v9)) & ~v11, (v16 + ((v15 + v14) & ~v9)) & ~v11, v33);
  v17 = ((v16 + (v15 & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v18 = (_QWORD *)((v17 + v13) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  *(_OWORD *)v20 = v22;
  v23 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v23 + 8);
  if (v25 >= 0xFFFFFFFF)
    LODWORD(v25) = -1;
  v26 = v25 - 1;
  v27 = *(_QWORD *)(v24 + 8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  v28 = v27 - 1;
  if (v26 < 0)
  {
    if (v28 < 0)
    {
      swift_weakCopyAssign();
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      swift_retain();
      swift_release();
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v28 & 0x80000000) == 0)
  {
LABEL_10:
    v29 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v23 = v29;
    goto LABEL_11;
  }
  swift_weakCopyInit();
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
  swift_retain();
  swift_retain();
LABEL_11:
  v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_DWORD *)(v30 + 4) = *(_DWORD *)(v31 + 4);
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  return a1;
}

_QWORD *initializeWithTake for ContextMenuPreviewDestinationModifier.Transform(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;

  *a1 = *a2;
  v3 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  v5 = a3[3];
  v6 = *(_QWORD *)(a3[2] - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v29 = a3[4];
  v9 = *(_QWORD *)(v29 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = (*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80));
  v12 = ((unint64_t)v3 + v11 + 16) & ~v11;
  v13 = ((unint64_t)v4 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v6 + 32))(v12, v13, a3[2]);
  v14 = *(_QWORD *)(v6 + 64) + v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((v14 + v12) & ~v8, (v14 + v13) & ~v8, v5);
  v15 = *(_QWORD *)(v7 + 64) + v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))((v15 + ((v14 + v12) & ~v8)) & ~v10, (v15 + ((v14 + v13) & ~v8)) & ~v10, v29);
  v16 = ((v15 + (v14 & ~v8)) & ~v10) + *(_QWORD *)(v9 + 64) + 7;
  v17 = (_QWORD *)((v16 + v12) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v13) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_OWORD *)v20;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v20 + 16);
  *(_OWORD *)v19 = v21;
  v22 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(v23 + 8);
  if (*(_QWORD *)(v23 + 8) >= 0xFFFFFFFFuLL)
    v24 = -1;
  if (v24 - 1 < 0)
  {
    v22 = swift_weakTakeInit();
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
  }
  else
  {
    v25 = *(_OWORD *)v23;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
    *(_OWORD *)v22 = v25;
  }
  v26 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  return a1;
}

_QWORD *assignWithTake for ContextMenuPreviewDestinationModifier.Transform(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v4 = *(_BYTE *)v5;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 8);
  swift_release();
  v6 = a3[3];
  v7 = *(_QWORD *)(a3[2] - 8);
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v33 = a3[4];
  v10 = *(_QWORD *)(v33 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80));
  v13 = (v12 + 16 + v4) & ~v12;
  v14 = (v12 + 16 + v5) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v13, v14);
  v15 = *(_QWORD *)(v7 + 64) + v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))((v15 + v13) & ~v9, (v15 + v14) & ~v9, v6);
  v16 = *(_QWORD *)(v8 + 64) + v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))((v16 + ((v15 + v13) & ~v9)) & ~v11, (v16 + ((v15 + v14) & ~v9)) & ~v11, v33);
  v17 = ((v16 + (v15 & ~v9)) & ~v11) + *(_QWORD *)(v10 + 64) + 7;
  v18 = (_QWORD *)((v17 + v13) & 0xFFFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v17 + v14) & 0xFFFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_OWORD *)v21;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  *(_OWORD *)v20 = v22;
  v23 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(_QWORD *)(v23 + 8);
  if (*(_QWORD *)(v23 + 8) >= 0xFFFFFFFFuLL)
    v25 = -1;
  v26 = v25 - 1;
  v27 = *(_QWORD *)(v24 + 8);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  v28 = v27 - 1;
  if (v26 < 0)
  {
    if (v28 < 0)
    {
      swift_weakTakeAssign();
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      swift_release();
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v28 & 0x80000000) == 0)
  {
LABEL_10:
    v29 = *(_OWORD *)v24;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v24 + 16);
    *(_OWORD *)v23 = v29;
    goto LABEL_11;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
LABEL_11:
  v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_DWORD *)(v30 + 4) = *(_DWORD *)(v31 + 4);
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewDestinationModifier.Transform(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a3[2];
  v5 = a3[3];
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  v12 = a3[4];
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) > v11)
    v11 = *(_DWORD *)(v13 + 84);
  if (v11 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = v11;
  if (!a2)
    return 0;
  v15 = *(_DWORD *)(v9 + 80);
  v16 = *(_DWORD *)(v13 + 80);
  v17 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v13 + 80));
  v18 = *(_QWORD *)(v7 + 64) + v15;
  v19 = *(_QWORD *)(v9 + 64) + v16;
  if (v14 < a2)
  {
    v20 = ((((((((*(_QWORD *)(v13 + 64) + ((v19 + (v18 & ~v15)) & ~v16) + ((v17 + 24) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 31) & 0xFFFFFFFFFFFFFFF8)
          + 27) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    v21 = (a2 - v14 + 255) >> (8 * v20);
    if (v20 < 4)
      v22 = v21 + 1;
    else
      v22 = 2;
    if (v22 >= 0x10000)
      v23 = 4;
    else
      v23 = 2;
    if (v22 < 0x100)
      v23 = 1;
    if (v22 >= 2)
      v24 = v23;
    else
      v24 = 0;
    __asm { BR              X22 }
  }
  v26 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 > 0x7FFFFFFE)
  {
    v29 = (v26 + v17 + 16) & ~v17;
    if (v8 == v11)
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(v29, *(unsigned int *)(v7 + 84), v6);
    }
    else
    {
      v30 = (v18 + v29) & ~v15;
      if ((_DWORD)v10 == v11)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v30, v10, v5);
      else
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))((v19 + v30) & ~v16, *(unsigned int *)(v13 + 84), v12);
    }
  }
  else
  {
    v27 = *(_QWORD *)(v26 + 8);
    if (v27 >= 0xFFFFFFFF)
      LODWORD(v27) = -1;
    v28 = v27 - 1;
    if (v28 < 0)
      v28 = -1;
    return (v28 + 1);
  }
}

void storeEnumTagSinglePayload for ContextMenuPreviewDestinationModifier.Transform(_BYTE *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v5 = *(_QWORD *)(a4[2] - 8);
  v6 = *(_QWORD *)(a4[3] - 8);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v6 + 84);
  v10 = *(_QWORD *)(a4[4] - 8);
  v11 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84) > v9)
    v9 = *(_DWORD *)(v10 + 84);
  if (v9 <= 0x7FFFFFFE)
    v12 = 2147483646;
  else
    v12 = v9;
  v13 = (((((((((((v8 | v7 | v11) + 24) & ~(unint64_t)(v8 | v7 | v11))
              + ((*(_QWORD *)(v6 + 64)
                + v11
                + ((*(_QWORD *)(v5 + 64) + v8) & ~(unint64_t)v8)) & ~(unint64_t)v11)
              + *(_QWORD *)(v10 + 64)
              + 7) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 27) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  if (v12 >= a3)
  {
    v15 = 0u;
    if (v12 >= a2)
      goto LABEL_21;
  }
  else
  {
    if (v13 <= 3)
      v14 = ((a3 - v12 + 255) >> (8
                                * ((((((((((((v8 | v7 | v11) + 24) & ~(v8 | v7 | v11))
                                         + ((*(_BYTE *)(v6 + 64) + v11 + ((*(_BYTE *)(v5 + 64) + v8) & ~(_BYTE)v8)) & ~(_BYTE)v11)
                                         + *(_BYTE *)(v10 + 64)
                                         + 7) & 0xF8)
                                       + 15) & 0xF8)
                                     + 31) & 0xF8)
                                   + 27) & 0xF8)
                                 + 9)))
          + 1;
    else
      v14 = 2;
    if (v14 >= 0x10000)
      v15 = 4;
    else
      v15 = 2;
    if (v14 < 0x100)
      v15 = 1;
    if (v14 < 2)
      v15 = 0;
    if (v12 >= a2)
LABEL_21:
      __asm { BR              X23 }
  }
  if (v13 >= 4)
    v16 = ~v12 + a2;
  else
    v16 = (~(_BYTE)v12 + a2);
  bzero(a1, v13);
  if ((_DWORD)v13 == 1)
    *a1 = v16;
  else
    *(_DWORD *)a1 = v16;
  __asm { BR              X10 }
}

void sub_187AE2CC4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2CCC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AE2CD4);
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2D68()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2D70()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2D78()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2D80(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  void *v7;
  int v8;
  size_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v11 + v12) = 0;
  if (a2)
  {
    v6 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    if (v10 > 0x7FFFFFFE)
    {
      v7 = (void *)((v6 + a6 + 16) & v13);
      if (v10 >= a2)
        JUMPOUT(0x187AE2DACLL);
      if ((_DWORD)v9)
      {
        if (v9 <= 3)
          v8 = v9;
        else
          v8 = 4;
        bzero(v7, v9);
        __asm { BR              X10 }
      }
    }
    else
    {
      if (a2 > 0x7FFFFFFE)
        JUMPOUT(0x187AE2D8CLL);
      *(_QWORD *)(v6 + 8) = a2;
    }
  }
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2E08()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2E18()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x187AE2D98);
}

void sub_187AE2E20()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x187AE2D98);
}

uint64_t type metadata completion function for ContextMenuPreviewModifierCore()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContextMenuPreviewModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v8 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (((((v9 & ~v8) + v10) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    v16 = ((unint64_t)v4 + v9) & v15;
    v17 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v16, v17, v5);
    *(_BYTE *)(v16 + v10) = *(_BYTE *)(v17 + v10);
    v18 = (v16 + v10) & 0xFFFFFFFFFFFFFFFCLL;
    v19 = (v17 + v10) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)(v18 + 4) = *(_DWORD *)(v19 + 4);
    v20 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_BYTE *)(v21 + 16);
    if ((v22 & 0x7E) != 0)
    {
      v23 = *(_OWORD *)v21;
      *(_BYTE *)(v20 + 16) = *(_BYTE *)(v21 + 16);
      *(_OWORD *)v20 = v23;
    }
    else
    {
      v24 = *(_QWORD *)v21;
      v25 = *(_QWORD *)(v21 + 8);
      outlined copy of ContextMenuPreviewAction(*(_QWORD *)v21, v25, *(_BYTE *)(v21 + 16));
      *(_QWORD *)v20 = v24;
      *(_QWORD *)(v20 + 8) = v25;
      *(_BYTE *)(v20 + 16) = v22;
    }
  }
  return v4;
}

uint64_t destroy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v7);
  v9 = (((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8;
  if ((*(_BYTE *)(v9 + 16) & 0x7E) == 0)
    return outlined consume of ContextMenuPreviewAction(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16));
  return result;
}

uint64_t initializeWithCopy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFFCLL;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  if ((v18 & 0x7E) != 0)
  {
    v19 = *(_OWORD *)v17;
    *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
    *(_OWORD *)v16 = v19;
  }
  else
  {
    v20 = *(_QWORD *)v17;
    v21 = *(_QWORD *)(v17 + 8);
    outlined copy of ContextMenuPreviewAction(*(_QWORD *)v17, v21, *(_BYTE *)(v17 + 16));
    *(_QWORD *)v16 = v20;
    *(_QWORD *)(v16 + 8) = v21;
    *(_BYTE *)(v16 + 16) = v18;
  }
  return a1;
}

uint64_t assignWithCopy for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFFCLL;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  if ((*(_BYTE *)(v16 + 16) & 0x7E) == 0)
  {
    if ((v18 & 0x7E) == 0)
    {
      v23 = *(_QWORD *)v17;
      v24 = *(_QWORD *)(v17 + 8);
      outlined copy of ContextMenuPreviewAction(v23, v24, v18);
      v25 = *(_QWORD *)v16;
      v26 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v16 = v23;
      *(_QWORD *)(v16 + 8) = v24;
      v27 = *(_BYTE *)(v16 + 16);
      *(_BYTE *)(v16 + 16) = v18;
      outlined consume of ContextMenuPreviewAction(v25, v26, v27);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(*(_QWORD *)v16, *(_QWORD *)(v16 + 8), *(_BYTE *)(v16 + 16));
    goto LABEL_6;
  }
  if ((v18 & 0x7E) != 0)
  {
LABEL_6:
    v21 = *(_OWORD *)v17;
    *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
    *(_OWORD *)v16 = v21;
    return a1;
  }
  v19 = *(_QWORD *)v17;
  v20 = *(_QWORD *)(v17 + 8);
  outlined copy of ContextMenuPreviewAction(v19, v20, v18);
  *(_QWORD *)v16 = v19;
  *(_QWORD *)(v16 + 8) = v20;
  *(_BYTE *)(v16 + 16) = v18;
  return a1;
}

uint64_t initializeWithTake for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFFCLL;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v18;
  return a1;
}

uint64_t assignWithTake for ContextMenuPreviewModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFFCLL;
  v15 &= 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v14 + 4) = *(_DWORD *)(v15 + 4);
  v16 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v16 + 16);
  if ((v18 & 0x7E) == 0)
  {
    v19 = *(_BYTE *)(v17 + 16);
    v20 = *(_QWORD *)v16;
    v21 = *(_QWORD *)(v16 + 8);
    if ((v19 & 0x7E) == 0)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *(_BYTE *)(v16 + 16) = v19;
      outlined consume of ContextMenuPreviewAction(v20, v21, v18);
      return a1;
    }
    outlined consume of ContextMenuPreviewAction(v20, v21, v18);
  }
  v22 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContextMenuPreviewModifierCore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6)
    v9 = *(_DWORD *)(v5 + 84);
  else
    v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0xFE)
    v9 = 254;
  if (!a2)
    return 0;
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = *(_QWORD *)(v5 + 64) + v10;
  v12 = *(_QWORD *)(v7 + 64);
  if (v9 >= a2)
  {
    if (v6 == v9)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1, *(unsigned int *)(v5 + 84), v4);
    v19 = (v11 + a1) & ~v10;
    if (v8 == v9)
      return (*(uint64_t (**)(uint64_t))(v7 + 48))(v19);
    v20 = *(unsigned __int8 *)(v19 + v12);
    if (v20 >= 2)
      return ((v20 + 2147483646) & 0x7FFFFFFF) + 1;
    return 0;
  }
  v13 = (((((v11 & ~(_DWORD)v10) + v12) & 0xFFFFFFFC) + 15) & 0xFFFFFFF8) + 17;
  v14 = (a2 - v9 + 255) >> (8 * v13);
  if (v13 < 4)
    v15 = v14 + 1;
  else
    v15 = 2;
  if (v15 >= 0x10000)
    v16 = 4;
  else
    v16 = 2;
  if (v15 < 0x100)
    v16 = 1;
  if (v15 >= 2)
    v17 = v16;
  else
    v17 = 0;
  return ((uint64_t (*)(void))((char *)&loc_187AE3540 + 4 * byte_187C8C080[v17]))();
}

void storeEnumTagSinglePayload for ContextMenuPreviewModifierCore(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE)
    v8 = 254;
  else
    v8 = v7;
  v9 = ((((((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFFCLL)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v8 >= a3)
  {
    v12 = 0u;
    if (v8 >= a2)
      goto LABEL_20;
  }
  else
  {
    if (v9 <= 3)
      v10 = ((a3 - v8 + 255) >> (8 * v9)) + 1;
    else
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v11 = 1;
    if (v10 >= 2)
      v12 = v11;
    else
      v12 = 0;
    if (v8 >= a2)
LABEL_20:
      __asm { BR              X0 }
  }
  if (v9 >= 4)
    v13 = ~v8 + a2;
  else
    v13 = (~(_BYTE)v8 + a2);
  bzero(a1, v9);
  if ((_DWORD)v9 == 1)
    *a1 = v13;
  else
    *(_DWORD *)a1 = v13;
  __asm { BR              X10 }
}

void sub_187AE3738()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x187AE37B4);
}

void sub_187AE3740(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x187AE3748);
  JUMPOUT(0x187AE37B4);
}

void sub_187AE378C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE37B4);
}

void sub_187AE3794()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x187AE37B4);
}

uint64_t sub_187AE379C(uint64_t a1, int a2, int a3)
{
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_WORD *)(v12 + v13) = 0;
  if (!a2)
    JUMPOUT(0x187AE37B4);
  if (v6 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t))(v9 + 56);
    v4 = v12;
  }
  else
  {
    v4 = (v11 + v12) & v7;
    if (a3 != v10)
      JUMPOUT(0x187AE37A8);
    v3 = *(uint64_t (**)(uint64_t))(v8 + 56);
  }
  return v3(v4);
}

void sub_187AE37CC()
{
  type metadata accessor for ContextMenuPreviewModifier();
}

void sub_187AE3800(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuPreviewModifierCore();
}

void sub_187AE383C()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  type metadata accessor for StaticIf();
}

uint64_t sub_187AE38A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[14];

  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  v6 = type metadata accessor for ModifiedContent();
  v14[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v1);
  v14[1] = &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
  v7 = MEMORY[0x1E0CE2E70];
  v8 = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v4, v14);
  v13[0] = v8;
  v13[1] = MEMORY[0x1E0CE5138];
  v12[0] = MEMORY[0x18D75FFDC](v7, v3, v13);
  v12[1] = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, LiftPreviewLabelMarkingEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  v11[0] = v8;
  v11[1] = MEMORY[0x18D75FFDC](v7, v2, v12);
  v10[0] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for <> StaticIf<A, B, C>, a1, v11);
  v10[1] = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return MEMORY[0x18D75FFDC](v7, v6, v10);
}

_UNKNOWN **base witness table accessor for ViewModifier in ContextMenuPreviewModifierCore<A, B>()
{
  return &protocol witness table for ContextMenuPreviewModifierCore<A, B>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ContextMenuPreviewDestinationModifier<A, B, C>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

void base witness table accessor for _AttributeBody in ContextMenuPreviewDestinationModifier<A, B, C>.Child()
{
  JUMPOUT(0x18D75FFDCLL);
}

void specialized ContextMenuPreviewResponderFilter.init(modifier:children:inputs:responder:)()
{
  type metadata accessor for ContextMenuPreviewModifierCore();
}

uint64_t sub_187AE3A80()
{
  int v0;
  int v1;
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int OffsetAttribute2;
  uint64_t v10;
  int v11;

  OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  v8 = _ViewInputs.animatedPosition()();
  v7 = _ViewInputs.transform.getter();
  v6 = _ViewInputs.animatedSize()();
  v5 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  v0 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v1 = AGGraphCreateOffsetAttribute2();
  v2 = AGGraphCreateOffsetAttribute2();
  swift_retain();
  AGGraphCreateOffsetAttribute2();
  result = AGCreateWeakAttribute();
  *(_DWORD *)v4 = OffsetAttribute2;
  *(_DWORD *)(v4 + 4) = v11;
  *(_DWORD *)(v4 + 8) = v8;
  *(_DWORD *)(v4 + 12) = v7;
  *(_DWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 20) = v5;
  *(_DWORD *)(v4 + 24) = v0;
  *(_DWORD *)(v4 + 28) = v1;
  *(_DWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 36) = result;
  *(_QWORD *)(v4 + 48) = v10;
  return result;
}

void type metadata accessor for ContextMenuPreviewResponderFilter()
{
  JUMPOUT(0x18D75FF28);
}

uint64_t initializeWithCopy for ContextMenuPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

void sub_187AE3DA4()
{
  type metadata accessor for ContextMenuPreviewDestinationModifier.Transform();
}

void sub_187AE3DE4(uint64_t a1)
{
  MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewDestinationModifier<A, B, C>.Transform, a1);
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuPreviewModifier();
}

uint64_t sub_187AE3E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[18];

  v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for UpdateViewDestinationViewModifier(255, v1, v2, v6);
  type metadata accessor for UpdateViewDestinationRequestProcessor(255, v1, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0DEAFB0]);
  v7 = type metadata accessor for ModifiedContent();
  v8 = type metadata accessor for ModifiedContent();
  v13[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE5318], v3);
  v13[1] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for ContextMenuPreviewModifier<A, B>, a1);
  v9 = MEMORY[0x1E0CE2E70];
  v12[0] = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  v12[1] = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  v11[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v5, v13);
  v11[1] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E60], v7, v12);
  return MEMORY[0x18D75FFDC](v9, v8, v11);
}

void base witness table accessor for _AttributeBody in ContextMenuPreviewResponderFilter<A, B>()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t specialized ContextMenuPreviewResponder.preview.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  _BYTE v11[24];

  v3 = *v1 + class metadata base offset for ContextMenuPreviewResponder;
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-v7];
  v9 = (char *)v1 + *(_QWORD *)(v3 + 16);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v9, v4);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 24))(v9, a1, v4);
  swift_endAccess();
  ContextMenuPreviewResponder.preview.didset((uint64_t)v8);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t outlined retain of ContextMenuPreviewResponderFilter<A, B>(uint64_t a1)
{
  swift_retain();
  return a1;
}

void partial apply for closure #1 in ContextMenuPreviewResponder.preview.didset()
{
  uint64_t v0;

  closure #1 in ContextMenuPreviewResponder.preview.didset(*(_QWORD **)(v0 + 16));
}

uint64_t destroy for SectionedIdentifierAccumulator()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for SectionedIdentifierAccumulator(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

ValueMetadata *type metadata accessor for SectionedIdentifierAccumulator()
{
  return &type metadata for SectionedIdentifierAccumulator;
}

uint64_t SectionedIdentifierAccumulator.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char v31;
  char v32;
  uint64_t v33[2];

  v3 = v2;
  v4 = *a2;
  v33[0] = *a2;
  if (ViewTraitCollection.groupDepth.getter())
    goto LABEL_17;
  v33[0] = v4;
  if ((ViewTraitCollection.isSectioned.getter() & 1) != 0)
  {
    *(_BYTE *)(v2 + 32) = 1;
    *(_BYTE *)(v2 + 48) = 0;
    v33[0] = v4;
    v5 = ViewTraitCollection.isEmptyView.getter();
    v6 = *(_QWORD *)(v2 + 56);
    v7 = *(char **)(v2 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v8 = v5 ^ 1;
    v9 = *((_QWORD *)v7 + 2);
    v10 = *((_QWORD *)v7 + 3);
    v11 = v9 + 1;
    if (v9 >= v10 >> 1)
    {
      v25 = v7;
      v31 = v8;
      v26 = *((_QWORD *)v7 + 2);
      v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v9 + 1, 1, v25);
      v9 = v26;
      v8 = v31;
      v7 = v27;
    }
    *((_QWORD *)v7 + 2) = v11;
    v12 = &v7[16 * v9];
    *((_QWORD *)v12 + 4) = v6;
    v12[40] = 0;
    v12[41] = v8 & 1;
  }
  else
  {
    if ((*(_BYTE *)(v2 + 48) & 1) != 0)
      goto LABEL_15;
    *(_BYTE *)(v2 + 48) = 1;
    v13 = *(_QWORD *)(v2 + 56);
    v7 = *(char **)(v2 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
    v14 = *((_QWORD *)v7 + 2);
    v15 = *((_QWORD *)v7 + 3);
    v16 = v14 + 1;
    if (v14 >= v15 >> 1)
    {
      v28 = v7;
      v29 = *((_QWORD *)v7 + 2);
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v14 + 1, 1, v28);
      v14 = v29;
      v7 = v30;
    }
    *((_QWORD *)v7 + 2) = v16;
    v17 = &v7[16 * v14];
    *((_QWORD *)v17 + 4) = v13;
    *((_WORD *)v17 + 20) = 1;
  }
  *(_QWORD *)(v3 + 8) = v7;
LABEL_15:
  v33[0] = v4;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v32 == 1)
    specialized Set._Variant.insert(_:)(v33, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) - 1);
LABEL_17:
  if (*(_QWORD *)(v3 + 16))
  {
    v33[0] = v4;
    if ((ViewTraitCollection.isSectionFooter.getter() & 1) != 0)
      specialized Set._Variant.insert(_:)(v33, *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16) - 1);
  }
  if (*(_BYTE *)v3 == 1)
  {
    _ViewList_View.elementID.getter();
    v18 = v33[0];
    v19 = v33[1];
    v20 = *(char **)(v3 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    v22 = *((_QWORD *)v20 + 2);
    v21 = *((_QWORD *)v20 + 3);
    if (v22 >= v21 >> 1)
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v22 + 1;
    v23 = &v20[16 * v22];
    *((_QWORD *)v23 + 4) = v18;
    *((_QWORD *)v23 + 5) = v19;
    *(_QWORD *)(v3 + 24) = v20;
  }
  ++*(_QWORD *)(v3 + 56);
  return 1;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance SectionedIdentifierAccumulator(uint64_t a1, uint64_t *a2)
{
  SectionedIdentifierAccumulator.visit(view:traits:)(a1, a2);
  return 1;
}

void View.supportedVolumeViewpoints(_:)()
{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  View.supportedVolumeViewpoints(_:)();
}

uint64_t Button.init(role:action:label:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  char v10;
  _QWORD *v11;
  uint64_t v12;

  v10 = a1[1];
  *a7 = *a1;
  a7[1] = v10;
  v11 = &a7[*(int *)(type metadata accessor for Button(0, a5, a6, (uint64_t)a4) + 36)];
  *v11 = a2;
  v11[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v12 = swift_retain();
  a4(v12);
  return swift_release();
}

uint64_t Button<>.init(_:)@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  *a2 = *a1;
  a2[1] = v4;
  v5 = (uint64_t)&a1[*(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24)];
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(v5, (uint64_t)&a2[*(int *)(v6 + 36)], (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
  return outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t Button<>.init<A>(_:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *a5 = 256;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v11 = v10;
  v12 = (_QWORD *)((char *)a5 + *(int *)(v10 + 36));
  *v12 = a2;
  v12[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)a5 + *(int *)(v11 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
}

uint64_t Button.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)a4 = 256;
  v13 = type metadata accessor for Button(0, v11, v12, v11);
  v14 = MEMORY[0x1E0CE2E18];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(a1, (uint64_t)&a4[*(int *)(v13 + 36)], (uint64_t (*)(_QWORD))MEMORY[0x1E0CE2E18]);
  type metadata accessor for ButtonAction();
  v15 = swift_storeEnumTagMultiPayload();
  a2(v15);
  outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))v14);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&a4[*(int *)(v13 + 40)], v10, a3);
}

__n128 Button.init<>(_:action:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _WORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  __n128 result;
  __n128 v16;

  v8 = *a1;
  v9 = a1[1];
  v10 = *((_BYTE *)a1 + 16);
  *a4 = 256;
  type metadata accessor for Button<Label<Text, Image>>(0);
  v12 = v11;
  v13 = (_QWORD *)((char *)a4 + *(int *)(v11 + 36));
  *v13 = a2;
  v13[1] = a3;
  type metadata accessor for ButtonAction();
  v16 = *(__n128 *)(a1 + 3);
  swift_storeEnumTagMultiPayload();
  v14 = (char *)a4 + *(int *)(v12 + 40);
  *(_QWORD *)v14 = v8;
  *((_QWORD *)v14 + 1) = v9;
  v14[16] = v10;
  result = v16;
  *(__n128 *)(v14 + 24) = v16;
  return result;
}

uint64_t Button<>.init(_:action:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, _WORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  *a3 = 256;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v7 = v6;
  v8 = (_QWORD *)((char *)a3 + *(int *)(v6 + 36));
  *v8 = a1;
  v8[1] = a2;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v9 = (char *)a3 + *(int *)(v7 + 40);
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)v9 = result;
  *((_QWORD *)v9 + 1) = v11;
  v9[16] = v12 & 1;
  *((_QWORD *)v9 + 3) = v13;
  return result;
}

uint64_t Button<>.init(_:image:action:)@<X0>(int a1@<W2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, _WORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a5 = 256;
  type metadata accessor for Button<Label<Text, Image>>(0);
  v11 = v10;
  v12 = (_QWORD *)((char *)a5 + *(int *)(v10 + 36));
  *v12 = a3;
  v12[1] = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v13 = (uint64_t)a5 + *(int *)(v11 + 40);
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(a1, a2, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v14 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
}

uint64_t Button<>.init<A>(_:image:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _WORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *a6 = 256;
  type metadata accessor for Button<Label<Text, Image>>(0);
  v13 = v12;
  v14 = (_QWORD *)((char *)a6 + *(int *)(v12 + 36));
  *v14 = a3;
  v14[1] = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Toggle<>.init<A>(_:image:isOn:)(a1, a2, a5, (uint64_t)a6 + *(int *)(v13 + 40));
  v15 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t Button<>.init(_:role:action:)@<X0>(_BYTE *a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, _BYTE *a4@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v7 = a1[1];
  *a4 = *a1;
  a4[1] = v7;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v9 = v8;
  v10 = &a4[*(int *)(v8 + 36)];
  *v10 = a2;
  v10[1] = a3;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v11 = &a4[*(int *)(v9 + 40)];
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)v11 = result;
  *((_QWORD *)v11 + 1) = v13;
  v11[16] = v14 & 1;
  *((_QWORD *)v11 + 3) = v15;
  return result;
}

uint64_t Button<>.init<A>(_:role:action:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v11 = a2[1];
  *a6 = *a2;
  a6[1] = v11;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E0CE6CF8], MEMORY[0x1E0CE6C58]);
  v13 = v12;
  v14 = &a6[*(int *)(v12 + 36)];
  *v14 = a3;
  v14[1] = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in LabeledContent<>.init<A>(_:value:)(a1, (uint64_t)&a6[*(int *)(v13 + 40)]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
}

uint64_t Button<>.init(_:image:role:action:)@<X0>(int a1@<W2>, uint64_t a2@<X4>, _BYTE *a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _BYTE *a6@<X8>)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v11 = a3[1];
  *a6 = *a3;
  a6[1] = v11;
  type metadata accessor for Button<Label<Text, Image>>(0);
  v13 = v12;
  v14 = &a6[*(int *)(v12 + 36)];
  *v14 = a4;
  v14[1] = a5;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v15 = (uint64_t)&a6[*(int *)(v13 + 40)];
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(a1, a2, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v16 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
}

uint64_t Button<>.init<A>(_:image:role:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X8>)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v13 = a3[1];
  *a7 = *a3;
  a7[1] = v13;
  type metadata accessor for Button<Label<Text, Image>>(0);
  v15 = v14;
  v16 = &a7[*(int *)(v14 + 36)];
  *v16 = a4;
  v16[1] = a5;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  closure #1 in Toggle<>.init<A>(_:image:isOn:)(a1, a2, a6, (uint64_t)&a7[*(int *)(v15 + 40)]);
  v17 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
}

uint64_t Button.init(lnAction:label:)@<X0>(void *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  __int16 v6;

  v6 = 256;
  return Button.init(role:lnAction:perform:label:)((char *)&v6, a1, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a2, a3, a4, a5);
}

uint64_t Button.init(lnAction:perform:label:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  __int16 v8;

  v8 = 256;
  return Button.init(role:lnAction:perform:label:)((char *)&v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t Button.init(role:lnAction:perform:label:)@<X0>(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  char v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  _BYTE *v19;
  id v20;
  uint64_t v21;

  v15 = *a1;
  v16 = a1[1];
  KeyPath = swift_getKeyPath();
  *a8 = v15;
  a8[1] = v16;
  v19 = &a8[*(int *)(type metadata accessor for Button(0, a6, a7, v18) + 36)];
  *(_QWORD *)v19 = KeyPath;
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 0;
  *((_QWORD *)v19 + 3) = a2;
  *((_QWORD *)v19 + 4) = a3;
  *((_QWORD *)v19 + 5) = a4;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  v20 = a2;
  swift_retain();
  v21 = swift_retain();
  a5(v21);
  swift_release();

  return swift_release();
}

_WORD *initializeBufferWithCopyOfBuffer for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = v8 | 7;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 + ((v8 + 75) & ~v8);
  if ((unint64_t)(v11 + 1) > 0x30)
    v12 = v11 + 1;
  else
    v12 = 48;
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v12 + v15 + 1;
  if ((v9 | v15) == 7
    && ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && ((v16 + (((v8 | 7) + 2) & ~(v8 | 7))) & (unint64_t)~v15) + *(_QWORD *)(v14 + 64) <= 0x18)
  {
    *a1 = *a2;
    v20 = ((unint64_t)a1 + v9 + 2) & ~v9;
    v21 = ((unint64_t)a2 + v9 + 2) & ~v9;
    v22 = *(unsigned __int8 *)(v21 + v12);
    if (v22 >= 3)
    {
      if (v12 <= 3)
        v23 = v12;
      else
        v23 = 4;
      __asm { BR              X13 }
    }
    v24 = ~v15;
    if (v22 == 2)
    {
      v54 = ~v15;
      v32 = *(_QWORD *)v21;
      v33 = *(_QWORD *)(v21 + 8);
      v34 = *(_BYTE *)(v21 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v21, v33, v34);
      *(_QWORD *)v20 = v32;
      *(_QWORD *)(v20 + 8) = v33;
      v24 = v54;
      *(_BYTE *)(v20 + 16) = v34;
      v35 = *(void **)(v21 + 24);
      *(_QWORD *)(v20 + 24) = v35;
      v36 = *(_QWORD *)(v21 + 40);
      *(_QWORD *)(v20 + 32) = *(_QWORD *)(v21 + 32);
      *(_QWORD *)(v20 + 40) = v36;
      *(_BYTE *)(v20 + v12) = 2;
      v37 = v35;
    }
    else
    {
      if (v22 == 1)
      {
        v52 = v13;
        v53 = ~v15;
        v25 = *(_QWORD *)v21;
        v44 = *(_QWORD *)(v21 + 16);
        v46 = *(_QWORD *)(v21 + 8);
        v42 = *(_QWORD *)(v21 + 24);
        v48 = *(_BYTE *)(v21 + 34);
        v26 = *(_WORD *)(v21 + 32);
        v50 = v10;
        v51 = v6;
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v21, v46, v44, v42, v26, v48);
        *(_QWORD *)v20 = v25;
        *(_QWORD *)(v20 + 8) = v46;
        *(_QWORD *)(v20 + 16) = v44;
        *(_QWORD *)(v20 + 24) = v42;
        *(_WORD *)(v20 + 32) = v26;
        *(_BYTE *)(v20 + 34) = v48;
        v27 = (v20 + 42) & 0xFFFFFFFFFFFFFFF8;
        v28 = (v21 + 42) & 0xFFFFFFFFFFFFFFF8;
        v45 = *(_QWORD *)(v28 + 8);
        v47 = *(_QWORD *)v28;
        v41 = *(_QWORD *)(v28 + 24);
        v43 = *(_QWORD *)(v28 + 16);
        v49 = *(_BYTE *)(v28 + 34);
        v40 = *(_WORD *)(v28 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)v28, v45, v43, v41, v40, v49);
        *(_QWORD *)v27 = v47;
        *(_QWORD *)(v27 + 8) = v45;
        *(_QWORD *)(v27 + 16) = v43;
        *(_QWORD *)(v27 + 24) = v41;
        *(_WORD *)(v27 + 32) = v40;
        *(_BYTE *)(v27 + 34) = v49;
        v29 = (v8 + 35 + v27) & ~v8;
        v30 = v8 + 35 + v28;
        v13 = v52;
        v31 = v30 & ~v8;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v29, v31, v51);
        *(_BYTE *)(v29 + v50) = *(_BYTE *)(v31 + v50);
        v24 = v53;
        *(_BYTE *)(v20 + v12) = 1;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))((v16 + v20) & v24, (v16 + v21) & v24, v13);
        return a1;
      }
      v38 = *(_QWORD *)(v21 + 8);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *(_QWORD *)((((unint64_t)a1 + v9 + 2) & ~v9) + 8) = v38;
      *(_BYTE *)(v20 + v12) = 0;
    }
    swift_retain();
    goto LABEL_24;
  }
  v19 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = (_WORD *)(v19 + (((v9 | v15) + 16) & ~(v9 | v15)));
  swift_retain();
  return a1;
}

_WORD *initializeWithTake for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *a1 = *a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 2;
  v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = v12 + ((v8 + 75) & ~v8);
  if ((unint64_t)(v13 + 1) > 0x30)
    v14 = v13 + 1;
  else
    v14 = 48;
  v15 = *(unsigned __int8 *)(v11 + v14);
  if (v15 >= 3)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  if (v15 == 2)
  {
    v28 = *(_OWORD *)v11;
    v29 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
    *(_OWORD *)(v10 + 32) = v29;
    *(_OWORD *)v10 = v28;
    v27 = 2;
  }
  else if (v15 == 1)
  {
    v17 = ~v8;
    v18 = *(_OWORD *)v11;
    v19 = *(_OWORD *)(v11 + 16);
    *(_DWORD *)(v10 + 31) = *(_DWORD *)(v11 + 31);
    *(_OWORD *)v10 = v18;
    *(_OWORD *)(v10 + 16) = v19;
    v20 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(_OWORD *)v21;
    v23 = *(_OWORD *)(v21 + 16);
    *(_DWORD *)(v20 + 31) = *(_DWORD *)(v21 + 31);
    *(_OWORD *)v20 = v22;
    *(_OWORD *)(v20 + 16) = v23;
    v24 = v8 + 35;
    v25 = (v24 + v20) & v17;
    v26 = (v24 + v21) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v25, v26, v6);
    *(_BYTE *)(v25 + v12) = *(_BYTE *)(v26 + v12);
    v27 = 1;
  }
  else
  {
    v27 = 0;
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  *(_BYTE *)(v10 + v14) = v27;
  v30 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v30 + 32))((v14 + *(unsigned __int8 *)(v30 + 80) + 1 + v10) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80), (v14 + *(unsigned __int8 *)(v30 + 80) + 1 + v11) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  return a1;
}

_WORD *assignWithTake for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;

  *a1 = *a2;
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 | 7) + 2;
  v10 = ((unint64_t)a1 + v9) & ~(v8 | 7);
  v11 = ((unint64_t)a2 + v9) & ~(v8 | 7);
  if (v10 != v11)
  {
    v12 = v6;
    v13 = *(_QWORD *)(v7 + 64);
    v14 = ((v8 + 75) & ~v8) + v13;
    if ((unint64_t)(v14 + 1) > 0x30)
      v15 = v14 + 1;
    else
      v15 = 48;
    v16 = *(unsigned __int8 *)(v10 + v15);
    if (v16 >= 3)
    {
      if (v15 <= 3)
        v17 = v15;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v36 = a3;
    v19 = ~v8;
    if (v16 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_BYTE *)(v10 + 16));

    }
    else if (v16 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v10, *(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_WORD *)(v10 + 32), *(_BYTE *)(v10 + 34));
      v20 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(_QWORD *)v20, *(_QWORD *)(v20 + 8), *(_QWORD *)(v20 + 16), *(_QWORD *)(v20 + 24), *(_WORD *)(v20 + 32), *(_BYTE *)(v20 + 34));
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + v20 + 35) & v19, v12);
      goto LABEL_18;
    }
    swift_release();
LABEL_18:
    v21 = *(unsigned __int8 *)(v11 + v15);
    if (v21 >= 3)
    {
      if (v15 <= 3)
        v22 = v15;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v21 == 2)
    {
      v32 = *(_OWORD *)v11;
      v33 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v33;
      *(_OWORD *)v10 = v32;
      v31 = 2;
    }
    else
    {
      if (v21 != 1)
      {
        *(_OWORD *)v10 = *(_OWORD *)v11;
        *(_BYTE *)(v10 + v15) = 0;
        goto LABEL_29;
      }
      v23 = *(_OWORD *)v11;
      v24 = *(_OWORD *)(v11 + 16);
      *(_DWORD *)(v10 + 31) = *(_DWORD *)(v11 + 31);
      *(_OWORD *)v10 = v23;
      *(_OWORD *)(v10 + 16) = v24;
      v25 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
      v26 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      *(_DWORD *)(v25 + 31) = *(_DWORD *)(v26 + 31);
      *(_OWORD *)v25 = v27;
      *(_OWORD *)(v25 + 16) = v28;
      v29 = (v8 + 35 + v25) & v19;
      v30 = (v8 + 35 + v26) & v19;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v29, v30, v12);
      *(_BYTE *)(v13 + v29) = *(_BYTE *)(v13 + v30);
      v31 = 1;
    }
    *(_BYTE *)(v10 + v15) = v31;
LABEL_29:
    a3 = v36;
    goto LABEL_30;
  }
  v18 = ((v8 + 75) & ~v8) + *(_QWORD *)(v7 + 64);
  if ((unint64_t)(v18 + 1) > 0x30)
    v15 = v18 + 1;
  else
    v15 = 48;
LABEL_30:
  v34 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v34 + 40))((v15 + *(unsigned __int8 *)(v34 + 80) + 1 + v10) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80), (v15 + *(unsigned __int8 *)(v34 + 80) + 1 + v11) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
  return a1;
}

void sub_187AE58C4()
{
  type metadata accessor for ResolvedButtonStyle(255);
  lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

void sub_187AE5910()
{
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  type metadata accessor for StaticSourceWriter();
}

uint64_t sub_187AE5944()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[12];

  v2 = type metadata accessor for ModifiedContent();
  v6[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, v1, (uint64_t)&protocol conformance descriptor for ResolvedButtonStyle);
  v6[1] = &protocol witness table for StaticSourceWriter<A, B>;
  v3 = MEMORY[0x1E0CE2E70];
  v5[0] = MEMORY[0x18D75FFDC](MEMORY[0x1E0CE2E70], v0, v6);
  v5[1] = &protocol witness table for StaticSourceWriter<A, B>;
  return MEMORY[0x18D75FFDC](v3, v2, v5);
}

unint64_t initializeBufferWithCopyOfBuffer for ButtonAction(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  id v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      v27 = *(_BYTE *)(a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v26, v27);
      *(_QWORD *)a1 = v25;
      *(_QWORD *)(a1 + 8) = v26;
      *(_BYTE *)(a1 + 16) = v27;
      v28 = *(_QWORD *)(a2 + 40);
      v29 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v29;
      *(_QWORD *)(a1 + 40) = v28;
      v30 = (id)v29;
      swift_retain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_BYTE *)(a2 + 34);
      v12 = *(_WORD *)(a2 + 32);
      outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v8, v9, v10, v12, v11);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      *(_WORD *)(a1 + 32) = v12;
      *(_BYTE *)(a1 + 34) = v11;
      v13 = *(_QWORD *)(a2 + 40);
      v14 = *(_QWORD *)(a2 + 48);
      v15 = *(_QWORD *)(a2 + 56);
      v16 = *(_QWORD *)(a2 + 64);
      v17 = *(_BYTE *)(a2 + 74);
      v18 = *(_WORD *)(a2 + 72);
      outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 64) = v16;
      *(_WORD *)(a1 + 72) = v18;
      *(_BYTE *)(a1 + 74) = v17;
      v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
      v23 = type metadata accessor for LinkDestination.Configuration();
      *(_BYTE *)(v20 + *(int *)(v23 + 20)) = *(_BYTE *)(v21 + *(int *)(v23 + 20));
    }
    else
    {
      v31 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v31;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for ButtonAction(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>(a1, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(_BYTE *)(a2 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(_QWORD *)a2, v23, v24);
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      *(_BYTE *)(a1 + 16) = v24;
      v25 = *(void **)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v25;
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      v28 = v25;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        v5 = *(_QWORD *)a2;
        v6 = *(_QWORD *)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 16);
        v8 = *(_QWORD *)(a2 + 24);
        v9 = *(_BYTE *)(a2 + 34);
        v10 = *(_WORD *)(a2 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(_QWORD *)a2, v6, v7, v8, v10, v9);
        *(_QWORD *)a1 = v5;
        *(_QWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a1 + 16) = v7;
        *(_QWORD *)(a1 + 24) = v8;
        *(_WORD *)(a1 + 32) = v10;
        *(_BYTE *)(a1 + 34) = v9;
        v11 = *(_QWORD *)(a2 + 40);
        v12 = *(_QWORD *)(a2 + 48);
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(_QWORD *)(a2 + 64);
        v15 = *(_BYTE *)(a2 + 74);
        v16 = *(_WORD *)(a2 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v16, v15);
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)(a1 + 48) = v12;
        *(_QWORD *)(a1 + 56) = v13;
        *(_QWORD *)(a1 + 64) = v14;
        *(_WORD *)(a1 + 72) = v16;
        *(_BYTE *)(a1 + 74) = v15;
        v17 = *(int *)(type metadata accessor for LinkDestination() + 24);
        v18 = a1 + v17;
        v19 = a2 + v17;
        v20 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
        v21 = type metadata accessor for LinkDestination.Configuration();
        *(_BYTE *)(v18 + *(int *)(v21 + 20)) = *(_BYTE *)(v19 + *(int *)(v21 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      v29 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v29;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

char *initializeWithTake for ButtonAction(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
    v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    v11 = type metadata accessor for LinkDestination.Configuration();
    v8[*(int *)(v11 + 20)] = v9[*(int *)(v11 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ButtonAction(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ModifiedContent<ModifiedContent<TabItem.RootView, EditModeScopeModifier>, HitTestBindingModifier>((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for ButtonAction);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
      v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      v11 = type metadata accessor for LinkDestination.Configuration();
      v8[*(int *)(v11 + 20)] = v9[*(int *)(v11 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t closure #1 in ButtonAction.callAsFunction()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for TestableSubgraph()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TestableSubgraph;
  if (!type metadata singleton initialization cache for TestableSubgraph)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TestableSubgraph()
{
  return swift_initClassMetadata2();
}

uint64_t View.withChildrenForTest<A>(environment:options:body:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t closure #1 in View.withChildrenForTest<A>(environment:options:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(__int128 *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  __int128 v14[3];
  _BYTE v15[16];
  uint64_t v16;

  *(_QWORD *)&v14[0] = a2;
  *((_QWORD *)&v14[0] + 1) = a3;
  v16 = a4;
  swift_retain();
  swift_retain();
  specialized TestableViewContent.init(_:environment:options:)(a1, v14, &v16, a7, a9, (uint64_t)v15);
  type metadata accessor for TestableViewContent(0, a7, a9, v12);
  TestableViewContent.children.getter();
  a5(v14);
  swift_release();
  swift_release();
  return outlined destroy of _VariadicView_Children((uint64_t)v14);
}

uint64_t TestableViewContent.children.getter()
{
  TestableViewContent.list.getter();
  _ViewList_Subgraph.subgraph.getter();
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  return _VariadicView_Children.init(_:contentSubgraph:transform:)();
}

uint64_t closure #1 in TestableViewContent.init(_:environment:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  uint64_t result;
  int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  __int128 v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;

  v50 = a5;
  v43 = a6;
  v73 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1, a1);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  v53[2] = a4;
  v52 = a4;
  v13 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v53, a4, MEMORY[0x1E0DEDCE8], v13, MEMORY[0x1E0DEDD18], v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  v49 = v62;
  v15 = *(_QWORD *)(a2 + 16);
  swift_beginAccess();
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 88);
  v18 = *(_QWORD *)(v15 + 112);
  v57 = *(_QWORD *)(v15 + 72);
  v58 = v16;
  v59 = v17;
  v60 = *(_OWORD *)(v15 + 96);
  v61 = v18;
  *(_QWORD *)&v54 = a3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:options:)();
  v19 = v62;
  LODWORD(v15) = DWORD2(v62);
  v20 = v63;
  v35 = v63;
  v36 = v62;
  LODWORD(v12) = v64;
  v48 = v64;
  v21 = v65;
  v40 = v65;
  v44 = v66;
  v45 = HIDWORD(v64);
  v22 = v67;
  v23 = v68;
  v38 = v68;
  v39 = v67;
  v24 = v69;
  v47 = v69;
  v46 = v70;
  v51 = v71;
  LOBYTE(v17) = v72;
  v37 = v72;
  _GraphValue.init(_:)();
  *(_QWORD *)&v62 = v19;
  DWORD2(v62) = v15;
  v41 = v15;
  v63 = v20;
  v64 = __PAIR64__(v45, v12);
  LODWORD(v12) = v45;
  v65 = v21;
  v25 = v44;
  v66 = v44;
  v67 = v22;
  v68 = v23;
  v69 = v24;
  LODWORD(v24) = v46;
  v70 = v46;
  v71 = v51;
  v72 = v17;
  static View.makeDebuggableViewList(view:inputs:)();
  v62 = 0uLL;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TransactionWrapper and conformance TransactionWrapper();
  v42 = Attribute.init<A>(body:value:flags:update:)();
  v27 = v35;
  v26 = v36;
  *(_QWORD *)&v62 = v36;
  DWORD2(v62) = v15;
  v63 = v35;
  v64 = __PAIR64__(v12, v48);
  LODWORD(v12) = v40;
  v65 = v40;
  v66 = v25;
  v28 = v38;
  v29 = v39;
  v67 = v39;
  v68 = v38;
  v69 = v47;
  v70 = v24;
  v71 = v51;
  LOBYTE(v24) = v37;
  v72 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListCountInputs.init(_:)();
  v34 = v54;
  v62 = v54;
  LODWORD(v63) = v55;
  v64 = v56;
  v52 = (*(uint64_t (**)(__int128 *))(v50 + 40))(&v62);
  LODWORD(v50) = v30;
  v31 = v43;
  *v43 = v49;
  *(_QWORD *)&v62 = v26;
  DWORD2(v62) = v41;
  v63 = v27;
  v64 = __PAIR64__(v45, v48);
  v65 = (int)v12;
  v66 = v44;
  v67 = v29;
  v68 = v28;
  v69 = v47;
  v70 = v46;
  v71 = v51;
  v72 = v24;
  LODWORD(v20) = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v33 = v42;
  v31[1] = v20;
  v31[2] = v33;
  *((_BYTE *)v31 + 12) = 0;
  *((_QWORD *)v31 + 2) = v52;
  *((_BYTE *)v31 + 24) = v50 & 1;
  return result;
}

uint64_t TestableViewContent.list.getter()
{
  uint64_t Value;
  _BYTE v2[40];

  type metadata accessor for ViewList();
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v2);
  _ViewList_Subgraph.wrapping(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void TestableSubgraph.__allocating_init(subgraph:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t TestableSubgraph.__ivar_destroyer()
{
  return swift_release();
}

uint64_t TestableSubgraph.__deallocating_deinit()
{
  _ViewList_Subgraph.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TestableSubgraph()
{
  return type metadata accessor for TestableSubgraph();
}

uint64_t partial apply for closure #1 in View.withChildrenForTest<A>(environment:options:body:)()
{
  uint64_t v0;

  return closure #1 in View.withChildrenForTest<A>(environment:options:body:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void (**)(__int128 *))(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t TransactionWrapper.updateValue()()
{
  uint64_t *v0;
  void (*v1)(_QWORD *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v3;
  _QWORD v4[5];

  v4[4] = *MEMORY[0x1E0C80C00];
  v1 = (void (*)(_QWORD *__return_ptr, uint64_t *))*v0;
  if (!*v0)
LABEL_5:
    __break(1u);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E0CFED28])
  {
    __break(1u);
    goto LABEL_5;
  }
  TransactionID.init<A>(context:)();
  v1(v4, &v3);
  AGGraphSetOutputValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v0);
  *v0 = 0;
  v0[1] = 0;
  return result;
}

double specialized TestableViewContent.init(_:environment:options:)@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  double result;
  __int128 v23;
  uint64_t v24;
  char v25;

  v10 = *a3;
  v23 = *a2;
  type metadata accessor for EmptyViewRendererHost();
  swift_allocObject();
  v11 = EmptyViewRendererHost.init(environment:)();
  swift_retain();
  swift_retain();
  v12 = (void *)GraphHost.graph.getter();
  swift_release();
  AGSubgraphCreate();

  type metadata accessor for TestableSubgraph();
  *(_QWORD *)(swift_allocObject() + 32) = v11;
  v13 = _ViewList_Subgraph.init(subgraph:)();
  swift_retain();
  v14 = (void *)GraphHost.rootSubgraph.getter();
  swift_release();
  swift_retain();
  v15 = (void *)_ViewList_Subgraph.subgraph.getter();
  swift_release();
  AGSubgraphAddChild();

  swift_retain();
  v16 = (void *)_ViewList_Subgraph.subgraph.getter();
  swift_release();
  AGGraphClearUpdate();
  v17 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in TestableViewContent.init(_:environment:options:)(a1, v11, v10, a4, a5, &v23);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  v18 = DWORD2(v23);
  v19 = BYTE12(v23);
  v20 = v24;
  v21 = v25;
  result = *(double *)&v23;
  *(_QWORD *)a6 = v23;
  *(_DWORD *)(a6 + 8) = v18;
  *(_BYTE *)(a6 + 12) = v19;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v13;
  *(_QWORD *)(a6 + 32) = v20;
  *(_BYTE *)(a6 + 40) = v21;
  return result;
}

uint64_t type metadata accessor for TestableViewContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TestableViewContent);
}

unint64_t lazy protocol witness table accessor for type TransactionWrapper and conformance TransactionWrapper()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper;
  if (!lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for TransactionWrapper, &unk_1E1ACC318);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionWrapper and conformance TransactionWrapper);
  }
  return result;
}

void *type metadata accessor for TransactionWrapper()
{
  return &unk_1E1ACC318;
}

uint64_t initializeWithCopy for TestableViewContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TestableViewContent(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithTake for TestableViewContent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestableViewContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TestableViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t PushDestination.init(destination:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void PushDestination.init(presenting:destination:)(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
}

void static PushDestination._makeDestinations(content:inputs:resolved:)()
{
  type metadata accessor for PushDestination();
}

void sub_187AE6B68()
{
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)();
}

void sub_187AE6B98()
{
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for PushDestination.MakeDestination();
}

uint64_t sub_187AE6BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  uint64_t v19;
  int v20;

  v18[2] = a1;
  v18[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PushDestination<A, B>.MakeDestination, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<NavigationDestinationResolverBase>, (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_35, (uint64_t)v18, a1, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v9);
  v10 = AGCreateWeakAttribute();
  v19 = v5;
  v20 = v6;
  v13 = v4;
  v14 = v3;
  v15 = v2;
  v16 = v1;
  v17 = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for PushDestination()
{
  JUMPOUT(0x18D75FF28);
}

void closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)()
{
  type metadata accessor for PushDestination();
}

uint64_t sub_187AE6D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t FunctionTypeMetadata1;
  uint64_t v7;

  v5[2] = a1;
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, FunctionTypeMetadata1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

void implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)()
{
  type metadata accessor for PushDestination.PreferenceTransform();
}

uint64_t sub_187AE6DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[5];
  unsigned int v7;

  v6[2] = a1;
  v6[3] = MEMORY[0x18D75FFDC](&protocol conformance descriptor for PushDestination<A, B>.PreferenceTransform, a1);
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CFEC78]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, a1, MEMORY[0x1E0DEDCE8], v2, MEMORY[0x1E0DEDD18], v3);
  return v7;
}

uint64_t PushDestination.MakeDestination.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Value;
  uint64_t v6;

  type metadata accessor for NavigationDestinationResolver(0, a2, a3, a5);
  swift_getFunctionTypeMetadata1();
  Value = (uint64_t *)AGGraphGetValue();
  v6 = NavigationDestinationResolver.__allocating_init(transform:)(*Value, Value[1]);
  swift_retain();
  return v6;
}

uint64_t PushDestination.PreferenceTransform.destination.getter()
{
  uint64_t result;

  type metadata accessor for NavigationDestinationResolverBase();
  result = AGGraphGetWeakValue();
  if (result)
    return swift_retain();
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PushDestination<A, B>.MakeDestination@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  uint64_t result;

  result = PushDestination.MakeDestination.value.getter(*v2, a1[2], a1[3], a1[4], a1[5]);
  *a2 = result;
  return result;
}

uint64_t (*PushDestination.PreferenceTransform.value.getter())(uint64_t a1)
{
  uint64_t v0;

  v0 = PushDestination.PreferenceTransform.destination.getter();
  *(_QWORD *)(swift_allocObject() + 16) = v0;
  return partial apply for closure #1 in PushDestination.PreferenceTransform.value.getter;
}

uint64_t closure #1 in PushDestination.PreferenceTransform.value.getter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = (_QWORD *)result;
    v3 = swift_retain();
    MEMORY[0x18D75CF58](v3);
    if (*(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PushDestination<A, B>.PreferenceTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = PushDestination.PreferenceTransform.value.getter();
  v4 = v3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for static NavigationDestination._makeDestinations(content:inputs:resolved:) in conformance PushDestination<A, B>()
{
  static PushDestination._makeDestinations(content:inputs:resolved:)();
}

void type metadata accessor for PushDestination.MakeDestination()
{
  JUMPOUT(0x18D75FF28);
}

void partial apply for implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)()
{
  implicit closure #1 in static PushDestination._makeDestinations(content:inputs:resolved:)();
}

_UNKNOWN **associated type witness table accessor for NavigationDestination.Body : NavigationDestination in PushDestination<A, B>()
{
  return &protocol witness table for Never;
}

void base witness table accessor for _AttributeBody in PushDestination<A, B>.MakeDestination()
{
  JUMPOUT(0x18D75FFDCLL);
}

void type metadata accessor for PushDestination.PreferenceTransform()
{
  JUMPOUT(0x18D75FF28);
}

void base witness table accessor for _AttributeBody in PushDestination<A, B>.PreferenceTransform()
{
  JUMPOUT(0x18D75FFDCLL);
}

uint64_t sub_187AE70F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_187AE7114()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PushDestination.PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PushDestination.PreferenceTransform.value.getter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_25;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v19 = v2;
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x18D75E3BC](v5 - 4, a1)
         : (char *)*(id *)(a1 + 8 * v5);
      v7 = v6;
      v2 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      AccessibilityNode.traits.getter(&v18);
      if ((v18 & 0x80000) != 0)
      {
        swift_bridgeObjectRelease();

        return 1;
      }
      v8 = *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
      if (v8)
      {
        v9 = *(_QWORD *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        swift_beginAccess();
        v10 = *(_QWORD *)(v8 + 32);
        if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, 0), (v12 & 1) != 0))
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
          swift_endAccess();
          swift_retain();
          swift_bridgeObjectRetain();
          v14 = v19;
          v15 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E0DEE9D8], v13, v8, 1u);
          v19 = v14;
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
          swift_retain();
          v15 = MEMORY[0x1E0DEE9D8];
        }
        if (v15 >> 62)
          v16 = _CocoaArrayWrapper.endIndex.getter();
        else
          v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);

        swift_release();
        swift_bridgeObjectRelease();
        if (v16)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {

      }
      ++v5;
      if (v2 == v4)
        goto LABEL_26;
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
LABEL_26:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2, char a3, char a4)
{
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12[2];

  v8 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v10 = *(_QWORD *)(v8 + 16);
  v12[0] = v8 + 32;
  v12[1] = v10;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v12, a2 & 1, a3, a4);
  return specialized ContiguousArray._endMutation()();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_ALs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr30C4NodeCG_AE7OptionsVtFZSayAA03g2C6i8VGSayAA4F65VG_ARt_tcfu_33_9dd3dc44810f90035f5de19741f16de0AU_ARtARTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_AIs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr29C4NodeCG_AE7OptionsVtFZSayAA4f12VGAR_SayAA03g2C6I62VGt_tcfu1_32c6725c17a8d2e901e1a99f6670bf37f6AR_AUtARTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1);
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  uint64_t (*v11)(void);
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  int64_t v59;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  char v91;
  char *v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  _OWORD v99[3];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    result = Dictionary.init(minimumCapacity:)();
    *a3 = result;
    return result;
  }
  v89 = v4 - 1;
  if (v4 == 1)
  {
    v7 = swift_bridgeObjectRetain();
  }
  else
  {
    closure #1 in static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)(a1, (uint64_t *)&v103);
    v7 = v103;
  }
  v109 = (char *)MEMORY[0x1E0DEE9D8];
  v110 = v7;
  v107 = MEMORY[0x1E0DEE9D8];
  v108 = MEMORY[0x1E0DEE9D8];
  v92 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = MEMORY[0x1E0DEE9D8];
  v96 = a1 + 32;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 1;
  v11 = MEMORY[0x1E0DEB940];
  v95 = MEMORY[0x1E0DEE9B8] + 8;
  v93 = a2;
  v98 = v4;
  while (2)
  {
    v91 = v10;
    if (v9 <= v4)
      v12 = v4;
    else
      v12 = v9;
    while (1)
    {
      if (v12 == v9)
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      v13 = *(_QWORD *)(v96 + 8 * v9);
      *(_QWORD *)&v100 = v13;
      swift_bridgeObjectRetain();
      AccessibilityProperties.traits.getter();
      if ((v103 & 0x20) == 0)
        goto LABEL_21;
      if (*(_QWORD *)(v13 + 16)
        && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v15 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v13 + 56) + 40 * v14, (uint64_t)&v103);
        v16 = *((_QWORD *)&v104 + 1);
        v17 = v105;
        __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
        v18 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 8);
        swift_bridgeObjectRetain();
        v18(&v100, v16, v17);
        v4 = v98;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      }
      else
      {
        v100 = 0u;
        v101 = 0u;
        swift_bridgeObjectRetain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v11);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))v11);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v19 = v103;
        v20 = BYTE8(v103);
        swift_bridgeObjectRelease();
        if (v19)
        {
          outlined consume of WidgetAuxiliaryTextImagePreference?(v19);
          if (v20 == 3)
            goto LABEL_33;
        }
LABEL_21:
        if ((a2 & 1) != 0)
          goto LABEL_24;
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      if ((a2 & 1) != 0)
      {
LABEL_24:
        *(_QWORD *)&v100 = v13;
        AccessibilityProperties.traits.getter();
        if ((v103 & 1) != 0)
          goto LABEL_33;
      }
LABEL_25:
      if (*(_QWORD *)(v13 + 16)
        && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v22 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v13 + 56) + 40 * v21, (uint64_t)&v103);
        v23 = *((_QWORD *)&v104 + 1);
        v24 = v105;
        __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
        v25 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v24 + 8);
        swift_bridgeObjectRetain();
        v25(&v100, v23, v24);
        v4 = v98;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      }
      else
      {
        v100 = 0u;
        v101 = 0u;
        swift_bridgeObjectRetain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v95, (uint64_t (*)(_QWORD, uint64_t))v11);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))v11);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v26 = v103;
        swift_bridgeObjectRelease();
        if (v26)
          specialized Array.append<A>(contentsOf:)(v26);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_33:
      v27 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v27, &v103);
      swift_bridgeObjectRelease();
      outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v103, (uint64_t)&v100, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
      if (*((_QWORD *)&v102 + 1))
      {
        v99[1] = v101;
        v99[2] = v102;
        v99[0] = v100;
        v28 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v28);
        outlined destroy of AccessibilityValueStorage((uint64_t)v99);
      }
      outlined destroy of AccessibilityTableContext?((uint64_t)&v103, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
      *(_QWORD *)&v103 = v13;
      v29 = AccessibilityProperties.hints.getter();
      specialized Array.append<A>(contentsOf:)(v29);
      v30 = swift_bridgeObjectRetain();
      v31 = specialized AccessibilityProperties.subscript.getter(v30);
      swift_bridgeObjectRelease();
      if (v31)
        specialized Array.append<A>(contentsOf:)(v31);
      if (*(_QWORD *)(v13 + 16)
        && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5710]), (v33 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v13 + 56) + 40 * v32, (uint64_t)&v103);
        v34 = *((_QWORD *)&v104 + 1);
        v35 = v105;
        __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
        v36 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v35 + 8);
        swift_bridgeObjectRetain();
        v36(&v100, v34, v35);
        v4 = v98;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      }
      else
      {
        v100 = 0u;
        v101 = 0u;
        swift_bridgeObjectRetain();
      }
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))v11);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E0CE64B0], (uint64_t (*)(_QWORD, uint64_t))v11);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      v37 = v103;
      v38 = v104;
      swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v37 + 1))
        goto LABEL_54;
      if (v38)
      {
        outlined consume of _ViewList_ID??(v37, *((uint64_t *)&v37 + 1));
LABEL_54:
        v4 = v98;
        goto LABEL_55;
      }
      v39 = HIBYTE(*((_QWORD *)&v37 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v37 + 1) & 0x2000000000000000) == 0)
        v39 = v37 & 0xFFFFFFFFFFFFLL;
      v4 = v98;
      if (v39)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v92 + 2) + 1, 1, v92);
        v41 = *((_QWORD *)v92 + 2);
        v40 = *((_QWORD *)v92 + 3);
        if (v41 >= v40 >> 1)
          v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v92);
        *((_QWORD *)v92 + 2) = v41 + 1;
        *(_OWORD *)&v92[16 * v41 + 32] = v37;
        a2 = v93;
        goto LABEL_54;
      }
      outlined consume of _ViewList_ID??(v37, *((uint64_t *)&v37 + 1));
LABEL_55:
      *(_QWORD *)&v103 = v13;
      LOBYTE(v100) = 8;
      if ((AccessibilityProperties.subscript.getter() & 1) == 0)
        break;
      swift_bridgeObjectRelease();
LABEL_11:
      if (v4 == ++v9)
      {
        v43 = v91;
        goto LABEL_63;
      }
    }
    *(_QWORD *)&v103 = v13;
    LOBYTE(v100) = 5;
    v42 = AccessibilityProperties.subscript.getter();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
      goto LABEL_11;
    v10 = 0;
    v43 = 0;
    if (v89 != v9++)
      continue;
    break;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  v45 = v109;
  if (*((_QWORD *)v109 + 2))
    goto LABEL_88;
  v97 = v43;
  swift_bridgeObjectRetain();
  v46 = 0;
  v47 = MEMORY[0x1E0CE5DB8];
  v48 = MEMORY[0x1E0DEB940];
  v12 = a1;
  do
  {
    v49 = *(_QWORD *)(v12 + 8 * v46 + 32);
    if (*(_QWORD *)(v49 + 16)
      && (v50 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v51 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v49 + 56) + 40 * v50, (uint64_t)&v103);
      v52 = *((_QWORD *)&v104 + 1);
      v53 = v105;
      __swift_project_boxed_opaque_existential_1(&v103, *((uint64_t *)&v104 + 1));
      v54 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v53 + 8);
      swift_bridgeObjectRetain();
      v55 = v53;
      a2 = v93;
      v54(&v100, v52, v55);
      v12 = a1;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
    }
    else
    {
      v100 = 0u;
      v101 = 0u;
      swift_bridgeObjectRetain();
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v47, (uint64_t (*)(_QWORD, uint64_t))v48);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v56 = v103;
      swift_bridgeObjectRelease();
      if (v56)
      {
        v57 = *(_QWORD *)(v56 + 16);
        v58 = v109;
        v59 = *((_QWORD *)v109 + 2);
        v12 = v59 + v57;
        if (__OFADD__(v59, v57))
          goto LABEL_119;
        isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v61 = *((_QWORD *)v58 + 3) >> 1, v61 < v12))
        {
          if (v59 <= v12)
            v62 = v59 + v57;
          else
            v62 = v59;
          v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v62, 1, v58);
          v61 = *((_QWORD *)v58 + 3) >> 1;
        }
        v12 = a1;
        v4 = v98;
        if (*(_QWORD *)(v56 + 16))
        {
          if (v61 - *((_QWORD *)v58 + 2) < v57)
            goto LABEL_121;
          swift_arrayInitWithCopy();
          if (v57)
          {
            v63 = *((_QWORD *)v58 + 2);
            v64 = __OFADD__(v63, v57);
            v65 = v63 + v57;
            if (v64)
              goto LABEL_122;
            *((_QWORD *)v58 + 2) = v65;
          }
        }
        else if (v57)
        {
          goto LABEL_120;
        }
        outlined consume of WidgetAuxiliaryTextImagePreference?(v56);
        v109 = v58;
        a2 = v93;
      }
    }
    else
    {
      *(_QWORD *)&v103 = 1;
      BYTE8(v103) = 0;
      swift_bridgeObjectRelease();
    }
    ++v46;
  }
  while (v4 != v46);
  swift_bridgeObjectRelease();
  v45 = v109;
  v43 = v97;
  if (*((_QWORD *)v109 + 2))
  {
LABEL_88:
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8]);
    *((_QWORD *)&v104 + 1) = v66;
    *(_QWORD *)&v105 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>();
    *(_QWORD *)&v103 = v45;
    BYTE8(v103) = 2;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)&v103, MEMORY[0x1E0CE5888]);
  }
  v67 = v108;
  if (*(_QWORD *)(v108 + 16))
  {
    v68 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v68, &v103);
    swift_bridgeObjectRelease();
    v69 = *((_QWORD *)&v105 + 1);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v103, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    if (v69)
    {
      swift_bridgeObjectRetain();
      v70 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v70, &v103);
      result = swift_bridgeObjectRelease();
      if (!*((_QWORD *)&v105 + 1))
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((_QWORD *)&v105 + 1) = v67;
    }
    else
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v102 = 0;
      v100 = 0u;
      v101 = 0u;
      swift_bridgeObjectRetain();
      outlined destroy of AccessibilityTableContext?((uint64_t)&v100, &lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E0CE5030]);
      v100 = 0u;
      v101 = 0u;
      *(_QWORD *)&v102 = 0;
      *((_QWORD *)&v102 + 1) = v67;
      v103 = 0u;
      v104 = 0u;
      v105 = v102;
    }
    v71 = MEMORY[0x1E0CE5E40];
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)&v103, (uint64_t)&v100, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E0CE5E40]);
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v100);
    outlined destroy of AccessibilityTableContext?((uint64_t)&v103, &lazy cache variable for type metadata for AccessibilityValueStorage?, v71);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  MEMORY[0x18D75A2A0](v107);
  *(_QWORD *)&v103 = v92;
  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v72 = BidirectionalCollection<>.joined(separator:)();
  v74 = v73;
  swift_bridgeObjectRelease();
  v75 = HIBYTE(v74) & 0xF;
  if ((v74 & 0x2000000000000000) == 0)
    v75 = v72 & 0xFFFFFFFFFFFFLL;
  if (!v75)
  {
    swift_bridgeObjectRelease();
    v72 = 0;
    v74 = 0;
  }
  specialized AccessibilityProperties.subscript.setter(v72, v74, 0);
  if (*(_QWORD *)(v106 + 16))
  {
    v76 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.setter(v76);
    if ((v43 & 1) == 0)
      goto LABEL_102;
  }
  else
  {
    specialized AccessibilityProperties.subscript.setter(0);
    if ((v43 & 1) == 0)
    {
LABEL_102:
      LOBYTE(v103) = 8;
      AccessibilityProperties.subscript.setter();
    }
  }
  LOBYTE(v103) = 5;
  AccessibilityProperties.subscript.setter();
  v77 = v110;
  if ((a2 & 1) != 0)
  {
    v78 = swift_bridgeObjectRetain();
    v79 = specialized AccessibilityProperties.subscript.getter(v78);
    swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v79 + 16);
    swift_bridgeObjectRelease();
    if (v80)
    {
      LOBYTE(v103) = 0;
      AccessibilityProperties.subscript.setter();
      LOBYTE(v103) = 3;
      AccessibilityProperties.subscript.setter();
      v77 = v110;
    }
  }
  v81 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5788]);
  if ((v82 & 1) != 0)
  {
    v12 = v81;
    v83 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v100 = v77;
    v110 = 0x8000000000000000;
    if ((v83 & 1) != 0)
    {
LABEL_108:
      outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v77 + 56) + 40 * v12), (uint64_t)&v103);
      specialized _NativeDictionary._delete(at:)(v12, v77);
      v110 = v77;
      swift_bridgeObjectRelease();
      goto LABEL_110;
    }
LABEL_123:
    specialized _NativeDictionary.copy()();
    v77 = v100;
    goto LABEL_108;
  }
  *(_QWORD *)&v105 = 0;
  v103 = 0u;
  v104 = 0u;
LABEL_110:
  outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v103);
  LOBYTE(v103) = 19;
  AccessibilityProperties.subscript.setter();
  v84 = v110;
  v85 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
  if ((v86 & 1) != 0)
  {
    v87 = v85;
    v88 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v100 = v84;
    if ((v88 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v84 = v100;
    }
    outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v84 + 56) + 40 * v87), (uint64_t)&v103);
    specialized _NativeDictionary._delete(at:)(v87, v84);
    v110 = v84;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)&v105 = 0;
    v103 = 0u;
    v104 = 0u;
  }
  outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v103);
  *a3 = v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in Collection<>.filterVisible(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  int v5;
  int v6;

  AccessibilityNode.visibility.getter(&v5);
  if ((v5 & 4) != 0 || (v5 & 8) != 0 && (v6 & 4) == 0 || (AccessibilityNode.isPlaceholderOrIgnored.getter() & 1) != 0)
    return 0;
  if (a2)
    return a2(a1) & 1;
  return 1;
}

uint64_t AccessibilityChildBehavior.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

Swift::Int AccessibilityChildBehavior.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityChildBehavior()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AccessibilityChildBehavior()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityChildBehavior()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v3);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior)
  {
    result = MEMORY[0x18D75FFDC](&protocol conformance descriptor for AccessibilityChildBehavior, &type metadata for AccessibilityChildBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior and conformance AccessibilityChildBehavior);
  }
  return result;
}

uint64_t one-time initialization function for automatic(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Automatic and conformance AccessibilityChildBehavior.Automatic, (uint64_t)&type metadata for AccessibilityChildBehavior.Automatic, &static AccessibilityChildBehavior.automatic);
}

uint64_t AccessibilityChildBehavior.Ignore.initialAttachment(for:)()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;

  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v3 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v2[3] = v0;
  v2[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  v2[0] = 0x4300000041;
  specialized Dictionary.subscript.setter((uint64_t)v2, MEMORY[0x1E0CE5728]);
  v2[0] = v3;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void specialized AccessibilityChildBehaviorProvider.visibility(for:nodes:)(unint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v7 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = (id)MEMORY[0x18D75E3BC](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(a1 + 32);
LABEL_6:
    v6 = v5;
    swift_bridgeObjectRelease();
    AccessibilityNode.visibility.getter((int *)&v8);

    v7 = v8;
LABEL_9:
    *a2 = v7;
    return;
  }
  __break(1u);
}

uint64_t AccessibilityChildBehavior.Host.initialAttachment(for:)()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;

  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v3 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v2[3] = v0;
  v2[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  v2[0] = 0x3200000032;
  specialized Dictionary.subscript.setter((uint64_t)v2, MEMORY[0x1E0CE5728]);
  v2[0] = v3;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for AccessibilityChildBehaviorProvider.visibility(for:nodes:) in conformance AccessibilityChildBehavior.Host(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  specialized AccessibilityChildBehaviorProvider.visibility(for:nodes:)(a1, a2);
}

uint64_t AccessibilityChildBehavior.Contain.initialAttachment(for:)()
{
  uint64_t inited;
  int v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;

  type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E0CE58F8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_187BF9830;
  static AccessibilityVisibility.containerElement.getter();
  v1 = *(_DWORD *)(inited + 32);
  swift_bridgeObjectRelease();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v5 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v4[3] = v2;
  v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v4[0]) = v1;
  HIDWORD(v4[0]) = v1 | 0x40;
  specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E0CE5728]);
  v4[0] = v5;
  return AccessibilityAttachment.init(properties:)();
}

Swift::Bool __swiftcall AccessibilityChildBehavior.Combine.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  char v1;
  char v2;
  unint64_t rawValue;
  uint64_t v4;
  char v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  int v13;
  char v14;

  v2 = v1;
  rawValue = (unint64_t)a1._rawValue;
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    LOBYTE(a1._rawValue) = swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = v2;
  if (v4 != 1)
  {
    if (v4 < 2 || (v2 & 2) == 0 || (specialized Sequence.contains(where:)(rawValue) & 1) == 0)
    {
LABEL_21:
      LOBYTE(a1._rawValue) = 1;
      return (Swift::Bool)a1._rawValue;
    }
LABEL_14:
    LOBYTE(a1._rawValue) = 0;
    return (Swift::Bool)a1._rawValue;
  }
  if ((rawValue & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x18D75E3BC](0, rawValue);
  }
  else
  {
    if (!*(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return (Swift::Bool)a1._rawValue;
    }
    v6 = *(id *)(rawValue + 32);
  }
  v7 = v6;
  AccessibilityNode.platformElement.getter();
  v9 = v8;

  if (!v9)
  {
    if ((v5 & 8) != 0)
    {
      v10 = (rawValue & 0xC000000000000001) != 0
          ? (id)MEMORY[0x18D75E3BC](0, rawValue)
          : *(id *)(rawValue + 32);
      v11 = v10;
      AccessibilityNode.visibility.getter(&v13);

      if ((v13 & 4) != 0 || (v14 & 4) == 0 && (v13 & 8) != 0)
        goto LABEL_21;
    }
    goto LABEL_14;
  }

  LOBYTE(a1._rawValue) = (v5 & 1) == 0;
  return (Swift::Bool)a1._rawValue;
}

void AccessibilityChildBehavior.Combine.initialAttachment(for:)(unint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  Swift::OpaquePointer v5;
  id *v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  id v19;
  void *v20;
  char *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **p_storeEnumTagSinglePayload;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t (*v55)(void);
  unint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  Swift::Bool v60;
  unint64_t v61;
  char *v62;
  id v63;
  void *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *rawValue;
  uint64_t *v82;
  uint64_t v83;
  _BYTE v84[21];
  char v85;
  uint64_t v86;
  unint64_t v87;
  _OWORD v88[2];
  char v89;
  uint64_t v90;

  LOBYTE(v4) = a2;
  v5._rawValue = (void *)a1;
  v90 = a1;
  v6 = (id *)(a1 >> 62);
  if (a1 >> 62)
    goto LABEL_83;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
LABEL_3:
    v8 = (unint64_t)v5._rawValue & 0xC000000000000001;
    if (((unint64_t)v5._rawValue & 0xC000000000000001) != 0)
    {
      v9 = (id)MEMORY[0x18D75E3BC](0, v5._rawValue);
    }
    else
    {
      if (!*(_QWORD *)(((unint64_t)v5._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_87;
      }
      v9 = *((id *)v5._rawValue + 4);
    }
    v10 = v9;
    AccessibilityNode.platformElement.getter();
    v12 = v11;

    if (!v12)
      goto LABEL_22;

    if (v8)
      v13 = (char *)MEMORY[0x18D75E3BC](0, v5._rawValue);
    else
      v13 = (char *)*((id *)v5._rawValue + 4);
    v14 = v13;
    v15 = MEMORY[0x18D760234](&v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
    v3 = &OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
    if (v15)
    {
      v16 = (void *)v15;
      v17 = (unint64_t *)(v15 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      v18 = *v17;
      swift_bridgeObjectRetain();

    }
    else
    {

      v18 = MEMORY[0x1E0DEE9D8];
    }
    specialized Array.append<A>(contentsOf:)(v18);
    v7 = v90;
    v8 = v90 & 0xC000000000000001;
    if ((v90 & 0xC000000000000001) == 0)
    {
      if (!*(_QWORD *)((v90 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_89;
      }
      v19 = *(id *)(v90 + 32);
LABEL_16:
      v20 = v19;
      AccessibilityNode.visibility.getter((int *)v84);

      *(_QWORD *)&v88[0] = *(_QWORD *)v84;
      AccessibilityNullableOptionSet<>.resolved.getter();
      if (!v89)
        goto LABEL_22;
      if (v8)
      {
        v21 = (char *)MEMORY[0x18D75E3BC](0, v7);
LABEL_21:
        v22 = v21;
        v23 = (unint64_t *)&v21[*v3];
        swift_beginAccess();
        v24 = *v23;
        swift_bridgeObjectRetain();

        specialized Array.append<A>(contentsOf:)(v24);
        goto LABEL_22;
      }
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v21 = (char *)*(id *)(v7 + 32);
        goto LABEL_21;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      return;
    }
LABEL_87:
    v19 = (id)MEMORY[0x18D75E3BC](0, v7);
    goto LABEL_16;
  }
  while (1)
  {
LABEL_22:
    v77 = v4;
    if (!v6)
    {
      v25 = *(_QWORD *)(((unint64_t)v5._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v80 = v25;
      rawValue = v5._rawValue;
      if (!v25)
        break;
      goto LABEL_26;
    }
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    v80 = v25;
    rawValue = v5._rawValue;
    if (!v25)
      break;
LABEL_26:
    v4 = 0;
    v26 = (unint64_t)v5._rawValue & 0xC000000000000001;
    v79 = (char *)v5._rawValue + 32;
    p_storeEnumTagSinglePayload = (void **)(&value witness table for ButtonAction + 56);
    v83 = MEMORY[0x1E0DEE9B8] + 8;
    v78 = (unint64_t)v5._rawValue & 0xC000000000000001;
    while (1)
    {
      v28 = v26 ? (uint64_t *)MEMORY[0x18D75E3BC](v4, v5._rawValue) : (uint64_t *)*(id *)&v79[8 * v4];
      v3 = v28;
      v29 = __OFADD__(v4++, 1);
      if (v29)
        break;
      v6 = (id *)((char *)p_storeEnumTagSinglePayload[485] + (_QWORD)v28);
      v30 = (uint64_t)*v6;
      if (*v6)
      {
        v31 = v6[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        v82 = v28;
        v32 = (uint64_t *)((char *)v28 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
        swift_beginAccess();
        v33 = *v32;
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          *(_QWORD *)v84 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
          v35 = *(_QWORD **)v84;
          v36 = (void **)(v33 + 40);
          do
          {
            v37 = (uint64_t)*(v36 - 1);
            v38 = *v36;
            *(_QWORD *)v84 = v35;
            v39 = v35[2];
            v40 = v35[3];
            swift_bridgeObjectRetain();
            v41 = v38;
            if (v39 >= v40 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v39 + 1, 1);
              v35 = *(_QWORD **)v84;
            }
            v35[2] = v39 + 1;
            v42 = &v35[2 * v39];
            v42[4] = v37;
            v42[5] = v38;
            v36 += 5;
            --v34;
          }
          while (v34);
          swift_bridgeObjectRelease();
          v25 = v80;
          v5._rawValue = rawValue;
          v26 = v78;
        }
        else
        {
          v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        static AccessibilityAttachment.combine(_:)(v35, (uint64_t *)v84);
        swift_bridgeObjectRelease();
        v43 = *(void **)&v84[8];
        v30 = *(_QWORD *)v84;
        v44 = (uint64_t)*v6;
        v45 = v6[1];
        *v6 = *(id *)v84;
        v6[1] = v43;
        v31 = v43;
        swift_bridgeObjectRetain();
        outlined consume of AccessibilityAttachment?(v44, v45);
        v3 = v82;
        *((_BYTE *)v82 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
        p_storeEnumTagSinglePayload = &value witness table for ButtonAction.storeEnumTagSinglePayload;
      }

      if (*(_QWORD *)(v30 + 16)
        && (v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TemporalState),
            (v47 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v30 + 56) + 40 * v46, (uint64_t)v84);
        v48 = v26;
        v49 = v5._rawValue;
        v50 = v25;
        v51 = v3;
        v52 = v86;
        v53 = v87;
        __swift_project_boxed_opaque_existential_1(v84, v86);
        v6 = *(id **)(v53 + 8);
        swift_bridgeObjectRetain();
        v54 = v53;
        v3 = v51;
        v25 = v50;
        v5._rawValue = v49;
        v26 = v48;
        p_storeEnumTagSinglePayload = (void **)(&value witness table for ButtonAction + 56);
        ((void (*)(_OWORD *__return_ptr, uint64_t, unint64_t))v6)(v88, v52, v54);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      }
      else
      {
        memset(v88, 0, sizeof(v88));
        swift_bridgeObjectRetain();
      }
      v55 = MEMORY[0x1E0DEB940];
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v83, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E0CE0CF0], (uint64_t (*)(_QWORD, uint64_t))v55);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v85 = 0;
        v56 = *(unsigned int *)&v84[16] | ((unint64_t)v84[20] << 32);

        swift_bridgeObjectRelease_n();
        if ((v56 & 0x100000000) == 0)
        {
          swift_bridgeObjectRelease();
          type metadata accessor for AnyAccessibilityPropertiesEntry();
          *(_QWORD *)&v88[0] = Dictionary.init(minimumCapacity:)();
          type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?>, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, MEMORY[0x1E0CE6498]);
          v86 = v57;
          v87 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityChildBehaviorKind?> and conformance AccessibilityPropertiesEntry<A>();
          v84[0] = 0;
          specialized Dictionary.subscript.setter((uint64_t)v84, MEMORY[0x1E0CE5768]);
          AccessibilityAttachment.init(properties:)();
          v88[0] = *(_OWORD *)v84;
          v58 = v77;
          goto LABEL_51;
        }
      }
      else
      {
        memset(v84, 0, sizeof(v84));
        v85 = 1;

        swift_bridgeObjectRelease_n();
      }
      if (v4 == v25)
        goto LABEL_50;
    }
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7 == 1)
      goto LABEL_3;
  }
LABEL_50:
  swift_bridgeObjectRelease();
  v59 = swift_bridgeObjectRetain();
  v58 = v77;
  static AccessibilityChildBehavior.Combine.combine(children:options:)(v59, v77, (uint64_t)v84);
  swift_bridgeObjectRelease();
  v88[0] = *(_OWORD *)v84;
LABEL_51:
  *(_QWORD *)v84 = 0x4300000041;
  AccessibilityProperties.visibility.setter();
  if ((v58 & 1) != 0)
  {
    v60 = AccessibilityChildBehavior.Combine.willCreateNode(for:)(v5);
    if (v25)
    {
      if (v60)
      {
        v3 = (uint64_t *)((unint64_t)v5._rawValue & 0xC000000000000001);
        v6 = (id *)((char *)v5._rawValue + 32);
        swift_bridgeObjectRetain();
        v61 = 0;
        while (1)
        {
          if (v3)
          {
            swift_bridgeObjectRetain();
            v62 = (char *)MEMORY[0x18D75E3BC](v61, v5._rawValue);
          }
          else
          {
            v63 = v6[v61];
            swift_bridgeObjectRetain();
            v62 = (char *)v63;
          }
          v64 = v62;
          v65 = &v62[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
          swift_beginAccess();
          v4 = *(_QWORD *)v65;
          v66 = *(_QWORD *)(*(_QWORD *)v65 + 16);
          if (v66)
            break;
          swift_bridgeObjectRetain();
LABEL_66:
          v5._rawValue = rawValue;
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          v29 = __OFADD__(v61++, 1);
          if (v29)
            goto LABEL_82;
          if (v61 == v80)
          {
LABEL_68:
            swift_bridgeObjectRelease();
            goto LABEL_69;
          }
        }
        swift_bridgeObjectRetain();
        v67 = v4 + 40 * v66;
        while (1)
        {
          if (v66 > *(_QWORD *)(v4 + 16))
          {
            __break(1u);
            goto LABEL_76;
          }
          v68 = (void *)AccessibilityAttachment.platformElement.getter();

          if (v68)
            break;
          v67 -= 40;
          if (!--v66)
            goto LABEL_66;
        }
        if (v66 > *(_QWORD *)(v4 + 16))
          goto LABEL_90;
        v70 = AccessibilityAttachment.platformElement.getter();
        if (!v70)
          goto LABEL_93;
        v71 = (void *)v70;
        v67 = (uint64_t)rawValue;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v61 == v80)
          goto LABEL_68;
        if (v3)
        {
          v72 = (id)MEMORY[0x18D75E3BC](v61, rawValue);
          goto LABEL_79;
        }
LABEL_76:
        if ((v61 & 0x8000000000000000) != 0)
          goto LABEL_91;
        if (v61 >= *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_92;
        v72 = v6[v61];
LABEL_79:
        v73 = v72;
        AccessibilityNode.platformElement.getter();
        v75 = v74;

        if (!v75)
          goto LABEL_94;
        swift_bridgeObjectRelease();
        AccessibilityAttachment.platformElement.setter();
      }
    }
  }
LABEL_69:
  v69 = *((_QWORD *)&v88[0] + 1);
  *a3 = *(_QWORD *)&v88[0];
  a3[1] = v69;
  swift_bridgeObjectRelease();
}

uint64_t static AccessibilityChildBehavior.Combine.combine(children:options:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *v38;
  uint64_t ObjectType;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void (*v79)(__int128 *, _QWORD);
  _QWORD *v80;
  uint64_t result;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  id v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _OWORD v93[2];
  char *v94;

  LOBYTE(v3) = a2;
  if (a1 >> 62)
    goto LABEL_128;
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    return AccessibilityAttachment.init()();
  while (2)
  {
    v5 = swift_bridgeObjectRetain();
    v6 = specialized Sequence.filter(_:)(v5, 0);
    swift_bridgeObjectRelease();
    if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
    {
      v83 = swift_bridgeObjectRetain();
      v7 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v83);
      swift_bridgeObjectRelease();
    }
    else
    {
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)&v90 = v7;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v90, 1, 4, 2);
    swift_bridgeObjectRelease();
    v8 = v90;
    if ((v90 & 0x8000000000000000) != 0 || (v90 & 0x4000000000000000) != 0)
    {
      swift_retain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v9 = *(_QWORD *)(v90 + 16);
      swift_retain();
    }
    v85 = 0;
    v84 = a3;
    LODWORD(v89) = v3;
    v86 = v8;
    if (!v9)
    {
      swift_release();
      v28 = (char *)MEMORY[0x1E0DEE9D8];
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_40;
    }
    v3 = 0;
    v10 = v8 & 0xC000000000000001;
    v88 = v8 + 32;
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v87 = (char *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v10)
      {
        v13 = (char *)MEMORY[0x18D75E3BC](v3, v8);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v8 + 16))
          goto LABEL_124;
        v13 = (char *)*(id *)(v88 + 8 * v3);
      }
      v14 = v13;
      v15 = (char *)(v3 + 1);
      if (__OFADD__(v3, 1))
        goto LABEL_114;
      AccessibilityNode.attachment.getter((uint64_t *)&v90);
      a3 = v90;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v17 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      if (v17 >= v16 >> 1)
        v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v17 + 1;
      *(_QWORD *)&v11[8 * v17 + 32] = a3;
      if ((v89 & 1) == 0)
        break;
LABEL_12:

LABEL_13:
      ++v3;
      if (v15 == (char *)v9)
      {
        swift_release();
        v28 = v87;
LABEL_40:
        v29 = *((_QWORD *)v28 + 2);
        v87 = v28;
        if (!v29)
          goto LABEL_65;
        swift_bridgeObjectRetain();
        v30 = 0;
        v88 = MEMORY[0x1E0DEE9B8] + 8;
        while (1)
        {
          v31 = *(_QWORD *)&v28[8 * v30 + 32];
          if ((v31 & 0x8000000000000000) != 0)
            goto LABEL_115;
          if (v31 >= *((_QWORD *)v11 + 2))
            goto LABEL_116;
          v94 = *(char **)&v11[8 * v31 + 32];
          v32 = v94;
          swift_bridgeObjectRetain_n();
          a3 = AGGraphClearUpdate();
          if (*((_QWORD *)v32 + 2)
            && (v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey),
                (v34 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*((_QWORD *)v32 + 7) + 40 * v33, (uint64_t)&v90);
            v36 = *((_QWORD *)&v91 + 1);
            v35 = v92;
            __swift_project_boxed_opaque_existential_1(&v90, *((uint64_t *)&v91 + 1));
            v37 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v35 + 8);
            swift_bridgeObjectRetain();
            v37(v93, v36, v35);
            v28 = v87;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          }
          else
          {
            memset(v93, 0, sizeof(v93));
            swift_bridgeObjectRetain();
          }
          v3 = (unint64_t)MEMORY[0x1E0DEB940];
          type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v88, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t (*)(uint64_t))type metadata accessor for NSObject & PlatformAccessibilityElementProtocol, (uint64_t (*)(uint64_t, uint64_t))v3);
          if ((swift_dynamicCast() & 1) == 0)
            break;
          v38 = (void *)v90;
          swift_bridgeObjectRelease();
          if (!v38)
            goto LABEL_53;
          ObjectType = swift_getObjectType();
          PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(ObjectType, (uint64_t *)&v90);
          outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v38);
          v40 = v90;
LABEL_54:
          AGGraphSetUpdate();
          swift_bridgeObjectRelease();
          if (v40)
          {
            v41 = (uint64_t)v94;
            v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
            if ((v43 & 1) != 0)
            {
              v44 = v42;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v93[0] = v41;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v41 = *(_QWORD *)&v93[0];
              }
              outlined init with take of OptionalBinaryInteger((__int128 *)(*(_QWORD *)(v41 + 56) + 40 * v44), (uint64_t)&v90);
              specialized _NativeDictionary._delete(at:)(v44, v41);
              v94 = (char *)v41;
              swift_bridgeObjectRelease();
            }
            else
            {
              v92 = 0;
              v90 = 0u;
              v91 = 0u;
            }
            outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v90);
            *(_QWORD *)&v90 = v40;
            AccessibilityProperties.merge(with:)((uint64_t *)&v90);
            swift_bridgeObjectRelease();
            v3 = (unint64_t)v94;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if (v31 >= *((_QWORD *)v11 + 2))
              goto LABEL_119;
            *(_QWORD *)&v11[8 * v31 + 32] = v3;
          }
          ++v30;
          swift_bridgeObjectRelease();
          if (v29 == v30)
          {
            swift_bridgeObjectRelease();
            v8 = v86;
LABEL_65:
            v46 = swift_bridgeObjectRetain();
            static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)(v46, 1, (uint64_t *)v93);
            v47 = swift_bridgeObjectRelease();
            a3 = (uint64_t)&v84;
            LOBYTE(v94) = (v89 & 4) != 0;
            MEMORY[0x1E0C80A78](v47, v48);
            v49 = swift_bridgeObjectRetain();
            v50 = v85;
            v51 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SwiftUI23AccessibilityPropertiesVGSayAH0H4NodeCGG_SayAH4TextVG_SayAH03AnyH6ActionVGts5NeverOTg503_s7f4UI23hi6VAA0C4j7CSayAA4k9VGSayAA03l2C6m23VGIgngoo_AC_AEtAH_AKts5N11OIegnrzr_TRAjmrUIgngoo_Tf1cn_nTf4ng_n(v49, v8, partial apply for closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:));
            swift_release();
            swift_bridgeObjectRelease();
            v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_ALs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr30C4NodeCG_AE7OptionsVtFZSayAA03g2C6i8VGSayAA4F65VG_ARt_tcfu_33_9dd3dc44810f90035f5de19741f16de0AU_ARtARTf3nnnpk_nTf1cn_n((uint64_t)v51);
            v53 = *(char **)(v52 + 16);
            if (v53)
            {
              v88 = v50;
              v89 = v51;
              swift_bridgeObjectRetain();
              v3 = 0;
              v54 = (char *)MEMORY[0x1E0DEE9D8];
              while (1)
              {
                v55 = *(_QWORD *)(v52 + 8 * v3 + 32);
                v56 = *(_QWORD *)(v55 + 16);
                v57 = *((_QWORD *)v54 + 2);
                a3 = v57 + v56;
                if (__OFADD__(v57, v56))
                  goto LABEL_117;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v58 = (char *)swift_isUniquelyReferenced_nonNull_native();
                if ((_DWORD)v58 && a3 <= *((_QWORD *)v54 + 3) >> 1)
                {
                  if (*(_QWORD *)(v55 + 16))
                    goto LABEL_78;
                }
                else
                {
                  if (v57 <= a3)
                    v59 = v57 + v56;
                  else
                    v59 = v57;
                  v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58, v59, 1, v54);
                  if (*(_QWORD *)(v55 + 16))
                  {
LABEL_78:
                    if ((*((_QWORD *)v54 + 3) >> 1) - *((_QWORD *)v54 + 2) < v56)
                      goto LABEL_120;
                    swift_arrayInitWithCopy();
                    if (v56)
                    {
                      v60 = *((_QWORD *)v54 + 2);
                      v61 = __OFADD__(v60, v56);
                      v62 = v60 + v56;
                      if (v61)
                        goto LABEL_123;
                      *((_QWORD *)v54 + 2) = v62;
                    }
                    goto LABEL_68;
                  }
                }
                if (v56)
                  goto LABEL_118;
LABEL_68:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v53 == (char *)++v3)
                {
                  swift_bridgeObjectRelease();
                  v51 = v89;
                  goto LABEL_84;
                }
              }
            }
            v54 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_84:
            swift_bridgeObjectRelease();
            specialized AccessibilityProperties.subscript.setter((uint64_t)v54);
            if (*((_QWORD *)v11 + 2) <= 1uLL)
              goto LABEL_111;
            v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay7SwiftUI4TextVG_SayAF22AnyAccessibilityActionVGtG_AIs5NeverOTg503_s7d4UI26h68ChildBehaviorV7CombineV7combine8children7optionsAA0C10AttachmentVSayr29C4NodeCG_AE7OptionsVtFZSayAA4f12VGAR_SayAA03g2C6I62VGt_tcfu1_32c6725c17a8d2e901e1a99f6670bf37f6AR_AUtARTf3nnnpk_nTf1cn_n((uint64_t)v51);
            swift_bridgeObjectRelease();
            v64 = *(_QWORD *)(v63 + 16);
            if (v64)
            {
              swift_bridgeObjectRetain();
              v65 = 0;
              v3 = MEMORY[0x1E0DEE9D8];
              while (1)
              {
                v66 = *(_QWORD *)(v63 + 8 * v65 + 32);
                v67 = *(_QWORD *)(v66 + 16);
                v68 = *(_QWORD *)(v3 + 16);
                v69 = v68 + v67;
                if (__OFADD__(v68, v67))
                  goto LABEL_121;
                a3 = v3;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v70 = (char *)swift_isUniquelyReferenced_nonNull_native();
                if ((_DWORD)v70 && v69 <= *(_QWORD *)(v3 + 24) >> 1)
                {
                  if (*(_QWORD *)(v66 + 16))
                    goto LABEL_98;
                }
                else
                {
                  if (v68 <= v69)
                    v71 = v68 + v67;
                  else
                    v71 = v68;
                  v3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70, v71, 1, (char *)v3);
                  if (*(_QWORD *)(v66 + 16))
                  {
LABEL_98:
                    if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v67)
                      goto LABEL_125;
                    swift_arrayInitWithCopy();
                    if (v67)
                    {
                      v72 = *(_QWORD *)(v3 + 16);
                      v61 = __OFADD__(v72, v67);
                      v73 = v72 + v67;
                      if (v61)
                        goto LABEL_126;
                      *(_QWORD *)(v3 + 16) = v73;
                    }
                    goto LABEL_88;
                  }
                }
                if (v67)
                  goto LABEL_122;
LABEL_88:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v64 == ++v65)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_105;
                }
              }
            }
            v3 = MEMORY[0x1E0DEE9D8];
LABEL_105:
            swift_bridgeObjectRelease();
            v74 = *(_QWORD *)(v3 + 16);
            if (v74)
            {
              swift_bridgeObjectRetain();
              v75 = (char *)(v3 + 56);
              do
              {
                v76 = *((_QWORD *)v75 - 3);
                v77 = *((_QWORD *)v75 - 2);
                v78 = *(v75 - 8);
                swift_bridgeObjectRetain();
                outlined copy of Text.Storage(v76, v77, v78);
                v79 = (void (*)(__int128 *, _QWORD))AccessibilityProperties.labelStorage.modify();
                if (*v80)
                  AccessibilityLabelStorage.removing(_:)();
                v79(&v90, 0);
                outlined consume of Text.Storage(v76, v77, v78);
                swift_bridgeObjectRelease();
                v75 += 32;
                --v74;
              }
              while (v74);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
LABEL_111:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            *(_QWORD *)&v90 = *(_QWORD *)&v93[0];
            AccessibilityAttachment.init(properties:platformElement:)();
            return swift_bridgeObjectRelease();
          }
        }
        *(_QWORD *)&v90 = 1;
        swift_bridgeObjectRelease();
LABEL_53:
        v40 = 0;
        goto LABEL_54;
      }
    }
    v18 = (uint64_t *)&v14[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    a3 = *v18;
    v19 = *(_QWORD *)(*v18 + 16);
    if (!v19)
    {
      swift_bridgeObjectRetain();
LABEL_37:

      swift_bridgeObjectRelease();
      v8 = v86;
      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    v20 = (uint64_t *)(a3 + 40 * v19);
LABEL_26:
    if (v19 > *(_QWORD *)(a3 + 16))
    {
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      swift_bridgeObjectRetain();
      v82 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v82)
        return AccessibilityAttachment.init()();
      continue;
    }
    break;
  }
  v21 = *v20;
  *(_QWORD *)&v90 = *(v20 - 1);
  *((_QWORD *)&v90 + 1) = v21;
  v22 = (void *)AccessibilityAttachment.platformElement.getter();

  if (!v22)
  {
    v20 -= 5;
    if (!--v19)
      goto LABEL_37;
    goto LABEL_26;
  }
  if (v19 > *(_QWORD *)(a3 + 16))
    goto LABEL_127;
  v23 = *v20;
  *(_QWORD *)&v90 = *(v20 - 1);
  *((_QWORD *)&v90 + 1) = v23;
  v24 = AccessibilityAttachment.platformElement.getter();
  if (v24)
  {
    v25 = (void *)v24;
    swift_bridgeObjectRelease();

    v26 = swift_isUniquelyReferenced_nonNull_native();
    v8 = v86;
    if ((v26 & 1) == 0)
      v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v87 + 2) + 1, 1, v87);
    a3 = *((_QWORD *)v87 + 2);
    v27 = *((_QWORD *)v87 + 3);
    if (a3 >= v27 >> 1)
      v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), a3 + 1, 1, v87);
    v12 = v87;
    *((_QWORD *)v87 + 2) = a3 + 1;
    *(_QWORD *)&v12[8 * a3 + 32] = v3;
    goto LABEL_12;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t closure #1 in static AccessibilityChildBehavior.Combine.combine(children:options:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t *a8)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v119;
  _OWORD v120[2];
  __int128 v121;
  _OWORD v122[3];
  __int128 v123;
  _BYTE v124[25];
  _OWORD v125[3];
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;

  v11 = *a1;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v130 = MEMORY[0x1E0DEE9D8];
  v13 = swift_bridgeObjectRetain();
  v14 = specialized AccessibilityProperties.subscript.getter(v13);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRelease();
  v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0, v12);
  v17 = swift_bridgeObjectRetain();
  v18 = specialized AccessibilityProperties.subscript.getter(v17);
  result = swift_bridgeObjectRelease();
  v117 = *(_QWORD *)(v18 + 16);
  if (!v117)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v20 = 0;
  v116 = v18 + 32;
  v109 = MEMORY[0x1E0DEE9B8] + 8;
  v111 = a4;
  v112 = a5;
  v115 = v18;
  v110 = a6;
  while (1)
  {
    if (v20 >= *(_QWORD *)(v18 + 16))
    {
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    outlined init with copy of AnyAccessibilityAction(v116 + 48 * v20, (uint64_t)v126);
    *(_QWORD *)&v125[0] = a3;
    *((_QWORD *)&v125[0] + 1) = a4;
    *(_QWORD *)&v125[1] = a5;
    *((_QWORD *)&v125[1] + 1) = a6;
    v21 = v127;
    v22 = v128;
    __swift_project_boxed_opaque_existential_1(v126, v127);
    v23 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v22 + 80);
    v24 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if ((v23(v125, &type metadata for AccessibilityVoidAction, v24, v21, v22) & 1) == 0)
    {
      if (v129 == 1)
      {
        outlined init with copy of AnyAccessibilityAction((uint64_t)v126, (uint64_t)v125);
      }
      else
      {
        v26 = v127;
        v27 = v128;
        __swift_project_boxed_opaque_existential_1(v126, v127);
        (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t))(v27 + 56))(v125, a2, v26, v27);
      }
      v29 = *((_QWORD *)v16 + 2);
      v28 = *((_QWORD *)v16 + 3);
      if (v29 >= v28 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v29 + 1;
      v30 = &v16[48 * v29];
      v31 = v125[0];
      v32 = v125[1];
      *(_OWORD *)(v30 + 57) = *(_OWORD *)((char *)&v125[1] + 9);
      *((_OWORD *)v30 + 2) = v31;
      *((_OWORD *)v30 + 3) = v32;
      goto LABEL_4;
    }
    v25 = *a7;
    if ((*a7 & 1) == 0)
    {
      if (v129 == 1)
      {
        outlined init with copy of AnyAccessibilityAction((uint64_t)v126, (uint64_t)v125);
      }
      else
      {
        v33 = v127;
        v34 = v128;
        __swift_project_boxed_opaque_existential_1(v126, v127);
        (*(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t))(v34 + 56))(v125, a2, v33, v34);
      }
      v36 = *((_QWORD *)v16 + 2);
      v35 = *((_QWORD *)v16 + 3);
      if (v36 >= v35 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v36 + 1;
      v37 = &v16[48 * v36];
      v38 = v125[0];
      v39 = v125[1];
      *(_OWORD *)(v37 + 57) = *(_OWORD *)((char *)&v125[1] + 9);
      *((_OWORD *)v37 + 2) = v38;
      *((_OWORD *)v37 + 3) = v39;
      *a7 = 1;
      *(_QWORD *)&v123 = v11;
      AccessibilityProperties.traits.getter();
      if ((v125[0] & 1) == 0)
        goto LABEL_21;
      if (*(_QWORD *)(v11 + 16)
        && (v40 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v41 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(_QWORD *)(v11 + 56) + 40 * v40, (uint64_t)v125);
        v42 = *((_QWORD *)&v125[1] + 1);
        v43 = *(_QWORD *)&v125[2];
        __swift_project_boxed_opaque_existential_1(v125, *((uint64_t *)&v125[1] + 1));
        v44 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v43 + 8);
        swift_bridgeObjectRetain();
        v44(&v123, v42, v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v125);
      }
      else
      {
        v123 = 0u;
        *(_OWORD *)v124 = 0u;
        swift_bridgeObjectRetain();
      }
      v45 = MEMORY[0x1E0DEB940];
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))v45);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      v46 = *(_QWORD *)&v125[0];
      swift_bridgeObjectRelease();
      if (v46)
        break;
    }
LABEL_45:
    memset(v125, 0, 41);
    if (*(_QWORD *)(v11 + 16)
      && (v65 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v66 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(_QWORD *)(v11 + 56) + 40 * v65, (uint64_t)&v123);
      v67 = *(_QWORD *)&v124[8];
      v68 = *(_QWORD *)&v124[16];
      __swift_project_boxed_opaque_existential_1(&v123, *(uint64_t *)&v124[8]);
      v69 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v68 + 8);
      swift_bridgeObjectRetain();
      v69(&v121, v67, v68);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    }
    else
    {
      v121 = 0u;
      v122[0] = 0u;
      swift_bridgeObjectRetain();
    }
    v70 = MEMORY[0x1E0DEB940];
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v109, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E0CE5DB8], (uint64_t (*)(_QWORD, uint64_t))v70);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v71 = v123;
      swift_bridgeObjectRelease();
      if (v71)
      {
        if (*(_QWORD *)(v71 + 16))
          goto LABEL_57;
        outlined consume of WidgetAuxiliaryTextImagePreference?(v71);
      }
    }
    else
    {
      *(_QWORD *)&v123 = 1;
      BYTE8(v123) = 0;
      swift_bridgeObjectRelease();
    }
    v72 = v127;
    v73 = v128;
    __swift_project_boxed_opaque_existential_1(v126, v127);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v72, v73);
    if (v77)
    {
      v78 = v74;
      v79 = v75;
      v80 = v76;
      v81 = v77;
      type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E0CE6CF8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_187BF9830;
      *(_QWORD *)(v71 + 32) = v78;
      *(_QWORD *)(v71 + 40) = v79;
      *(_BYTE *)(v71 + 48) = v80 & 1;
      *(_QWORD *)(v71 + 56) = v81;
LABEL_57:
      if ((v25 & 1) != 0)
      {
        v82 = swift_bridgeObjectRetain();
        result = specialized Array.append<A>(contentsOf:)(v82);
        if (!*(_QWORD *)(v71 + 16))
          goto LABEL_80;
      }
      v83 = *(_QWORD *)(v71 + 32);
      v84 = *(_QWORD *)(v71 + 40);
      v85 = *(_BYTE *)(v71 + 48);
      v86 = *(_QWORD *)(v71 + 56);
      outlined copy of Text.Storage(v83, v84, v85);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v121 = v11;
      AnyAccessibilityAction.asCombinedAction(name:properties:child:)(v83, v84, v85, v86, (uint64_t *)&v121, a2, (uint64_t)&v123);
      outlined consume of Text.Storage(v83, v84, v85);
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityTableContext?((uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      outlined init with take of Image.Resolved?((uint64_t)&v123, (uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      goto LABEL_60;
    }
    v71 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_57;
    swift_bridgeObjectRelease();
LABEL_60:
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v125, (uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    v87 = *(_QWORD *)&v124[8];
    outlined destroy of AccessibilityTableContext?((uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    a6 = v110;
    a4 = v111;
    a5 = v112;
    if (!v87)
    {
      if (v129 == 1)
      {
        outlined destroy of AccessibilityTableContext?((uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
        outlined init with copy of AnyAccessibilityAction((uint64_t)v126, (uint64_t)&v123);
      }
      else
      {
        v88 = v127;
        v89 = v128;
        __swift_project_boxed_opaque_existential_1(v126, v127);
        (*(void (**)(__int128 *__return_ptr, void *, uint64_t, uint64_t))(v89 + 56))(&v123, a2, v88, v89);
        outlined destroy of AccessibilityTableContext?((uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
      }
      outlined init with take of Image.Resolved?((uint64_t)&v123, (uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    }
    outlined init with copy of SwiftUIAnySortComparator?((uint64_t)v125, (uint64_t)&v123, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
    if (*(_QWORD *)&v124[8])
    {
      v121 = v123;
      v122[0] = *(_OWORD *)v124;
      *(_OWORD *)((char *)v122 + 9) = *(_OWORD *)&v124[9];
      outlined init with copy of AnyAccessibilityAction((uint64_t)&v121, (uint64_t)&v119);
      v91 = *((_QWORD *)v16 + 2);
      v90 = *((_QWORD *)v16 + 3);
      if (v91 >= v90 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v16);
      *((_QWORD *)v16 + 2) = v91 + 1;
      v92 = &v16[48 * v91];
      v93 = v119;
      v94 = v120[0];
      *(_OWORD *)(v92 + 57) = *(_OWORD *)((char *)v120 + 9);
      *((_OWORD *)v92 + 2) = v93;
      *((_OWORD *)v92 + 3) = v94;
      outlined destroy of AnyAccessibilityAction((uint64_t)&v121);
    }
    outlined destroy of AccessibilityTableContext?((uint64_t)v125, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?, (uint64_t)&type metadata for AnyAccessibilityAction);
LABEL_4:
    result = outlined destroy of AnyAccessibilityAction((uint64_t)v126);
LABEL_5:
    v18 = v115;
    if (++v20 == v117)
    {
      swift_bridgeObjectRelease();
      return v130;
    }
  }
  if (!*(_QWORD *)(v46 + 16))
  {
    outlined consume of WidgetAuxiliaryTextImagePreference?(v46);
    goto LABEL_45;
  }
  v104 = v25;
  v48 = *(_QWORD *)(v46 + 32);
  v47 = *(_QWORD *)(v46 + 40);
  v49 = *(_BYTE *)(v46 + 48);
  swift_bridgeObjectRetain();
  v105 = v48;
  v106 = v47;
  v107 = v49;
  outlined copy of Text.Storage(v48, v47, v49);
  outlined consume of WidgetAuxiliaryTextImagePreference?(v46);
  v50 = *a8;
  if (*(_QWORD *)(*a8 + 16)
    && (v51 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E0CE5888]), (v52 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(_QWORD *)(v50 + 56) + 40 * v51, (uint64_t)v125);
    v53 = *((_QWORD *)&v125[1] + 1);
    v54 = *(_QWORD *)&v125[2];
    __swift_project_boxed_opaque_existential_1(v125, *((uint64_t *)&v125[1] + 1));
    v55 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v54 + 8);
    swift_bridgeObjectRetain();
    v55(&v123, v53, v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v125);
  }
  else
  {
    v123 = 0u;
    *(_OWORD *)v124 = 0u;
    swift_bridgeObjectRetain();
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v56 = *(_QWORD *)&v125[0];
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_43:
    outlined consume of Text.Storage(v105, v106, v107);
LABEL_44:
    swift_bridgeObjectRelease();
    v25 = v104;
    goto LABEL_45;
  }
  v103 = *(_QWORD *)(v56 + 16);
  if (!v103)
  {
    outlined consume of WidgetAuxiliaryTextImagePreference?(v56);
    goto LABEL_43;
  }
  v57 = *(_QWORD *)(v56 + 32);
  v58 = *(_QWORD *)(v56 + 40);
  v59 = *(_BYTE *)(v56 + 48);
  v102 = v56;
  outlined copy of WidgetAuxiliaryTextImagePreference?(v56);
  outlined copy of Text.Storage(v57, v58, v59);
  swift_bridgeObjectRetain();
  v60 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v57, v58, v59);
  swift_bridgeObjectRelease();
  if ((v60 & 1) != 0)
    goto LABEL_40;
  if (v103 == 1)
    goto LABEL_76;
  v61 = *(_QWORD *)(v102 + 64);
  v62 = *(_QWORD *)(v102 + 72);
  v63 = *(_BYTE *)(v102 + 80);
  outlined copy of Text.Storage(v61, v62, v63);
  swift_bridgeObjectRetain();
  v64 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v61, v62, v63);
  result = swift_bridgeObjectRelease();
  if ((v64 & 1) != 0)
  {
LABEL_40:
    outlined consume of WidgetAuxiliaryTextImagePreference?(v102);
    outlined consume of WidgetAuxiliaryTextImagePreference?(v102);
    outlined consume of Text.Storage(v105, v106, v107);
    swift_bridgeObjectRelease();
LABEL_21:
    result = outlined destroy of AnyAccessibilityAction((uint64_t)v126);
    a6 = v110;
    a4 = v111;
    a5 = v112;
    goto LABEL_5;
  }
  if (v103 == 2)
  {
LABEL_76:
    outlined consume of WidgetAuxiliaryTextImagePreference?(v102);
    outlined consume of WidgetAuxiliaryTextImagePreference?(v102);
    outlined consume of Text.Storage(v105, v106, v107);
    goto LABEL_44;
  }
  v95 = v102 + 120;
  v96 = 2;
  while (1)
  {
    v100 = v96 + 1;
    if (__OFADD__(v96, 1))
      break;
    v97 = *(_BYTE *)(v95 - 8);
    v99 = *(_QWORD *)(v95 - 24);
    v98 = *(_QWORD *)(v95 - 16);
    outlined copy of Text.Storage(v99, v98, v97);
    swift_bridgeObjectRetain();
    v101 = static Text.== infix(_:_:)();
    outlined consume of Text.Storage(v99, v98, v97);
    result = swift_bridgeObjectRelease();
    if ((v101 & 1) != 0)
      goto LABEL_40;
    v95 += 32;
    ++v96;
    if (v100 == v103)
      goto LABEL_76;
  }
LABEL_81:
  __break(1u);
  return result;
}

void AccessibilityChildBehavior.Combine.visibility(for:nodes:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  if (!(a2 >> 62))
  {
    v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v10 = 0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_8;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x18D75E3BC](0, a2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(a2 + 32);
LABEL_6:
    v9 = v8;
    swift_bridgeObjectRelease();
    v11 = v5;
    v12 = v6;
    AccessibilityNode.visibilityIgnoringAttachment(with:)(&v11, &v13);

    v10 = v13;
LABEL_9:
    *a3 = v10;
    return;
  }
  __break(1u);
}

void protocol witness for AccessibilityChildBehaviorProvider.initialAttachment(for:) in conformance AccessibilityChildBehavior.Combine(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  AccessibilityChildBehavior.Combine.initialAttachment(for:)(a1, *v2, a2);
}

BOOL protocol witness for AccessibilityChildBehaviorProvider.willCreateNode(for:) in conformance AccessibilityChildBehavior.Combine(Swift::OpaquePointer a1)
{
  return AccessibilityChildBehavior.Combine.willCreateNode(for:)(a1);
}

uint64_t AccessibilityChildBehavior.Automatic.initialAttachment(for:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3 == 1)
      return AccessibilityAttachment.init()();
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v1 == 1)
      return AccessibilityAttachment.init()();
  }
  if (v1)
    v4 = 3;
  else
    v4 = 1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v7 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE6300]);
  v6[3] = v5;
  v6[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>();
  LODWORD(v6[0]) = v4;
  HIDWORD(v6[0]) = v4;
  specialized Dictionary.subscript.setter((uint64_t)v6, MEMORY[0x1E0CE5728]);
  v6[0] = v7;
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

BOOL protocol witness for AccessibilityChildBehaviorProvider.willCreateNode(for:) in conformance AccessibilityChildBehavior.Automatic(unint64_t a1)
{
  uint64_t v1;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 != 1;
}

uint64_t closure #1 in static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = result;
    v7 = *(_QWORD *)(result + 8 * (v2 - 1) + 32);
    result = swift_bridgeObjectRetain();
    if (v2 == 1)
    {
LABEL_7:
      *a2 = result;
      return result;
    }
    result = swift_bridgeObjectRetain();
    v5 = v2 + 2;
    while (v5 - 4 < v2 - 1)
    {
      v6 = *(_QWORD *)(v3 + 8 * v5);
      result = AccessibilityProperties.merge(with:)(&v6);
      if (--v5 == 3)
      {
        swift_bridgeObjectRelease();
        result = v7;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityChildBehaviorBox.willCreateNode(for:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 24))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136)) & 1;
}

uint64_t AccessibilityChildBehaviorBox.initialAttachment(for:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)v1 + 144) + 16))(a1, *(_QWORD *)(*(_QWORD *)v1 + 136));
}

uint64_t AccessibilityChildBehaviorBox.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

